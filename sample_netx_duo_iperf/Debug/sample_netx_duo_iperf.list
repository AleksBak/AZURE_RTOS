
sample_netx_duo_iperf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000613c  0801f89c  0801f89c  0002f89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080259d8  080259d8  000415c0  2**0
                  CONTENTS
  4 .ARM          00000008  080259d8  080259d8  000359d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080259e0  080259e0  000415c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080259e0  080259e0  000359e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080259e4  080259e4  000359e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  080259e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 RAM_START     0000146c  20000154  08025b3c  00040154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006a54  200015c0  200015c0  000415c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20008014  20008014  000415c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000415c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   002961cf  00000000  00000000  000415f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0002b914  00000000  00000000  002d77bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00003678  00000000  00000000  003030d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00007a18  00000000  00000000  00306750  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0005c011  00000000  00000000  0030e168  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00088881  00000000  00000000  0036a179  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00149c7f  00000000  00000000  003f29fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fa  00000000  00000000  0053c679  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008f44  00000000  00000000  0053c774  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    0004c0f5  00000000  00000000  005456b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .stab         00000084  00000000  00000000  005917b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      00000117  00000000  00000000  00591834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200015c0 	.word	0x200015c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f884 	.word	0x0801f884

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200015c4 	.word	0x200015c4
 800020c:	0801f884 	.word	0x0801f884

08000210 <ETH_IRQHandler>:
        .global  __nx_driver_stm32f7xx_ethernet_isr 
.thumb_func
ETH_IRQHandler:
.thumb_func
__nx_driver_stm32f7xx_ethernet_isr:
        PUSH    {lr}
 8000210:	b500      	push	{lr}
        BL      nx_driver_stm32f7xx_ethernet_isr
 8000212:	f001 fd01 	bl	8001c18 <nx_driver_stm32f7xx_ethernet_isr>
        POP     {lr}
 8000216:	f85d eb04 	ldr.w	lr, [sp], #4
        BX      LR
 800021a:	4770      	bx	lr
 800021c:	0000      	movs	r0, r0
	...

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@     
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000222:	481d      	ldr	r0, [pc, #116]	; (8000298 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 8000224:	491d      	ldr	r1, [pc, #116]	; (800029c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @ 
 8000226:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800022a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800022c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000230:	491b      	ldr	r1, [pc, #108]	; (80002a0 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address   
 8000232:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000236:	481b      	ldr	r0, [pc, #108]	; (80002a4 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000238:	4919      	ldr	r1, [pc, #100]	; (80002a0 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800023a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000240:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000242:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register 
 8000246:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000248:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800024c:	4917      	ldr	r1, [pc, #92]	; (80002ac <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800024e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000250:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000254:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000256:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800025a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800025e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000262:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000266:	4912      	ldr	r1, [pc, #72]	; (80002b0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000268:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
        
@
@    /* Return to caller.  */
@    
    BX      lr 
 800026c:	4770      	bx	lr

0800026e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800026e:	f7ff bffe 	b.w	800026e <__tx_BadHandler>

08000272 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000272:	f7ff bffe 	b.w	8000272 <__tx_HardfaultHandler>

08000276 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000276:	f7ff bffe 	b.w	8000276 <__tx_SVCallHandler>

0800027a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800027a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 800027c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000280:	4770      	bx	lr

08000282 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000282:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             ; Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000284:	f000 f894 	bl	80003b0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 8000288:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800028c:	4770      	bx	lr

0800028e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler 
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800028e:	f7ff bffe 	b.w	800028e <__tx_NMIHandler>

08000292 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000292:	f7ff bffe 	b.w	8000292 <__tx_DBGHandler>
 8000296:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000298:	200079c8 	.word	0x200079c8
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 800029c:	20008618 	.word	0x20008618
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 80002a0:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002a4:	20007a78 	.word	0x20007a78
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002a8:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002ac:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002b0:	40ff0000 	.word	0x40ff0000
	...

080002c0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@     
    MOV     r0, #0                                  @ Build value for TX_FALSE
 80002c0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80002c4:	4a22      	ldr	r2, [pc, #136]	; (8000350 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80002c6:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 80002c8:	b662      	cpsie	i
@            
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 80002ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 80002ce:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 80002d2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 80002d6:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80002da:	f3bf 8f6f 	isb	sy

080002de <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@     
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80002de:	e7fe      	b.n	80002de <__tx_wait_here>

080002e0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80002e0:	481c      	ldr	r0, [pc, #112]	; (8000354 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80002e2:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80002e4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80002e8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@       
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80002ea:	b169      	cbz	r1, 8000308 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80002ec:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80002ee:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 80002f2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80002f6:	4c19      	ldr	r4, [pc, #100]	; (800035c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 80002f8:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 80002fc:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 80002fe:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 8000302:	b10d      	cbz	r5, 8000308 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 8000304:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 8000306:	6023      	str	r3, [r4, #0]

08000308 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 8000308:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 800030a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 800030c:	b189      	cbz	r1, 8000332 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 800030e:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 8000310:	b662      	cpsie	i

08000312 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 8000312:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000314:	4c11      	ldr	r4, [pc, #68]	; (800035c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000316:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 8000318:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 800031c:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 800031e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 8000320:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 8000324:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore 
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@       
    BX      lr                                      @ Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts 
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000332:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are 
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV 
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@       
    CPSIE   i                                       @ Enable interrupts
 800034a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800034c:	e7e1      	b.n	8000312 <__tx_ts_restore>
 800034e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000350:	20007a7c 	.word	0x20007a7c
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000354:	20007a80 	.word	0x20007a80
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000358:	20007a84 	.word	0x20007a84
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800035c:	20007b18 	.word	0x20007b18

08000360 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800036e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    LDR     r3, [r0, #12]                           @ Pickup stack starting address
 8000380:	68c3      	ldr	r3, [r0, #12]
    STR     r3, [r2, #28]                           @ Store initial r10 (sl)
 8000382:	61d3      	str	r3, [r2, #28]
    MOV     r3, #0                                  @ Build initial register value
 8000384:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #32]                           @ Store initial r11
 8000388:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800038a:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 800038c:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 800038e:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000392:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000394:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 8000398:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800039a:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 800039c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 80003a0:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 80003a2:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
	...

080003b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80003b0:	4926      	ldr	r1, [pc, #152]	; (800044c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80003b2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 80003b4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80003b8:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80003bc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80003be:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80003c0:	d008      	beq.n	80003d4 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 80003c2:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80003c6:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80003c8:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80003ca:	d103      	bne.n	80003d4 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 80003ce:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80003d2:	6018      	str	r0, [r3, #0]

080003d4 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80003d4:	4920      	ldr	r1, [pc, #128]	; (8000458 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80003d6:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80003d8:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80003da:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80003dc:	d004      	beq.n	80003e8 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80003de:	4b1f      	ldr	r3, [pc, #124]	; (800045c <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 80003e0:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80003e4:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80003e6:	e008      	b.n	80003fa <__tx_timer_done>

080003e8 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 80003e8:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80003ec:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80003ee:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80003f0:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80003f2:	d101      	bne.n	80003f8 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80003f6:	6818      	ldr	r0, [r3, #0]

080003f8 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80003f8:	6008      	str	r0, [r1, #0]

080003fa <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80003fc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80003fe:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 8000400:	d103      	bne.n	800040a <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 8000402:	4916      	ldr	r1, [pc, #88]	; (800045c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000404:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 8000406:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 8000408:	d01c      	beq.n	8000444 <__tx_timer_nothing_expired>

0800040a <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 800040a:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 800040e:	4913      	ldr	r1, [pc, #76]	; (800045c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000410:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000412:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000414:	d001      	beq.n	800041a <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 8000416:	f01e f859 	bl	801e4cc <_tx_timer_expiration_process>

0800041a <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired 
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 800041c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 800041e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000420:	d00e      	beq.n	8000440 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice(); 
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000422:	f01d ffdd 	bl	801e3e0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000426:	4810      	ldr	r0, [pc, #64]	; (8000468 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 8000428:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 800042a:	b949      	cbnz	r1, 8000440 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800042c:	480f      	ldr	r0, [pc, #60]	; (800046c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 800042e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000430:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000432:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 8000436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 800043a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 800043c:	d000      	beq.n	8000440 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 800043e:	6002      	str	r2, [r0, #0]

08000440 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 8000440:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000444 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000444:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 8000448:	4770      	bx	lr
 800044a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 800044c:	2000800c 	.word	0x2000800c
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 8000450:	20007b18 	.word	0x20007b18
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000454:	20008008 	.word	0x20008008
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000458:	20007a90 	.word	0x20007a90
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800045c:	20007b14 	.word	0x20007b14
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000460:	20007b20 	.word	0x20007b20
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000464:	20007bf4 	.word	0x20007bf4
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000468:	20007a7c 	.word	0x20007a7c
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800046c:	20007a80 	.word	0x20007a80
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000470:	20007a84 	.word	0x20007a84
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000474:	e000ed04 	.word	0xe000ed04

08000478 <strcmp>:
 8000478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800047c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000480:	2a01      	cmp	r2, #1
 8000482:	bf28      	it	cs
 8000484:	429a      	cmpcs	r2, r3
 8000486:	d0f7      	beq.n	8000478 <strcmp>
 8000488:	1ad0      	subs	r0, r2, r3
 800048a:	4770      	bx	lr

0800048c <strlen>:
 800048c:	4603      	mov	r3, r0
 800048e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000492:	2a00      	cmp	r2, #0
 8000494:	d1fb      	bne.n	800048e <strlen+0x2>
 8000496:	1a18      	subs	r0, r3, r0
 8000498:	3801      	subs	r0, #1
 800049a:	4770      	bx	lr
 800049c:	0000      	movs	r0, r0
	...

080004a0 <memchr>:
 80004a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004a4:	2a10      	cmp	r2, #16
 80004a6:	db2b      	blt.n	8000500 <memchr+0x60>
 80004a8:	f010 0f07 	tst.w	r0, #7
 80004ac:	d008      	beq.n	80004c0 <memchr+0x20>
 80004ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004b2:	3a01      	subs	r2, #1
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d02d      	beq.n	8000514 <memchr+0x74>
 80004b8:	f010 0f07 	tst.w	r0, #7
 80004bc:	b342      	cbz	r2, 8000510 <memchr+0x70>
 80004be:	d1f6      	bne.n	80004ae <memchr+0xe>
 80004c0:	b4f0      	push	{r4, r5, r6, r7}
 80004c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004ca:	f022 0407 	bic.w	r4, r2, #7
 80004ce:	f07f 0700 	mvns.w	r7, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004d8:	3c08      	subs	r4, #8
 80004da:	ea85 0501 	eor.w	r5, r5, r1
 80004de:	ea86 0601 	eor.w	r6, r6, r1
 80004e2:	fa85 f547 	uadd8	r5, r5, r7
 80004e6:	faa3 f587 	sel	r5, r3, r7
 80004ea:	fa86 f647 	uadd8	r6, r6, r7
 80004ee:	faa5 f687 	sel	r6, r5, r7
 80004f2:	b98e      	cbnz	r6, 8000518 <memchr+0x78>
 80004f4:	d1ee      	bne.n	80004d4 <memchr+0x34>
 80004f6:	bcf0      	pop	{r4, r5, r6, r7}
 80004f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004fc:	f002 0207 	and.w	r2, r2, #7
 8000500:	b132      	cbz	r2, 8000510 <memchr+0x70>
 8000502:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000506:	3a01      	subs	r2, #1
 8000508:	ea83 0301 	eor.w	r3, r3, r1
 800050c:	b113      	cbz	r3, 8000514 <memchr+0x74>
 800050e:	d1f8      	bne.n	8000502 <memchr+0x62>
 8000510:	2000      	movs	r0, #0
 8000512:	4770      	bx	lr
 8000514:	3801      	subs	r0, #1
 8000516:	4770      	bx	lr
 8000518:	2d00      	cmp	r5, #0
 800051a:	bf06      	itte	eq
 800051c:	4635      	moveq	r5, r6
 800051e:	3803      	subeq	r0, #3
 8000520:	3807      	subne	r0, #7
 8000522:	f015 0f01 	tst.w	r5, #1
 8000526:	d107      	bne.n	8000538 <memchr+0x98>
 8000528:	3001      	adds	r0, #1
 800052a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800052e:	bf02      	ittt	eq
 8000530:	3001      	addeq	r0, #1
 8000532:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000536:	3001      	addeq	r0, #1
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	3801      	subs	r0, #1
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_uldivmod>:
 8000540:	b953      	cbnz	r3, 8000558 <__aeabi_uldivmod+0x18>
 8000542:	b94a      	cbnz	r2, 8000558 <__aeabi_uldivmod+0x18>
 8000544:	2900      	cmp	r1, #0
 8000546:	bf08      	it	eq
 8000548:	2800      	cmpeq	r0, #0
 800054a:	bf1c      	itt	ne
 800054c:	f04f 31ff 	movne.w	r1, #4294967295
 8000550:	f04f 30ff 	movne.w	r0, #4294967295
 8000554:	f000 b972 	b.w	800083c <__aeabi_idiv0>
 8000558:	f1ad 0c08 	sub.w	ip, sp, #8
 800055c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000560:	f000 f806 	bl	8000570 <__udivmoddi4>
 8000564:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800056c:	b004      	add	sp, #16
 800056e:	4770      	bx	lr

08000570 <__udivmoddi4>:
 8000570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000574:	9e08      	ldr	r6, [sp, #32]
 8000576:	4604      	mov	r4, r0
 8000578:	4688      	mov	r8, r1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d14b      	bne.n	8000616 <__udivmoddi4+0xa6>
 800057e:	428a      	cmp	r2, r1
 8000580:	4615      	mov	r5, r2
 8000582:	d967      	bls.n	8000654 <__udivmoddi4+0xe4>
 8000584:	fab2 f282 	clz	r2, r2
 8000588:	b14a      	cbz	r2, 800059e <__udivmoddi4+0x2e>
 800058a:	f1c2 0720 	rsb	r7, r2, #32
 800058e:	fa01 f302 	lsl.w	r3, r1, r2
 8000592:	fa20 f707 	lsr.w	r7, r0, r7
 8000596:	4095      	lsls	r5, r2
 8000598:	ea47 0803 	orr.w	r8, r7, r3
 800059c:	4094      	lsls	r4, r2
 800059e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005a2:	0c23      	lsrs	r3, r4, #16
 80005a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80005a8:	fa1f fc85 	uxth.w	ip, r5
 80005ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80005b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005b4:	fb07 f10c 	mul.w	r1, r7, ip
 80005b8:	4299      	cmp	r1, r3
 80005ba:	d909      	bls.n	80005d0 <__udivmoddi4+0x60>
 80005bc:	18eb      	adds	r3, r5, r3
 80005be:	f107 30ff 	add.w	r0, r7, #4294967295
 80005c2:	f080 811b 	bcs.w	80007fc <__udivmoddi4+0x28c>
 80005c6:	4299      	cmp	r1, r3
 80005c8:	f240 8118 	bls.w	80007fc <__udivmoddi4+0x28c>
 80005cc:	3f02      	subs	r7, #2
 80005ce:	442b      	add	r3, r5
 80005d0:	1a5b      	subs	r3, r3, r1
 80005d2:	b2a4      	uxth	r4, r4
 80005d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80005e4:	45a4      	cmp	ip, r4
 80005e6:	d909      	bls.n	80005fc <__udivmoddi4+0x8c>
 80005e8:	192c      	adds	r4, r5, r4
 80005ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80005ee:	f080 8107 	bcs.w	8000800 <__udivmoddi4+0x290>
 80005f2:	45a4      	cmp	ip, r4
 80005f4:	f240 8104 	bls.w	8000800 <__udivmoddi4+0x290>
 80005f8:	3802      	subs	r0, #2
 80005fa:	442c      	add	r4, r5
 80005fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000600:	eba4 040c 	sub.w	r4, r4, ip
 8000604:	2700      	movs	r7, #0
 8000606:	b11e      	cbz	r6, 8000610 <__udivmoddi4+0xa0>
 8000608:	40d4      	lsrs	r4, r2
 800060a:	2300      	movs	r3, #0
 800060c:	e9c6 4300 	strd	r4, r3, [r6]
 8000610:	4639      	mov	r1, r7
 8000612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000616:	428b      	cmp	r3, r1
 8000618:	d909      	bls.n	800062e <__udivmoddi4+0xbe>
 800061a:	2e00      	cmp	r6, #0
 800061c:	f000 80eb 	beq.w	80007f6 <__udivmoddi4+0x286>
 8000620:	2700      	movs	r7, #0
 8000622:	e9c6 0100 	strd	r0, r1, [r6]
 8000626:	4638      	mov	r0, r7
 8000628:	4639      	mov	r1, r7
 800062a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062e:	fab3 f783 	clz	r7, r3
 8000632:	2f00      	cmp	r7, #0
 8000634:	d147      	bne.n	80006c6 <__udivmoddi4+0x156>
 8000636:	428b      	cmp	r3, r1
 8000638:	d302      	bcc.n	8000640 <__udivmoddi4+0xd0>
 800063a:	4282      	cmp	r2, r0
 800063c:	f200 80fa 	bhi.w	8000834 <__udivmoddi4+0x2c4>
 8000640:	1a84      	subs	r4, r0, r2
 8000642:	eb61 0303 	sbc.w	r3, r1, r3
 8000646:	2001      	movs	r0, #1
 8000648:	4698      	mov	r8, r3
 800064a:	2e00      	cmp	r6, #0
 800064c:	d0e0      	beq.n	8000610 <__udivmoddi4+0xa0>
 800064e:	e9c6 4800 	strd	r4, r8, [r6]
 8000652:	e7dd      	b.n	8000610 <__udivmoddi4+0xa0>
 8000654:	b902      	cbnz	r2, 8000658 <__udivmoddi4+0xe8>
 8000656:	deff      	udf	#255	; 0xff
 8000658:	fab2 f282 	clz	r2, r2
 800065c:	2a00      	cmp	r2, #0
 800065e:	f040 808f 	bne.w	8000780 <__udivmoddi4+0x210>
 8000662:	1b49      	subs	r1, r1, r5
 8000664:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000668:	fa1f f885 	uxth.w	r8, r5
 800066c:	2701      	movs	r7, #1
 800066e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000672:	0c23      	lsrs	r3, r4, #16
 8000674:	fb0e 111c 	mls	r1, lr, ip, r1
 8000678:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800067c:	fb08 f10c 	mul.w	r1, r8, ip
 8000680:	4299      	cmp	r1, r3
 8000682:	d907      	bls.n	8000694 <__udivmoddi4+0x124>
 8000684:	18eb      	adds	r3, r5, r3
 8000686:	f10c 30ff 	add.w	r0, ip, #4294967295
 800068a:	d202      	bcs.n	8000692 <__udivmoddi4+0x122>
 800068c:	4299      	cmp	r1, r3
 800068e:	f200 80cd 	bhi.w	800082c <__udivmoddi4+0x2bc>
 8000692:	4684      	mov	ip, r0
 8000694:	1a59      	subs	r1, r3, r1
 8000696:	b2a3      	uxth	r3, r4
 8000698:	fbb1 f0fe 	udiv	r0, r1, lr
 800069c:	fb0e 1410 	mls	r4, lr, r0, r1
 80006a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80006a4:	fb08 f800 	mul.w	r8, r8, r0
 80006a8:	45a0      	cmp	r8, r4
 80006aa:	d907      	bls.n	80006bc <__udivmoddi4+0x14c>
 80006ac:	192c      	adds	r4, r5, r4
 80006ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b2:	d202      	bcs.n	80006ba <__udivmoddi4+0x14a>
 80006b4:	45a0      	cmp	r8, r4
 80006b6:	f200 80b6 	bhi.w	8000826 <__udivmoddi4+0x2b6>
 80006ba:	4618      	mov	r0, r3
 80006bc:	eba4 0408 	sub.w	r4, r4, r8
 80006c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006c4:	e79f      	b.n	8000606 <__udivmoddi4+0x96>
 80006c6:	f1c7 0c20 	rsb	ip, r7, #32
 80006ca:	40bb      	lsls	r3, r7
 80006cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80006d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80006d4:	fa01 f407 	lsl.w	r4, r1, r7
 80006d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80006dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80006e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80006e4:	4325      	orrs	r5, r4
 80006e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80006ea:	0c2c      	lsrs	r4, r5, #16
 80006ec:	fb08 3319 	mls	r3, r8, r9, r3
 80006f0:	fa1f fa8e 	uxth.w	sl, lr
 80006f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80006f8:	fb09 f40a 	mul.w	r4, r9, sl
 80006fc:	429c      	cmp	r4, r3
 80006fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000702:	fa00 f107 	lsl.w	r1, r0, r7
 8000706:	d90b      	bls.n	8000720 <__udivmoddi4+0x1b0>
 8000708:	eb1e 0303 	adds.w	r3, lr, r3
 800070c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000710:	f080 8087 	bcs.w	8000822 <__udivmoddi4+0x2b2>
 8000714:	429c      	cmp	r4, r3
 8000716:	f240 8084 	bls.w	8000822 <__udivmoddi4+0x2b2>
 800071a:	f1a9 0902 	sub.w	r9, r9, #2
 800071e:	4473      	add	r3, lr
 8000720:	1b1b      	subs	r3, r3, r4
 8000722:	b2ad      	uxth	r5, r5
 8000724:	fbb3 f0f8 	udiv	r0, r3, r8
 8000728:	fb08 3310 	mls	r3, r8, r0, r3
 800072c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000730:	fb00 fa0a 	mul.w	sl, r0, sl
 8000734:	45a2      	cmp	sl, r4
 8000736:	d908      	bls.n	800074a <__udivmoddi4+0x1da>
 8000738:	eb1e 0404 	adds.w	r4, lr, r4
 800073c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000740:	d26b      	bcs.n	800081a <__udivmoddi4+0x2aa>
 8000742:	45a2      	cmp	sl, r4
 8000744:	d969      	bls.n	800081a <__udivmoddi4+0x2aa>
 8000746:	3802      	subs	r0, #2
 8000748:	4474      	add	r4, lr
 800074a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800074e:	fba0 8902 	umull	r8, r9, r0, r2
 8000752:	eba4 040a 	sub.w	r4, r4, sl
 8000756:	454c      	cmp	r4, r9
 8000758:	46c2      	mov	sl, r8
 800075a:	464b      	mov	r3, r9
 800075c:	d354      	bcc.n	8000808 <__udivmoddi4+0x298>
 800075e:	d051      	beq.n	8000804 <__udivmoddi4+0x294>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d069      	beq.n	8000838 <__udivmoddi4+0x2c8>
 8000764:	ebb1 050a 	subs.w	r5, r1, sl
 8000768:	eb64 0403 	sbc.w	r4, r4, r3
 800076c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000770:	40fd      	lsrs	r5, r7
 8000772:	40fc      	lsrs	r4, r7
 8000774:	ea4c 0505 	orr.w	r5, ip, r5
 8000778:	e9c6 5400 	strd	r5, r4, [r6]
 800077c:	2700      	movs	r7, #0
 800077e:	e747      	b.n	8000610 <__udivmoddi4+0xa0>
 8000780:	f1c2 0320 	rsb	r3, r2, #32
 8000784:	fa20 f703 	lsr.w	r7, r0, r3
 8000788:	4095      	lsls	r5, r2
 800078a:	fa01 f002 	lsl.w	r0, r1, r2
 800078e:	fa21 f303 	lsr.w	r3, r1, r3
 8000792:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000796:	4338      	orrs	r0, r7
 8000798:	0c01      	lsrs	r1, r0, #16
 800079a:	fbb3 f7fe 	udiv	r7, r3, lr
 800079e:	fa1f f885 	uxth.w	r8, r5
 80007a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80007a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007aa:	fb07 f308 	mul.w	r3, r7, r8
 80007ae:	428b      	cmp	r3, r1
 80007b0:	fa04 f402 	lsl.w	r4, r4, r2
 80007b4:	d907      	bls.n	80007c6 <__udivmoddi4+0x256>
 80007b6:	1869      	adds	r1, r5, r1
 80007b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80007bc:	d22f      	bcs.n	800081e <__udivmoddi4+0x2ae>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d92d      	bls.n	800081e <__udivmoddi4+0x2ae>
 80007c2:	3f02      	subs	r7, #2
 80007c4:	4429      	add	r1, r5
 80007c6:	1acb      	subs	r3, r1, r3
 80007c8:	b281      	uxth	r1, r0
 80007ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80007ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80007d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d6:	fb00 f308 	mul.w	r3, r0, r8
 80007da:	428b      	cmp	r3, r1
 80007dc:	d907      	bls.n	80007ee <__udivmoddi4+0x27e>
 80007de:	1869      	adds	r1, r5, r1
 80007e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80007e4:	d217      	bcs.n	8000816 <__udivmoddi4+0x2a6>
 80007e6:	428b      	cmp	r3, r1
 80007e8:	d915      	bls.n	8000816 <__udivmoddi4+0x2a6>
 80007ea:	3802      	subs	r0, #2
 80007ec:	4429      	add	r1, r5
 80007ee:	1ac9      	subs	r1, r1, r3
 80007f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80007f4:	e73b      	b.n	800066e <__udivmoddi4+0xfe>
 80007f6:	4637      	mov	r7, r6
 80007f8:	4630      	mov	r0, r6
 80007fa:	e709      	b.n	8000610 <__udivmoddi4+0xa0>
 80007fc:	4607      	mov	r7, r0
 80007fe:	e6e7      	b.n	80005d0 <__udivmoddi4+0x60>
 8000800:	4618      	mov	r0, r3
 8000802:	e6fb      	b.n	80005fc <__udivmoddi4+0x8c>
 8000804:	4541      	cmp	r1, r8
 8000806:	d2ab      	bcs.n	8000760 <__udivmoddi4+0x1f0>
 8000808:	ebb8 0a02 	subs.w	sl, r8, r2
 800080c:	eb69 020e 	sbc.w	r2, r9, lr
 8000810:	3801      	subs	r0, #1
 8000812:	4613      	mov	r3, r2
 8000814:	e7a4      	b.n	8000760 <__udivmoddi4+0x1f0>
 8000816:	4660      	mov	r0, ip
 8000818:	e7e9      	b.n	80007ee <__udivmoddi4+0x27e>
 800081a:	4618      	mov	r0, r3
 800081c:	e795      	b.n	800074a <__udivmoddi4+0x1da>
 800081e:	4667      	mov	r7, ip
 8000820:	e7d1      	b.n	80007c6 <__udivmoddi4+0x256>
 8000822:	4681      	mov	r9, r0
 8000824:	e77c      	b.n	8000720 <__udivmoddi4+0x1b0>
 8000826:	3802      	subs	r0, #2
 8000828:	442c      	add	r4, r5
 800082a:	e747      	b.n	80006bc <__udivmoddi4+0x14c>
 800082c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000830:	442b      	add	r3, r5
 8000832:	e72f      	b.n	8000694 <__udivmoddi4+0x124>
 8000834:	4638      	mov	r0, r7
 8000836:	e708      	b.n	800064a <__udivmoddi4+0xda>
 8000838:	4637      	mov	r7, r6
 800083a:	e6e9      	b.n	8000610 <__udivmoddi4+0xa0>

0800083c <__aeabi_idiv0>:
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000848:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <SCB_EnableICache+0x3c>)
 800084e:	2200      	movs	r2, #0
 8000850:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000858:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <SCB_EnableICache+0x3c>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <SCB_EnableICache+0x3c>)
 8000862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000866:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800086c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <SCB_EnableDCache+0x7c>)
 8000888:	2200      	movs	r2, #0
 800088a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800088e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <SCB_EnableDCache+0x7c>)
 8000894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000898:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	0b5b      	lsrs	r3, r3, #13
 800089e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008a2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	08db      	lsrs	r3, r3, #3
 80008a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ac:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	015a      	lsls	r2, r3, #5
 80008b2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008b6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008bc:	490f      	ldr	r1, [pc, #60]	; (80008fc <SCB_EnableDCache+0x7c>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1e5a      	subs	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1ef      	bne.n	80008ae <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	60fa      	str	r2, [r7, #12]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1e5      	bne.n	80008a4 <SCB_EnableDCache+0x24>
 80008d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <SCB_EnableDCache+0x7c>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <SCB_EnableDCache+0x7c>)
 80008e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e6:	6153      	str	r3, [r2, #20]
 80008e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ec:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__io_putchar>:

void BSP_SDRAM_Init();
void USB_OTG_BSP_HS_Init(void);

int __io_putchar(int ch)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8000908:	1d39      	adds	r1, r7, #4
 800090a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090e:	2201      	movs	r2, #1
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <__io_putchar+0x20>)
 8000912:	f01b f955 	bl	801bbc0 <HAL_UART_Transmit>
	return ch;
 8000916:	687b      	ldr	r3, [r7, #4]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20001b04 	.word	0x20001b04

08000924 <_write>:

int _write(int file, char* ptr, int len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e009      	b.n	800094a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	60ba      	str	r2, [r7, #8]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ffde 	bl	8000900 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	429a      	cmp	r2, r3
 8000950:	dbf1      	blt.n	8000936 <_write+0x12>
	}

	return len;
 8000952:	687b      	ldr	r3, [r7, #4]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <hardware_rand_initialize>:

void hardware_rand_initialize(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

	/* Enable clock for the RNG.  */
	STM32F7_RCC_AHB2ENR |= STM32F7_RCC_AHB2ENR_RNGEN;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <hardware_rand_initialize+0x20>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a05      	ldr	r2, [pc, #20]	; (800097c <hardware_rand_initialize+0x20>)
 8000966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096a:	6013      	str	r3, [r2, #0]

	/* Enable the random number generator.  */
	STM32_RNG_CR = STM32_RNG_CR_RNGEN;
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <hardware_rand_initialize+0x24>)
 800096e:	2204      	movs	r2, #4
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	40023834 	.word	0x40023834
 8000980:	50060800 	.word	0x50060800

08000984 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

	if (huart->Instance == USART1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a3c      	ldr	r2, [pc, #240]	; (8000a94 <HAL_UART_MspInit+0x110>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d145      	bne.n	8000a32 <HAL_UART_MspInit+0xae>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a3b      	ldr	r2, [pc, #236]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a35      	ldr	r2, [pc, #212]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <HAL_UART_MspInit+0x114>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

		/**USART1 GPIO Configuration
		 PB7     ------> USART1_RX
		 PA9     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fe:	2307      	movs	r3, #7
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4824      	ldr	r0, [pc, #144]	; (8000a9c <HAL_UART_MspInit+0x118>)
 8000a0a:	f01a fb4d 	bl	801b0a8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a12:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a20:	2307      	movs	r3, #7
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <HAL_UART_MspInit+0x11c>)
 8000a2c:	f01a fb3c 	bl	801b0a8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}
}
 8000a30:	e02c      	b.n	8000a8c <HAL_UART_MspInit+0x108>
	else if (huart->Instance == USART6)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <HAL_UART_MspInit+0x120>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d127      	bne.n	8000a8c <HAL_UART_MspInit+0x108>
		__HAL_RCC_USART6_CLK_ENABLE();
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_UART_MspInit+0x114>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a40:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x114>)
 8000a42:	f043 0320 	orr.w	r3, r3, #32
 8000a46:	6453      	str	r3, [r2, #68]	; 0x44
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_UART_MspInit+0x114>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_UART_MspInit+0x114>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <HAL_UART_MspInit+0x114>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_UART_MspInit+0x114>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8000a6c:	23c0      	movs	r3, #192	; 0xc0
 8000a6e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <HAL_UART_MspInit+0x124>)
 8000a88:	f01a fb0e 	bl	801b0a8 <HAL_GPIO_Init>
}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40011400 	.word	0x40011400
 8000aa8:	40020800 	.word	0x40020800

08000aac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ab4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_USART1_UART_Init+0x54>)
 8000af0:	f01b f970 	bl	801bdd4 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d000      	beq.n	8000afc <MX_USART1_UART_Init+0x50>
	{
		while (1);
 8000afa:	e7fe      	b.n	8000afa <MX_USART1_UART_Init+0x4e>
	}
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20001b04 	.word	0x20001b04
 8000b04:	40011000 	.word	0x40011000

08000b08 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b092      	sub	sp, #72	; 0x48
 8000b0c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1c:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b26:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000b28:	2319      	movs	r3, #25
 8000b2a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 8000b2c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b36:	2309      	movs	r3, #9
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f01a fc5f 	bl	801b400 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d000      	beq.n	8000b52 <SystemClock_Config+0x4a>
	{
		while (1)
 8000b50:	e7fe      	b.n	8000b50 <SystemClock_Config+0x48>
			;
		}
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 8000b52:	f01a fc19 	bl	801b388 <HAL_PWREx_EnableOverDrive>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d000      	beq.n	8000b66 <SystemClock_Config+0x5e>
	{
		while (1)
 8000b64:	e7fe      	b.n	8000b64 <SystemClock_Config+0x5c>
			;
		}
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1
 8000b66:	230f      	movs	r3, #15
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7c:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b82:	2107      	movs	r1, #7
 8000b84:	4618      	mov	r0, r3
 8000b86:	f01a fe35 	bl	801b7f4 <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d000      	beq.n	8000b9a <SystemClock_Config+0x92>
	{
		while (1)
 8000b98:	e7fe      	b.n	8000b98 <SystemClock_Config+0x90>
		{
			;
		}
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3748      	adds	r7, #72	; 0x48
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <MPU_Config>:
 *         The Region Size is 256KB, it is related to SRAM1 and SRAM2  memory size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000baa:	f019 fe71 	bl	801a890 <HAL_MPU_Disable>

	/* Configure the MPU attributes as cacheable for SRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20010000;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MPU_Config+0x84>)
 8000bb4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000bb6:	2311      	movs	r3, #17
 8000bb8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f019 fe79 	bl	801a8d4 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8000be6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bea:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000bec:	2316      	movs	r3, #22
 8000bee:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c10:	463b      	mov	r3, r7
 8000c12:	4618      	mov	r0, r3
 8000c14:	f019 fe5e 	bl	801a8d4 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f019 fe49 	bl	801a8b0 <HAL_MPU_Enable>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20010000 	.word	0x20010000

08000c2c <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 8000c30:	f7ff fe06 	bl	8000840 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8000c34:	f7ff fe24 	bl	8000880 <SCB_EnableDCache>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <hardware_setup>:

void hardware_setup(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	/* Configure the MPU attributes as Write Through */
	MPU_Config();
 8000c40:	f7ff ffb0 	bl	8000ba4 <MPU_Config>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 8000c44:	f7ff fff2 	bl	8000c2c <CPU_CACHE_Enable>

	/* STM32F7xx HAL library initialization */
	HAL_Init();
 8000c48:	f019 fd94 	bl	801a774 <HAL_Init>

	/* Configure the system clock to 216 MHz */
	SystemClock_Config();
 8000c4c:	f7ff ff5c 	bl	8000b08 <SystemClock_Config>

	/* Configure the SDRAM.  */
	BSP_SDRAM_Init();
 8000c50:	f019 fd08 	bl	801a664 <BSP_SDRAM_Init>

	/* Initialize UART for printf.  */
	MX_USART1_UART_Init();
 8000c54:	f7ff ff2a 	bl	8000aac <MX_USART1_UART_Init>

	/* Initialize the hardware random number generator.  */
	hardware_rand_initialize();
 8000c58:	f7ff fe80 	bl	800095c <hardware_rand_initialize>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <main>:
extern VOID nx_driver_stm32f7xx(NX_IP_DRIVER*);

VOID hardware_setup(void);

int main(int argc, char** argv)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
	/* Setup the hardware. */
	hardware_setup();
 8000c6a:	f7ff ffe7 	bl	8000c3c <hardware_setup>

	/* Enter the ThreadX kernel.  */
	tx_kernel_enter();
 8000c6e:	f01b feef 	bl	801ca50 <_tx_initialize_kernel_enter>
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <tx_application_define>:

/* Define what the initial system looks like.  */
void tx_application_define(void* first_unused_memory)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af08      	add	r7, sp, #32
 8000c82:	6078      	str	r0, [r7, #4]

	UINT status;

	/* Setup the working pointer.  */
	pointer = (UCHAR*)first_unused_memory;
 8000c84:	4a69      	ldr	r2, [pc, #420]	; (8000e2c <tx_application_define+0x1b0>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]

	/* Initialize the NetX system.  */
	nx_system_initialize();
 8000c8a:	f005 ff65 	bl	8006b58 <_nx_system_initialize>

	/* Create a packet pool.  */
	status = nx_packet_pool_create(&pool_0, "NetX Main Packet Pool",
 8000c8e:	4b67      	ldr	r3, [pc, #412]	; (8000e2c <tx_application_define+0x1b0>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b67      	ldr	r3, [pc, #412]	; (8000e30 <tx_application_define+0x1b4>)
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	4613      	mov	r3, r2
 8000c98:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c9c:	4965      	ldr	r1, [pc, #404]	; (8000e34 <tx_application_define+0x1b8>)
 8000c9e:	4866      	ldr	r0, [pc, #408]	; (8000e38 <tx_application_define+0x1bc>)
 8000ca0:	f005 fe26 	bl	80068f0 <_nx_packet_pool_create>
 8000ca4:	60f8      	str	r0, [r7, #12]
			1536,
			pointer, NX_PACKET_POOL_SIZE);
	pointer = pointer + NX_PACKET_POOL_SIZE;
 8000ca6:	4b61      	ldr	r3, [pc, #388]	; (8000e2c <tx_application_define+0x1b0>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <tx_application_define+0x1b4>)
 8000cac:	4413      	add	r3, r2
 8000cae:	4a5f      	ldr	r2, [pc, #380]	; (8000e2c <tx_application_define+0x1b0>)
 8000cb0:	6013      	str	r3, [r2, #0]

	/* Check for packet pool create errors.  */
	if (status)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d004      	beq.n	8000cc2 <tx_application_define+0x46>
		error_counter++;
 8000cb8:	4b60      	ldr	r3, [pc, #384]	; (8000e3c <tx_application_define+0x1c0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a5f      	ldr	r2, [pc, #380]	; (8000e3c <tx_application_define+0x1c0>)
 8000cc0:	6013      	str	r3, [r2, #0]

	/* Create an IP instance.  */
	status = nx_ip_create(&ip_0, "NetX IP Instance 0",
 8000cc2:	4b5a      	ldr	r3, [pc, #360]	; (8000e2c <tx_application_define+0x1b0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	9204      	str	r2, [sp, #16]
 8000cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cce:	9203      	str	r2, [sp, #12]
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	4b5b      	ldr	r3, [pc, #364]	; (8000e40 <tx_application_define+0x1c4>)
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	4b58      	ldr	r3, [pc, #352]	; (8000e38 <tx_application_define+0x1bc>)
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4959      	ldr	r1, [pc, #356]	; (8000e44 <tx_application_define+0x1c8>)
 8000ce0:	4859      	ldr	r0, [pc, #356]	; (8000e48 <tx_application_define+0x1cc>)
 8000ce2:	f001 f997 	bl	8002014 <_nx_ip_create>
 8000ce6:	60f8      	str	r0, [r7, #12]
#else
			IP_ADDRESS(192, 168, 111, 2),
			0xFFFFFF00UL,
#endif
			&pool_0, nx_driver_stm32f7xx, pointer, 2048, 1);
	pointer = pointer + 2048;
 8000ce8:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <tx_application_define+0x1b0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000cf0:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <tx_application_define+0x1b0>)
 8000cf2:	6013      	str	r3, [r2, #0]

	/* Check for IP create errors.  */
	if (status)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <tx_application_define+0x88>
		error_counter++;
 8000cfa:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <tx_application_define+0x1c0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <tx_application_define+0x1c0>)
 8000d02:	6013      	str	r3, [r2, #0]

	/* Enable ARP and supply ARP cache memory for IP Instance 0.  */
	status = nx_arp_enable(&ip_0, (void*)pointer, 1024);
 8000d04:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <tx_application_define+0x1b0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	484e      	ldr	r0, [pc, #312]	; (8000e48 <tx_application_define+0x1cc>)
 8000d10:	f000 f996 	bl	8001040 <_nx_arp_enable>
 8000d14:	60f8      	str	r0, [r7, #12]
	pointer = pointer + 1024;
 8000d16:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <tx_application_define+0x1b0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d1e:	4a43      	ldr	r2, [pc, #268]	; (8000e2c <tx_application_define+0x1b0>)
 8000d20:	6013      	str	r3, [r2, #0]

	/* Check for ARP enable errors.  */
	if (status)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <tx_application_define+0xb6>
		error_counter++;
 8000d28:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <tx_application_define+0x1c0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a43      	ldr	r2, [pc, #268]	; (8000e3c <tx_application_define+0x1c0>)
 8000d30:	6013      	str	r3, [r2, #0]

	/* Enable ICMP */
	status = nx_icmp_enable(&ip_0);
 8000d32:	4845      	ldr	r0, [pc, #276]	; (8000e48 <tx_application_define+0x1cc>)
 8000d34:	f000 ff94 	bl	8001c60 <_nx_icmp_enable>
 8000d38:	60f8      	str	r0, [r7, #12]

	/* Check for ICMP enable errors.  */
	if (status)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <tx_application_define+0xce>
		error_counter++;
 8000d40:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <tx_application_define+0x1c0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	4a3d      	ldr	r2, [pc, #244]	; (8000e3c <tx_application_define+0x1c0>)
 8000d48:	6013      	str	r3, [r2, #0]

	/* Enable UDP traffic.  */
	status = nx_udp_enable(&ip_0);
 8000d4a:	483f      	ldr	r0, [pc, #252]	; (8000e48 <tx_application_define+0x1cc>)
 8000d4c:	f007 fd84 	bl	8008858 <_nx_udp_enable>
 8000d50:	60f8      	str	r0, [r7, #12]

	/* Check for UDP enable errors.  */
	if (status)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <tx_application_define+0xe6>
		error_counter++;
 8000d58:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <tx_application_define+0x1c0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a37      	ldr	r2, [pc, #220]	; (8000e3c <tx_application_define+0x1c0>)
 8000d60:	6013      	str	r3, [r2, #0]

	/* Enable TCP traffic.  */
	status = nx_tcp_enable(&ip_0);
 8000d62:	4839      	ldr	r0, [pc, #228]	; (8000e48 <tx_application_define+0x1cc>)
 8000d64:	f006 f860 	bl	8006e28 <_nx_tcp_enable>
 8000d68:	60f8      	str	r0, [r7, #12]

	/* Check for TCP enable errors.  */
	if (status)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d004      	beq.n	8000d7a <tx_application_define+0xfe>
		error_counter++;
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <tx_application_define+0x1c0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <tx_application_define+0x1c0>)
 8000d78:	6013      	str	r3, [r2, #0]

	/* Create the main thread.  */
	tx_thread_create(&thread_0, "thread 0", thread_0_entry, 0,
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <tx_application_define+0x1b0>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	22c8      	movs	r2, #200	; 0xc8
 8000d80:	9206      	str	r2, [sp, #24]
 8000d82:	2201      	movs	r2, #1
 8000d84:	9205      	str	r2, [sp, #20]
 8000d86:	2200      	movs	r2, #0
 8000d88:	9204      	str	r2, [sp, #16]
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	9203      	str	r2, [sp, #12]
 8000d8e:	2204      	movs	r2, #4
 8000d90:	9202      	str	r2, [sp, #8]
 8000d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d96:	9201      	str	r2, [sp, #4]
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	4a2b      	ldr	r2, [pc, #172]	; (8000e4c <tx_application_define+0x1d0>)
 8000d9e:	492c      	ldr	r1, [pc, #176]	; (8000e50 <tx_application_define+0x1d4>)
 8000da0:	482c      	ldr	r0, [pc, #176]	; (8000e54 <tx_application_define+0x1d8>)
 8000da2:	f01c fef7 	bl	801db94 <_txe_thread_create>
			pointer, DEMO_STACK_SIZE,
			4, 4, TX_NO_TIME_SLICE, TX_AUTO_START);
	pointer = pointer + DEMO_STACK_SIZE;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <tx_application_define+0x1b0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <tx_application_define+0x1b0>)
 8000db0:	6013      	str	r3, [r2, #0]

#ifdef FEATURE_NX_IPV6
	/* Set up the IPv6 address here. */
	ipv6_address.nxd_ip_address.v6[3] = 0x3;
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <tx_application_define+0x1dc>)
 8000db4:	2203      	movs	r2, #3
 8000db6:	611a      	str	r2, [r3, #16]
	ipv6_address.nxd_ip_address.v6[2] = 0x0;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <tx_application_define+0x1dc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
	ipv6_address.nxd_ip_address.v6[1] = 0x0;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <tx_application_define+0x1dc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
	ipv6_address.nxd_ip_address.v6[0] = 0xfe800000;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <tx_application_define+0x1dc>)
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <tx_application_define+0x1e0>)
 8000dc8:	605a      	str	r2, [r3, #4]
	ipv6_address.nxd_ip_version = NX_IP_VERSION_V6;
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <tx_application_define+0x1dc>)
 8000dcc:	2206      	movs	r2, #6
 8000dce:	601a      	str	r2, [r3, #0]

	/* Enable ICMPv6 services. */
	status = nxd_icmp_enable(&ip_0);
 8000dd0:	481d      	ldr	r0, [pc, #116]	; (8000e48 <tx_application_define+0x1cc>)
 8000dd2:	f00d fcfd 	bl	800e7d0 <_nxd_icmp_enable>
 8000dd6:	60f8      	str	r0, [r7, #12]
	if (status)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <tx_application_define+0x16c>
		error_counter++;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <tx_application_define+0x1c0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <tx_application_define+0x1c0>)
 8000de6:	6013      	str	r3, [r2, #0]

	/* Enable IPv6 services. */
	status = nxd_ipv6_enable(&ip_0);
 8000de8:	4817      	ldr	r0, [pc, #92]	; (8000e48 <tx_application_define+0x1cc>)
 8000dea:	f00d fe97 	bl	800eb1c <_nxd_ipv6_enable>
 8000dee:	60f8      	str	r0, [r7, #12]
	if (status)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <tx_application_define+0x184>
		error_counter++;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <tx_application_define+0x1c0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <tx_application_define+0x1c0>)
 8000dfe:	6013      	str	r3, [r2, #0]

	status = nxd_ipv6_address_set(&ip_0, 0, &ipv6_address, 10, NX_NULL);
 8000e00:	2300      	movs	r3, #0
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	230a      	movs	r3, #10
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <tx_application_define+0x1dc>)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480f      	ldr	r0, [pc, #60]	; (8000e48 <tx_application_define+0x1cc>)
 8000e0c:	f00d fd5c 	bl	800e8c8 <_nxd_ipv6_address_set>
 8000e10:	60f8      	str	r0, [r7, #12]
	if (status)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <tx_application_define+0x1a6>
		error_counter++;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <tx_application_define+0x1c0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <tx_application_define+0x1c0>)
 8000e20:	6013      	str	r3, [r2, #0]
#endif
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20003afc 	.word	0x20003afc
 8000e30:	00017700 	.word	0x00017700
 8000e34:	0801f89c 	.word	0x0801f89c
 8000e38:	20003b00 	.word	0x20003b00
 8000e3c:	20004b08 	.word	0x20004b08
 8000e40:	080013b5 	.word	0x080013b5
 8000e44:	0801f8b4 	.word	0x0801f8b4
 8000e48:	20003b50 	.word	0x20003b50
 8000e4c:	08000e61 	.word	0x08000e61
 8000e50:	0801f8c8 	.word	0x0801f8c8
 8000e54:	20004a40 	.word	0x20004a40
 8000e58:	20003b3c 	.word	0x20003b3c
 8000e5c:	fe800000 	.word	0xfe800000

08000e60 <thread_0_entry>:

/* Define the test threads.  */
void thread_0_entry(ULONG thread_input)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	6078      	str	r0, [r7, #4]
	UINT status;
	ULONG actual_status;
	ULONG temp;

	/* Create the DHCP instance.  */
	printf("\r\nDHCP In Progress...\r\n");
 8000e68:	4851      	ldr	r0, [pc, #324]	; (8000fb0 <thread_0_entry+0x150>)
 8000e6a:	f01d fc13 	bl	801e694 <puts>

	nx_dhcp_create(&dhcp_client, &ip_0, "dhcp_client");
 8000e6e:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <thread_0_entry+0x154>)
 8000e70:	4951      	ldr	r1, [pc, #324]	; (8000fb8 <thread_0_entry+0x158>)
 8000e72:	4852      	ldr	r0, [pc, #328]	; (8000fbc <thread_0_entry+0x15c>)
 8000e74:	f008 ffdc 	bl	8009e30 <_nx_dhcp_create>

	/* Start the DHCP Client.  */
	nx_dhcp_start(&dhcp_client);
 8000e78:	4850      	ldr	r0, [pc, #320]	; (8000fbc <thread_0_entry+0x15c>)
 8000e7a:	f009 fd21 	bl	800a8c0 <_nx_dhcp_start>

	/* Wait until address is solved. */
	status = nx_ip_status_check(&ip_0, NX_IP_ADDRESS_RESOLVED, &actual_status, 10000);
 8000e7e:	f107 020c 	add.w	r2, r7, #12
 8000e82:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e86:	2102      	movs	r1, #2
 8000e88:	484b      	ldr	r0, [pc, #300]	; (8000fb8 <thread_0_entry+0x158>)
 8000e8a:	f001 faf7 	bl	800247c <_nx_ip_status_check>
 8000e8e:	6278      	str	r0, [r7, #36]	; 0x24

	if (status)
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <thread_0_entry+0x3e>
	{
		/* DHCP Failed...  no IP address! */
		printf("Can't resolve address\r\n");
 8000e96:	484a      	ldr	r0, [pc, #296]	; (8000fc0 <thread_0_entry+0x160>)
 8000e98:	f01d fbfc 	bl	801e694 <puts>
 8000e9c:	e05e      	b.n	8000f5c <thread_0_entry+0xfc>
	}
	else
	{

		/* Get IP address. */
		nx_ip_address_get(&ip_0, (ULONG*)&ip_address[0], (ULONG*)&network_mask[0]);
 8000e9e:	4a49      	ldr	r2, [pc, #292]	; (8000fc4 <thread_0_entry+0x164>)
 8000ea0:	4949      	ldr	r1, [pc, #292]	; (8000fc8 <thread_0_entry+0x168>)
 8000ea2:	4845      	ldr	r0, [pc, #276]	; (8000fb8 <thread_0_entry+0x158>)
 8000ea4:	f001 f802 	bl	8001eac <_nx_ip_address_get>

		/* Convert IP address & network mask from little endian.  */
		temp = *((ULONG*)&ip_address[0]);
 8000ea8:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <thread_0_entry+0x168>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	623b      	str	r3, [r7, #32]
		NX_CHANGE_ULONG_ENDIAN(temp);
 8000eae:	6a3b      	ldr	r3, [r7, #32]
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	4053      	eors	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	4053      	eors	r3, r2
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	623b      	str	r3, [r7, #32]
		*((ULONG*)&ip_address[0]) = temp;
 8000edc:	4a3a      	ldr	r2, [pc, #232]	; (8000fc8 <thread_0_entry+0x168>)
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	6013      	str	r3, [r2, #0]

		temp = *((ULONG*)&network_mask[0]);
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <thread_0_entry+0x164>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	623b      	str	r3, [r7, #32]
		NX_CHANGE_ULONG_ENDIAN(temp);
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4053      	eors	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	0a1b      	lsrs	r3, r3, #8
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	4053      	eors	r3, r2
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	623b      	str	r3, [r7, #32]
		*((ULONG*)&network_mask[0]) = temp;
 8000f16:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <thread_0_entry+0x164>)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	6013      	str	r3, [r2, #0]

		/* Output IP address. */
		printf("IP address: %d.%d.%d.%d\r\n", (UINT)(ip_address[0]), (UINT)(ip_address[1]),
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <thread_0_entry+0x168>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <thread_0_entry+0x168>)
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	461a      	mov	r2, r3
				(UINT)(ip_address[2]), (UINT)(ip_address[3]));
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <thread_0_entry+0x168>)
 8000f2a:	789b      	ldrb	r3, [r3, #2]
		printf("IP address: %d.%d.%d.%d\r\n", (UINT)(ip_address[0]), (UINT)(ip_address[1]),
 8000f2c:	4618      	mov	r0, r3
				(UINT)(ip_address[2]), (UINT)(ip_address[3]));
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <thread_0_entry+0x168>)
 8000f30:	78db      	ldrb	r3, [r3, #3]
		printf("IP address: %d.%d.%d.%d\r\n", (UINT)(ip_address[0]), (UINT)(ip_address[1]),
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	4825      	ldr	r0, [pc, #148]	; (8000fcc <thread_0_entry+0x16c>)
 8000f38:	f01d fb38 	bl	801e5ac <iprintf>

		printf("Mask: %d.%d.%d.%d\r\n", (UINT)(network_mask[0]), (UINT)(network_mask[1]),
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <thread_0_entry+0x164>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <thread_0_entry+0x164>)
 8000f44:	785b      	ldrb	r3, [r3, #1]
 8000f46:	461a      	mov	r2, r3
				(UINT)(network_mask[2]), (UINT)(network_mask[3]));
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <thread_0_entry+0x164>)
 8000f4a:	789b      	ldrb	r3, [r3, #2]
		printf("Mask: %d.%d.%d.%d\r\n", (UINT)(network_mask[0]), (UINT)(network_mask[1]),
 8000f4c:	4618      	mov	r0, r3
				(UINT)(network_mask[2]), (UINT)(network_mask[3]));
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <thread_0_entry+0x164>)
 8000f50:	78db      	ldrb	r3, [r3, #3]
		printf("Mask: %d.%d.%d.%d\r\n", (UINT)(network_mask[0]), (UINT)(network_mask[1]),
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	4603      	mov	r3, r0
 8000f56:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <thread_0_entry+0x170>)
 8000f58:	f01d fb28 	bl	801e5ac <iprintf>
	}
#endif

#ifdef FEATURE_NX_IPV6
	tx_thread_sleep(NX_IP_PERIODIC_RATE);
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f01c f953 	bl	801d208 <_tx_thread_sleep>
#endif

	/* Set the HTTP stack and IPerf stack.  */
	http_stack = pointer;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <thread_0_entry+0x174>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <thread_0_entry+0x178>)
 8000f68:	6013      	str	r3, [r2, #0]
	pointer += HTTP_STACK_SIZE;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <thread_0_entry+0x174>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <thread_0_entry+0x174>)
 8000f74:	6013      	str	r3, [r2, #0]
	iperf_stack = pointer;
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <thread_0_entry+0x174>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <thread_0_entry+0x17c>)
 8000f7c:	6013      	str	r3, [r2, #0]
	pointer += IPERF_STACK_SIZE;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <thread_0_entry+0x174>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <thread_0_entry+0x174>)
 8000f88:	6013      	str	r3, [r2, #0]

	/* Call entry function to start iperf test.  */
	nx_iperf_entry(&pool_0, &ip_0, http_stack, HTTP_STACK_SIZE, iperf_stack, IPERF_STACK_SIZE);
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <thread_0_entry+0x178>)
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <thread_0_entry+0x17c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f96:	9201      	str	r2, [sp, #4]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f9e:	460a      	mov	r2, r1
 8000fa0:	4905      	ldr	r1, [pc, #20]	; (8000fb8 <thread_0_entry+0x158>)
 8000fa2:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <thread_0_entry+0x180>)
 8000fa4:	f002 f8ae 	bl	8003104 <nx_iperf_entry>
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0801f8d4 	.word	0x0801f8d4
 8000fb4:	0801f8ec 	.word	0x0801f8ec
 8000fb8:	20003b50 	.word	0x20003b50
 8000fbc:	20001b90 	.word	0x20001b90
 8000fc0:	0801f8f8 	.word	0x0801f8f8
 8000fc4:	20001b8c 	.word	0x20001b8c
 8000fc8:	20001b88 	.word	0x20001b88
 8000fcc:	0801f910 	.word	0x0801f910
 8000fd0:	0801f92c 	.word	0x0801f92c
 8000fd4:	20003afc 	.word	0x20003afc
 8000fd8:	20004b0c 	.word	0x20004b0c
 8000fdc:	20003af8 	.word	0x20003af8
 8000fe0:	20003b00 	.word	0x20003b00

08000fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fe6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800100e:	f01b f981 	bl	801c314 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001012:	f01d fa6b 	bl	801e4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001016:	f7ff fe23 	bl	8000c60 <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   r0, =_estack
 800101c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8001028:	080259e8 	.word	0x080259e8
  ldr r2, =_sbss
 800102c:	200015c0 	.word	0x200015c0
  ldr r4, =_ebss
 8001030:	20008014 	.word	0x20008014

08001034 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>

08001036 <HardFault_Handler>:
  .size Default_Handler, .-Default_Handler

HardFault_Handler:
  b HardFault_Handler
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler>

08001038 <MemManage_Handler>:

MemManage_Handler:
  b MemManage_Handler
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler>

0800103a <BusFault_Handler>:

BusFault_Handler:
  b BusFault_Handler
 800103a:	e7fe      	b.n	800103a <BusFault_Handler>

0800103c <UsageFault_Handler>:

UsageFault_Handler:
  b UsageFault_Handler
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler>
	...

08001040 <_nx_arp_enable>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	460d      	mov	r5, r1
 8001044:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8001046:	2100      	movs	r1, #0
{
 8001048:	4616      	mov	r6, r2
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 800104a:	4628      	mov	r0, r5
 800104c:	f01d faa5 	bl	801e59a <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 8001050:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <_nx_arp_enable+0x8c>)
 8001052:	fba2 3206 	umull	r3, r2, r2, r6
 8001056:	0912      	lsrs	r2, r2, #4

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8001058:	1e50      	subs	r0, r2, #1
 800105a:	d034      	beq.n	80010c6 <_nx_arp_enable+0x86>
 800105c:	462b      	mov	r3, r5
 800105e:	2100      	movs	r1, #0
 8001060:	3101      	adds	r1, #1
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8001062:	3334      	adds	r3, #52	; 0x34
    for (i = 0; i < (arp_entries - 1); i++)
 8001064:	4281      	cmp	r1, r0
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8001066:	f843 3c28 	str.w	r3, [r3, #-40]
    for (i = 0; i < (arp_entries - 1); i++)
 800106a:	d1f9      	bne.n	8001060 <_nx_arp_enable+0x20>
 800106c:	2634      	movs	r6, #52	; 0x34
    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 800106e:	2100      	movs	r1, #0
 8001070:	fb06 5602 	mla	r6, r6, r2, r5
 8001074:	3e34      	subs	r6, #52	; 0x34
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8001076:	60f5      	str	r5, [r6, #12]
 8001078:	4633      	mov	r3, r6
    for (i = 0; i < (arp_entries - 1); i++)
 800107a:	3101      	adds	r1, #1
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 800107c:	3b34      	subs	r3, #52	; 0x34
    for (i = 0; i < (arp_entries - 1); i++)
 800107e:	4281      	cmp	r1, r0
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8001080:	645b      	str	r3, [r3, #68]	; 0x44
    for (i = 0; i < (arp_entries - 1); i++)
 8001082:	d1fa      	bne.n	800107a <_nx_arp_enable+0x3a>
 8001084:	f06f 0333 	mvn.w	r3, #51	; 0x33
 8001088:	fb03 6602 	mla	r6, r3, r2, r6
 800108c:	3634      	adds	r6, #52	; 0x34
        entry_ptr--;
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 800108e:	2334      	movs	r3, #52	; 0x34
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8001090:	2000      	movs	r0, #0
    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 8001092:	f8df c048 	ldr.w	ip, [pc, #72]	; 80010dc <_nx_arp_enable+0x9c>
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8001096:	fb03 6302 	mla	r3, r3, r2, r6

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 800109a:	4f0d      	ldr	r7, [pc, #52]	; (80010d0 <_nx_arp_enable+0x90>)

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 800109c:	490d      	ldr	r1, [pc, #52]	; (80010d4 <_nx_arp_enable+0x94>)
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 800109e:	3b34      	subs	r3, #52	; 0x34
 80010a0:	6133      	str	r3, [r6, #16]

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <_nx_arp_enable+0x98>)
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 80010a4:	f8c4 5bfc 	str.w	r5, [r4, #3068]	; 0xbfc
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 80010a8:	f8c4 5c20 	str.w	r5, [r4, #3104]	; 0xc20
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 80010ac:	f8c4 2c24 	str.w	r2, [r4, #3108]	; 0xc24
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 80010b0:	f8c4 0bf8 	str.w	r0, [r4, #3064]	; 0xbf8
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 80010b4:	f8c4 cc10 	str.w	ip, [r4, #3088]	; 0xc10
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 80010b8:	f8c4 7c14 	str.w	r7, [r4, #3092]	; 0xc14
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 80010bc:	f8c4 1c18 	str.w	r1, [r4, #3096]	; 0xc18
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 80010c0:	f8c4 3c0c 	str.w	r3, [r4, #3084]	; 0xc0c
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 80010c6:	60ed      	str	r5, [r5, #12]
 80010c8:	462e      	mov	r6, r5
 80010ca:	e7e0      	b.n	800108e <_nx_arp_enable+0x4e>
 80010cc:	4ec4ec4f 	.word	0x4ec4ec4f
 80010d0:	0800136d 	.word	0x0800136d
 80010d4:	08001191 	.word	0x08001191
 80010d8:	080010e1 	.word	0x080010e1
 80010dc:	08001291 	.word	0x08001291

080010e0 <_nx_arp_entry_allocate>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 80010e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 80010e2:	f8d0 3bfc 	ldr.w	r3, [r0, #3068]	; 0xbfc
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d042      	beq.n	8001170 <_nx_arp_entry_allocate+0x90>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 80010ea:	691c      	ldr	r4, [r3, #16]
 80010ec:	460e      	mov	r6, r1
 80010ee:	4605      	mov	r5, r0
 80010f0:	4617      	mov	r7, r2

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 80010f2:	4621      	mov	r1, r4
 80010f4:	f00d ffea 	bl	800f0cc <_nx_arp_dynamic_entry_delete>
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80010f8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80010fc:	b672      	cpsid	i
        TX_DISABLE

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 80010fe:	6833      	ldr	r3, [r6, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d037      	beq.n	8001174 <_nx_arp_entry_allocate+0x94>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8001104:	6163      	str	r3, [r4, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8001106:	6833      	ldr	r3, [r6, #0]
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8001108:	61e6      	str	r6, [r4, #28]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	61a3      	str	r3, [r4, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 800110e:	615c      	str	r4, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 8001110:	6833      	ldr	r3, [r6, #0]
 8001112:	619c      	str	r4, [r3, #24]
            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8001114:	2f01      	cmp	r7, #1
 8001116:	d01a      	beq.n	800114e <_nx_arp_entry_allocate+0x6e>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 8001118:	f8d5 3bfc 	ldr.w	r3, [r5, #3068]	; 0xbfc
 800111c:	42a3      	cmp	r3, r4
 800111e:	d00c      	beq.n	800113a <_nx_arp_entry_allocate+0x5a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8001120:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8001124:	6101      	str	r1, [r0, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8001126:	6919      	ldr	r1, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8001128:	6926      	ldr	r6, [r4, #16]
 800112a:	60f0      	str	r0, [r6, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 800112c:	e9c4 3103 	strd	r3, r1, [r4, #12]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 8001130:	60cc      	str	r4, [r1, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8001132:	68e3      	ldr	r3, [r4, #12]
 8001134:	611c      	str	r4, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 8001136:	f8c5 4bfc 	str.w	r4, [r5, #3068]	; 0xbfc
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 800113a:	f8d5 3c00 	ldr.w	r3, [r5, #3072]	; 0xc00
 800113e:	3301      	adds	r3, #1
 8001140:	f8c5 3c00 	str.w	r3, [r5, #3072]	; 0xc00
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8001144:	6027      	str	r7, [r4, #0]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001146:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 800114a:	2000      	movs	r0, #0
        status =  NX_NO_MORE_ENTRIES;
    }

    /* Return status to the caller.  */
    return(status);
}
 800114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 800114e:	68e3      	ldr	r3, [r4, #12]
 8001150:	42a3      	cmp	r3, r4
 8001152:	d014      	beq.n	800117e <_nx_arp_entry_allocate+0x9e>
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8001154:	6921      	ldr	r1, [r4, #16]
 8001156:	6119      	str	r1, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8001158:	6921      	ldr	r1, [r4, #16]
 800115a:	60cb      	str	r3, [r1, #12]
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 800115c:	f8d5 3bf8 	ldr.w	r3, [r5, #3064]	; 0xbf8
 8001160:	b18b      	cbz	r3, 8001186 <_nx_arp_entry_allocate+0xa6>
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 8001162:	6919      	ldr	r1, [r3, #16]
 8001164:	e9c4 3103 	strd	r3, r1, [r4, #12]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 8001168:	6919      	ldr	r1, [r3, #16]
 800116a:	60cc      	str	r4, [r1, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 800116c:	611c      	str	r4, [r3, #16]
 800116e:	e7e9      	b.n	8001144 <_nx_arp_entry_allocate+0x64>
        status =  NX_NO_MORE_ENTRIES;
 8001170:	2017      	movs	r0, #23
}
 8001172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8001174:	61e6      	str	r6, [r4, #28]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 8001176:	e9c4 4405 	strd	r4, r4, [r4, #20]
            *arp_list_ptr =  arp_entry;
 800117a:	6034      	str	r4, [r6, #0]
 800117c:	e7ca      	b.n	8001114 <_nx_arp_entry_allocate+0x34>
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c5 3bfc 	str.w	r3, [r5, #3068]	; 0xbfc
 8001184:	e7ea      	b.n	800115c <_nx_arp_entry_allocate+0x7c>
                arp_entry -> nx_arp_pool_previous = arp_entry;
 8001186:	e9c4 4403 	strd	r4, r4, [r4, #12]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 800118a:	f8c5 4bf8 	str.w	r4, [r5, #3064]	; 0xbf8
 800118e:	e7d9      	b.n	8001144 <_nx_arp_entry_allocate+0x64>

08001190 <_nx_arp_packet_send>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8001190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001194:	b08b      	sub	sp, #44	; 0x2c
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8001196:	2a00      	cmp	r2, #0
 8001198:	d06b      	beq.n	8001272 <_nx_arp_packet_send+0xe2>
 800119a:	4605      	mov	r5, r0
 800119c:	460f      	mov	r7, r1
 800119e:	4614      	mov	r4, r2
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 80011a0:	2300      	movs	r3, #0
 80011a2:	222c      	movs	r2, #44	; 0x2c
 80011a4:	a901      	add	r1, sp, #4
 80011a6:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 80011aa:	f005 fa6f 	bl	800668c <_nx_packet_allocate>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d15c      	bne.n	800126c <_nx_arp_packet_send+0xdc>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 80011b2:	9e01      	ldr	r6, [sp, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 80011b4:	f04f 0e1c 	mov.w	lr, #28
    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 80011b8:	f44f 3c84 	mov.w	ip, #67584	; 0x10800
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 80011bc:	4931      	ldr	r1, [pc, #196]	; (8001284 <_nx_arp_packet_send+0xf4>)
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 80011be:	68b3      	ldr	r3, [r6, #8]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80011c0:	ea87 4237 	eor.w	r2, r7, r7, ror #16
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 80011c4:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 80011c8:	f1a3 0e1c 	sub.w	lr, r3, #28
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 80011cc:	6374      	str	r4, [r6, #52]	; 0x34
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80011ce:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 80011d0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8001288 <_nx_arp_packet_send+0xf8>
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 80011d4:	f8c6 e008 	str.w	lr, [r6, #8]
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 80011d8:	f843 cc1c 	str.w	ip, [r3, #-28]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80011dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 80011e0:	f843 1c18 	str.w	r1, [r3, #-24]
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 80011e4:	68e1      	ldr	r1, [r4, #12]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80011e6:	ea82 2237 	eor.w	r2, r2, r7, ror #8
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 80011ea:	f8b4 8012 	ldrh.w	r8, [r4, #18]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 80011ee:	2705      	movs	r7, #5
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 80011f0:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
 80011f4:	f843 8c14 	str.w	r8, [r3, #-20]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 80011f8:	6921      	ldr	r1, [r4, #16]
        (nx_interface -> nx_interface_ip_address >> 16);
 80011fa:	f8b4 e016 	ldrh.w	lr, [r4, #22]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 80011fe:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8001202:	f843 ec10 	str.w	lr, [r3, #-16]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8001206:	6961      	ldr	r1, [r4, #20]
    *(message_ptr + 5) =  (ULONG)0;
 8001208:	f843 0c08 	str.w	r0, [r3, #-8]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800120c:	ea88 4038 	eor.w	r0, r8, r8, ror #16
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8001210:	ea4f 4c01 	mov.w	ip, r1, lsl #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8001214:	f843 2c04 	str.w	r2, [r3, #-4]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8001218:	ea8e 413e 	eor.w	r1, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 800121c:	f843 9c1c 	str.w	r9, [r3, #-28]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8001220:	ea4c 423c 	orr.w	r2, ip, ip, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8001224:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800128c <_nx_arp_packet_send+0xfc>
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8001228:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800122a:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800122c:	f843 9c18 	str.w	r9, [r3, #-24]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8001230:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8001232:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8001236:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800123a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800123e:	ea80 2038 	eor.w	r0, r0, r8, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8001242:	ea81 213e 	eor.w	r1, r1, lr, ror #8
    driver_request.nx_ip_driver_packet =                request_ptr;
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8001246:	f64f 7eff 	movw	lr, #65535	; 0xffff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800124a:	ea82 223c 	eor.w	r2, r2, ip, ror #8
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800124e:	f04f 3cff 	mov.w	ip, #4294967295
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8001252:	f843 0c14 	str.w	r0, [r3, #-20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8001256:	a802      	add	r0, sp, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8001258:	e943 1204 	strd	r1, r2, [r3, #-16]
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800125c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    driver_request.nx_ip_driver_packet =                request_ptr;
 800125e:	9606      	str	r6, [sp, #24]
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8001260:	9702      	str	r7, [sp, #8]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8001262:	e9cd 5408 	strd	r5, r4, [sp, #32]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8001266:	e9cd ec04 	strd	lr, ip, [sp, #16]
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800126a:	4798      	blx	r3
}
 800126c:	b00b      	add	sp, #44	; 0x2c
 800126e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NX_ASSERT(nx_interface != NX_NULL);
 8001272:	f04f 30ff 	mov.w	r0, #4294967295
 8001276:	f01b ffc7 	bl	801d208 <_tx_thread_sleep>
 800127a:	f04f 30ff 	mov.w	r0, #4294967295
 800127e:	f01b ffc3 	bl	801d208 <_tx_thread_sleep>
 8001282:	e7f6      	b.n	8001272 <_nx_arp_packet_send+0xe2>
 8001284:	06040001 	.word	0x06040001
 8001288:	00080100 	.word	0x00080100
 800128c:	01000406 	.word	0x01000406

08001290 <_nx_arp_periodic_update>:

    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8001290:	f8d0 2c00 	ldr.w	r2, [r0, #3072]	; 0xc00
{
 8001294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001298:	4606      	mov	r6, r0
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 800129a:	f8d0 4bfc 	ldr.w	r4, [r0, #3068]	; 0xbfc
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 800129e:	b1d2      	cbz	r2, 80012d6 <_nx_arp_periodic_update+0x46>
 80012a0:	2500      	movs	r5, #0

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 80012a2:	f04f 080a 	mov.w	r8, #10
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 80012a6:	462f      	mov	r7, r5
        if (arp_entry -> nx_arp_entry_next_update)
 80012a8:	6863      	ldr	r3, [r4, #4]
 80012aa:	b183      	cbz	r3, 80012ce <_nx_arp_periodic_update+0x3e>
            arp_entry -> nx_arp_entry_next_update--;
 80012ac:	3b01      	subs	r3, #1
 80012ae:	6063      	str	r3, [r4, #4]
            if (!arp_entry -> nx_arp_entry_next_update)
 80012b0:	b96b      	cbnz	r3, 80012ce <_nx_arp_periodic_update+0x3e>
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 80012b2:	68a2      	ldr	r2, [r4, #8]
 80012b4:	2a12      	cmp	r2, #18
 80012b6:	d019      	beq.n	80012ec <_nx_arp_periodic_update+0x5c>
                    arp_entry -> nx_arp_retries++;
 80012b8:	1c53      	adds	r3, r2, #1
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 80012ba:	f8c4 8004 	str.w	r8, [r4, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 80012be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012c0:	4630      	mov	r0, r6
                    arp_entry -> nx_arp_retries++;
 80012c2:	60a3      	str	r3, [r4, #8]
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 80012c4:	6a21      	ldr	r1, [r4, #32]
 80012c6:	f7ff ff63 	bl	8001190 <_nx_arp_packet_send>
 80012ca:	f8d6 2c00 	ldr.w	r2, [r6, #3072]	; 0xc00
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80012ce:	3501      	adds	r5, #1
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 80012d0:	68e4      	ldr	r4, [r4, #12]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80012d2:	4295      	cmp	r5, r2
 80012d4:	d3e8      	bcc.n	80012a8 <_nx_arp_periodic_update+0x18>


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 80012d6:	f896 3c4c 	ldrb.w	r3, [r6, #3148]	; 0xc4c
 80012da:	b12b      	cbz	r3, 80012e8 <_nx_arp_periodic_update+0x58>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 80012dc:	f8d6 3c8c 	ldr.w	r3, [r6, #3212]	; 0xc8c
 80012e0:	b113      	cbz	r3, 80012e8 <_nx_arp_periodic_update+0x58>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f8c6 3c8c 	str.w	r3, [r6, #3212]	; 0xc8c
    }
}
 80012e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80012ec:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80012f0:	b672      	cpsid	i
                    if (arp_entry -> nx_arp_active_list_head)
 80012f2:	69e2      	ldr	r2, [r4, #28]
 80012f4:	b17a      	cbz	r2, 8001316 <_nx_arp_periodic_update+0x86>
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 80012f6:	6961      	ldr	r1, [r4, #20]
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	d030      	beq.n	800135e <_nx_arp_periodic_update+0xce>
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	42a3      	cmp	r3, r4
 8001300:	d02a      	beq.n	8001358 <_nx_arp_periodic_update+0xc8>
                                arp_entry -> nx_arp_active_previous;
 8001302:	69a3      	ldr	r3, [r4, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8001304:	618b      	str	r3, [r1, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8001306:	69a3      	ldr	r3, [r4, #24]
 8001308:	6159      	str	r1, [r3, #20]
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800130a:	f8d6 3c00 	ldr.w	r3, [r6, #3072]	; 0xc00
 800130e:	3b01      	subs	r3, #1
 8001310:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 8001314:	61e7      	str	r7, [r4, #28]
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8001316:	68e2      	ldr	r2, [r4, #12]
 8001318:	42a2      	cmp	r2, r4
 800131a:	d00d      	beq.n	8001338 <_nx_arp_periodic_update+0xa8>
                            arp_entry -> nx_arp_pool_previous;
 800131c:	6921      	ldr	r1, [r4, #16]
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 800131e:	f8d6 3bfc 	ldr.w	r3, [r6, #3068]	; 0xbfc
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8001322:	6111      	str	r1, [r2, #16]
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8001324:	42a3      	cmp	r3, r4
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8001326:	6921      	ldr	r1, [r4, #16]
 8001328:	60ca      	str	r2, [r1, #12]
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 800132a:	d01a      	beq.n	8001362 <_nx_arp_periodic_update+0xd2>
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 800132c:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 800132e:	e9c4 3203 	strd	r3, r2, [r4, #12]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	60d4      	str	r4, [r2, #12]
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 8001336:	611c      	str	r4, [r3, #16]
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 8001338:	6b23      	ldr	r3, [r4, #48]	; 0x30
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 800133a:	6327      	str	r7, [r4, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800133c:	f380 8810 	msr	PRIMASK, r0
                    while (next_packet_ptr)
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0c2      	beq.n	80012ca <_nx_arp_periodic_update+0x3a>
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8001344:	f8d3 901c 	ldr.w	r9, [r3, #28]
                        _nx_packet_transmit_release(packet_ptr);
 8001348:	4618      	mov	r0, r3
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800134a:	61df      	str	r7, [r3, #28]
                        _nx_packet_transmit_release(packet_ptr);
 800134c:	f005 fbb6 	bl	8006abc <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8001350:	464b      	mov	r3, r9
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f6      	bne.n	8001344 <_nx_arp_periodic_update+0xb4>
 8001356:	e7b8      	b.n	80012ca <_nx_arp_periodic_update+0x3a>
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8001358:	6011      	str	r1, [r2, #0]
 800135a:	6961      	ldr	r1, [r4, #20]
 800135c:	e7d1      	b.n	8001302 <_nx_arp_periodic_update+0x72>
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e7d3      	b.n	800130a <_nx_arp_periodic_update+0x7a>
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 8001362:	68e3      	ldr	r3, [r4, #12]
 8001364:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
 8001368:	e7e0      	b.n	800132c <_nx_arp_periodic_update+0x9c>
 800136a:	bf00      	nop

0800136c <_nx_arp_queue_process>:

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800136c:	f8d0 3c04 	ldr.w	r3, [r0, #3076]	; 0xc04
{
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8001374:	b943      	cbnz	r3, 8001388 <_nx_arp_queue_process+0x1c>
 8001376:	e01c      	b.n	80013b2 <_nx_arp_queue_process+0x46>
 8001378:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 800137c:	4620      	mov	r0, r4
 800137e:	f00d feff 	bl	800f180 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8001382:	f8d4 3c04 	ldr.w	r3, [r4, #3076]	; 0xc04
 8001386:	b1a3      	cbz	r3, 80013b2 <_nx_arp_queue_process+0x46>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001388:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800138c:	b672      	cpsid	i
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 800138e:	f8d4 1c04 	ldr.w	r1, [r4, #3076]	; 0xc04
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8001392:	69cb      	ldr	r3, [r1, #28]
 8001394:	f8c4 3c04 	str.w	r3, [r4, #3076]	; 0xc04
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1ed      	bne.n	8001378 <_nx_arp_queue_process+0xc>
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 800139c:	f8c4 3c08 	str.w	r3, [r4, #3080]	; 0xc08
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80013a0:	f382 8810 	msr	PRIMASK, r2
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 80013a4:	4620      	mov	r0, r4
 80013a6:	f00d feeb 	bl	800f180 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80013aa:	f8d4 3c04 	ldr.w	r3, [r4, #3076]	; 0xc04
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ea      	bne.n	8001388 <_nx_arp_queue_process+0x1c>
    }
}
 80013b2:	bd10      	pop	{r4, pc}

080013b4 <nx_driver_stm32f7xx>:
	 block.  */
	switch (driver_req_ptr->nx_ip_driver_command)
	{

		case NX_LINK_INTERFACE_ATTACH:

 80013b4:	2200      	movs	r2, #0
			/* Process link interface attach requests.  */
			_nx_driver_interface_attach(driver_req_ptr);
			break;

 80013b6:	6803      	ldr	r3, [r0, #0]
	{
 80013b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013bc:	4605      	mov	r5, r0
 80013be:	b087      	sub	sp, #28

 80013c0:	6042      	str	r2, [r0, #4]

 80013c2:	2b16      	cmp	r3, #22
 80013c4:	f200 8093 	bhi.w	80014ee <nx_driver_stm32f7xx+0x13a>
 80013c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80013cc:	009d0017 	.word	0x009d0017
 80013d0:	01320127 	.word	0x01320127
 80013d4:	00170017 	.word	0x00170017
 80013d8:	00170017 	.word	0x00170017
 80013dc:	01500142 	.word	0x01500142
 80013e0:	0091008d 	.word	0x0091008d
 80013e4:	00910091 	.word	0x00910091
 80013e8:	00910091 	.word	0x00910091
 80013ec:	00910091 	.word	0x00910091
 80013f0:	0173015d 	.word	0x0173015d
 80013f4:	00960091 	.word	0x00960091
 80013f8:	008d      	.short	0x008d

	/* Adjust the prepend pointer.  */
	packet_ptr->nx_packet_prepend_ptr =
			packet_ptr->nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;

	/* Adjust the packet length.  */
 80013fa:	4cb5      	ldr	r4, [pc, #724]	; (80016d0 <nx_driver_stm32f7xx+0x31c>)
 80013fc:	6901      	ldr	r1, [r0, #16]
 80013fe:	6862      	ldr	r2, [r4, #4]
 8001400:	2a04      	cmp	r2, #4
 8001402:	f040 81a1 	bne.w	8001748 <nx_driver_stm32f7xx+0x394>
	*(ethernet_frame_ptr + 3) = (ip_ptr->nx_ip_arp_physical_address_lsw<< 16);

	/* Set up the frame type field in the Ethernet harder. */
	if ((driver_req_ptr->nx_ip_driver_command == NX_LINK_ARP_SEND) ||
			(driver_req_ptr->nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
	{
 8001406:	688a      	ldr	r2, [r1, #8]

		*(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IPV6;
	}
#endif /* FEATURE_NX_IPV6 */

	else
 8001408:	1f5e      	subs	r6, r3, #5
	}
 800140a:	6a48      	ldr	r0, [r1, #36]	; 0x24
#ifdef FEATURE_NX_IPV6
 800140c:	68af      	ldr	r7, [r5, #8]
	{
 800140e:	f1a2 090e 	sub.w	r9, r2, #14
	}
 8001412:	300e      	adds	r0, #14
	packet_ptr->nx_packet_prepend_ptr =
 8001414:	f8d5 e018 	ldr.w	lr, [r5, #24]
			(driver_req_ptr->nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8001418:	f8c1 9008 	str.w	r9, [r1, #8]
	else
 800141c:	2e01      	cmp	r6, #1
	}
 800141e:	6248      	str	r0, [r1, #36]	; 0x24
#ifdef FEATURE_NX_IPV6
 8001420:	f842 7c10 	str.w	r7, [r2, #-16]
	else if (packet_ptr->nx_packet_ip_version == NX_IP_VERSION_V6)
 8001424:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8001428:	f842 8c0c 	str.w	r8, [r2, #-12]

 800142c:	f8de 0c54 	ldr.w	r0, [lr, #3156]	; 0xc54
		*(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IPV6;
 8001430:	f8be cc5a 	ldrh.w	ip, [lr, #3162]	; 0xc5a

 8001434:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8001438:	f842 cc08 	str.w	ip, [r2, #-8]
	}
 800143c:	f8de 0c58 	ldr.w	r0, [lr, #3160]	; 0xc58
 8001440:	ea4f 4000 	mov.w	r0, r0, lsl #16
 8001444:	f842 0c04 	str.w	r0, [r2, #-4]
	else
 8001448:	f240 813c 	bls.w	80016c4 <nx_driver_stm32f7xx+0x310>
	{

		*(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
	}

	/* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
 800144c:	2b07      	cmp	r3, #7
 800144e:	f000 82cd 	beq.w	80019ec <nx_driver_stm32f7xx+0x638>
	NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
	NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
	NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));

	/* Determine if the packet exceeds the driver's MTU.  */
	if (packet_ptr->nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8001452:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8001456:	2b06      	cmp	r3, #6
 8001458:	f000 8374 	beq.w	8001b44 <nx_driver_stm32f7xx+0x790>
		/* Remove the Ethernet header.  */
		NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);

		/* Indicate an unsuccessful packet send.  */
		driver_req_ptr->nx_ip_driver_status = NX_DRIVER_ERROR;

 800145c:	f440 6e00 	orr.w	lr, r0, #2048	; 0x800
		/* Link is not up, simply free the packet.  */
		nx_packet_transmit_release(packet_ptr);
		return;
	}
 8001460:	ea87 4b37 	eor.w	fp, r7, r7, ror #16

	/* Transmit the packet through the Ethernet controller low level access routine. */
	status = _nx_driver_hardware_packet_send(packet_ptr);

	/* Determine if there was an error.  */
	if (status != NX_SUCCESS)
 8001464:	f240 5aea 	movw	sl, #1514	; 0x5ea

 8001468:	ea88 4638 	eor.w	r6, r8, r8, ror #16
	/* Transmit the packet through the Ethernet controller low level access routine. */
 800146c:	ea8c 403c 	eor.w	r0, ip, ip, ror #16
	status = _nx_driver_hardware_packet_send(packet_ptr);
 8001470:	ea8e 433e 	eor.w	r3, lr, lr, ror #16
	}
 8001474:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

 8001478:	0a36      	lsrs	r6, r6, #8
	/* Transmit the packet through the Ethernet controller low level access routine. */
 800147a:	0a00      	lsrs	r0, r0, #8
	}
 800147c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
	status = _nx_driver_hardware_packet_send(packet_ptr);
 8001480:	0a1b      	lsrs	r3, r3, #8

 8001482:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
	/* Transmit the packet through the Ethernet controller low level access routine. */
 8001486:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
	}
 800148a:	ea8b 2737 	eor.w	r7, fp, r7, ror #8
	status = _nx_driver_hardware_packet_send(packet_ptr);
 800148e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff

 8001492:	ea86 2638 	eor.w	r6, r6, r8, ror #8
	/* Transmit the packet through the Ethernet controller low level access routine. */
 8001496:	ea80 203c 	eor.w	r0, r0, ip, ror #8
	}
 800149a:	f842 7c10 	str.w	r7, [r2, #-16]
	status = _nx_driver_hardware_packet_send(packet_ptr);
 800149e:	ea83 233e 	eor.w	r3, r3, lr, ror #8
	/* Transmit the packet through the Ethernet controller low level access routine. */
 80014a2:	e942 6003 	strd	r6, r0, [r2, #-12]
	status = _nx_driver_hardware_packet_send(packet_ptr);
 80014a6:	f842 3c04 	str.w	r3, [r2, #-4]
	if (status != NX_SUCCESS)
 80014aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80014ac:	4553      	cmp	r3, sl
 80014ae:	f200 827e 	bhi.w	80019ae <nx_driver_stm32f7xx+0x5fa>
			packet_ptr->nx_packet_data_end - packet_ptr->nx_packet_data_start);

	/* Find next packet.  */
	for (pktIdx = packet_ptr->nx_packet_next;
			pktIdx != NX_NULL;
			pktIdx = pktIdx->nx_packet_next)
 80014b2:	69a6      	ldr	r6, [r4, #24]
	{

		/* Move to next descriptor.  */
 80014b4:	f106 0011 	add.w	r0, r6, #17
 80014b8:	eb04 1040 	add.w	r0, r4, r0, lsl #5
 80014bc:	6842      	ldr	r2, [r0, #4]
 80014be:	2a00      	cmp	r2, #0
 80014c0:	db07      	blt.n	80014d2 <nx_driver_stm32f7xx+0x11e>
 80014c2:	f506 6291 	add.w	r2, r6, #1160	; 0x488
 80014c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80014ca:	6852      	ldr	r2, [r2, #4]
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	f000 82a1 	beq.w	8001a14 <nx_driver_stm32f7xx+0x660>
/*    _nx_driver_multicast_join                         STM32F7xx/IAR     */
 80014d2:	f109 020e 	add.w	r2, r9, #14
 80014d6:	3b0e      	subs	r3, #14
/*                                                                        */
 80014d8:	245a      	movs	r4, #90	; 0x5a
/*  DESCRIPTION                                                           */
 80014da:	4608      	mov	r0, r1
/*    _nx_driver_multicast_join                         STM32F7xx/IAR     */
 80014dc:	608a      	str	r2, [r1, #8]
 80014de:	624b      	str	r3, [r1, #36]	; 0x24
/*                                                                        */
 80014e0:	606c      	str	r4, [r5, #4]
/*  DESCRIPTION                                                           */
 80014e2:	f005 faeb 	bl	8006abc <_nx_packet_transmit_release>
/*  DESCRIPTION                                                           */
 80014e6:	b007      	add	sp, #28
 80014e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ec:	9d03      	ldr	r5, [sp, #12]
/*    Yuxin Zhou, Microsoft Corporation                                   */
 80014ee:	235a      	movs	r3, #90	; 0x5a
 80014f0:	606b      	str	r3, [r5, #4]
/*  DESCRIPTION                                                           */
 80014f2:	b007      	add	sp, #28
 80014f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/*    None                                                                */
 80014f8:	6942      	ldr	r2, [r0, #20]
 80014fa:	f240 31ff 	movw	r1, #1023	; 0x3ff
/*                                                                        */
 80014fe:	2300      	movs	r3, #0
/*    None                                                                */
 8001500:	6011      	str	r1, [r2, #0]
/*                                                                        */
 8001502:	6043      	str	r3, [r0, #4]
 8001504:	e7ef      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
	/* Clear the deferred events for the driver.  */
 8001506:	6982      	ldr	r2, [r0, #24]
    nx_driver_information.nx_driver_transmit_queue_tail =      NX_NULL;
 8001508:	2300      	movs	r3, #0
 800150a:	4c71      	ldr	r4, [pc, #452]	; (80016d0 <nx_driver_stm32f7xx+0x31c>)
	/* Call the hardware-specific ethernet controller initialization.  */
 800150c:	2101      	movs	r1, #1
	/* Determine if the request was successful.  */
 800150e:	f8d2 2638 	ldr.w	r2, [r2, #1592]	; 0x638

 8001512:	6123      	str	r3, [r4, #16]
    nx_driver_information.nx_driver_transmit_queue_tail =      NX_NULL;
 8001514:	6023      	str	r3, [r4, #0]
	/* Determine if the request was successful.  */
 8001516:	e9c4 1201 	strd	r1, r2, [r4, #4]
	for (i = 0; i < NX_DRIVER_TX_DESCRIPTORS; i++)
 800151a:	6043      	str	r3, [r0, #4]
#ifdef NX_DRIVER_INTERNAL_TRANSMIT_QUEUE
 800151c:	69c0      	ldr	r0, [r0, #28]

 800151e:	e9c4 3305 	strd	r3, r3, [r4, #20]
#ifdef NX_DRIVER_INTERNAL_TRANSMIT_QUEUE
 8001522:	9002      	str	r0, [sp, #8]
        DMATxDesc -> Status = ETH_DMATXDESC_TCH | ETH_DMATXDESC_IC | ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_CIC_IPV4HEADER;        
 8001524:	e9c4 3307 	strd	r3, r3, [r4, #28]
		/* Set Second Address Chained bit.  */
 8001528:	2a00      	cmp	r2, #0
 800152a:	d0e0      	beq.n	80014ee <nx_driver_stm32f7xx+0x13a>
			/* Set next descriptor address register with next descriptor base address */
 800152c:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <nx_driver_stm32f7xx+0x320>)
		}
 800152e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
			/* Set next descriptor address register with next descriptor base address */
 8001532:	4869      	ldr	r0, [pc, #420]	; (80016d8 <nx_driver_stm32f7xx+0x324>)
		else
 8001534:	f44f 6600 	mov.w	r6, #2048	; 0x800
					.nx_driver_information_dma_tx_descriptors + i + 1);
 8001538:	6051      	str	r1, [r2, #4]
			/* For last descriptor, set next descriptor address register equal to the first descriptor base address */
 800153a:	6191      	str	r1, [r2, #24]
		{
 800153c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
			DMATxDesc->Buffer2NextDescAddr = (ULONG)nx_driver_information
 8001540:	61d3      	str	r3, [r2, #28]
					.nx_driver_information_dma_tx_descriptors;
 8001542:	8213      	strh	r3, [r2, #16]
			DMATxDesc->Buffer2NextDescAddr = (ULONG)(nx_driver_information
 8001544:	4b65      	ldr	r3, [pc, #404]	; (80016dc <nx_driver_stm32f7xx+0x328>)
			/* Set next descriptor address register with next descriptor base address */
 8001546:	6010      	str	r0, [r2, #0]
	}
 8001548:	4610      	mov	r0, r2
		{
 800154a:	6211      	str	r1, [r2, #32]
			DMATxDesc->Buffer2NextDescAddr = (ULONG)(nx_driver_information
 800154c:	6153      	str	r3, [r2, #20]
		else
 800154e:	e9c2 7602 	strd	r7, r6, [r2, #8]
	}
 8001552:	f019 fb45 	bl	801abe0 <HAL_ETH_Init>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1c9      	bne.n	80014ee <nx_driver_stm32f7xx+0x13a>
			DMARxDesc[i].Buffer1Addr = (uint32_t)packet_ptr->nx_packet_prepend_ptr;
 800155a:	4e61      	ldr	r6, [pc, #388]	; (80016e0 <nx_driver_stm32f7xx+0x32c>)
 800155c:	f504 7311 	add.w	r3, r4, #580	; 0x244
 8001560:	f504 5191 	add.w	r1, r4, #4640	; 0x1220
		{
 8001564:	4607      	mov	r7, r0
			DMARxDesc[i].Buffer1Addr = (uint32_t)packet_ptr->nx_packet_prepend_ptr;
 8001566:	f8c4 6224 	str.w	r6, [r4, #548]	; 0x224
			/* Set Own bit of the RX descriptor Status.  */
 800156a:	3001      	adds	r0, #1
 800156c:	f843 3c14 	str.w	r3, [r3, #-20]
		{
 8001570:	f841 7f04 	str.w	r7, [r1, #4]!
 8001574:	3320      	adds	r3, #32
			DMARxDesc[i].Buffer1Addr = (uint32_t)packet_ptr->nx_packet_prepend_ptr;
 8001576:	f100 0211 	add.w	r2, r0, #17
			/* Remember the receive packet poitner.  */
 800157a:	287f      	cmp	r0, #127	; 0x7f
			DMARxDesc[i].Buffer1Addr = (uint32_t)packet_ptr->nx_packet_prepend_ptr;
 800157c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8001580:	6056      	str	r6, [r2, #4]
			/* Remember the receive packet poitner.  */
 8001582:	d1f2      	bne.n	800156a <nx_driver_stm32f7xx+0x1b6>
		}
 8001584:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <nx_driver_stm32f7xx+0x330>)
 8001586:	f241 2c10 	movw	ip, #4624	; 0x1210
		{
 800158a:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <nx_driver_stm32f7xx+0x334>)
		}
 800158c:	f241 0110 	movw	r1, #4112	; 0x1010
 8001590:	4851      	ldr	r0, [pc, #324]	; (80016d8 <nx_driver_stm32f7xx+0x324>)
 8001592:	f5a3 76f0 	sub.w	r6, r3, #480	; 0x1e0
		}
 8001596:	f844 300c 	str.w	r3, [r4, ip]
 800159a:	4690      	mov	r8, r2
		}
 800159c:	5043      	str	r3, [r0, r1]
 800159e:	f10d 0914 	add.w	r9, sp, #20
		{
 80015a2:	6017      	str	r7, [r2, #0]
 80015a4:	f102 0b40 	add.w	fp, r2, #64	; 0x40
	/* Set Receive Descriptor List Address Register */
 80015a8:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 80015ac:	4f4f      	ldr	r7, [pc, #316]	; (80016ec <nx_driver_stm32f7xx+0x338>)
 80015ae:	9503      	str	r5, [sp, #12]
			/* For last descriptor, set next descriptor address register equal to the first descriptor base address.  */
 80015b0:	2300      	movs	r3, #0
 80015b2:	4649      	mov	r1, r9
 80015b4:	68a0      	ldr	r0, [r4, #8]
 80015b6:	461a      	mov	r2, r3
 80015b8:	f005 f868 	bl	800668c <_nx_packet_allocate>
 80015bc:	2800      	cmp	r0, #0
 80015be:	d195      	bne.n	80014ec <nx_driver_stm32f7xx+0x138>

 80015c0:	9d05      	ldr	r5, [sp, #20]
 80015c2:	f1a6 0020 	sub.w	r0, r6, #32
 80015c6:	68a9      	ldr	r1, [r5, #8]
	nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr->nx_packet_data_end
 80015c8:	692a      	ldr	r2, [r5, #16]

 80015ca:	9101      	str	r1, [sp, #4]
	nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr->nx_packet_data_end
 80015cc:	6969      	ldr	r1, [r5, #20]
    uint32_t op_addr = (uint32_t) addr;
 80015ce:	4613      	mov	r3, r2
 80015d0:	1a8a      	subs	r2, r1, r2

 80015d2:	9901      	ldr	r1, [sp, #4]
	nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr->nx_packet_data_end
 80015d4:	f442 4e80 	orr.w	lr, r2, #16384	; 0x4000

 80015d8:	3102      	adds	r1, #2
 80015da:	60a9      	str	r1, [r5, #8]
	/* Save the size of one rx buffer.  */
 80015dc:	e946 e107 	strd	lr, r1, [r6, #-28]
	/* Clear the number of buffers in use counter.  */
 80015e0:	f848 5f04 	str.w	r5, [r8, #4]!
	/* Set Receive Descriptor List Address Register */
 80015e4:	f846 ac20 	str.w	sl, [r6, #-32]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015e8:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	dd0a      	ble.n	8001606 <nx_driver_stm32f7xx+0x252>
 80015f0:	1e51      	subs	r1, r2, #1
 80015f2:	f103 0220 	add.w	r2, r3, #32
 80015f6:	f021 011f 	bic.w	r1, r1, #31
 80015fa:	440a      	add	r2, r1
      SCB->DCCIMVAC = op_addr;
 80015fc:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8001600:	3320      	adds	r3, #32
    while (op_size > 0) {
 8001602:	4293      	cmp	r3, r2
 8001604:	d1fa      	bne.n	80015fc <nx_driver_stm32f7xx+0x248>
 8001606:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800160a:	f3bf 8f6f 	isb	sy
/*  AUTHOR                                                                */
 800160e:	45d8      	cmp	r8, fp
 8001610:	d06e      	beq.n	80016f0 <nx_driver_stm32f7xx+0x33c>
 8001612:	f846 6c14 	str.w	r6, [r6, #-20]
 8001616:	3620      	adds	r6, #32
 8001618:	e7ca      	b.n	80015b0 <nx_driver_stm32f7xx+0x1fc>

 800161a:	4c2d      	ldr	r4, [pc, #180]	; (80016d0 <nx_driver_stm32f7xx+0x31c>)
 800161c:	6863      	ldr	r3, [r4, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	f67f af65 	bls.w	80014ee <nx_driver_stm32f7xx+0x13a>
		nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8001624:	2b03      	cmp	r3, #3
 8001626:	f000 81cb 	beq.w	80019c0 <nx_driver_stm32f7xx+0x60c>

 800162a:	2315      	movs	r3, #21
 800162c:	6043      	str	r3, [r0, #4]
 800162e:	e75a      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
		/* Update the driver state back to initialized.  */
 8001630:	4c27      	ldr	r4, [pc, #156]	; (80016d0 <nx_driver_stm32f7xx+0x31c>)
 8001632:	6863      	ldr	r3, [r4, #4]
 8001634:	2b04      	cmp	r3, #4
 8001636:	f47f af5a 	bne.w	80014ee <nx_driver_stm32f7xx+0x13a>
/*  CALLED BY                                                             */
 800163a:	4826      	ldr	r0, [pc, #152]	; (80016d4 <nx_driver_stm32f7xx+0x320>)
			case NX_LINK_PACKET_SEND:
 800163c:	69ae      	ldr	r6, [r5, #24]
/*  CALLED BY                                                             */
 800163e:	f019 fce9 	bl	801b014 <HAL_ETH_Stop>
/*  FUNCTION                                               RELEASE        */
 8001642:	2300      	movs	r3, #0
/*                                                           6.0          */
 8001644:	2203      	movs	r2, #3
/*  FUNCTION                                               RELEASE        */
 8001646:	f886 3c4e 	strb.w	r3, [r6, #3150]	; 0xc4e
/*                                                           6.0          */
 800164a:	6062      	str	r2, [r4, #4]
/*    Yuxin Zhou, Microsoft Corporation                                   */
 800164c:	606b      	str	r3, [r5, #4]
 800164e:	e74a      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
/*  FUNCTION                                               RELEASE        */
/*                                                                        */
/*    _nx_driver_hardware_multicast_leave               STM32F7xx/IAR     */
/*                                                           6.0          */
/*  AUTHOR                                                                */
/*                                                                        */
 8001650:	4c1f      	ldr	r4, [pc, #124]	; (80016d0 <nx_driver_stm32f7xx+0x31c>)
 8001652:	f241 4068 	movw	r0, #5224	; 0x1468
/*    Yuxin Zhou, Microsoft Corporation                                   */
/*                                                                        */
/*  DESCRIPTION                                                           */
 8001656:	4920      	ldr	r1, [pc, #128]	; (80016d8 <nx_driver_stm32f7xx+0x324>)
/*                                                                        */
 8001658:	2600      	movs	r6, #0
/*                                                                        */
 800165a:	5822      	ldr	r2, [r4, r0]
/*  DESCRIPTION                                                           */
 800165c:	684b      	ldr	r3, [r1, #4]
/*                                                                        */
 800165e:	3201      	adds	r2, #1
/*  DESCRIPTION                                                           */
 8001660:	f043 0310 	orr.w	r3, r3, #16
/*                                                                        */
 8001664:	5022      	str	r2, [r4, r0]
/*  DESCRIPTION                                                           */
 8001666:	604b      	str	r3, [r1, #4]
/*                                                                        */
 8001668:	606e      	str	r6, [r5, #4]
 800166a:	e73c      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
}

/**************************************************************************/
/*                                                                        */
/*  FUNCTION                                               RELEASE        */
/*                                                                        */
 800166c:	4918      	ldr	r1, [pc, #96]	; (80016d0 <nx_driver_stm32f7xx+0x31c>)
 800166e:	f241 4268 	movw	r2, #5224	; 0x1468
 8001672:	588b      	ldr	r3, [r1, r2]
 8001674:	3b01      	subs	r3, #1
 8001676:	508b      	str	r3, [r1, r2]
/*    _nx_driver_hardware_get_status                    STM32F7xx/IAR     */
/*                                                           6.0          */
/*  AUTHOR                                                                */
 8001678:	b9b3      	cbnz	r3, 80016a8 <nx_driver_stm32f7xx+0x2f4>
/*                                                                        */
/*    Yuxin Zhou, Microsoft Corporation                                   */
/*                                                                        */
/*  DESCRIPTION                                                           */
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <nx_driver_stm32f7xx+0x324>)
 800167c:	6853      	ldr	r3, [r2, #4]
 800167e:	f023 0310 	bic.w	r3, r3, #16
 8001682:	6053      	str	r3, [r2, #4]
 8001684:	e010      	b.n	80016a8 <nx_driver_stm32f7xx+0x2f4>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001686:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800168a:	b672      	cpsid	i
/*    _nx_driver_transfer_to_netx                       STM32F7xx/IAR     */
 800168c:	4c10      	ldr	r4, [pc, #64]	; (80016d0 <nx_driver_stm32f7xx+0x31c>)
/*                                                           6.0          */
 800168e:	2700      	movs	r7, #0
/*    _nx_driver_transfer_to_netx                       STM32F7xx/IAR     */
 8001690:	f8d4 8010 	ldr.w	r8, [r4, #16]
/*                                                           6.0          */
 8001694:	6127      	str	r7, [r4, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001696:	f383 8810 	msr	PRIMASK, r3
/*                                                                        */
 800169a:	f018 0f04 	tst.w	r8, #4
 800169e:	f040 8156 	bne.w	800194e <nx_driver_stm32f7xx+0x59a>
/*    packet_ptr                            Packet pointer                */
 80016a2:	f018 0f01 	tst.w	r8, #1
 80016a6:	d155      	bne.n	8001754 <nx_driver_stm32f7xx+0x3a0>
/*                                                                        */
 80016a8:	2300      	movs	r3, #0
 80016aa:	606b      	str	r3, [r5, #4]
/*  DESCRIPTION                                                           */
 80016ac:	b007      	add	sp, #28
 80016ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			break;
 80016b2:	69c3      	ldr	r3, [r0, #28]
/*                                                                        */
 80016b4:	2200      	movs	r2, #0
/*                                                                        */
 80016b6:	f240 30ff 	movw	r0, #1023	; 0x3ff
/*    _nx_driver_initialize                             STM32F7xx/IAR     */
 80016ba:	4905      	ldr	r1, [pc, #20]	; (80016d0 <nx_driver_stm32f7xx+0x31c>)
/*                                                                        */
 80016bc:	6418      	str	r0, [r3, #64]	; 0x40
/*    _nx_driver_initialize                             STM32F7xx/IAR     */
 80016be:	60cb      	str	r3, [r1, #12]
/*                                                                        */
 80016c0:	606a      	str	r2, [r5, #4]
 80016c2:	e710      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
	}
 80016c4:	f640 0e06 	movw	lr, #2054	; 0x806
 80016c8:	ea40 0e0e 	orr.w	lr, r0, lr
 80016cc:	e6c8      	b.n	8001460 <nx_driver_stm32f7xx+0xac>
 80016ce:	bf00      	nop
 80016d0:	20000154 	.word	0x20000154
 80016d4:	20004b10 	.word	0x20004b10
 80016d8:	40028000 	.word	0x40028000
 80016dc:	20000000 	.word	0x20000000
 80016e0:	40100000 	.word	0x40100000
 80016e4:	20000378 	.word	0x20000378
 80016e8:	20001574 	.word	0x20001574
 80016ec:	e000ed00 	.word	0xe000ed00
/*                                                                        */
 80016f0:	9b05      	ldr	r3, [sp, #20]
/*  CALLS                                                                 */
 80016f2:	f241 4c68 	movw	ip, #5224	; 0x1468
/*  INPUT                                                                 */
 80016f6:	4ac0      	ldr	r2, [pc, #768]	; (80019f8 <nx_driver_stm32f7xx+0x644>)
/*  CALLS                                                                 */
 80016f8:	2600      	movs	r6, #0
/*                                                                        */
 80016fa:	4fc0      	ldr	r7, [pc, #768]	; (80019fc <nx_driver_stm32f7xx+0x648>)
 80016fc:	f241 010c 	movw	r1, #4108	; 0x100c
 8001700:	60c2      	str	r2, [r0, #12]
 8001702:	9d03      	ldr	r5, [sp, #12]
/*                                                                        */
 8001704:	e9d3 3004 	ldrd	r3, r0, [r3, #16]
/*  CALLS                                                                 */
 8001708:	f844 600c 	str.w	r6, [r4, ip]
/*                                                                        */
 800170c:	f502 5ca2 	add.w	ip, r2, #5184	; 0x1440
/*                                                                        */
 8001710:	507a      	str	r2, [r7, r1]
/*                                                                        */
 8001712:	1ac0      	subs	r0, r0, r3
	}
 8001714:	49ba      	ldr	r1, [pc, #744]	; (8001a00 <nx_driver_stm32f7xx+0x64c>)
}
 8001716:	2701      	movs	r7, #1
/*                                                                        */
 8001718:	f8cc 0000 	str.w	r0, [ip]

 800171c:	f240 50dc 	movw	r0, #1500	; 0x5dc
	}
 8001720:	880b      	ldrh	r3, [r1, #0]
 8001722:	f8d1 1002 	ldr.w	r1, [r1, #2]
 8001726:	ba5b      	rev16	r3, r3
 8001728:	fa91 fc81 	rev.w	ip, r1
		/* Indicate to the IP software that IP to physical mapping
 800172c:	69a9      	ldr	r1, [r5, #24]
	}
 800172e:	b29b      	uxth	r3, r3
		/* Indicate to the IP software that IP to physical mapping
 8001730:	f842 1c24 	str.w	r1, [r2, #-36]
/*                                                                        */
 8001734:	2203      	movs	r2, #3
	}
 8001736:	9902      	ldr	r1, [sp, #8]
}
 8001738:	714f      	strb	r7, [r1, #5]
	}
 800173a:	60cb      	str	r3, [r1, #12]
	else
 800173c:	f8c1 c010 	str.w	ip, [r1, #16]

 8001740:	6248      	str	r0, [r1, #36]	; 0x24
/*                                                                        */
 8001742:	6062      	str	r2, [r4, #4]
/*    _nx_driver_enable                                 STM32F7xx/IAR     */
 8001744:	606e      	str	r6, [r5, #4]
 8001746:	e6ce      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
	 * bytes to get 32-bit word alignment.  */
 8001748:	235a      	movs	r3, #90	; 0x5a
	/* Set up the hardware addresses in the Ethernet header. */
 800174a:	4608      	mov	r0, r1
	 * bytes to get 32-bit word alignment.  */
 800174c:	606b      	str	r3, [r5, #4]
	/* Set up the hardware addresses in the Ethernet header. */
 800174e:	f005 f9b5 	bl	8006abc <_nx_packet_transmit_release>
 8001752:	e6c8      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
		if (nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
				& ETH_DMARXDESC_LS)
		{

			/* Yes, this BD is the last BD in the frame, set the last NX_PACKET's nx_packet_next to NULL.  */
			nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_next =
 8001754:	6962      	ldr	r2, [r4, #20]
					NX_NULL;

			/* Store the length of the packet in the first NX_PACKET.  */
			nx_driver_information.nx_driver_information_receive_packets[first_idx]->nx_packet_length =
					((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 8001756:	f102 0801 	add.w	r8, r2, #1
					NX_NULL;
 800175a:	f502 63a1 	add.w	r3, r2, #1288	; 0x508
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 800175e:	eb04 1148 	add.w	r1, r4, r8, lsl #5
					NX_NULL;
 8001762:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 8001766:	6849      	ldr	r1, [r1, #4]
					NX_NULL;
 8001768:	685b      	ldr	r3, [r3, #4]
					((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
 800176a:	2900      	cmp	r1, #0
					NX_NULL;
 800176c:	9301      	str	r3, [sp, #4]
					((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
 800176e:	f2c0 80c1 	blt.w	80018f4 <nx_driver_stm32f7xx+0x540>
 8001772:	4692      	mov	sl, r2
				& ETH_DMARXDESC_LS)
 8001774:	2700      	movs	r7, #0
      SCB->DCIMVAC = op_addr;
 8001776:	f8df b298 	ldr.w	fp, [pc, #664]	; 8001a10 <nx_driver_stm32f7xx+0x65c>
 800177a:	9502      	str	r5, [sp, #8]
 800177c:	e016      	b.n	80017ac <nx_driver_stm32f7xx+0x3f8>
				_nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr,
						received_packet_ptr);
			}

			/* Set the first BD index for the next packet.  */
			first_idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800177e:	f509 60a1 	add.w	r0, r9, #1288	; 0x508

			/* Update the current receive index.  */
 8001782:	6959      	ldr	r1, [r3, #20]
			nx_driver_information.nx_driver_information_receive_current_index = first_idx;

 8001784:	4552      	cmp	r2, sl
			first_idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 8001786:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800178a:	6840      	ldr	r0, [r0, #4]
			/* Update the current receive index.  */
 800178c:	60d9      	str	r1, [r3, #12]
			first_idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800178e:	6058      	str	r0, [r3, #4]

 8001790:	d001      	beq.n	8001796 <nx_driver_stm32f7xx+0x3e2>
			received_packet_ptr =
					nx_driver_information.nx_driver_information_receive_packets[first_idx];

 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	609a      	str	r2, [r3, #8]
			bd_count = 0;

		}
 8001796:	3701      	adds	r7, #1
 8001798:	4603      	mov	r3, r0
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 800179a:	f109 0801 	add.w	r8, r9, #1

 800179e:	464a      	mov	r2, r9
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 80017a0:	eb04 1148 	add.w	r1, r4, r8, lsl #5
 80017a4:	6849      	ldr	r1, [r1, #4]
					((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
 80017a6:	2900      	cmp	r1, #0
 80017a8:	f2c0 80a3 	blt.w	80018f2 <nx_driver_stm32f7xx+0x53e>
							->nx_packet_prepend_ptr
 80017ac:	eb04 1148 	add.w	r1, r4, r8, lsl #5
 80017b0:	f008 090f 	and.w	r9, r8, #15
 80017b4:	6848      	ldr	r0, [r1, #4]
 80017b6:	05c0      	lsls	r0, r0, #23
 80017b8:	d5e1      	bpl.n	800177e <nx_driver_stm32f7xx+0x3ca>

 80017ba:	6848      	ldr	r0, [r1, #4]
 80017bc:	f50a 6ea1 	add.w	lr, sl, #1288	; 0x508
				if (nx_driver_information.nx_driver_information_receive_packets[idx]
 80017c0:	4d90      	ldr	r5, [pc, #576]	; (8001a04 <nx_driver_stm32f7xx+0x650>)
			/* Is there only one BD for the current frame?  */
 80017c2:	2600      	movs	r6, #0

 80017c4:	f3c0 400d 	ubfx	r0, r0, #16, #14
						->nx_packet_prepend_ptr -= 2;
 80017c8:	f8d3 c008 	ldr.w	ip, [r3, #8]
				if (nx_driver_information.nx_driver_information_receive_packets[idx]
 80017cc:	682d      	ldr	r5, [r5, #0]

 80017ce:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80017d2:	3804      	subs	r0, #4
						>= nx_driver_information.nx_driver_information_receive_packets[idx]
 80017d4:	4552      	cmp	r2, sl

 80017d6:	f8de e004 	ldr.w	lr, [lr, #4]
				if (nx_driver_information.nx_driver_information_receive_packets[idx]
 80017da:	fb05 0517 	mls	r5, r5, r7, r0
			/* Is there only one BD for the current frame?  */
 80017de:	605e      	str	r6, [r3, #4]
				if (nx_driver_information.nx_driver_information_receive_packets[idx]
 80017e0:	4465      	add	r5, ip

 80017e2:	f8ce 0024 	str.w	r0, [lr, #36]	; 0x24
						->nx_packet_prepend_ptr -= 2;
 80017e6:	60dd      	str	r5, [r3, #12]
						>= nx_driver_information.nx_driver_information_receive_packets[idx]
 80017e8:	d01b      	beq.n	8001822 <nx_driver_stm32f7xx+0x46e>
					temp_idx = (idx - 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 80017ea:	f1ac 0002 	sub.w	r0, ip, #2
							->nx_packet_next = NX_NULL;
 80017ee:	4285      	cmp	r5, r0
					temp_idx = (idx - 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 80017f0:	6098      	str	r0, [r3, #8]
							->nx_packet_next = NX_NULL;
 80017f2:	d816      	bhi.n	8001822 <nx_driver_stm32f7xx+0x46e>
							.nx_driver_information_receive_packets[idx]->nx_packet_prepend_ptr
 80017f4:	3a01      	subs	r2, #1
							ETH_DMARXDESC_OWN;
 80017f6:	6918      	ldr	r0, [r3, #16]
					nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status =
 80017f8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
					nx_driver_information.nx_driver_information_receive_packets[idx]
 80017fc:	3f01      	subs	r7, #1
							.nx_driver_information_receive_packets[idx]->nx_packet_prepend_ptr
 80017fe:	f002 020f 	and.w	r2, r2, #15
							ETH_DMARXDESC_OWN;
 8001802:	3002      	adds	r0, #2
							>= nx_driver_information.nx_driver_information_receive_packets[idx]
 8001804:	f502 62a1 	add.w	r2, r2, #1288	; 0x508
 8001808:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800180c:	f8d2 c004 	ldr.w	ip, [r2, #4]
									->nx_packet_append_ptr;
 8001810:	f8dc 200c 	ldr.w	r2, [ip, #12]
							>= nx_driver_information.nx_driver_information_receive_packets[idx]
 8001814:	f8cc 6004 	str.w	r6, [ip, #4]
									->nx_packet_append_ptr;
 8001818:	3a01      	subs	r2, #1
 800181a:	f8cc 200c 	str.w	r2, [ip, #12]
					nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status =
 800181e:	604d      	str	r5, [r1, #4]
							ETH_DMARXDESC_OWN;
 8001820:	6098      	str	r0, [r3, #8]
			}
 8001822:	1e3e      	subs	r6, r7, #0
 8001824:	db3c      	blt.n	80018a0 <nx_driver_stm32f7xx+0x4ec>
 8001826:	f10d 0814 	add.w	r8, sp, #20
				temp_idx = (first_idx + i) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800182a:	2300      	movs	r3, #0
 800182c:	eb06 070a 	add.w	r7, r6, sl
 8001830:	4641      	mov	r1, r8
 8001832:	68a0      	ldr	r0, [r4, #8]
 8001834:	461a      	mov	r2, r3
			for (i = bd_count; i >= 0; i--)
 8001836:	f007 050f 	and.w	r5, r7, #15
				temp_idx = (first_idx + i) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800183a:	f004 ff27 	bl	800668c <_nx_packet_allocate>
 800183e:	2800      	cmp	r0, #0
 8001840:	d166      	bne.n	8001910 <nx_driver_stm32f7xx+0x55c>
						NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
 8001842:	9805      	ldr	r0, [sp, #20]
				{
 8001844:	eb04 1145 	add.w	r1, r4, r5, lsl #5
					/* Adjust the new packet and assign it to the BD.  */
 8001848:	f505 67a1 	add.w	r7, r5, #1288	; 0x508

 800184c:	1c6b      	adds	r3, r5, #1
						NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
 800184e:	6882      	ldr	r2, [r0, #8]

 8001850:	eb04 1543 	add.w	r5, r4, r3, lsl #5
					nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx]
 8001854:	6903      	ldr	r3, [r0, #16]
						NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
 8001856:	f102 0c02 	add.w	ip, r2, #2
					/* Adjust the new packet and assign it to the BD.  */
 800185a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
					nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx]
 800185e:	6942      	ldr	r2, [r0, #20]
						NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
 8001860:	f8c0 c008 	str.w	ip, [r0, #8]
				{
 8001864:	f8c1 c02c 	str.w	ip, [r1, #44]	; 0x2c

 8001868:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
					nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx]
 800186c:	1ad2      	subs	r2, r2, r3
					/* Adjust the new packet and assign it to the BD.  */
 800186e:	6078      	str	r0, [r7, #4]

 8001870:	6069      	str	r1, [r5, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8001872:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8001876:	2a00      	cmp	r2, #0
 8001878:	dd0b      	ble.n	8001892 <nx_driver_stm32f7xx+0x4de>
 800187a:	3a01      	subs	r2, #1
 800187c:	f103 0020 	add.w	r0, r3, #32
 8001880:	f022 011f 	bic.w	r1, r2, #31
 8001884:	4602      	mov	r2, r0
 8001886:	440a      	add	r2, r1
      SCB->DCIMVAC = op_addr;
 8001888:	f8cb 325c 	str.w	r3, [fp, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800188c:	3320      	adds	r3, #32
    while (op_size > 0) {
 800188e:	4293      	cmp	r3, r2
 8001890:	d1fa      	bne.n	8001888 <nx_driver_stm32f7xx+0x4d4>
 8001892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001896:	f3bf 8f6f 	isb	sy
			}
 800189a:	f116 36ff 	adds.w	r6, r6, #4294967295
 800189e:	d2c4      	bcs.n	800182a <nx_driver_stm32f7xx+0x476>

 80018a0:	9901      	ldr	r1, [sp, #4]

 80018a2:	68e3      	ldr	r3, [r4, #12]

 80018a4:	688a      	ldr	r2, [r1, #8]

 80018a6:	634b      	str	r3, [r1, #52]	; 0x34
 80018a8:	8993      	ldrh	r3, [r2, #12]
					/* Free up the BD to ready state. */
 80018aa:	6820      	ldr	r0, [r4, #0]
 80018ac:	ba5b      	rev16	r3, r3
 80018ae:	b29b      	uxth	r3, r3

 80018b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018b4:	f000 813e 	beq.w	8001b34 <nx_driver_stm32f7xx+0x780>
 80018b8:	f248 61dd 	movw	r1, #34525	; 0x86dd
 80018bc:	428b      	cmp	r3, r1
 80018be:	f000 8138 	beq.w	8001b32 <nx_driver_stm32f7xx+0x77e>
}
 80018c2:	f640 0106 	movw	r1, #2054	; 0x806
 80018c6:	428b      	cmp	r3, r1
 80018c8:	f000 814a 	beq.w	8001b60 <nx_driver_stm32f7xx+0x7ac>
/*                                                                        */ 
 80018cc:	f248 0135 	movw	r1, #32821	; 0x8035
 80018d0:	428b      	cmp	r3, r1
 80018d2:	f000 813c 	beq.w	8001b4e <nx_driver_stm32f7xx+0x79a>
/*                                                                        */ 
 80018d6:	9801      	ldr	r0, [sp, #4]
 80018d8:	f005 f88a 	bl	80069f0 <_nx_packet_release>
			}
 80018dc:	f509 63a1 	add.w	r3, r9, #1288	; 0x508
							+ 2;
 80018e0:	f8c4 9014 	str.w	r9, [r4, #20]
					nx_driver_information.nx_driver_information_receive_packets[temp_idx]
 80018e4:	46ca      	mov	sl, r9
			{
 80018e6:	2700      	movs	r7, #0
			}
 80018e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	e753      	b.n	800179a <nx_driver_stm32f7xx+0x3e6>
 80018f2:	9d02      	ldr	r5, [sp, #8]
		else
		{

			/* This BD is not the last BD of a frame. It is a intermediate descriptor.  */

 80018f4:	4b41      	ldr	r3, [pc, #260]	; (80019fc <nx_driver_stm32f7xx+0x648>)
 80018f6:	f241 0214 	movw	r2, #4116	; 0x1014
 80018fa:	5899      	ldr	r1, [r3, r2]
 80018fc:	0609      	lsls	r1, r1, #24
 80018fe:	f57f aed3 	bpl.w	80016a8 <nx_driver_stm32f7xx+0x2f4>
			nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_next =
					nx_driver_information.nx_driver_information_receive_packets[(idx + 1)
							& (NX_DRIVER_RX_DESCRIPTORS - 1)];

 8001902:	2480      	movs	r4, #128	; 0x80
			nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_append_ptr =
					nx_driver_information.nx_driver_information_receive_packets[idx]
 8001904:	f241 0108 	movw	r1, #4104	; 0x1008
 8001908:	2000      	movs	r0, #0

 800190a:	509c      	str	r4, [r3, r2]
					nx_driver_information.nx_driver_information_receive_packets[idx]
 800190c:	5058      	str	r0, [r3, r1]
 800190e:	e6cb      	b.n	80016a8 <nx_driver_stm32f7xx+0x2f4>
					break;
 8001910:	f505 63a1 	add.w	r3, r5, #1288	; 0x508
 8001914:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001918:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	6858      	ldr	r0, [r3, #4]
 8001920:	f005 f866 	bl	80069f0 <_nx_packet_release>
				/* At least one packet allocation was failed, release the received packet.  */
 8001924:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
				nx_packet_release(
 8001928:	f505 63a1 	add.w	r3, r5, #1288	; 0x508
 800192c:	3f01      	subs	r7, #1
				/* At least one packet allocation was failed, release the received packet.  */
 800192e:	3501      	adds	r5, #1
				nx_packet_release(
 8001930:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			}
 8001934:	45ba      	cmp	sl, r7
				/* At least one packet allocation was failed, release the received packet.  */
 8001936:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 800193a:	f007 050f 	and.w	r5, r7, #15
				nx_packet_release(
 800193e:	685a      	ldr	r2, [r3, #4]
				/* At least one packet allocation was failed, release the received packet.  */
 8001940:	6041      	str	r1, [r0, #4]
				nx_packet_release(
 8001942:	6913      	ldr	r3, [r2, #16]
 8001944:	f103 0302 	add.w	r3, r3, #2
 8001948:	6093      	str	r3, [r2, #8]
			}
 800194a:	d1ed      	bne.n	8001928 <nx_driver_stm32f7xx+0x574>
 800194c:	e7c6      	b.n	80018dc <nx_driver_stm32f7xx+0x528>

 800194e:	e9d4 6307 	ldrd	r6, r3, [r4, #28]
 8001952:	f103 39ff 	add.w	r9, r3, #4294967295
 8001956:	4623      	mov	r3, r4
 8001958:	464c      	mov	r4, r9
 800195a:	4699      	mov	r9, r3
 800195c:	e012      	b.n	8001984 <nx_driver_stm32f7xx+0x5d0>
					numOfBuf;
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db22      	blt.n	80019aa <nx_driver_stm32f7xx+0x5f6>
			/* Get out of the loop!  */
 8001964:	688a      	ldr	r2, [r1, #8]
/*  FUNCTION                                               RELEASE        */
 8001966:	3601      	adds	r6, #1
			/* Get out of the loop!  */
 8001968:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800196a:	320e      	adds	r2, #14
/*  FUNCTION                                               RELEASE        */
 800196c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
			/* Get out of the loop!  */
 8001970:	3b0e      	subs	r3, #14
 8001972:	608a      	str	r2, [r1, #8]
 8001974:	624b      	str	r3, [r1, #36]	; 0x24
	}
 8001976:	f005 f8a1 	bl	8006abc <_nx_packet_transmit_release>

 800197a:	f8ca 7004 	str.w	r7, [sl, #4]
/*    _nx_driver_hardware_packet_received               STM32F7xx/IAR     */
 800197e:	e9c9 6407 	strd	r6, r4, [r9, #28]
 8001982:	3c01      	subs	r4, #1
					numOfBuf;
 8001984:	f106 0311 	add.w	r3, r6, #17
			nx_packet_transmit_release(
 8001988:	f506 6a91 	add.w	sl, r6, #1160	; 0x488
			NX_DRIVER_ETHERNET_HEADER_REMOVE(
 800198c:	1c62      	adds	r2, r4, #1
					numOfBuf;
 800198e:	eb09 1343 	add.w	r3, r9, r3, lsl #5
			nx_packet_transmit_release(
 8001992:	eb09 0a8a 	add.w	sl, r9, sl, lsl #2
			NX_DRIVER_ETHERNET_HEADER_REMOVE(
 8001996:	d008      	beq.n	80019aa <nx_driver_stm32f7xx+0x5f6>
			nx_packet_transmit_release(
 8001998:	f8da 1004 	ldr.w	r1, [sl, #4]
	}
 800199c:	4608      	mov	r0, r1
			nx_packet_transmit_release(
 800199e:	2900      	cmp	r1, #0
 80019a0:	d1dd      	bne.n	800195e <nx_driver_stm32f7xx+0x5aa>
			nx_driver_information.nx_driver_information_transmit_packets[idx] = NX_NULL;
 80019a2:	3601      	adds	r6, #1
 80019a4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 80019a8:	e7eb      	b.n	8001982 <nx_driver_stm32f7xx+0x5ce>
 80019aa:	464c      	mov	r4, r9
 80019ac:	e679      	b.n	80016a2 <nx_driver_stm32f7xx+0x2ee>
		NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 80019ae:	3b0e      	subs	r3, #14
		driver_req_ptr->nx_ip_driver_status = NX_DRIVER_ERROR;
 80019b0:	245a      	movs	r4, #90	; 0x5a
		NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 80019b2:	608a      	str	r2, [r1, #8]
		nx_packet_transmit_release(packet_ptr);
 80019b4:	4608      	mov	r0, r1
		NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 80019b6:	624b      	str	r3, [r1, #36]	; 0x24
		driver_req_ptr->nx_ip_driver_status = NX_DRIVER_ERROR;
 80019b8:	606c      	str	r4, [r5, #4]
		nx_packet_transmit_release(packet_ptr);
 80019ba:	f005 f87f 	bl	8006abc <_nx_packet_transmit_release>
 80019be:	e592      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
/*    ETH_MACTransmissionCmd                Disable transmit              */
 80019c0:	4e11      	ldr	r6, [pc, #68]	; (8001a08 <nx_driver_stm32f7xx+0x654>)
			_nx_driver_disable(driver_req_ptr);
 80019c2:	6987      	ldr	r7, [r0, #24]
/*    ETH_MACTransmissionCmd                Disable transmit              */
 80019c4:	4630      	mov	r0, r6
 80019c6:	f019 fadb 	bl	801af80 <HAL_ETH_Start>
/*    ETH_MACReceptionCmd                   Disable receive               */
 80019ca:	6831      	ldr	r1, [r6, #0]
 80019cc:	f241 021c 	movw	r2, #4124	; 0x101c
/**************************************************************************/
 80019d0:	2004      	movs	r0, #4
/*    ETH_MACReceptionCmd                   Disable receive               */
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <nx_driver_stm32f7xx+0x658>)
/*                                                                        */
 80019d4:	2600      	movs	r6, #0
/*    ETH_MACReceptionCmd                   Disable receive               */
 80019d6:	f851 c002 	ldr.w	ip, [r1, r2]
/**************************************************************************/
 80019da:	6060      	str	r0, [r4, #4]
/*  AUTHOR                                                                */
 80019dc:	2001      	movs	r0, #1
/*    ETH_MACReceptionCmd                   Disable receive               */
 80019de:	ea4c 0303 	orr.w	r3, ip, r3
 80019e2:	508b      	str	r3, [r1, r2]
/*                                                                        */
 80019e4:	606e      	str	r6, [r5, #4]
/*  AUTHOR                                                                */
 80019e6:	f887 0c4e 	strb.w	r0, [r7, #3150]	; 0xc4e
 80019ea:	e57c      	b.n	80014e6 <nx_driver_stm32f7xx+0x132>
	NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 80019ec:	f248 0e35 	movw	lr, #32821	; 0x8035
 80019f0:	ea40 0e0e 	orr.w	lr, r0, lr
 80019f4:	e534      	b.n	8001460 <nx_driver_stm32f7xx+0xac>
 80019f6:	bf00      	nop
 80019f8:	20000178 	.word	0x20000178
 80019fc:	40028000 	.word	0x40028000
 8001a00:	20000000 	.word	0x20000000
 8001a04:	200015b8 	.word	0x200015b8
 8001a08:	20004b10 	.word	0x20004b10
 8001a0c:	00010041 	.word	0x00010041
 8001a10:	e000ed00 	.word	0xe000ed00
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Buffer1Addr =
 8001a14:	6842      	ldr	r2, [r0, #4]

 8001a16:	eb04 1346 	add.w	r3, r4, r6, lsl #5
		}
 8001a1a:	68cf      	ldr	r7, [r1, #12]
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Buffer1Addr =
 8001a1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000

 8001a20:	f8c3 922c 	str.w	r9, [r3, #556]	; 0x22c
		}
 8001a24:	eba7 0709 	sub.w	r7, r7, r9
				((pktIdx->nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr) & ETH_DMATXDESC_TBS1);
 8001a28:	690b      	ldr	r3, [r1, #16]
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Buffer1Addr =
 8001a2a:	6042      	str	r2, [r0, #4]
		/* Set the buffer size.  */
 8001a2c:	f8d0 c004 	ldr.w	ip, [r0, #4]
		}
 8001a30:	f3c7 070c 	ubfx	r7, r7, #0, #13
				((pktIdx->nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr) & ETH_DMATXDESC_TBS1);
 8001a34:	694a      	ldr	r2, [r1, #20]
		/* Set the buffer size.  */
 8001a36:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
		}
 8001a3a:	6087      	str	r7, [r0, #8]
				((pktIdx->nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr) & ETH_DMATXDESC_TBS1);
 8001a3c:	1ad2      	subs	r2, r2, r3
		/* Set the buffer size.  */
 8001a3e:	f8c0 c004 	str.w	ip, [r0, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a42:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8001a46:	2a00      	cmp	r2, #0
 8001a48:	dd0b      	ble.n	8001a62 <nx_driver_stm32f7xx+0x6ae>
 8001a4a:	3a01      	subs	r2, #1
 8001a4c:	f103 0720 	add.w	r7, r3, #32
      SCB->DCCMVAC = op_addr;
 8001a50:	486f      	ldr	r0, [pc, #444]	; (8001c10 <nx_driver_stm32f7xx+0x85c>)
 8001a52:	f022 021f 	bic.w	r2, r2, #31
 8001a56:	443a      	add	r2, r7
 8001a58:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8001a5c:	3320      	adds	r3, #32
    while (op_size > 0) {
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d1fa      	bne.n	8001a58 <nx_driver_stm32f7xx+0x6a4>
 8001a62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	1c70      	adds	r0, r6, #1
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001a6c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001a70:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001a74:	f1bc 0f00 	cmp.w	ip, #0
 8001a78:	f000 80c4 	beq.w	8001c04 <nx_driver_stm32f7xx+0x850>
	}
 8001a7c:	f100 0711 	add.w	r7, r0, #17
 8001a80:	eb04 1347 	add.w	r3, r4, r7, lsl #5
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db4f      	blt.n	8001b2a <nx_driver_stm32f7xx+0x776>
 8001a8a:	f500 6391 	add.w	r3, r0, #1160	; 0x488
 8001a8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d148      	bne.n	8001b2a <nx_driver_stm32f7xx+0x776>
			packet_ptr->nx_packet_data_end - packet_ptr->nx_packet_data_start);
 8001a98:	469e      	mov	lr, r3
      SCB->DCCMVAC = op_addr;
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4e5c      	ldr	r6, [pc, #368]	; (8001c10 <nx_driver_stm32f7xx+0x85c>)
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	46ab      	mov	fp, r5
 8001aa2:	469c      	mov	ip, r3
	nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001aa4:	6885      	ldr	r5, [r0, #8]
	if (packet_ptr->nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8001aa6:	eb04 1947 	add.w	r9, r4, r7, lsl #5
 8001aaa:	68c3      	ldr	r3, [r0, #12]
	nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001aac:	eb04 124c 	add.w	r2, r4, ip, lsl #5
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |=
 8001ab0:	f10e 0e01 	add.w	lr, lr, #1
	if (packet_ptr->nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8001ab4:	1b5b      	subs	r3, r3, r5
	nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001ab6:	f8c2 522c 	str.w	r5, [r2, #556]	; 0x22c
	NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
 8001aba:	f8d9 2004 	ldr.w	r2, [r9, #4]
	if (packet_ptr->nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8001abe:	f3c3 080c 	ubfx	r8, r3, #0, #13
	}
 8001ac2:	690b      	ldr	r3, [r1, #16]
	NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
 8001ac4:	f022 5a40 	bic.w	sl, r2, #805306368	; 0x30000000
	}
 8001ac8:	694a      	ldr	r2, [r1, #20]
	if (packet_ptr->nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8001aca:	f8c9 8008 	str.w	r8, [r9, #8]
	NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
 8001ace:	f8c9 a004 	str.w	sl, [r9, #4]
	}
 8001ad2:	1ad2      	subs	r2, r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad4:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	dd0b      	ble.n	8001af4 <nx_driver_stm32f7xx+0x740>
 8001adc:	f102 38ff 	add.w	r8, r2, #4294967295
 8001ae0:	f103 0220 	add.w	r2, r3, #32
 8001ae4:	f028 081f 	bic.w	r8, r8, #31
 8001ae8:	4442      	add	r2, r8
      SCB->DCCMVAC = op_addr;
 8001aea:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8001aee:	3320      	adds	r3, #32
    while (op_size > 0) {
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1fa      	bne.n	8001aea <nx_driver_stm32f7xx+0x736>
 8001af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001af8:	f3bf 8f6f 	isb	sy
 8001afc:	f10c 0301 	add.w	r3, ip, #1

 8001b00:	6840      	ldr	r0, [r0, #4]
 8001b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d033      	beq.n	8001b72 <nx_driver_stm32f7xx+0x7be>
	}
 8001b0a:	f103 0711 	add.w	r7, r3, #17
 8001b0e:	eb04 1247 	add.w	r2, r4, r7, lsl #5
 8001b12:	6852      	ldr	r2, [r2, #4]
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	db07      	blt.n	8001b28 <nx_driver_stm32f7xx+0x774>
		SCB_CleanDCache_by_Addr((uint32_t*)(packet_ptr->nx_packet_data_start),
 8001b18:	469c      	mov	ip, r3
	}
 8001b1a:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8001b1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0bd      	beq.n	8001aa4 <nx_driver_stm32f7xx+0x6f0>
 8001b28:	465d      	mov	r5, fp
 8001b2a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8001b2e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001b30:	e4cf      	b.n	80014d2 <nx_driver_stm32f7xx+0x11e>
 8001b32:	9901      	ldr	r1, [sp, #4]

 8001b34:	6a4b      	ldr	r3, [r1, #36]	; 0x24

 8001b36:	320e      	adds	r2, #14

 8001b38:	3b0e      	subs	r3, #14
				packet_ptr->nx_packet_prepend_ptr + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8001b3a:	608a      	str	r2, [r1, #8]
				packet_ptr->nx_packet_length - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8001b3c:	624b      	str	r3, [r1, #36]	; 0x24
	else
 8001b3e:	f000 fb5b 	bl	80021f8 <_nx_ip_packet_deferred_receive>
 8001b42:	e6cb      	b.n	80018dc <nx_driver_stm32f7xx+0x528>
		/* This packet exceeds the size of the driver's MTU. Simply throw it away! */
 8001b44:	f248 6edd 	movw	lr, #34525	; 0x86dd
 8001b48:	ea40 0e0e 	orr.w	lr, r0, lr
 8001b4c:	e488      	b.n	8001460 <nx_driver_stm32f7xx+0xac>
/*    Note: that it is assumed further driver interrupts are locked out   */ 
 8001b4e:	9901      	ldr	r1, [sp, #4]
/*    the transmit queue is regulated by the constant                     */ 
 8001b50:	320e      	adds	r2, #14
/*    Note: that it is assumed further driver interrupts are locked out   */ 
 8001b52:	6a4b      	ldr	r3, [r1, #36]	; 0x24
/*    list with head and tail pointers. The maximum number of packets on  */ 
 8001b54:	608a      	str	r2, [r1, #8]
/*    Note: that it is assumed further driver interrupts are locked out   */ 
 8001b56:	3b0e      	subs	r3, #14
/*                                                                        */ 
 8001b58:	624b      	str	r3, [r1, #36]	; 0x24
/*  INPUT                                                                 */ 
 8001b5a:	f004 ffd1 	bl	8006b00 <_nx_rarp_packet_deferred_receive>
 8001b5e:	e6bd      	b.n	80018dc <nx_driver_stm32f7xx+0x528>
/*  AUTHOR                                                                */ 
 8001b60:	9901      	ldr	r1, [sp, #4]
/*  FUNCTION                                               RELEASE        */ 
 8001b62:	320e      	adds	r2, #14
/*  AUTHOR                                                                */ 
 8001b64:	6a4b      	ldr	r3, [r1, #36]	; 0x24
/*                                                                        */ 
 8001b66:	608a      	str	r2, [r1, #8]
/*  AUTHOR                                                                */ 
 8001b68:	3b0e      	subs	r3, #14
/*                                                           6.0          */ 
 8001b6a:	624b      	str	r3, [r1, #36]	; 0x24
/*                                                                        */ 
 8001b6c:	f00d fadc 	bl	800f128 <_nx_arp_packet_deferred_receive>
 8001b70:	e6b4      	b.n	80018dc <nx_driver_stm32f7xx+0x528>
 8001b72:	4660      	mov	r0, ip
 8001b74:	465d      	mov	r5, fp
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |=
 8001b76:	eb04 1747 	add.w	r7, r4, r7, lsl #5
	nx_driver_information.nx_driver_information_transmit_packets[curIdx] = packet_ptr;
 8001b7a:	6bce      	ldr	r6, [r1, #60]	; 0x3c
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |=
 8001b7c:	687a      	ldr	r2, [r7, #4]
	nx_driver_information.nx_driver_information_transmit_packets[curIdx] = packet_ptr;
 8001b7e:	f416 7f15 	tst.w	r6, #596	; 0x254
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |=
 8001b82:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
 8001b86:	607a      	str	r2, [r7, #4]

 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001b8e:	607a      	str	r2, [r7, #4]
	nx_driver_information.nx_driver_information_transmit_packets[curIdx] = packet_ptr;
 8001b90:	d031      	beq.n	8001bf6 <nx_driver_stm32f7xx+0x842>
	TX_DISABLE
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	f442 0240 	orr.w	r2, r2, #12582912	; 0xc00000
 8001b98:	607a      	str	r2, [r7, #4]

 8001b9a:	f500 6291 	add.w	r2, r0, #1160	; 0x488
				ETH_DMATXDESC_OWN;
 8001b9e:	61a3      	str	r3, [r4, #24]

 8001ba0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8001ba4:	6059      	str	r1, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001ba6:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001baa:	b672      	cpsid	i
	if ((ETH->DMASR & ETH_DMASR_TBUS) != (ULONG)RESET)
 8001bac:	6a23      	ldr	r3, [r4, #32]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4473      	add	r3, lr
 8001bb2:	6223      	str	r3, [r4, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001bb4:	f382 8810 	msr	PRIMASK, r2
		ETH->DMASR = ETH_DMASR_TBUS;
 8001bb8:	f1be 0f00 	cmp.w	lr, #0
 8001bbc:	d00d      	beq.n	8001bda <nx_driver_stm32f7xx+0x826>
	}
 8001bbe:	3801      	subs	r0, #1
		ETH->DMASR = ETH_DMASR_TBUS;
 8001bc0:	f1be 0e01 	subs.w	lr, lr, #1
	}
 8001bc4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
 8001bc8:	f100 0311 	add.w	r3, r0, #17
 8001bcc:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bd6:	605a      	str	r2, [r3, #4]
		ETH->DMASR = ETH_DMASR_TBUS;
 8001bd8:	d1f1      	bne.n	8001bbe <nx_driver_stm32f7xx+0x80a>
/*  FUNCTION                                               RELEASE        */
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <nx_driver_stm32f7xx+0x860>)
 8001bdc:	f241 0214 	movw	r2, #4116	; 0x1014
 8001be0:	5899      	ldr	r1, [r3, r2]
 8001be2:	0749      	lsls	r1, r1, #29
 8001be4:	f57f ad60 	bpl.w	80016a8 <nx_driver_stm32f7xx+0x2f4>
/*                                                           6.0          */
 8001be8:	2404      	movs	r4, #4
/*    Yuxin Zhou, Microsoft Corporation                                   */
 8001bea:	f241 0104 	movw	r1, #4100	; 0x1004
 8001bee:	2000      	movs	r0, #0
/*                                                           6.0          */
 8001bf0:	509c      	str	r4, [r3, r2]
/*    Yuxin Zhou, Microsoft Corporation                                   */
 8001bf2:	5058      	str	r0, [r3, r1]
 8001bf4:	e558      	b.n	80016a8 <nx_driver_stm32f7xx+0x2f4>
	nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use += bd_count + 1;
 8001bf6:	07f6      	lsls	r6, r6, #31
 8001bf8:	d5cf      	bpl.n	8001b9a <nx_driver_stm32f7xx+0x7e6>
	for (; bd_count > 0; bd_count--)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	e7ca      	b.n	8001b9a <nx_driver_stm32f7xx+0x7e6>
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001c04:	4603      	mov	r3, r0
			packet_ptr->nx_packet_data_end - packet_ptr->nx_packet_data_start);
 8001c06:	46e6      	mov	lr, ip
			pktIdx = pktIdx->nx_packet_next)
 8001c08:	4630      	mov	r0, r6
 8001c0a:	f106 0711 	add.w	r7, r6, #17
 8001c0e:	e7b2      	b.n	8001b76 <nx_driver_stm32f7xx+0x7c2>
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	40028000 	.word	0x40028000

08001c18 <nx_driver_stm32f7xx_ethernet_isr>:
/*  CALLS                                                                 */
/*                                                                        */
/*    _nx_ip_driver_deferred_processing     IP receive packet processing  */
/*    ETH_DMAClearITPendingBit              Ethernet DMA Interrupt clear  */
/*                                                                        */
/*  CALLED BY                                                             */
 8001c18:	f241 0214 	movw	r2, #4116	; 0x1014
 8001c1c:	490d      	ldr	r1, [pc, #52]	; (8001c54 <nx_driver_stm32f7xx_ethernet_isr+0x3c>)
/*                                                                        */
/*    ISR                                                                 */
/*                                                                        */
/*  RELEASE HISTORY                                                       */
/*                                                                        */
/*    DATE              NAME                      DESCRIPTION             */
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <nx_driver_stm32f7xx_ethernet_isr+0x40>)
/*  CALLED BY                                                             */
 8001c20:	5888      	ldr	r0, [r1, r2]
/*                                                                        */
 8001c22:	b410      	push	{r4}
/*                                                                        */
 8001c24:	4c0d      	ldr	r4, [pc, #52]	; (8001c5c <nx_driver_stm32f7xx_ethernet_isr+0x44>)
 8001c26:	508c      	str	r4, [r1, r2]
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
 8001c28:	07c4      	lsls	r4, r0, #31
/*    DATE              NAME                      DESCRIPTION             */
 8001c2a:	691a      	ldr	r2, [r3, #16]
/**************************************************************************/
 8001c2c:	d50b      	bpl.n	8001c46 <nx_driver_stm32f7xx_ethernet_isr+0x2e>
VOID nx_driver_stm32f7xx_ethernet_isr(VOID)
{

	ULONG status;
#ifdef NX_DRIVER_ENABLE_DEFERRED
	ULONG deffered_events;
 8001c2e:	f042 0104 	orr.w	r1, r2, #4
 8001c32:	6119      	str	r1, [r3, #16]
	status = ETH->DMASR;

	/* Clear the Ethernet DMA Rx IT pending bits */
	ETH->DMASR = ETH_DMA_IT_R | ETH_DMA_IT_T | ETH_DMA_IT_NIS;

#ifdef NX_DRIVER_ENABLE_DEFERRED
 8001c34:	0640      	lsls	r0, r0, #25
 8001c36:	d502      	bpl.n	8001c3e <nx_driver_stm32f7xx_ethernet_isr+0x26>
	deffered_events = nx_driver_information.nx_driver_information_deferred_events;
#endif /* NX_DRIVER_ENABLE_DEFERRED */

	/* Interrupt on transmit completion.  */
	if (status & ETH_DMA_IT_T)
	{
 8001c38:	f041 0101 	orr.w	r1, r1, #1
 8001c3c:	6119      	str	r1, [r3, #16]
		nx_driver_information.nx_driver_information_deferred_events |=
				NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
#else

        /* Process transmitted packet(s).  */
        _nx_driver_hardware_packet_transmitted();
 8001c3e:	b122      	cbz	r2, 8001c4a <nx_driver_stm32f7xx_ethernet_isr+0x32>
	/* Receive packet interrupt.  */
	if (status & ETH_DMA_IT_R)
	{

#ifdef NX_DRIVER_ENABLE_DEFERRED

 8001c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	4611      	mov	r1, r2
 8001c48:	e7f4      	b.n	8001c34 <nx_driver_stm32f7xx_ethernet_isr+0x1c>
	if (status & ETH_DMA_IT_R)
 8001c4a:	6818      	ldr	r0, [r3, #0]

 8001c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
	if (status & ETH_DMA_IT_R)
 8001c50:	f000 bac0 	b.w	80021d4 <_nx_ip_driver_deferred_processing>
 8001c54:	40028000 	.word	0x40028000
 8001c58:	20000154 	.word	0x20000154
 8001c5c:	00010041 	.word	0x00010041

08001c60 <_nx_icmp_enable>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8001c60:	b410      	push	{r4}
 8001c62:	4603      	mov	r3, r0
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8001c64:	4c06      	ldr	r4, [pc, #24]	; (8001c80 <_nx_icmp_enable+0x20>)

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8001c66:	4907      	ldr	r1, [pc, #28]	; (8001c84 <_nx_icmp_enable+0x24>)
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8001c68:	2000      	movs	r0, #0
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8001c6a:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <_nx_icmp_enable+0x28>)
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8001c6c:	f8c3 4884 	str.w	r4, [r3, #2180]	; 0x884
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8001c70:	f8c3 1880 	str.w	r1, [r3, #2176]	; 0x880
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8001c74:	f8c3 2888 	str.w	r2, [r3, #2184]	; 0x888
}
 8001c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	08001cdd 	.word	0x08001cdd
 8001c84:	08001c8d 	.word	0x08001c8d
 8001c88:	08001d0d 	.word	0x08001d0d

08001c8c <_nx_icmp_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8001c8c:	b430      	push	{r4, r5}
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460a      	mov	r2, r1
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8001c92:	f3ef 8405 	mrs	r4, IPSR
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 8001c96:	4d0f      	ldr	r5, [pc, #60]	; (8001cd4 <_nx_icmp_packet_receive+0x48>)
 8001c98:	682d      	ldr	r5, [r5, #0]
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	d105      	bne.n	8001caa <_nx_icmp_packet_receive+0x1e>
 8001c9e:	4d0e      	ldr	r5, [pc, #56]	; (8001cd8 <_nx_icmp_packet_receive+0x4c>)
 8001ca0:	f500 64d3 	add.w	r4, r0, #1688	; 0x698
 8001ca4:	682d      	ldr	r5, [r5, #0]
 8001ca6:	42a5      	cmp	r5, r4
 8001ca8:	d010      	beq.n	8001ccc <_nx_icmp_packet_receive+0x40>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001caa:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001cae:	b672      	cpsid	i
 8001cb0:	f8d3 089c 	ldr.w	r0, [r3, #2204]	; 0x89c
 8001cb4:	61d0      	str	r0, [r2, #28]
            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 8001cb6:	f8c3 289c 	str.w	r2, [r3, #2204]	; 0x89c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001cba:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 8001cc4:	2104      	movs	r1, #4
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 8001cc6:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8001cc8:	f01a bd2e 	b.w	801c728 <_tx_event_flags_set>
}
 8001ccc:	bc30      	pop	{r4, r5}
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8001cce:	f00d bc0f 	b.w	800f4f0 <_nx_icmp_packet_process>
 8001cd2:	bf00      	nop
 8001cd4:	200000ec 	.word	0x200000ec
 8001cd8:	20007a80 	.word	0x20007a80

08001cdc <_nx_icmp_queue_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 8001cdc:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001cde:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001ce2:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8001ce4:	2600      	movs	r6, #0
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 8001ce6:	f8d0 389c 	ldr.w	r3, [r0, #2204]	; 0x89c
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8001cea:	f8c0 689c 	str.w	r6, [r0, #2204]	; 0x89c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001cee:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8001cf2:	b14b      	cbz	r3, 8001d08 <_nx_icmp_queue_process+0x2c>
 8001cf4:	4605      	mov	r5, r0
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
        queue_head =  queue_head -> nx_packet_queue_next;
 8001cf6:	69dc      	ldr	r4, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8001cf8:	4619      	mov	r1, r3
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8001cfa:	61de      	str	r6, [r3, #28]
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f00d fbf7 	bl	800f4f0 <_nx_icmp_packet_process>
    while (queue_head)
 8001d02:	4623      	mov	r3, r4
 8001d04:	2c00      	cmp	r4, #0
 8001d06:	d1f6      	bne.n	8001cf6 <_nx_icmp_queue_process+0x1a>
    }
}
 8001d08:	bd70      	pop	{r4, r5, r6, pc}
 8001d0a:	bf00      	nop

08001d0c <_nx_icmpv4_packet_process>:
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8001d0c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
{
 8001d0e:	b570      	push	{r4, r5, r6, lr}
 8001d10:	460c      	mov	r4, r1
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8001d12:	688d      	ldr	r5, [r1, #8]
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8001d14:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8001d16:	b082      	sub	sp, #8
 8001d18:	4606      	mov	r6, r0
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8001d1a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8001d1e:	d009      	beq.n	8001d34 <_nx_icmpv4_packet_process+0x28>
            return;
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 8001d20:	782b      	ldrb	r3, [r5, #0]
 8001d22:	b1b3      	cbz	r3, 8001d52 <_nx_icmpv4_packet_process+0x46>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d01b      	beq.n	8001d60 <_nx_icmpv4_packet_process+0x54>
            _nx_packet_release(packet_ptr);
 8001d28:	4620      	mov	r0, r4
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
    }
}
 8001d2a:	b002      	add	sp, #8
 8001d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            _nx_packet_release(packet_ptr);
 8001d30:	f004 be5e 	b.w	80069f0 <_nx_packet_release>
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8001d34:	460b      	mov	r3, r1
 8001d36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d38:	4620      	mov	r0, r4
 8001d3a:	9100      	str	r1, [sp, #0]
 8001d3c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001d40:	f000 f8d0 	bl	8001ee4 <_nx_ip_checksum_compute>
        if (checksum)
 8001d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d48:	4298      	cmp	r0, r3
 8001d4a:	d1ed      	bne.n	8001d28 <_nx_icmpv4_packet_process+0x1c>
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 8001d4c:	782b      	ldrb	r3, [r5, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1e8      	bne.n	8001d24 <_nx_icmpv4_packet_process+0x18>
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8001d52:	4621      	mov	r1, r4
 8001d54:	4630      	mov	r0, r6
}
 8001d56:	b002      	add	sp, #8
 8001d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8001d5c:	f000 b808 	b.w	8001d70 <_nx_icmpv4_process_echo_reply>
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8001d60:	4621      	mov	r1, r4
 8001d62:	4630      	mov	r0, r6
}
 8001d64:	b002      	add	sp, #8
 8001d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8001d6a:	f000 b863 	b.w	8001e34 <_nx_icmpv4_process_echo_request>
 8001d6e:	bf00      	nop

08001d70 <_nx_icmpv4_process_echo_reply>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 8001d72:	688b      	ldr	r3, [r1, #8]
 8001d74:	88db      	ldrh	r3, [r3, #6]

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8001d76:	021c      	lsls	r4, r3, #8
 8001d78:	ea44 2413 	orr.w	r4, r4, r3, lsr #8
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001d7c:	f3ef 8710 	mrs	r7, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001d80:	b672      	cpsid	i
    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8001d82:	4e2b      	ldr	r6, [pc, #172]	; (8001e30 <_nx_icmpv4_process_echo_reply+0xc0>)
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 8001d84:	f8d0 38a0 	ldr.w	r3, [r0, #2208]	; 0x8a0
    _tx_thread_preempt_disable++;
 8001d88:	6832      	ldr	r2, [r6, #0]
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 8001d8a:	f8d0 58a4 	ldr.w	r5, [r0, #2212]	; 0x8a4
    _tx_thread_preempt_disable++;
 8001d8e:	3201      	adds	r2, #1
 8001d90:	6032      	str	r2, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001d92:	f387 8810 	msr	PRIMASK, r7
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 8001d96:	b175      	cbz	r5, 8001db6 <_nx_icmpv4_process_echo_reply+0x46>
 8001d98:	b2a4      	uxth	r4, r4
 8001d9a:	1e6a      	subs	r2, r5, #1
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 8001d9c:	f8b3 5078 	ldrh.w	r5, [r3, #120]	; 0x78
 8001da0:	42ac      	cmp	r4, r5
 8001da2:	d104      	bne.n	8001dae <_nx_icmpv4_process_echo_reply+0x3e>
 8001da4:	e016      	b.n	8001dd4 <_nx_icmpv4_process_echo_reply+0x64>
 8001da6:	f8b3 5078 	ldrh.w	r5, [r3, #120]	; 0x78
 8001daa:	42a5      	cmp	r5, r4
 8001dac:	d012      	beq.n	8001dd4 <_nx_icmpv4_process_echo_reply+0x64>
    while (suspended--)
 8001dae:	3a01      	subs	r2, #1
            break;
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    while (suspended--)
 8001db2:	1c55      	adds	r5, r2, #1
 8001db4:	d1f7      	bne.n	8001da6 <_nx_icmpv4_process_echo_reply+0x36>
        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8001db6:	4608      	mov	r0, r1
 8001db8:	f004 fe1a 	bl	80069f0 <_nx_packet_release>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001dbc:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001dc0:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8001dc2:	6833      	ldr	r3, [r6, #0]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001dc8:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
}
 8001dcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _tx_thread_system_preempt_check();
 8001dd0:	f01b ba50 	b.w	801d274 <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001dd4:	f3ef 8710 	mrs	r7, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001dd8:	b672      	cpsid	i
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8001dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d023      	beq.n	8001e28 <_nx_icmpv4_process_echo_reply+0xb8>
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 8001de0:	f8d0 48a0 	ldr.w	r4, [r0, #2208]	; 0x8a0
 8001de4:	429c      	cmp	r4, r3
                    thread_ptr -> tx_thread_suspended_previous;
 8001de6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8001de8:	bf08      	it	eq
 8001dea:	f8c0 28a0 	streq.w	r2, [r0, #2208]	; 0x8a0
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8001dee:	6754      	str	r4, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8001df0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001df2:	6722      	str	r2, [r4, #112]	; 0x70
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8001df4:	f8d0 48a4 	ldr.w	r4, [r0, #2212]	; 0x8a4
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8001df8:	2500      	movs	r5, #0
            _tx_thread_preempt_disable++;
 8001dfa:	6832      	ldr	r2, [r6, #0]
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8001dfc:	3c01      	subs	r4, #1
            _tx_thread_preempt_disable++;
 8001dfe:	3201      	adds	r2, #1
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8001e00:	f8c0 48a4 	str.w	r4, [r0, #2212]	; 0x8a4
            _tx_thread_preempt_disable++;
 8001e04:	6032      	str	r2, [r6, #0]
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8001e06:	669d      	str	r5, [r3, #104]	; 0x68
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001e08:	f387 8810 	msr	PRIMASK, r7
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8001e0c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
            _tx_thread_system_resume(thread_ptr);
 8001e0e:	4618      	mov	r0, r3
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8001e10:	688a      	ldr	r2, [r1, #8]
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8001e12:	6fdf      	ldr	r7, [r3, #124]	; 0x7c
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8001e14:	3c08      	subs	r4, #8
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8001e16:	3208      	adds	r2, #8
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8001e18:	624c      	str	r4, [r1, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8001e1a:	608a      	str	r2, [r1, #8]
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8001e1c:	6039      	str	r1, [r7, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8001e1e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
            _tx_thread_system_resume(thread_ptr);
 8001e22:	f01b fa45 	bl	801d2b0 <_tx_thread_system_resume>
 8001e26:	e7c9      	b.n	8001dbc <_nx_icmpv4_process_echo_reply+0x4c>
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c0 28a0 	str.w	r2, [r0, #2208]	; 0x8a0
 8001e2e:	e7e1      	b.n	8001df4 <_nx_icmpv4_process_echo_reply+0x84>
 8001e30:	20007a7c 	.word	0x20007a7c

08001e34 <_nx_icmpv4_process_echo_request>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 8001e36:	2300      	movs	r3, #0
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8001e38:	688a      	ldr	r2, [r1, #8]
{
 8001e3a:	b087      	sub	sp, #28

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8001e3c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
{
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4605      	mov	r5, r0
ULONG             next_hop_address = NX_NULL;
 8001e42:	9305      	str	r3, [sp, #20]
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 8001e44:	7013      	strb	r3, [r2, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8001e46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001e48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e4a:	0649      	lsls	r1, r1, #25
 8001e4c:	d51b      	bpl.n	8001e86 <_nx_icmpv4_process_echo_request+0x52>

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8001e4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
        header_ptr -> nx_icmpv4_header_checksum = 0;
 8001e50:	8053      	strh	r3, [r2, #2]
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8001e52:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001e56:	63e1      	str	r1, [r4, #60]	; 0x3c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8001e58:	ab05      	add	r3, sp, #20
 8001e5a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001e5e:	68f1      	ldr	r1, [r6, #12]
 8001e60:	4628      	mov	r0, r5
 8001e62:	f000 fa29 	bl	80022b8 <_nx_ip_route_find>
    ip_ptr -> nx_ip_pings_responded_to++;
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8001e66:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8001e6a:	68f2      	ldr	r2, [r6, #12]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	4621      	mov	r1, r4
 8001e70:	2680      	movs	r6, #128	; 0x80
 8001e72:	9c05      	ldr	r4, [sp, #20]
 8001e74:	4628      	mov	r0, r5
 8001e76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001e7a:	e9cd 6700 	strd	r6, r7, [sp]
 8001e7e:	f000 f9db 	bl	8002238 <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 8001e82:	b007      	add	sp, #28
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8001e86:	8851      	ldrh	r1, [r2, #2]
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 8001e88:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8001e8c:	020b      	lsls	r3, r1, #8
 8001e8e:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 8001e92:	43db      	mvns	r3, r3
 8001e94:	fa10 f383 	uxtah	r3, r0, r3
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001e98:	b299      	uxth	r1, r3
 8001e9a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001e9e:	b28b      	uxth	r3, r1
 8001ea0:	eb03 4311 	add.w	r3, r3, r1, lsr #16
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8001ea4:	43db      	mvns	r3, r3
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8001ea6:	ba5b      	rev16	r3, r3
 8001ea8:	8053      	strh	r3, [r2, #2]
 8001eaa:	e7d5      	b.n	8001e58 <_nx_icmpv4_process_echo_request+0x24>

08001eac <_nx_ip_address_get>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8001eae:	f200 653c 	addw	r5, r0, #1596	; 0x63c
{
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460f      	mov	r7, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8001eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eba:	4628      	mov	r0, r5
{
 8001ebc:	4616      	mov	r6, r2
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8001ebe:	f01a fe1b 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001ec2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001ec6:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 8001ec8:	f8d4 2c5c 	ldr.w	r2, [r4, #3164]	; 0xc5c
 8001ecc:	603a      	str	r2, [r7, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 8001ece:	f8d4 2c60 	ldr.w	r2, [r4, #3168]	; 0xc60
 8001ed2:	6032      	str	r2, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001ed4:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f01a fef7 	bl	801cccc <_tx_mutex_put>
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8001ede:	2000      	movs	r0, #0
 8001ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee2:	bf00      	nop

08001ee4 <_nx_ip_checksum_compute>:

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
#ifdef FEATURE_NX_IPV6
        (protocol == NX_PROTOCOL_ICMPV6) ||
 8001ee4:	293a      	cmp	r1, #58	; 0x3a
 8001ee6:	bf18      	it	ne
 8001ee8:	2911      	cmpne	r1, #17
{
 8001eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eec:	9d06      	ldr	r5, [sp, #24]
 8001eee:	461c      	mov	r4, r3
        (protocol == NX_PROTOCOL_ICMPV6) ||
 8001ef0:	d005      	beq.n	8001efe <_nx_ip_checksum_compute+0x1a>
 8001ef2:	f1a1 0306 	sub.w	r3, r1, #6
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	b1eb      	cbz	r3, 8001f3a <_nx_ip_checksum_compute+0x56>
    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8001efe:	2c00      	cmp	r4, #0
 8001f00:	d053      	beq.n	8001faa <_nx_ip_checksum_compute+0xc6>
 8001f02:	2d00      	cmp	r5, #0
 8001f04:	d051      	beq.n	8001faa <_nx_ip_checksum_compute+0xc6>


        checksum += src_ip_short[0];
        checksum += src_ip_short[1];
        checksum += dest_ip_short[0];
        checksum += dest_ip_short[1];
 8001f06:	886e      	ldrh	r6, [r5, #2]
        checksum += dest_ip_short[0];
 8001f08:	882b      	ldrh	r3, [r5, #0]
        checksum += src_ip_short[0];
 8001f0a:	8827      	ldrh	r7, [r4, #0]
        checksum += dest_ip_short[1];
 8001f0c:	4433      	add	r3, r6
        checksum += src_ip_short[1];
 8001f0e:	8866      	ldrh	r6, [r4, #2]
        checksum += dest_ip_short[1];
 8001f10:	4419      	add	r1, r3

#ifdef FEATURE_NX_IPV6

        /* Note that the IPv6 address is 128 bits/4 words
           compared with the 32 IPv4 address.*/
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8001f12:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
        checksum += dest_ip_short[1];
 8001f16:	4439      	add	r1, r7
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8001f18:	2b06      	cmp	r3, #6
        checksum += dest_ip_short[1];
 8001f1a:	4431      	add	r1, r6
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8001f1c:	d058      	beq.n	8001fd0 <_nx_ip_checksum_compute+0xec>
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8001f1e:	188b      	adds	r3, r1, r2
        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8001f20:	493b      	ldr	r1, [pc, #236]	; (8002010 <_nx_ip_checksum_compute+0x12c>)
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001f22:	b29c      	uxth	r4, r3
 8001f24:	eb04 4413 	add.w	r4, r4, r3, lsr #16
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001f28:	b2a3      	uxth	r3, r4
 8001f2a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8001f2e:	ea01 2103 	and.w	r1, r1, r3, lsl #8
 8001f32:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001f36:	430b      	orrs	r3, r1
        checksum = tmp;
 8001f38:	b29b      	uxth	r3, r3
    while (current_packet)
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8001f3a:	e9d0 1602 	ldrd	r1, r6, [r0, #8]
 8001f3e:	1a74      	subs	r4, r6, r1

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 8001f40:	4294      	cmp	r4, r2
 8001f42:	d22f      	bcs.n	8001fa4 <_nx_ip_checksum_compute+0xc0>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8001f44:	f026 0503 	bic.w	r5, r6, #3
        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8001f48:	428d      	cmp	r5, r1
 8001f4a:	d80e      	bhi.n	8001f6a <_nx_ip_checksum_compute+0x86>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8001f4c:	b9e2      	cbnz	r2, 8001f88 <_nx_ip_checksum_compute+0xa4>

        checksum += *short_ptr;
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001f4e:	b299      	uxth	r1, r3
    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8001f50:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <_nx_ip_checksum_compute+0x12c>)
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001f52:	eb01 4113 	add.w	r1, r1, r3, lsr #16
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001f56:	b28b      	uxth	r3, r1
 8001f58:	eb03 4311 	add.w	r3, r3, r1, lsr #16
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8001f5c:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8001f60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001f64:	4313      	orrs	r3, r2

    /* Return the computed checksum.  */
    return(tmp);
}
 8001f66:	b298      	uxth	r0, r3
 8001f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8001f6a:	1cec      	adds	r4, r5, #3
 8001f6c:	440a      	add	r2, r1
 8001f6e:	f024 0403 	bic.w	r4, r4, #3
 8001f72:	1b12      	subs	r2, r2, r4
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8001f74:	f851 4b04 	ldr.w	r4, [r1], #4
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8001f78:	0c27      	lsrs	r7, r4, #16
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8001f7a:	42a9      	cmp	r1, r5
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8001f7c:	fa17 f484 	uxtah	r4, r7, r4
 8001f80:	4423      	add	r3, r4
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8001f82:	d3f7      	bcc.n	8001f74 <_nx_ip_checksum_compute+0x90>
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8001f84:	2a00      	cmp	r2, #0
 8001f86:	d0e2      	beq.n	8001f4e <_nx_ip_checksum_compute+0x6a>
 8001f88:	6840      	ldr	r0, [r0, #4]
 8001f8a:	b1b8      	cbz	r0, 8001fbc <_nx_ip_checksum_compute+0xd8>
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8001f8c:	f006 0603 	and.w	r6, r6, #3
 8001f90:	2e02      	cmp	r6, #2
 8001f92:	d1d2      	bne.n	8001f3a <_nx_ip_checksum_compute+0x56>
                checksum += *short_ptr;
 8001f94:	8809      	ldrh	r1, [r1, #0]
                data_length -= 2;
 8001f96:	3a02      	subs	r2, #2
                checksum += *short_ptr;
 8001f98:	440b      	add	r3, r1
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8001f9a:	e9d0 1602 	ldrd	r1, r6, [r0, #8]
 8001f9e:	1a74      	subs	r4, r6, r1
        if (data_length > (UINT)packet_size)
 8001fa0:	4294      	cmp	r4, r2
 8001fa2:	d3cf      	bcc.n	8001f44 <_nx_ip_checksum_compute+0x60>
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8001fa4:	1ed5      	subs	r5, r2, #3
 8001fa6:	440d      	add	r5, r1
 8001fa8:	e7ce      	b.n	8001f48 <_nx_ip_checksum_compute+0x64>
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8001faa:	f04f 30ff 	mov.w	r0, #4294967295
 8001fae:	f01b f92b 	bl	801d208 <_tx_thread_sleep>
 8001fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb6:	f01b f927 	bl	801d208 <_tx_thread_sleep>
 8001fba:	e7f6      	b.n	8001faa <_nx_ip_checksum_compute+0xc6>
        if (data_length == 1)
 8001fbc:	2a01      	cmp	r2, #1
 8001fbe:	d022      	beq.n	8002006 <_nx_ip_checksum_compute+0x122>
 8001fc0:	880c      	ldrh	r4, [r1, #0]
        else if (data_length == 3)
 8001fc2:	2a03      	cmp	r2, #3
 8001fc4:	4423      	add	r3, r4
 8001fc6:	d1c2      	bne.n	8001f4e <_nx_ip_checksum_compute+0x6a>
            *((UCHAR *)short_ptr + 1) = 0;
 8001fc8:	70c8      	strb	r0, [r1, #3]
 8001fca:	884a      	ldrh	r2, [r1, #2]
 8001fcc:	4413      	add	r3, r2
 8001fce:	e7be      	b.n	8001f4e <_nx_ip_checksum_compute+0x6a>
                checksum += dest_ip_short[i];
 8001fd0:	88af      	ldrh	r7, [r5, #4]
                checksum += src_ip_short[i];
 8001fd2:	88a3      	ldrh	r3, [r4, #4]
                checksum += dest_ip_short[i];
 8001fd4:	88ee      	ldrh	r6, [r5, #6]
 8001fd6:	443b      	add	r3, r7
                checksum += src_ip_short[i];
 8001fd8:	f8b4 c006 	ldrh.w	ip, [r4, #6]
                checksum += dest_ip_short[i];
 8001fdc:	892f      	ldrh	r7, [r5, #8]
 8001fde:	440b      	add	r3, r1
 8001fe0:	8969      	ldrh	r1, [r5, #10]
 8001fe2:	4433      	add	r3, r6
                checksum += src_ip_short[i];
 8001fe4:	8926      	ldrh	r6, [r4, #8]
 8001fe6:	4463      	add	r3, ip
 8001fe8:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8001fec:	443b      	add	r3, r7
                checksum += dest_ip_short[i];
 8001fee:	89af      	ldrh	r7, [r5, #12]
 8001ff0:	89ed      	ldrh	r5, [r5, #14]
 8001ff2:	4433      	add	r3, r6
                checksum += src_ip_short[i];
 8001ff4:	89a6      	ldrh	r6, [r4, #12]
 8001ff6:	440b      	add	r3, r1
 8001ff8:	89e1      	ldrh	r1, [r4, #14]
 8001ffa:	4463      	add	r3, ip
 8001ffc:	443b      	add	r3, r7
 8001ffe:	4433      	add	r3, r6
 8002000:	442b      	add	r3, r5
 8002002:	4419      	add	r1, r3
 8002004:	e78b      	b.n	8001f1e <_nx_ip_checksum_compute+0x3a>
            *((UCHAR *)short_ptr + 1) = 0;
 8002006:	7048      	strb	r0, [r1, #1]
 8002008:	880a      	ldrh	r2, [r1, #0]
 800200a:	4413      	add	r3, r2
 800200c:	e79f      	b.n	8001f4e <_nx_ip_checksum_compute+0x6a>
 800200e:	bf00      	nop
 8002010:	00ffff00 	.word	0x00ffff00

08002014 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8002014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8002018:	4d5e      	ldr	r5, [pc, #376]	; (8002194 <_nx_ip_create+0x180>)
{
 800201a:	b089      	sub	sp, #36	; 0x24
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800201c:	4c5e      	ldr	r4, [pc, #376]	; (8002198 <_nx_ip_create+0x184>)
UINT       old_threshold = 0;
 800201e:	2600      	movs	r6, #0
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8002020:	682d      	ldr	r5, [r5, #0]
 8002022:	f8d4 c000 	ldr.w	ip, [r4]
 8002026:	4f5d      	ldr	r7, [pc, #372]	; (800219c <_nx_ip_create+0x188>)
 8002028:	ea45 050c 	orr.w	r5, r5, ip
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 800202c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80021c4 <_nx_ip_create+0x1b0>
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8002030:	683f      	ldr	r7, [r7, #0]
 8002032:	f8dc e000 	ldr.w	lr, [ip]
 8002036:	433d      	orrs	r5, r7
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8002038:	4f59      	ldr	r7, [pc, #356]	; (80021a0 <_nx_ip_create+0x18c>)
 800203a:	f8df c18c 	ldr.w	ip, [pc, #396]	; 80021c8 <_nx_ip_create+0x1b4>
 800203e:	683f      	ldr	r7, [r7, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8002040:	ea45 050e 	orr.w	r5, r5, lr
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8002044:	f89c c000 	ldrb.w	ip, [ip]
 8002048:	433d      	orrs	r5, r7
UINT       old_threshold = 0;
 800204a:	9607      	str	r6, [sp, #28]
{
 800204c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800204e:	ea55 050c 	orrs.w	r5, r5, ip
 8002052:	f000 8095 	beq.w	8002180 <_nx_ip_create+0x16c>
 8002056:	4604      	mov	r4, r0
 8002058:	461d      	mov	r5, r3
 800205a:	4691      	mov	r9, r2
 800205c:	4688      	mov	r8, r1
        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 800205e:	f44f 626f 	mov.w	r2, #3824	; 0xef0
 8002062:	4631      	mov	r1, r6
 8002064:	f01c fa99 	bl	801e59a <memset>

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8002068:	ea09 0305 	and.w	r3, r9, r5
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 800206c:	f8c4 5c60 	str.w	r5, [r4, #3168]	; 0xc60

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8002070:	f04f 4efe 	mov.w	lr, #2130706432	; 0x7f000000

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8002074:	9d12      	ldr	r5, [sp, #72]	; 0x48
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8002076:	f64f 7cff 	movw	ip, #65535	; 0xffff
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 800207a:	2101      	movs	r1, #1
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 800207c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 800207e:	f8c4 5638 	str.w	r5, [r4, #1592]	; 0x638
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8002082:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8002086:	4d47      	ldr	r5, [pc, #284]	; (80021a4 <_nx_ip_create+0x190>)
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8002088:	f8c4 3c64 	str.w	r3, [r4, #3172]	; 0xc64
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 800208c:	f640 73ff 	movw	r3, #4095	; 0xfff
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8002090:	f8c4 5cac 	str.w	r5, [r4, #3244]	; 0xcac
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8002094:	f8df b134 	ldr.w	fp, [pc, #308]	; 80021cc <_nx_ip_create+0x1b8>
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8002098:	4d43      	ldr	r5, [pc, #268]	; (80021a8 <_nx_ip_create+0x194>)
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 800209a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80021d0 <_nx_ip_create+0x1bc>
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 800209e:	f8c4 ecb4 	str.w	lr, [r4, #3252]	; 0xcb4
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 80020a2:	f8c4 ccbc 	str.w	ip, [r4, #3260]	; 0xcbc
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 80020a6:	f8c4 3cd8 	str.w	r3, [r4, #3288]	; 0xcd8
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 80020aa:	f8c4 2c84 	str.w	r2, [r4, #3204]	; 0xc84
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 80020ae:	4632      	mov	r2, r6
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 80020b0:	f884 1c4c 	strb.w	r1, [r4, #3148]	; 0xc4c
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 80020b4:	f8c4 1634 	str.w	r1, [r4, #1588]	; 0x634
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 80020b8:	4641      	mov	r1, r8
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 80020ba:	f8c4 0cb0 	str.w	r0, [r4, #3248]	; 0xcb0
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 80020be:	f204 603c 	addw	r0, r4, #1596	; 0x63c
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 80020c2:	f8c4 5c9c 	str.w	r5, [r4, #3228]	; 0xc9c
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 80020c6:	f8c4 9c5c 	str.w	r9, [r4, #3164]	; 0xc5c
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 80020ca:	f8c4 6c8c 	str.w	r6, [r4, #3212]	; 0xc8c
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 80020ce:	f884 6c4f 	strb.w	r6, [r4, #3151]	; 0xc4f
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 80020d2:	f8c4 6cd4 	str.w	r6, [r4, #3284]	; 0xcd4
    ip_ptr -> nx_ip_name =  name;
 80020d6:	f8c4 8004 	str.w	r8, [r4, #4]
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 80020da:	f8c4 bc48 	str.w	fp, [r4, #3144]	; 0xc48
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 80020de:	f8c4 ac98 	str.w	sl, [r4, #3224]	; 0xc98
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 80020e2:	f01a fcd9 	bl	801ca98 <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 80020e6:	4641      	mov	r1, r8
 80020e8:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 80020ec:	f01a fa82 	bl	801c5f4 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 80020f0:	f01a ff8c 	bl	801d00c <_tx_thread_identify>

    /* Disable preemption temporarily.  */
    if (current_thread)
 80020f4:	4605      	mov	r5, r0
 80020f6:	b118      	cbz	r0, 8002100 <_nx_ip_create+0xec>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 80020f8:	aa07      	add	r2, sp, #28
 80020fa:	4639      	mov	r1, r7
 80020fc:	f01a fffa 	bl	801d0f4 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8002100:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002102:	2601      	movs	r6, #1
 8002104:	4623      	mov	r3, r4
 8002106:	4641      	mov	r1, r8
 8002108:	9201      	str	r2, [sp, #4]
 800210a:	f504 60d3 	add.w	r0, r4, #1688	; 0x698
 800210e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002110:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	4a25      	ldr	r2, [pc, #148]	; (80021ac <_nx_ip_create+0x198>)
 8002118:	e9cd 6604 	strd	r6, r6, [sp, #16]
 800211c:	f01a fee0 	bl	801cee0 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8002120:	2264      	movs	r2, #100	; 0x64
 8002122:	4623      	mov	r3, r4
 8002124:	9602      	str	r6, [sp, #8]
 8002126:	9201      	str	r2, [sp, #4]
 8002128:	4641      	mov	r1, r8
 800212a:	9200      	str	r2, [sp, #0]
 800212c:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <_nx_ip_create+0x19c>)
 8002132:	f01b fa31 	bl	801d598 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8002136:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <_nx_ip_create+0x1a0>)
 8002138:	f8c4 3ce8 	str.w	r3, [r4, #3304]	; 0xce8
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800213c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002140:	b672      	cpsid	i
    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8002142:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <_nx_ip_create+0x1a4>)
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8002144:	481d      	ldr	r0, [pc, #116]	; (80021bc <_nx_ip_create+0x1a8>)
    if (_nx_ip_created_ptr)
 8002146:	6813      	ldr	r3, [r2, #0]
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8002148:	6020      	str	r0, [r4, #0]
    if (_nx_ip_created_ptr)
 800214a:	b1eb      	cbz	r3, 8002188 <_nx_ip_create+0x174>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 800214c:	f8d3 2c3c 	ldr.w	r2, [r3, #3132]	; 0xc3c

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8002150:	f8c3 4c3c 	str.w	r4, [r3, #3132]	; 0xc3c
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8002154:	f8c2 4c38 	str.w	r4, [r2, #3128]	; 0xc38

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8002158:	f8c4 2c3c 	str.w	r2, [r4, #3132]	; 0xc3c
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 800215c:	f8c4 3c38 	str.w	r3, [r4, #3128]	; 0xc38
        ip_ptr -> nx_ip_created_next =      ip_ptr;
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <_nx_ip_create+0x1ac>)
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002168:	f381 8810 	msr	PRIMASK, r1
    /* Restore preemption.  */
    if (current_thread)
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800216c:	4628      	mov	r0, r5
    if (current_thread)
 800216e:	b125      	cbz	r5, 800217a <_nx_ip_create+0x166>
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8002170:	aa07      	add	r2, sp, #28
 8002172:	9907      	ldr	r1, [sp, #28]
 8002174:	f01a ffbe 	bl	801d0f4 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8002178:	2000      	movs	r0, #0
}
 800217a:	b009      	add	sp, #36	; 0x24
 800217c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(NX_NOT_IMPLEMENTED);
 8002180:	204a      	movs	r0, #74	; 0x4a
}
 8002182:	b009      	add	sp, #36	; 0x24
 8002184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_ip_created_ptr =                ip_ptr;
 8002188:	6014      	str	r4, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 800218a:	f8c4 4c38 	str.w	r4, [r4, #3128]	; 0xc38
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 800218e:	f8c4 4c3c 	str.w	r4, [r4, #3132]	; 0xc3c
 8002192:	e7e5      	b.n	8002160 <_nx_ip_create+0x14c>
 8002194:	200078a0 	.word	0x200078a0
 8002198:	200078b0 	.word	0x200078b0
 800219c:	200078a8 	.word	0x200078a8
 80021a0:	200078ac 	.word	0x200078ac
 80021a4:	7f000001 	.word	0x7f000001
 80021a8:	01010001 	.word	0x01010001
 80021ac:	08002495 	.word	0x08002495
 80021b0:	080022ad 	.word	0x080022ad
 80021b4:	08006165 	.word	0x08006165
 80021b8:	20004b5c 	.word	0x20004b5c
 80021bc:	49502020 	.word	0x49502020
 80021c0:	20004b58 	.word	0x20004b58
 80021c4:	200078a4 	.word	0x200078a4
 80021c8:	2000002c 	.word	0x2000002c
 80021cc:	0801f944 	.word	0x0801f944
 80021d0:	0801f948 	.word	0x0801f948

080021d4 <_nx_ip_driver_deferred_processing>:
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 80021d4:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021de:	f01a baa3 	b.w	801c728 <_tx_event_flags_set>
 80021e2:	bf00      	nop

080021e4 <_nx_ip_initialize>:
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	4902      	ldr	r1, [pc, #8]	; (80021f0 <_nx_ip_initialize+0xc>)
    _nx_ip_created_count =   0;
 80021e8:	4a02      	ldr	r2, [pc, #8]	; (80021f4 <_nx_ip_initialize+0x10>)
    _nx_ip_created_ptr =     NX_NULL;
 80021ea:	600b      	str	r3, [r1, #0]
    _nx_ip_created_count =   0;
 80021ec:	6013      	str	r3, [r2, #0]
}
 80021ee:	4770      	bx	lr
 80021f0:	20004b5c 	.word	0x20004b5c
 80021f4:	20004b58 	.word	0x20004b58

080021f8 <_nx_ip_packet_deferred_receive>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80021f8:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80021fc:	b672      	cpsid	i

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 80021fe:	f8d0 2674 	ldr.w	r2, [r0, #1652]	; 0x674
 8002202:	b162      	cbz	r2, 800221e <_nx_ip_packet_deferred_receive+0x26>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8002204:	2200      	movs	r2, #0
{
 8002206:	b410      	push	{r4}
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8002208:	f8d0 4678 	ldr.w	r4, [r0, #1656]	; 0x678
 800220c:	61e1      	str	r1, [r4, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800220e:	61ca      	str	r2, [r1, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8002210:	f8c0 1678 	str.w	r1, [r0, #1656]	; 0x678
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002214:	f383 8810 	msr	PRIMASK, r3
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
    }
}
 8002218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800221c:	4770      	bx	lr
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 800221e:	f8c0 1674 	str.w	r1, [r0, #1652]	; 0x674
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8002222:	f8c0 1678 	str.w	r1, [r0, #1656]	; 0x678
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 8002226:	61ca      	str	r2, [r1, #28]
 8002228:	f383 8810 	msr	PRIMASK, r3
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 800222c:	2108      	movs	r1, #8
 800222e:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 8002232:	f01a ba79 	b.w	801c728 <_tx_event_flags_set>
 8002236:	bf00      	nop

08002238 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 8002238:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800223a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
{
 800223c:	b085      	sub	sp, #20
 800223e:	460c      	mov	r4, r1
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8002240:	b31d      	cbz	r5, 800228a <_nx_ip_packet_send+0x52>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, destination_ip, type_of_service, time_to_live, protocol, fragment);
 8002242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002244:	4606      	mov	r6, r0
 8002246:	4617      	mov	r7, r2
 8002248:	9502      	str	r5, [sp, #8]
 800224a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800224c:	9501      	str	r5, [sp, #4]
 800224e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002250:	9500      	str	r5, [sp, #0]
 8002252:	f00f f8b7 	bl	80113c4 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 8002256:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002258:	b975      	cbnz	r5, 8002278 <_nx_ip_packet_send+0x40>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 800225a:	f8d6 3630 	ldr.w	r3, [r6, #1584]	; 0x630
 800225e:	b1fb      	cbz	r3, 80022a0 <_nx_ip_packet_send+0x68>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8002260:	4622      	mov	r2, r4

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 8002262:	ab0d      	add	r3, sp, #52	; 0x34
 8002264:	4639      	mov	r1, r7
 8002266:	4630      	mov	r0, r6
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8002268:	f842 5f34 	str.w	r5, [r2, #52]!
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 800226c:	f000 f824 	bl	80022b8 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 8002270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002272:	b1ab      	cbz	r3, 80022a0 <_nx_ip_packet_send+0x68>
 8002274:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002276:	b19d      	cbz	r5, 80022a0 <_nx_ip_packet_send+0x68>
            return;
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 8002278:	463a      	mov	r2, r7
 800227a:	4621      	mov	r1, r4
 800227c:	4630      	mov	r0, r6
 800227e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002280:	9500      	str	r5, [sp, #0]
 8002282:	f00e fedd 	bl	8011040 <_nx_ip_driver_packet_send>
}
 8002286:	b005      	add	sp, #20
 8002288:	bdf0      	pop	{r4, r5, r6, r7, pc}
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 800228a:	688a      	ldr	r2, [r1, #8]
        _nx_packet_transmit_release(packet_ptr);
 800228c:	4608      	mov	r0, r1
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 800228e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8002290:	3a14      	subs	r2, #20
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8002292:	3314      	adds	r3, #20
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8002294:	608a      	str	r2, [r1, #8]
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8002296:	624b      	str	r3, [r1, #36]	; 0x24
        _nx_packet_transmit_release(packet_ptr);
 8002298:	f004 fc10 	bl	8006abc <_nx_packet_transmit_release>
}
 800229c:	b005      	add	sp, #20
 800229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _nx_packet_transmit_release(packet_ptr);
 80022a0:	4620      	mov	r0, r4
 80022a2:	f004 fc0b 	bl	8006abc <_nx_packet_transmit_release>
}
 80022a6:	b005      	add	sp, #20
 80022a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022aa:	bf00      	nop

080022ac <_nx_ip_periodic_timer_entry>:

    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 80022ac:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 80022b0:	2200      	movs	r2, #0
 80022b2:	2101      	movs	r1, #1
 80022b4:	f01a ba38 	b.w	801c728 <_tx_event_flags_set>

080022b8 <_nx_ip_route_find>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 80022b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Initialize the next hop address. */
    *next_hop_address = 0;

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 80022bc:	f001 4470 	and.w	r4, r1, #4026531840	; 0xf0000000
    *next_hop_address = 0;
 80022c0:	2500      	movs	r5, #0
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 80022c2:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    *next_hop_address = 0;
 80022c6:	601d      	str	r5, [r3, #0]
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 80022c8:	d031      	beq.n	800232e <_nx_ip_route_find+0x76>
 80022ca:	1c4c      	adds	r4, r1, #1
 80022cc:	d02f      	beq.n	800232e <_nx_ip_route_find+0x76>
 80022ce:	f890 5c4c 	ldrb.w	r5, [r0, #3148]	; 0xc4c
 80022d2:	f600 4748 	addw	r7, r0, #3144	; 0xc48
 80022d6:	b11d      	cbz	r5, 80022e0 <_nx_ip_route_find+0x28>

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 80022d8:	f890 4c4e 	ldrb.w	r4, [r0, #3150]	; 0xc4e
 80022dc:	2c00      	cmp	r4, #0
 80022de:	d163      	bne.n	80023a8 <_nx_ip_route_find+0xf0>

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 80022e0:	f890 cc9c 	ldrb.w	ip, [r0, #3228]	; 0xc9c
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80022e4:	f600 4e98 	addw	lr, r0, #3224	; 0xc98
        if ((interface_ptr -> nx_interface_valid) &&
 80022e8:	f1bc 0f00 	cmp.w	ip, #0
 80022ec:	d003      	beq.n	80022f6 <_nx_ip_route_find+0x3e>
 80022ee:	f890 4c9e 	ldrb.w	r4, [r0, #3230]	; 0xc9e
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	d169      	bne.n	80023ca <_nx_ip_route_find+0x112>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 80022f6:	4c5f      	ldr	r4, [pc, #380]	; (8002474 <_nx_ip_route_find+0x1bc>)
 80022f8:	4e5f      	ldr	r6, [pc, #380]	; (8002478 <_nx_ip_route_find+0x1c0>)
 80022fa:	400c      	ands	r4, r1
 80022fc:	42b4      	cmp	r4, r6
 80022fe:	d077      	beq.n	80023f0 <_nx_ip_route_find+0x138>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8002300:	6886      	ldr	r6, [r0, #8]
 8002302:	b1f6      	cbz	r6, 8002342 <_nx_ip_route_find+0x8a>
        (ip_ptr -> nx_ip_gateway_interface) &&
 8002304:	68c4      	ldr	r4, [r0, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8002306:	b1e4      	cbz	r4, 8002342 <_nx_ip_route_find+0x8a>
        (ip_ptr -> nx_ip_gateway_interface) &&
 8002308:	f894 8006 	ldrb.w	r8, [r4, #6]
 800230c:	f1b8 0f00 	cmp.w	r8, #0
 8002310:	d017      	beq.n	8002342 <_nx_ip_route_find+0x8a>

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 8002312:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
            (ip_ptr -> nx_ip_gateway_address &
 8002316:	4031      	ands	r1, r6
        if (interface_ptr -> nx_interface_ip_network !=
 8002318:	4288      	cmp	r0, r1
 800231a:	d142      	bne.n	80023a2 <_nx_ip_route_find+0xea>
        {
            return(NX_IP_ADDRESS_ERROR);
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 800231c:	6811      	ldr	r1, [r2, #0]
 800231e:	2900      	cmp	r1, #0
 8002320:	f000 80a0 	beq.w	8002464 <_nx_ip_route_find+0x1ac>
        {
            *ip_interface_ptr = interface_ptr;
        }
        else if (*ip_interface_ptr != interface_ptr)
 8002324:	428c      	cmp	r4, r1
 8002326:	d13c      	bne.n	80023a2 <_nx_ip_route_find+0xea>
        {
            return(NX_IP_ADDRESS_ERROR);
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 8002328:	601e      	str	r6, [r3, #0]

        return(NX_SUCCESS);
 800232a:	2000      	movs	r0, #0
 800232c:	e007      	b.n	800233e <_nx_ip_route_find+0x86>
        if (*ip_interface_ptr == NX_NULL)
 800232e:	6814      	ldr	r4, [r2, #0]
        *next_hop_address = destination_address;
 8002330:	6019      	str	r1, [r3, #0]
        if (*ip_interface_ptr == NX_NULL)
 8002332:	2c00      	cmp	r4, #0
 8002334:	d053      	beq.n	80023de <_nx_ip_route_find+0x126>
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 8002336:	79a3      	ldrb	r3, [r4, #6]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d032      	beq.n	80023a2 <_nx_ip_route_find+0xea>
            return(NX_SUCCESS);
 800233c:	2000      	movs	r0, #0
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
}
 800233e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*ip_interface_ptr)
 8002342:	6814      	ldr	r4, [r2, #0]
 8002344:	b1f4      	cbz	r4, 8002384 <_nx_ip_route_find+0xcc>
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8002346:	7922      	ldrb	r2, [r4, #4]
 8002348:	b35a      	cbz	r2, 80023a2 <_nx_ip_route_find+0xea>
 800234a:	79a2      	ldrb	r2, [r4, #6]
 800234c:	b34a      	cbz	r2, 80023a2 <_nx_ip_route_find+0xea>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800234e:	6964      	ldr	r4, [r4, #20]
 8002350:	4a48      	ldr	r2, [pc, #288]	; (8002474 <_nx_ip_route_find+0x1bc>)
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8002352:	4849      	ldr	r0, [pc, #292]	; (8002478 <_nx_ip_route_find+0x1c0>)
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8002354:	4022      	ands	r2, r4
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8002356:	4282      	cmp	r2, r0
 8002358:	d123      	bne.n	80023a2 <_nx_ip_route_find+0xea>
            *next_hop_address = destination_address;
 800235a:	6019      	str	r1, [r3, #0]
            return(NX_SUCCESS);
 800235c:	2000      	movs	r0, #0
}
 800235e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8002362:	b11d      	cbz	r5, 800236c <_nx_ip_route_find+0xb4>
 8002364:	f890 4c4e 	ldrb.w	r4, [r0, #3150]	; 0xc4e
 8002368:	2c00      	cmp	r4, #0
 800236a:	d16c      	bne.n	8002446 <_nx_ip_route_find+0x18e>
 800236c:	f1bc 0f00 	cmp.w	ip, #0
 8002370:	d003      	beq.n	800237a <_nx_ip_route_find+0xc2>
 8002372:	f890 4c9e 	ldrb.w	r4, [r0, #3230]	; 0xc9e
 8002376:	2c00      	cmp	r4, #0
 8002378:	d178      	bne.n	800246c <_nx_ip_route_find+0x1b4>
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800237a:	6886      	ldr	r6, [r0, #8]
 800237c:	b116      	cbz	r6, 8002384 <_nx_ip_route_find+0xcc>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800237e:	68c4      	ldr	r4, [r0, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8002380:	2c00      	cmp	r4, #0
 8002382:	d1c1      	bne.n	8002308 <_nx_ip_route_find+0x50>
            if ((interface_ptr -> nx_interface_valid) &&
 8002384:	2d00      	cmp	r5, #0
 8002386:	d14d      	bne.n	8002424 <_nx_ip_route_find+0x16c>
 8002388:	f1bc 0f00 	cmp.w	ip, #0
 800238c:	d009      	beq.n	80023a2 <_nx_ip_route_find+0xea>
 800238e:	f890 4c9e 	ldrb.w	r4, [r0, #3230]	; 0xc9e
 8002392:	b134      	cbz	r4, 80023a2 <_nx_ip_route_find+0xea>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8002394:	f8d0 5cac 	ldr.w	r5, [r0, #3244]	; 0xcac
 8002398:	4836      	ldr	r0, [pc, #216]	; (8002474 <_nx_ip_route_find+0x1bc>)
                (interface_ptr -> nx_interface_link_up) &&
 800239a:	4c37      	ldr	r4, [pc, #220]	; (8002478 <_nx_ip_route_find+0x1c0>)
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800239c:	4028      	ands	r0, r5
                (interface_ptr -> nx_interface_link_up) &&
 800239e:	42a0      	cmp	r0, r4
 80023a0:	d04c      	beq.n	800243c <_nx_ip_route_find+0x184>
        return(NX_IP_ADDRESS_ERROR);
 80023a2:	2021      	movs	r0, #33	; 0x21
}
 80023a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 80023a8:	f8d0 4c5c 	ldr.w	r4, [r0, #3164]	; 0xc5c
            (interface_ptr -> nx_interface_link_up) &&
 80023ac:	428c      	cmp	r4, r1
 80023ae:	d051      	beq.n	8002454 <_nx_ip_route_find+0x19c>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80023b0:	f8d0 4c60 	ldr.w	r4, [r0, #3168]	; 0xc60
            (interface_ptr -> nx_interface_link_up) &&
 80023b4:	f8d0 6c64 	ldr.w	r6, [r0, #3172]	; 0xc64
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80023b8:	400c      	ands	r4, r1
            (interface_ptr -> nx_interface_link_up) &&
 80023ba:	42b4      	cmp	r4, r6
 80023bc:	d190      	bne.n	80022e0 <_nx_ip_route_find+0x28>
            if (*ip_interface_ptr == NX_NULL)
 80023be:	6814      	ldr	r4, [r2, #0]
 80023c0:	2c00      	cmp	r4, #0
 80023c2:	d051      	beq.n	8002468 <_nx_ip_route_find+0x1b0>
            else if (*ip_interface_ptr != interface_ptr)
 80023c4:	42a7      	cmp	r7, r4
 80023c6:	d18b      	bne.n	80022e0 <_nx_ip_route_find+0x28>
 80023c8:	e7c7      	b.n	800235a <_nx_ip_route_find+0xa2>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80023ca:	f8d0 4cb0 	ldr.w	r4, [r0, #3248]	; 0xcb0
            (interface_ptr -> nx_interface_link_up) &&
 80023ce:	f8d0 6cb4 	ldr.w	r6, [r0, #3252]	; 0xcb4
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80023d2:	400c      	ands	r4, r1
            (interface_ptr -> nx_interface_link_up) &&
 80023d4:	42b4      	cmp	r4, r6
 80023d6:	d18e      	bne.n	80022f6 <_nx_ip_route_find+0x3e>
                *ip_interface_ptr = interface_ptr;
 80023d8:	f8c2 e000 	str.w	lr, [r2]
 80023dc:	e7bd      	b.n	800235a <_nx_ip_route_find+0xa2>
                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 80023de:	f890 3c4e 	ldrb.w	r3, [r0, #3150]	; 0xc4e
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0dd      	beq.n	80023a2 <_nx_ip_route_find+0xea>
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80023e6:	f600 4348 	addw	r3, r0, #3144	; 0xc48
                    return(NX_SUCCESS);
 80023ea:	4620      	mov	r0, r4
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80023ec:	6013      	str	r3, [r2, #0]
                    return(NX_SUCCESS);
 80023ee:	e7a6      	b.n	800233e <_nx_ip_route_find+0x86>
        if (*ip_interface_ptr)
 80023f0:	f8d2 8000 	ldr.w	r8, [r2]
 80023f4:	4644      	mov	r4, r8
 80023f6:	f1b8 0f00 	cmp.w	r8, #0
 80023fa:	d0b2      	beq.n	8002362 <_nx_ip_route_find+0xaa>
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80023fc:	f898 6004 	ldrb.w	r6, [r8, #4]
 8002400:	b946      	cbnz	r6, 8002414 <_nx_ip_route_find+0x15c>
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8002402:	6886      	ldr	r6, [r0, #8]
 8002404:	2e00      	cmp	r6, #0
 8002406:	d0cc      	beq.n	80023a2 <_nx_ip_route_find+0xea>
        (ip_ptr -> nx_ip_gateway_interface) &&
 8002408:	68c4      	ldr	r4, [r0, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800240a:	2c00      	cmp	r4, #0
 800240c:	f47f af7c 	bne.w	8002308 <_nx_ip_route_find+0x50>
    if (*ip_interface_ptr)
 8002410:	4644      	mov	r4, r8
 8002412:	e798      	b.n	8002346 <_nx_ip_route_find+0x8e>
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8002414:	f898 6006 	ldrb.w	r6, [r8, #6]
 8002418:	2e00      	cmp	r6, #0
 800241a:	d19e      	bne.n	800235a <_nx_ip_route_find+0xa2>
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800241c:	6886      	ldr	r6, [r0, #8]
 800241e:	2e00      	cmp	r6, #0
 8002420:	d1f2      	bne.n	8002408 <_nx_ip_route_find+0x150>
 8002422:	e792      	b.n	800234a <_nx_ip_route_find+0x92>
            if ((interface_ptr -> nx_interface_valid) &&
 8002424:	f890 4c4e 	ldrb.w	r4, [r0, #3150]	; 0xc4e
 8002428:	2c00      	cmp	r4, #0
 800242a:	d0ad      	beq.n	8002388 <_nx_ip_route_find+0xd0>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800242c:	f8d0 4c5c 	ldr.w	r4, [r0, #3164]	; 0xc5c
 8002430:	4d10      	ldr	r5, [pc, #64]	; (8002474 <_nx_ip_route_find+0x1bc>)
                (interface_ptr -> nx_interface_link_up) &&
 8002432:	4e11      	ldr	r6, [pc, #68]	; (8002478 <_nx_ip_route_find+0x1c0>)
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8002434:	4025      	ands	r5, r4
                (interface_ptr -> nx_interface_link_up) &&
 8002436:	42b5      	cmp	r5, r6
 8002438:	d1a6      	bne.n	8002388 <_nx_ip_route_find+0xd0>
 800243a:	46be      	mov	lr, r7
                *ip_interface_ptr = interface_ptr;
 800243c:	f8c2 e000 	str.w	lr, [r2]
                return(NX_SUCCESS);
 8002440:	2000      	movs	r0, #0
                *next_hop_address = destination_address;
 8002442:	6019      	str	r1, [r3, #0]
                return(NX_SUCCESS);
 8002444:	e77b      	b.n	800233e <_nx_ip_route_find+0x86>
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8002446:	f640 4448 	movw	r4, #3144	; 0xc48
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800244a:	4404      	add	r4, r0
                    return(NX_SUCCESS);
 800244c:	2000      	movs	r0, #0
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800244e:	6014      	str	r4, [r2, #0]
                    *next_hop_address = destination_address;
 8002450:	6019      	str	r1, [r3, #0]
                    return(NX_SUCCESS);
 8002452:	e774      	b.n	800233e <_nx_ip_route_find+0x86>
            ((*ip_interface_ptr == NX_NULL) ||
 8002454:	6816      	ldr	r6, [r2, #0]
 8002456:	b10e      	cbz	r6, 800245c <_nx_ip_route_find+0x1a4>
 8002458:	42b7      	cmp	r7, r6
 800245a:	d1a9      	bne.n	80023b0 <_nx_ip_route_find+0xf8>
            *ip_interface_ptr = interface_ptr;
 800245c:	6017      	str	r7, [r2, #0]
            return(NX_SUCCESS);
 800245e:	2000      	movs	r0, #0
            *next_hop_address = destination_address;
 8002460:	601c      	str	r4, [r3, #0]
            return(NX_SUCCESS);
 8002462:	e76c      	b.n	800233e <_nx_ip_route_find+0x86>
            *ip_interface_ptr = interface_ptr;
 8002464:	6014      	str	r4, [r2, #0]
 8002466:	e75f      	b.n	8002328 <_nx_ip_route_find+0x70>
            if (*ip_interface_ptr == NX_NULL)
 8002468:	46be      	mov	lr, r7
 800246a:	e7b5      	b.n	80023d8 <_nx_ip_route_find+0x120>
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800246c:	f640 4498 	movw	r4, #3224	; 0xc98
 8002470:	e7eb      	b.n	800244a <_nx_ip_route_find+0x192>
 8002472:	bf00      	nop
 8002474:	ffff0000 	.word	0xffff0000
 8002478:	a9fe0000 	.word	0xa9fe0000

0800247c <_nx_ip_status_check>:
UINT _nx_ip_status_check(NX_IP* ip_ptr, ULONG needed_status, ULONG* actual_status,
		ULONG wait_option)
{
	return (_nx_ip_interface_status_check(ip_ptr, 0, needed_status, actual_status, wait_option));
}

 800247c:	b500      	push	{lr}
 800247e:	b083      	sub	sp, #12
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	460a      	mov	r2, r1
 8002486:	2100      	movs	r1, #0
 8002488:	f00f f88e 	bl	80115a8 <_nx_ip_interface_status_check>
 800248c:	b003      	add	sp, #12
 800248e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002492:	bf00      	nop

08002494 <_nx_ip_thread_entry>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 8002494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8002498:	f200 673c 	addw	r7, r0, #1596	; 0x63c
{
 800249c:	4604      	mov	r4, r0
 800249e:	b093      	sub	sp, #76	; 0x4c
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	4638      	mov	r0, r7

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 80024a6:	f04f 0801 	mov.w	r8, #1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80024aa:	f01a fb25 	bl	801caf8 <_tx_mutex_get>
    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 80024ae:	f894 3c4c 	ldrb.w	r3, [r4, #3148]	; 0xc4c
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 80024b2:	f8c4 8670 	str.w	r8, [r4, #1648]	; 0x670
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 80024b6:	b123      	cbz	r3, 80024c2 <_nx_ip_thread_entry+0x2e>
 80024b8:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 8112 	bne.w	80026e6 <_nx_ip_thread_entry+0x252>
 80024c2:	f604 4648 	addw	r6, r4, #3144	; 0xc48
 80024c6:	ad0a      	add	r5, sp, #40	; 0x28
 80024c8:	f10d 0818 	add.w	r8, sp, #24
 80024cc:	f504 73e8 	add.w	r3, r4, #464	; 0x1d0
 80024d0:	f504 6bec 	add.w	fp, r4, #1888	; 0x760
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 80024d4:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8002774 <_nx_ip_thread_entry+0x2e0>
 80024d8:	9303      	str	r3, [sp, #12]
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80024da:	4638      	mov	r0, r7
 80024dc:	f01a fbf6 	bl	801cccc <_tx_mutex_put>
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	2201      	movs	r2, #1
 80024e6:	f04f 31ff 	mov.w	r1, #4294967295
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4658      	mov	r0, fp
 80024ee:	ab05      	add	r3, sp, #20
 80024f0:	f01a f8a8 	bl	801c644 <_tx_event_flags_get>
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	4638      	mov	r0, r7
 80024fa:	f01a fafd 	bl	801caf8 <_tx_mutex_get>
        if (ip_events & NX_IP_RECEIVE_EVENT)
 80024fe:	9b05      	ldr	r3, [sp, #20]
 8002500:	0718      	lsls	r0, r3, #28
 8002502:	f100 80a4 	bmi.w	800264e <_nx_ip_thread_entry+0x1ba>
        if (ip_events & NX_IP_TCP_EVENT)
 8002506:	0619      	lsls	r1, r3, #24
 8002508:	d509      	bpl.n	800251e <_nx_ip_thread_entry+0x8a>
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800250a:	f8d4 39c8 	ldr.w	r3, [r4, #2504]	; 0x9c8
 800250e:	4620      	mov	r0, r4
 8002510:	4798      	blx	r3
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 8002512:	9b05      	ldr	r3, [sp, #20]
 8002514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002518:	9305      	str	r3, [sp, #20]
            if (!ip_events)
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0dd      	beq.n	80024da <_nx_ip_thread_entry+0x46>
        if (ip_events & NX_IP_FAST_EVENT)
 800251e:	05da      	lsls	r2, r3, #23
 8002520:	d52a      	bpl.n	8002578 <_nx_ip_thread_entry+0xe4>
            if (ip_ptr -> nx_ip_icmpv6_packet_process)
 8002522:	f8d4 388c 	ldr.w	r3, [r4, #2188]	; 0x88c
 8002526:	b1bb      	cbz	r3, 8002558 <_nx_ip_thread_entry+0xc4>
                    interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8002528:	f8d4 ac68 	ldr.w	sl, [r4, #3176]	; 0xc68
                    if (interface_ipv6_address &&
 800252c:	f1ba 0f00 	cmp.w	sl, #0
 8002530:	d012      	beq.n	8002558 <_nx_ip_thread_entry+0xc4>
 8002532:	f89a 301c 	ldrb.w	r3, [sl, #28]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d10e      	bne.n	8002558 <_nx_ip_thread_entry+0xc4>
                        _nx_icmpv6_send_ns(ip_ptr,
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f10a 0108 	add.w	r1, sl, #8
 8002542:	4620      	mov	r0, r4
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	4653      	mov	r3, sl
 8002548:	9200      	str	r2, [sp, #0]
 800254a:	f00e f907 	bl	801075c <_nx_icmpv6_send_ns>
                        interface_ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit--;
 800254e:	f89a 301c 	ldrb.w	r3, [sl, #28]
 8002552:	3b01      	subs	r3, #1
 8002554:	f88a 301c 	strb.w	r3, [sl, #28]
            if (ip_ptr -> nx_nd_cache_fast_periodic_update)
 8002558:	f8d4 3890 	ldr.w	r3, [r4, #2192]	; 0x890
 800255c:	b10b      	cbz	r3, 8002562 <_nx_ip_thread_entry+0xce>
                ip_ptr -> nx_nd_cache_fast_periodic_update(ip_ptr);
 800255e:	4620      	mov	r0, r4
 8002560:	4798      	blx	r3
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 8002562:	f8d4 39c4 	ldr.w	r3, [r4, #2500]	; 0x9c4
 8002566:	b10b      	cbz	r3, 800256c <_nx_ip_thread_entry+0xd8>
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 8002568:	4620      	mov	r0, r4
 800256a:	4798      	blx	r3
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 800256c:	9b05      	ldr	r3, [sp, #20]
 800256e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002572:	9305      	str	r3, [sp, #20]
            if (!ip_events)
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0b0      	beq.n	80024da <_nx_ip_thread_entry+0x46>
        if (ip_events & NX_IP_PERIODIC_EVENT)
 8002578:	07d8      	lsls	r0, r3, #31
 800257a:	d530      	bpl.n	80025de <_nx_ip_thread_entry+0x14a>
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800257c:	f8d4 3c10 	ldr.w	r3, [r4, #3088]	; 0xc10
 8002580:	b10b      	cbz	r3, 8002586 <_nx_ip_thread_entry+0xf2>
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 8002582:	4620      	mov	r0, r4
 8002584:	4798      	blx	r3
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 8002586:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
 800258a:	b10b      	cbz	r3, 8002590 <_nx_ip_thread_entry+0xfc>
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800258c:	4620      	mov	r0, r4
 800258e:	4798      	blx	r3
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 8002590:	f8d4 3870 	ldr.w	r3, [r4, #2160]	; 0x870
 8002594:	b10b      	cbz	r3, 800259a <_nx_ip_thread_entry+0x106>
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 8002596:	4620      	mov	r0, r4
 8002598:	4798      	blx	r3
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800259a:	f8d4 37bc 	ldr.w	r3, [r4, #1980]	; 0x7bc
 800259e:	b10b      	cbz	r3, 80025a4 <_nx_ip_thread_entry+0x110>
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 80025a0:	4620      	mov	r0, r4
 80025a2:	4798      	blx	r3
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 80025a4:	f8d4 39c0 	ldr.w	r3, [r4, #2496]	; 0x9c0
 80025a8:	b10b      	cbz	r3, 80025ae <_nx_ip_thread_entry+0x11a>
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 80025aa:	4620      	mov	r0, r4
 80025ac:	4798      	blx	r3
            if (ip_ptr -> nx_ip_icmpv6_packet_process)
 80025ae:	f8d4 388c 	ldr.w	r3, [r4, #2188]	; 0x88c
 80025b2:	b113      	cbz	r3, 80025ba <_nx_ip_thread_entry+0x126>
                _nx_icmpv6_perform_DAD(ip_ptr);
 80025b4:	4620      	mov	r0, r4
 80025b6:	f00d f939 	bl	800f82c <_nx_icmpv6_perform_DAD>
            if (ip_ptr -> nx_nd_cache_slow_periodic_update)
 80025ba:	f8d4 3894 	ldr.w	r3, [r4, #2196]	; 0x894
 80025be:	b10b      	cbz	r3, 80025c4 <_nx_ip_thread_entry+0x130>
                ip_ptr -> nx_nd_cache_slow_periodic_update(ip_ptr);
 80025c0:	4620      	mov	r0, r4
 80025c2:	4798      	blx	r3
            _nxd_ipv6_prefix_router_timer_tick(ip_ptr);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f00c fb13 	bl	800ebf0 <_nxd_ipv6_prefix_router_timer_tick>
            _nxd_ipv6_router_solicitation_check(ip_ptr);
 80025ca:	4620      	mov	r0, r4
 80025cc:	f00c fb5e 	bl	800ec8c <_nxd_ipv6_router_solicitation_check>
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 80025d0:	9b05      	ldr	r3, [sp, #20]
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	9305      	str	r3, [sp, #20]
            if (!ip_events)
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f43f af7e 	beq.w	80024da <_nx_ip_thread_entry+0x46>
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 80025de:	06d9      	lsls	r1, r3, #27
 80025e0:	d505      	bpl.n	80025ee <_nx_ip_thread_entry+0x15a>
 80025e2:	f8d4 2c14 	ldr.w	r2, [r4, #3092]	; 0xc14
 80025e6:	b112      	cbz	r2, 80025ee <_nx_ip_thread_entry+0x15a>
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 80025e8:	4620      	mov	r0, r4
 80025ea:	4790      	blx	r2
 80025ec:	9b05      	ldr	r3, [sp, #20]
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 80025ee:	069a      	lsls	r2, r3, #26
 80025f0:	d505      	bpl.n	80025fe <_nx_ip_thread_entry+0x16a>
 80025f2:	f8d4 2c2c 	ldr.w	r2, [r4, #3116]	; 0xc2c
 80025f6:	b112      	cbz	r2, 80025fe <_nx_ip_thread_entry+0x16a>
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 80025f8:	4620      	mov	r0, r4
 80025fa:	4790      	blx	r2
 80025fc:	9b05      	ldr	r3, [sp, #20]
        if (ip_events & NX_IP_IGMP_EVENT)
 80025fe:	0658      	lsls	r0, r3, #25
 8002600:	d504      	bpl.n	800260c <_nx_ip_thread_entry+0x178>
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 8002602:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 8002606:	4620      	mov	r0, r4
 8002608:	4798      	blx	r3
 800260a:	9b05      	ldr	r3, [sp, #20]
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 800260c:	0559      	lsls	r1, r3, #21
 800260e:	d457      	bmi.n	80026c0 <_nx_ip_thread_entry+0x22c>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 8002610:	079a      	lsls	r2, r3, #30
 8002612:	d505      	bpl.n	8002620 <_nx_ip_thread_entry+0x18c>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 8002614:	f8d4 27b8 	ldr.w	r2, [r4, #1976]	; 0x7b8
 8002618:	b112      	cbz	r2, 8002620 <_nx_ip_thread_entry+0x18c>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 800261a:	4620      	mov	r0, r4
 800261c:	4790      	blx	r2
 800261e:	9b05      	ldr	r3, [sp, #20]
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 8002620:	0758      	lsls	r0, r3, #29
 8002622:	d504      	bpl.n	800262e <_nx_ip_thread_entry+0x19a>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 8002624:	f8d4 3884 	ldr.w	r3, [r4, #2180]	; 0x884
 8002628:	4620      	mov	r0, r4
 800262a:	4798      	blx	r3
 800262c:	9b05      	ldr	r3, [sp, #20]
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800262e:	0519      	lsls	r1, r3, #20
 8002630:	d436      	bmi.n	80026a0 <_nx_ip_thread_entry+0x20c>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 8002632:	04da      	lsls	r2, r3, #19
 8002634:	d504      	bpl.n	8002640 <_nx_ip_thread_entry+0x1ac>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 8002636:	f8d4 3c44 	ldr.w	r3, [r4, #3140]	; 0xc44
 800263a:	4620      	mov	r0, r4
 800263c:	4798      	blx	r3
 800263e:	9b05      	ldr	r3, [sp, #20]
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 8002640:	045b      	lsls	r3, r3, #17
 8002642:	f57f af4a 	bpl.w	80024da <_nx_ip_thread_entry+0x46>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 8002646:	4620      	mov	r0, r4
 8002648:	f00e fbb2 	bl	8010db0 <_nx_ip_deferred_link_status_process>
 800264c:	e745      	b.n	80024da <_nx_ip_thread_entry+0x46>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800264e:	f8d4 2674 	ldr.w	r2, [r4, #1652]	; 0x674
 8002652:	b942      	cbnz	r2, 8002666 <_nx_ip_thread_entry+0x1d2>
 8002654:	e01d      	b.n	8002692 <_nx_ip_thread_entry+0x1fe>
 8002656:	f382 8810 	msr	PRIMASK, r2
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 800265a:	4620      	mov	r0, r4
 800265c:	f00f f9ea 	bl	8011a34 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8002660:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 8002664:	b1a3      	cbz	r3, 8002690 <_nx_ip_thread_entry+0x1fc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002666:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800266a:	b672      	cpsid	i
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 800266c:	f8d4 1674 	ldr.w	r1, [r4, #1652]	; 0x674
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8002670:	69cb      	ldr	r3, [r1, #28]
 8002672:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ed      	bne.n	8002656 <_nx_ip_thread_entry+0x1c2>
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800267a:	f8c4 3678 	str.w	r3, [r4, #1656]	; 0x678
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800267e:	f382 8810 	msr	PRIMASK, r2
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 8002682:	4620      	mov	r0, r4
 8002684:	f00f f9d6 	bl	8011a34 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8002688:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ea      	bne.n	8002666 <_nx_ip_thread_entry+0x1d2>
 8002690:	9b05      	ldr	r3, [sp, #20]
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 8002692:	f023 0308 	bic.w	r3, r3, #8
 8002696:	9305      	str	r3, [sp, #20]
            if (!ip_events)
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f af34 	bne.w	8002506 <_nx_ip_thread_entry+0x72>
 800269e:	e71c      	b.n	80024da <_nx_ip_thread_entry+0x46>
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 80026a0:	f894 2c4c 	ldrb.w	r2, [r4, #3148]	; 0xc4c
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d0c4      	beq.n	8002632 <_nx_ip_thread_entry+0x19e>
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 80026a8:	2312      	movs	r3, #18
                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 80026aa:	4628      	mov	r0, r5
                    driver_request.nx_ip_driver_return_ptr = &foo;
 80026ac:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 80026b0:	930a      	str	r3, [sp, #40]	; 0x28
                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 80026b2:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 80026b6:	e9cd 4610 	strd	r4, r6, [sp, #64]	; 0x40
                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 80026ba:	4798      	blx	r3
 80026bc:	9b05      	ldr	r3, [sp, #20]
 80026be:	e7b8      	b.n	8002632 <_nx_ip_thread_entry+0x19e>
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 80026c0:	f894 2c4c 	ldrb.w	r2, [r4, #3148]	; 0xc4c
 80026c4:	2a00      	cmp	r2, #0
 80026c6:	d0a3      	beq.n	8002610 <_nx_ip_thread_entry+0x17c>
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 80026c8:	2208      	movs	r2, #8
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 80026ca:	f44f 7380 	mov.w	r3, #256	; 0x100
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 80026ce:	9410      	str	r4, [sp, #64]	; 0x40
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80026d0:	4628      	mov	r0, r5
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 80026d2:	930c      	str	r3, [sp, #48]	; 0x30
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 80026d4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80026d8:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 80026dc:	9611      	str	r6, [sp, #68]	; 0x44
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 80026de:	920a      	str	r2, [sp, #40]	; 0x28
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80026e0:	4798      	blx	r3
 80026e2:	9b05      	ldr	r3, [sp, #20]
 80026e4:	e794      	b.n	8002610 <_nx_ip_thread_entry+0x17c>
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 80026e6:	2100      	movs	r1, #0
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 80026e8:	2213      	movs	r2, #19
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80026ea:	ad0a      	add	r5, sp, #40	; 0x28
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 80026ec:	f604 4648 	addw	r6, r4, #3144	; 0xc48
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 80026f0:	f8c4 1c88 	str.w	r1, [r4, #3208]	; 0xc88
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 80026f4:	920a      	str	r2, [sp, #40]	; 0x28
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80026f6:	4628      	mov	r0, r5
            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 80026f8:	f884 8c4e 	strb.w	r8, [r4, #3150]	; 0xc4e
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 80026fc:	9410      	str	r4, [sp, #64]	; 0x40
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 80026fe:	9611      	str	r6, [sp, #68]	; 0x44
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8002700:	4798      	blx	r3
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 8002702:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8002706:	4628      	mov	r0, r5
 8002708:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800270c:	9410      	str	r4, [sp, #64]	; 0x40
 800270e:	f10d 0818 	add.w	r8, sp, #24
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8002712:	4798      	blx	r3
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 8002714:	2302      	movs	r3, #2
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 8002716:	9410      	str	r4, [sp, #64]	; 0x40
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8002718:	4628      	mov	r0, r5
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 800271a:	930a      	str	r3, [sp, #40]	; 0x28
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800271c:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
 8002720:	4798      	blx	r3
            interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8002722:	f8d4 9c68 	ldr.w	r9, [r4, #3176]	; 0xc68
            while (interface_ipv6_address)
 8002726:	f1b9 0f00 	cmp.w	r9, #0
 800272a:	d00e      	beq.n	800274a <_nx_ip_thread_entry+0x2b6>
                SET_SOLICITED_NODE_MULTICAST_ADDRESS(multicast_address, interface_ipv6_address -> nxd_ipv6_address);
 800272c:	f109 0108 	add.w	r1, r9, #8
 8002730:	4640      	mov	r0, r8
 8002732:	f003 fed5 	bl	80064e0 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
                _nx_ipv6_multicast_join(ip_ptr, multicast_address, &ip_ptr -> nx_ip_interface[i]);
 8002736:	4632      	mov	r2, r6
 8002738:	4641      	mov	r1, r8
 800273a:	4620      	mov	r0, r4
 800273c:	f003 fe60 	bl	8006400 <_nx_ipv6_multicast_join>
                interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 8002740:	f8d9 9018 	ldr.w	r9, [r9, #24]
            while (interface_ipv6_address)
 8002744:	f1b9 0f00 	cmp.w	r9, #0
 8002748:	d1f0      	bne.n	800272c <_nx_ip_thread_entry+0x298>
            if (ip_ptr -> nx_ipv6_packet_receive)
 800274a:	f8d4 3edc 	ldr.w	r3, [r4, #3804]	; 0xedc
 800274e:	2b00      	cmp	r3, #0
 8002750:	f43f aebc 	beq.w	80024cc <_nx_ip_thread_entry+0x38>
                address[0] = 0xFF020000;
 8002754:	4906      	ldr	r1, [pc, #24]	; (8002770 <_nx_ip_thread_entry+0x2dc>)
                address[1] = 0;
 8002756:	2300      	movs	r3, #0
                address[3] = 1;
 8002758:	f04f 0c01 	mov.w	ip, #1
                _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 800275c:	4632      	mov	r2, r6
                address[0] = 0xFF020000;
 800275e:	9106      	str	r1, [sp, #24]
                _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 8002760:	4620      	mov	r0, r4
 8002762:	4641      	mov	r1, r8
                address[1] = 0;
 8002764:	9307      	str	r3, [sp, #28]
                address[3] = 1;
 8002766:	e9cd 3c08 	strd	r3, ip, [sp, #32]
                _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 800276a:	f003 fe49 	bl	8006400 <_nx_ipv6_multicast_join>
 800276e:	e6ad      	b.n	80024cc <_nx_ip_thread_entry+0x38>
 8002770:	ff020000 	.word	0xff020000
 8002774:	5e000001 	.word	0x5e000001

08002778 <my_authentication_check>:
    NX_PARAMETER_NOT_USED(password);
    NX_PARAMETER_NOT_USED(realm);

    return(NX_SUCCESS);
#endif   
}
 8002778:	2000      	movs	r0, #0
 800277a:	4770      	bx	lr

0800277c <thread_tcp_rx_connect_received>:
}

void  thread_tcp_rx_connect_received(NX_TCP_SOCKET *socket_ptr, UINT port)
{
    /* Check for the proper socket and port.  */
    if ((socket_ptr != &tcp_server_socket) || (port != TCP_RX_PORT))
 800277c:	f241 3389 	movw	r3, #5001	; 0x1389
 8002780:	4299      	cmp	r1, r3
 8002782:	d102      	bne.n	800278a <thread_tcp_rx_connect_received+0xe>
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <thread_tcp_rx_connect_received+0x18>)
 8002786:	4298      	cmp	r0, r3
 8002788:	d003      	beq.n	8002792 <thread_tcp_rx_connect_received+0x16>
        error_counter++;
 800278a:	4a03      	ldr	r2, [pc, #12]	; (8002798 <thread_tcp_rx_connect_received+0x1c>)
 800278c:	6813      	ldr	r3, [r2, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	6013      	str	r3, [r2, #0]
}
 8002792:	4770      	bx	lr
 8002794:	20004cd0 	.word	0x20004cd0
 8002798:	20001604 	.word	0x20001604

0800279c <thread_tcp_rx_disconnect_received>:

void  thread_tcp_rx_disconnect_received(NX_TCP_SOCKET *socket)
{
    /* Check for proper disconnected socket.  */
    if (socket != &tcp_server_socket)
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <thread_tcp_rx_disconnect_received+0x10>)
 800279e:	4283      	cmp	r3, r0
 80027a0:	d003      	beq.n	80027aa <thread_tcp_rx_disconnect_received+0xe>
        error_counter++;
 80027a2:	4a03      	ldr	r2, [pc, #12]	; (80027b0 <thread_tcp_rx_disconnect_received+0x14>)
 80027a4:	6813      	ldr	r3, [r2, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	6013      	str	r3, [r2, #0]
}
 80027aa:	4770      	bx	lr
 80027ac:	20004cd0 	.word	0x20004cd0
 80027b0:	20001604 	.word	0x20001604

080027b4 <thread_tcp_rx_entry>:
{
 80027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	4604      	mov	r4, r0
 80027ba:	b08d      	sub	sp, #52	; 0x34
    ctrlInfo_ptr -> PacketsRxed = 0;
 80027bc:	2000      	movs	r0, #0
    status =  nx_ip_status_check(_iperf_test_ip, NX_IP_INITIALIZE_DONE, &actual_status, NX_IP_PERIODIC_RATE);
 80027be:	4d79      	ldr	r5, [pc, #484]	; (80029a4 <thread_tcp_rx_entry+0x1f0>)
    thread_time = 0;
 80027c0:	2600      	movs	r6, #0
 80027c2:	2700      	movs	r7, #0
 80027c4:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 80029bc <thread_tcp_rx_entry+0x208>
    status =  nx_ip_status_check(_iperf_test_ip, NX_IP_INITIALIZE_DONE, &actual_status, NX_IP_PERIODIC_RATE);
 80027c8:	2364      	movs	r3, #100	; 0x64
    isr_time = 0 ;
 80027ca:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80029c0 <thread_tcp_rx_entry+0x20c>
    status =  nx_ip_status_check(_iperf_test_ip, NX_IP_INITIALIZE_DONE, &actual_status, NX_IP_PERIODIC_RATE);
 80027ce:	aa0b      	add	r2, sp, #44	; 0x2c
    idle_time = 0;
 80027d0:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 80029c4 <thread_tcp_rx_entry+0x210>
    status =  nx_ip_status_check(_iperf_test_ip, NX_IP_INITIALIZE_DONE, &actual_status, NX_IP_PERIODIC_RATE);
 80027d4:	2101      	movs	r1, #1
    ctrlInfo_ptr -> PacketsRxed = 0;
 80027d6:	63a0      	str	r0, [r4, #56]	; 0x38
    ctrlInfo_ptr -> BytesRxed = 0;
 80027d8:	6420      	str	r0, [r4, #64]	; 0x40
    ctrlInfo_ptr -> ThroughPut = 0;   
 80027da:	6520      	str	r0, [r4, #80]	; 0x50
    ctrlInfo_ptr -> ErrorCode = 0;
 80027dc:	6260      	str	r0, [r4, #36]	; 0x24
    ctrlInfo_ptr -> RunTime = 0;    
 80027de:	e9c4 0011 	strd	r0, r0, [r4, #68]	; 0x44
    status =  nx_ip_status_check(_iperf_test_ip, NX_IP_INITIALIZE_DONE, &actual_status, NX_IP_PERIODIC_RATE);
 80027e2:	6828      	ldr	r0, [r5, #0]
    thread_time = 0;
 80027e4:	e9c9 6700 	strd	r6, r7, [r9]
    isr_time = 0 ;
 80027e8:	e9c8 6700 	strd	r6, r7, [r8]
    idle_time = 0;
 80027ec:	e9ca 6700 	strd	r6, r7, [sl]
    status =  nx_ip_status_check(_iperf_test_ip, NX_IP_INITIALIZE_DONE, &actual_status, NX_IP_PERIODIC_RATE);
 80027f0:	f7ff fe44 	bl	800247c <_nx_ip_status_check>
    if (status != NX_SUCCESS)
 80027f4:	b130      	cbz	r0, 8002804 <thread_tcp_rx_entry+0x50>
        error_counter++;
 80027f6:	4a6c      	ldr	r2, [pc, #432]	; (80029a8 <thread_tcp_rx_entry+0x1f4>)
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	6013      	str	r3, [r2, #0]
}
 80027fe:	b00d      	add	sp, #52	; 0x34
 8002800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002804:	4602      	mov	r2, r0
    status =  nx_tcp_socket_create(_iperf_test_ip, &tcp_server_socket, "TCP Server Socket", 
 8002806:	4e69      	ldr	r6, [pc, #420]	; (80029ac <thread_tcp_rx_entry+0x1f8>)
 8002808:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 800280c:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80029cc <thread_tcp_rx_entry+0x218>
 8002810:	2780      	movs	r7, #128	; 0x80
 8002812:	4613      	mov	r3, r2
 8002814:	9203      	str	r2, [sp, #12]
 8002816:	4631      	mov	r1, r6
 8002818:	9200      	str	r2, [sp, #0]
 800281a:	6828      	ldr	r0, [r5, #0]
 800281c:	f8cd e010 	str.w	lr, [sp, #16]
 8002820:	4a63      	ldr	r2, [pc, #396]	; (80029b0 <thread_tcp_rx_entry+0x1fc>)
 8002822:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 8002826:	f004 ffff 	bl	8007828 <_nx_tcp_socket_create>
    if (status)            
 800282a:	2800      	cmp	r0, #0
 800282c:	d1e3      	bne.n	80027f6 <thread_tcp_rx_entry+0x42>
    status =  nx_tcp_server_socket_listen(_iperf_test_ip, TCP_RX_PORT, &tcp_server_socket, 5, thread_tcp_rx_connect_received);
 800282e:	4f61      	ldr	r7, [pc, #388]	; (80029b4 <thread_tcp_rx_entry+0x200>)
 8002830:	2305      	movs	r3, #5
 8002832:	6828      	ldr	r0, [r5, #0]
 8002834:	4632      	mov	r2, r6
 8002836:	f241 3189 	movw	r1, #5001	; 0x1389
 800283a:	9700      	str	r7, [sp, #0]
 800283c:	f004 fe6e 	bl	800751c <_nx_tcp_server_socket_listen>
    if (status)          
 8002840:	2800      	cmp	r0, #0
 8002842:	d1d8      	bne.n	80027f6 <thread_tcp_rx_entry+0x42>
    thread_tcp_rx_counter++;
 8002844:	4a5c      	ldr	r2, [pc, #368]	; (80029b8 <thread_tcp_rx_entry+0x204>)
    status =  nx_tcp_server_socket_accept(&tcp_server_socket, NX_WAIT_FOREVER);
 8002846:	f04f 31ff 	mov.w	r1, #4294967295
 800284a:	4630      	mov	r0, r6
    thread_tcp_rx_counter++;
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	6013      	str	r3, [r2, #0]
    status =  nx_tcp_server_socket_accept(&tcp_server_socket, NX_WAIT_FOREVER);
 8002852:	f004 fdd7 	bl	8007404 <_nx_tcp_server_socket_accept>
    if (status)          
 8002856:	2800      	cmp	r0, #0
 8002858:	d1cd      	bne.n	80027f6 <thread_tcp_rx_entry+0x42>
    ctrlInfo_ptr -> version = tcp_server_socket.nx_tcp_socket_connect_ip.nxd_ip_version;
 800285a:	6973      	ldr	r3, [r6, #20]
    if (ctrlInfo_ptr -> version == NX_IP_VERSION_V4)  
 800285c:	2b04      	cmp	r3, #4
    ctrlInfo_ptr -> version = tcp_server_socket.nx_tcp_socket_connect_ip.nxd_ip_version;
 800285e:	6063      	str	r3, [r4, #4]
    if (ctrlInfo_ptr -> version == NX_IP_VERSION_V4)  
 8002860:	f000 8094 	beq.w	800298c <thread_tcp_rx_entry+0x1d8>
    else if (ctrlInfo_ptr -> version == NX_IP_VERSION_V6)
 8002864:	2b06      	cmp	r3, #6
 8002866:	f000 8094 	beq.w	8002992 <thread_tcp_rx_entry+0x1de>
    ctrlInfo_ptr -> StartTime = tx_time_get();
 800286a:	f01a fe8b 	bl	801d584 <_tx_time_get>
    expire_time = ctrlInfo_ptr -> StartTime + (ctrlInfo_ptr -> TestTime) + 20;
 800286e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ctrlInfo_ptr -> StartTime = tx_time_get();
 8002870:	6460      	str	r0, [r4, #68]	; 0x44
    expire_time = ctrlInfo_ptr -> StartTime + (ctrlInfo_ptr -> TestTime) + 20;
 8002872:	3314      	adds	r3, #20
        status =  nx_tcp_socket_receive(&tcp_server_socket, &packet_ptr, NX_WAIT_FOREVER);
 8002874:	4f4d      	ldr	r7, [pc, #308]	; (80029ac <thread_tcp_rx_entry+0x1f8>)
    expire_time = ctrlInfo_ptr -> StartTime + (ctrlInfo_ptr -> TestTime) + 20;
 8002876:	181e      	adds	r6, r3, r0
    _tx_execution_thread_total_time_reset();
 8002878:	f01a f85a 	bl	801c930 <_tx_execution_thread_total_time_reset>
    _tx_execution_isr_time_reset();
 800287c:	f01a f87a 	bl	801c974 <_tx_execution_isr_time_reset>
    _tx_execution_idle_time_reset();  
 8002880:	f01a f884 	bl	801c98c <_tx_execution_idle_time_reset>
    while(CONDITION) 
 8002884:	e00d      	b.n	80028a2 <thread_tcp_rx_entry+0xee>
        status =  nx_tcp_socket_receive(&tcp_server_socket, &packet_ptr, NX_WAIT_FOREVER);
 8002886:	f005 f97d 	bl	8007b84 <_nx_tcp_socket_receive>
        if (status)
 800288a:	2800      	cmp	r0, #0
 800288c:	d177      	bne.n	800297e <thread_tcp_rx_entry+0x1ca>
        ctrlInfo_ptr -> BytesRxed += packet_ptr -> nx_packet_length;
 800288e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002890:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002892:	6a41      	ldr	r1, [r0, #36]	; 0x24
        ctrlInfo_ptr -> PacketsRxed ++;
 8002894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        ctrlInfo_ptr -> BytesRxed += packet_ptr -> nx_packet_length;
 8002896:	440a      	add	r2, r1
        ctrlInfo_ptr -> PacketsRxed ++;
 8002898:	3301      	adds	r3, #1
        ctrlInfo_ptr -> BytesRxed += packet_ptr -> nx_packet_length;
 800289a:	6422      	str	r2, [r4, #64]	; 0x40
        ctrlInfo_ptr -> PacketsRxed ++;
 800289c:	63a3      	str	r3, [r4, #56]	; 0x38
        nx_packet_release(packet_ptr);   
 800289e:	f004 f8a7 	bl	80069f0 <_nx_packet_release>
    while(CONDITION) 
 80028a2:	f01a fe6f 	bl	801d584 <_tx_time_get>
 80028a6:	42b0      	cmp	r0, r6
        status =  nx_tcp_socket_receive(&tcp_server_socket, &packet_ptr, NX_WAIT_FOREVER);
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	a90a      	add	r1, sp, #40	; 0x28
 80028ae:	4638      	mov	r0, r7
    while(CONDITION) 
 80028b0:	d3e9      	bcc.n	8002886 <thread_tcp_rx_entry+0xd2>
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <thread_tcp_rx_entry+0x1f4>)
 80028b4:	9309      	str	r3, [sp, #36]	; 0x24
    _tx_execution_thread_total_time_get(&thread_time);
 80028b6:	4841      	ldr	r0, [pc, #260]	; (80029bc <thread_tcp_rx_entry+0x208>)
 80028b8:	f01a f874 	bl	801c9a4 <_tx_execution_thread_total_time_get>
    _tx_execution_isr_time_get(&isr_time);
 80028bc:	4840      	ldr	r0, [pc, #256]	; (80029c0 <thread_tcp_rx_entry+0x20c>)
 80028be:	f01a f87b 	bl	801c9b8 <_tx_execution_isr_time_get>
    _tx_execution_idle_time_get(&idle_time);
 80028c2:	4840      	ldr	r0, [pc, #256]	; (80029c4 <thread_tcp_rx_entry+0x210>)
 80028c4:	f01a f882 	bl	801c9cc <_tx_execution_idle_time_get>
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 80028c8:	f01a fe5c 	bl	801d584 <_tx_time_get>
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;    
 80028cc:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80028d0:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 80028d4:	e9da 6700 	ldrd	r6, r7, [sl]
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 80028d8:	1a80      	subs	r0, r0, r2
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;    
 80028da:	4a3b      	ldr	r2, [pc, #236]	; (80029c8 <thread_tcp_rx_entry+0x214>)
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 80028dc:	64a0      	str	r0, [r4, #72]	; 0x48
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;    
 80028de:	fbb3 f3f0 	udiv	r3, r3, r0
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 80028e2:	19b0      	adds	r0, r6, r6
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;    
 80028e4:	fb0e f303 	mul.w	r3, lr, r3
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 80028e8:	eb47 0107 	adc.w	r1, r7, r7
 80028ec:	eb10 0a06 	adds.w	sl, r0, r6
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;    
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 80028f4:	eb41 0b07 	adc.w	fp, r1, r7
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;    
 80028f8:	0bdb      	lsrs	r3, r3, #15
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 80028fa:	4659      	mov	r1, fp
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;    
 80028fc:	6523      	str	r3, [r4, #80]	; 0x50
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 80028fe:	014a      	lsls	r2, r1, #5
 8002900:	4651      	mov	r1, sl
 8002902:	ea42 62da 	orr.w	r2, r2, sl, lsr #27
 8002906:	014b      	lsls	r3, r1, #5
 8002908:	9207      	str	r2, [sp, #28]
 800290a:	9306      	str	r3, [sp, #24]
 800290c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002910:	e9d9 2300 	ldrd	r2, r3, [r9]
 8002914:	46d1      	mov	r9, sl
 8002916:	eb19 0900 	adds.w	r9, r9, r0
 800291a:	eb4b 0a01 	adc.w	sl, fp, r1
 800291e:	1990      	adds	r0, r2, r6
 8002920:	eb43 0107 	adc.w	r1, r3, r7
 8002924:	4602      	mov	r2, r0
 8002926:	eb19 0006 	adds.w	r0, r9, r6
 800292a:	460b      	mov	r3, r1
 800292c:	eb4a 0107 	adc.w	r1, sl, r7
 8002930:	e9d8 6700 	ldrd	r6, r7, [r8]
 8002934:	1992      	adds	r2, r2, r6
 8002936:	417b      	adcs	r3, r7
 8002938:	f7fd fe02 	bl	8000540 <__aeabi_uldivmod>
    status =  nx_tcp_socket_disconnect(&tcp_server_socket, 10);
 800293c:	210a      	movs	r1, #10
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 800293e:	6620      	str	r0, [r4, #96]	; 0x60
    status =  nx_tcp_socket_disconnect(&tcp_server_socket, 10);
 8002940:	481a      	ldr	r0, [pc, #104]	; (80029ac <thread_tcp_rx_entry+0x1f8>)
 8002942:	f005 f833 	bl	80079ac <_nx_tcp_socket_disconnect>
    if (status)
 8002946:	b120      	cbz	r0, 8002952 <thread_tcp_rx_entry+0x19e>
        error_counter++;
 8002948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800294a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	6013      	str	r3, [r2, #0]
    status =  nx_tcp_server_socket_unaccept(&tcp_server_socket);
 8002952:	4816      	ldr	r0, [pc, #88]	; (80029ac <thread_tcp_rx_entry+0x1f8>)
 8002954:	f004 fe42 	bl	80075dc <_nx_tcp_server_socket_unaccept>
 8002958:	4606      	mov	r6, r0
    status += nx_tcp_server_socket_unlisten(_iperf_test_ip, TCP_RX_PORT);
 800295a:	f241 3189 	movw	r1, #5001	; 0x1389
 800295e:	6828      	ldr	r0, [r5, #0]
 8002960:	f004 feb4 	bl	80076cc <_nx_tcp_server_socket_unlisten>
        error_counter++;
 8002964:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (status)
 8002966:	42c6      	cmn	r6, r0
        error_counter++;
 8002968:	681b      	ldr	r3, [r3, #0]
    if (status)
 800296a:	d002      	beq.n	8002972 <thread_tcp_rx_entry+0x1be>
        error_counter++;
 800296c:	3301      	adds	r3, #1
 800296e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002970:	6013      	str	r3, [r2, #0]
    if(error_counter)
 8002972:	b103      	cbz	r3, 8002976 <thread_tcp_rx_entry+0x1c2>
        ctrlInfo_ptr -> ErrorCode = error_counter;
 8002974:	6263      	str	r3, [r4, #36]	; 0x24
    nx_tcp_socket_delete(&tcp_server_socket);
 8002976:	480d      	ldr	r0, [pc, #52]	; (80029ac <thread_tcp_rx_entry+0x1f8>)
 8002978:	f004 ffce 	bl	8007918 <_nx_tcp_socket_delete>
 800297c:	e73f      	b.n	80027fe <thread_tcp_rx_entry+0x4a>
            error_counter++;
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <thread_tcp_rx_entry+0x1f4>)
 8002980:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <thread_tcp_rx_entry+0x1f4>)
 8002982:	9309      	str	r3, [sp, #36]	; 0x24
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	6013      	str	r3, [r2, #0]
            break;
 800298a:	e794      	b.n	80028b6 <thread_tcp_rx_entry+0x102>
        ctrlInfo_ptr -> ip = tcp_server_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4;  
 800298c:	69b3      	ldr	r3, [r6, #24]
 800298e:	60a3      	str	r3, [r4, #8]
 8002990:	e76b      	b.n	800286a <thread_tcp_rx_entry+0xb6>
        memcpy(ctrlInfo_ptr -> ipv6, tcp_server_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v6, sizeof(ULONG) * 4); 
 8002992:	3618      	adds	r6, #24
 8002994:	f104 070c 	add.w	r7, r4, #12
 8002998:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800299a:	60e0      	str	r0, [r4, #12]
 800299c:	6079      	str	r1, [r7, #4]
 800299e:	60ba      	str	r2, [r7, #8]
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e762      	b.n	800286a <thread_tcp_rx_entry+0xb6>
 80029a4:	20004b68 	.word	0x20004b68
 80029a8:	20001604 	.word	0x20001604
 80029ac:	20004cd0 	.word	0x20004cd0
 80029b0:	080254f8 	.word	0x080254f8
 80029b4:	0800277d 	.word	0x0800277d
 80029b8:	20007758 	.word	0x20007758
 80029bc:	20001858 	.word	0x20001858
 80029c0:	20001628 	.word	0x20001628
 80029c4:	20001608 	.word	0x20001608
 80029c8:	431bde83 	.word	0x431bde83
 80029cc:	0800279d 	.word	0x0800279d

080029d0 <thread_tcp_tx_entry>:
    }            
    return;
}          

void    thread_tcp_tx_entry(ULONG thread_input)
{
 80029d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d4:	4604      	mov	r4, r0
    UINT  
        status;
    UINT            is_first = NX_TRUE;
    NX_PACKET      *my_packet = NX_NULL;
 80029d6:	2300      	movs	r3, #0
                                      
    /* Set the pointer.  */
    ctrlInfo_ptr = (ctrl_info *)thread_input;
                     
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    thread_time = 0;
 80029d8:	2000      	movs	r0, #0
 80029da:	2100      	movs	r1, #0
    ctrlInfo_ptr -> StartTime = 0;  
    ctrlInfo_ptr -> RunTime = 0;    
    ctrlInfo_ptr -> ErrorCode = 0;

#ifdef __PRODUCT_NETXDUO__
    server_ip.nxd_ip_version = ctrlInfo_ptr -> version;
 80029dc:	6862      	ldr	r2, [r4, #4]
{
 80029de:	b093      	sub	sp, #76	; 0x4c
    thread_time = 0;
 80029e0:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8002c48 <thread_tcp_tx_entry+0x278>
    isr_time = 0;
 80029e4:	4d92      	ldr	r5, [pc, #584]	; (8002c30 <thread_tcp_tx_entry+0x260>)
    
#ifdef FEATURE_NX_IPV6
    if(ctrlInfo_ptr -> version == NX_IP_VERSION_V6)
 80029e6:	2a06      	cmp	r2, #6
    idle_time = 0;
 80029e8:	f8df a260 	ldr.w	sl, [pc, #608]	; 8002c4c <thread_tcp_tx_entry+0x27c>
    server_ip.nxd_ip_version = ctrlInfo_ptr -> version;
 80029ec:	920d      	str	r2, [sp, #52]	; 0x34
    ctrlInfo_ptr -> PacketsTxed = 0;
 80029ee:	6363      	str	r3, [r4, #52]	; 0x34
    NX_PACKET      *my_packet = NX_NULL;
 80029f0:	930a      	str	r3, [sp, #40]	; 0x28
    ctrlInfo_ptr -> BytesTxed = 0;
 80029f2:	63e3      	str	r3, [r4, #60]	; 0x3c
    ctrlInfo_ptr -> ThroughPut = 0;     
 80029f4:	6523      	str	r3, [r4, #80]	; 0x50
    ctrlInfo_ptr -> ErrorCode = 0;
 80029f6:	6263      	str	r3, [r4, #36]	; 0x24
    ctrlInfo_ptr -> RunTime = 0;    
 80029f8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
    thread_time = 0;
 80029fc:	e9c9 0100 	strd	r0, r1, [r9]
    isr_time = 0;
 8002a00:	e9c5 0100 	strd	r0, r1, [r5]
    idle_time = 0;
 8002a04:	e9ca 0100 	strd	r0, r1, [sl]
    if(ctrlInfo_ptr -> version == NX_IP_VERSION_V6)
 8002a08:	d01f      	beq.n	8002a4a <thread_tcp_tx_entry+0x7a>
        server_ip.nxd_ip_address.v6[0] = ctrlInfo_ptr -> ipv6[0];
        server_ip.nxd_ip_address.v6[1] = ctrlInfo_ptr -> ipv6[1];
        server_ip.nxd_ip_address.v6[2] = ctrlInfo_ptr -> ipv6[2];
        server_ip.nxd_ip_address.v6[3] = ctrlInfo_ptr -> ipv6[3];
    }
    else if(ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 8002a0a:	2a04      	cmp	r2, #4
 8002a0c:	d01a      	beq.n	8002a44 <thread_tcp_tx_entry+0x74>
        server_ip.nxd_ip_address.v4 = ctrlInfo_ptr -> ip;
#endif
#endif

    /* TCP Transmit Test Starts in 2 seconds.  */
    tx_thread_sleep(200);
 8002a0e:	20c8      	movs	r0, #200	; 0xc8
    
    /* Create the socket.  */
    status =  nx_tcp_socket_create(_iperf_test_ip, &tcp_client_socket, "TCP Client Socket", 
 8002a10:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    tx_thread_sleep(200);
 8002a14:	f01a fbf8 	bl	801d208 <_tx_thread_sleep>
    status =  nx_tcp_socket_create(_iperf_test_ip, &tcp_client_socket, "TCP Client Socket", 
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4b86      	ldr	r3, [pc, #536]	; (8002c34 <thread_tcp_tx_entry+0x264>)
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	9204      	str	r2, [sp, #16]
 8002a24:	9203      	str	r2, [sp, #12]
 8002a26:	9200      	str	r2, [sp, #0]
 8002a28:	4a83      	ldr	r2, [pc, #524]	; (8002c38 <thread_tcp_tx_entry+0x268>)
 8002a2a:	e9cd 1601 	strd	r1, r6, [sp, #4]
 8002a2e:	4983      	ldr	r1, [pc, #524]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002a30:	f004 fefa 	bl	8007828 <_nx_tcp_socket_create>
                                   NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, 32*1024,
                                   NX_NULL, NX_NULL);
    
    /* Check for error.  */
    if (status)    
 8002a34:	b190      	cbz	r0, 8002a5c <thread_tcp_tx_entry+0x8c>
    status = nx_tcp_socket_mss_get(&tcp_client_socket, &packet_size);

    /* Check for error.  */
    if (status)          
    {
        error_counter++;
 8002a36:	4a82      	ldr	r2, [pc, #520]	; (8002c40 <thread_tcp_tx_entry+0x270>)
 8002a38:	6813      	ldr	r3, [r2, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]
    if(error_counter)
        ctrlInfo_ptr -> ErrorCode = error_counter;
    
    /* Delete the socket.  */
    nx_tcp_socket_delete(&tcp_client_socket);
}
 8002a3e:	b013      	add	sp, #76	; 0x4c
 8002a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        server_ip.nxd_ip_address.v4 = ctrlInfo_ptr -> ip;
 8002a44:	68a3      	ldr	r3, [r4, #8]
 8002a46:	930e      	str	r3, [sp, #56]	; 0x38
 8002a48:	e7e1      	b.n	8002a0e <thread_tcp_tx_entry+0x3e>
        server_ip.nxd_ip_address.v6[1] = ctrlInfo_ptr -> ipv6[1];
 8002a4a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
        server_ip.nxd_ip_address.v6[0] = ctrlInfo_ptr -> ipv6[0];
 8002a4e:	920e      	str	r2, [sp, #56]	; 0x38
        server_ip.nxd_ip_address.v6[1] = ctrlInfo_ptr -> ipv6[1];
 8002a50:	930f      	str	r3, [sp, #60]	; 0x3c
        server_ip.nxd_ip_address.v6[2] = ctrlInfo_ptr -> ipv6[2];
 8002a52:	6962      	ldr	r2, [r4, #20]
        server_ip.nxd_ip_address.v6[3] = ctrlInfo_ptr -> ipv6[3];
 8002a54:	69a3      	ldr	r3, [r4, #24]
 8002a56:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002a5a:	e7d8      	b.n	8002a0e <thread_tcp_tx_entry+0x3e>
    status =  nx_tcp_client_socket_bind(&tcp_client_socket, TCP_TX_PORT, NX_WAIT_FOREVER);
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	214e      	movs	r1, #78	; 0x4e
 8002a62:	4876      	ldr	r0, [pc, #472]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002a64:	f004 f8b2 	bl	8006bcc <_nx_tcp_client_socket_bind>
    if (status)        
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d1e4      	bne.n	8002a36 <thread_tcp_tx_entry+0x66>
    status =  nxd_tcp_client_socket_connect(&tcp_client_socket, &server_ip, ctrlInfo_ptr -> port, NX_WAIT_FOREVER);
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	69e2      	ldr	r2, [r4, #28]
 8002a72:	a90d      	add	r1, sp, #52	; 0x34
 8002a74:	4871      	ldr	r0, [pc, #452]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002a76:	f00c f92f 	bl	800ecd8 <_nxd_tcp_client_socket_connect>
    if (status)
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d1db      	bne.n	8002a36 <thread_tcp_tx_entry+0x66>
    ctrlInfo_ptr -> StartTime = tx_time_get();
 8002a7e:	f01a fd81 	bl	801d584 <_tx_time_get>
 8002a82:	6460      	str	r0, [r4, #68]	; 0x44
 8002a84:	4606      	mov	r6, r0
    expire_time = ctrlInfo_ptr -> StartTime + (ctrlInfo_ptr -> TestTime);
 8002a86:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    _tx_execution_thread_total_time_reset();
 8002a88:	f019 ff52 	bl	801c930 <_tx_execution_thread_total_time_reset>
    _tx_execution_isr_time_reset();
 8002a8c:	f019 ff72 	bl	801c974 <_tx_execution_isr_time_reset>
    _tx_execution_idle_time_reset();
 8002a90:	f019 ff7c 	bl	801c98c <_tx_execution_idle_time_reset>
    status = nx_tcp_socket_mss_get(&tcp_client_socket, &packet_size);
 8002a94:	a90c      	add	r1, sp, #48	; 0x30
 8002a96:	4869      	ldr	r0, [pc, #420]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002a98:	f005 f852 	bl	8007b40 <_nx_tcp_socket_mss_get>
    if (status)          
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	d1ca      	bne.n	8002a36 <thread_tcp_tx_entry+0x66>
 8002aa0:	19f3      	adds	r3, r6, r7
    UINT            is_first = NX_TRUE;
 8002aa2:	f04f 0b01 	mov.w	fp, #1
        status =  nx_packet_allocate(_iperf_test_pool, &my_packet, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8002aa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c50 <thread_tcp_tx_entry+0x280>
 8002aaa:	9306      	str	r3, [sp, #24]
    while(CONDITION)
 8002aac:	f01a fd6a 	bl	801d584 <_tx_time_get>
 8002ab0:	9b06      	ldr	r3, [sp, #24]
 8002ab2:	4298      	cmp	r0, r3
 8002ab4:	f080 80b9 	bcs.w	8002c2a <thread_tcp_tx_entry+0x25a>
        status =  nx_packet_allocate(_iperf_test_pool, &my_packet, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8002abc:	224c      	movs	r2, #76	; 0x4c
 8002abe:	a90a      	add	r1, sp, #40	; 0x28
 8002ac0:	f8d8 0000 	ldr.w	r0, [r8]
 8002ac4:	f003 fde2 	bl	800668c <_nx_packet_allocate>
        if (status != NX_SUCCESS)
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	f040 80ae 	bne.w	8002c2a <thread_tcp_tx_entry+0x25a>
        my_packet -> nx_packet_length =  packet_size;
 8002ace:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002ad0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        if (my_packet -> nx_packet_prepend_ptr + packet_size <= my_packet -> nx_packet_data_end)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	1999      	adds	r1, r3, r6
        my_packet -> nx_packet_length =  packet_size;
 8002ad8:	627e      	str	r6, [r7, #36]	; 0x24
        if (my_packet -> nx_packet_prepend_ptr + packet_size <= my_packet -> nx_packet_data_end)
 8002ada:	4291      	cmp	r1, r2
 8002adc:	d815      	bhi.n	8002b0a <thread_tcp_tx_entry+0x13a>
            my_packet -> nx_packet_append_ptr =  my_packet -> nx_packet_prepend_ptr + packet_size;
 8002ade:	60f9      	str	r1, [r7, #12]
        if (is_first)
 8002ae0:	f1bb 0f00 	cmp.w	fp, #0
 8002ae4:	d12e      	bne.n	8002b44 <thread_tcp_tx_entry+0x174>
        status =  nx_tcp_socket_send(&tcp_client_socket, my_packet, NX_WAIT_FOREVER);
 8002ae6:	4639      	mov	r1, r7
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	4853      	ldr	r0, [pc, #332]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002aee:	f005 faa9 	bl	8008044 <_nx_tcp_socket_send>
        if (status)
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d135      	bne.n	8002b62 <thread_tcp_tx_entry+0x192>
            ctrlInfo_ptr -> PacketsTxed ++;
 8002af6:	6b62      	ldr	r2, [r4, #52]	; 0x34
            ctrlInfo_ptr -> BytesTxed += packet_size; 
 8002af8:	f04f 0b00 	mov.w	fp, #0
 8002afc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002afe:	990c      	ldr	r1, [sp, #48]	; 0x30
            ctrlInfo_ptr -> PacketsTxed ++;
 8002b00:	3201      	adds	r2, #1
            ctrlInfo_ptr -> BytesTxed += packet_size; 
 8002b02:	440b      	add	r3, r1
            ctrlInfo_ptr -> PacketsTxed ++;
 8002b04:	6362      	str	r2, [r4, #52]	; 0x34
            ctrlInfo_ptr -> BytesTxed += packet_size; 
 8002b06:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002b08:	e7d0      	b.n	8002aac <thread_tcp_tx_entry+0xdc>
            remaining_size = packet_size - (ULONG)(my_packet -> nx_packet_append_ptr - my_packet -> nx_packet_prepend_ptr);
 8002b0a:	1ad3      	subs	r3, r2, r3
            my_packet -> nx_packet_append_ptr = my_packet -> nx_packet_data_end;
 8002b0c:	60fa      	str	r2, [r7, #12]
        while (remaining_size)
 8002b0e:	1af6      	subs	r6, r6, r3
 8002b10:	d0e6      	beq.n	8002ae0 <thread_tcp_tx_entry+0x110>
            status =  nx_packet_allocate(_iperf_test_pool, &packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	224c      	movs	r2, #76	; 0x4c
 8002b18:	a90b      	add	r1, sp, #44	; 0x2c
 8002b1a:	f8d8 0000 	ldr.w	r0, [r8]
 8002b1e:	f003 fdb5 	bl	800668c <_nx_packet_allocate>
            if (status != NX_SUCCESS)
 8002b22:	b948      	cbnz	r0, 8002b38 <thread_tcp_tx_entry+0x168>
            last_packet -> nx_packet_next = packet_ptr;
 8002b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (remaining_size < (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr))
 8002b26:	6958      	ldr	r0, [r3, #20]
 8002b28:	689a      	ldr	r2, [r3, #8]
            last_packet -> nx_packet_next = packet_ptr;
 8002b2a:	607b      	str	r3, [r7, #4]
        while (remaining_size)
 8002b2c:	461f      	mov	r7, r3
            if (remaining_size < (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr))
 8002b2e:	1a81      	subs	r1, r0, r2
 8002b30:	42b1      	cmp	r1, r6
 8002b32:	d903      	bls.n	8002b3c <thread_tcp_tx_entry+0x16c>
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + remaining_size;
 8002b34:	4416      	add	r6, r2
 8002b36:	60de      	str	r6, [r3, #12]
 8002b38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002b3a:	e7d1      	b.n	8002ae0 <thread_tcp_tx_entry+0x110>
        while (remaining_size)
 8002b3c:	1a76      	subs	r6, r6, r1
 8002b3e:	60d8      	str	r0, [r3, #12]
 8002b40:	d1e7      	bne.n	8002b12 <thread_tcp_tx_entry+0x142>
 8002b42:	e7f9      	b.n	8002b38 <thread_tcp_tx_entry+0x168>
            memset(my_packet -> nx_packet_prepend_ptr, 0, (UINT)(my_packet -> nx_packet_data_end - my_packet -> nx_packet_prepend_ptr));
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2100      	movs	r1, #0
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	f01b fd24 	bl	801e59a <memset>
        status =  nx_tcp_socket_send(&tcp_client_socket, my_packet, NX_WAIT_FOREVER);
 8002b52:	f04f 32ff 	mov.w	r2, #4294967295
 8002b56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b58:	4838      	ldr	r0, [pc, #224]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002b5a:	f005 fa73 	bl	8008044 <_nx_tcp_socket_send>
        if (status)
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d0c9      	beq.n	8002af6 <thread_tcp_tx_entry+0x126>
            error_counter++;
 8002b62:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002c40 <thread_tcp_tx_entry+0x270>
            nx_packet_release(my_packet);
 8002b66:	980a      	ldr	r0, [sp, #40]	; 0x28
            error_counter++;
 8002b68:	f8d8 3000 	ldr.w	r3, [r8]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f8c8 3000 	str.w	r3, [r8]
            nx_packet_release(my_packet);
 8002b72:	f003 ff3d 	bl	80069f0 <_nx_packet_release>
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002b76:	f01a fd05 	bl	801d584 <_tx_time_get>
 8002b7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 8002b7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002b7e:	2364      	movs	r3, #100	; 0x64
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002b80:	1a82      	subs	r2, r0, r2
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 8002b82:	4e30      	ldr	r6, [pc, #192]	; (8002c44 <thread_tcp_tx_entry+0x274>)
    _tx_execution_thread_total_time_get(&thread_time);
 8002b84:	4830      	ldr	r0, [pc, #192]	; (8002c48 <thread_tcp_tx_entry+0x278>)
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002b86:	64a2      	str	r2, [r4, #72]	; 0x48
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 8002b88:	fbb1 f2f2 	udiv	r2, r1, r2
 8002b8c:	fb03 f302 	mul.w	r3, r3, r2
 8002b90:	fba6 2303 	umull	r2, r3, r6, r3
 8002b94:	0bdb      	lsrs	r3, r3, #15
 8002b96:	6523      	str	r3, [r4, #80]	; 0x50
    _tx_execution_thread_total_time_get(&thread_time);
 8002b98:	f019 ff04 	bl	801c9a4 <_tx_execution_thread_total_time_get>
    _tx_execution_isr_time_get(&isr_time);
 8002b9c:	4824      	ldr	r0, [pc, #144]	; (8002c30 <thread_tcp_tx_entry+0x260>)
 8002b9e:	f019 ff0b 	bl	801c9b8 <_tx_execution_isr_time_get>
    _tx_execution_idle_time_get(&idle_time);
 8002ba2:	482a      	ldr	r0, [pc, #168]	; (8002c4c <thread_tcp_tx_entry+0x27c>)
 8002ba4:	f019 ff12 	bl	801c9cc <_tx_execution_idle_time_get>
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 8002ba8:	e9da 0100 	ldrd	r0, r1, [sl]
 8002bac:	e9d9 ab00 	ldrd	sl, fp, [r9]
 8002bb0:	1802      	adds	r2, r0, r0
 8002bb2:	eb41 0301 	adc.w	r3, r1, r1
 8002bb6:	eb10 060a 	adds.w	r6, r0, sl
 8002bba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002bbe:	eb41 070b 	adc.w	r7, r1, fp
 8002bc2:	1880      	adds	r0, r0, r2
 8002bc4:	46b3      	mov	fp, r6
 8002bc6:	4159      	adcs	r1, r3
 8002bc8:	46bc      	mov	ip, r7
 8002bca:	014b      	lsls	r3, r1, #5
 8002bcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bd0:	9307      	str	r3, [sp, #28]
 8002bd2:	0143      	lsls	r3, r0, #5
 8002bd4:	9306      	str	r3, [sp, #24]
 8002bd6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8002bda:	e9d5 9a00 	ldrd	r9, sl, [r5]
 8002bde:	1836      	adds	r6, r6, r0
 8002be0:	414f      	adcs	r7, r1
 8002be2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002be6:	1980      	adds	r0, r0, r6
 8002be8:	4179      	adcs	r1, r7
 8002bea:	eb1b 0209 	adds.w	r2, fp, r9
 8002bee:	eb4c 030a 	adc.w	r3, ip, sl
 8002bf2:	f7fd fca5 	bl	8000540 <__aeabi_uldivmod>
    status =  nx_tcp_socket_disconnect(&tcp_client_socket, NX_NO_WAIT);
 8002bf6:	2100      	movs	r1, #0
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 8002bf8:	6620      	str	r0, [r4, #96]	; 0x60
    status =  nx_tcp_socket_disconnect(&tcp_client_socket, NX_NO_WAIT);
 8002bfa:	4810      	ldr	r0, [pc, #64]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002bfc:	f004 fed6 	bl	80079ac <_nx_tcp_socket_disconnect>
    if (status)
 8002c00:	b120      	cbz	r0, 8002c0c <thread_tcp_tx_entry+0x23c>
        error_counter++;
 8002c02:	f8d8 3000 	ldr.w	r3, [r8]
 8002c06:	3301      	adds	r3, #1
 8002c08:	f8c8 3000 	str.w	r3, [r8]
    status =  nx_tcp_client_socket_unbind(&tcp_client_socket);
 8002c0c:	480b      	ldr	r0, [pc, #44]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002c0e:	f004 f86b 	bl	8006ce8 <_nx_tcp_client_socket_unbind>
        error_counter++;
 8002c12:	f8d8 3000 	ldr.w	r3, [r8]
    if (status)
 8002c16:	b110      	cbz	r0, 8002c1e <thread_tcp_tx_entry+0x24e>
        error_counter++;
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f8c8 3000 	str.w	r3, [r8]
    if(error_counter)
 8002c1e:	b103      	cbz	r3, 8002c22 <thread_tcp_tx_entry+0x252>
        ctrlInfo_ptr -> ErrorCode = error_counter;
 8002c20:	6263      	str	r3, [r4, #36]	; 0x24
    nx_tcp_socket_delete(&tcp_client_socket);
 8002c22:	4806      	ldr	r0, [pc, #24]	; (8002c3c <thread_tcp_tx_entry+0x26c>)
 8002c24:	f004 fe78 	bl	8007918 <_nx_tcp_socket_delete>
 8002c28:	e709      	b.n	8002a3e <thread_tcp_tx_entry+0x6e>
 8002c2a:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8002c40 <thread_tcp_tx_entry+0x270>
 8002c2e:	e7a2      	b.n	8002b76 <thread_tcp_tx_entry+0x1a6>
 8002c30:	20001628 	.word	0x20001628
 8002c34:	20004b68 	.word	0x20004b68
 8002c38:	0802550c 	.word	0x0802550c
 8002c3c:	2000775c 	.word	0x2000775c
 8002c40:	20001604 	.word	0x20001604
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	20001858 	.word	0x20001858
 8002c4c:	20001608 	.word	0x20001608
 8002c50:	20004c54 	.word	0x20004c54

08002c54 <send_udp_packet>:
    NX_PACKET       *last_pkt_ptr = NX_NULL;
#endif

#ifdef __PRODUCT_NETXDUO__
    NXD_ADDRESS server_ip;
    server_ip.nxd_ip_version = ctrlInfo_ptr -> version; 
 8002c54:	684b      	ldr	r3, [r1, #4]
    NX_PACKET       *my_packet = NX_NULL;
 8002c56:	2200      	movs	r2, #0
{
 8002c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifdef FEATURE_NX_IPV6
    if (ctrlInfo_ptr -> version == NX_IP_VERSION_V6)
 8002c5c:	2b06      	cmp	r3, #6
{
 8002c5e:	b086      	sub	sp, #24
 8002c60:	460c      	mov	r4, r1
 8002c62:	4680      	mov	r8, r0
    server_ip.nxd_ip_version = ctrlInfo_ptr -> version; 
 8002c64:	e9cd 2300 	strd	r2, r3, [sp]
    if (ctrlInfo_ptr -> version == NX_IP_VERSION_V6)
 8002c68:	d03e      	beq.n	8002ce8 <send_udp_packet+0x94>
        server_ip.nxd_ip_address.v6[0] = ctrlInfo_ptr -> ipv6[0];
        server_ip.nxd_ip_address.v6[1] = ctrlInfo_ptr -> ipv6[1];
        server_ip.nxd_ip_address.v6[2] = ctrlInfo_ptr -> ipv6[2];
        server_ip.nxd_ip_address.v6[3] = ctrlInfo_ptr -> ipv6[3];
    } 
    else if (ctrlInfo_ptr -> version == NX_IP_VERSION_V4) 
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d039      	beq.n	8002ce2 <send_udp_packet+0x8e>
#endif

        server_ip.nxd_ip_address.v4 = ctrlInfo_ptr -> ip;

    /* Send the end of test indicator. */
    nx_packet_allocate(_iperf_test_pool, &my_packet, NX_IPv6_UDP_PACKET, TX_WAIT_FOREVER);
 8002c6e:	4826      	ldr	r0, [pc, #152]	; (8002d08 <send_udp_packet+0xb4>)
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295
 8002c74:	2240      	movs	r2, #64	; 0x40
 8002c76:	4669      	mov	r1, sp
 8002c78:	6800      	ldr	r0, [r0, #0]
 8002c7a:	f003 fd07 	bl	800668c <_nx_packet_allocate>
    }                   
#endif

    payload_ptr = (udp_payload *)my_packet -> nx_packet_prepend_ptr; 
    payload_ptr -> udp_id = udp_id;
    payload_ptr -> tv_sec = _tx_timer_system_clock / NX_IP_PERIODIC_RATE;
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <send_udp_packet+0xb8>)
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <send_udp_packet+0xbc>)
    payload_ptr -> tv_usec = _tx_timer_system_clock / NX_IP_PERIODIC_RATE * 1000000;                  

    tmp = (ULONG)payload_ptr -> udp_id;
    NX_CHANGE_ULONG_ENDIAN(tmp);
 8002c82:	ea88 4038 	eor.w	r0, r8, r8, ror #16
    payload_ptr -> tv_sec = _tx_timer_system_clock / NX_IP_PERIODIC_RATE;
 8002c86:	6812      	ldr	r2, [r2, #0]
    payload_ptr -> tv_usec = _tx_timer_system_clock / NX_IP_PERIODIC_RATE * 1000000;                  
 8002c88:	4922      	ldr	r1, [pc, #136]	; (8002d14 <send_udp_packet+0xc0>)
    NX_CHANGE_ULONG_ENDIAN(tmp);
 8002c8a:	0a00      	lsrs	r0, r0, #8
    payload_ptr -> tv_sec = _tx_timer_system_clock / NX_IP_PERIODIC_RATE;
 8002c8c:	fba3 3202 	umull	r3, r2, r3, r2
    my_packet -> nx_packet_append_ptr =  my_packet -> nx_packet_prepend_ptr + ctrlInfo_ptr -> PacketSize;
 8002c90:	6d67      	ldr	r7, [r4, #84]	; 0x54
    /* Adjust the write pointer.  */
    my_packet -> nx_packet_length = ctrlInfo_ptr -> PacketSize;

    /* Send the UDP packet.  */  
#ifdef __PRODUCT_NETXDUO__
    status = nxd_udp_socket_send(&udp_client_socket, my_packet, &server_ip, ctrlInfo_ptr -> port);
 8002c92:	69e3      	ldr	r3, [r4, #28]
    NX_CHANGE_ULONG_ENDIAN(tmp);
 8002c94:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    payload_ptr -> tv_sec = _tx_timer_system_clock / NX_IP_PERIODIC_RATE;
 8002c98:	0952      	lsrs	r2, r2, #5
    my_packet -> nx_packet_append_ptr =  my_packet -> nx_packet_prepend_ptr + ctrlInfo_ptr -> PacketSize;
 8002c9a:	9e00      	ldr	r6, [sp, #0]
    NX_CHANGE_ULONG_ENDIAN(tmp);
 8002c9c:	ea80 2038 	eor.w	r0, r0, r8, ror #8
    payload_ptr -> tv_usec = _tx_timer_system_clock / NX_IP_PERIODIC_RATE * 1000000;                  
 8002ca0:	fb01 f102 	mul.w	r1, r1, r2
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_sec);
 8002ca4:	ea82 4432 	eor.w	r4, r2, r2, ror #16
    my_packet -> nx_packet_append_ptr =  my_packet -> nx_packet_prepend_ptr + ctrlInfo_ptr -> PacketSize;
 8002ca8:	f8d6 c008 	ldr.w	ip, [r6, #8]
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_usec);    
 8002cac:	ea81 4531 	eor.w	r5, r1, r1, ror #16
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_sec);
 8002cb0:	0a24      	lsrs	r4, r4, #8
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_usec);    
 8002cb2:	0a2d      	lsrs	r5, r5, #8
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_sec);
 8002cb4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_usec);    
 8002cb8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_sec);
 8002cbc:	ea84 2432 	eor.w	r4, r4, r2, ror #8
    my_packet -> nx_packet_append_ptr =  my_packet -> nx_packet_prepend_ptr + ctrlInfo_ptr -> PacketSize;
 8002cc0:	eb0c 0207 	add.w	r2, ip, r7
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_usec);    
 8002cc4:	ea85 2531 	eor.w	r5, r5, r1, ror #8
    status = nxd_udp_socket_send(&udp_client_socket, my_packet, &server_ip, ctrlInfo_ptr -> port);
 8002cc8:	4631      	mov	r1, r6
    my_packet -> nx_packet_append_ptr =  my_packet -> nx_packet_prepend_ptr + ctrlInfo_ptr -> PacketSize;
 8002cca:	60f2      	str	r2, [r6, #12]
    status = nxd_udp_socket_send(&udp_client_socket, my_packet, &server_ip, ctrlInfo_ptr -> port);
 8002ccc:	aa01      	add	r2, sp, #4
    NX_CHANGE_ULONG_ENDIAN(payload_ptr -> tv_sec);
 8002cce:	e88c 0031 	stmia.w	ip, {r0, r4, r5}
    status = nxd_udp_socket_send(&udp_client_socket, my_packet, &server_ip, ctrlInfo_ptr -> port);
 8002cd2:	4811      	ldr	r0, [pc, #68]	; (8002d18 <send_udp_packet+0xc4>)
    my_packet -> nx_packet_length = ctrlInfo_ptr -> PacketSize;
 8002cd4:	6277      	str	r7, [r6, #36]	; 0x24
    status = nxd_udp_socket_send(&udp_client_socket, my_packet, &server_ip, ctrlInfo_ptr -> port);
 8002cd6:	f00c f90b 	bl	800eef0 <_nxd_udp_socket_send>
#else     
    status = nx_udp_socket_send(&udp_client_socket, my_packet, ctrlInfo_ptr -> ip, ctrlInfo_ptr -> port);  
#endif
    
    /* Check the status.  */
    if(status)
 8002cda:	b970      	cbnz	r0, 8002cfa <send_udp_packet+0xa6>

        /* Release the packet.  */
        nx_packet_release(my_packet);
        return;
    }
}           
 8002cdc:	b006      	add	sp, #24
 8002cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        server_ip.nxd_ip_address.v4 = ctrlInfo_ptr -> ip;
 8002ce2:	688b      	ldr	r3, [r1, #8]
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	e7c2      	b.n	8002c6e <send_udp_packet+0x1a>
        server_ip.nxd_ip_address.v6[1] = ctrlInfo_ptr -> ipv6[1];
 8002ce8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
        server_ip.nxd_ip_address.v6[3] = ctrlInfo_ptr -> ipv6[3];
 8002cec:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
        server_ip.nxd_ip_address.v6[1] = ctrlInfo_ptr -> ipv6[1];
 8002cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
        server_ip.nxd_ip_address.v6[3] = ctrlInfo_ptr -> ipv6[3];
 8002cf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002cf8:	e7b9      	b.n	8002c6e <send_udp_packet+0x1a>
        nx_packet_release(my_packet);
 8002cfa:	9800      	ldr	r0, [sp, #0]
 8002cfc:	f003 fe78 	bl	80069f0 <_nx_packet_release>
}           
 8002d00:	b006      	add	sp, #24
 8002d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d06:	bf00      	nop
 8002d08:	20004c54 	.word	0x20004c54
 8002d0c:	2000800c 	.word	0x2000800c
 8002d10:	51eb851f 	.word	0x51eb851f
 8002d14:	000f4240 	.word	0x000f4240
 8002d18:	20004bdc 	.word	0x20004bdc

08002d1c <thread_udp_rx_entry>:
    status = nx_udp_socket_create(_iperf_test_ip, &udp_server_socket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, 0x80, 5);
 8002d1c:	4a8a      	ldr	r2, [pc, #552]	; (8002f48 <thread_udp_rx_entry+0x22c>)
    ctrlInfo_ptr -> PacketsRxed = 0;
 8002d1e:	2300      	movs	r3, #0
    status = nx_udp_socket_create(_iperf_test_ip, &udp_server_socket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, 0x80, 5);
 8002d20:	2105      	movs	r1, #5
{
 8002d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d26:	4604      	mov	r4, r0
 8002d28:	b08f      	sub	sp, #60	; 0x3c
    status = nx_udp_socket_create(_iperf_test_ip, &udp_server_socket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, 0x80, 5);
 8002d2a:	6810      	ldr	r0, [r2, #0]
    thread_time = 0;
 8002d2c:	f04f 0800 	mov.w	r8, #0
 8002d30:	f04f 0900 	mov.w	r9, #0
    status = nx_udp_socket_create(_iperf_test_ip, &udp_server_socket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, 0x80, 5);
 8002d34:	2280      	movs	r2, #128	; 0x80
    thread_time = 0;
 8002d36:	4d85      	ldr	r5, [pc, #532]	; (8002f4c <thread_udp_rx_entry+0x230>)
    isr_time = 0 ;
 8002d38:	4e85      	ldr	r6, [pc, #532]	; (8002f50 <thread_udp_rx_entry+0x234>)
    idle_time = 0;
 8002d3a:	f8df a224 	ldr.w	sl, [pc, #548]	; 8002f60 <thread_udp_rx_entry+0x244>
    ctrlInfo_ptr -> PacketsRxed = 0;
 8002d3e:	63a3      	str	r3, [r4, #56]	; 0x38
    ctrlInfo_ptr -> BytesRxed = 0;
 8002d40:	6423      	str	r3, [r4, #64]	; 0x40
    ctrlInfo_ptr -> ThroughPut = 0;   
 8002d42:	6523      	str	r3, [r4, #80]	; 0x50
    ctrlInfo_ptr -> ErrorCode = 0;
 8002d44:	6263      	str	r3, [r4, #36]	; 0x24
    ctrlInfo_ptr -> RunTime = 0;    
 8002d46:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
    status = nx_udp_socket_create(_iperf_test_ip, &udp_server_socket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, 0x80, 5);
 8002d4a:	9102      	str	r1, [sp, #8]
 8002d4c:	9201      	str	r2, [sp, #4]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4a80      	ldr	r2, [pc, #512]	; (8002f54 <thread_udp_rx_entry+0x238>)
 8002d52:	4981      	ldr	r1, [pc, #516]	; (8002f58 <thread_udp_rx_entry+0x23c>)
    thread_time = 0;
 8002d54:	e9c5 8900 	strd	r8, r9, [r5]
    isr_time = 0 ;
 8002d58:	e9c6 8900 	strd	r8, r9, [r6]
    idle_time = 0;
 8002d5c:	e9ca 8900 	strd	r8, r9, [sl]
    status = nx_udp_socket_create(_iperf_test_ip, &udp_server_socket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, 0x80, 5);
 8002d60:	f005 ffa6 	bl	8008cb0 <_nx_udp_socket_create>
    if (status)
 8002d64:	b130      	cbz	r0, 8002d74 <thread_udp_rx_entry+0x58>
        error_counter++;
 8002d66:	4a7d      	ldr	r2, [pc, #500]	; (8002f5c <thread_udp_rx_entry+0x240>)
 8002d68:	6813      	ldr	r3, [r2, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	b00f      	add	sp, #60	; 0x3c
 8002d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = nx_udp_socket_bind(&udp_server_socket, UDP_RX_PORT, TX_WAIT_FOREVER);
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	f241 3189 	movw	r1, #5001	; 0x1389
 8002d7c:	4876      	ldr	r0, [pc, #472]	; (8002f58 <thread_udp_rx_entry+0x23c>)
 8002d7e:	f005 fee7 	bl	8008b50 <_nx_udp_socket_bind>
    if (status)
 8002d82:	2800      	cmp	r0, #0
 8002d84:	d1ef      	bne.n	8002d66 <thread_udp_rx_entry+0x4a>
    nx_udp_socket_checksum_disable(&udp_server_socket);
 8002d86:	4874      	ldr	r0, [pc, #464]	; (8002f58 <thread_udp_rx_entry+0x23c>)
 8002d88:	f005 ff82 	bl	8008c90 <_nx_udp_socket_checksum_disable>
    status = nx_udp_socket_receive(&udp_server_socket, &my_packet, TX_WAIT_FOREVER); 
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	a907      	add	r1, sp, #28
 8002d92:	4871      	ldr	r0, [pc, #452]	; (8002f58 <thread_udp_rx_entry+0x23c>)
 8002d94:	f005 fffe 	bl	8008d94 <_nx_udp_socket_receive>
    if (status)
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d1e4      	bne.n	8002d66 <thread_udp_rx_entry+0x4a>
    nxd_udp_source_extract(my_packet, &source_ip_address, &sender_port);
 8002d9c:	aa08      	add	r2, sp, #32
 8002d9e:	9807      	ldr	r0, [sp, #28]
 8002da0:	a909      	add	r1, sp, #36	; 0x24
 8002da2:	f00c f979 	bl	800f098 <_nxd_udp_source_extract>
    ctrlInfo_ptr -> version = source_ip_address.nxd_ip_version;
 8002da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 8002da8:	2b04      	cmp	r3, #4
    ctrlInfo_ptr -> version = source_ip_address.nxd_ip_version;
 8002daa:	6063      	str	r3, [r4, #4]
    if (ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 8002dac:	f000 8087 	beq.w	8002ebe <thread_udp_rx_entry+0x1a2>
    else if (ctrlInfo_ptr -> version == NX_IP_VERSION_V6)
 8002db0:	2b06      	cmp	r3, #6
 8002db2:	d107      	bne.n	8002dc4 <thread_udp_rx_entry+0xa8>
        ctrlInfo_ptr -> ipv6[1] = source_ip_address.nxd_ip_address.v6[1];
 8002db4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
        ctrlInfo_ptr -> ipv6[0] = source_ip_address.nxd_ip_address.v6[0];  
 8002db8:	60e2      	str	r2, [r4, #12]
        ctrlInfo_ptr -> ipv6[1] = source_ip_address.nxd_ip_address.v6[1];
 8002dba:	6123      	str	r3, [r4, #16]
        ctrlInfo_ptr -> ipv6[2] = source_ip_address.nxd_ip_address.v6[2];
 8002dbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        ctrlInfo_ptr -> ipv6[3] = source_ip_address.nxd_ip_address.v6[3];
 8002dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dc0:	e9c4 2305 	strd	r2, r3, [r4, #20]
    nx_packet_release(my_packet);
 8002dc4:	9807      	ldr	r0, [sp, #28]
 8002dc6:	f003 fe13 	bl	80069f0 <_nx_packet_release>
        status =  nx_udp_socket_receive(&udp_server_socket, &my_packet, TX_WAIT_FOREVER);
 8002dca:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8002f58 <thread_udp_rx_entry+0x23c>
    ctrlInfo_ptr -> StartTime = tx_time_get();
 8002dce:	f01a fbd9 	bl	801d584 <_tx_time_get>
    expire_time = ctrlInfo_ptr -> StartTime + (ctrlInfo_ptr -> TestTime) + 5;   /* Wait 5 more ticks to synchronize. */
 8002dd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ctrlInfo_ptr -> StartTime = tx_time_get();
 8002dd4:	6460      	str	r0, [r4, #68]	; 0x44
    expire_time = ctrlInfo_ptr -> StartTime + (ctrlInfo_ptr -> TestTime) + 5;   /* Wait 5 more ticks to synchronize. */
 8002dd6:	3305      	adds	r3, #5
 8002dd8:	181f      	adds	r7, r3, r0
    _tx_execution_thread_total_time_reset();
 8002dda:	f019 fda9 	bl	801c930 <_tx_execution_thread_total_time_reset>
    _tx_execution_isr_time_reset();
 8002dde:	f019 fdc9 	bl	801c974 <_tx_execution_isr_time_reset>
    _tx_execution_idle_time_reset();  
 8002de2:	f019 fdd3 	bl	801c98c <_tx_execution_idle_time_reset>
    while(CONDITION)
 8002de6:	e014      	b.n	8002e12 <thread_udp_rx_entry+0xf6>
        status =  nx_udp_socket_receive(&udp_server_socket, &my_packet, TX_WAIT_FOREVER);
 8002de8:	f005 ffd4 	bl	8008d94 <_nx_udp_socket_receive>
        if (status != NX_SUCCESS)
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d169      	bne.n	8002ec4 <thread_udp_rx_entry+0x1a8>
        ctrlInfo_ptr -> BytesRxed += my_packet -> nx_packet_length;
 8002df0:	9907      	ldr	r1, [sp, #28]
        ctrlInfo_ptr -> PacketsRxed++;
 8002df2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        ctrlInfo_ptr -> BytesRxed += my_packet -> nx_packet_length;
 8002df4:	6c22      	ldr	r2, [r4, #64]	; 0x40
            nx_packet_release(my_packet);
 8002df6:	4608      	mov	r0, r1
        ctrlInfo_ptr -> PacketsRxed++;
 8002df8:	9304      	str	r3, [sp, #16]
        ctrlInfo_ptr -> BytesRxed += my_packet -> nx_packet_length;
 8002dfa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
        packetID = *(int*)(my_packet -> nx_packet_prepend_ptr);
 8002dfc:	6889      	ldr	r1, [r1, #8]
        ctrlInfo_ptr -> BytesRxed += my_packet -> nx_packet_length;
 8002dfe:	441a      	add	r2, r3
        ctrlInfo_ptr -> PacketsRxed++;
 8002e00:	9b04      	ldr	r3, [sp, #16]
 8002e02:	3301      	adds	r3, #1
        ctrlInfo_ptr -> BytesRxed += my_packet -> nx_packet_length;
 8002e04:	6422      	str	r2, [r4, #64]	; 0x40
        ctrlInfo_ptr -> PacketsRxed++;
 8002e06:	63a3      	str	r3, [r4, #56]	; 0x38
        tmp = (ULONG)packetID;
 8002e08:	680b      	ldr	r3, [r1, #0]
        if(packetID < 0)
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	d45f      	bmi.n	8002ece <thread_udp_rx_entry+0x1b2>
            nx_packet_release(my_packet);
 8002e0e:	f003 fdef 	bl	80069f0 <_nx_packet_release>
    while(CONDITION)
 8002e12:	f01a fbb7 	bl	801d584 <_tx_time_get>
 8002e16:	42b8      	cmp	r0, r7
        status =  nx_udp_socket_receive(&udp_server_socket, &my_packet, TX_WAIT_FOREVER);
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	a907      	add	r1, sp, #28
 8002e1e:	4640      	mov	r0, r8
    while(CONDITION)
 8002e20:	d3e2      	bcc.n	8002de8 <thread_udp_rx_entry+0xcc>
 8002e22:	4f4e      	ldr	r7, [pc, #312]	; (8002f5c <thread_udp_rx_entry+0x240>)
        _tx_execution_thread_total_time_get(&thread_time);
 8002e24:	4849      	ldr	r0, [pc, #292]	; (8002f4c <thread_udp_rx_entry+0x230>)
 8002e26:	f019 fdbd 	bl	801c9a4 <_tx_execution_thread_total_time_get>
        _tx_execution_isr_time_get(&isr_time);
 8002e2a:	4849      	ldr	r0, [pc, #292]	; (8002f50 <thread_udp_rx_entry+0x234>)
 8002e2c:	f019 fdc4 	bl	801c9b8 <_tx_execution_isr_time_get>
        _tx_execution_idle_time_get(&idle_time);
 8002e30:	484b      	ldr	r0, [pc, #300]	; (8002f60 <thread_udp_rx_entry+0x244>)
 8002e32:	f019 fdcb 	bl	801c9cc <_tx_execution_idle_time_get>
        ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002e36:	f01a fba5 	bl	801d584 <_tx_time_get>
        ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002e3a:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
        ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002e3e:	1ac0      	subs	r0, r0, r3
        ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002e40:	2364      	movs	r3, #100	; 0x64
 8002e42:	fbb2 f2f0 	udiv	r2, r2, r0
 8002e46:	fb03 f302 	mul.w	r3, r3, r2
 8002e4a:	4a46      	ldr	r2, [pc, #280]	; (8002f64 <thread_udp_rx_entry+0x248>)
        ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002e4c:	64a0      	str	r0, [r4, #72]	; 0x48
        ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0bdb      	lsrs	r3, r3, #15
 8002e54:	6523      	str	r3, [r4, #80]	; 0x50
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 8002e56:	e9da 2300 	ldrd	r2, r3, [sl]
 8002e5a:	1890      	adds	r0, r2, r2
 8002e5c:	eb43 0103 	adc.w	r1, r3, r3
 8002e60:	eb10 0a02 	adds.w	sl, r0, r2
 8002e64:	eb41 0b03 	adc.w	fp, r1, r3
 8002e68:	ea4f 184a 	mov.w	r8, sl, lsl #5
 8002e6c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e74:	ea4f 194b 	mov.w	r9, fp, lsl #5
 8002e78:	eb10 0008 	adds.w	r0, r0, r8
 8002e7c:	ea49 69da 	orr.w	r9, r9, sl, lsr #27
 8002e80:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8002e84:	eb41 0109 	adc.w	r1, r1, r9
 8002e88:	eb1a 0802 	adds.w	r8, sl, r2
 8002e8c:	e9d6 5600 	ldrd	r5, r6, [r6]
 8002e90:	eb4b 0903 	adc.w	r9, fp, r3
 8002e94:	1880      	adds	r0, r0, r2
 8002e96:	4159      	adcs	r1, r3
 8002e98:	eb15 0208 	adds.w	r2, r5, r8
 8002e9c:	eb46 0309 	adc.w	r3, r6, r9
 8002ea0:	f7fd fb4e 	bl	8000540 <__aeabi_uldivmod>
 8002ea4:	6620      	str	r0, [r4, #96]	; 0x60
    nx_udp_socket_unbind(&udp_server_socket);
 8002ea6:	482c      	ldr	r0, [pc, #176]	; (8002f58 <thread_udp_rx_entry+0x23c>)
 8002ea8:	f006 f854 	bl	8008f54 <_nx_udp_socket_unbind>
    nx_udp_socket_delete(&udp_server_socket);
 8002eac:	482a      	ldr	r0, [pc, #168]	; (8002f58 <thread_udp_rx_entry+0x23c>)
 8002eae:	f005 ff3f 	bl	8008d30 <_nx_udp_socket_delete>
    if(error_counter)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f43f af5a 	beq.w	8002d6e <thread_udp_rx_entry+0x52>
        ctrlInfo_ptr -> ErrorCode = error_counter;
 8002eba:	6263      	str	r3, [r4, #36]	; 0x24
 8002ebc:	e757      	b.n	8002d6e <thread_udp_rx_entry+0x52>
        ctrlInfo_ptr -> ip = source_ip_address.nxd_ip_address.v4;   
 8002ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ec0:	60a3      	str	r3, [r4, #8]
 8002ec2:	e77f      	b.n	8002dc4 <thread_udp_rx_entry+0xa8>
          error_counter++;  
 8002ec4:	4f25      	ldr	r7, [pc, #148]	; (8002f5c <thread_udp_rx_entry+0x240>)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	603b      	str	r3, [r7, #0]
          break;
 8002ecc:	e7aa      	b.n	8002e24 <thread_udp_rx_entry+0x108>
            _tx_execution_thread_total_time_get(&thread_time);
 8002ece:	481f      	ldr	r0, [pc, #124]	; (8002f4c <thread_udp_rx_entry+0x230>)
            ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002ed0:	2764      	movs	r7, #100	; 0x64
            _tx_execution_thread_total_time_get(&thread_time);
 8002ed2:	f019 fd67 	bl	801c9a4 <_tx_execution_thread_total_time_get>
            _tx_execution_isr_time_get(&isr_time);
 8002ed6:	481e      	ldr	r0, [pc, #120]	; (8002f50 <thread_udp_rx_entry+0x234>)
 8002ed8:	f019 fd6e 	bl	801c9b8 <_tx_execution_isr_time_get>
            _tx_execution_idle_time_get(&idle_time);
 8002edc:	4820      	ldr	r0, [pc, #128]	; (8002f60 <thread_udp_rx_entry+0x244>)
 8002ede:	f019 fd75 	bl	801c9cc <_tx_execution_idle_time_get>
            ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002ee2:	f01a fb4f 	bl	801d584 <_tx_time_get>
            ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002ee6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8002f64 <thread_udp_rx_entry+0x248>
            status = nxd_udp_socket_send(&udp_server_socket, my_packet, &source_ip_address, sender_port);
 8002eea:	9907      	ldr	r1, [sp, #28]
            ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002eec:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
            ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002ef0:	1ac0      	subs	r0, r0, r3
            status = nxd_udp_socket_send(&udp_server_socket, my_packet, &source_ip_address, sender_port);
 8002ef2:	9b08      	ldr	r3, [sp, #32]
            ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002ef4:	fbb2 f2f0 	udiv	r2, r2, r0
 8002ef8:	fb07 f702 	mul.w	r7, r7, r2
            status = nxd_udp_socket_send(&udp_server_socket, my_packet, &source_ip_address, sender_port);
 8002efc:	aa09      	add	r2, sp, #36	; 0x24
            ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8002efe:	64a0      	str	r0, [r4, #72]	; 0x48
            ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002f00:	fbac 0707 	umull	r0, r7, ip, r7
            status = nxd_udp_socket_send(&udp_server_socket, my_packet, &source_ip_address, sender_port);
 8002f04:	4814      	ldr	r0, [pc, #80]	; (8002f58 <thread_udp_rx_entry+0x23c>)
            ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesRxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8002f06:	0bff      	lsrs	r7, r7, #15
 8002f08:	6527      	str	r7, [r4, #80]	; 0x50
            status = nxd_udp_socket_send(&udp_server_socket, my_packet, &source_ip_address, sender_port);
 8002f0a:	f00b fff1 	bl	800eef0 <_nxd_udp_socket_send>
            if(status)
 8002f0e:	b9a8      	cbnz	r0, 8002f3c <thread_udp_rx_entry+0x220>
                    status =  nx_udp_socket_receive(&udp_server_socket, &my_packet, 20);  
 8002f10:	4f11      	ldr	r7, [pc, #68]	; (8002f58 <thread_udp_rx_entry+0x23c>)
 8002f12:	e005      	b.n	8002f20 <thread_udp_rx_entry+0x204>
                    status = nxd_udp_socket_send(&udp_server_socket, my_packet, &source_ip_address, sender_port);
 8002f14:	9b08      	ldr	r3, [sp, #32]
 8002f16:	4638      	mov	r0, r7
 8002f18:	9907      	ldr	r1, [sp, #28]
 8002f1a:	f00b ffe9 	bl	800eef0 <_nxd_udp_socket_send>
                    if(status)
 8002f1e:	b948      	cbnz	r0, 8002f34 <thread_udp_rx_entry+0x218>
                    status =  nx_udp_socket_receive(&udp_server_socket, &my_packet, 20);  
 8002f20:	2214      	movs	r2, #20
 8002f22:	a907      	add	r1, sp, #28
 8002f24:	4638      	mov	r0, r7
 8002f26:	f005 ff35 	bl	8008d94 <_nx_udp_socket_receive>
                    status = nxd_udp_socket_send(&udp_server_socket, my_packet, &source_ip_address, sender_port);
 8002f2a:	aa09      	add	r2, sp, #36	; 0x24
                    if(status)
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d0f1      	beq.n	8002f14 <thread_udp_rx_entry+0x1f8>
 8002f30:	4f0a      	ldr	r7, [pc, #40]	; (8002f5c <thread_udp_rx_entry+0x240>)
 8002f32:	e790      	b.n	8002e56 <thread_udp_rx_entry+0x13a>
                        nx_packet_release(my_packet);
 8002f34:	9807      	ldr	r0, [sp, #28]
 8002f36:	f003 fd5b 	bl	80069f0 <_nx_packet_release>
 8002f3a:	e7f1      	b.n	8002f20 <thread_udp_rx_entry+0x204>
                nx_packet_release(my_packet);
 8002f3c:	9807      	ldr	r0, [sp, #28]
 8002f3e:	f003 fd57 	bl	80069f0 <_nx_packet_release>
 8002f42:	4f06      	ldr	r7, [pc, #24]	; (8002f5c <thread_udp_rx_entry+0x240>)
 8002f44:	e787      	b.n	8002e56 <thread_udp_rx_entry+0x13a>
 8002f46:	bf00      	nop
 8002f48:	20004b68 	.word	0x20004b68
 8002f4c:	20001858 	.word	0x20001858
 8002f50:	20001628 	.word	0x20001628
 8002f54:	08025520 	.word	0x08025520
 8002f58:	20004c58 	.word	0x20004c58
 8002f5c:	20001604 	.word	0x20001604
 8002f60:	20001608 	.word	0x20001608
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <thread_udp_tx_entry>:

void  thread_udp_tx_entry(ULONG thread_input)
{
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    thread_time = 0;
    isr_time = 0 ;
    idle_time = 0;
#endif    
#ifdef IPERF_TEST
    ctrlInfo_ptr -> PacketsTxed = 0;
 8002f6c:	2500      	movs	r5, #0
{
 8002f6e:	4604      	mov	r4, r0
    thread_time = 0;
 8002f70:	2200      	movs	r2, #0
 8002f72:	2300      	movs	r3, #0
 8002f74:	4f5b      	ldr	r7, [pc, #364]	; (80030e4 <thread_udp_tx_entry+0x17c>)
{
 8002f76:	b089      	sub	sp, #36	; 0x24
    isr_time = 0 ;
 8002f78:	4e5b      	ldr	r6, [pc, #364]	; (80030e8 <thread_udp_tx_entry+0x180>)
    ctrlInfo_ptr -> RunTime = 0;    
    ctrlInfo_ptr -> ErrorCode = 0;
#endif
                                          
    /* UDP Transmit Test Starts in 2 seconds.  */
    tx_thread_sleep(200);
 8002f7a:	20c8      	movs	r0, #200	; 0xc8
    idle_time = 0;
 8002f7c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80030fc <thread_udp_tx_entry+0x194>
    ctrlInfo_ptr -> PacketsTxed = 0;
 8002f80:	6365      	str	r5, [r4, #52]	; 0x34
    ctrlInfo_ptr -> BytesTxed = 0;
 8002f82:	63e5      	str	r5, [r4, #60]	; 0x3c
    ctrlInfo_ptr -> ThroughPut = 0;     
 8002f84:	6525      	str	r5, [r4, #80]	; 0x50
    ctrlInfo_ptr -> ErrorCode = 0;
 8002f86:	6265      	str	r5, [r4, #36]	; 0x24
    ctrlInfo_ptr -> RunTime = 0;    
 8002f88:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    thread_time = 0;
 8002f8c:	e9c7 2300 	strd	r2, r3, [r7]
    isr_time = 0 ;
 8002f90:	e9c6 2300 	strd	r2, r3, [r6]
    idle_time = 0;
 8002f94:	e9c8 2300 	strd	r2, r3, [r8]
    tx_thread_sleep(200);
 8002f98:	f01a f936 	bl	801d208 <_tx_thread_sleep>
    
    /* Create a UDP socket.  */
    status = nx_udp_socket_create(_iperf_test_ip, &udp_client_socket, "UDP Client Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, 0x80, 5);
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <thread_udp_tx_entry+0x184>)
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	9500      	str	r5, [sp, #0]
 8002fa8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002fac:	4a50      	ldr	r2, [pc, #320]	; (80030f0 <thread_udp_tx_entry+0x188>)
 8002fae:	4951      	ldr	r1, [pc, #324]	; (80030f4 <thread_udp_tx_entry+0x18c>)
 8002fb0:	f005 fe7e 	bl	8008cb0 <_nx_udp_socket_create>

    /* Check status.  */
    if (status)
 8002fb4:	b130      	cbz	r0, 8002fc4 <thread_udp_tx_entry+0x5c>
    status =  nx_udp_socket_bind(&udp_client_socket, UDP_TX_PORT, TX_WAIT_FOREVER);

    /* Check status.  */
    if (status)
    {
        error_counter++;
 8002fb6:	4a50      	ldr	r2, [pc, #320]	; (80030f8 <thread_udp_tx_entry+0x190>)
 8002fb8:	6813      	ldr	r3, [r2, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	6013      	str	r3, [r2, #0]
    }
    
    /* Unbind and Delete the socket.  */
    nx_udp_socket_unbind(&udp_client_socket);
    nx_udp_socket_delete(&udp_client_socket);
}
 8002fbe:	b009      	add	sp, #36	; 0x24
 8002fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status =  nx_udp_socket_bind(&udp_client_socket, UDP_TX_PORT, TX_WAIT_FOREVER);
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	2151      	movs	r1, #81	; 0x51
 8002fca:	484a      	ldr	r0, [pc, #296]	; (80030f4 <thread_udp_tx_entry+0x18c>)
 8002fcc:	f005 fdc0 	bl	8008b50 <_nx_udp_socket_bind>
    if (status)
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d1ef      	bne.n	8002fb6 <thread_udp_tx_entry+0x4e>
    nx_udp_socket_checksum_disable(&udp_client_socket);
 8002fd6:	4847      	ldr	r0, [pc, #284]	; (80030f4 <thread_udp_tx_entry+0x18c>)
 8002fd8:	f005 fe5a 	bl	8008c90 <_nx_udp_socket_checksum_disable>
    ctrlInfo_ptr -> StartTime = tx_time_get();  
 8002fdc:	f01a fad2 	bl	801d584 <_tx_time_get>
    expire_time = ctrlInfo_ptr -> StartTime + (ctrlInfo_ptr -> TestTime);
 8002fe0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ctrlInfo_ptr -> StartTime = tx_time_get();  
 8002fe2:	6460      	str	r0, [r4, #68]	; 0x44
    expire_time = ctrlInfo_ptr -> StartTime + (ctrlInfo_ptr -> TestTime);
 8002fe4:	eb00 0903 	add.w	r9, r0, r3
    _tx_execution_thread_total_time_reset();
 8002fe8:	f019 fca2 	bl	801c930 <_tx_execution_thread_total_time_reset>
    _tx_execution_isr_time_reset();
 8002fec:	f019 fcc2 	bl	801c974 <_tx_execution_isr_time_reset>
    _tx_execution_idle_time_reset();  
 8002ff0:	f019 fccc 	bl	801c98c <_tx_execution_idle_time_reset>
    while(CONDITION)
 8002ff4:	e009      	b.n	800300a <thread_udp_tx_entry+0xa2>
        send_udp_packet(udp_id, ctrlInfo_ptr);
 8002ff6:	f7ff fe2d 	bl	8002c54 <send_udp_packet>
        ctrlInfo_ptr -> PacketsTxed++;   
 8002ffa:	6b62      	ldr	r2, [r4, #52]	; 0x34
        ctrlInfo_ptr -> BytesTxed += ctrlInfo_ptr -> PacketSize;      
 8002ffc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        udp_id = (udp_id + 1) & 0x7FFFFFFF; 
 8002ffe:	3501      	adds	r5, #1
        ctrlInfo_ptr -> BytesTxed += ctrlInfo_ptr -> PacketSize;      
 8003000:	6d61      	ldr	r1, [r4, #84]	; 0x54
        ctrlInfo_ptr -> PacketsTxed++;   
 8003002:	3201      	adds	r2, #1
        ctrlInfo_ptr -> BytesTxed += ctrlInfo_ptr -> PacketSize;      
 8003004:	440b      	add	r3, r1
        ctrlInfo_ptr -> PacketsTxed++;   
 8003006:	6362      	str	r2, [r4, #52]	; 0x34
        ctrlInfo_ptr -> BytesTxed += ctrlInfo_ptr -> PacketSize;      
 8003008:	63e3      	str	r3, [r4, #60]	; 0x3c
    while(CONDITION)
 800300a:	f01a fabb 	bl	801d584 <_tx_time_get>
 800300e:	4548      	cmp	r0, r9
        send_udp_packet(udp_id, ctrlInfo_ptr);
 8003010:	4621      	mov	r1, r4
 8003012:	4628      	mov	r0, r5
    while(CONDITION)
 8003014:	d3ef      	bcc.n	8002ff6 <thread_udp_tx_entry+0x8e>
    _tx_execution_thread_total_time_get(&thread_time);
 8003016:	4833      	ldr	r0, [pc, #204]	; (80030e4 <thread_udp_tx_entry+0x17c>)
 8003018:	f019 fcc4 	bl	801c9a4 <_tx_execution_thread_total_time_get>
    _tx_execution_isr_time_get(&isr_time);
 800301c:	4832      	ldr	r0, [pc, #200]	; (80030e8 <thread_udp_tx_entry+0x180>)
 800301e:	f019 fccb 	bl	801c9b8 <_tx_execution_isr_time_get>
    _tx_execution_idle_time_get(&idle_time);
 8003022:	4836      	ldr	r0, [pc, #216]	; (80030fc <thread_udp_tx_entry+0x194>)
 8003024:	f019 fcd2 	bl	801c9cc <_tx_execution_idle_time_get>
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8003028:	f01a faac 	bl	801d584 <_tx_time_get>
 800302c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 800302e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003030:	f04f 0e64 	mov.w	lr, #100	; 0x64
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8003034:	1ac0      	subs	r0, r0, r3
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 8003036:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8003100 <thread_udp_tx_entry+0x198>
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 800303a:	e9d8 2300 	ldrd	r2, r3, [r8]
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 800303e:	fbb1 f8f0 	udiv	r8, r1, r0
    ctrlInfo_ptr -> RunTime = tx_time_get() - ctrlInfo_ptr -> StartTime;
 8003042:	64a0      	str	r0, [r4, #72]	; 0x48
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 8003044:	1890      	adds	r0, r2, r2
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 8003046:	fb0e fe08 	mul.w	lr, lr, r8
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 800304a:	eb43 0103 	adc.w	r1, r3, r3
 800304e:	eb10 0802 	adds.w	r8, r0, r2
 8003052:	eb41 0903 	adc.w	r9, r1, r3
 8003056:	ea4f 1a48 	mov.w	sl, r8, lsl #5
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 800305a:	fbac 1c0e 	umull	r1, ip, ip, lr
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 800305e:	ea4f 1b49 	mov.w	fp, r9, lsl #5
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 8003062:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 8003066:	ea4b 6bd8 	orr.w	fp, fp, r8, lsr #27
    ctrlInfo_ptr -> ThroughPut = ctrlInfo_ptr -> BytesTxed / ctrlInfo_ptr -> RunTime * NX_IP_PERIODIC_RATE / 125000;
 800306a:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 800306e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003076:	e9d7 8900 	ldrd	r8, r9, [r7]
 800307a:	eb10 000a 	adds.w	r0, r0, sl
 800307e:	eb41 010b 	adc.w	r1, r1, fp
 8003082:	eb18 0a02 	adds.w	sl, r8, r2
 8003086:	e9d6 6700 	ldrd	r6, r7, [r6]
 800308a:	eb49 0b03 	adc.w	fp, r9, r3
 800308e:	1880      	adds	r0, r0, r2
 8003090:	4159      	adcs	r1, r3
 8003092:	eb16 020a 	adds.w	r2, r6, sl
 8003096:	eb47 030b 	adc.w	r3, r7, fp
 800309a:	f7fd fa51 	bl	8000540 <__aeabi_uldivmod>
    if(error_counter)
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <thread_udp_tx_entry+0x190>)
    ctrlInfo_ptr -> idleTime = (ULONG)((unsigned long long)idle_time * 100 / ((unsigned long long)thread_time + (unsigned long long)isr_time + (unsigned long long)idle_time));
 80030a0:	6620      	str	r0, [r4, #96]	; 0x60
    if(error_counter)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b103      	cbz	r3, 80030a8 <thread_udp_tx_entry+0x140>
        ctrlInfo_ptr -> ErrorCode = error_counter;
 80030a6:	6263      	str	r3, [r4, #36]	; 0x24
    ctrlInfo_ptr -> PacketSize = 100;
 80030a8:	2364      	movs	r3, #100	; 0x64
 80030aa:	426d      	negs	r5, r5
 80030ac:	260a      	movs	r6, #10
        if(nx_udp_socket_receive(&udp_client_socket, &my_packet, 10) == NX_SUCCESS)
 80030ae:	4f11      	ldr	r7, [pc, #68]	; (80030f4 <thread_udp_tx_entry+0x18c>)
    ctrlInfo_ptr -> PacketSize = 100;
 80030b0:	6563      	str	r3, [r4, #84]	; 0x54
        send_udp_packet((0 - udp_id), ctrlInfo_ptr);
 80030b2:	4621      	mov	r1, r4
 80030b4:	4628      	mov	r0, r5
 80030b6:	f7ff fdcd 	bl	8002c54 <send_udp_packet>
        if(nx_udp_socket_receive(&udp_client_socket, &my_packet, 10) == NX_SUCCESS)
 80030ba:	220a      	movs	r2, #10
 80030bc:	a907      	add	r1, sp, #28
 80030be:	4638      	mov	r0, r7
 80030c0:	f005 fe68 	bl	8008d94 <_nx_udp_socket_receive>
 80030c4:	b150      	cbz	r0, 80030dc <thread_udp_tx_entry+0x174>
    for(i = 0; i < 10; i++)
 80030c6:	3e01      	subs	r6, #1
 80030c8:	d1f3      	bne.n	80030b2 <thread_udp_tx_entry+0x14a>
    nx_udp_socket_unbind(&udp_client_socket);
 80030ca:	480a      	ldr	r0, [pc, #40]	; (80030f4 <thread_udp_tx_entry+0x18c>)
 80030cc:	f005 ff42 	bl	8008f54 <_nx_udp_socket_unbind>
    nx_udp_socket_delete(&udp_client_socket);
 80030d0:	4808      	ldr	r0, [pc, #32]	; (80030f4 <thread_udp_tx_entry+0x18c>)
 80030d2:	f005 fe2d 	bl	8008d30 <_nx_udp_socket_delete>
}
 80030d6:	b009      	add	sp, #36	; 0x24
 80030d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            nx_packet_release(my_packet);
 80030dc:	9807      	ldr	r0, [sp, #28]
 80030de:	f003 fc87 	bl	80069f0 <_nx_packet_release>
            break;
 80030e2:	e7f2      	b.n	80030ca <thread_udp_tx_entry+0x162>
 80030e4:	20001858 	.word	0x20001858
 80030e8:	20001628 	.word	0x20001628
 80030ec:	20004b68 	.word	0x20004b68
 80030f0:	08025534 	.word	0x08025534
 80030f4:	20004bdc 	.word	0x20004bdc
 80030f8:	20001604 	.word	0x20001604
 80030fc:	20001608 	.word	0x20001608
 8003100:	431bde83 	.word	0x431bde83

08003104 <nx_iperf_entry>:
{            
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	4604      	mov	r4, r0
 8003108:	b086      	sub	sp, #24
 800310a:	460d      	mov	r5, r1
    status =  nx_http_server_create(&my_server, "My HTTP Server", ip_ptr, &ram_disk, http_stack, http_stack_size, pool_ptr, my_authentication_check, my_get_notify);
 800310c:	4812      	ldr	r0, [pc, #72]	; (8003158 <nx_iperf_entry+0x54>)
 800310e:	4913      	ldr	r1, [pc, #76]	; (800315c <nx_iperf_entry+0x58>)
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	462a      	mov	r2, r5
 8003114:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8003118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800311c:	4910      	ldr	r1, [pc, #64]	; (8003160 <nx_iperf_entry+0x5c>)
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <nx_iperf_entry+0x60>)
 8003120:	4811      	ldr	r0, [pc, #68]	; (8003168 <nx_iperf_entry+0x64>)
 8003122:	f007 fe57 	bl	800add4 <_nx_http_server_create>
    if (status)                        
 8003126:	b128      	cbz	r0, 8003134 <nx_iperf_entry+0x30>
        _iperf_test_error_counter++;
 8003128:	4a10      	ldr	r2, [pc, #64]	; (800316c <nx_iperf_entry+0x68>)
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	6013      	str	r3, [r2, #0]
}         
 8003130:	b006      	add	sp, #24
 8003132:	bd70      	pop	{r4, r5, r6, pc}
    _iperf_stack_area = iperf_stack;
 8003134:	480e      	ldr	r0, [pc, #56]	; (8003170 <nx_iperf_entry+0x6c>)
 8003136:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    _iperf_stack_area_size = iperf_stack_size;
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <nx_iperf_entry+0x70>)
    _iperf_stack_area = iperf_stack;
 800313a:	6006      	str	r6, [r0, #0]
    _iperf_test_ip = ip_ptr;
 800313c:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <nx_iperf_entry+0x74>)
    _iperf_test_pool = pool_ptr;
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <nx_iperf_entry+0x78>)
    _iperf_stack_area_size = iperf_stack_size;
 8003140:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    status =  nx_http_server_start(&my_server);
 8003142:	4809      	ldr	r0, [pc, #36]	; (8003168 <nx_iperf_entry+0x64>)
    _iperf_stack_area_size = iperf_stack_size;
 8003144:	600e      	str	r6, [r1, #0]
    _iperf_test_ip = ip_ptr;
 8003146:	6015      	str	r5, [r2, #0]
    _iperf_test_pool = pool_ptr;
 8003148:	601c      	str	r4, [r3, #0]
    status =  nx_http_server_start(&my_server);
 800314a:	f007 ff21 	bl	800af90 <_nx_http_server_start>
    if (status)
 800314e:	2800      	cmp	r0, #0
 8003150:	d1ea      	bne.n	8003128 <nx_iperf_entry+0x24>
}         
 8003152:	b006      	add	sp, #24
 8003154:	bd70      	pop	{r4, r5, r6, pc}
 8003156:	bf00      	nop
 8003158:	0800472d 	.word	0x0800472d
 800315c:	08002779 	.word	0x08002779
 8003160:	0802173c 	.word	0x0802173c
 8003164:	20004e10 	.word	0x20004e10
 8003168:	200072c8 	.word	0x200072c8
 800316c:	20004bd0 	.word	0x20004bd0
 8003170:	20007754 	.word	0x20007754
 8003174:	20004b60 	.word	0x20004b60
 8003178:	20004b68 	.word	0x20004b68
 800317c:	20004c54 	.word	0x20004c54

08003180 <get_ip_addr_string>:
{
 8003180:	b084      	sub	sp, #16
 8003182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(device_ip_addr_string, 0, sizeof(device_ip_addr_string));
 8003186:	4c3a      	ldr	r4, [pc, #232]	; (8003270 <get_ip_addr_string+0xf0>)
{
 8003188:	ad08      	add	r5, sp, #32
 800318a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800318c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    memset(device_ip_addr_string, 0, sizeof(device_ip_addr_string));
 8003190:	4620      	mov	r0, r4
 8003192:	2228      	movs	r2, #40	; 0x28
 8003194:	2100      	movs	r1, #0
 8003196:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800319a:	e9dd 5909 	ldrd	r5, r9, [sp, #36]	; 0x24
 800319e:	f01b f9fc 	bl	801e59a <memset>
    if(ip.nxd_ip_version == NX_IP_VERSION_V6) 
 80031a2:	9b08      	ldr	r3, [sp, #32]
 80031a4:	0c2f      	lsrs	r7, r5, #16
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d02b      	beq.n	8003202 <get_ip_addr_string+0x82>
        _nx_http_server_number_convert(ip.nxd_ip_address.v4 >> 24, device_ip_addr_string);
 80031aa:	4621      	mov	r1, r4
        device_ip_addr_string[strlen(device_ip_addr_string)] = '.';
 80031ac:	262e      	movs	r6, #46	; 0x2e
        _nx_http_server_number_convert(ip.nxd_ip_address.v4 >> 24, device_ip_addr_string);
 80031ae:	0e28      	lsrs	r0, r5, #24
 80031b0:	f008 f886 	bl	800b2c0 <_nx_http_server_number_convert>
        device_ip_addr_string[strlen(device_ip_addr_string)] = '.';
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7fd f969 	bl	800048c <strlen>
 80031ba:	5426      	strb	r6, [r4, r0]
        _nx_http_server_number_convert(((ip.nxd_ip_address.v4 >> 16) & 0xFF), &device_ip_addr_string[strlen(device_ip_addr_string)]);
 80031bc:	4620      	mov	r0, r4
 80031be:	f7fd f965 	bl	800048c <strlen>
 80031c2:	1821      	adds	r1, r4, r0
 80031c4:	b2f8      	uxtb	r0, r7
 80031c6:	f008 f87b 	bl	800b2c0 <_nx_http_server_number_convert>
        device_ip_addr_string[strlen(device_ip_addr_string)] = '.';
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7fd f95e 	bl	800048c <strlen>
 80031d0:	5426      	strb	r6, [r4, r0]
        _nx_http_server_number_convert(((ip.nxd_ip_address.v4 >> 8) & 0xFF), &device_ip_addr_string[strlen(device_ip_addr_string)]);
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7fd f95a 	bl	800048c <strlen>
 80031d8:	1821      	adds	r1, r4, r0
 80031da:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80031de:	f008 f86f 	bl	800b2c0 <_nx_http_server_number_convert>
        device_ip_addr_string[strlen(device_ip_addr_string)] = '.';
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7fd f952 	bl	800048c <strlen>
 80031e8:	5426      	strb	r6, [r4, r0]
        _nx_http_server_number_convert((ip.nxd_ip_address.v4 & 0xFF), &device_ip_addr_string[strlen(device_ip_addr_string)]);
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7fd f94e 	bl	800048c <strlen>
 80031f0:	1821      	adds	r1, r4, r0
 80031f2:	b2e8      	uxtb	r0, r5
 80031f4:	f008 f864 	bl	800b2c0 <_nx_http_server_number_convert>
}
 80031f8:	481d      	ldr	r0, [pc, #116]	; (8003270 <get_ip_addr_string+0xf0>)
 80031fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031fe:	b004      	add	sp, #16
 8003200:	4770      	bx	lr
        sprintf(device_ip_addr_string, "%0x:%0x", (UINT)ip.nxd_ip_address.v6[0] >> 16, (UINT)ip.nxd_ip_address.v6[0] & 0xFFFF);
 8003202:	b2ab      	uxth	r3, r5
 8003204:	463a      	mov	r2, r7
 8003206:	491b      	ldr	r1, [pc, #108]	; (8003274 <get_ip_addr_string+0xf4>)
        device_ip_addr_string[strlen(device_ip_addr_string)] = ':';
 8003208:	253a      	movs	r5, #58	; 0x3a
        sprintf(device_ip_addr_string, "%0x:%0x", (UINT)ip.nxd_ip_address.v6[0] >> 16, (UINT)ip.nxd_ip_address.v6[0] & 0xFFFF);
 800320a:	4620      	mov	r0, r4
 800320c:	f01b fa7e 	bl	801e70c <siprintf>
        device_ip_addr_string[strlen(device_ip_addr_string)] = ':';
 8003210:	4620      	mov	r0, r4
 8003212:	f7fd f93b 	bl	800048c <strlen>
 8003216:	5425      	strb	r5, [r4, r0]
        sprintf(&device_ip_addr_string[strlen(device_ip_addr_string)], "%0x:%0x", (UINT)ip.nxd_ip_address.v6[1] >> 16, (UINT)ip.nxd_ip_address.v6[1] & 0xFFFF);
 8003218:	4620      	mov	r0, r4
 800321a:	f7fd f937 	bl	800048c <strlen>
 800321e:	4915      	ldr	r1, [pc, #84]	; (8003274 <get_ip_addr_string+0xf4>)
 8003220:	fa1f f389 	uxth.w	r3, r9
 8003224:	4420      	add	r0, r4
 8003226:	ea4f 4219 	mov.w	r2, r9, lsr #16
 800322a:	f01b fa6f 	bl	801e70c <siprintf>
        device_ip_addr_string[strlen(device_ip_addr_string)] = ':';
 800322e:	4620      	mov	r0, r4
 8003230:	f7fd f92c 	bl	800048c <strlen>
 8003234:	5425      	strb	r5, [r4, r0]
        sprintf(&device_ip_addr_string[strlen(device_ip_addr_string)], "%0x:%0x", (UINT)ip.nxd_ip_address.v6[2] >> 16, (UINT)ip.nxd_ip_address.v6[2] & 0xFFFF);
 8003236:	4620      	mov	r0, r4
 8003238:	f7fd f928 	bl	800048c <strlen>
 800323c:	490d      	ldr	r1, [pc, #52]	; (8003274 <get_ip_addr_string+0xf4>)
 800323e:	fa1f f388 	uxth.w	r3, r8
 8003242:	4420      	add	r0, r4
 8003244:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8003248:	f01b fa60 	bl	801e70c <siprintf>
        device_ip_addr_string[strlen(device_ip_addr_string)] = ':';
 800324c:	4620      	mov	r0, r4
 800324e:	f7fd f91d 	bl	800048c <strlen>
 8003252:	5425      	strb	r5, [r4, r0]
        sprintf(&device_ip_addr_string[strlen(device_ip_addr_string)], "%0x:%0x", (UINT)ip.nxd_ip_address.v6[3] >> 16, (UINT)ip.nxd_ip_address.v6[3] & 0xFFFF);   
 8003254:	4620      	mov	r0, r4
 8003256:	f7fd f919 	bl	800048c <strlen>
 800325a:	4906      	ldr	r1, [pc, #24]	; (8003274 <get_ip_addr_string+0xf4>)
 800325c:	4420      	add	r0, r4
 800325e:	b2b3      	uxth	r3, r6
 8003260:	0c32      	lsrs	r2, r6, #16
 8003262:	f01b fa53 	bl	801e70c <siprintf>
}
 8003266:	4802      	ldr	r0, [pc, #8]	; (8003270 <get_ip_addr_string+0xf0>)
 8003268:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800326c:	b004      	add	sp, #16
 800326e:	4770      	bx	lr
 8003270:	200015dc 	.word	0x200015dc
 8003274:	080213b0 	.word	0x080213b0

08003278 <print_main_test_window>:
{
 8003278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800327c:	b08d      	sub	sp, #52	; 0x34
 800327e:	4605      	mov	r5, r0
    status += htmlwrite(resp_packet_ptr, outtermosttable);
 8003280:	f04f 37ff 	mov.w	r7, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	224c      	movs	r2, #76	; 0x4c
 800328a:	a904      	add	r1, sp, #16
 800328c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
        device_ip_addr_string[strlen(device_ip_addr_string)] = '.';
 800328e:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8003292:	f003 f9fb 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, outtermosttable);
 8003296:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8003298:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, outtermosttable);
 800329a:	2266      	movs	r2, #102	; 0x66
 800329c:	493a      	ldr	r1, [pc, #232]	; (8003388 <print_main_test_window+0x110>)
            status += htmlwrite(resp_packet_ptr, get_ip_addr_string(server_ip));
 800329e:	46bb      	mov	fp, r7
    status += htmlwrite(resp_packet_ptr, outtermosttable);
 80032a0:	9804      	ldr	r0, [sp, #16]
 80032a2:	9700      	str	r7, [sp, #0]
 80032a4:	f003 fa50 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, maintabletag);
 80032a8:	9a04      	ldr	r2, [sp, #16]
 80032aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, outtermosttable);
 80032ac:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, maintabletag);
 80032ae:	4937      	ldr	r1, [pc, #220]	; (800338c <print_main_test_window+0x114>)
 80032b0:	4610      	mov	r0, r2
 80032b2:	9700      	str	r7, [sp, #0]
 80032b4:	223a      	movs	r2, #58	; 0x3a
 80032b6:	f003 fa47 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, h1line1);
 80032ba:	9a04      	ldr	r2, [sp, #16]
    server_ip.nxd_ip_address.v4 = _iperf_test_ip -> nx_ip_interface[0].nx_interface_ip_address;
 80032bc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800339c <print_main_test_window+0x124>
    status += htmlwrite(resp_packet_ptr, maintabletag);
 80032c0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, h1line1);
 80032c2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80032c4:	4610      	mov	r0, r2
 80032c6:	4932      	ldr	r1, [pc, #200]	; (8003390 <print_main_test_window+0x118>)
 80032c8:	2237      	movs	r2, #55	; 0x37
 80032ca:	9700      	str	r7, [sp, #0]
 80032cc:	f003 fa3c 	bl	8006748 <_nx_packet_data_append>
    server_ip.nxd_ip_address.v4 = _iperf_test_ip -> nx_ip_interface[0].nx_interface_ip_address;
 80032d0:	f8d8 2000 	ldr.w	r2, [r8]
    server_ip.nxd_ip_version = NX_IP_VERSION_V4;
 80032d4:	2304      	movs	r3, #4
    memset(device_ip_addr_string, 0, sizeof(device_ip_addr_string));
 80032d6:	4e2f      	ldr	r6, [pc, #188]	; (8003394 <print_main_test_window+0x11c>)
    server_ip.nxd_ip_address.v4 = _iperf_test_ip -> nx_ip_interface[0].nx_interface_ip_address;
 80032d8:	f8d2 9c5c 	ldr.w	r9, [r2, #3164]	; 0xc5c
    status += htmlwrite(resp_packet_ptr, h1line1);
 80032dc:	1822      	adds	r2, r4, r0
    memset(device_ip_addr_string, 0, sizeof(device_ip_addr_string));
 80032de:	2100      	movs	r1, #0
 80032e0:	4630      	mov	r0, r6
    status += htmlwrite(resp_packet_ptr, h1line1);
 80032e2:	9203      	str	r2, [sp, #12]
    memset(device_ip_addr_string, 0, sizeof(device_ip_addr_string));
 80032e4:	2228      	movs	r2, #40	; 0x28
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(server_ip));
 80032e6:	ac07      	add	r4, sp, #28
    server_ip.nxd_ip_version = NX_IP_VERSION_V4;
 80032e8:	e9cd 3907 	strd	r3, r9, [sp, #28]
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(server_ip));
 80032ec:	9b04      	ldr	r3, [sp, #16]
 80032ee:	9302      	str	r3, [sp, #8]
    memset(device_ip_addr_string, 0, sizeof(device_ip_addr_string));
 80032f0:	f01b f953 	bl	801e59a <memset>
        _nx_http_server_number_convert(ip.nxd_ip_address.v4 >> 24, device_ip_addr_string);
 80032f4:	4631      	mov	r1, r6
 80032f6:	ea4f 6019 	mov.w	r0, r9, lsr #24
 80032fa:	f007 ffe1 	bl	800b2c0 <_nx_http_server_number_convert>
        device_ip_addr_string[strlen(device_ip_addr_string)] = '.';
 80032fe:	4630      	mov	r0, r6
 8003300:	f7fd f8c4 	bl	800048c <strlen>
 8003304:	f806 a000 	strb.w	sl, [r6, r0]
        _nx_http_server_number_convert(((ip.nxd_ip_address.v4 >> 16) & 0xFF), &device_ip_addr_string[strlen(device_ip_addr_string)]);
 8003308:	4630      	mov	r0, r6
 800330a:	f7fd f8bf 	bl	800048c <strlen>
 800330e:	1831      	adds	r1, r6, r0
 8003310:	f3c9 4007 	ubfx	r0, r9, #16, #8
 8003314:	f007 ffd4 	bl	800b2c0 <_nx_http_server_number_convert>
        device_ip_addr_string[strlen(device_ip_addr_string)] = '.';
 8003318:	4630      	mov	r0, r6
 800331a:	f7fd f8b7 	bl	800048c <strlen>
 800331e:	f806 a000 	strb.w	sl, [r6, r0]
        _nx_http_server_number_convert(((ip.nxd_ip_address.v4 >> 8) & 0xFF), &device_ip_addr_string[strlen(device_ip_addr_string)]);
 8003322:	4630      	mov	r0, r6
 8003324:	f7fd f8b2 	bl	800048c <strlen>
 8003328:	1831      	adds	r1, r6, r0
 800332a:	f3c9 2007 	ubfx	r0, r9, #8, #8
 800332e:	f007 ffc7 	bl	800b2c0 <_nx_http_server_number_convert>
        device_ip_addr_string[strlen(device_ip_addr_string)] = '.';
 8003332:	4630      	mov	r0, r6
 8003334:	f7fd f8aa 	bl	800048c <strlen>
 8003338:	f806 a000 	strb.w	sl, [r6, r0]
        _nx_http_server_number_convert((ip.nxd_ip_address.v4 & 0xFF), &device_ip_addr_string[strlen(device_ip_addr_string)]);
 800333c:	4630      	mov	r0, r6
 800333e:	f7fd f8a5 	bl	800048c <strlen>
 8003342:	1831      	adds	r1, r6, r0
 8003344:	fa5f f089 	uxtb.w	r0, r9
    address_index = 0;
 8003348:	f04f 0900 	mov.w	r9, #0
        _nx_http_server_number_convert((ip.nxd_ip_address.v4 & 0xFF), &device_ip_addr_string[strlen(device_ip_addr_string)]);
 800334c:	f007 ffb8 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(server_ip));
 8003350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003358:	f7ff ff12 	bl	8003180 <get_ip_addr_string>
 800335c:	f7fd f896 	bl	800048c <strlen>
 8003360:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003362:	4602      	mov	r2, r0
 8003364:	4631      	mov	r1, r6
 8003366:	9700      	str	r7, [sp, #0]
 8003368:	9802      	ldr	r0, [sp, #8]
 800336a:	f003 f9ed 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "\n");
 800336e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003370:	9700      	str	r7, [sp, #0]
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(server_ip));
 8003372:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 8003376:	180e      	adds	r6, r1, r0
    status += htmlwrite(resp_packet_ptr, "\n");
 8003378:	4610      	mov	r0, r2
 800337a:	4907      	ldr	r1, [pc, #28]	; (8003398 <print_main_test_window+0x120>)
 800337c:	2201      	movs	r2, #1
 800337e:	f003 f9e3 	bl	8006748 <_nx_packet_data_append>
 8003382:	4406      	add	r6, r0
 8003384:	e02f      	b.n	80033e6 <print_main_test_window+0x16e>
 8003386:	bf00      	nop
 8003388:	0802480c 	.word	0x0802480c
 800338c:	08024874 	.word	0x08024874
 8003390:	080248b0 	.word	0x080248b0
 8003394:	200015dc 	.word	0x200015dc
 8003398:	08024e28 	.word	0x08024e28
 800339c:	20004b68 	.word	0x20004b68
            status += htmlwrite(resp_packet_ptr, get_ip_addr_string(server_ip));
 80033a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033a2:	9f04      	ldr	r7, [sp, #16]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033aa:	f7ff fee9 	bl	8003180 <get_ip_addr_string>
 80033ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033b0:	4682      	mov	sl, r0
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033b8:	f7ff fee2 	bl	8003180 <get_ip_addr_string>
 80033bc:	f7fd f866 	bl	800048c <strlen>
 80033c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80033c2:	4602      	mov	r2, r0
 80033c4:	4651      	mov	r1, sl
 80033c6:	4638      	mov	r0, r7
 80033c8:	f8cd b000 	str.w	fp, [sp]
 80033cc:	f003 f9bc 	bl	8006748 <_nx_packet_data_append>
 80033d0:	4607      	mov	r7, r0
            status += htmlwrite(resp_packet_ptr, "\n");
 80033d2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80033d4:	2201      	movs	r2, #1
 80033d6:	9804      	ldr	r0, [sp, #16]
 80033d8:	49bc      	ldr	r1, [pc, #752]	; (80036cc <print_main_test_window+0x454>)
 80033da:	f8cd b000 	str.w	fp, [sp]
 80033de:	f003 f9b3 	bl	8006748 <_nx_packet_data_append>
 80033e2:	4438      	add	r0, r7
 80033e4:	4406      	add	r6, r0
        if (nxd_ipv6_address_get(_iperf_test_ip, address_index, &server_ip, &prefix_length, &interface_index) == NX_SUCCESS)
 80033e6:	aa06      	add	r2, sp, #24
 80033e8:	f8d8 0000 	ldr.w	r0, [r8]
 80033ec:	4649      	mov	r1, r9
 80033ee:	ab05      	add	r3, sp, #20
 80033f0:	9200      	str	r2, [sp, #0]
 80033f2:	4622      	mov	r2, r4
 80033f4:	f00b fa2a 	bl	800e84c <_nxd_ipv6_address_get>
            address_index ++;
 80033f8:	f109 0901 	add.w	r9, r9, #1
        if (nxd_ipv6_address_get(_iperf_test_ip, address_index, &server_ip, &prefix_length, &interface_index) == NX_SUCCESS)
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d0cf      	beq.n	80033a0 <print_main_test_window+0x128>
    status += htmlwrite(resp_packet_ptr, h1line2);
 8003400:	f04f 34ff 	mov.w	r4, #4294967295
 8003404:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003406:	2212      	movs	r2, #18
 8003408:	49b1      	ldr	r1, [pc, #708]	; (80036d0 <print_main_test_window+0x458>)
 800340a:	9804      	ldr	r0, [sp, #16]
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 800340c:	f505 7716 	add.w	r7, r5, #600	; 0x258
    status += htmlwrite(resp_packet_ptr, h1line2);
 8003410:	9400      	str	r4, [sp, #0]
 8003412:	f003 f999 	bl	8006748 <_nx_packet_data_append>
 8003416:	4680      	mov	r8, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003418:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800341a:	2207      	movs	r2, #7
 800341c:	49ad      	ldr	r1, [pc, #692]	; (80036d4 <print_main_test_window+0x45c>)
 800341e:	4446      	add	r6, r8
 8003420:	9804      	ldr	r0, [sp, #16]
 8003422:	9400      	str	r4, [sp, #0]
 8003424:	f003 f990 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003428:	9904      	ldr	r1, [sp, #16]
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800342a:	4406      	add	r6, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 800342c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800342e:	2205      	movs	r2, #5
 8003430:	4608      	mov	r0, r1
 8003432:	9400      	str	r4, [sp, #0]
 8003434:	49a8      	ldr	r1, [pc, #672]	; (80036d8 <print_main_test_window+0x460>)
 8003436:	f003 f987 	bl	8006748 <_nx_packet_data_append>
 800343a:	4406      	add	r6, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 800343c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003440:	4638      	mov	r0, r7
 8003442:	9904      	ldr	r1, [sp, #16]
 8003444:	f004 fdfe 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 8003448:	42c6      	cmn	r6, r0
 800344a:	f040 81ee 	bne.w	800382a <print_main_test_window+0x5b2>
    status += htmlwrite(resp_packet_ptr, udptxsubmittag1);
 800344e:	f04f 36ff 	mov.w	r6, #4294967295
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(udp_tx_ip_address));
 8003452:	4ca2      	ldr	r4, [pc, #648]	; (80036dc <print_main_test_window+0x464>)
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
 8003458:	224c      	movs	r2, #76	; 0x4c
 800345a:	a904      	add	r1, sp, #16
 800345c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800345e:	f003 f915 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, udptxsubmittag1);
 8003462:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8003464:	4680      	mov	r8, r0
    status += htmlwrite(resp_packet_ptr, udptxsubmittag1);
 8003466:	f240 1277 	movw	r2, #375	; 0x177
 800346a:	499d      	ldr	r1, [pc, #628]	; (80036e0 <print_main_test_window+0x468>)
 800346c:	9804      	ldr	r0, [sp, #16]
 800346e:	9600      	str	r6, [sp, #0]
 8003470:	f003 f96a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(udp_tx_ip_address));
 8003474:	6923      	ldr	r3, [r4, #16]
    status += htmlwrite(resp_packet_ptr, udptxsubmittag1);
 8003476:	4480      	add	r8, r0
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(udp_tx_ip_address));
 8003478:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003482:	f7ff fe7d 	bl	8003180 <get_ip_addr_string>
 8003486:	6923      	ldr	r3, [r4, #16]
 8003488:	4682      	mov	sl, r0
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003490:	f7ff fe76 	bl	8003180 <get_ip_addr_string>
 8003494:	f7fc fffa 	bl	800048c <strlen>
 8003498:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800349a:	4602      	mov	r2, r0
 800349c:	4651      	mov	r1, sl
 800349e:	9600      	str	r6, [sp, #0]
 80034a0:	4648      	mov	r0, r9
 80034a2:	f003 f951 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, udptxsubmittag2);
 80034a6:	9a04      	ldr	r2, [sp, #16]
 80034a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(udp_tx_ip_address));
 80034aa:	eb08 0400 	add.w	r4, r8, r0
    status += htmlwrite(resp_packet_ptr, udptxsubmittag2);
 80034ae:	498d      	ldr	r1, [pc, #564]	; (80036e4 <print_main_test_window+0x46c>)
 80034b0:	4610      	mov	r0, r2
 80034b2:	9600      	str	r6, [sp, #0]
 80034b4:	2285      	movs	r2, #133	; 0x85
 80034b6:	f003 f947 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(udp_tx_port, mytempstring);
 80034ba:	4b8b      	ldr	r3, [pc, #556]	; (80036e8 <print_main_test_window+0x470>)
 80034bc:	498b      	ldr	r1, [pc, #556]	; (80036ec <print_main_test_window+0x474>)
    status += htmlwrite(resp_packet_ptr, udptxsubmittag2);
 80034be:	4404      	add	r4, r0
    _nx_http_server_number_convert(udp_tx_port, mytempstring);
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	f007 fefd 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 80034c6:	4889      	ldr	r0, [pc, #548]	; (80036ec <print_main_test_window+0x474>)
 80034c8:	f7fc ffe0 	bl	800048c <strlen>
 80034cc:	9904      	ldr	r1, [sp, #16]
 80034ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80034d0:	4602      	mov	r2, r0
 80034d2:	9600      	str	r6, [sp, #0]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4985      	ldr	r1, [pc, #532]	; (80036ec <print_main_test_window+0x474>)
 80034d8:	f003 f936 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, udptxsubmittag3);
 80034dc:	9a04      	ldr	r2, [sp, #16]
 80034de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 80034e0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, udptxsubmittag3);
 80034e2:	4983      	ldr	r1, [pc, #524]	; (80036f0 <print_main_test_window+0x478>)
 80034e4:	4610      	mov	r0, r2
 80034e6:	9600      	str	r6, [sp, #0]
 80034e8:	228c      	movs	r2, #140	; 0x8c
 80034ea:	f003 f92d 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(udp_tx_test_time, mytempstring);
 80034ee:	4b81      	ldr	r3, [pc, #516]	; (80036f4 <print_main_test_window+0x47c>)
 80034f0:	497e      	ldr	r1, [pc, #504]	; (80036ec <print_main_test_window+0x474>)
    status += htmlwrite(resp_packet_ptr, udptxsubmittag3);
 80034f2:	4404      	add	r4, r0
    _nx_http_server_number_convert(udp_tx_test_time, mytempstring);
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	f007 fee3 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 80034fa:	487c      	ldr	r0, [pc, #496]	; (80036ec <print_main_test_window+0x474>)
 80034fc:	f7fc ffc6 	bl	800048c <strlen>
 8003500:	9904      	ldr	r1, [sp, #16]
 8003502:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003504:	4602      	mov	r2, r0
 8003506:	9600      	str	r6, [sp, #0]
 8003508:	4608      	mov	r0, r1
 800350a:	4978      	ldr	r1, [pc, #480]	; (80036ec <print_main_test_window+0x474>)
 800350c:	f003 f91c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, udptxsubmittag4);
 8003510:	9a04      	ldr	r2, [sp, #16]
 8003512:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003514:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, udptxsubmittag4);
 8003516:	4978      	ldr	r1, [pc, #480]	; (80036f8 <print_main_test_window+0x480>)
 8003518:	4610      	mov	r0, r2
 800351a:	9600      	str	r6, [sp, #0]
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	f003 f913 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(udp_tx_packet_size, mytempstring);
 8003522:	4b76      	ldr	r3, [pc, #472]	; (80036fc <print_main_test_window+0x484>)
 8003524:	4971      	ldr	r1, [pc, #452]	; (80036ec <print_main_test_window+0x474>)
    status += htmlwrite(resp_packet_ptr, udptxsubmittag4);
 8003526:	4404      	add	r4, r0
    _nx_http_server_number_convert(udp_tx_packet_size, mytempstring);
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	f007 fec9 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 800352e:	486f      	ldr	r0, [pc, #444]	; (80036ec <print_main_test_window+0x474>)
 8003530:	f7fc ffac 	bl	800048c <strlen>
 8003534:	9904      	ldr	r1, [sp, #16]
 8003536:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003538:	4602      	mov	r2, r0
 800353a:	9600      	str	r6, [sp, #0]
 800353c:	4608      	mov	r0, r1
 800353e:	496b      	ldr	r1, [pc, #428]	; (80036ec <print_main_test_window+0x474>)
 8003540:	f003 f902 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, udptxsubmittag5);
 8003544:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003546:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, udptxsubmittag5);
 8003548:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800354a:	4610      	mov	r0, r2
 800354c:	496c      	ldr	r1, [pc, #432]	; (8003700 <print_main_test_window+0x488>)
 800354e:	2245      	movs	r2, #69	; 0x45
 8003550:	9600      	str	r6, [sp, #0]
 8003552:	f003 f8f9 	bl	8006748 <_nx_packet_data_append>
 8003556:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 8003558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800355c:	9904      	ldr	r1, [sp, #16]
 800355e:	4638      	mov	r0, r7
 8003560:	f004 fd70 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 8003564:	42c4      	cmn	r4, r0
 8003566:	f040 8158 	bne.w	800381a <print_main_test_window+0x5a2>
    status += htmlwrite(resp_packet_ptr, udprxsubmittag1);
 800356a:	f04f 36ff 	mov.w	r6, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	224c      	movs	r2, #76	; 0x4c
 8003574:	a904      	add	r1, sp, #16
 8003576:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003578:	f003 f888 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, udprxsubmittag1);
 800357c:	f240 1279 	movw	r2, #377	; 0x179
 8003580:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8003582:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, udprxsubmittag1);
 8003584:	495f      	ldr	r1, [pc, #380]	; (8003704 <print_main_test_window+0x48c>)
 8003586:	9804      	ldr	r0, [sp, #16]
 8003588:	9600      	str	r6, [sp, #0]
 800358a:	f003 f8dd 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(udp_rx_test_time, mytempstring);
 800358e:	4b5e      	ldr	r3, [pc, #376]	; (8003708 <print_main_test_window+0x490>)
 8003590:	4956      	ldr	r1, [pc, #344]	; (80036ec <print_main_test_window+0x474>)
    status += htmlwrite(resp_packet_ptr, udprxsubmittag1);
 8003592:	4404      	add	r4, r0
    _nx_http_server_number_convert(udp_rx_test_time, mytempstring);
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	f007 fe93 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 800359a:	4854      	ldr	r0, [pc, #336]	; (80036ec <print_main_test_window+0x474>)
 800359c:	f7fc ff76 	bl	800048c <strlen>
 80035a0:	9904      	ldr	r1, [sp, #16]
 80035a2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80035a4:	4602      	mov	r2, r0
 80035a6:	9600      	str	r6, [sp, #0]
 80035a8:	4608      	mov	r0, r1
 80035aa:	4950      	ldr	r1, [pc, #320]	; (80036ec <print_main_test_window+0x474>)
 80035ac:	f003 f8cc 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, udprxsubmittag2);
 80035b0:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, mytempstring);
 80035b2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, udprxsubmittag2);
 80035b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80035b6:	4610      	mov	r0, r2
 80035b8:	4954      	ldr	r1, [pc, #336]	; (800370c <print_main_test_window+0x494>)
 80035ba:	2245      	movs	r2, #69	; 0x45
 80035bc:	9600      	str	r6, [sp, #0]
 80035be:	f003 f8c3 	bl	8006748 <_nx_packet_data_append>
 80035c2:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 80035c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035c8:	9904      	ldr	r1, [sp, #16]
 80035ca:	4638      	mov	r0, r7
 80035cc:	f004 fd3a 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 80035d0:	42c4      	cmn	r4, r0
 80035d2:	f040 811a 	bne.w	800380a <print_main_test_window+0x592>
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag1);
 80035d6:	f04f 38ff 	mov.w	r8, #4294967295
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(tcp_tx_ip_address));
 80035da:	4e4d      	ldr	r6, [pc, #308]	; (8003710 <print_main_test_window+0x498>)
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
 80035e0:	224c      	movs	r2, #76	; 0x4c
 80035e2:	a904      	add	r1, sp, #16
 80035e4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80035e6:	f003 f851 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag1);
 80035ea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 80035ec:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag1);
 80035ee:	f240 1277 	movw	r2, #375	; 0x177
 80035f2:	4948      	ldr	r1, [pc, #288]	; (8003714 <print_main_test_window+0x49c>)
 80035f4:	9804      	ldr	r0, [sp, #16]
 80035f6:	f8cd 8000 	str.w	r8, [sp]
 80035fa:	f003 f8a5 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(tcp_tx_ip_address));
 80035fe:	6933      	ldr	r3, [r6, #16]
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag1);
 8003600:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(tcp_tx_ip_address));
 8003602:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800360c:	f7ff fdb8 	bl	8003180 <get_ip_addr_string>
 8003610:	6933      	ldr	r3, [r6, #16]
 8003612:	4682      	mov	sl, r0
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800361a:	f7ff fdb1 	bl	8003180 <get_ip_addr_string>
 800361e:	f7fc ff35 	bl	800048c <strlen>
 8003622:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003624:	4602      	mov	r2, r0
 8003626:	4651      	mov	r1, sl
 8003628:	f8cd 8000 	str.w	r8, [sp]
 800362c:	4648      	mov	r0, r9
 800362e:	f003 f88b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag2);
 8003632:	9a04      	ldr	r2, [sp, #16]
 8003634:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(tcp_tx_ip_address));
 8003636:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag2);
 8003638:	492a      	ldr	r1, [pc, #168]	; (80036e4 <print_main_test_window+0x46c>)
 800363a:	4610      	mov	r0, r2
 800363c:	f8cd 8000 	str.w	r8, [sp]
 8003640:	2285      	movs	r2, #133	; 0x85
 8003642:	f003 f881 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(tcp_tx_port, mytempstring);
 8003646:	4b34      	ldr	r3, [pc, #208]	; (8003718 <print_main_test_window+0x4a0>)
 8003648:	4928      	ldr	r1, [pc, #160]	; (80036ec <print_main_test_window+0x474>)
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag2);
 800364a:	4404      	add	r4, r0
    _nx_http_server_number_convert(tcp_tx_port, mytempstring);
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	f007 fe37 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003652:	4826      	ldr	r0, [pc, #152]	; (80036ec <print_main_test_window+0x474>)
 8003654:	f7fc ff1a 	bl	800048c <strlen>
 8003658:	9904      	ldr	r1, [sp, #16]
 800365a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800365c:	4602      	mov	r2, r0
 800365e:	f8cd 8000 	str.w	r8, [sp]
 8003662:	4608      	mov	r0, r1
 8003664:	4921      	ldr	r1, [pc, #132]	; (80036ec <print_main_test_window+0x474>)
 8003666:	f003 f86f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag3);
 800366a:	9a04      	ldr	r2, [sp, #16]
 800366c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 800366e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag3);
 8003670:	491f      	ldr	r1, [pc, #124]	; (80036f0 <print_main_test_window+0x478>)
 8003672:	4610      	mov	r0, r2
 8003674:	f8cd 8000 	str.w	r8, [sp]
 8003678:	228c      	movs	r2, #140	; 0x8c
 800367a:	f003 f865 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(tcp_tx_test_time, mytempstring);
 800367e:	4b27      	ldr	r3, [pc, #156]	; (800371c <print_main_test_window+0x4a4>)
 8003680:	491a      	ldr	r1, [pc, #104]	; (80036ec <print_main_test_window+0x474>)
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag3);
 8003682:	4404      	add	r4, r0
    _nx_http_server_number_convert(tcp_tx_test_time, mytempstring);
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	f007 fe1b 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 800368a:	4818      	ldr	r0, [pc, #96]	; (80036ec <print_main_test_window+0x474>)
 800368c:	f7fc fefe 	bl	800048c <strlen>
 8003690:	9904      	ldr	r1, [sp, #16]
 8003692:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003694:	4602      	mov	r2, r0
 8003696:	f8cd 8000 	str.w	r8, [sp]
 800369a:	4608      	mov	r0, r1
 800369c:	4913      	ldr	r1, [pc, #76]	; (80036ec <print_main_test_window+0x474>)
 800369e:	f003 f853 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag4);
 80036a2:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, mytempstring);
 80036a4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tcptxsubmittag4);
 80036a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80036a8:	4610      	mov	r0, r2
 80036aa:	4915      	ldr	r1, [pc, #84]	; (8003700 <print_main_test_window+0x488>)
 80036ac:	2245      	movs	r2, #69	; 0x45
 80036ae:	f8cd 8000 	str.w	r8, [sp]
 80036b2:	f003 f849 	bl	8006748 <_nx_packet_data_append>
 80036b6:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 80036b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036bc:	9904      	ldr	r1, [sp, #16]
 80036be:	4638      	mov	r0, r7
 80036c0:	f004 fcc0 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 80036c4:	42c4      	cmn	r4, r0
 80036c6:	f040 8098 	bne.w	80037fa <print_main_test_window+0x582>
 80036ca:	e029      	b.n	8003720 <print_main_test_window+0x4a8>
 80036cc:	08024e28 	.word	0x08024e28
 80036d0:	080248e8 	.word	0x080248e8
 80036d4:	080248fc 	.word	0x080248fc
 80036d8:	08024904 	.word	0x08024904
 80036dc:	200019f0 	.word	0x200019f0
 80036e0:	0802490c 	.word	0x0802490c
 80036e4:	08024a84 	.word	0x08024a84
 80036e8:	20000024 	.word	0x20000024
 80036ec:	20001630 	.word	0x20001630
 80036f0:	08024b0c 	.word	0x08024b0c
 80036f4:	20000028 	.word	0x20000028
 80036f8:	08024b9c 	.word	0x08024b9c
 80036fc:	20000020 	.word	0x20000020
 8003700:	08024c20 	.word	0x08024c20
 8003704:	08024c68 	.word	0x08024c68
 8003708:	2000001c 	.word	0x2000001c
 800370c:	08024de4 	.word	0x08024de4
 8003710:	200016b4 	.word	0x200016b4
 8003714:	08024e2c 	.word	0x08024e2c
 8003718:	20000014 	.word	0x20000014
 800371c:	20000018 	.word	0x20000018
    status += htmlwrite(resp_packet_ptr, tcprxsubmittag1);
 8003720:	f04f 36ff 	mov.w	r6, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	224c      	movs	r2, #76	; 0x4c
 800372a:	a904      	add	r1, sp, #16
 800372c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800372e:	f002 ffad 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, tcprxsubmittag1);
 8003732:	f240 1279 	movw	r2, #377	; 0x179
 8003736:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8003738:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, tcprxsubmittag1);
 800373a:	4940      	ldr	r1, [pc, #256]	; (800383c <print_main_test_window+0x5c4>)
 800373c:	9804      	ldr	r0, [sp, #16]
 800373e:	9600      	str	r6, [sp, #0]
 8003740:	f003 f802 	bl	8006748 <_nx_packet_data_append>
     _nx_http_server_number_convert(tcp_rx_test_time, mytempstring);
 8003744:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <print_main_test_window+0x5c8>)
 8003746:	493f      	ldr	r1, [pc, #252]	; (8003844 <print_main_test_window+0x5cc>)
    status += htmlwrite(resp_packet_ptr, tcprxsubmittag1);
 8003748:	4404      	add	r4, r0
     _nx_http_server_number_convert(tcp_rx_test_time, mytempstring);
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	f007 fdb8 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003750:	483c      	ldr	r0, [pc, #240]	; (8003844 <print_main_test_window+0x5cc>)
 8003752:	f7fc fe9b 	bl	800048c <strlen>
 8003756:	9904      	ldr	r1, [sp, #16]
 8003758:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800375a:	4602      	mov	r2, r0
 800375c:	9600      	str	r6, [sp, #0]
 800375e:	4608      	mov	r0, r1
 8003760:	4938      	ldr	r1, [pc, #224]	; (8003844 <print_main_test_window+0x5cc>)
 8003762:	f002 fff1 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tcprxsubmittag2);
 8003766:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003768:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tcprxsubmittag2);
 800376a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800376c:	4610      	mov	r0, r2
 800376e:	4936      	ldr	r1, [pc, #216]	; (8003848 <print_main_test_window+0x5d0>)
 8003770:	2247      	movs	r2, #71	; 0x47
 8003772:	9600      	str	r6, [sp, #0]
 8003774:	f002 ffe8 	bl	8006748 <_nx_packet_data_append>
 8003778:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 800377a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800377e:	9904      	ldr	r1, [sp, #16]
 8003780:	4638      	mov	r0, r7
 8003782:	f004 fc5f 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 8003786:	42c4      	cmn	r4, r0
 8003788:	d12f      	bne.n	80037ea <print_main_test_window+0x572>
    status += htmlwrite(resp_packet_ptr, tableendtag);
 800378a:	f04f 36ff 	mov.w	r6, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800378e:	a904      	add	r1, sp, #16
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
 8003794:	224c      	movs	r2, #76	; 0x4c
 8003796:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003798:	f002 ff78 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, tableendtag);
 800379c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800379e:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, tableendtag);
 80037a0:	2208      	movs	r2, #8
 80037a2:	492a      	ldr	r1, [pc, #168]	; (800384c <print_main_test_window+0x5d4>)
 80037a4:	9804      	ldr	r0, [sp, #16]
 80037a6:	9600      	str	r6, [sp, #0]
 80037a8:	f002 ffce 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80037ac:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, tableendtag);
 80037ae:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80037b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80037b2:	4610      	mov	r0, r2
 80037b4:	4926      	ldr	r1, [pc, #152]	; (8003850 <print_main_test_window+0x5d8>)
 80037b6:	2207      	movs	r2, #7
 80037b8:	9600      	str	r6, [sp, #0]
 80037ba:	f002 ffc5 	bl	8006748 <_nx_packet_data_append>
 80037be:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 80037c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037c4:	4638      	mov	r0, r7
 80037c6:	9904      	ldr	r1, [sp, #16]
 80037c8:	f004 fc3c 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 80037cc:	42c4      	cmn	r4, r0
 80037ce:	d102      	bne.n	80037d6 <print_main_test_window+0x55e>
}
 80037d0:	b00d      	add	sp, #52	; 0x34
 80037d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nx_packet_release(resp_packet_ptr);
 80037d6:	9804      	ldr	r0, [sp, #16]
 80037d8:	f003 f90a 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <print_main_test_window+0x5dc>)
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	6013      	str	r3, [r2, #0]
}
 80037e4:	b00d      	add	sp, #52	; 0x34
 80037e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nx_packet_release(resp_packet_ptr);
 80037ea:	9804      	ldr	r0, [sp, #16]
 80037ec:	f003 f900 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <print_main_test_window+0x5dc>)
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e7c7      	b.n	800378a <print_main_test_window+0x512>
        nx_packet_release(resp_packet_ptr);
 80037fa:	9804      	ldr	r0, [sp, #16]
 80037fc:	f003 f8f8 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <print_main_test_window+0x5dc>)
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e78a      	b.n	8003720 <print_main_test_window+0x4a8>
        nx_packet_release(resp_packet_ptr);
 800380a:	9804      	ldr	r0, [sp, #16]
 800380c:	f003 f8f0 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8003810:	4a10      	ldr	r2, [pc, #64]	; (8003854 <print_main_test_window+0x5dc>)
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e6dd      	b.n	80035d6 <print_main_test_window+0x35e>
        nx_packet_release(resp_packet_ptr);
 800381a:	9804      	ldr	r0, [sp, #16]
 800381c:	f003 f8e8 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <print_main_test_window+0x5dc>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e69f      	b.n	800356a <print_main_test_window+0x2f2>
        nx_packet_release(resp_packet_ptr);
 800382a:	9804      	ldr	r0, [sp, #16]
 800382c:	f003 f8e0 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8003830:	4a08      	ldr	r2, [pc, #32]	; (8003854 <print_main_test_window+0x5dc>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e609      	b.n	800344e <print_main_test_window+0x1d6>
 800383a:	bf00      	nop
 800383c:	08024fa4 	.word	0x08024fa4
 8003840:	20000010 	.word	0x20000010
 8003844:	20001630 	.word	0x20001630
 8003848:	08025120 	.word	0x08025120
 800384c:	08025168 	.word	0x08025168
 8003850:	080248fc 	.word	0x080248fc
 8003854:	20004bd0 	.word	0x20004bd0

08003858 <print_tcp_rx_results>:
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	224c      	movs	r2, #76	; 0x4c
{
 800385e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	4605      	mov	r5, r0
    htmlwrite(resp_packet_ptr, toptdtag);
 8003866:	461e      	mov	r6, r3
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8003868:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800386a:	a903      	add	r1, sp, #12
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 800386c:	4faf      	ldr	r7, [pc, #700]	; (8003b2c <print_tcp_rx_results+0x2d4>)
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 800386e:	f002 ff0d 	bl	800668c <_nx_packet_allocate>
    htmlwrite(resp_packet_ptr, toptdtag);
 8003872:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8003874:	4604      	mov	r4, r0
    htmlwrite(resp_packet_ptr, toptdtag);
 8003876:	222d      	movs	r2, #45	; 0x2d
 8003878:	49ad      	ldr	r1, [pc, #692]	; (8003b30 <print_tcp_rx_results+0x2d8>)
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 800387a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    htmlwrite(resp_packet_ptr, toptdtag);
 800387e:	9803      	ldr	r0, [sp, #12]
 8003880:	9600      	str	r6, [sp, #0]
 8003882:	f002 ff61 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tabletag);
 8003886:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003888:	2212      	movs	r2, #18
 800388a:	49aa      	ldr	r1, [pc, #680]	; (8003b34 <print_tcp_rx_results+0x2dc>)
 800388c:	9803      	ldr	r0, [sp, #12]
 800388e:	9600      	str	r6, [sp, #0]
 8003890:	f002 ff5a 	bl	8006748 <_nx_packet_data_append>
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8003894:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003896:	221a      	movs	r2, #26
 8003898:	49a7      	ldr	r1, [pc, #668]	; (8003b38 <print_tcp_rx_results+0x2e0>)
 800389a:	9803      	ldr	r0, [sp, #12]
 800389c:	9600      	str	r6, [sp, #0]
 800389e:	f002 ff53 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, trtag);
 80038a2:	9a03      	ldr	r2, [sp, #12]
 80038a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 80038a6:	4404      	add	r4, r0
    htmlwrite(resp_packet_ptr, trtag);
 80038a8:	49a4      	ldr	r1, [pc, #656]	; (8003b3c <print_tcp_rx_results+0x2e4>)
 80038aa:	4610      	mov	r0, r2
 80038ac:	9600      	str	r6, [sp, #0]
 80038ae:	2204      	movs	r2, #4
 80038b0:	f002 ff4a 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tdtag);
 80038b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80038b6:	2204      	movs	r2, #4
 80038b8:	49a1      	ldr	r1, [pc, #644]	; (8003b40 <print_tcp_rx_results+0x2e8>)
 80038ba:	9803      	ldr	r0, [sp, #12]
 80038bc:	9600      	str	r6, [sp, #0]
 80038be:	f002 ff43 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, fonttag);
 80038c2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80038c4:	222a      	movs	r2, #42	; 0x2a
 80038c6:	499f      	ldr	r1, [pc, #636]	; (8003b44 <print_tcp_rx_results+0x2ec>)
 80038c8:	9803      	ldr	r0, [sp, #12]
 80038ca:	9600      	str	r6, [sp, #0]
 80038cc:	f002 ff3c 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, "TCP Receive Test Done:");
 80038d0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80038d2:	2216      	movs	r2, #22
 80038d4:	499c      	ldr	r1, [pc, #624]	; (8003b48 <print_tcp_rx_results+0x2f0>)
 80038d6:	9803      	ldr	r0, [sp, #12]
 80038d8:	9600      	str	r6, [sp, #0]
 80038da:	f002 ff35 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80038de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80038e0:	2207      	movs	r2, #7
 80038e2:	499a      	ldr	r1, [pc, #616]	; (8003b4c <print_tcp_rx_results+0x2f4>)
 80038e4:	9803      	ldr	r0, [sp, #12]
 80038e6:	9600      	str	r6, [sp, #0]
 80038e8:	f002 ff2e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80038ec:	9a03      	ldr	r2, [sp, #12]
 80038ee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80038f0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80038f2:	4997      	ldr	r1, [pc, #604]	; (8003b50 <print_tcp_rx_results+0x2f8>)
 80038f4:	4610      	mov	r0, r2
 80038f6:	9600      	str	r6, [sp, #0]
 80038f8:	2207      	movs	r2, #7
 80038fa:	f002 ff25 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 80038fe:	9a03      	ldr	r2, [sp, #12]
 8003900:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003902:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003904:	4993      	ldr	r1, [pc, #588]	; (8003b54 <print_tcp_rx_results+0x2fc>)
 8003906:	4610      	mov	r0, r2
 8003908:	9600      	str	r6, [sp, #0]
 800390a:	2205      	movs	r2, #5
 800390c:	f002 ff1c 	bl	8006748 <_nx_packet_data_append>
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8003910:	9a03      	ldr	r2, [sp, #12]
 8003912:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003914:	4404      	add	r4, r0
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8003916:	4988      	ldr	r1, [pc, #544]	; (8003b38 <print_tcp_rx_results+0x2e0>)
 8003918:	4610      	mov	r0, r2
 800391a:	9600      	str	r6, [sp, #0]
 800391c:	221a      	movs	r2, #26
 800391e:	f002 ff13 	bl	8006748 <_nx_packet_data_append>
    status +=  htmlwrite(resp_packet_ptr, trtag);
 8003922:	9a03      	ldr	r2, [sp, #12]
 8003924:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8003926:	4404      	add	r4, r0
    status +=  htmlwrite(resp_packet_ptr, trtag);
 8003928:	4984      	ldr	r1, [pc, #528]	; (8003b3c <print_tcp_rx_results+0x2e4>)
 800392a:	4610      	mov	r0, r2
 800392c:	9600      	str	r6, [sp, #0]
 800392e:	2204      	movs	r2, #4
 8003930:	f002 ff0a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003934:	9a03      	ldr	r2, [sp, #12]
 8003936:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status +=  htmlwrite(resp_packet_ptr, trtag);
 8003938:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 800393a:	4981      	ldr	r1, [pc, #516]	; (8003b40 <print_tcp_rx_results+0x2e8>)
 800393c:	4610      	mov	r0, r2
 800393e:	9600      	str	r6, [sp, #0]
 8003940:	2204      	movs	r2, #4
 8003942:	f002 ff01 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003946:	9a03      	ldr	r2, [sp, #12]
 8003948:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 800394a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 800394c:	497d      	ldr	r1, [pc, #500]	; (8003b44 <print_tcp_rx_results+0x2ec>)
 800394e:	4610      	mov	r0, r2
 8003950:	9600      	str	r6, [sp, #0]
 8003952:	222a      	movs	r2, #42	; 0x2a
 8003954:	f002 fef8 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Source IP Address: ");
 8003958:	9a03      	ldr	r2, [sp, #12]
 800395a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 800395c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Source IP Address: ");
 800395e:	497e      	ldr	r1, [pc, #504]	; (8003b58 <print_tcp_rx_results+0x300>)
 8003960:	4610      	mov	r0, r2
 8003962:	9600      	str	r6, [sp, #0]
 8003964:	2213      	movs	r2, #19
 8003966:	f002 feef 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 800396a:	693b      	ldr	r3, [r7, #16]
    status += htmlwrite(resp_packet_ptr, "Source IP Address: ");
 800396c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 800396e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003978:	f7ff fc02 	bl	8003180 <get_ip_addr_string>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4682      	mov	sl, r0
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003986:	f7ff fbfb 	bl	8003180 <get_ip_addr_string>
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 800398a:	4f74      	ldr	r7, [pc, #464]	; (8003b5c <print_tcp_rx_results+0x304>)
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 800398c:	f7fc fd7e 	bl	800048c <strlen>
 8003990:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003992:	4602      	mov	r2, r0
 8003994:	4651      	mov	r1, sl
 8003996:	9600      	str	r6, [sp, #0]
 8003998:	4648      	mov	r0, r9
 800399a:	f002 fed5 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800399e:	9a03      	ldr	r2, [sp, #12]
 80039a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 80039a2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80039a4:	4969      	ldr	r1, [pc, #420]	; (8003b4c <print_tcp_rx_results+0x2f4>)
 80039a6:	4610      	mov	r0, r2
 80039a8:	9600      	str	r6, [sp, #0]
 80039aa:	2207      	movs	r2, #7
 80039ac:	f002 fecc 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80039b0:	9a03      	ldr	r2, [sp, #12]
 80039b2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80039b4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80039b6:	4966      	ldr	r1, [pc, #408]	; (8003b50 <print_tcp_rx_results+0x2f8>)
 80039b8:	4610      	mov	r0, r2
 80039ba:	9600      	str	r6, [sp, #0]
 80039bc:	2207      	movs	r2, #7
 80039be:	f002 fec3 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);                                               
 80039c2:	9a03      	ldr	r2, [sp, #12]
 80039c4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80039c6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);                                               
 80039c8:	4962      	ldr	r1, [pc, #392]	; (8003b54 <print_tcp_rx_results+0x2fc>)
 80039ca:	4610      	mov	r0, r2
 80039cc:	9600      	str	r6, [sp, #0]
 80039ce:	2205      	movs	r2, #5
 80039d0:	f002 feba 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, trtag);
 80039d4:	9a03      	ldr	r2, [sp, #12]
 80039d6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);                                               
 80039d8:	4404      	add	r4, r0
    htmlwrite(resp_packet_ptr, trtag);
 80039da:	4958      	ldr	r1, [pc, #352]	; (8003b3c <print_tcp_rx_results+0x2e4>)
 80039dc:	4610      	mov	r0, r2
 80039de:	9600      	str	r6, [sp, #0]
 80039e0:	2204      	movs	r2, #4
 80039e2:	f002 feb1 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tdtag);
 80039e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80039e8:	2204      	movs	r2, #4
 80039ea:	4955      	ldr	r1, [pc, #340]	; (8003b40 <print_tcp_rx_results+0x2e8>)
 80039ec:	9803      	ldr	r0, [sp, #12]
 80039ee:	9600      	str	r6, [sp, #0]
 80039f0:	f002 feaa 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 80039f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80039f6:	222a      	movs	r2, #42	; 0x2a
 80039f8:	4952      	ldr	r1, [pc, #328]	; (8003b44 <print_tcp_rx_results+0x2ec>)
 80039fa:	9803      	ldr	r0, [sp, #12]
 80039fc:	9600      	str	r6, [sp, #0]
 80039fe:	f002 fea3 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8003a02:	9a03      	ldr	r2, [sp, #12]
 8003a04:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003a06:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8003a08:	4955      	ldr	r1, [pc, #340]	; (8003b60 <print_tcp_rx_results+0x308>)
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	9600      	str	r6, [sp, #0]
 8003a0e:	2219      	movs	r2, #25
 8003a10:	f002 fe9a 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8003a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a16:	4a53      	ldr	r2, [pc, #332]	; (8003b64 <print_tcp_rx_results+0x30c>)
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8003a18:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8003a1a:	fb08 f003 	mul.w	r0, r8, r3
 8003a1e:	4952      	ldr	r1, [pc, #328]	; (8003b68 <print_tcp_rx_results+0x310>)
 8003a20:	fba2 3000 	umull	r3, r0, r2, r0
 8003a24:	0940      	lsrs	r0, r0, #5
 8003a26:	f007 fc4b 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);   
 8003a2a:	484f      	ldr	r0, [pc, #316]	; (8003b68 <print_tcp_rx_results+0x310>)
 8003a2c:	f7fc fd2e 	bl	800048c <strlen>
 8003a30:	9903      	ldr	r1, [sp, #12]
 8003a32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003a34:	4602      	mov	r2, r0
 8003a36:	9600      	str	r6, [sp, #0]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	494b      	ldr	r1, [pc, #300]	; (8003b68 <print_tcp_rx_results+0x310>)
 8003a3c:	f002 fe84 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003a40:	9a03      	ldr	r2, [sp, #12]
 8003a42:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);   
 8003a44:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003a46:	4941      	ldr	r1, [pc, #260]	; (8003b4c <print_tcp_rx_results+0x2f4>)
 8003a48:	4610      	mov	r0, r2
 8003a4a:	9600      	str	r6, [sp, #0]
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	f002 fe7b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003a52:	9a03      	ldr	r2, [sp, #12]
 8003a54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003a56:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003a58:	493d      	ldr	r1, [pc, #244]	; (8003b50 <print_tcp_rx_results+0x2f8>)
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	9600      	str	r6, [sp, #0]
 8003a5e:	2207      	movs	r2, #7
 8003a60:	f002 fe72 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003a64:	9a03      	ldr	r2, [sp, #12]
 8003a66:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003a68:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003a6a:	493a      	ldr	r1, [pc, #232]	; (8003b54 <print_tcp_rx_results+0x2fc>)
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	9600      	str	r6, [sp, #0]
 8003a70:	2205      	movs	r2, #5
 8003a72:	f002 fe69 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8003a76:	9a03      	ldr	r2, [sp, #12]
 8003a78:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003a7a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8003a7c:	492f      	ldr	r1, [pc, #188]	; (8003b3c <print_tcp_rx_results+0x2e4>)
 8003a7e:	4610      	mov	r0, r2
 8003a80:	9600      	str	r6, [sp, #0]
 8003a82:	2204      	movs	r2, #4
 8003a84:	f002 fe60 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003a88:	9a03      	ldr	r2, [sp, #12]
 8003a8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8003a8c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003a8e:	492c      	ldr	r1, [pc, #176]	; (8003b40 <print_tcp_rx_results+0x2e8>)
 8003a90:	4610      	mov	r0, r2
 8003a92:	9600      	str	r6, [sp, #0]
 8003a94:	2204      	movs	r2, #4
 8003a96:	f002 fe57 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003a9a:	9a03      	ldr	r2, [sp, #12]
 8003a9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003a9e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003aa0:	4928      	ldr	r1, [pc, #160]	; (8003b44 <print_tcp_rx_results+0x2ec>)
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	9600      	str	r6, [sp, #0]
 8003aa6:	222a      	movs	r2, #42	; 0x2a
 8003aa8:	f002 fe4e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Packets Received: ");
 8003aac:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003aae:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Packets Received: ");
 8003ab0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	492d      	ldr	r1, [pc, #180]	; (8003b6c <print_tcp_rx_results+0x314>)
 8003ab6:	221c      	movs	r2, #28
 8003ab8:	9600      	str	r6, [sp, #0]
 8003aba:	f002 fe45 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsRxed, mytempstring);
 8003abe:	492a      	ldr	r1, [pc, #168]	; (8003b68 <print_tcp_rx_results+0x310>)
    status += htmlwrite(resp_packet_ptr, "Number of Packets Received: ");
 8003ac0:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsRxed, mytempstring);
 8003ac2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ac4:	f007 fbfc 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 8003ac8:	4827      	ldr	r0, [pc, #156]	; (8003b68 <print_tcp_rx_results+0x310>)
 8003aca:	f7fc fcdf 	bl	800048c <strlen>
 8003ace:	9903      	ldr	r1, [sp, #12]
 8003ad0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	9600      	str	r6, [sp, #0]
 8003ad6:	4608      	mov	r0, r1
 8003ad8:	4923      	ldr	r1, [pc, #140]	; (8003b68 <print_tcp_rx_results+0x310>)
 8003ada:	f002 fe35 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003ade:	9a03      	ldr	r2, [sp, #12]
 8003ae0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 8003ae2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003ae4:	4919      	ldr	r1, [pc, #100]	; (8003b4c <print_tcp_rx_results+0x2f4>)
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	9600      	str	r6, [sp, #0]
 8003aea:	2207      	movs	r2, #7
 8003aec:	f002 fe2c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003af0:	9a03      	ldr	r2, [sp, #12]
 8003af2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003af4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003af6:	4916      	ldr	r1, [pc, #88]	; (8003b50 <print_tcp_rx_results+0x2f8>)
 8003af8:	4610      	mov	r0, r2
 8003afa:	9600      	str	r6, [sp, #0]
 8003afc:	2207      	movs	r2, #7
 8003afe:	f002 fe23 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003b02:	9a03      	ldr	r2, [sp, #12]
 8003b04:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003b06:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003b08:	4912      	ldr	r1, [pc, #72]	; (8003b54 <print_tcp_rx_results+0x2fc>)
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	9600      	str	r6, [sp, #0]
 8003b0e:	2205      	movs	r2, #5
 8003b10:	f002 fe1a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8003b14:	9a03      	ldr	r2, [sp, #12]
 8003b16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003b18:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8003b1a:	4908      	ldr	r1, [pc, #32]	; (8003b3c <print_tcp_rx_results+0x2e4>)
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	9600      	str	r6, [sp, #0]
 8003b20:	2204      	movs	r2, #4
 8003b22:	f002 fe11 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003b26:	9a03      	ldr	r2, [sp, #12]
 8003b28:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b2a:	e021      	b.n	8003b70 <print_tcp_rx_results+0x318>
 8003b2c:	20001610 	.word	0x20001610
 8003b30:	08025174 	.word	0x08025174
 8003b34:	080251a4 	.word	0x080251a4
 8003b38:	080251b8 	.word	0x080251b8
 8003b3c:	080251d4 	.word	0x080251d4
 8003b40:	080251dc 	.word	0x080251dc
 8003b44:	080251e4 	.word	0x080251e4
 8003b48:	08025210 	.word	0x08025210
 8003b4c:	08025228 	.word	0x08025228
 8003b50:	080248fc 	.word	0x080248fc
 8003b54:	08024904 	.word	0x08024904
 8003b58:	08025230 	.word	0x08025230
 8003b5c:	20004b6c 	.word	0x20004b6c
 8003b60:	08025244 	.word	0x08025244
 8003b64:	51eb851f 	.word	0x51eb851f
 8003b68:	20001630 	.word	0x20001630
 8003b6c:	08025260 	.word	0x08025260
    status += htmlwrite(resp_packet_ptr, trtag);
 8003b70:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003b72:	4990      	ldr	r1, [pc, #576]	; (8003db4 <print_tcp_rx_results+0x55c>)
 8003b74:	4610      	mov	r0, r2
 8003b76:	9600      	str	r6, [sp, #0]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	f002 fde5 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003b7e:	9a03      	ldr	r2, [sp, #12]
 8003b80:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003b82:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003b84:	498c      	ldr	r1, [pc, #560]	; (8003db8 <print_tcp_rx_results+0x560>)
 8003b86:	4610      	mov	r0, r2
 8003b88:	9600      	str	r6, [sp, #0]
 8003b8a:	222a      	movs	r2, #42	; 0x2a
 8003b8c:	f002 fddc 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Received: ");
 8003b90:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003b92:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Received: ");
 8003b94:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b96:	4610      	mov	r0, r2
 8003b98:	4988      	ldr	r1, [pc, #544]	; (8003dbc <print_tcp_rx_results+0x564>)
 8003b9a:	221a      	movs	r2, #26
 8003b9c:	9600      	str	r6, [sp, #0]
 8003b9e:	f002 fdd3 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.BytesRxed, mytempstring);
 8003ba2:	4987      	ldr	r1, [pc, #540]	; (8003dc0 <print_tcp_rx_results+0x568>)
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Received: ");
 8003ba4:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.BytesRxed, mytempstring);
 8003ba6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003ba8:	f007 fb8a 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003bac:	4884      	ldr	r0, [pc, #528]	; (8003dc0 <print_tcp_rx_results+0x568>)
 8003bae:	f7fc fc6d 	bl	800048c <strlen>
 8003bb2:	9903      	ldr	r1, [sp, #12]
 8003bb4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	9600      	str	r6, [sp, #0]
 8003bba:	4608      	mov	r0, r1
 8003bbc:	4980      	ldr	r1, [pc, #512]	; (8003dc0 <print_tcp_rx_results+0x568>)
 8003bbe:	f002 fdc3 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003bc2:	9a03      	ldr	r2, [sp, #12]
 8003bc4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003bc6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003bc8:	497e      	ldr	r1, [pc, #504]	; (8003dc4 <print_tcp_rx_results+0x56c>)
 8003bca:	4610      	mov	r0, r2
 8003bcc:	9600      	str	r6, [sp, #0]
 8003bce:	2207      	movs	r2, #7
 8003bd0:	f002 fdba 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003bd4:	9a03      	ldr	r2, [sp, #12]
 8003bd6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003bd8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003bda:	497b      	ldr	r1, [pc, #492]	; (8003dc8 <print_tcp_rx_results+0x570>)
 8003bdc:	4610      	mov	r0, r2
 8003bde:	9600      	str	r6, [sp, #0]
 8003be0:	2207      	movs	r2, #7
 8003be2:	f002 fdb1 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003be6:	9a03      	ldr	r2, [sp, #12]
 8003be8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003bea:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003bec:	4977      	ldr	r1, [pc, #476]	; (8003dcc <print_tcp_rx_results+0x574>)
 8003bee:	4610      	mov	r0, r2
 8003bf0:	9600      	str	r6, [sp, #0]
 8003bf2:	2205      	movs	r2, #5
 8003bf4:	f002 fda8 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8003bf8:	9a03      	ldr	r2, [sp, #12]
 8003bfa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003bfc:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8003bfe:	4974      	ldr	r1, [pc, #464]	; (8003dd0 <print_tcp_rx_results+0x578>)
 8003c00:	4610      	mov	r0, r2
 8003c02:	9600      	str	r6, [sp, #0]
 8003c04:	2204      	movs	r2, #4
 8003c06:	f002 fd9f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003c0a:	9a03      	ldr	r2, [sp, #12]
 8003c0c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8003c0e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003c10:	4968      	ldr	r1, [pc, #416]	; (8003db4 <print_tcp_rx_results+0x55c>)
 8003c12:	4610      	mov	r0, r2
 8003c14:	9600      	str	r6, [sp, #0]
 8003c16:	2204      	movs	r2, #4
 8003c18:	f002 fd96 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003c1c:	9a03      	ldr	r2, [sp, #12]
 8003c1e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003c20:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003c22:	4965      	ldr	r1, [pc, #404]	; (8003db8 <print_tcp_rx_results+0x560>)
 8003c24:	4610      	mov	r0, r2
 8003c26:	9600      	str	r6, [sp, #0]
 8003c28:	222a      	movs	r2, #42	; 0x2a
 8003c2a:	f002 fd8d 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps): ");
 8003c2e:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003c30:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps): ");
 8003c32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003c34:	4610      	mov	r0, r2
 8003c36:	4967      	ldr	r1, [pc, #412]	; (8003dd4 <print_tcp_rx_results+0x57c>)
 8003c38:	2212      	movs	r2, #18
 8003c3a:	9600      	str	r6, [sp, #0]
 8003c3c:	f002 fd84 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.ThroughPut, mytempstring); 
 8003c40:	495f      	ldr	r1, [pc, #380]	; (8003dc0 <print_tcp_rx_results+0x568>)
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps): ");
 8003c42:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.ThroughPut, mytempstring); 
 8003c44:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003c46:	f007 fb3b 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003c4a:	485d      	ldr	r0, [pc, #372]	; (8003dc0 <print_tcp_rx_results+0x568>)
 8003c4c:	f7fc fc1e 	bl	800048c <strlen>
 8003c50:	9903      	ldr	r1, [sp, #12]
 8003c52:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003c54:	4602      	mov	r2, r0
 8003c56:	9600      	str	r6, [sp, #0]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4959      	ldr	r1, [pc, #356]	; (8003dc0 <print_tcp_rx_results+0x568>)
 8003c5c:	f002 fd74 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003c60:	9a03      	ldr	r2, [sp, #12]
 8003c62:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003c64:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003c66:	4957      	ldr	r1, [pc, #348]	; (8003dc4 <print_tcp_rx_results+0x56c>)
 8003c68:	4610      	mov	r0, r2
 8003c6a:	9600      	str	r6, [sp, #0]
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	f002 fd6b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003c72:	9a03      	ldr	r2, [sp, #12]
 8003c74:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003c76:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003c78:	4953      	ldr	r1, [pc, #332]	; (8003dc8 <print_tcp_rx_results+0x570>)
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	9600      	str	r6, [sp, #0]
 8003c7e:	2207      	movs	r2, #7
 8003c80:	f002 fd62 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003c84:	9a03      	ldr	r2, [sp, #12]
 8003c86:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003c88:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003c8a:	4950      	ldr	r1, [pc, #320]	; (8003dcc <print_tcp_rx_results+0x574>)
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	9600      	str	r6, [sp, #0]
 8003c90:	2205      	movs	r2, #5
 8003c92:	f002 fd59 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8003c96:	9a03      	ldr	r2, [sp, #12]
 8003c98:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003c9a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8003c9c:	494c      	ldr	r1, [pc, #304]	; (8003dd0 <print_tcp_rx_results+0x578>)
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	9600      	str	r6, [sp, #0]
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	f002 fd50 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003ca8:	9a03      	ldr	r2, [sp, #12]
 8003caa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8003cac:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003cae:	4941      	ldr	r1, [pc, #260]	; (8003db4 <print_tcp_rx_results+0x55c>)
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	9600      	str	r6, [sp, #0]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	f002 fd47 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003cba:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003cbc:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003cbe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	493d      	ldr	r1, [pc, #244]	; (8003db8 <print_tcp_rx_results+0x560>)
 8003cc4:	222a      	movs	r2, #42	; 0x2a
 8003cc6:	9600      	str	r6, [sp, #0]
 8003cc8:	f002 fd3e 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.idleTime, mytempstring);
 8003ccc:	493c      	ldr	r1, [pc, #240]	; (8003dc0 <print_tcp_rx_results+0x568>)
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003cce:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.idleTime, mytempstring);
 8003cd0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003cd2:	f007 faf5 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, "Idle Time: ");
 8003cd6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003cd8:	220b      	movs	r2, #11
 8003cda:	493f      	ldr	r1, [pc, #252]	; (8003dd8 <print_tcp_rx_results+0x580>)
 8003cdc:	9803      	ldr	r0, [sp, #12]
 8003cde:	9600      	str	r6, [sp, #0]
 8003ce0:	f002 fd32 	bl	8006748 <_nx_packet_data_append>
 8003ce4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003ce6:	4836      	ldr	r0, [pc, #216]	; (8003dc0 <print_tcp_rx_results+0x568>)
 8003ce8:	f7fc fbd0 	bl	800048c <strlen>
 8003cec:	9903      	ldr	r1, [sp, #12]
 8003cee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	9600      	str	r6, [sp, #0]
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4932      	ldr	r1, [pc, #200]	; (8003dc0 <print_tcp_rx_results+0x568>)
 8003cf8:	f002 fd26 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "%");   
 8003cfc:	9a03      	ldr	r2, [sp, #12]
 8003cfe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003d00:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "%");   
 8003d02:	4936      	ldr	r1, [pc, #216]	; (8003ddc <print_tcp_rx_results+0x584>)
 8003d04:	4610      	mov	r0, r2
 8003d06:	9600      	str	r6, [sp, #0]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f002 fd1d 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003d0e:	9a03      	ldr	r2, [sp, #12]
 8003d10:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, "%");   
 8003d12:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003d14:	492b      	ldr	r1, [pc, #172]	; (8003dc4 <print_tcp_rx_results+0x56c>)
 8003d16:	4610      	mov	r0, r2
 8003d18:	9600      	str	r6, [sp, #0]
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	f002 fd14 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003d20:	9a03      	ldr	r2, [sp, #12]
 8003d22:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003d24:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003d26:	4928      	ldr	r1, [pc, #160]	; (8003dc8 <print_tcp_rx_results+0x570>)
 8003d28:	4610      	mov	r0, r2
 8003d2a:	9600      	str	r6, [sp, #0]
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	f002 fd0b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003d32:	9a03      	ldr	r2, [sp, #12]
 8003d34:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003d36:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003d38:	4924      	ldr	r1, [pc, #144]	; (8003dcc <print_tcp_rx_results+0x574>)
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	9600      	str	r6, [sp, #0]
 8003d3e:	2205      	movs	r2, #5
 8003d40:	f002 fd02 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tableendtag);  
 8003d44:	9a03      	ldr	r2, [sp, #12]
 8003d46:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003d48:	4404      	add	r4, r0
    htmlwrite(resp_packet_ptr, tableendtag);  
 8003d4a:	4925      	ldr	r1, [pc, #148]	; (8003de0 <print_tcp_rx_results+0x588>)
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	9600      	str	r6, [sp, #0]
 8003d50:	2208      	movs	r2, #8
 8003d52:	f002 fcf9 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tdendtag);
 8003d56:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003d58:	2207      	movs	r2, #7
 8003d5a:	491b      	ldr	r1, [pc, #108]	; (8003dc8 <print_tcp_rx_results+0x570>)
 8003d5c:	9803      	ldr	r0, [sp, #12]
 8003d5e:	9600      	str	r6, [sp, #0]
 8003d60:	f002 fcf2 	bl	8006748 <_nx_packet_data_append>
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 8003d64:	4642      	mov	r2, r8
 8003d66:	f505 7016 	add.w	r0, r5, #600	; 0x258
 8003d6a:	9903      	ldr	r1, [sp, #12]
 8003d6c:	f004 f96a 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 8003d70:	42c4      	cmn	r4, r0
 8003d72:	d006      	beq.n	8003d82 <print_tcp_rx_results+0x52a>
        nx_packet_release(resp_packet_ptr);
 8003d74:	9803      	ldr	r0, [sp, #12]
 8003d76:	f002 fe3b 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <print_tcp_rx_results+0x58c>)
 8003d7c:	6813      	ldr	r3, [r2, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	6013      	str	r3, [r2, #0]
    nx_tcp_socket_disconnect(&tcp_server_socket, NX_NO_WAIT);
 8003d82:	2100      	movs	r1, #0
 8003d84:	4818      	ldr	r0, [pc, #96]	; (8003de8 <print_tcp_rx_results+0x590>)
 8003d86:	f003 fe11 	bl	80079ac <_nx_tcp_socket_disconnect>
    nx_tcp_server_socket_unaccept(&tcp_server_socket);
 8003d8a:	4817      	ldr	r0, [pc, #92]	; (8003de8 <print_tcp_rx_results+0x590>)
 8003d8c:	f003 fc26 	bl	80075dc <_nx_tcp_server_socket_unaccept>
    nx_tcp_server_socket_unlisten(_iperf_test_ip, TCP_RX_PORT);
 8003d90:	4b16      	ldr	r3, [pc, #88]	; (8003dec <print_tcp_rx_results+0x594>)
 8003d92:	f241 3189 	movw	r1, #5001	; 0x1389
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f003 fc98 	bl	80076cc <_nx_tcp_server_socket_unlisten>
    nx_tcp_socket_delete(&tcp_server_socket);
 8003d9c:	4812      	ldr	r0, [pc, #72]	; (8003de8 <print_tcp_rx_results+0x590>)
 8003d9e:	f003 fdbb 	bl	8007918 <_nx_tcp_socket_delete>
    tx_thread_terminate(&thread_tcp_rx_iperf);
 8003da2:	4813      	ldr	r0, [pc, #76]	; (8003df0 <print_tcp_rx_results+0x598>)
 8003da4:	f01a f802 	bl	801ddac <_txe_thread_terminate>
    tx_thread_delete(&thread_tcp_rx_iperf);     
 8003da8:	4811      	ldr	r0, [pc, #68]	; (8003df0 <print_tcp_rx_results+0x598>)
 8003daa:	f019 ffab 	bl	801dd04 <_txe_thread_delete>
}
 8003dae:	b004      	add	sp, #16
 8003db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db4:	080251dc 	.word	0x080251dc
 8003db8:	080251e4 	.word	0x080251e4
 8003dbc:	08025280 	.word	0x08025280
 8003dc0:	20001630 	.word	0x20001630
 8003dc4:	08025228 	.word	0x08025228
 8003dc8:	080248fc 	.word	0x080248fc
 8003dcc:	08024904 	.word	0x08024904
 8003dd0:	080251d4 	.word	0x080251d4
 8003dd4:	0802529c 	.word	0x0802529c
 8003dd8:	080252b0 	.word	0x080252b0
 8003ddc:	080252bc 	.word	0x080252bc
 8003de0:	08025168 	.word	0x08025168
 8003de4:	20004bd0 	.word	0x20004bd0
 8003de8:	20004cd0 	.word	0x20004cd0
 8003dec:	20004b68 	.word	0x20004b68
 8003df0:	200016c8 	.word	0x200016c8

08003df4 <print_tcp_tx_results>:
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	224c      	movs	r2, #76	; 0x4c
{
 8003dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	4605      	mov	r5, r0
    htmlwrite(resp_packet_ptr, toptdtag);
 8003e02:	461e      	mov	r6, r3
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8003e04:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003e06:	a903      	add	r1, sp, #12
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8003e08:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8004118 <print_tcp_tx_results+0x324>
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8003e0c:	f002 fc3e 	bl	800668c <_nx_packet_allocate>
    htmlwrite(resp_packet_ptr, toptdtag);
 8003e10:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8003e12:	4604      	mov	r4, r0
    htmlwrite(resp_packet_ptr, toptdtag);
 8003e14:	222d      	movs	r2, #45	; 0x2d
 8003e16:	49b0      	ldr	r1, [pc, #704]	; (80040d8 <print_tcp_tx_results+0x2e4>)
 8003e18:	9803      	ldr	r0, [sp, #12]
 8003e1a:	9600      	str	r6, [sp, #0]
 8003e1c:	f002 fc94 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tabletag);
 8003e20:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003e22:	2212      	movs	r2, #18
 8003e24:	49ad      	ldr	r1, [pc, #692]	; (80040dc <print_tcp_tx_results+0x2e8>)
 8003e26:	9803      	ldr	r0, [sp, #12]
 8003e28:	9600      	str	r6, [sp, #0]
 8003e2a:	f002 fc8d 	bl	8006748 <_nx_packet_data_append>
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8003e2e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003e30:	221a      	movs	r2, #26
 8003e32:	49ab      	ldr	r1, [pc, #684]	; (80040e0 <print_tcp_tx_results+0x2ec>)
 8003e34:	9803      	ldr	r0, [sp, #12]
 8003e36:	9600      	str	r6, [sp, #0]
 8003e38:	f002 fc86 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, trtag);
 8003e3c:	9a03      	ldr	r2, [sp, #12]
 8003e3e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8003e40:	4404      	add	r4, r0
    htmlwrite(resp_packet_ptr, trtag);
 8003e42:	49a8      	ldr	r1, [pc, #672]	; (80040e4 <print_tcp_tx_results+0x2f0>)
 8003e44:	4610      	mov	r0, r2
 8003e46:	9600      	str	r6, [sp, #0]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	f002 fc7d 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tdtag);
 8003e4e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003e50:	2204      	movs	r2, #4
 8003e52:	49a5      	ldr	r1, [pc, #660]	; (80040e8 <print_tcp_tx_results+0x2f4>)
 8003e54:	9803      	ldr	r0, [sp, #12]
 8003e56:	9600      	str	r6, [sp, #0]
 8003e58:	f002 fc76 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, fonttag);
 8003e5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003e5e:	222a      	movs	r2, #42	; 0x2a
 8003e60:	49a2      	ldr	r1, [pc, #648]	; (80040ec <print_tcp_tx_results+0x2f8>)
 8003e62:	9803      	ldr	r0, [sp, #12]
 8003e64:	9600      	str	r6, [sp, #0]
 8003e66:	f002 fc6f 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, "TCP Transmit Test Done:");
 8003e6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003e6c:	2217      	movs	r2, #23
 8003e6e:	49a0      	ldr	r1, [pc, #640]	; (80040f0 <print_tcp_tx_results+0x2fc>)
 8003e70:	9803      	ldr	r0, [sp, #12]
 8003e72:	9600      	str	r6, [sp, #0]
 8003e74:	f002 fc68 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003e78:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003e7a:	2207      	movs	r2, #7
 8003e7c:	499d      	ldr	r1, [pc, #628]	; (80040f4 <print_tcp_tx_results+0x300>)
 8003e7e:	9803      	ldr	r0, [sp, #12]
 8003e80:	9600      	str	r6, [sp, #0]
 8003e82:	f002 fc61 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003e86:	9a03      	ldr	r2, [sp, #12]
 8003e88:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003e8a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003e8c:	499a      	ldr	r1, [pc, #616]	; (80040f8 <print_tcp_tx_results+0x304>)
 8003e8e:	4610      	mov	r0, r2
 8003e90:	9600      	str	r6, [sp, #0]
 8003e92:	2207      	movs	r2, #7
 8003e94:	f002 fc58 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003e98:	9a03      	ldr	r2, [sp, #12]
 8003e9a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003e9c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003e9e:	4997      	ldr	r1, [pc, #604]	; (80040fc <print_tcp_tx_results+0x308>)
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	9600      	str	r6, [sp, #0]
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	f002 fc4f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8003eaa:	9a03      	ldr	r2, [sp, #12]
 8003eac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8003eae:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8003eb0:	498b      	ldr	r1, [pc, #556]	; (80040e0 <print_tcp_tx_results+0x2ec>)
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	9600      	str	r6, [sp, #0]
 8003eb6:	221a      	movs	r2, #26
 8003eb8:	f002 fc46 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8003ebc:	9a03      	ldr	r2, [sp, #12]
 8003ebe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8003ec0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8003ec2:	4988      	ldr	r1, [pc, #544]	; (80040e4 <print_tcp_tx_results+0x2f0>)
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	9600      	str	r6, [sp, #0]
 8003ec8:	2204      	movs	r2, #4
 8003eca:	f002 fc3d 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003ece:	9a03      	ldr	r2, [sp, #12]
 8003ed0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8003ed2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003ed4:	4984      	ldr	r1, [pc, #528]	; (80040e8 <print_tcp_tx_results+0x2f4>)
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	9600      	str	r6, [sp, #0]
 8003eda:	2204      	movs	r2, #4
 8003edc:	f002 fc34 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003ee0:	9a03      	ldr	r2, [sp, #12]
 8003ee2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003ee4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003ee6:	4981      	ldr	r1, [pc, #516]	; (80040ec <print_tcp_tx_results+0x2f8>)
 8003ee8:	4610      	mov	r0, r2
 8003eea:	9600      	str	r6, [sp, #0]
 8003eec:	222a      	movs	r2, #42	; 0x2a
 8003eee:	f002 fc2b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 8003ef2:	9a03      	ldr	r2, [sp, #12]
 8003ef4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003ef6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 8003ef8:	4981      	ldr	r1, [pc, #516]	; (8004100 <print_tcp_tx_results+0x30c>)
 8003efa:	4610      	mov	r0, r2
 8003efc:	9600      	str	r6, [sp, #0]
 8003efe:	2218      	movs	r2, #24
 8003f00:	f002 fc22 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8003f04:	f8d8 3010 	ldr.w	r3, [r8, #16]
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 8003f08:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8003f0a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003f0e:	9300      	str	r3, [sp, #0]
    _nx_http_server_number_convert(iperf_ctrl_info.port, mytempstring);
 8003f10:	4f7c      	ldr	r7, [pc, #496]	; (8004104 <print_tcp_tx_results+0x310>)
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8003f12:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8003f16:	f7ff f933 	bl	8003180 <get_ip_addr_string>
 8003f1a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003f1e:	4682      	mov	sl, r0
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8003f26:	f7ff f92b 	bl	8003180 <get_ip_addr_string>
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8003f2a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8003f2e:	f7fc faad 	bl	800048c <strlen>
 8003f32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003f34:	4602      	mov	r2, r0
 8003f36:	4651      	mov	r1, sl
 8003f38:	9600      	str	r6, [sp, #0]
 8003f3a:	4648      	mov	r0, r9
 8003f3c:	f002 fc04 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003f40:	9a03      	ldr	r2, [sp, #12]
 8003f42:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8003f44:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003f46:	496b      	ldr	r1, [pc, #428]	; (80040f4 <print_tcp_tx_results+0x300>)
 8003f48:	4610      	mov	r0, r2
 8003f4a:	9600      	str	r6, [sp, #0]
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	f002 fbfb 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003f52:	9a03      	ldr	r2, [sp, #12]
 8003f54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003f56:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003f58:	4967      	ldr	r1, [pc, #412]	; (80040f8 <print_tcp_tx_results+0x304>)
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	9600      	str	r6, [sp, #0]
 8003f5e:	2207      	movs	r2, #7
 8003f60:	f002 fbf2 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);    
 8003f64:	9a03      	ldr	r2, [sp, #12]
 8003f66:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003f68:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);    
 8003f6a:	4964      	ldr	r1, [pc, #400]	; (80040fc <print_tcp_tx_results+0x308>)
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	9600      	str	r6, [sp, #0]
 8003f70:	2205      	movs	r2, #5
 8003f72:	f002 fbe9 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8003f76:	9a03      	ldr	r2, [sp, #12]
 8003f78:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);    
 8003f7a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8003f7c:	4959      	ldr	r1, [pc, #356]	; (80040e4 <print_tcp_tx_results+0x2f0>)
 8003f7e:	4610      	mov	r0, r2
 8003f80:	9600      	str	r6, [sp, #0]
 8003f82:	2204      	movs	r2, #4
 8003f84:	f002 fbe0 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003f88:	9a03      	ldr	r2, [sp, #12]
 8003f8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8003f8c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003f8e:	4956      	ldr	r1, [pc, #344]	; (80040e8 <print_tcp_tx_results+0x2f4>)
 8003f90:	4610      	mov	r0, r2
 8003f92:	9600      	str	r6, [sp, #0]
 8003f94:	2204      	movs	r2, #4
 8003f96:	f002 fbd7 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003f9a:	9a03      	ldr	r2, [sp, #12]
 8003f9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8003f9e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003fa0:	4952      	ldr	r1, [pc, #328]	; (80040ec <print_tcp_tx_results+0x2f8>)
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	9600      	str	r6, [sp, #0]
 8003fa6:	222a      	movs	r2, #42	; 0x2a
 8003fa8:	f002 fbce 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Destination Port: ");
 8003fac:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8003fae:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Destination Port: ");
 8003fb0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4954      	ldr	r1, [pc, #336]	; (8004108 <print_tcp_tx_results+0x314>)
 8003fb6:	2212      	movs	r2, #18
 8003fb8:	9600      	str	r6, [sp, #0]
 8003fba:	f002 fbc5 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.port, mytempstring);
 8003fbe:	4953      	ldr	r1, [pc, #332]	; (800410c <print_tcp_tx_results+0x318>)
    status += htmlwrite(resp_packet_ptr, "Destination Port: ");
 8003fc0:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.port, mytempstring);
 8003fc2:	69f8      	ldr	r0, [r7, #28]
 8003fc4:	f007 f97c 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003fc8:	4850      	ldr	r0, [pc, #320]	; (800410c <print_tcp_tx_results+0x318>)
 8003fca:	f7fc fa5f 	bl	800048c <strlen>
 8003fce:	9903      	ldr	r1, [sp, #12]
 8003fd0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	9600      	str	r6, [sp, #0]
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	494c      	ldr	r1, [pc, #304]	; (800410c <print_tcp_tx_results+0x318>)
 8003fda:	f002 fbb5 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003fde:	9a03      	ldr	r2, [sp, #12]
 8003fe0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8003fe2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003fe4:	4943      	ldr	r1, [pc, #268]	; (80040f4 <print_tcp_tx_results+0x300>)
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	9600      	str	r6, [sp, #0]
 8003fea:	2207      	movs	r2, #7
 8003fec:	f002 fbac 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003ff0:	9a03      	ldr	r2, [sp, #12]
 8003ff2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8003ff4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8003ff6:	4940      	ldr	r1, [pc, #256]	; (80040f8 <print_tcp_tx_results+0x304>)
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	9600      	str	r6, [sp, #0]
 8003ffc:	2207      	movs	r2, #7
 8003ffe:	f002 fba3 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004002:	9a03      	ldr	r2, [sp, #12]
 8004004:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004006:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004008:	493c      	ldr	r1, [pc, #240]	; (80040fc <print_tcp_tx_results+0x308>)
 800400a:	4610      	mov	r0, r2
 800400c:	9600      	str	r6, [sp, #0]
 800400e:	2205      	movs	r2, #5
 8004010:	f002 fb9a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8004014:	9a03      	ldr	r2, [sp, #12]
 8004016:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004018:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 800401a:	4932      	ldr	r1, [pc, #200]	; (80040e4 <print_tcp_tx_results+0x2f0>)
 800401c:	4610      	mov	r0, r2
 800401e:	9600      	str	r6, [sp, #0]
 8004020:	2204      	movs	r2, #4
 8004022:	f002 fb91 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8004026:	9a03      	ldr	r2, [sp, #12]
 8004028:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 800402a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 800402c:	492e      	ldr	r1, [pc, #184]	; (80040e8 <print_tcp_tx_results+0x2f4>)
 800402e:	4610      	mov	r0, r2
 8004030:	9600      	str	r6, [sp, #0]
 8004032:	2204      	movs	r2, #4
 8004034:	f002 fb88 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004038:	9a03      	ldr	r2, [sp, #12]
 800403a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 800403c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 800403e:	492b      	ldr	r1, [pc, #172]	; (80040ec <print_tcp_tx_results+0x2f8>)
 8004040:	4610      	mov	r0, r2
 8004042:	9600      	str	r6, [sp, #0]
 8004044:	222a      	movs	r2, #42	; 0x2a
 8004046:	f002 fb7f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 800404a:	9a03      	ldr	r2, [sp, #12]
 800404c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 800404e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8004050:	492f      	ldr	r1, [pc, #188]	; (8004110 <print_tcp_tx_results+0x31c>)
 8004052:	4610      	mov	r0, r2
 8004054:	9600      	str	r6, [sp, #0]
 8004056:	2219      	movs	r2, #25
 8004058:	f002 fb76 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 800405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405e:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <print_tcp_tx_results+0x320>)
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8004060:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8004062:	fb08 f003 	mul.w	r0, r8, r3
 8004066:	4929      	ldr	r1, [pc, #164]	; (800410c <print_tcp_tx_results+0x318>)
 8004068:	fba2 3000 	umull	r3, r0, r2, r0
 800406c:	0940      	lsrs	r0, r0, #5
 800406e:	f007 f927 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);   
 8004072:	4826      	ldr	r0, [pc, #152]	; (800410c <print_tcp_tx_results+0x318>)
 8004074:	f7fc fa0a 	bl	800048c <strlen>
 8004078:	9903      	ldr	r1, [sp, #12]
 800407a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800407c:	4602      	mov	r2, r0
 800407e:	9600      	str	r6, [sp, #0]
 8004080:	4608      	mov	r0, r1
 8004082:	4922      	ldr	r1, [pc, #136]	; (800410c <print_tcp_tx_results+0x318>)
 8004084:	f002 fb60 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004088:	9a03      	ldr	r2, [sp, #12]
 800408a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);   
 800408c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800408e:	4919      	ldr	r1, [pc, #100]	; (80040f4 <print_tcp_tx_results+0x300>)
 8004090:	4610      	mov	r0, r2
 8004092:	9600      	str	r6, [sp, #0]
 8004094:	2207      	movs	r2, #7
 8004096:	f002 fb57 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800409a:	9a03      	ldr	r2, [sp, #12]
 800409c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800409e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80040a0:	4915      	ldr	r1, [pc, #84]	; (80040f8 <print_tcp_tx_results+0x304>)
 80040a2:	4610      	mov	r0, r2
 80040a4:	9600      	str	r6, [sp, #0]
 80040a6:	2207      	movs	r2, #7
 80040a8:	f002 fb4e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 80040ac:	9a03      	ldr	r2, [sp, #12]
 80040ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80040b0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 80040b2:	4912      	ldr	r1, [pc, #72]	; (80040fc <print_tcp_tx_results+0x308>)
 80040b4:	4610      	mov	r0, r2
 80040b6:	9600      	str	r6, [sp, #0]
 80040b8:	2205      	movs	r2, #5
 80040ba:	f002 fb45 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 80040be:	9a03      	ldr	r2, [sp, #12]
 80040c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 80040c2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 80040c4:	4907      	ldr	r1, [pc, #28]	; (80040e4 <print_tcp_tx_results+0x2f0>)
 80040c6:	4610      	mov	r0, r2
 80040c8:	9600      	str	r6, [sp, #0]
 80040ca:	2204      	movs	r2, #4
 80040cc:	f002 fb3c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 80040d0:	9a03      	ldr	r2, [sp, #12]
 80040d2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 80040d4:	4404      	add	r4, r0
 80040d6:	e021      	b.n	800411c <print_tcp_tx_results+0x328>
 80040d8:	08025174 	.word	0x08025174
 80040dc:	080251a4 	.word	0x080251a4
 80040e0:	080251b8 	.word	0x080251b8
 80040e4:	080251d4 	.word	0x080251d4
 80040e8:	080251dc 	.word	0x080251dc
 80040ec:	080251e4 	.word	0x080251e4
 80040f0:	080252c0 	.word	0x080252c0
 80040f4:	08025228 	.word	0x08025228
 80040f8:	080248fc 	.word	0x080248fc
 80040fc:	08024904 	.word	0x08024904
 8004100:	080252d8 	.word	0x080252d8
 8004104:	20004b6c 	.word	0x20004b6c
 8004108:	080252f4 	.word	0x080252f4
 800410c:	20001630 	.word	0x20001630
 8004110:	08025244 	.word	0x08025244
 8004114:	51eb851f 	.word	0x51eb851f
 8004118:	20001610 	.word	0x20001610
    status += htmlwrite(resp_packet_ptr, tdtag);
 800411c:	49b0      	ldr	r1, [pc, #704]	; (80043e0 <print_tcp_tx_results+0x5ec>)
 800411e:	4610      	mov	r0, r2
 8004120:	9600      	str	r6, [sp, #0]
 8004122:	2204      	movs	r2, #4
 8004124:	f002 fb10 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004128:	9a03      	ldr	r2, [sp, #12]
 800412a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 800412c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 800412e:	49ad      	ldr	r1, [pc, #692]	; (80043e4 <print_tcp_tx_results+0x5f0>)
 8004130:	4610      	mov	r0, r2
 8004132:	9600      	str	r6, [sp, #0]
 8004134:	222a      	movs	r2, #42	; 0x2a
 8004136:	f002 fb07 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Packets Transmitted: ");
 800413a:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, fonttag);
 800413c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Packets Transmitted: ");
 800413e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004140:	4610      	mov	r0, r2
 8004142:	49a9      	ldr	r1, [pc, #676]	; (80043e8 <print_tcp_tx_results+0x5f4>)
 8004144:	221f      	movs	r2, #31
 8004146:	9600      	str	r6, [sp, #0]
 8004148:	f002 fafe 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsTxed, mytempstring);
 800414c:	49a7      	ldr	r1, [pc, #668]	; (80043ec <print_tcp_tx_results+0x5f8>)
    status += htmlwrite(resp_packet_ptr, "Number of Packets Transmitted: ");
 800414e:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsTxed, mytempstring);
 8004150:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004152:	f007 f8b5 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 8004156:	48a5      	ldr	r0, [pc, #660]	; (80043ec <print_tcp_tx_results+0x5f8>)
 8004158:	f7fc f998 	bl	800048c <strlen>
 800415c:	9903      	ldr	r1, [sp, #12]
 800415e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004160:	4602      	mov	r2, r0
 8004162:	9600      	str	r6, [sp, #0]
 8004164:	4608      	mov	r0, r1
 8004166:	49a1      	ldr	r1, [pc, #644]	; (80043ec <print_tcp_tx_results+0x5f8>)
 8004168:	f002 faee 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800416c:	9a03      	ldr	r2, [sp, #12]
 800416e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 8004170:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004172:	499f      	ldr	r1, [pc, #636]	; (80043f0 <print_tcp_tx_results+0x5fc>)
 8004174:	4610      	mov	r0, r2
 8004176:	9600      	str	r6, [sp, #0]
 8004178:	2207      	movs	r2, #7
 800417a:	f002 fae5 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800417e:	9a03      	ldr	r2, [sp, #12]
 8004180:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004182:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004184:	499b      	ldr	r1, [pc, #620]	; (80043f4 <print_tcp_tx_results+0x600>)
 8004186:	4610      	mov	r0, r2
 8004188:	9600      	str	r6, [sp, #0]
 800418a:	2207      	movs	r2, #7
 800418c:	f002 fadc 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004190:	9a03      	ldr	r2, [sp, #12]
 8004192:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004194:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004196:	4998      	ldr	r1, [pc, #608]	; (80043f8 <print_tcp_tx_results+0x604>)
 8004198:	4610      	mov	r0, r2
 800419a:	9600      	str	r6, [sp, #0]
 800419c:	2205      	movs	r2, #5
 800419e:	f002 fad3 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 80041a2:	9a03      	ldr	r2, [sp, #12]
 80041a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 80041a6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 80041a8:	4994      	ldr	r1, [pc, #592]	; (80043fc <print_tcp_tx_results+0x608>)
 80041aa:	4610      	mov	r0, r2
 80041ac:	9600      	str	r6, [sp, #0]
 80041ae:	2204      	movs	r2, #4
 80041b0:	f002 faca 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 80041b4:	9a03      	ldr	r2, [sp, #12]
 80041b6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 80041b8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 80041ba:	4989      	ldr	r1, [pc, #548]	; (80043e0 <print_tcp_tx_results+0x5ec>)
 80041bc:	4610      	mov	r0, r2
 80041be:	9600      	str	r6, [sp, #0]
 80041c0:	2204      	movs	r2, #4
 80041c2:	f002 fac1 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 80041c6:	9a03      	ldr	r2, [sp, #12]
 80041c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 80041ca:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 80041cc:	4985      	ldr	r1, [pc, #532]	; (80043e4 <print_tcp_tx_results+0x5f0>)
 80041ce:	4610      	mov	r0, r2
 80041d0:	9600      	str	r6, [sp, #0]
 80041d2:	222a      	movs	r2, #42	; 0x2a
 80041d4:	f002 fab8 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Transmitted: ");
 80041d8:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, fonttag);
 80041da:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Transmitted: ");
 80041dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80041de:	4610      	mov	r0, r2
 80041e0:	4987      	ldr	r1, [pc, #540]	; (8004400 <print_tcp_tx_results+0x60c>)
 80041e2:	221d      	movs	r2, #29
 80041e4:	9600      	str	r6, [sp, #0]
 80041e6:	f002 faaf 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.BytesTxed, mytempstring);
 80041ea:	4980      	ldr	r1, [pc, #512]	; (80043ec <print_tcp_tx_results+0x5f8>)
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Transmitted: ");
 80041ec:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.BytesTxed, mytempstring);
 80041ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041f0:	f007 f866 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 80041f4:	487d      	ldr	r0, [pc, #500]	; (80043ec <print_tcp_tx_results+0x5f8>)
 80041f6:	f7fc f949 	bl	800048c <strlen>
 80041fa:	9903      	ldr	r1, [sp, #12]
 80041fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80041fe:	4602      	mov	r2, r0
 8004200:	9600      	str	r6, [sp, #0]
 8004202:	4608      	mov	r0, r1
 8004204:	4979      	ldr	r1, [pc, #484]	; (80043ec <print_tcp_tx_results+0x5f8>)
 8004206:	f002 fa9f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800420a:	9a03      	ldr	r2, [sp, #12]
 800420c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 800420e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004210:	4977      	ldr	r1, [pc, #476]	; (80043f0 <print_tcp_tx_results+0x5fc>)
 8004212:	4610      	mov	r0, r2
 8004214:	9600      	str	r6, [sp, #0]
 8004216:	2207      	movs	r2, #7
 8004218:	f002 fa96 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800421c:	9a03      	ldr	r2, [sp, #12]
 800421e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004220:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004222:	4974      	ldr	r1, [pc, #464]	; (80043f4 <print_tcp_tx_results+0x600>)
 8004224:	4610      	mov	r0, r2
 8004226:	9600      	str	r6, [sp, #0]
 8004228:	2207      	movs	r2, #7
 800422a:	f002 fa8d 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 800422e:	9a03      	ldr	r2, [sp, #12]
 8004230:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004232:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004234:	4970      	ldr	r1, [pc, #448]	; (80043f8 <print_tcp_tx_results+0x604>)
 8004236:	4610      	mov	r0, r2
 8004238:	9600      	str	r6, [sp, #0]
 800423a:	2205      	movs	r2, #5
 800423c:	f002 fa84 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8004240:	9a03      	ldr	r2, [sp, #12]
 8004242:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004244:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8004246:	496d      	ldr	r1, [pc, #436]	; (80043fc <print_tcp_tx_results+0x608>)
 8004248:	4610      	mov	r0, r2
 800424a:	9600      	str	r6, [sp, #0]
 800424c:	2204      	movs	r2, #4
 800424e:	f002 fa7b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8004252:	9a03      	ldr	r2, [sp, #12]
 8004254:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8004256:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8004258:	4961      	ldr	r1, [pc, #388]	; (80043e0 <print_tcp_tx_results+0x5ec>)
 800425a:	4610      	mov	r0, r2
 800425c:	9600      	str	r6, [sp, #0]
 800425e:	2204      	movs	r2, #4
 8004260:	f002 fa72 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004264:	9a03      	ldr	r2, [sp, #12]
 8004266:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8004268:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 800426a:	495e      	ldr	r1, [pc, #376]	; (80043e4 <print_tcp_tx_results+0x5f0>)
 800426c:	4610      	mov	r0, r2
 800426e:	9600      	str	r6, [sp, #0]
 8004270:	222a      	movs	r2, #42	; 0x2a
 8004272:	f002 fa69 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps): ");
 8004276:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004278:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps): ");
 800427a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800427c:	4610      	mov	r0, r2
 800427e:	4961      	ldr	r1, [pc, #388]	; (8004404 <print_tcp_tx_results+0x610>)
 8004280:	2212      	movs	r2, #18
 8004282:	9600      	str	r6, [sp, #0]
 8004284:	f002 fa60 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.ThroughPut, mytempstring);   
 8004288:	4958      	ldr	r1, [pc, #352]	; (80043ec <print_tcp_tx_results+0x5f8>)
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps): ");
 800428a:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.ThroughPut, mytempstring);   
 800428c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800428e:	f007 f817 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 8004292:	4856      	ldr	r0, [pc, #344]	; (80043ec <print_tcp_tx_results+0x5f8>)
 8004294:	f7fc f8fa 	bl	800048c <strlen>
 8004298:	9903      	ldr	r1, [sp, #12]
 800429a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800429c:	4602      	mov	r2, r0
 800429e:	9600      	str	r6, [sp, #0]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4952      	ldr	r1, [pc, #328]	; (80043ec <print_tcp_tx_results+0x5f8>)
 80042a4:	f002 fa50 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80042a8:	9a03      	ldr	r2, [sp, #12]
 80042aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 80042ac:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80042ae:	4950      	ldr	r1, [pc, #320]	; (80043f0 <print_tcp_tx_results+0x5fc>)
 80042b0:	4610      	mov	r0, r2
 80042b2:	9600      	str	r6, [sp, #0]
 80042b4:	2207      	movs	r2, #7
 80042b6:	f002 fa47 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80042ba:	9a03      	ldr	r2, [sp, #12]
 80042bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80042be:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80042c0:	494c      	ldr	r1, [pc, #304]	; (80043f4 <print_tcp_tx_results+0x600>)
 80042c2:	4610      	mov	r0, r2
 80042c4:	9600      	str	r6, [sp, #0]
 80042c6:	2207      	movs	r2, #7
 80042c8:	f002 fa3e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 80042cc:	9a03      	ldr	r2, [sp, #12]
 80042ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80042d0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 80042d2:	4949      	ldr	r1, [pc, #292]	; (80043f8 <print_tcp_tx_results+0x604>)
 80042d4:	4610      	mov	r0, r2
 80042d6:	9600      	str	r6, [sp, #0]
 80042d8:	2205      	movs	r2, #5
 80042da:	f002 fa35 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 80042de:	9a03      	ldr	r2, [sp, #12]
 80042e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 80042e2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 80042e4:	4945      	ldr	r1, [pc, #276]	; (80043fc <print_tcp_tx_results+0x608>)
 80042e6:	4610      	mov	r0, r2
 80042e8:	9600      	str	r6, [sp, #0]
 80042ea:	2204      	movs	r2, #4
 80042ec:	f002 fa2c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 80042f0:	9a03      	ldr	r2, [sp, #12]
 80042f2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 80042f4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 80042f6:	493a      	ldr	r1, [pc, #232]	; (80043e0 <print_tcp_tx_results+0x5ec>)
 80042f8:	4610      	mov	r0, r2
 80042fa:	9600      	str	r6, [sp, #0]
 80042fc:	2204      	movs	r2, #4
 80042fe:	f002 fa23 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004302:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, tdtag);
 8004304:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004306:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004308:	4610      	mov	r0, r2
 800430a:	4936      	ldr	r1, [pc, #216]	; (80043e4 <print_tcp_tx_results+0x5f0>)
 800430c:	222a      	movs	r2, #42	; 0x2a
 800430e:	9600      	str	r6, [sp, #0]
 8004310:	f002 fa1a 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.idleTime, mytempstring);
 8004314:	4935      	ldr	r1, [pc, #212]	; (80043ec <print_tcp_tx_results+0x5f8>)
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004316:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.idleTime, mytempstring);
 8004318:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800431a:	f006 ffd1 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, "Idle Time: ");
 800431e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004320:	220b      	movs	r2, #11
 8004322:	4939      	ldr	r1, [pc, #228]	; (8004408 <print_tcp_tx_results+0x614>)
 8004324:	9803      	ldr	r0, [sp, #12]
 8004326:	9600      	str	r6, [sp, #0]
 8004328:	f002 fa0e 	bl	8006748 <_nx_packet_data_append>
 800432c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, mytempstring);
 800432e:	482f      	ldr	r0, [pc, #188]	; (80043ec <print_tcp_tx_results+0x5f8>)
 8004330:	f7fc f8ac 	bl	800048c <strlen>
 8004334:	9903      	ldr	r1, [sp, #12]
 8004336:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004338:	4602      	mov	r2, r0
 800433a:	9600      	str	r6, [sp, #0]
 800433c:	4608      	mov	r0, r1
 800433e:	492b      	ldr	r1, [pc, #172]	; (80043ec <print_tcp_tx_results+0x5f8>)
 8004340:	f002 fa02 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "%");   
 8004344:	9a03      	ldr	r2, [sp, #12]
 8004346:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8004348:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "%");   
 800434a:	4930      	ldr	r1, [pc, #192]	; (800440c <print_tcp_tx_results+0x618>)
 800434c:	4610      	mov	r0, r2
 800434e:	9600      	str	r6, [sp, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	f002 f9f9 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004356:	9a03      	ldr	r2, [sp, #12]
 8004358:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, "%");   
 800435a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800435c:	4924      	ldr	r1, [pc, #144]	; (80043f0 <print_tcp_tx_results+0x5fc>)
 800435e:	4610      	mov	r0, r2
 8004360:	9600      	str	r6, [sp, #0]
 8004362:	2207      	movs	r2, #7
 8004364:	f002 f9f0 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004368:	9a03      	ldr	r2, [sp, #12]
 800436a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800436c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800436e:	4921      	ldr	r1, [pc, #132]	; (80043f4 <print_tcp_tx_results+0x600>)
 8004370:	4610      	mov	r0, r2
 8004372:	9600      	str	r6, [sp, #0]
 8004374:	2207      	movs	r2, #7
 8004376:	f002 f9e7 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 800437a:	9a03      	ldr	r2, [sp, #12]
 800437c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800437e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004380:	491d      	ldr	r1, [pc, #116]	; (80043f8 <print_tcp_tx_results+0x604>)
 8004382:	4610      	mov	r0, r2
 8004384:	9600      	str	r6, [sp, #0]
 8004386:	2205      	movs	r2, #5
 8004388:	f002 f9de 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 800438c:	9a03      	ldr	r2, [sp, #12]
 800438e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004390:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 8004392:	491f      	ldr	r1, [pc, #124]	; (8004410 <print_tcp_tx_results+0x61c>)
 8004394:	4610      	mov	r0, r2
 8004396:	9600      	str	r6, [sp, #0]
 8004398:	2208      	movs	r2, #8
 800439a:	f002 f9d5 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800439e:	9a03      	ldr	r2, [sp, #12]
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 80043a0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80043a2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80043a4:	4610      	mov	r0, r2
 80043a6:	4913      	ldr	r1, [pc, #76]	; (80043f4 <print_tcp_tx_results+0x600>)
 80043a8:	2207      	movs	r2, #7
 80043aa:	9600      	str	r6, [sp, #0]
 80043ac:	f002 f9cc 	bl	8006748 <_nx_packet_data_append>
 80043b0:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 80043b2:	4642      	mov	r2, r8
 80043b4:	f505 7016 	add.w	r0, r5, #600	; 0x258
 80043b8:	9903      	ldr	r1, [sp, #12]
 80043ba:	f003 fe43 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 80043be:	42c4      	cmn	r4, r0
 80043c0:	d006      	beq.n	80043d0 <print_tcp_tx_results+0x5dc>
        nx_packet_release(resp_packet_ptr);
 80043c2:	9803      	ldr	r0, [sp, #12]
 80043c4:	f002 fb14 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 80043c8:	4a12      	ldr	r2, [pc, #72]	; (8004414 <print_tcp_tx_results+0x620>)
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	6013      	str	r3, [r2, #0]
    nx_tcp_socket_disconnect(&tcp_client_socket, NX_NO_WAIT);
 80043d0:	2100      	movs	r1, #0
 80043d2:	4811      	ldr	r0, [pc, #68]	; (8004418 <print_tcp_tx_results+0x624>)
 80043d4:	f003 faea 	bl	80079ac <_nx_tcp_socket_disconnect>
    nx_tcp_client_socket_unbind(&tcp_client_socket);
 80043d8:	480f      	ldr	r0, [pc, #60]	; (8004418 <print_tcp_tx_results+0x624>)
 80043da:	f002 fc85 	bl	8006ce8 <_nx_tcp_client_socket_unbind>
 80043de:	e01d      	b.n	800441c <print_tcp_tx_results+0x628>
 80043e0:	080251dc 	.word	0x080251dc
 80043e4:	080251e4 	.word	0x080251e4
 80043e8:	08025308 	.word	0x08025308
 80043ec:	20001630 	.word	0x20001630
 80043f0:	08025228 	.word	0x08025228
 80043f4:	080248fc 	.word	0x080248fc
 80043f8:	08024904 	.word	0x08024904
 80043fc:	080251d4 	.word	0x080251d4
 8004400:	08025328 	.word	0x08025328
 8004404:	0802529c 	.word	0x0802529c
 8004408:	080252b0 	.word	0x080252b0
 800440c:	080252bc 	.word	0x080252bc
 8004410:	08025168 	.word	0x08025168
 8004414:	20004bd0 	.word	0x20004bd0
 8004418:	2000775c 	.word	0x2000775c
    nx_tcp_socket_delete(&tcp_client_socket);
 800441c:	4805      	ldr	r0, [pc, #20]	; (8004434 <print_tcp_tx_results+0x640>)
 800441e:	f003 fa7b 	bl	8007918 <_nx_tcp_socket_delete>
    tx_thread_terminate(&thread_tcp_tx_iperf);
 8004422:	4805      	ldr	r0, [pc, #20]	; (8004438 <print_tcp_tx_results+0x644>)
 8004424:	f019 fcc2 	bl	801ddac <_txe_thread_terminate>
    tx_thread_delete(&thread_tcp_tx_iperf); 
 8004428:	4803      	ldr	r0, [pc, #12]	; (8004438 <print_tcp_tx_results+0x644>)
 800442a:	f019 fc6b 	bl	801dd04 <_txe_thread_delete>
}
 800442e:	b004      	add	sp, #16
 8004430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004434:	2000775c 	.word	0x2000775c
 8004438:	20001790 	.word	0x20001790

0800443c <nx_test_info_parse>:
{
 800443c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    switch ((iperf_ctrlInfo_ptr-> ctrl_sign) & CTRL_SIGN_MASK)
 8004440:	4c9d      	ldr	r4, [pc, #628]	; (80046b8 <nx_test_info_parse+0x27c>)
{
 8004442:	b08b      	sub	sp, #44	; 0x2c
    switch ((iperf_ctrlInfo_ptr-> ctrl_sign) & CTRL_SIGN_MASK)
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	f892 3020 	ldrb.w	r3, [r2, #32]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	3b01      	subs	r3, #1
 8004450:	2b0b      	cmp	r3, #11
 8004452:	d831      	bhi.n	80044b8 <nx_test_info_parse+0x7c>
 8004454:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004458:	0030000c 	.word	0x0030000c
 800445c:	00300073 	.word	0x00300073
 8004460:	00300097 	.word	0x00300097
 8004464:	003000d1 	.word	0x003000d1
 8004468:	00300030 	.word	0x00300030
 800446c:	00330030 	.word	0x00330030
            if(iperf_ctrlInfo_ptr -> TestTime == 0)
 8004470:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004472:	b91b      	cbnz	r3, 800447c <nx_test_info_parse+0x40>
                iperf_ctrlInfo_ptr -> TestTime = 10 * NX_IP_PERIODIC_RATE;
 8004474:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004478:	460b      	mov	r3, r1
 800447a:	64d1      	str	r1, [r2, #76]	; 0x4c
            tcp_rx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 800447c:	4c8f      	ldr	r4, [pc, #572]	; (80046bc <nx_test_info_parse+0x280>)
    status = tx_thread_create(&thread_tcp_rx_iperf, "thread tcp rx", 
 800447e:	2201      	movs	r2, #1
            tcp_rx_test(_iperf_stack_area, _iperf_stack_area_size);
 8004480:	498f      	ldr	r1, [pc, #572]	; (80046c0 <nx_test_info_parse+0x284>)
    status = tx_thread_create(&thread_tcp_rx_iperf, "thread tcp rx", 
 8004482:	20c8      	movs	r0, #200	; 0xc8
            tcp_rx_test(_iperf_stack_area, _iperf_stack_area_size);
 8004484:	4d8f      	ldr	r5, [pc, #572]	; (80046c4 <nx_test_info_parse+0x288>)
            tcp_rx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 8004486:	fba4 4303 	umull	r4, r3, r4, r3
    status = tx_thread_create(&thread_tcp_rx_iperf, "thread tcp rx", 
 800448a:	680f      	ldr	r7, [r1, #0]
 800448c:	2100      	movs	r1, #0
 800448e:	682e      	ldr	r6, [r5, #0]
            tcp_rx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 8004490:	095c      	lsrs	r4, r3, #5
 8004492:	4d8d      	ldr	r5, [pc, #564]	; (80046c8 <nx_test_info_parse+0x28c>)
    status = tx_thread_create(&thread_tcp_rx_iperf, "thread tcp rx", 
 8004494:	9104      	str	r1, [sp, #16]
 8004496:	4b8d      	ldr	r3, [pc, #564]	; (80046cc <nx_test_info_parse+0x290>)
 8004498:	498d      	ldr	r1, [pc, #564]	; (80046d0 <nx_test_info_parse+0x294>)
 800449a:	e9cd 2005 	strd	r2, r0, [sp, #20]
 800449e:	e9cd 2202 	strd	r2, r2, [sp, #8]
 80044a2:	e9cd 6700 	strd	r6, r7, [sp]
 80044a6:	4a8b      	ldr	r2, [pc, #556]	; (80046d4 <nx_test_info_parse+0x298>)
 80044a8:	488b      	ldr	r0, [pc, #556]	; (80046d8 <nx_test_info_parse+0x29c>)
            tcp_rx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 80044aa:	602c      	str	r4, [r5, #0]
    status = tx_thread_create(&thread_tcp_rx_iperf, "thread tcp rx", 
 80044ac:	f019 fb72 	bl	801db94 <_txe_thread_create>
    if (status)
 80044b0:	b110      	cbz	r0, 80044b8 <nx_test_info_parse+0x7c>
        iperf_ctrl_info.ErrorCode = 1;
 80044b2:	4b86      	ldr	r3, [pc, #536]	; (80046cc <nx_test_info_parse+0x290>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24
}   
 80044b8:	b00b      	add	sp, #44	; 0x2c
 80044ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(iperf_ctrlInfo_ptr -> ip == 0)
 80044be:	6893      	ldr	r3, [r2, #8]
 80044c0:	b90b      	cbnz	r3, 80044c6 <nx_test_info_parse+0x8a>
                iperf_ctrlInfo_ptr -> ip = DEFAULT_IPERF_IP;
 80044c2:	4b86      	ldr	r3, [pc, #536]	; (80046dc <nx_test_info_parse+0x2a0>)
 80044c4:	6093      	str	r3, [r2, #8]
            if(iperf_ctrlInfo_ptr -> PingRate == 0)
 80044c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80044c8:	b90b      	cbnz	r3, 80044ce <nx_test_info_parse+0x92>
                iperf_ctrlInfo_ptr -> PingRate = 10;
 80044ca:	230a      	movs	r3, #10
 80044cc:	62d3      	str	r3, [r2, #44]	; 0x2c
            if(iperf_ctrlInfo_ptr -> TotalPings == 0)
 80044ce:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	f040 80e2 	bne.w	800469a <nx_test_info_parse+0x25e>
                iperf_ctrlInfo_ptr -> TotalPings = 4;
 80044d6:	2304      	movs	r3, #4
    iperf_ctrlInfo_ptr -> TestStatus = 1;
 80044d8:	2101      	movs	r1, #1
    iperf_ctrlInfo_ptr -> PacketsTxed = 0;
 80044da:	e9c2 550d 	strd	r5, r5, [r2, #52]	; 0x34
    iperf_ctrlInfo_ptr -> TestStatus = 1;
 80044de:	461d      	mov	r5, r3
                iperf_ctrlInfo_ptr -> TotalPings = 4;
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
    iperf_ctrlInfo_ptr -> TestStatus = 1;
 80044e2:	65d1      	str	r1, [r2, #92]	; 0x5c
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8004728 <nx_test_info_parse+0x2ec>
 80044ea:	f10d 0824 	add.w	r8, sp, #36	; 0x24
        status = nx_icmp_ping(_iperf_test_ip, iperf_ctrlInfo_ptr -> ip, "abcd", 4, &response_ptr, 1);
 80044ee:	2701      	movs	r7, #1
 80044f0:	4e7b      	ldr	r6, [pc, #492]	; (80046e0 <nx_test_info_parse+0x2a4>)
 80044f2:	e005      	b.n	8004500 <nx_test_info_parse+0xc4>
        tx_thread_sleep(iperf_ctrlInfo_ptr -> PingRate);
 80044f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80044f6:	f018 fe87 	bl	801d208 <_tx_thread_sleep>
    while(counter)
 80044fa:	b1d5      	cbz	r5, 8004532 <nx_test_info_parse+0xf6>
 80044fc:	6822      	ldr	r2, [r4, #0]
 80044fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
        iperf_ctrlInfo_ptr -> PacketsTxed++;      
 8004500:	f103 0c01 	add.w	ip, r3, #1
        status = nx_icmp_ping(_iperf_test_ip, iperf_ctrlInfo_ptr -> ip, "abcd", 4, &response_ptr, 1);
 8004504:	6891      	ldr	r1, [r2, #8]
 8004506:	2304      	movs	r3, #4
 8004508:	f8d9 0000 	ldr.w	r0, [r9]
        iperf_ctrlInfo_ptr -> PacketsTxed++;      
 800450c:	f8c2 c034 	str.w	ip, [r2, #52]	; 0x34
        status = nx_icmp_ping(_iperf_test_ip, iperf_ctrlInfo_ptr -> ip, "abcd", 4, &response_ptr, 1);
 8004510:	4632      	mov	r2, r6
        counter--;  
 8004512:	3d01      	subs	r5, #1
        status = nx_icmp_ping(_iperf_test_ip, iperf_ctrlInfo_ptr -> ip, "abcd", 4, &response_ptr, 1);
 8004514:	e9cd 8700 	strd	r8, r7, [sp]
 8004518:	f00a fff2 	bl	800f500 <_nx_icmp_ping>
            iperf_ctrlInfo_ptr -> PacketsRxed++;                         
 800451c:	6823      	ldr	r3, [r4, #0]
        if(status == NX_SUCCESS)      
 800451e:	2800      	cmp	r0, #0
 8004520:	d1e8      	bne.n	80044f4 <nx_test_info_parse+0xb8>
            iperf_ctrlInfo_ptr -> PacketsRxed++;                         
 8004522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        tx_thread_sleep(iperf_ctrlInfo_ptr -> PingRate);
 8004524:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
            iperf_ctrlInfo_ptr -> PacketsRxed++;                         
 8004526:	3201      	adds	r2, #1
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
        tx_thread_sleep(iperf_ctrlInfo_ptr -> PingRate);
 800452a:	f018 fe6d 	bl	801d208 <_tx_thread_sleep>
    while(counter)
 800452e:	2d00      	cmp	r5, #0
 8004530:	d1e4      	bne.n	80044fc <nx_test_info_parse+0xc0>
    iperf_ctrlInfo_ptr -> TestStatus = 2;
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	2202      	movs	r2, #2
 8004536:	65da      	str	r2, [r3, #92]	; 0x5c
}   
 8004538:	b00b      	add	sp, #44	; 0x2c
 800453a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(iperf_ctrlInfo_ptr -> TestTime == 0)
 800453e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004540:	b91b      	cbnz	r3, 800454a <nx_test_info_parse+0x10e>
                iperf_ctrlInfo_ptr -> TestTime = 10 * NX_IP_PERIODIC_RATE;
 8004542:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004546:	460b      	mov	r3, r1
 8004548:	64d1      	str	r1, [r2, #76]	; 0x4c
            udp_rx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 800454a:	4c5c      	ldr	r4, [pc, #368]	; (80046bc <nx_test_info_parse+0x280>)
    status = tx_thread_create(&thread_udp_rx_iperf, "thread udp rx",
 800454c:	2101      	movs	r1, #1
            udp_rx_test(_iperf_stack_area, _iperf_stack_area_size);
 800454e:	4a5c      	ldr	r2, [pc, #368]	; (80046c0 <nx_test_info_parse+0x284>)
    status = tx_thread_create(&thread_udp_rx_iperf, "thread udp rx",
 8004550:	27c8      	movs	r7, #200	; 0xc8
            udp_rx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 8004552:	fba4 4303 	umull	r4, r3, r4, r3
            udp_rx_test(_iperf_stack_area, _iperf_stack_area_size);
 8004556:	485b      	ldr	r0, [pc, #364]	; (80046c4 <nx_test_info_parse+0x288>)
    status = tx_thread_create(&thread_udp_rx_iperf, "thread udp rx",
 8004558:	6816      	ldr	r6, [r2, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	6800      	ldr	r0, [r0, #0]
            udp_rx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 800455e:	095c      	lsrs	r4, r3, #5
 8004560:	4d60      	ldr	r5, [pc, #384]	; (80046e4 <nx_test_info_parse+0x2a8>)
    status = tx_thread_create(&thread_udp_rx_iperf, "thread udp rx",
 8004562:	2311      	movs	r3, #17
 8004564:	e9cd 0600 	strd	r0, r6, [sp]
 8004568:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800456c:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8004570:	9302      	str	r3, [sp, #8]
 8004572:	4a5d      	ldr	r2, [pc, #372]	; (80046e8 <nx_test_info_parse+0x2ac>)
 8004574:	4b55      	ldr	r3, [pc, #340]	; (80046cc <nx_test_info_parse+0x290>)
 8004576:	495d      	ldr	r1, [pc, #372]	; (80046ec <nx_test_info_parse+0x2b0>)
 8004578:	485d      	ldr	r0, [pc, #372]	; (80046f0 <nx_test_info_parse+0x2b4>)
            udp_rx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 800457a:	602c      	str	r4, [r5, #0]
    status = tx_thread_create(&thread_udp_rx_iperf, "thread udp rx",
 800457c:	f019 fb0a 	bl	801db94 <_txe_thread_create>
    if (status)
 8004580:	2800      	cmp	r0, #0
 8004582:	d196      	bne.n	80044b2 <nx_test_info_parse+0x76>
 8004584:	e798      	b.n	80044b8 <nx_test_info_parse+0x7c>
            if(iperf_ctrlInfo_ptr -> TestTime == 0)
 8004586:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004588:	b91b      	cbnz	r3, 8004592 <nx_test_info_parse+0x156>
                iperf_ctrlInfo_ptr -> TestTime = 10 * NX_IP_PERIODIC_RATE;
 800458a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800458e:	460b      	mov	r3, r1
 8004590:	64d1      	str	r1, [r2, #76]	; 0x4c
            tcp_tx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 8004592:	494a      	ldr	r1, [pc, #296]	; (80046bc <nx_test_info_parse+0x280>)
            if (iperf_ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 8004594:	6850      	ldr	r0, [r2, #4]
            tcp_tx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 8004596:	fba1 1303 	umull	r1, r3, r1, r3
 800459a:	4c56      	ldr	r4, [pc, #344]	; (80046f4 <nx_test_info_parse+0x2b8>)
            if (iperf_ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 800459c:	2804      	cmp	r0, #4
                tcp_tx_ip_address.nxd_ip_address.v4 = iperf_ctrlInfo_ptr -> ip;
 800459e:	4956      	ldr	r1, [pc, #344]	; (80046f8 <nx_test_info_parse+0x2bc>)
            tcp_tx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 80045a0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80045a4:	6023      	str	r3, [r4, #0]
            if (iperf_ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 80045a6:	f000 8083 	beq.w	80046b0 <nx_test_info_parse+0x274>
                tcp_tx_ip_address.nxd_ip_address.v6[2] = iperf_ctrlInfo_ptr -> ipv6[2];
 80045aa:	6954      	ldr	r4, [r2, #20]
                tcp_tx_ip_address.nxd_ip_version = NX_IP_VERSION_V6;
 80045ac:	2006      	movs	r0, #6
                tcp_tx_ip_address.nxd_ip_address.v6[1] = iperf_ctrlInfo_ptr -> ipv6[1];
 80045ae:	e9d2 3503 	ldrd	r3, r5, [r2, #12]
                tcp_tx_ip_address.nxd_ip_address.v6[0] = iperf_ctrlInfo_ptr -> ipv6[0];  
 80045b2:	604b      	str	r3, [r1, #4]
                tcp_tx_ip_address.nxd_ip_address.v6[3] = iperf_ctrlInfo_ptr -> ipv6[3];
 80045b4:	6993      	ldr	r3, [r2, #24]
                tcp_tx_ip_address.nxd_ip_address.v6[2] = iperf_ctrlInfo_ptr -> ipv6[2];
 80045b6:	e9c1 5402 	strd	r5, r4, [r1, #8]
                tcp_tx_ip_address.nxd_ip_address.v6[3] = iperf_ctrlInfo_ptr -> ipv6[3];
 80045ba:	610b      	str	r3, [r1, #16]
            tcp_tx_test(_iperf_stack_area, _iperf_stack_area_size);
 80045bc:	4b40      	ldr	r3, [pc, #256]	; (80046c0 <nx_test_info_parse+0x284>)
    status = tx_thread_create(&thread_tcp_tx_iperf, "thread tcp tx", 
 80045be:	2401      	movs	r4, #1
            tcp_tx_test(_iperf_stack_area, _iperf_stack_area_size);
 80045c0:	4d40      	ldr	r5, [pc, #256]	; (80046c4 <nx_test_info_parse+0x288>)
    status = tx_thread_create(&thread_tcp_tx_iperf, "thread tcp tx", 
 80045c2:	27c8      	movs	r7, #200	; 0xc8
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2600      	movs	r6, #0
 80045c8:	f8d5 c000 	ldr.w	ip, [r5]
            tcp_tx_port = iperf_ctrlInfo_ptr -> port;
 80045cc:	69d5      	ldr	r5, [r2, #28]
    status = tx_thread_create(&thread_tcp_tx_iperf, "thread tcp tx", 
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	2311      	movs	r3, #17
 80045d2:	f8cd c000 	str.w	ip, [sp]
 80045d6:	9302      	str	r3, [sp, #8]
 80045d8:	4a48      	ldr	r2, [pc, #288]	; (80046fc <nx_test_info_parse+0x2c0>)
 80045da:	e9cd 4705 	strd	r4, r7, [sp, #20]
            tcp_tx_port = iperf_ctrlInfo_ptr -> port;
 80045de:	4c48      	ldr	r4, [pc, #288]	; (8004700 <nx_test_info_parse+0x2c4>)
    status = tx_thread_create(&thread_tcp_tx_iperf, "thread tcp tx", 
 80045e0:	e9cd 3603 	strd	r3, r6, [sp, #12]
 80045e4:	6008      	str	r0, [r1, #0]
 80045e6:	4b39      	ldr	r3, [pc, #228]	; (80046cc <nx_test_info_parse+0x290>)
 80045e8:	4946      	ldr	r1, [pc, #280]	; (8004704 <nx_test_info_parse+0x2c8>)
 80045ea:	4847      	ldr	r0, [pc, #284]	; (8004708 <nx_test_info_parse+0x2cc>)
            tcp_tx_port = iperf_ctrlInfo_ptr -> port;
 80045ec:	6025      	str	r5, [r4, #0]
    status = tx_thread_create(&thread_tcp_tx_iperf, "thread tcp tx", 
 80045ee:	f019 fad1 	bl	801db94 <_txe_thread_create>
    if (status)
 80045f2:	2800      	cmp	r0, #0
 80045f4:	f47f af5d 	bne.w	80044b2 <nx_test_info_parse+0x76>
 80045f8:	e75e      	b.n	80044b8 <nx_test_info_parse+0x7c>
            if(iperf_ctrlInfo_ptr -> TestTime == 0)
 80045fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d047      	beq.n	8004690 <nx_test_info_parse+0x254>
 8004600:	492e      	ldr	r1, [pc, #184]	; (80046bc <nx_test_info_parse+0x280>)
 8004602:	fba1 1303 	umull	r1, r3, r1, r3
 8004606:	0959      	lsrs	r1, r3, #5
            udp_tx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 8004608:	4840      	ldr	r0, [pc, #256]	; (800470c <nx_test_info_parse+0x2d0>)
            if(iperf_ctrlInfo_ptr -> PacketSize == 0)
 800460a:	6d53      	ldr	r3, [r2, #84]	; 0x54
            udp_tx_test_time = (iperf_ctrlInfo_ptr -> TestTime) / NX_IP_PERIODIC_RATE;
 800460c:	6001      	str	r1, [r0, #0]
            if(iperf_ctrlInfo_ptr -> PacketSize == 0)
 800460e:	2b00      	cmp	r3, #0
 8004610:	d137      	bne.n	8004682 <nx_test_info_parse+0x246>
                iperf_ctrlInfo_ptr -> PacketSize = 10 * NX_IP_PERIODIC_RATE;
 8004612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004616:	6553      	str	r3, [r2, #84]	; 0x54
            if (iperf_ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 8004618:	6851      	ldr	r1, [r2, #4]
            udp_tx_packet_size = iperf_ctrlInfo_ptr -> PacketSize;
 800461a:	483d      	ldr	r0, [pc, #244]	; (8004710 <nx_test_info_parse+0x2d4>)
            udp_tx_port = iperf_ctrlInfo_ptr -> port;
 800461c:	4c3d      	ldr	r4, [pc, #244]	; (8004714 <nx_test_info_parse+0x2d8>)
            if (iperf_ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 800461e:	2904      	cmp	r1, #4
            udp_tx_port = iperf_ctrlInfo_ptr -> port;
 8004620:	69d5      	ldr	r5, [r2, #28]
            udp_tx_packet_size = iperf_ctrlInfo_ptr -> PacketSize;
 8004622:	6003      	str	r3, [r0, #0]
            udp_tx_port = iperf_ctrlInfo_ptr -> port;
 8004624:	6025      	str	r5, [r4, #0]
            if (iperf_ctrlInfo_ptr -> version == NX_IP_VERSION_V4)
 8004626:	d03e      	beq.n	80046a6 <nx_test_info_parse+0x26a>
                udp_tx_ip_address.nxd_ip_version = NX_IP_VERSION_V6;
 8004628:	493b      	ldr	r1, [pc, #236]	; (8004718 <nx_test_info_parse+0x2dc>)
 800462a:	2606      	movs	r6, #6
                udp_tx_ip_address.nxd_ip_address.v6[0] = iperf_ctrlInfo_ptr -> ipv6[0];  
 800462c:	68d5      	ldr	r5, [r2, #12]
                if (udp_tx_packet_size > 1450)
 800462e:	f240 54aa 	movw	r4, #1450	; 0x5aa
                udp_tx_ip_address.nxd_ip_address.v6[0] = iperf_ctrlInfo_ptr -> ipv6[0];  
 8004632:	e9c1 6500 	strd	r6, r5, [r1]
                udp_tx_ip_address.nxd_ip_address.v6[2] = iperf_ctrlInfo_ptr -> ipv6[2];
 8004636:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
                if (udp_tx_packet_size > 1450)
 800463a:	42a3      	cmp	r3, r4
                udp_tx_ip_address.nxd_ip_address.v6[2] = iperf_ctrlInfo_ptr -> ipv6[2];
 800463c:	e9c1 6502 	strd	r6, r5, [r1, #8]
                udp_tx_ip_address.nxd_ip_address.v6[3] = iperf_ctrlInfo_ptr -> ipv6[3];    
 8004640:	6995      	ldr	r5, [r2, #24]
                    udp_tx_packet_size = 1450; 
 8004642:	bf88      	it	hi
 8004644:	6004      	strhi	r4, [r0, #0]
                udp_tx_ip_address.nxd_ip_address.v6[3] = iperf_ctrlInfo_ptr -> ipv6[3];    
 8004646:	610d      	str	r5, [r1, #16]
            if(iperf_ctrlInfo_ptr -> Rate == 0)
 8004648:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800464a:	b90b      	cbnz	r3, 8004650 <nx_test_info_parse+0x214>
                iperf_ctrlInfo_ptr -> Rate = 10;
 800464c:	230a      	movs	r3, #10
 800464e:	6593      	str	r3, [r2, #88]	; 0x58
            udp_tx_test(_iperf_stack_area, _iperf_stack_area_size);
 8004650:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <nx_test_info_parse+0x284>)

void  udp_tx_test(UCHAR* stack_space, ULONG stack_size)
{
    UINT         status;      

    status = tx_thread_create(&thread_udp_tx_iperf, "thread udp tx", 
 8004652:	20c8      	movs	r0, #200	; 0xc8
            udp_tx_test(_iperf_stack_area, _iperf_stack_area_size);
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <nx_test_info_parse+0x288>)
    status = tx_thread_create(&thread_udp_tx_iperf, "thread udp tx", 
 8004656:	2101      	movs	r1, #1
 8004658:	6815      	ldr	r5, [r2, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	681c      	ldr	r4, [r3, #0]
 800465e:	2311      	movs	r3, #17
 8004660:	e9cd 1005 	strd	r1, r0, [sp, #20]
 8004664:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004668:	9302      	str	r3, [sp, #8]
 800466a:	4a2c      	ldr	r2, [pc, #176]	; (800471c <nx_test_info_parse+0x2e0>)
 800466c:	4b17      	ldr	r3, [pc, #92]	; (80046cc <nx_test_info_parse+0x290>)
 800466e:	492c      	ldr	r1, [pc, #176]	; (8004720 <nx_test_info_parse+0x2e4>)
 8004670:	482c      	ldr	r0, [pc, #176]	; (8004724 <nx_test_info_parse+0x2e8>)
 8004672:	e9cd 4500 	strd	r4, r5, [sp]
 8004676:	f019 fa8d 	bl	801db94 <_txe_thread_create>
                              thread_udp_tx_entry,
                              (ULONG)&iperf_ctrl_info, 
                              stack_space, stack_size, NX_HTTP_SERVER_PRIORITY + 1, NX_HTTP_SERVER_PRIORITY + 1, 
                              TX_NO_TIME_SLICE, TX_AUTO_START);

    if (status)
 800467a:	2800      	cmp	r0, #0
 800467c:	f47f af19 	bne.w	80044b2 <nx_test_info_parse+0x76>
 8004680:	e71a      	b.n	80044b8 <nx_test_info_parse+0x7c>
            else if(iperf_ctrlInfo_ptr -> PacketSize > 1470)
 8004682:	f240 51be 	movw	r1, #1470	; 0x5be
 8004686:	428b      	cmp	r3, r1
 8004688:	d9c6      	bls.n	8004618 <nx_test_info_parse+0x1dc>
                iperf_ctrlInfo_ptr -> PacketSize = 1470;
 800468a:	460b      	mov	r3, r1
 800468c:	6551      	str	r1, [r2, #84]	; 0x54
 800468e:	e7c3      	b.n	8004618 <nx_test_info_parse+0x1dc>
                iperf_ctrlInfo_ptr -> TestTime =  10 * NX_IP_PERIODIC_RATE;
 8004690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004694:	210a      	movs	r1, #10
 8004696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004698:	e7b6      	b.n	8004608 <nx_test_info_parse+0x1cc>
    iperf_ctrlInfo_ptr -> PacketsRxed = 0;
 800469a:	2300      	movs	r3, #0
    iperf_ctrlInfo_ptr -> TestStatus = 1;
 800469c:	2101      	movs	r1, #1
    iperf_ctrlInfo_ptr -> PacketsTxed = 0;
 800469e:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
    iperf_ctrlInfo_ptr -> TestStatus = 1;
 80046a2:	65d1      	str	r1, [r2, #92]	; 0x5c
 80046a4:	e71e      	b.n	80044e4 <nx_test_info_parse+0xa8>
                udp_tx_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <nx_test_info_parse+0x2dc>)
                udp_tx_ip_address.nxd_ip_address.v4 = iperf_ctrlInfo_ptr -> ip;
 80046a8:	6890      	ldr	r0, [r2, #8]
 80046aa:	e9c3 1000 	strd	r1, r0, [r3]
 80046ae:	e7cb      	b.n	8004648 <nx_test_info_parse+0x20c>
                tcp_tx_ip_address.nxd_ip_address.v4 = iperf_ctrlInfo_ptr -> ip;
 80046b0:	6893      	ldr	r3, [r2, #8]
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	e782      	b.n	80045bc <nx_test_info_parse+0x180>
 80046b6:	bf00      	nop
 80046b8:	20004bd4 	.word	0x20004bd4
 80046bc:	51eb851f 	.word	0x51eb851f
 80046c0:	20004b60 	.word	0x20004b60
 80046c4:	20007754 	.word	0x20007754
 80046c8:	20000010 	.word	0x20000010
 80046cc:	20004b6c 	.word	0x20004b6c
 80046d0:	0802174c 	.word	0x0802174c
 80046d4:	080027b5 	.word	0x080027b5
 80046d8:	200016c8 	.word	0x200016c8
 80046dc:	c0a80006 	.word	0xc0a80006
 80046e0:	0802178c 	.word	0x0802178c
 80046e4:	2000001c 	.word	0x2000001c
 80046e8:	08002d1d 	.word	0x08002d1d
 80046ec:	0802176c 	.word	0x0802176c
 80046f0:	20001860 	.word	0x20001860
 80046f4:	20000018 	.word	0x20000018
 80046f8:	200016b4 	.word	0x200016b4
 80046fc:	080029d1 	.word	0x080029d1
 8004700:	20000014 	.word	0x20000014
 8004704:	0802175c 	.word	0x0802175c
 8004708:	20001790 	.word	0x20001790
 800470c:	20000028 	.word	0x20000028
 8004710:	20000020 	.word	0x20000020
 8004714:	20000024 	.word	0x20000024
 8004718:	200019f0 	.word	0x200019f0
 800471c:	08002f69 	.word	0x08002f69
 8004720:	0802177c 	.word	0x0802177c
 8004724:	20001928 	.word	0x20001928
 8004728:	20004b68 	.word	0x20004b68

0800472c <my_get_notify>:
{
 800472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004730:	b09f      	sub	sp, #124	; 0x7c
 8004732:	4606      	mov	r6, r0
 8004734:	4690      	mov	r8, r2
    memset(&new_cmd, 0, sizeof(ctrl_info));    
 8004736:	2100      	movs	r1, #0
 8004738:	2264      	movs	r2, #100	; 0x64
 800473a:	a805      	add	r0, sp, #20
{
 800473c:	461f      	mov	r7, r3
    udp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 800473e:	f8df b308 	ldr.w	fp, [pc, #776]	; 8004a48 <my_get_notify+0x31c>
    memset(&new_cmd, 0, sizeof(ctrl_info));    
 8004742:	f019 ff2a 	bl	801e59a <memset>
    udp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 8004746:	f506 7c1b 	add.w	ip, r6, #620	; 0x26c
 800474a:	465d      	mov	r5, fp
    tcp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 800474c:	4ca7      	ldr	r4, [pc, #668]	; (80049ec <my_get_notify+0x2c0>)
 800474e:	46e6      	mov	lr, ip
    udp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 8004750:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    tcp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 8004756:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    udp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 800475a:	f8dc c000 	ldr.w	ip, [ip]
    tcp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 800475e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if((strcmp(resource,"/test.htm") == 0) || 
 8004760:	4640      	mov	r0, r8
 8004762:	49a3      	ldr	r1, [pc, #652]	; (80049f0 <my_get_notify+0x2c4>)
    udp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 8004764:	f8c5 c000 	str.w	ip, [r5]
    tcp_tx_ip_address = server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_ip;
 8004768:	f8c4 c000 	str.w	ip, [r4]
    if((strcmp(resource,"/test.htm") == 0) || 
 800476c:	f7fb fe84 	bl	8000478 <strcmp>
 8004770:	b1d0      	cbz	r0, 80047a8 <my_get_notify+0x7c>
       ((strlen(resource) == 1) && *resource == '/'))
 8004772:	4640      	mov	r0, r8
 8004774:	f7fb fe8a 	bl	800048c <strlen>
    if((strcmp(resource,"/test.htm") == 0) || 
 8004778:	2801      	cmp	r0, #1
 800477a:	d011      	beq.n	80047a0 <my_get_notify+0x74>
    if(strcmp(resource,"/nxlogo.png")==0)
 800477c:	499d      	ldr	r1, [pc, #628]	; (80049f4 <my_get_notify+0x2c8>)
 800477e:	4640      	mov	r0, r8
 8004780:	f7fb fe7a 	bl	8000478 <strcmp>
 8004784:	2800      	cmp	r0, #0
 8004786:	f000 81f0 	beq.w	8004b6a <my_get_notify+0x43e>
    if(strcmp(resource,"/ellogo.jpg")==0)
 800478a:	4640      	mov	r0, r8
 800478c:	499a      	ldr	r1, [pc, #616]	; (80049f8 <my_get_notify+0x2cc>)
 800478e:	f7fb fe73 	bl	8000478 <strcmp>
 8004792:	2800      	cmp	r0, #0
 8004794:	f000 82bd 	beq.w	8004d12 <my_get_notify+0x5e6>
   return(NX_SUCCESS);
 8004798:	2000      	movs	r0, #0
}
 800479a:	b01f      	add	sp, #124	; 0x7c
 800479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       ((strlen(resource) == 1) && *resource == '/'))
 80047a0:	f898 3000 	ldrb.w	r3, [r8]
 80047a4:	2b2f      	cmp	r3, #47	; 0x2f
 80047a6:	d1e9      	bne.n	800477c <my_get_notify+0x50>
        nx_http_server_query_get(packet_ptr, 0, string, sizeof(string));
 80047a8:	2364      	movs	r3, #100	; 0x64
 80047aa:	4a94      	ldr	r2, [pc, #592]	; (80049fc <my_get_notify+0x2d0>)
 80047ac:	2100      	movs	r1, #0
 80047ae:	4638      	mov	r0, r7
 80047b0:	f006 fb6c 	bl	800ae8c <_nx_http_server_query_get>
        iperf_ctrlInfo_ptr = &iperf_ctrl_info;
 80047b4:	4c92      	ldr	r4, [pc, #584]	; (8004a00 <my_get_notify+0x2d4>)
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
        iperf_ctrlInfo_ptr = &iperf_ctrl_info;
 80047ba:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8004a3c <my_get_notify+0x310>
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 80047be:	a904      	add	r1, sp, #16
 80047c0:	224c      	movs	r2, #76	; 0x4c
 80047c2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, htmlresponse);
 80047c4:	461d      	mov	r5, r3
        iperf_ctrlInfo_ptr = &iperf_ctrl_info;
 80047c6:	f8c4 9000 	str.w	r9, [r4]
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 80047ca:	f001 ff5f 	bl	800668c <_nx_packet_allocate>
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 80047ce:	f506 7116 	add.w	r1, r6, #600	; 0x258
    status += htmlwrite(resp_packet_ptr, htmlresponse);
 80047d2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 80047d4:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, htmlresponse);
 80047d6:	222a      	movs	r2, #42	; 0x2a
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 80047d8:	9102      	str	r1, [sp, #8]
    status += htmlwrite(resp_packet_ptr, htmlresponse);
 80047da:	9804      	ldr	r0, [sp, #16]
 80047dc:	4989      	ldr	r1, [pc, #548]	; (8004a04 <my_get_notify+0x2d8>)
 80047de:	9500      	str	r5, [sp, #0]
 80047e0:	f001 ffb2 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, htmltag);
 80047e4:	9a04      	ldr	r2, [sp, #16]
 80047e6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, htmlresponse);
 80047e8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, htmltag);
 80047ea:	4987      	ldr	r1, [pc, #540]	; (8004a08 <my_get_notify+0x2dc>)
 80047ec:	4610      	mov	r0, r2
 80047ee:	9500      	str	r5, [sp, #0]
 80047f0:	2206      	movs	r2, #6
 80047f2:	f001 ffa9 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, titleline);
 80047f6:	9a04      	ldr	r2, [sp, #16]
 80047f8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, htmltag);
 80047fa:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, titleline);
 80047fc:	4983      	ldr	r1, [pc, #524]	; (8004a0c <my_get_notify+0x2e0>)
 80047fe:	4610      	mov	r0, r2
 8004800:	9500      	str	r5, [sp, #0]
 8004802:	2236      	movs	r2, #54	; 0x36
 8004804:	f001 ffa0 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, bodytag);
 8004808:	9a04      	ldr	r2, [sp, #16]
 800480a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, titleline);
 800480c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, bodytag);
 800480e:	4980      	ldr	r1, [pc, #512]	; (8004a10 <my_get_notify+0x2e4>)
 8004810:	4610      	mov	r0, r2
 8004812:	9500      	str	r5, [sp, #0]
 8004814:	221a      	movs	r2, #26
 8004816:	f001 ff97 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, logo_area);
 800481a:	9a04      	ldr	r2, [sp, #16]
 800481c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, bodytag);
 800481e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, logo_area);
 8004820:	497c      	ldr	r1, [pc, #496]	; (8004a14 <my_get_notify+0x2e8>)
 8004822:	4610      	mov	r0, r2
 8004824:	9500      	str	r5, [sp, #0]
 8004826:	22b0      	movs	r2, #176	; 0xb0
 8004828:	f001 ff8e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, hrline);
 800482c:	9a04      	ldr	r2, [sp, #16]
 800482e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, logo_area);
 8004830:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, hrline);
 8004832:	4979      	ldr	r1, [pc, #484]	; (8004a18 <my_get_notify+0x2ec>)
 8004834:	4610      	mov	r0, r2
 8004836:	9500      	str	r5, [sp, #0]
 8004838:	222f      	movs	r2, #47	; 0x2f
 800483a:	f001 ff85 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, centertag);
 800483e:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, hrline);
 8004840:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, centertag);
 8004842:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004844:	4610      	mov	r0, r2
 8004846:	4975      	ldr	r1, [pc, #468]	; (8004a1c <my_get_notify+0x2f0>)
 8004848:	2216      	movs	r2, #22
 800484a:	9500      	str	r5, [sp, #0]
 800484c:	f001 ff7c 	bl	8006748 <_nx_packet_data_append>
 8004850:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 8004852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004856:	9802      	ldr	r0, [sp, #8]
 8004858:	9904      	ldr	r1, [sp, #16]
 800485a:	f003 fbf3 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 800485e:	42c4      	cmn	r4, r0
 8004860:	d006      	beq.n	8004870 <my_get_notify+0x144>
        nx_packet_release(resp_packet_ptr);
 8004862:	9804      	ldr	r0, [sp, #16]
 8004864:	f002 f8c4 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8004868:	4a6d      	ldr	r2, [pc, #436]	; (8004a20 <my_get_notify+0x2f4>)
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	6013      	str	r3, [r2, #0]
        parse_command(packet_ptr, &new_cmd);
 8004870:	e9d7 3102 	ldrd	r3, r1, [r7, #8]
    cmd_string += (strlen("GET /test.htm?"));
 8004874:	f103 070e 	add.w	r7, r3, #14
    while(end_cmd < packet_ptr -> nx_packet_append_ptr)
 8004878:	42b9      	cmp	r1, r7
 800487a:	f240 85ef 	bls.w	800545c <my_get_notify+0xd30>
        if(*end_cmd == ' ')
 800487e:	7b9a      	ldrb	r2, [r3, #14]
 8004880:	2a20      	cmp	r2, #32
 8004882:	f000 85eb 	beq.w	800545c <my_get_notify+0xd30>
 8004886:	330f      	adds	r3, #15
 8004888:	e002      	b.n	8004890 <my_get_notify+0x164>
 800488a:	782a      	ldrb	r2, [r5, #0]
 800488c:	2a20      	cmp	r2, #32
 800488e:	d004      	beq.n	800489a <my_get_notify+0x16e>
    while(end_cmd < packet_ptr -> nx_packet_append_ptr)
 8004890:	4299      	cmp	r1, r3
        end_cmd++;
 8004892:	461d      	mov	r5, r3
 8004894:	f103 0301 	add.w	r3, r3, #1
    while(end_cmd < packet_ptr -> nx_packet_append_ptr)
 8004898:	d1f7      	bne.n	800488a <my_get_notify+0x15e>
    *end_cmd = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	46ba      	mov	sl, r7
 800489e:	702b      	strb	r3, [r5, #0]
    while(next_token < end_cmd)
 80048a0:	45aa      	cmp	sl, r5
 80048a2:	d268      	bcs.n	8004976 <my_get_notify+0x24a>
            if(*next_token == '=')
 80048a4:	f89a 3000 	ldrb.w	r3, [sl]
 80048a8:	2b3d      	cmp	r3, #61	; 0x3d
 80048aa:	f000 809d 	beq.w	80049e8 <my_get_notify+0x2bc>
 80048ae:	f10a 0301 	add.w	r3, sl, #1
 80048b2:	e002      	b.n	80048ba <my_get_notify+0x18e>
 80048b4:	7822      	ldrb	r2, [r4, #0]
 80048b6:	2a3d      	cmp	r2, #61	; 0x3d
 80048b8:	d006      	beq.n	80048c8 <my_get_notify+0x19c>
            next_token++;
 80048ba:	461c      	mov	r4, r3
 80048bc:	3301      	adds	r3, #1
        while(next_token < end_cmd)
 80048be:	42a5      	cmp	r5, r4
 80048c0:	d1f8      	bne.n	80048b4 <my_get_notify+0x188>
        if(*next_token == '=')
 80048c2:	782b      	ldrb	r3, [r5, #0]
 80048c4:	2b3d      	cmp	r3, #61	; 0x3d
 80048c6:	d156      	bne.n	8004976 <my_get_notify+0x24a>
            *next_token = 0;
 80048c8:	4627      	mov	r7, r4
 80048ca:	2300      	movs	r3, #0
 80048cc:	f807 3b01 	strb.w	r3, [r7], #1
            while(next_token < end_cmd)
 80048d0:	42af      	cmp	r7, r5
 80048d2:	f080 81da 	bcs.w	8004c8a <my_get_notify+0x55e>
                if(*next_token == '&')
 80048d6:	7863      	ldrb	r3, [r4, #1]
 80048d8:	2b26      	cmp	r3, #38	; 0x26
 80048da:	f000 81ca 	beq.w	8004c72 <my_get_notify+0x546>
 80048de:	1ca3      	adds	r3, r4, #2
 80048e0:	e004      	b.n	80048ec <my_get_notify+0x1c0>
 80048e2:	f898 2000 	ldrb.w	r2, [r8]
 80048e6:	2a26      	cmp	r2, #38	; 0x26
 80048e8:	f000 81c4 	beq.w	8004c74 <my_get_notify+0x548>
            while(next_token < end_cmd)
 80048ec:	429d      	cmp	r5, r3
                next_token++;
 80048ee:	4698      	mov	r8, r3
 80048f0:	f103 0301 	add.w	r3, r3, #1
            while(next_token < end_cmd)
 80048f4:	d1f5      	bne.n	80048e2 <my_get_notify+0x1b6>
 80048f6:	2208      	movs	r2, #8
 80048f8:	494a      	ldr	r1, [pc, #296]	; (8004a24 <my_get_notify+0x2f8>)
 80048fa:	4650      	mov	r0, sl
 80048fc:	f019 ff26 	bl	801e74c <strncmp>
            if(value_ptr == next_token)
 8004900:	4547      	cmp	r7, r8
 8004902:	4603      	mov	r3, r0
 8004904:	f000 81c7 	beq.w	8004c96 <my_get_notify+0x56a>
            next_token++;
 8004908:	f108 0801 	add.w	r8, r8, #1
    if(strncmp(token, "TestType", strlen("TestType")) == 0)
 800490c:	2800      	cmp	r0, #0
 800490e:	f040 8103 	bne.w	8004b18 <my_get_notify+0x3ec>
        ctrl_info_ptr -> ctrl_sign = UNKNOWN_TEST;
 8004912:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
        if(value_ptr)
 8004916:	2f00      	cmp	r7, #0
 8004918:	f001 82d0 	beq.w	8005ebc <my_get_notify+0x1790>
            if(strncmp(value_ptr, TCP_Rx, strlen(TCP_Rx)) == 0)
 800491c:	2206      	movs	r2, #6
 800491e:	4942      	ldr	r1, [pc, #264]	; (8004a28 <my_get_notify+0x2fc>)
 8004920:	4638      	mov	r0, r7
 8004922:	f019 ff13 	bl	801e74c <strncmp>
 8004926:	2800      	cmp	r0, #0
 8004928:	f000 8572 	beq.w	8005410 <my_get_notify+0xce4>
            else if(strncmp(value_ptr, TCP_Tx, strlen(TCP_Tx)) == 0)
 800492c:	2206      	movs	r2, #6
 800492e:	493f      	ldr	r1, [pc, #252]	; (8004a2c <my_get_notify+0x300>)
 8004930:	4638      	mov	r0, r7
 8004932:	f019 ff0b 	bl	801e74c <strncmp>
 8004936:	2800      	cmp	r0, #0
 8004938:	f000 859b 	beq.w	8005472 <my_get_notify+0xd46>
            else if(strncmp(value_ptr, UDP_Rx, strlen(UDP_Rx)) == 0)
 800493c:	2206      	movs	r2, #6
 800493e:	493c      	ldr	r1, [pc, #240]	; (8004a30 <my_get_notify+0x304>)
 8004940:	4638      	mov	r0, r7
 8004942:	f019 ff03 	bl	801e74c <strncmp>
 8004946:	2800      	cmp	r0, #0
 8004948:	f001 835a 	beq.w	8006000 <my_get_notify+0x18d4>
            else if(strncmp(value_ptr, UDP_Tx, strlen(UDP_Tx)) == 0)
 800494c:	2206      	movs	r2, #6
 800494e:	4939      	ldr	r1, [pc, #228]	; (8004a34 <my_get_notify+0x308>)
 8004950:	4638      	mov	r0, r7
 8004952:	f019 fefb 	bl	801e74c <strncmp>
 8004956:	2800      	cmp	r0, #0
 8004958:	f001 837c 	beq.w	8006054 <my_get_notify+0x1928>
            else if(strncmp(value_ptr, Ping_Test, strlen(Ping_Test)) == 0)
 800495c:	4638      	mov	r0, r7
 800495e:	2209      	movs	r2, #9
 8004960:	4935      	ldr	r1, [pc, #212]	; (8004a38 <my_get_notify+0x30c>)
 8004962:	f019 fef3 	bl	801e74c <strncmp>
 8004966:	2800      	cmp	r0, #0
 8004968:	f041 82a8 	bne.w	8005ebc <my_get_notify+0x1790>
                ctrl_info_ptr -> ctrl_sign = PING_TEST;   
 800496c:	230c      	movs	r3, #12
            next_token++;
 800496e:	46c2      	mov	sl, r8
                ctrl_info_ptr -> ctrl_sign = PING_TEST;   
 8004970:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8004974:	e794      	b.n	80048a0 <my_get_notify+0x174>
        if(new_cmd.ctrl_sign)
 8004976:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800497a:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d064      	beq.n	8004a4c <my_get_notify+0x320>
 8004982:	f899 3020 	ldrb.w	r3, [r9, #32]
            if((iperf_ctrl_info.TestStatus != 0) || ((iperf_ctrl_info.ctrl_sign & CLEAN_UP_MASK) == 1))
 8004986:	2a00      	cmp	r2, #0
 8004988:	f040 810a 	bne.w	8004ba0 <my_get_notify+0x474>
 800498c:	07da      	lsls	r2, r3, #31
 800498e:	f100 8107 	bmi.w	8004ba0 <my_get_notify+0x474>
            memcpy(&iperf_ctrl_info, &new_cmd, sizeof(ctrl_info));
 8004992:	a905      	add	r1, sp, #20
 8004994:	2264      	movs	r2, #100	; 0x64
 8004996:	4829      	ldr	r0, [pc, #164]	; (8004a3c <my_get_notify+0x310>)
 8004998:	f019 fddb 	bl	801e552 <memcpy>
            nx_test_info_parse(server_ptr); 
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff fd4d 	bl	800443c <nx_test_info_parse>
            iperf_ctrl_info.TestStatus = 1;
 80049a2:	2301      	movs	r3, #1
        print_main_test_window(server_ptr);        
 80049a4:	4630      	mov	r0, r6
            iperf_ctrl_info.TestStatus = 1;
 80049a6:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
        print_main_test_window(server_ptr);        
 80049aa:	f7fe fc65 	bl	8003278 <print_main_test_window>
    if(iperf_ctrl_info.TestStatus == 0)
 80049ae:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d15c      	bne.n	8004a70 <my_get_notify+0x344>
    status += htmlwrite(resp_packet_ptr, choosetesttag);
 80049b6:	f04f 35ff 	mov.w	r5, #4294967295
    status += nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
 80049be:	224c      	movs	r2, #76	; 0x4c
 80049c0:	a904      	add	r1, sp, #16
 80049c2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80049c4:	f001 fe62 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, choosetesttag);
 80049c8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 80049ca:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, choosetesttag);
 80049cc:	2272      	movs	r2, #114	; 0x72
 80049ce:	491c      	ldr	r1, [pc, #112]	; (8004a40 <my_get_notify+0x314>)
 80049d0:	9804      	ldr	r0, [sp, #16]
 80049d2:	9500      	str	r5, [sp, #0]
 80049d4:	f001 feb8 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 80049d8:	9a04      	ldr	r2, [sp, #16]
 80049da:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, choosetesttag);
 80049dc:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 80049de:	9500      	str	r5, [sp, #0]
 80049e0:	4610      	mov	r0, r2
 80049e2:	4918      	ldr	r1, [pc, #96]	; (8004a44 <my_get_notify+0x318>)
 80049e4:	2205      	movs	r2, #5
 80049e6:	e130      	b.n	8004c4a <my_get_notify+0x51e>
            if(*next_token == '=')
 80049e8:	4654      	mov	r4, sl
 80049ea:	e76d      	b.n	80048c8 <my_get_notify+0x19c>
 80049ec:	200016b4 	.word	0x200016b4
 80049f0:	080213b8 	.word	0x080213b8
 80049f4:	08021724 	.word	0x08021724
 80049f8:	08021730 	.word	0x08021730
 80049fc:	20001650 	.word	0x20001650
 8004a00:	20004bd4 	.word	0x20004bd4
 8004a04:	080213c4 	.word	0x080213c4
 8004a08:	080213f0 	.word	0x080213f0
 8004a0c:	080213f8 	.word	0x080213f8
 8004a10:	08021430 	.word	0x08021430
 8004a14:	0802144c 	.word	0x0802144c
 8004a18:	08021500 	.word	0x08021500
 8004a1c:	08021530 	.word	0x08021530
 8004a20:	20004bd0 	.word	0x20004bd0
 8004a24:	08021548 	.word	0x08021548
 8004a28:	08021554 	.word	0x08021554
 8004a2c:	0802155c 	.word	0x0802155c
 8004a30:	08021564 	.word	0x08021564
 8004a34:	0802156c 	.word	0x0802156c
 8004a38:	08021574 	.word	0x08021574
 8004a3c:	20004b6c 	.word	0x20004b6c
 8004a40:	080215bc 	.word	0x080215bc
 8004a44:	08024904 	.word	0x08024904
 8004a48:	200019f0 	.word	0x200019f0
        if (iperf_ctrl_info.TestStatus == 0)
 8004a4c:	b94a      	cbnz	r2, 8004a62 <my_get_notify+0x336>
            if (udp_tx_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 8004a4e:	f8db 3000 	ldr.w	r3, [fp]
 8004a52:	2b04      	cmp	r3, #4
                udp_tx_packet_size = 1470; 
 8004a54:	4bba      	ldr	r3, [pc, #744]	; (8004d40 <my_get_notify+0x614>)
 8004a56:	bf0c      	ite	eq
 8004a58:	f240 52be 	movweq	r2, #1470	; 0x5be
                udp_tx_packet_size = 1450; 
 8004a5c:	f240 52aa 	movwne	r2, #1450	; 0x5aa
 8004a60:	601a      	str	r2, [r3, #0]
        print_main_test_window(server_ptr);        
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7fe fc08 	bl	8003278 <print_main_test_window>
    if(iperf_ctrl_info.TestStatus == 0)
 8004a68:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0a2      	beq.n	80049b6 <my_get_notify+0x28a>
    else if(iperf_ctrl_info.TestStatus == 1)
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f000 80ab 	beq.w	8004bcc <my_get_notify+0x4a0>
    else if(iperf_ctrl_info.TestStatus == 2)
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	f000 818c 	beq.w	8004d94 <my_get_notify+0x668>
    status += htmlwrite(resp_packet_ptr, tableendtag);/* outtermost table. */
 8004a7c:	f04f 35ff 	mov.w	r5, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8004a80:	a904      	add	r1, sp, #16
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	224c      	movs	r2, #76	; 0x4c
 8004a88:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8004a8a:	f001 fdff 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, tableendtag);/* outtermost table. */
 8004a8e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &resp_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 8004a90:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, tableendtag);/* outtermost table. */
 8004a92:	2208      	movs	r2, #8
 8004a94:	49ab      	ldr	r1, [pc, #684]	; (8004d44 <my_get_notify+0x618>)
 8004a96:	9804      	ldr	r0, [sp, #16]
 8004a98:	9500      	str	r5, [sp, #0]
 8004a9a:	f001 fe55 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, doublebr);
 8004a9e:	9a04      	ldr	r2, [sp, #16]
 8004aa0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tableendtag);/* outtermost table. */
 8004aa2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, doublebr);
 8004aa4:	49a8      	ldr	r1, [pc, #672]	; (8004d48 <my_get_notify+0x61c>)
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	9500      	str	r5, [sp, #0]
 8004aaa:	220a      	movs	r2, #10
 8004aac:	f001 fe4c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, centerendtag);
 8004ab0:	9a04      	ldr	r2, [sp, #16]
 8004ab2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, doublebr);
 8004ab4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, centerendtag);
 8004ab6:	49a5      	ldr	r1, [pc, #660]	; (8004d4c <my_get_notify+0x620>)
 8004ab8:	4610      	mov	r0, r2
 8004aba:	9500      	str	r5, [sp, #0]
 8004abc:	2209      	movs	r2, #9
 8004abe:	f001 fe43 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, bodyendtag);
 8004ac2:	9a04      	ldr	r2, [sp, #16]
 8004ac4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, centerendtag);
 8004ac6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, bodyendtag);
 8004ac8:	49a1      	ldr	r1, [pc, #644]	; (8004d50 <my_get_notify+0x624>)
 8004aca:	4610      	mov	r0, r2
 8004acc:	9500      	str	r5, [sp, #0]
 8004ace:	2209      	movs	r2, #9
 8004ad0:	f001 fe3a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, htmlendtag);
 8004ad4:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, bodyendtag);
 8004ad6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, htmlendtag);
 8004ad8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004ada:	4610      	mov	r0, r2
 8004adc:	499d      	ldr	r1, [pc, #628]	; (8004d54 <my_get_notify+0x628>)
 8004ade:	2207      	movs	r2, #7
 8004ae0:	9500      	str	r5, [sp, #0]
 8004ae2:	f001 fe31 	bl	8006748 <_nx_packet_data_append>
 8004ae6:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 8004ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aec:	9802      	ldr	r0, [sp, #8]
 8004aee:	9904      	ldr	r1, [sp, #16]
 8004af0:	f003 faa8 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 8004af4:	42c4      	cmn	r4, r0
 8004af6:	d006      	beq.n	8004b06 <my_get_notify+0x3da>
        nx_packet_release(resp_packet_ptr);
 8004af8:	9804      	ldr	r0, [sp, #16]
 8004afa:	f001 ff79 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8004afe:	4a96      	ldr	r2, [pc, #600]	; (8004d58 <my_get_notify+0x62c>)
 8004b00:	6813      	ldr	r3, [r2, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	6013      	str	r3, [r2, #0]
        if (iperf_ctrl_info.TestStatus == 1)
 8004b06:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	f000 80b6 	beq.w	8004c7c <my_get_notify+0x550>
        return(NX_HTTP_CALLBACK_COMPLETED);
 8004b10:	20e8      	movs	r0, #232	; 0xe8
}
 8004b12:	b01f      	add	sp, #124	; 0x7c
 8004b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(strncmp(token, "ip", strlen("ip")) == 0)
 8004b18:	2202      	movs	r2, #2
 8004b1a:	4990      	ldr	r1, [pc, #576]	; (8004d5c <my_get_notify+0x630>)
 8004b1c:	4650      	mov	r0, sl
 8004b1e:	f019 fe15 	bl	801e74c <strncmp>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	f000 8423 	beq.w	800536e <my_get_notify+0xc42>
    else if(strncmp(token, "test_time", strlen("test_time")) == 0)
 8004b28:	2209      	movs	r2, #9
 8004b2a:	498d      	ldr	r1, [pc, #564]	; (8004d60 <my_get_notify+0x634>)
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	f019 fe0d 	bl	801e74c <strncmp>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	f040 84f0 	bne.w	8005518 <my_get_notify+0xdec>
        ctrl_info_ptr -> TestTime = 0;
 8004b38:	9018      	str	r0, [sp, #96]	; 0x60
        while(value_ptr && (*value_ptr != 0))
 8004b3a:	b19f      	cbz	r7, 8004b64 <my_get_notify+0x438>
 8004b3c:	7862      	ldrb	r2, [r4, #1]
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	f001 82e9 	beq.w	8006116 <my_get_notify+0x19ea>
 8004b44:	4603      	mov	r3, r0
 8004b46:	e002      	b.n	8004b4e <my_get_notify+0x422>
 8004b48:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8004b4c:	b13a      	cbz	r2, 8004b5e <my_get_notify+0x432>
            ctrl_info_ptr -> TestTime = ctrl_info_ptr -> TestTime * 10 + ((UINT)(*value_ptr - '0'));
 8004b4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        while(value_ptr && (*value_ptr != 0))
 8004b52:	1c78      	adds	r0, r7, #1
            ctrl_info_ptr -> TestTime = ctrl_info_ptr -> TestTime * 10 + ((UINT)(*value_ptr - '0'));
 8004b54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004b58:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
        while(value_ptr && (*value_ptr != 0))
 8004b5c:	d1f4      	bne.n	8004b48 <my_get_notify+0x41c>
 8004b5e:	2764      	movs	r7, #100	; 0x64
 8004b60:	fb07 f703 	mul.w	r7, r7, r3
        ctrl_info_ptr -> TestTime = ctrl_info_ptr -> TestTime * NX_IP_PERIODIC_RATE;
 8004b64:	9718      	str	r7, [sp, #96]	; 0x60
 8004b66:	46c2      	mov	sl, r8
 8004b68:	e69a      	b.n	80048a0 <my_get_notify+0x174>
        send_image(server_ptr, (UCHAR*)nxlogo_png, nxlogo_png_size);
 8004b6a:	4b7e      	ldr	r3, [pc, #504]	; (8004d64 <my_get_notify+0x638>)
 8004b6c:	681c      	ldr	r4, [r3, #0]
    while(remaining)
 8004b6e:	2c00      	cmp	r4, #0
 8004b70:	d0ce      	beq.n	8004b10 <my_get_notify+0x3e4>
        if(remaining > max_size)
 8004b72:	f240 57b4 	movw	r7, #1460	; 0x5b4
    position = img;
 8004b76:	4d7c      	ldr	r5, [pc, #496]	; (8004d68 <my_get_notify+0x63c>)
        if(remaining > max_size)
 8004b78:	42bc      	cmp	r4, r7
 8004b7a:	d90a      	bls.n	8004b92 <my_get_notify+0x466>
            nx_http_server_callback_data_send(server_ptr, (void *)position, max_size);
 8004b7c:	f240 52b4 	movw	r2, #1460	; 0x5b4
            remaining -= max_size;
 8004b80:	f2a4 54b4 	subw	r4, r4, #1460	; 0x5b4
            nx_http_server_callback_data_send(server_ptr, (void *)position, max_size);
 8004b84:	4629      	mov	r1, r5
 8004b86:	4630      	mov	r0, r6
            position += max_size;
 8004b88:	4415      	add	r5, r2
            nx_http_server_callback_data_send(server_ptr, (void *)position, max_size);
 8004b8a:	f006 fa19 	bl	800afc0 <_nx_http_server_callback_data_send>
        if(remaining > max_size)
 8004b8e:	42bc      	cmp	r4, r7
 8004b90:	d8f4      	bhi.n	8004b7c <my_get_notify+0x450>
            nx_http_server_callback_data_send(server_ptr, (void *)position, remaining);
 8004b92:	4622      	mov	r2, r4
 8004b94:	4629      	mov	r1, r5
 8004b96:	4630      	mov	r0, r6
 8004b98:	f006 fa12 	bl	800afc0 <_nx_http_server_callback_data_send>
        return(NX_HTTP_CALLBACK_COMPLETED);
 8004b9c:	20e8      	movs	r0, #232	; 0xe8
 8004b9e:	e5fc      	b.n	800479a <my_get_notify+0x6e>
                switch(iperf_ctrl_info.ctrl_sign)
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	f63f aef5 	bhi.w	8004992 <my_get_notify+0x266>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <my_get_notify+0x484>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	080054bf 	.word	0x080054bf
 8004bb4:	08004993 	.word	0x08004993
 8004bb8:	080054a3 	.word	0x080054a3
 8004bbc:	08004993 	.word	0x08004993
 8004bc0:	0800547f 	.word	0x0800547f
 8004bc4:	08004993 	.word	0x08004993
 8004bc8:	080054ef 	.word	0x080054ef
 8004bcc:	f899 3020 	ldrb.w	r3, [r9, #32]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b06      	cmp	r3, #6
 8004bd6:	f200 8444 	bhi.w	8005462 <my_get_notify+0xd36>
 8004bda:	4a64      	ldr	r2, [pc, #400]	; (8004d6c <my_get_notify+0x640>)
 8004bdc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    status += htmlwrite(resp_packet_ptr, tdcentertag);
 8004be0:	f04f 37ff 	mov.w	r7, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	224c      	movs	r2, #76	; 0x4c
 8004bea:	a904      	add	r1, sp, #16
 8004bec:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8004bee:	f001 fd4d 	bl	800668c <_nx_packet_allocate>
    status += htmlwrite(resp_packet_ptr, tdcentertag);
 8004bf2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8004bf4:	4604      	mov	r4, r0
    status += htmlwrite(resp_packet_ptr, tdcentertag);
 8004bf6:	2211      	movs	r2, #17
 8004bf8:	495d      	ldr	r1, [pc, #372]	; (8004d70 <my_get_notify+0x644>)
 8004bfa:	9804      	ldr	r0, [sp, #16]
 8004bfc:	9700      	str	r7, [sp, #0]
 8004bfe:	f001 fda3 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontcolortag);
 8004c02:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, tdcentertag);
 8004c04:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontcolortag);
 8004c06:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004c08:	495a      	ldr	r1, [pc, #360]	; (8004d74 <my_get_notify+0x648>)
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	9700      	str	r7, [sp, #0]
 8004c0e:	222a      	movs	r2, #42	; 0x2a
 8004c10:	f001 fd9a 	bl	8006748 <_nx_packet_data_append>
 8004c14:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, msg);
 8004c16:	4628      	mov	r0, r5
 8004c18:	f7fb fc38 	bl	800048c <strlen>
 8004c1c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4629      	mov	r1, r5
 8004c22:	9700      	str	r7, [sp, #0]
 8004c24:	9804      	ldr	r0, [sp, #16]
 8004c26:	f001 fd8f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004c2a:	9a04      	ldr	r2, [sp, #16]
 8004c2c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, msg);
 8004c2e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004c30:	4951      	ldr	r1, [pc, #324]	; (8004d78 <my_get_notify+0x64c>)
 8004c32:	4610      	mov	r0, r2
 8004c34:	9700      	str	r7, [sp, #0]
 8004c36:	2207      	movs	r2, #7
 8004c38:	f001 fd86 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004c3c:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004c3e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004c40:	494e      	ldr	r1, [pc, #312]	; (8004d7c <my_get_notify+0x650>)
 8004c42:	4610      	mov	r0, r2
 8004c44:	2207      	movs	r2, #7
 8004c46:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004c48:	9700      	str	r7, [sp, #0]
 8004c4a:	f001 fd7d 	bl	8006748 <_nx_packet_data_append>
 8004c4e:	4404      	add	r4, r0
    status += nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 8004c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c54:	9904      	ldr	r1, [sp, #16]
 8004c56:	9802      	ldr	r0, [sp, #8]
 8004c58:	f003 f9f4 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 8004c5c:	42c4      	cmn	r4, r0
 8004c5e:	f43f af0d 	beq.w	8004a7c <my_get_notify+0x350>
        nx_packet_release(resp_packet_ptr);
 8004c62:	9804      	ldr	r0, [sp, #16]
 8004c64:	f001 fec4 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8004c68:	4a3b      	ldr	r2, [pc, #236]	; (8004d58 <my_get_notify+0x62c>)
 8004c6a:	6813      	ldr	r3, [r2, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e704      	b.n	8004a7c <my_get_notify+0x350>
                if(*next_token == '&')
 8004c72:	46b8      	mov	r8, r7
                    *next_token = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f888 3000 	strb.w	r3, [r8]
 8004c7a:	e63c      	b.n	80048f6 <my_get_notify+0x1ca>
            iperf_ctrl_info.TestStatus = 2;
 8004c7c:	2302      	movs	r3, #2
        return(NX_HTTP_CALLBACK_COMPLETED);
 8004c7e:	20e8      	movs	r0, #232	; 0xe8
            iperf_ctrl_info.TestStatus = 2;
 8004c80:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
}
 8004c84:	b01f      	add	sp, #124	; 0x7c
 8004c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	493c      	ldr	r1, [pc, #240]	; (8004d80 <my_get_notify+0x654>)
 8004c8e:	4650      	mov	r0, sl
 8004c90:	f019 fd5c 	bl	801e74c <strncmp>
 8004c94:	4603      	mov	r3, r0
            next_token++;
 8004c96:	f104 0802 	add.w	r8, r4, #2
    if(strncmp(token, "TestType", strlen("TestType")) == 0)
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 83e4 	beq.w	8005468 <my_get_notify+0xd3c>
    else if(strncmp(token, "ip", strlen("ip")) == 0)
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	492e      	ldr	r1, [pc, #184]	; (8004d5c <my_get_notify+0x630>)
 8004ca4:	4650      	mov	r0, sl
 8004ca6:	f019 fd51 	bl	801e74c <strncmp>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	f000 842d 	beq.w	800550a <my_get_notify+0xdde>
    else if(strncmp(token, "test_time", strlen("test_time")) == 0)
 8004cb0:	2209      	movs	r2, #9
 8004cb2:	492b      	ldr	r1, [pc, #172]	; (8004d60 <my_get_notify+0x634>)
 8004cb4:	4650      	mov	r0, sl
 8004cb6:	f019 fd49 	bl	801e74c <strncmp>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	f001 822e 	beq.w	800611c <my_get_notify+0x19f0>
    else if(strncmp(token, "ping_rate", strlen("ping_rate")) == 0)
 8004cc0:	2209      	movs	r2, #9
 8004cc2:	4930      	ldr	r1, [pc, #192]	; (8004d84 <my_get_notify+0x658>)
 8004cc4:	4650      	mov	r0, sl
 8004cc6:	f019 fd41 	bl	801e74c <strncmp>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f001 8210 	beq.w	80060f0 <my_get_notify+0x19c4>
                value_ptr = NX_NULL;
 8004cd0:	2700      	movs	r7, #0
    else if(strncmp(token, "total", strlen("total")) == 0)
 8004cd2:	2205      	movs	r2, #5
 8004cd4:	492c      	ldr	r1, [pc, #176]	; (8004d88 <my_get_notify+0x65c>)
 8004cd6:	4650      	mov	r0, sl
 8004cd8:	f019 fd38 	bl	801e74c <strncmp>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	f041 819a 	bne.w	8006016 <my_get_notify+0x18ea>
      ctrl_info_ptr -> TotalPings = 0;
 8004ce2:	9011      	str	r0, [sp, #68]	; 0x44
      while(value_ptr && (*value_ptr != 0))
 8004ce4:	2f00      	cmp	r7, #0
 8004ce6:	f001 80e9 	beq.w	8005ebc <my_get_notify+0x1790>
 8004cea:	783a      	ldrb	r2, [r7, #0]
 8004cec:	2a00      	cmp	r2, #0
 8004cee:	f001 80e5 	beq.w	8005ebc <my_get_notify+0x1790>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	e002      	b.n	8004cfc <my_get_notify+0x5d0>
 8004cf6:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8004cfa:	b13a      	cbz	r2, 8004d0c <my_get_notify+0x5e0>
          ctrl_info_ptr -> TotalPings = ctrl_info_ptr -> TotalPings * 10 + ((UINT)(*value_ptr - '0'));
 8004cfc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
      while(value_ptr && (*value_ptr != 0))
 8004d04:	1c7a      	adds	r2, r7, #1
          ctrl_info_ptr -> TotalPings = ctrl_info_ptr -> TotalPings * 10 + ((UINT)(*value_ptr - '0'));
 8004d06:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
      while(value_ptr && (*value_ptr != 0))
 8004d0a:	d1f4      	bne.n	8004cf6 <my_get_notify+0x5ca>
 8004d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8004d0e:	46c2      	mov	sl, r8
 8004d10:	e5c6      	b.n	80048a0 <my_get_notify+0x174>
        send_image(server_ptr, (UCHAR*)ellogo_jpg, ellogo_jpg_size);
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <my_get_notify+0x660>)
 8004d14:	681c      	ldr	r4, [r3, #0]
    while(remaining)
 8004d16:	2c00      	cmp	r4, #0
 8004d18:	f43f aefa 	beq.w	8004b10 <my_get_notify+0x3e4>
        if(remaining > max_size)
 8004d1c:	f240 57b4 	movw	r7, #1460	; 0x5b4
    position = img;
 8004d20:	4d1b      	ldr	r5, [pc, #108]	; (8004d90 <my_get_notify+0x664>)
        if(remaining > max_size)
 8004d22:	42bc      	cmp	r4, r7
 8004d24:	f67f af35 	bls.w	8004b92 <my_get_notify+0x466>
            nx_http_server_callback_data_send(server_ptr, (void *)position, max_size);
 8004d28:	f240 52b4 	movw	r2, #1460	; 0x5b4
            remaining -= max_size;
 8004d2c:	f2a4 54b4 	subw	r4, r4, #1460	; 0x5b4
            nx_http_server_callback_data_send(server_ptr, (void *)position, max_size);
 8004d30:	4629      	mov	r1, r5
 8004d32:	4630      	mov	r0, r6
            position += max_size;
 8004d34:	4415      	add	r5, r2
            nx_http_server_callback_data_send(server_ptr, (void *)position, max_size);
 8004d36:	f006 f943 	bl	800afc0 <_nx_http_server_callback_data_send>
        if(remaining > max_size)
 8004d3a:	42bc      	cmp	r4, r7
 8004d3c:	d8f4      	bhi.n	8004d28 <my_get_notify+0x5fc>
 8004d3e:	e728      	b.n	8004b92 <my_get_notify+0x466>
 8004d40:	20000020 	.word	0x20000020
 8004d44:	08025168 	.word	0x08025168
 8004d48:	080216f8 	.word	0x080216f8
 8004d4c:	08021704 	.word	0x08021704
 8004d50:	08021710 	.word	0x08021710
 8004d54:	0802171c 	.word	0x0802171c
 8004d58:	20004bd0 	.word	0x20004bd0
 8004d5c:	08021580 	.word	0x08021580
 8004d60:	08021584 	.word	0x08021584
 8004d64:	2000000c 	.word	0x2000000c
 8004d68:	08021794 	.word	0x08021794
 8004d6c:	0801f960 	.word	0x0801f960
 8004d70:	08021630 	.word	0x08021630
 8004d74:	08021644 	.word	0x08021644
 8004d78:	08025228 	.word	0x08025228
 8004d7c:	080248fc 	.word	0x080248fc
 8004d80:	08021548 	.word	0x08021548
 8004d84:	08021590 	.word	0x08021590
 8004d88:	0802159c 	.word	0x0802159c
 8004d8c:	20000008 	.word	0x20000008
 8004d90:	0801f97c 	.word	0x0801f97c
        if ((!iperf_ctrl_info.ThroughPut) && (iperf_ctrl_info.StartTime))
 8004d94:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8004d98:	bb03      	cbnz	r3, 8004ddc <my_get_notify+0x6b0>
 8004d9a:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8004d9e:	b1eb      	cbz	r3, 8004ddc <my_get_notify+0x6b0>
            iperf_ctrl_info.RunTime = tx_time_get() - iperf_ctrl_info.StartTime;
 8004da0:	f018 fbf0 	bl	801d584 <_tx_time_get>
 8004da4:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
            if(iperf_ctrl_info.RunTime > iperf_ctrl_info.TestTime)
 8004da8:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
            iperf_ctrl_info.RunTime = tx_time_get() - iperf_ctrl_info.StartTime;
 8004dac:	1ac0      	subs	r0, r0, r3
            if(iperf_ctrl_info.RunTime > iperf_ctrl_info.TestTime)
 8004dae:	4290      	cmp	r0, r2
            iperf_ctrl_info.RunTime = tx_time_get() - iperf_ctrl_info.StartTime;
 8004db0:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
            if(iperf_ctrl_info.RunTime > iperf_ctrl_info.TestTime)
 8004db4:	d902      	bls.n	8004dbc <my_get_notify+0x690>
                iperf_ctrl_info.RunTime = iperf_ctrl_info.TestTime;
 8004db6:	4610      	mov	r0, r2
 8004db8:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
            iperf_ctrl_info.ThroughPut = (iperf_ctrl_info.BytesTxed + iperf_ctrl_info.BytesRxed) / iperf_ctrl_info.RunTime * NX_IP_PERIODIC_RATE / 125000; 
 8004dbc:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8004dc0:	2364      	movs	r3, #100	; 0x64
 8004dc2:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 8004dc6:	440a      	add	r2, r1
 8004dc8:	4913      	ldr	r1, [pc, #76]	; (8004e18 <my_get_notify+0x6ec>)
 8004dca:	fbb2 f0f0 	udiv	r0, r2, r0
 8004dce:	fb03 f300 	mul.w	r3, r3, r0
 8004dd2:	fba1 2303 	umull	r2, r3, r1, r3
 8004dd6:	0bdb      	lsrs	r3, r3, #15
 8004dd8:	f8c9 3050 	str.w	r3, [r9, #80]	; 0x50
        iperf_ip.nxd_ip_version = iperf_ctrl_info.version;
 8004ddc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004de0:	4f0e      	ldr	r7, [pc, #56]	; (8004e1c <my_get_notify+0x6f0>)
        if (iperf_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8004de2:	2b06      	cmp	r3, #6
        iperf_ip.nxd_ip_version = iperf_ctrl_info.version;
 8004de4:	603b      	str	r3, [r7, #0]
        if (iperf_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8004de6:	f001 80e8 	beq.w	8005fba <my_get_notify+0x188e>
            iperf_ip.nxd_ip_address.v4 = iperf_ctrl_info.ip;
 8004dea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004dee:	607b      	str	r3, [r7, #4]
        switch(iperf_ctrl_info.ctrl_sign)
 8004df0:	f899 3020 	ldrb.w	r3, [r9, #32]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	2b0b      	cmp	r3, #11
 8004df8:	f200 82b2 	bhi.w	8005360 <my_get_notify+0xc34>
 8004dfc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e00:	02b00562 	.word	0x02b00562
 8004e04:	02b00010 	.word	0x02b00010
 8004e08:	02b0055e 	.word	0x02b0055e
 8004e0c:	02b00568 	.word	0x02b00568
 8004e10:	02b002b0 	.word	0x02b002b0
 8004e14:	03c402b0 	.word	0x03c402b0
 8004e18:	431bde83 	.word	0x431bde83
 8004e1c:	20001610 	.word	0x20001610
    htmlwrite(resp_packet_ptr, toptdtag);
 8004e20:	f04f 35ff 	mov.w	r5, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8004e24:	f04f 33ff 	mov.w	r3, #4294967295
 8004e28:	224c      	movs	r2, #76	; 0x4c
 8004e2a:	a904      	add	r1, sp, #16
 8004e2c:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8004e2e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8004e32:	f001 fc2b 	bl	800668c <_nx_packet_allocate>
    htmlwrite(resp_packet_ptr, toptdtag);
 8004e36:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 8004e38:	4604      	mov	r4, r0
    htmlwrite(resp_packet_ptr, toptdtag);
 8004e3a:	222d      	movs	r2, #45	; 0x2d
 8004e3c:	49b0      	ldr	r1, [pc, #704]	; (8005100 <my_get_notify+0x9d4>)
 8004e3e:	9804      	ldr	r0, [sp, #16]
 8004e40:	9500      	str	r5, [sp, #0]
 8004e42:	f001 fc81 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tabletag);
 8004e46:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004e48:	2212      	movs	r2, #18
 8004e4a:	49ae      	ldr	r1, [pc, #696]	; (8005104 <my_get_notify+0x9d8>)
 8004e4c:	9804      	ldr	r0, [sp, #16]
 8004e4e:	9500      	str	r5, [sp, #0]
 8004e50:	f001 fc7a 	bl	8006748 <_nx_packet_data_append>
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8004e54:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004e56:	221a      	movs	r2, #26
 8004e58:	49ab      	ldr	r1, [pc, #684]	; (8005108 <my_get_notify+0x9dc>)
 8004e5a:	9804      	ldr	r0, [sp, #16]
 8004e5c:	9500      	str	r5, [sp, #0]
 8004e5e:	f001 fc73 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, trtag);
 8004e62:	9a04      	ldr	r2, [sp, #16]
 8004e64:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8004e66:	4404      	add	r4, r0
    htmlwrite(resp_packet_ptr, trtag);
 8004e68:	49a8      	ldr	r1, [pc, #672]	; (800510c <my_get_notify+0x9e0>)
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	9500      	str	r5, [sp, #0]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	f001 fc6a 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tdtag);
 8004e74:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004e76:	2204      	movs	r2, #4
 8004e78:	49a5      	ldr	r1, [pc, #660]	; (8005110 <my_get_notify+0x9e4>)
 8004e7a:	9804      	ldr	r0, [sp, #16]
 8004e7c:	9500      	str	r5, [sp, #0]
 8004e7e:	f001 fc63 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, fonttag);
 8004e82:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004e84:	222a      	movs	r2, #42	; 0x2a
 8004e86:	49a3      	ldr	r1, [pc, #652]	; (8005114 <my_get_notify+0x9e8>)
 8004e88:	9804      	ldr	r0, [sp, #16]
 8004e8a:	9500      	str	r5, [sp, #0]
 8004e8c:	f001 fc5c 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, "UDP Receive Test Done:");
 8004e90:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004e92:	2216      	movs	r2, #22
 8004e94:	49a0      	ldr	r1, [pc, #640]	; (8005118 <my_get_notify+0x9ec>)
 8004e96:	9804      	ldr	r0, [sp, #16]
 8004e98:	9500      	str	r5, [sp, #0]
 8004e9a:	f001 fc55 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004e9e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	499e      	ldr	r1, [pc, #632]	; (800511c <my_get_notify+0x9f0>)
 8004ea4:	9804      	ldr	r0, [sp, #16]
 8004ea6:	9500      	str	r5, [sp, #0]
 8004ea8:	f001 fc4e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004eac:	9a04      	ldr	r2, [sp, #16]
 8004eae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004eb0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004eb2:	499b      	ldr	r1, [pc, #620]	; (8005120 <my_get_notify+0x9f4>)
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	9500      	str	r5, [sp, #0]
 8004eb8:	2207      	movs	r2, #7
 8004eba:	f001 fc45 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004ebe:	9a04      	ldr	r2, [sp, #16]
 8004ec0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004ec2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004ec4:	4997      	ldr	r1, [pc, #604]	; (8005124 <my_get_notify+0x9f8>)
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	9500      	str	r5, [sp, #0]
 8004eca:	2205      	movs	r2, #5
 8004ecc:	f001 fc3c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8004ed0:	9a04      	ldr	r2, [sp, #16]
 8004ed2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004ed4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8004ed6:	498c      	ldr	r1, [pc, #560]	; (8005108 <my_get_notify+0x9dc>)
 8004ed8:	4610      	mov	r0, r2
 8004eda:	9500      	str	r5, [sp, #0]
 8004edc:	221a      	movs	r2, #26
 8004ede:	f001 fc33 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8004ee2:	9a04      	ldr	r2, [sp, #16]
 8004ee4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8004ee6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8004ee8:	4988      	ldr	r1, [pc, #544]	; (800510c <my_get_notify+0x9e0>)
 8004eea:	4610      	mov	r0, r2
 8004eec:	9500      	str	r5, [sp, #0]
 8004eee:	2204      	movs	r2, #4
 8004ef0:	f001 fc2a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8004ef4:	9a04      	ldr	r2, [sp, #16]
 8004ef6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8004ef8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8004efa:	4985      	ldr	r1, [pc, #532]	; (8005110 <my_get_notify+0x9e4>)
 8004efc:	4610      	mov	r0, r2
 8004efe:	9500      	str	r5, [sp, #0]
 8004f00:	2204      	movs	r2, #4
 8004f02:	f001 fc21 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004f06:	9a04      	ldr	r2, [sp, #16]
 8004f08:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8004f0a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004f0c:	4981      	ldr	r1, [pc, #516]	; (8005114 <my_get_notify+0x9e8>)
 8004f0e:	4610      	mov	r0, r2
 8004f10:	9500      	str	r5, [sp, #0]
 8004f12:	222a      	movs	r2, #42	; 0x2a
 8004f14:	f001 fc18 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Source IP Address: ");
 8004f18:	9a04      	ldr	r2, [sp, #16]
 8004f1a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004f1c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Source IP Address: ");
 8004f1e:	4982      	ldr	r1, [pc, #520]	; (8005128 <my_get_notify+0x9fc>)
 8004f20:	4610      	mov	r0, r2
 8004f22:	9500      	str	r5, [sp, #0]
 8004f24:	2213      	movs	r2, #19
 8004f26:	f001 fc0f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8004f2a:	693b      	ldr	r3, [r7, #16]
    status += htmlwrite(resp_packet_ptr, "Source IP Address: ");
 8004f2c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8004f2e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004f38:	f7fe f922 	bl	8003180 <get_ip_addr_string>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4683      	mov	fp, r0
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004f46:	f7fe f91b 	bl	8003180 <get_ip_addr_string>
 8004f4a:	f7fb fa9f 	bl	800048c <strlen>
 8004f4e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004f50:	4602      	mov	r2, r0
 8004f52:	4659      	mov	r1, fp
 8004f54:	9500      	str	r5, [sp, #0]
 8004f56:	4650      	mov	r0, sl
 8004f58:	f001 fbf6 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004f5c:	9a04      	ldr	r2, [sp, #16]
 8004f5e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8004f60:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004f62:	496e      	ldr	r1, [pc, #440]	; (800511c <my_get_notify+0x9f0>)
 8004f64:	4610      	mov	r0, r2
 8004f66:	9500      	str	r5, [sp, #0]
 8004f68:	2207      	movs	r2, #7
 8004f6a:	f001 fbed 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004f6e:	9a04      	ldr	r2, [sp, #16]
 8004f70:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8004f72:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004f74:	496a      	ldr	r1, [pc, #424]	; (8005120 <my_get_notify+0x9f4>)
 8004f76:	4610      	mov	r0, r2
 8004f78:	9500      	str	r5, [sp, #0]
 8004f7a:	2207      	movs	r2, #7
 8004f7c:	f001 fbe4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004f80:	9a04      	ldr	r2, [sp, #16]
 8004f82:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8004f84:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004f86:	4967      	ldr	r1, [pc, #412]	; (8005124 <my_get_notify+0x9f8>)
 8004f88:	4610      	mov	r0, r2
 8004f8a:	9500      	str	r5, [sp, #0]
 8004f8c:	2205      	movs	r2, #5
 8004f8e:	f001 fbdb 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, trtag);
 8004f92:	9a04      	ldr	r2, [sp, #16]
 8004f94:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8004f96:	4404      	add	r4, r0
    htmlwrite(resp_packet_ptr, trtag);
 8004f98:	495c      	ldr	r1, [pc, #368]	; (800510c <my_get_notify+0x9e0>)
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	9500      	str	r5, [sp, #0]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	f001 fbd2 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tdtag);
 8004fa4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	4959      	ldr	r1, [pc, #356]	; (8005110 <my_get_notify+0x9e4>)
 8004faa:	9804      	ldr	r0, [sp, #16]
 8004fac:	9500      	str	r5, [sp, #0]
 8004fae:	f001 fbcb 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004fb2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004fb4:	222a      	movs	r2, #42	; 0x2a
 8004fb6:	4957      	ldr	r1, [pc, #348]	; (8005114 <my_get_notify+0x9e8>)
 8004fb8:	9804      	ldr	r0, [sp, #16]
 8004fba:	9500      	str	r5, [sp, #0]
 8004fbc:	f001 fbc4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8004fc0:	9a04      	ldr	r2, [sp, #16]
 8004fc2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 8004fc4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8004fc6:	4959      	ldr	r1, [pc, #356]	; (800512c <my_get_notify+0xa00>)
 8004fc8:	4610      	mov	r0, r2
 8004fca:	9500      	str	r5, [sp, #0]
 8004fcc:	2219      	movs	r2, #25
 8004fce:	f001 fbbb 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8004fd2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8004fd6:	4a56      	ldr	r2, [pc, #344]	; (8005130 <my_get_notify+0xa04>)
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8004fd8:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8004fda:	fb08 f303 	mul.w	r3, r8, r3
 8004fde:	4955      	ldr	r1, [pc, #340]	; (8005134 <my_get_notify+0xa08>)
 8004fe0:	fba2 3003 	umull	r3, r0, r2, r3
 8004fe4:	0940      	lsrs	r0, r0, #5
 8004fe6:	f006 f96b 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);   
 8004fea:	4852      	ldr	r0, [pc, #328]	; (8005134 <my_get_notify+0xa08>)
 8004fec:	f7fb fa4e 	bl	800048c <strlen>
 8004ff0:	9904      	ldr	r1, [sp, #16]
 8004ff2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	9500      	str	r5, [sp, #0]
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	494e      	ldr	r1, [pc, #312]	; (8005134 <my_get_notify+0xa08>)
 8004ffc:	f001 fba4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005000:	9a04      	ldr	r2, [sp, #16]
 8005002:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);   
 8005004:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005006:	4945      	ldr	r1, [pc, #276]	; (800511c <my_get_notify+0x9f0>)
 8005008:	4610      	mov	r0, r2
 800500a:	9500      	str	r5, [sp, #0]
 800500c:	2207      	movs	r2, #7
 800500e:	f001 fb9b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005012:	9a04      	ldr	r2, [sp, #16]
 8005014:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005016:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005018:	4941      	ldr	r1, [pc, #260]	; (8005120 <my_get_notify+0x9f4>)
 800501a:	4610      	mov	r0, r2
 800501c:	9500      	str	r5, [sp, #0]
 800501e:	2207      	movs	r2, #7
 8005020:	f001 fb92 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005024:	9a04      	ldr	r2, [sp, #16]
 8005026:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005028:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 800502a:	493e      	ldr	r1, [pc, #248]	; (8005124 <my_get_notify+0x9f8>)
 800502c:	4610      	mov	r0, r2
 800502e:	9500      	str	r5, [sp, #0]
 8005030:	2205      	movs	r2, #5
 8005032:	f001 fb89 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005036:	9a04      	ldr	r2, [sp, #16]
 8005038:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 800503a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 800503c:	4933      	ldr	r1, [pc, #204]	; (800510c <my_get_notify+0x9e0>)
 800503e:	4610      	mov	r0, r2
 8005040:	9500      	str	r5, [sp, #0]
 8005042:	2204      	movs	r2, #4
 8005044:	f001 fb80 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005048:	9a04      	ldr	r2, [sp, #16]
 800504a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 800504c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 800504e:	4930      	ldr	r1, [pc, #192]	; (8005110 <my_get_notify+0x9e4>)
 8005050:	4610      	mov	r0, r2
 8005052:	9500      	str	r5, [sp, #0]
 8005054:	2204      	movs	r2, #4
 8005056:	f001 fb77 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 800505a:	9a04      	ldr	r2, [sp, #16]
 800505c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 800505e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005060:	492c      	ldr	r1, [pc, #176]	; (8005114 <my_get_notify+0x9e8>)
 8005062:	4610      	mov	r0, r2
 8005064:	9500      	str	r5, [sp, #0]
 8005066:	222a      	movs	r2, #42	; 0x2a
 8005068:	f001 fb6e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Packets Received: ");
 800506c:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 800506e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Packets Received: ");
 8005070:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005072:	4610      	mov	r0, r2
 8005074:	4930      	ldr	r1, [pc, #192]	; (8005138 <my_get_notify+0xa0c>)
 8005076:	221c      	movs	r2, #28
 8005078:	9500      	str	r5, [sp, #0]
 800507a:	f001 fb65 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsRxed, mytempstring);
 800507e:	492d      	ldr	r1, [pc, #180]	; (8005134 <my_get_notify+0xa08>)
    status += htmlwrite(resp_packet_ptr, "Number of Packets Received: ");
 8005080:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsRxed, mytempstring);
 8005082:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 8005086:	f006 f91b 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 800508a:	482a      	ldr	r0, [pc, #168]	; (8005134 <my_get_notify+0xa08>)
 800508c:	f7fb f9fe 	bl	800048c <strlen>
 8005090:	9904      	ldr	r1, [sp, #16]
 8005092:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005094:	4602      	mov	r2, r0
 8005096:	9500      	str	r5, [sp, #0]
 8005098:	4608      	mov	r0, r1
 800509a:	4926      	ldr	r1, [pc, #152]	; (8005134 <my_get_notify+0xa08>)
 800509c:	f001 fb54 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80050a0:	9a04      	ldr	r2, [sp, #16]
 80050a2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 80050a4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80050a6:	491d      	ldr	r1, [pc, #116]	; (800511c <my_get_notify+0x9f0>)
 80050a8:	4610      	mov	r0, r2
 80050aa:	9500      	str	r5, [sp, #0]
 80050ac:	2207      	movs	r2, #7
 80050ae:	f001 fb4b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80050b2:	9a04      	ldr	r2, [sp, #16]
 80050b4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80050b6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80050b8:	4919      	ldr	r1, [pc, #100]	; (8005120 <my_get_notify+0x9f4>)
 80050ba:	4610      	mov	r0, r2
 80050bc:	9500      	str	r5, [sp, #0]
 80050be:	2207      	movs	r2, #7
 80050c0:	f001 fb42 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 80050c4:	9a04      	ldr	r2, [sp, #16]
 80050c6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80050c8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 80050ca:	4916      	ldr	r1, [pc, #88]	; (8005124 <my_get_notify+0x9f8>)
 80050cc:	4610      	mov	r0, r2
 80050ce:	9500      	str	r5, [sp, #0]
 80050d0:	2205      	movs	r2, #5
 80050d2:	f001 fb39 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 80050d6:	9a04      	ldr	r2, [sp, #16]
 80050d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 80050da:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 80050dc:	490b      	ldr	r1, [pc, #44]	; (800510c <my_get_notify+0x9e0>)
 80050de:	4610      	mov	r0, r2
 80050e0:	9500      	str	r5, [sp, #0]
 80050e2:	2204      	movs	r2, #4
 80050e4:	f001 fb30 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 80050e8:	9a04      	ldr	r2, [sp, #16]
 80050ea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 80050ec:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 80050ee:	4908      	ldr	r1, [pc, #32]	; (8005110 <my_get_notify+0x9e4>)
 80050f0:	4610      	mov	r0, r2
 80050f2:	9500      	str	r5, [sp, #0]
 80050f4:	2204      	movs	r2, #4
 80050f6:	f001 fb27 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 80050fa:	9a04      	ldr	r2, [sp, #16]
 80050fc:	e01e      	b.n	800513c <my_get_notify+0xa10>
 80050fe:	bf00      	nop
 8005100:	08025174 	.word	0x08025174
 8005104:	080251a4 	.word	0x080251a4
 8005108:	080251b8 	.word	0x080251b8
 800510c:	080251d4 	.word	0x080251d4
 8005110:	080251dc 	.word	0x080251dc
 8005114:	080251e4 	.word	0x080251e4
 8005118:	08021670 	.word	0x08021670
 800511c:	08025228 	.word	0x08025228
 8005120:	080248fc 	.word	0x080248fc
 8005124:	08024904 	.word	0x08024904
 8005128:	08025230 	.word	0x08025230
 800512c:	08025244 	.word	0x08025244
 8005130:	51eb851f 	.word	0x51eb851f
 8005134:	20001630 	.word	0x20001630
 8005138:	08025260 	.word	0x08025260
 800513c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 800513e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005140:	49b6      	ldr	r1, [pc, #728]	; (800541c <my_get_notify+0xcf0>)
 8005142:	4610      	mov	r0, r2
 8005144:	9500      	str	r5, [sp, #0]
 8005146:	222a      	movs	r2, #42	; 0x2a
 8005148:	f001 fafe 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Received: ");
 800514c:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 800514e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Received: ");
 8005150:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005152:	4610      	mov	r0, r2
 8005154:	49b2      	ldr	r1, [pc, #712]	; (8005420 <my_get_notify+0xcf4>)
 8005156:	221a      	movs	r2, #26
 8005158:	9500      	str	r5, [sp, #0]
 800515a:	f001 faf5 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.BytesRxed, mytempstring);
 800515e:	49b1      	ldr	r1, [pc, #708]	; (8005424 <my_get_notify+0xcf8>)
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Received: ");
 8005160:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.BytesRxed, mytempstring);
 8005162:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8005166:	f006 f8ab 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 800516a:	48ae      	ldr	r0, [pc, #696]	; (8005424 <my_get_notify+0xcf8>)
 800516c:	f7fb f98e 	bl	800048c <strlen>
 8005170:	9904      	ldr	r1, [sp, #16]
 8005172:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005174:	4602      	mov	r2, r0
 8005176:	9500      	str	r5, [sp, #0]
 8005178:	4608      	mov	r0, r1
 800517a:	49aa      	ldr	r1, [pc, #680]	; (8005424 <my_get_notify+0xcf8>)
 800517c:	f001 fae4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005180:	9a04      	ldr	r2, [sp, #16]
 8005182:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8005184:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005186:	49a8      	ldr	r1, [pc, #672]	; (8005428 <my_get_notify+0xcfc>)
 8005188:	4610      	mov	r0, r2
 800518a:	9500      	str	r5, [sp, #0]
 800518c:	2207      	movs	r2, #7
 800518e:	f001 fadb 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005192:	9a04      	ldr	r2, [sp, #16]
 8005194:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005196:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005198:	49a4      	ldr	r1, [pc, #656]	; (800542c <my_get_notify+0xd00>)
 800519a:	4610      	mov	r0, r2
 800519c:	9500      	str	r5, [sp, #0]
 800519e:	2207      	movs	r2, #7
 80051a0:	f001 fad2 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);   
 80051a4:	9a04      	ldr	r2, [sp, #16]
 80051a6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80051a8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);   
 80051aa:	49a1      	ldr	r1, [pc, #644]	; (8005430 <my_get_notify+0xd04>)
 80051ac:	4610      	mov	r0, r2
 80051ae:	9500      	str	r5, [sp, #0]
 80051b0:	2205      	movs	r2, #5
 80051b2:	f001 fac9 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 80051b6:	9a04      	ldr	r2, [sp, #16]
 80051b8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);   
 80051ba:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 80051bc:	499d      	ldr	r1, [pc, #628]	; (8005434 <my_get_notify+0xd08>)
 80051be:	4610      	mov	r0, r2
 80051c0:	9500      	str	r5, [sp, #0]
 80051c2:	2204      	movs	r2, #4
 80051c4:	f001 fac0 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 80051c8:	9a04      	ldr	r2, [sp, #16]
 80051ca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 80051cc:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 80051ce:	499a      	ldr	r1, [pc, #616]	; (8005438 <my_get_notify+0xd0c>)
 80051d0:	4610      	mov	r0, r2
 80051d2:	9500      	str	r5, [sp, #0]
 80051d4:	2204      	movs	r2, #4
 80051d6:	f001 fab7 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 80051da:	9a04      	ldr	r2, [sp, #16]
 80051dc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 80051de:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 80051e0:	498e      	ldr	r1, [pc, #568]	; (800541c <my_get_notify+0xcf0>)
 80051e2:	4610      	mov	r0, r2
 80051e4:	9500      	str	r5, [sp, #0]
 80051e6:	222a      	movs	r2, #42	; 0x2a
 80051e8:	f001 faae 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps):");
 80051ec:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 80051ee:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps):");
 80051f0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80051f2:	4610      	mov	r0, r2
 80051f4:	4991      	ldr	r1, [pc, #580]	; (800543c <my_get_notify+0xd10>)
 80051f6:	2211      	movs	r2, #17
 80051f8:	9500      	str	r5, [sp, #0]
 80051fa:	f001 faa5 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.ThroughPut, mytempstring);
 80051fe:	4989      	ldr	r1, [pc, #548]	; (8005424 <my_get_notify+0xcf8>)
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps):");
 8005200:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.ThroughPut, mytempstring);
 8005202:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8005206:	f006 f85b 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);  
 800520a:	4886      	ldr	r0, [pc, #536]	; (8005424 <my_get_notify+0xcf8>)
 800520c:	f7fb f93e 	bl	800048c <strlen>
 8005210:	9904      	ldr	r1, [sp, #16]
 8005212:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005214:	4602      	mov	r2, r0
 8005216:	9500      	str	r5, [sp, #0]
 8005218:	4608      	mov	r0, r1
 800521a:	4982      	ldr	r1, [pc, #520]	; (8005424 <my_get_notify+0xcf8>)
 800521c:	f001 fa94 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005220:	9a04      	ldr	r2, [sp, #16]
 8005222:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);  
 8005224:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005226:	4980      	ldr	r1, [pc, #512]	; (8005428 <my_get_notify+0xcfc>)
 8005228:	4610      	mov	r0, r2
 800522a:	9500      	str	r5, [sp, #0]
 800522c:	2207      	movs	r2, #7
 800522e:	f001 fa8b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005232:	9a04      	ldr	r2, [sp, #16]
 8005234:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005236:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005238:	497c      	ldr	r1, [pc, #496]	; (800542c <my_get_notify+0xd00>)
 800523a:	4610      	mov	r0, r2
 800523c:	9500      	str	r5, [sp, #0]
 800523e:	2207      	movs	r2, #7
 8005240:	f001 fa82 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005244:	9a04      	ldr	r2, [sp, #16]
 8005246:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005248:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 800524a:	4979      	ldr	r1, [pc, #484]	; (8005430 <my_get_notify+0xd04>)
 800524c:	4610      	mov	r0, r2
 800524e:	9500      	str	r5, [sp, #0]
 8005250:	2205      	movs	r2, #5
 8005252:	f001 fa79 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005256:	9a04      	ldr	r2, [sp, #16]
 8005258:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 800525a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 800525c:	4975      	ldr	r1, [pc, #468]	; (8005434 <my_get_notify+0xd08>)
 800525e:	4610      	mov	r0, r2
 8005260:	9500      	str	r5, [sp, #0]
 8005262:	2204      	movs	r2, #4
 8005264:	f001 fa70 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005268:	9a04      	ldr	r2, [sp, #16]
 800526a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 800526c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 800526e:	4972      	ldr	r1, [pc, #456]	; (8005438 <my_get_notify+0xd0c>)
 8005270:	4610      	mov	r0, r2
 8005272:	9500      	str	r5, [sp, #0]
 8005274:	2204      	movs	r2, #4
 8005276:	f001 fa67 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 800527a:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, tdtag);
 800527c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 800527e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005280:	4610      	mov	r0, r2
 8005282:	4966      	ldr	r1, [pc, #408]	; (800541c <my_get_notify+0xcf0>)
 8005284:	222a      	movs	r2, #42	; 0x2a
 8005286:	9500      	str	r5, [sp, #0]
 8005288:	f001 fa5e 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.idleTime, mytempstring);
 800528c:	4965      	ldr	r1, [pc, #404]	; (8005424 <my_get_notify+0xcf8>)
    status += htmlwrite(resp_packet_ptr, fonttag);
 800528e:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.idleTime, mytempstring);
 8005290:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8005294:	f006 f814 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, "Idle Time: ");
 8005298:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800529a:	220b      	movs	r2, #11
 800529c:	4968      	ldr	r1, [pc, #416]	; (8005440 <my_get_notify+0xd14>)
 800529e:	9804      	ldr	r0, [sp, #16]
 80052a0:	9500      	str	r5, [sp, #0]
 80052a2:	f001 fa51 	bl	8006748 <_nx_packet_data_append>
 80052a6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, mytempstring);
 80052a8:	485e      	ldr	r0, [pc, #376]	; (8005424 <my_get_notify+0xcf8>)
 80052aa:	f7fb f8ef 	bl	800048c <strlen>
 80052ae:	9904      	ldr	r1, [sp, #16]
 80052b0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80052b2:	4602      	mov	r2, r0
 80052b4:	9500      	str	r5, [sp, #0]
 80052b6:	4608      	mov	r0, r1
 80052b8:	495a      	ldr	r1, [pc, #360]	; (8005424 <my_get_notify+0xcf8>)
 80052ba:	f001 fa45 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "%");   
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 80052c2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "%");   
 80052c4:	495f      	ldr	r1, [pc, #380]	; (8005444 <my_get_notify+0xd18>)
 80052c6:	4610      	mov	r0, r2
 80052c8:	9500      	str	r5, [sp, #0]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f001 fa3c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80052d0:	9a04      	ldr	r2, [sp, #16]
 80052d2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, "%");   
 80052d4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80052d6:	4954      	ldr	r1, [pc, #336]	; (8005428 <my_get_notify+0xcfc>)
 80052d8:	4610      	mov	r0, r2
 80052da:	9500      	str	r5, [sp, #0]
 80052dc:	2207      	movs	r2, #7
 80052de:	f001 fa33 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80052e2:	9a04      	ldr	r2, [sp, #16]
 80052e4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80052e6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80052e8:	4950      	ldr	r1, [pc, #320]	; (800542c <my_get_notify+0xd00>)
 80052ea:	4610      	mov	r0, r2
 80052ec:	9500      	str	r5, [sp, #0]
 80052ee:	2207      	movs	r2, #7
 80052f0:	f001 fa2a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 80052f4:	9a04      	ldr	r2, [sp, #16]
 80052f6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80052f8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 80052fa:	494d      	ldr	r1, [pc, #308]	; (8005430 <my_get_notify+0xd04>)
 80052fc:	4610      	mov	r0, r2
 80052fe:	9500      	str	r5, [sp, #0]
 8005300:	2205      	movs	r2, #5
 8005302:	f001 fa21 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 8005306:	9a04      	ldr	r2, [sp, #16]
 8005308:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 800530a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 800530c:	494e      	ldr	r1, [pc, #312]	; (8005448 <my_get_notify+0xd1c>)
 800530e:	4610      	mov	r0, r2
 8005310:	9500      	str	r5, [sp, #0]
 8005312:	2208      	movs	r2, #8
 8005314:	f001 fa18 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005318:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 800531a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800531c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800531e:	4610      	mov	r0, r2
 8005320:	4942      	ldr	r1, [pc, #264]	; (800542c <my_get_notify+0xd00>)
 8005322:	2207      	movs	r2, #7
 8005324:	9500      	str	r5, [sp, #0]
 8005326:	f001 fa0f 	bl	8006748 <_nx_packet_data_append>
 800532a:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 800532c:	4642      	mov	r2, r8
 800532e:	9904      	ldr	r1, [sp, #16]
 8005330:	9802      	ldr	r0, [sp, #8]
 8005332:	f002 fe87 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 8005336:	42c4      	cmn	r4, r0
 8005338:	d006      	beq.n	8005348 <my_get_notify+0xc1c>
        nx_packet_release(resp_packet_ptr);
 800533a:	9804      	ldr	r0, [sp, #16]
 800533c:	f001 fb58 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8005340:	4a42      	ldr	r2, [pc, #264]	; (800544c <my_get_notify+0xd20>)
 8005342:	6813      	ldr	r3, [r2, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	6013      	str	r3, [r2, #0]
    nx_udp_socket_unbind(&udp_server_socket);
 8005348:	4841      	ldr	r0, [pc, #260]	; (8005450 <my_get_notify+0xd24>)
 800534a:	f003 fe03 	bl	8008f54 <_nx_udp_socket_unbind>
    nx_udp_socket_delete(&udp_server_socket);
 800534e:	4840      	ldr	r0, [pc, #256]	; (8005450 <my_get_notify+0xd24>)
 8005350:	f003 fcee 	bl	8008d30 <_nx_udp_socket_delete>
    tx_thread_terminate(&thread_udp_rx_iperf);
 8005354:	483f      	ldr	r0, [pc, #252]	; (8005454 <my_get_notify+0xd28>)
 8005356:	f018 fd29 	bl	801ddac <_txe_thread_terminate>
    tx_thread_delete(&thread_udp_rx_iperf);
 800535a:	483e      	ldr	r0, [pc, #248]	; (8005454 <my_get_notify+0xd28>)
 800535c:	f018 fcd2 	bl	801dd04 <_txe_thread_delete>
        memset(&iperf_ctrl_info, 0, sizeof(iperf_ctrl_info));
 8005360:	2264      	movs	r2, #100	; 0x64
 8005362:	2100      	movs	r1, #0
 8005364:	483c      	ldr	r0, [pc, #240]	; (8005458 <my_get_notify+0xd2c>)
 8005366:	f019 f918 	bl	801e59a <memset>
 800536a:	f7ff bb87 	b.w	8004a7c <my_get_notify+0x350>
        ctrl_info_ptr -> ip = 0;
 800536e:	9007      	str	r0, [sp, #28]
        if(value_ptr == 0) 
 8005370:	2f00      	cmp	r7, #0
 8005372:	f000 80ca 	beq.w	800550a <my_get_notify+0xdde>
        while(ptr && (*ptr != 0))
 8005376:	7863      	ldrb	r3, [r4, #1]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 86c0 	beq.w	80060fe <my_get_notify+0x19d2>
            if(*ptr == '.') 
 800537e:	2b2e      	cmp	r3, #46	; 0x2e
 8005380:	f000 86ba 	beq.w	80060f8 <my_get_notify+0x19cc>
 8005384:	9a06      	ldr	r2, [sp, #24]
 8005386:	4686      	mov	lr, r0
 8005388:	469c      	mov	ip, r3
 800538a:	4619      	mov	r1, r3
 800538c:	9203      	str	r2, [sp, #12]
 800538e:	463a      	mov	r2, r7
            else if(*ptr == '%')
 8005390:	2925      	cmp	r1, #37	; 0x25
 8005392:	f102 0301 	add.w	r3, r2, #1
 8005396:	d026      	beq.n	80053e6 <my_get_notify+0xcba>
        while(ptr && (*ptr != 0))
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 86c2 	beq.w	8006122 <my_get_notify+0x19f6>
 800539e:	7851      	ldrb	r1, [r2, #1]
 80053a0:	461a      	mov	r2, r3
 80053a2:	2900      	cmp	r1, #0
 80053a4:	f000 85ae 	beq.w	8005f04 <my_get_notify+0x17d8>
            if(*ptr == '.') 
 80053a8:	292e      	cmp	r1, #46	; 0x2e
 80053aa:	d1f1      	bne.n	8005390 <my_get_notify+0xc64>
 80053ac:	4663      	mov	r3, ip
        val = 0;
 80053ae:	2200      	movs	r2, #0
                ctrl_info_ptr -> version = NX_IP_VERSION_V4;
 80053b0:	2104      	movs	r1, #4
 80053b2:	3402      	adds	r4, #2
 80053b4:	4694      	mov	ip, r2
 80053b6:	9106      	str	r1, [sp, #24]
 80053b8:	e00a      	b.n	80053d0 <my_get_notify+0xca4>
                        val = val * 10 + ((UINT)(*value_ptr - '0'));
 80053ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
                while(value_ptr && (*value_ptr != 0))
 80053be:	4627      	mov	r7, r4
 80053c0:	2c00      	cmp	r4, #0
 80053c2:	f000 8623 	beq.w	800600c <my_get_notify+0x18e0>
 80053c6:	7823      	ldrb	r3, [r4, #0]
 80053c8:	3401      	adds	r4, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 85ea 	beq.w	8005fa4 <my_get_notify+0x1878>
                        val = val * 10 + ((UINT)(*value_ptr - '0'));
 80053d0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
                    if(*value_ptr == '.') 
 80053d4:	2b2e      	cmp	r3, #46	; 0x2e
                        val = val * 10 + ((UINT)(*value_ptr - '0'));
 80053d6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
                    if(*value_ptr == '.') 
 80053da:	d1ee      	bne.n	80053ba <my_get_notify+0xc8e>
                        ctrl_info_ptr -> ip = (ctrl_info_ptr -> ip << 8) + val;
 80053dc:	4494      	add	ip, r2
                        val = 0;
 80053de:	2200      	movs	r2, #0
 80053e0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80053e4:	e7eb      	b.n	80053be <my_get_notify+0xc92>
                if((*(++ptr) == '3') && (*(++ptr) == 'A'))
 80053e6:	7851      	ldrb	r1, [r2, #1]
 80053e8:	f102 0a02 	add.w	sl, r2, #2
 80053ec:	2933      	cmp	r1, #51	; 0x33
 80053ee:	d002      	beq.n	80053f6 <my_get_notify+0xcca>
 80053f0:	461a      	mov	r2, r3
 80053f2:	4653      	mov	r3, sl
 80053f4:	e7d0      	b.n	8005398 <my_get_notify+0xc6c>
 80053f6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80053fa:	1c91      	adds	r1, r2, #2
 80053fc:	1cd3      	adds	r3, r2, #3
 80053fe:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
 8005402:	460a      	mov	r2, r1
 8005404:	d1c8      	bne.n	8005398 <my_get_notify+0xc6c>
                    ctrl_info_ptr -> version = NX_IP_VERSION_V6;
 8005406:	2106      	movs	r1, #6
                    colon_sum++;
 8005408:	f10e 0e01 	add.w	lr, lr, #1
                    ctrl_info_ptr -> version = NX_IP_VERSION_V6;
 800540c:	9103      	str	r1, [sp, #12]
 800540e:	e7c3      	b.n	8005398 <my_get_notify+0xc6c>
                ctrl_info_ptr -> ctrl_sign = TCP_RX_START;
 8005410:	2301      	movs	r3, #1
            next_token++;
 8005412:	46c2      	mov	sl, r8
                ctrl_info_ptr -> ctrl_sign = TCP_RX_START;
 8005414:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8005418:	f7ff ba42 	b.w	80048a0 <my_get_notify+0x174>
 800541c:	080251e4 	.word	0x080251e4
 8005420:	08025280 	.word	0x08025280
 8005424:	20001630 	.word	0x20001630
 8005428:	08025228 	.word	0x08025228
 800542c:	080248fc 	.word	0x080248fc
 8005430:	08024904 	.word	0x08024904
 8005434:	080251d4 	.word	0x080251d4
 8005438:	080251dc 	.word	0x080251dc
 800543c:	08021688 	.word	0x08021688
 8005440:	080252b0 	.word	0x080252b0
 8005444:	080252bc 	.word	0x080252bc
 8005448:	08025168 	.word	0x08025168
 800544c:	20004bd0 	.word	0x20004bd0
 8005450:	20004c58 	.word	0x20004c58
 8005454:	20001860 	.word	0x20001860
 8005458:	20004b6c 	.word	0x20004b6c
        if(*end_cmd == ' ')
 800545c:	463d      	mov	r5, r7
 800545e:	f7ff ba1c 	b.w	800489a <my_get_notify+0x16e>
        switch(iperf_ctrl_info.ctrl_sign)
 8005462:	2500      	movs	r5, #0
 8005464:	f7ff bbbc 	b.w	8004be0 <my_get_notify+0x4b4>
        ctrl_info_ptr -> ctrl_sign = UNKNOWN_TEST;
 8005468:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            next_token++;
 800546c:	46c2      	mov	sl, r8
 800546e:	f7ff ba17 	b.w	80048a0 <my_get_notify+0x174>
                ctrl_info_ptr -> ctrl_sign = TCP_TX_START;                            
 8005472:	2305      	movs	r3, #5
            next_token++;
 8005474:	46c2      	mov	sl, r8
                ctrl_info_ptr -> ctrl_sign = TCP_TX_START;                            
 8005476:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800547a:	f7ff ba11 	b.w	80048a0 <my_get_notify+0x174>
    nx_tcp_socket_disconnect(&tcp_client_socket, NX_NO_WAIT);
 800547e:	2100      	movs	r1, #0
 8005480:	4836      	ldr	r0, [pc, #216]	; (800555c <my_get_notify+0xe30>)
 8005482:	f002 fa93 	bl	80079ac <_nx_tcp_socket_disconnect>
    nx_tcp_client_socket_unbind(&tcp_client_socket);
 8005486:	4835      	ldr	r0, [pc, #212]	; (800555c <my_get_notify+0xe30>)
 8005488:	f001 fc2e 	bl	8006ce8 <_nx_tcp_client_socket_unbind>
    nx_tcp_socket_delete(&tcp_client_socket);
 800548c:	4833      	ldr	r0, [pc, #204]	; (800555c <my_get_notify+0xe30>)
 800548e:	f002 fa43 	bl	8007918 <_nx_tcp_socket_delete>
    tx_thread_terminate(&thread_tcp_tx_iperf);
 8005492:	4833      	ldr	r0, [pc, #204]	; (8005560 <my_get_notify+0xe34>)
 8005494:	f018 fc8a 	bl	801ddac <_txe_thread_terminate>
    tx_thread_delete(&thread_tcp_tx_iperf); 
 8005498:	4831      	ldr	r0, [pc, #196]	; (8005560 <my_get_notify+0xe34>)
 800549a:	f018 fc33 	bl	801dd04 <_txe_thread_delete>
 800549e:	f7ff ba78 	b.w	8004992 <my_get_notify+0x266>
    nx_udp_socket_unbind(&udp_server_socket);
 80054a2:	4830      	ldr	r0, [pc, #192]	; (8005564 <my_get_notify+0xe38>)
 80054a4:	f003 fd56 	bl	8008f54 <_nx_udp_socket_unbind>
    nx_udp_socket_delete(&udp_server_socket);
 80054a8:	482e      	ldr	r0, [pc, #184]	; (8005564 <my_get_notify+0xe38>)
 80054aa:	f003 fc41 	bl	8008d30 <_nx_udp_socket_delete>
    tx_thread_terminate(&thread_udp_rx_iperf);
 80054ae:	482e      	ldr	r0, [pc, #184]	; (8005568 <my_get_notify+0xe3c>)
 80054b0:	f018 fc7c 	bl	801ddac <_txe_thread_terminate>
    tx_thread_delete(&thread_udp_rx_iperf);
 80054b4:	482c      	ldr	r0, [pc, #176]	; (8005568 <my_get_notify+0xe3c>)
 80054b6:	f018 fc25 	bl	801dd04 <_txe_thread_delete>
 80054ba:	f7ff ba6a 	b.w	8004992 <my_get_notify+0x266>
    nx_tcp_socket_disconnect(&tcp_server_socket, NX_NO_WAIT);
 80054be:	2100      	movs	r1, #0
 80054c0:	482a      	ldr	r0, [pc, #168]	; (800556c <my_get_notify+0xe40>)
 80054c2:	f002 fa73 	bl	80079ac <_nx_tcp_socket_disconnect>
    nx_tcp_server_socket_unaccept(&tcp_server_socket);
 80054c6:	4829      	ldr	r0, [pc, #164]	; (800556c <my_get_notify+0xe40>)
 80054c8:	f002 f888 	bl	80075dc <_nx_tcp_server_socket_unaccept>
    nx_tcp_server_socket_unlisten(_iperf_test_ip, TCP_RX_PORT);
 80054cc:	4b28      	ldr	r3, [pc, #160]	; (8005570 <my_get_notify+0xe44>)
 80054ce:	f241 3189 	movw	r1, #5001	; 0x1389
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	f002 f8fa 	bl	80076cc <_nx_tcp_server_socket_unlisten>
    nx_tcp_socket_delete(&tcp_server_socket);
 80054d8:	4824      	ldr	r0, [pc, #144]	; (800556c <my_get_notify+0xe40>)
 80054da:	f002 fa1d 	bl	8007918 <_nx_tcp_socket_delete>
    tx_thread_terminate(&thread_tcp_rx_iperf);
 80054de:	4825      	ldr	r0, [pc, #148]	; (8005574 <my_get_notify+0xe48>)
 80054e0:	f018 fc64 	bl	801ddac <_txe_thread_terminate>
    tx_thread_delete(&thread_tcp_rx_iperf);     
 80054e4:	4823      	ldr	r0, [pc, #140]	; (8005574 <my_get_notify+0xe48>)
 80054e6:	f018 fc0d 	bl	801dd04 <_txe_thread_delete>
 80054ea:	f7ff ba52 	b.w	8004992 <my_get_notify+0x266>
    nx_udp_socket_unbind(&udp_client_socket);
 80054ee:	4822      	ldr	r0, [pc, #136]	; (8005578 <my_get_notify+0xe4c>)
 80054f0:	f003 fd30 	bl	8008f54 <_nx_udp_socket_unbind>
    nx_udp_socket_delete(&udp_client_socket);
 80054f4:	4820      	ldr	r0, [pc, #128]	; (8005578 <my_get_notify+0xe4c>)
 80054f6:	f003 fc1b 	bl	8008d30 <_nx_udp_socket_delete>
    tx_thread_terminate(&thread_udp_tx_iperf);
 80054fa:	4820      	ldr	r0, [pc, #128]	; (800557c <my_get_notify+0xe50>)
 80054fc:	f018 fc56 	bl	801ddac <_txe_thread_terminate>
    tx_thread_delete(&thread_udp_tx_iperf);
 8005500:	481e      	ldr	r0, [pc, #120]	; (800557c <my_get_notify+0xe50>)
 8005502:	f018 fbff 	bl	801dd04 <_txe_thread_delete>
 8005506:	f7ff ba44 	b.w	8004992 <my_get_notify+0x266>
            ctrl_info_ptr -> version = NX_IP_VERSION_V4;
 800550a:	2304      	movs	r3, #4
            ctrl_info_ptr -> ip = DEFAULT_IPERF_IP;
 800550c:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <my_get_notify+0xe54>)
 800550e:	46c2      	mov	sl, r8
 8005510:	9207      	str	r2, [sp, #28]
            ctrl_info_ptr -> version = NX_IP_VERSION_V4;
 8005512:	9306      	str	r3, [sp, #24]
 8005514:	f7ff b9c4 	b.w	80048a0 <my_get_notify+0x174>
    else if(strncmp(token, "ping_rate", strlen("ping_rate")) == 0)
 8005518:	2209      	movs	r2, #9
 800551a:	491a      	ldr	r1, [pc, #104]	; (8005584 <my_get_notify+0xe58>)
 800551c:	4650      	mov	r0, sl
 800551e:	f019 f915 	bl	801e74c <strncmp>
 8005522:	2800      	cmp	r0, #0
 8005524:	f47f abd5 	bne.w	8004cd2 <my_get_notify+0x5a6>
      ctrl_info_ptr -> PingRate = 0;
 8005528:	9010      	str	r0, [sp, #64]	; 0x40
      while(value_ptr && (*value_ptr != 0))
 800552a:	2f00      	cmp	r7, #0
 800552c:	f000 84c6 	beq.w	8005ebc <my_get_notify+0x1790>
 8005530:	7862      	ldrb	r2, [r4, #1]
 8005532:	2a00      	cmp	r2, #0
 8005534:	f000 84c2 	beq.w	8005ebc <my_get_notify+0x1790>
 8005538:	4603      	mov	r3, r0
 800553a:	e002      	b.n	8005542 <my_get_notify+0xe16>
 800553c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8005540:	b13a      	cbz	r2, 8005552 <my_get_notify+0xe26>
          ctrl_info_ptr -> PingRate = ctrl_info_ptr -> PingRate * 10 + ((UINT)(*value_ptr - '0'));
 8005542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      while(value_ptr && (*value_ptr != 0))
 8005546:	1c79      	adds	r1, r7, #1
          ctrl_info_ptr -> PingRate = ctrl_info_ptr -> PingRate * 10 + ((UINT)(*value_ptr - '0'));
 8005548:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800554c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
      while(value_ptr && (*value_ptr != 0))
 8005550:	d1f4      	bne.n	800553c <my_get_notify+0xe10>
 8005552:	9310      	str	r3, [sp, #64]	; 0x40
            next_token++;
 8005554:	46c2      	mov	sl, r8
 8005556:	f7ff b9a3 	b.w	80048a0 <my_get_notify+0x174>
 800555a:	bf00      	nop
 800555c:	2000775c 	.word	0x2000775c
 8005560:	20001790 	.word	0x20001790
 8005564:	20004c58 	.word	0x20004c58
 8005568:	20001860 	.word	0x20001860
 800556c:	20004cd0 	.word	0x20004cd0
 8005570:	20004b68 	.word	0x20004b68
 8005574:	200016c8 	.word	0x200016c8
 8005578:	20004bdc 	.word	0x20004bdc
 800557c:	20001928 	.word	0x20001928
 8005580:	c0a80006 	.word	0xc0a80006
 8005584:	08021590 	.word	0x08021590
    htmlwrite(resp_packet_ptr, toptdtag);
 8005588:	f04f 35ff 	mov.w	r5, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 800558c:	f04f 33ff 	mov.w	r3, #4294967295
 8005590:	224c      	movs	r2, #76	; 0x4c
 8005592:	a904      	add	r1, sp, #16
 8005594:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8005596:	f001 f879 	bl	800668c <_nx_packet_allocate>
    htmlwrite(resp_packet_ptr, toptdtag);
 800559a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 800559c:	4604      	mov	r4, r0
    htmlwrite(resp_packet_ptr, toptdtag);
 800559e:	222d      	movs	r2, #45	; 0x2d
 80055a0:	49b0      	ldr	r1, [pc, #704]	; (8005864 <my_get_notify+0x1138>)
 80055a2:	9804      	ldr	r0, [sp, #16]
 80055a4:	9500      	str	r5, [sp, #0]
 80055a6:	f001 f8cf 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tabletag);
 80055aa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80055ac:	2212      	movs	r2, #18
 80055ae:	49ae      	ldr	r1, [pc, #696]	; (8005868 <my_get_notify+0x113c>)
 80055b0:	9804      	ldr	r0, [sp, #16]
 80055b2:	9500      	str	r5, [sp, #0]
 80055b4:	f001 f8c8 	bl	8006748 <_nx_packet_data_append>
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 80055b8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80055ba:	221a      	movs	r2, #26
 80055bc:	49ab      	ldr	r1, [pc, #684]	; (800586c <my_get_notify+0x1140>)
 80055be:	9804      	ldr	r0, [sp, #16]
 80055c0:	9500      	str	r5, [sp, #0]
 80055c2:	f001 f8c1 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, trtag);
 80055c6:	9a04      	ldr	r2, [sp, #16]
 80055c8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 80055ca:	4404      	add	r4, r0
    htmlwrite(resp_packet_ptr, trtag);
 80055cc:	49a8      	ldr	r1, [pc, #672]	; (8005870 <my_get_notify+0x1144>)
 80055ce:	4610      	mov	r0, r2
 80055d0:	9500      	str	r5, [sp, #0]
 80055d2:	2204      	movs	r2, #4
 80055d4:	f001 f8b8 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tdtag);
 80055d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80055da:	2204      	movs	r2, #4
 80055dc:	49a5      	ldr	r1, [pc, #660]	; (8005874 <my_get_notify+0x1148>)
 80055de:	9804      	ldr	r0, [sp, #16]
 80055e0:	9500      	str	r5, [sp, #0]
 80055e2:	f001 f8b1 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, fonttag);
 80055e6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80055e8:	222a      	movs	r2, #42	; 0x2a
 80055ea:	49a3      	ldr	r1, [pc, #652]	; (8005878 <my_get_notify+0x114c>)
 80055ec:	9804      	ldr	r0, [sp, #16]
 80055ee:	9500      	str	r5, [sp, #0]
 80055f0:	f001 f8aa 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, "PING Test Done:");
 80055f4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80055f6:	220f      	movs	r2, #15
 80055f8:	49a0      	ldr	r1, [pc, #640]	; (800587c <my_get_notify+0x1150>)
 80055fa:	9804      	ldr	r0, [sp, #16]
 80055fc:	9500      	str	r5, [sp, #0]
 80055fe:	f001 f8a3 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005602:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005604:	2207      	movs	r2, #7
 8005606:	499e      	ldr	r1, [pc, #632]	; (8005880 <my_get_notify+0x1154>)
 8005608:	9804      	ldr	r0, [sp, #16]
 800560a:	9500      	str	r5, [sp, #0]
 800560c:	f001 f89c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005610:	9a04      	ldr	r2, [sp, #16]
 8005612:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005614:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005616:	499b      	ldr	r1, [pc, #620]	; (8005884 <my_get_notify+0x1158>)
 8005618:	4610      	mov	r0, r2
 800561a:	9500      	str	r5, [sp, #0]
 800561c:	2207      	movs	r2, #7
 800561e:	f001 f893 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005622:	9a04      	ldr	r2, [sp, #16]
 8005624:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005626:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005628:	4997      	ldr	r1, [pc, #604]	; (8005888 <my_get_notify+0x115c>)
 800562a:	4610      	mov	r0, r2
 800562c:	9500      	str	r5, [sp, #0]
 800562e:	2205      	movs	r2, #5
 8005630:	f001 f88a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8005634:	9a04      	ldr	r2, [sp, #16]
 8005636:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005638:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, rightspanline);
 800563a:	498c      	ldr	r1, [pc, #560]	; (800586c <my_get_notify+0x1140>)
 800563c:	4610      	mov	r0, r2
 800563e:	9500      	str	r5, [sp, #0]
 8005640:	221a      	movs	r2, #26
 8005642:	f001 f881 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005646:	9a04      	ldr	r2, [sp, #16]
 8005648:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, rightspanline);
 800564a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 800564c:	4988      	ldr	r1, [pc, #544]	; (8005870 <my_get_notify+0x1144>)
 800564e:	4610      	mov	r0, r2
 8005650:	9500      	str	r5, [sp, #0]
 8005652:	2204      	movs	r2, #4
 8005654:	f001 f878 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005658:	9a04      	ldr	r2, [sp, #16]
 800565a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 800565c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 800565e:	4985      	ldr	r1, [pc, #532]	; (8005874 <my_get_notify+0x1148>)
 8005660:	4610      	mov	r0, r2
 8005662:	9500      	str	r5, [sp, #0]
 8005664:	2204      	movs	r2, #4
 8005666:	f001 f86f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 800566a:	9a04      	ldr	r2, [sp, #16]
 800566c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 800566e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005670:	4981      	ldr	r1, [pc, #516]	; (8005878 <my_get_notify+0x114c>)
 8005672:	4610      	mov	r0, r2
 8005674:	9500      	str	r5, [sp, #0]
 8005676:	222a      	movs	r2, #42	; 0x2a
 8005678:	f001 f866 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 800567c:	9a04      	ldr	r2, [sp, #16]
 800567e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005680:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 8005682:	4982      	ldr	r1, [pc, #520]	; (800588c <my_get_notify+0x1160>)
 8005684:	4610      	mov	r0, r2
 8005686:	9500      	str	r5, [sp, #0]
 8005688:	2218      	movs	r2, #24
 800568a:	f001 f85d 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 800568e:	693b      	ldr	r3, [r7, #16]
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 8005690:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8005692:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800569c:	f7fd fd70 	bl	8003180 <get_ip_addr_string>
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4682      	mov	sl, r0
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80056aa:	f7fd fd69 	bl	8003180 <get_ip_addr_string>
 80056ae:	f7fa feed 	bl	800048c <strlen>
 80056b2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80056b4:	4602      	mov	r2, r0
 80056b6:	4651      	mov	r1, sl
 80056b8:	9500      	str	r5, [sp, #0]
 80056ba:	4640      	mov	r0, r8
 80056bc:	f001 f844 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80056c0:	9a04      	ldr	r2, [sp, #16]
 80056c2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 80056c4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80056c6:	496e      	ldr	r1, [pc, #440]	; (8005880 <my_get_notify+0x1154>)
 80056c8:	4610      	mov	r0, r2
 80056ca:	9500      	str	r5, [sp, #0]
 80056cc:	2207      	movs	r2, #7
 80056ce:	f001 f83b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80056d2:	9a04      	ldr	r2, [sp, #16]
 80056d4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 80056d6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80056d8:	496a      	ldr	r1, [pc, #424]	; (8005884 <my_get_notify+0x1158>)
 80056da:	4610      	mov	r0, r2
 80056dc:	9500      	str	r5, [sp, #0]
 80056de:	2207      	movs	r2, #7
 80056e0:	f001 f832 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 80056e4:	9a04      	ldr	r2, [sp, #16]
 80056e6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 80056e8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 80056ea:	4967      	ldr	r1, [pc, #412]	; (8005888 <my_get_notify+0x115c>)
 80056ec:	4610      	mov	r0, r2
 80056ee:	9500      	str	r5, [sp, #0]
 80056f0:	2205      	movs	r2, #5
 80056f2:	f001 f829 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 80056f6:	9a04      	ldr	r2, [sp, #16]
 80056f8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 80056fa:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 80056fc:	495c      	ldr	r1, [pc, #368]	; (8005870 <my_get_notify+0x1144>)
 80056fe:	4610      	mov	r0, r2
 8005700:	9500      	str	r5, [sp, #0]
 8005702:	2204      	movs	r2, #4
 8005704:	f001 f820 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005708:	9a04      	ldr	r2, [sp, #16]
 800570a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 800570c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 800570e:	4959      	ldr	r1, [pc, #356]	; (8005874 <my_get_notify+0x1148>)
 8005710:	4610      	mov	r0, r2
 8005712:	9500      	str	r5, [sp, #0]
 8005714:	2204      	movs	r2, #4
 8005716:	f001 f817 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 800571a:	9a04      	ldr	r2, [sp, #16]
 800571c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 800571e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005720:	4955      	ldr	r1, [pc, #340]	; (8005878 <my_get_notify+0x114c>)
 8005722:	4610      	mov	r0, r2
 8005724:	9500      	str	r5, [sp, #0]
 8005726:	222a      	movs	r2, #42	; 0x2a
 8005728:	f001 f80e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Ping Sent: ");
 800572c:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 800572e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Ping Sent: ");
 8005730:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005732:	4610      	mov	r0, r2
 8005734:	4956      	ldr	r1, [pc, #344]	; (8005890 <my_get_notify+0x1164>)
 8005736:	2215      	movs	r2, #21
 8005738:	9500      	str	r5, [sp, #0]
 800573a:	f001 f805 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsTxed, mytempstring);
 800573e:	4955      	ldr	r1, [pc, #340]	; (8005894 <my_get_notify+0x1168>)
    status += htmlwrite(resp_packet_ptr, "Number of Ping Sent: ");
 8005740:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsTxed, mytempstring);
 8005742:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
 8005746:	f005 fdbb 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);      
 800574a:	4852      	ldr	r0, [pc, #328]	; (8005894 <my_get_notify+0x1168>)
 800574c:	f7fa fe9e 	bl	800048c <strlen>
 8005750:	9904      	ldr	r1, [sp, #16]
 8005752:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005754:	4602      	mov	r2, r0
 8005756:	9500      	str	r5, [sp, #0]
 8005758:	4608      	mov	r0, r1
 800575a:	494e      	ldr	r1, [pc, #312]	; (8005894 <my_get_notify+0x1168>)
 800575c:	f000 fff4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005760:	9a04      	ldr	r2, [sp, #16]
 8005762:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);      
 8005764:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005766:	4946      	ldr	r1, [pc, #280]	; (8005880 <my_get_notify+0x1154>)
 8005768:	4610      	mov	r0, r2
 800576a:	9500      	str	r5, [sp, #0]
 800576c:	2207      	movs	r2, #7
 800576e:	f000 ffeb 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005776:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005778:	4942      	ldr	r1, [pc, #264]	; (8005884 <my_get_notify+0x1158>)
 800577a:	4610      	mov	r0, r2
 800577c:	9500      	str	r5, [sp, #0]
 800577e:	2207      	movs	r2, #7
 8005780:	f000 ffe2 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005784:	9a04      	ldr	r2, [sp, #16]
 8005786:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005788:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 800578a:	493f      	ldr	r1, [pc, #252]	; (8005888 <my_get_notify+0x115c>)
 800578c:	4610      	mov	r0, r2
 800578e:	9500      	str	r5, [sp, #0]
 8005790:	2205      	movs	r2, #5
 8005792:	f000 ffd9 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005796:	9a04      	ldr	r2, [sp, #16]
 8005798:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 800579a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 800579c:	4934      	ldr	r1, [pc, #208]	; (8005870 <my_get_notify+0x1144>)
 800579e:	4610      	mov	r0, r2
 80057a0:	9500      	str	r5, [sp, #0]
 80057a2:	2204      	movs	r2, #4
 80057a4:	f000 ffd0 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 80057a8:	9a04      	ldr	r2, [sp, #16]
 80057aa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 80057ac:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 80057ae:	4931      	ldr	r1, [pc, #196]	; (8005874 <my_get_notify+0x1148>)
 80057b0:	4610      	mov	r0, r2
 80057b2:	9500      	str	r5, [sp, #0]
 80057b4:	2204      	movs	r2, #4
 80057b6:	f000 ffc7 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 80057ba:	9a04      	ldr	r2, [sp, #16]
 80057bc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 80057be:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 80057c0:	492d      	ldr	r1, [pc, #180]	; (8005878 <my_get_notify+0x114c>)
 80057c2:	4610      	mov	r0, r2
 80057c4:	9500      	str	r5, [sp, #0]
 80057c6:	222a      	movs	r2, #42	; 0x2a
 80057c8:	f000 ffbe 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Ping Received: ");
 80057cc:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 80057ce:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Ping Received: ");
 80057d0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80057d2:	4610      	mov	r0, r2
 80057d4:	4930      	ldr	r1, [pc, #192]	; (8005898 <my_get_notify+0x116c>)
 80057d6:	2219      	movs	r2, #25
 80057d8:	9500      	str	r5, [sp, #0]
 80057da:	f000 ffb5 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsRxed, mytempstring);
 80057de:	492d      	ldr	r1, [pc, #180]	; (8005894 <my_get_notify+0x1168>)
    status += htmlwrite(resp_packet_ptr, "Number of Ping Received: ");
 80057e0:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsRxed, mytempstring);
 80057e2:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 80057e6:	f005 fd6b 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);       
 80057ea:	482a      	ldr	r0, [pc, #168]	; (8005894 <my_get_notify+0x1168>)
 80057ec:	f7fa fe4e 	bl	800048c <strlen>
 80057f0:	9904      	ldr	r1, [sp, #16]
 80057f2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80057f4:	4602      	mov	r2, r0
 80057f6:	9500      	str	r5, [sp, #0]
 80057f8:	4608      	mov	r0, r1
 80057fa:	4926      	ldr	r1, [pc, #152]	; (8005894 <my_get_notify+0x1168>)
 80057fc:	f000 ffa4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005800:	9a04      	ldr	r2, [sp, #16]
 8005802:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);       
 8005804:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005806:	491e      	ldr	r1, [pc, #120]	; (8005880 <my_get_notify+0x1154>)
 8005808:	4610      	mov	r0, r2
 800580a:	9500      	str	r5, [sp, #0]
 800580c:	2207      	movs	r2, #7
 800580e:	f000 ff9b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005812:	9a04      	ldr	r2, [sp, #16]
 8005814:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005816:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005818:	491a      	ldr	r1, [pc, #104]	; (8005884 <my_get_notify+0x1158>)
 800581a:	4610      	mov	r0, r2
 800581c:	9500      	str	r5, [sp, #0]
 800581e:	2207      	movs	r2, #7
 8005820:	f000 ff92 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);           
 8005824:	9a04      	ldr	r2, [sp, #16]
 8005826:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005828:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);           
 800582a:	4917      	ldr	r1, [pc, #92]	; (8005888 <my_get_notify+0x115c>)
 800582c:	4610      	mov	r0, r2
 800582e:	9500      	str	r5, [sp, #0]
 8005830:	2205      	movs	r2, #5
 8005832:	f000 ff89 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 8005836:	9a04      	ldr	r2, [sp, #16]
 8005838:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);           
 800583a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 800583c:	4917      	ldr	r1, [pc, #92]	; (800589c <my_get_notify+0x1170>)
 800583e:	4610      	mov	r0, r2
 8005840:	9500      	str	r5, [sp, #0]
 8005842:	2208      	movs	r2, #8
 8005844:	f000 ff80 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005848:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 800584a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800584c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800584e:	4610      	mov	r0, r2
 8005850:	490c      	ldr	r1, [pc, #48]	; (8005884 <my_get_notify+0x1158>)
 8005852:	2207      	movs	r2, #7
 8005854:	9500      	str	r5, [sp, #0]
 8005856:	f000 ff77 	bl	8006748 <_nx_packet_data_append>
 800585a:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 800585c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005860:	9904      	ldr	r1, [sp, #16]
 8005862:	e01d      	b.n	80058a0 <my_get_notify+0x1174>
 8005864:	08025174 	.word	0x08025174
 8005868:	080251a4 	.word	0x080251a4
 800586c:	080251b8 	.word	0x080251b8
 8005870:	080251d4 	.word	0x080251d4
 8005874:	080251dc 	.word	0x080251dc
 8005878:	080251e4 	.word	0x080251e4
 800587c:	080216b4 	.word	0x080216b4
 8005880:	08025228 	.word	0x08025228
 8005884:	080248fc 	.word	0x080248fc
 8005888:	08024904 	.word	0x08024904
 800588c:	080252d8 	.word	0x080252d8
 8005890:	080216c4 	.word	0x080216c4
 8005894:	20001630 	.word	0x20001630
 8005898:	080216dc 	.word	0x080216dc
 800589c:	08025168 	.word	0x08025168
 80058a0:	9802      	ldr	r0, [sp, #8]
 80058a2:	f002 fbcf 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 80058a6:	42c4      	cmn	r4, r0
 80058a8:	f43f ad5a 	beq.w	8005360 <my_get_notify+0xc34>
        nx_packet_release(resp_packet_ptr);
 80058ac:	9804      	ldr	r0, [sp, #16]
 80058ae:	f001 f89f 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 80058b2:	4a06      	ldr	r2, [pc, #24]	; (80058cc <my_get_notify+0x11a0>)
 80058b4:	6813      	ldr	r3, [r2, #0]
 80058b6:	3301      	adds	r3, #1
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e551      	b.n	8005360 <my_get_notify+0xc34>
            print_tcp_tx_results(server_ptr);
 80058bc:	4630      	mov	r0, r6
 80058be:	f7fe fa99 	bl	8003df4 <print_tcp_tx_results>
 80058c2:	e54d      	b.n	8005360 <my_get_notify+0xc34>
            print_tcp_rx_results(server_ptr);
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7fd ffc7 	bl	8003858 <print_tcp_rx_results>
 80058ca:	e549      	b.n	8005360 <my_get_notify+0xc34>
 80058cc:	20004bd0 	.word	0x20004bd0
    htmlwrite(resp_packet_ptr, toptdtag);
 80058d0:	f04f 35ff 	mov.w	r5, #4294967295
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
 80058d8:	224c      	movs	r2, #76	; 0x4c
 80058da:	a904      	add	r1, sp, #16
 80058dc:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80058de:	f000 fed5 	bl	800668c <_nx_packet_allocate>
    htmlwrite(resp_packet_ptr, toptdtag);
 80058e2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr,
 80058e4:	4604      	mov	r4, r0
    htmlwrite(resp_packet_ptr, toptdtag);
 80058e6:	222d      	movs	r2, #45	; 0x2d
 80058e8:	49b1      	ldr	r1, [pc, #708]	; (8005bb0 <my_get_notify+0x1484>)
 80058ea:	9804      	ldr	r0, [sp, #16]
 80058ec:	9500      	str	r5, [sp, #0]
 80058ee:	f000 ff2b 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tabletag);
 80058f2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80058f4:	2212      	movs	r2, #18
 80058f6:	49af      	ldr	r1, [pc, #700]	; (8005bb4 <my_get_notify+0x1488>)
 80058f8:	9804      	ldr	r0, [sp, #16]
 80058fa:	9500      	str	r5, [sp, #0]
 80058fc:	f000 ff24 	bl	8006748 <_nx_packet_data_append>
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8005900:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005902:	221a      	movs	r2, #26
 8005904:	49ac      	ldr	r1, [pc, #688]	; (8005bb8 <my_get_notify+0x148c>)
 8005906:	9804      	ldr	r0, [sp, #16]
 8005908:	9500      	str	r5, [sp, #0]
 800590a:	f000 ff1d 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, trtag);
 800590e:	9a04      	ldr	r2, [sp, #16]
 8005910:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status +=  htmlwrite(resp_packet_ptr, rightspanline);
 8005912:	4404      	add	r4, r0
    htmlwrite(resp_packet_ptr, trtag);
 8005914:	49a9      	ldr	r1, [pc, #676]	; (8005bbc <my_get_notify+0x1490>)
 8005916:	4610      	mov	r0, r2
 8005918:	9500      	str	r5, [sp, #0]
 800591a:	2204      	movs	r2, #4
 800591c:	f000 ff14 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, tdtag);
 8005920:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005922:	2204      	movs	r2, #4
 8005924:	49a6      	ldr	r1, [pc, #664]	; (8005bc0 <my_get_notify+0x1494>)
 8005926:	9804      	ldr	r0, [sp, #16]
 8005928:	9500      	str	r5, [sp, #0]
 800592a:	f000 ff0d 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, fonttag);
 800592e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005930:	222a      	movs	r2, #42	; 0x2a
 8005932:	49a4      	ldr	r1, [pc, #656]	; (8005bc4 <my_get_notify+0x1498>)
 8005934:	9804      	ldr	r0, [sp, #16]
 8005936:	9500      	str	r5, [sp, #0]
 8005938:	f000 ff06 	bl	8006748 <_nx_packet_data_append>
    htmlwrite(resp_packet_ptr, "UDP Transmit Test Done:");
 800593c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800593e:	2217      	movs	r2, #23
 8005940:	49a1      	ldr	r1, [pc, #644]	; (8005bc8 <my_get_notify+0x149c>)
 8005942:	9804      	ldr	r0, [sp, #16]
 8005944:	9500      	str	r5, [sp, #0]
 8005946:	f000 feff 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800594a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800594c:	2207      	movs	r2, #7
 800594e:	499f      	ldr	r1, [pc, #636]	; (8005bcc <my_get_notify+0x14a0>)
 8005950:	9804      	ldr	r0, [sp, #16]
 8005952:	9500      	str	r5, [sp, #0]
 8005954:	f000 fef8 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005958:	9a04      	ldr	r2, [sp, #16]
 800595a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 800595c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800595e:	499c      	ldr	r1, [pc, #624]	; (8005bd0 <my_get_notify+0x14a4>)
 8005960:	4610      	mov	r0, r2
 8005962:	9500      	str	r5, [sp, #0]
 8005964:	2207      	movs	r2, #7
 8005966:	f000 feef 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 800596a:	9a04      	ldr	r2, [sp, #16]
 800596c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 800596e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005970:	4998      	ldr	r1, [pc, #608]	; (8005bd4 <my_get_notify+0x14a8>)
 8005972:	4610      	mov	r0, r2
 8005974:	9500      	str	r5, [sp, #0]
 8005976:	2205      	movs	r2, #5
 8005978:	f000 fee6 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, rightspanline);
 800597c:	9a04      	ldr	r2, [sp, #16]
 800597e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005980:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8005982:	498d      	ldr	r1, [pc, #564]	; (8005bb8 <my_get_notify+0x148c>)
 8005984:	4610      	mov	r0, r2
 8005986:	9500      	str	r5, [sp, #0]
 8005988:	221a      	movs	r2, #26
 800598a:	f000 fedd 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 800598e:	9a04      	ldr	r2, [sp, #16]
 8005990:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, rightspanline);
 8005992:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8005994:	4989      	ldr	r1, [pc, #548]	; (8005bbc <my_get_notify+0x1490>)
 8005996:	4610      	mov	r0, r2
 8005998:	9500      	str	r5, [sp, #0]
 800599a:	2204      	movs	r2, #4
 800599c:	f000 fed4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 80059a0:	9a04      	ldr	r2, [sp, #16]
 80059a2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 80059a4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 80059a6:	4986      	ldr	r1, [pc, #536]	; (8005bc0 <my_get_notify+0x1494>)
 80059a8:	4610      	mov	r0, r2
 80059aa:	9500      	str	r5, [sp, #0]
 80059ac:	2204      	movs	r2, #4
 80059ae:	f000 fecb 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 80059b2:	9a04      	ldr	r2, [sp, #16]
 80059b4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 80059b6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 80059b8:	4982      	ldr	r1, [pc, #520]	; (8005bc4 <my_get_notify+0x1498>)
 80059ba:	4610      	mov	r0, r2
 80059bc:	9500      	str	r5, [sp, #0]
 80059be:	222a      	movs	r2, #42	; 0x2a
 80059c0:	f000 fec2 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 80059c4:	9a04      	ldr	r2, [sp, #16]
 80059c6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 80059c8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 80059ca:	4983      	ldr	r1, [pc, #524]	; (8005bd8 <my_get_notify+0x14ac>)
 80059cc:	4610      	mov	r0, r2
 80059ce:	9500      	str	r5, [sp, #0]
 80059d0:	2218      	movs	r2, #24
 80059d2:	f000 feb9 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 80059d6:	693b      	ldr	r3, [r7, #16]
    status += htmlwrite(resp_packet_ptr, "Destination IP Address: ");
 80059d8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 80059da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80059e4:	f7fd fbcc 	bl	8003180 <get_ip_addr_string>
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4682      	mov	sl, r0
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80059f2:	f7fd fbc5 	bl	8003180 <get_ip_addr_string>
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 80059f6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 80059fa:	f7fa fd47 	bl	800048c <strlen>
 80059fe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005a00:	4602      	mov	r2, r0
 8005a02:	4651      	mov	r1, sl
 8005a04:	9500      	str	r5, [sp, #0]
 8005a06:	4640      	mov	r0, r8
 8005a08:	f000 fe9e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005a0c:	9a04      	ldr	r2, [sp, #16]
 8005a0e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, get_ip_addr_string(iperf_ip));
 8005a10:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005a12:	496e      	ldr	r1, [pc, #440]	; (8005bcc <my_get_notify+0x14a0>)
 8005a14:	4610      	mov	r0, r2
 8005a16:	9500      	str	r5, [sp, #0]
 8005a18:	2207      	movs	r2, #7
 8005a1a:	f000 fe95 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005a1e:	9a04      	ldr	r2, [sp, #16]
 8005a20:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005a22:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005a24:	496a      	ldr	r1, [pc, #424]	; (8005bd0 <my_get_notify+0x14a4>)
 8005a26:	4610      	mov	r0, r2
 8005a28:	9500      	str	r5, [sp, #0]
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	f000 fe8c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005a30:	9a04      	ldr	r2, [sp, #16]
 8005a32:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005a34:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005a36:	4967      	ldr	r1, [pc, #412]	; (8005bd4 <my_get_notify+0x14a8>)
 8005a38:	4610      	mov	r0, r2
 8005a3a:	9500      	str	r5, [sp, #0]
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	f000 fe83 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005a42:	9a04      	ldr	r2, [sp, #16]
 8005a44:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005a46:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8005a48:	495c      	ldr	r1, [pc, #368]	; (8005bbc <my_get_notify+0x1490>)
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	9500      	str	r5, [sp, #0]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	f000 fe7a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005a54:	9a04      	ldr	r2, [sp, #16]
 8005a56:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8005a58:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005a5a:	4959      	ldr	r1, [pc, #356]	; (8005bc0 <my_get_notify+0x1494>)
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	9500      	str	r5, [sp, #0]
 8005a60:	2204      	movs	r2, #4
 8005a62:	f000 fe71 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005a66:	9a04      	ldr	r2, [sp, #16]
 8005a68:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005a6a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005a6c:	4955      	ldr	r1, [pc, #340]	; (8005bc4 <my_get_notify+0x1498>)
 8005a6e:	4610      	mov	r0, r2
 8005a70:	9500      	str	r5, [sp, #0]
 8005a72:	222a      	movs	r2, #42	; 0x2a
 8005a74:	f000 fe68 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Destination Port: ");
 8005a78:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005a7a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Destination Port: ");
 8005a7c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4956      	ldr	r1, [pc, #344]	; (8005bdc <my_get_notify+0x14b0>)
 8005a82:	2212      	movs	r2, #18
 8005a84:	9500      	str	r5, [sp, #0]
 8005a86:	f000 fe5f 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.port, mytempstring);
 8005a8a:	4955      	ldr	r1, [pc, #340]	; (8005be0 <my_get_notify+0x14b4>)
    status += htmlwrite(resp_packet_ptr, "Destination Port: ");
 8005a8c:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.port, mytempstring);
 8005a8e:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005a92:	f005 fc15 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8005a96:	4852      	ldr	r0, [pc, #328]	; (8005be0 <my_get_notify+0x14b4>)
 8005a98:	f7fa fcf8 	bl	800048c <strlen>
 8005a9c:	9904      	ldr	r1, [sp, #16]
 8005a9e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	9500      	str	r5, [sp, #0]
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	494e      	ldr	r1, [pc, #312]	; (8005be0 <my_get_notify+0x14b4>)
 8005aa8:	f000 fe4e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005aac:	9a04      	ldr	r2, [sp, #16]
 8005aae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8005ab0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005ab2:	4946      	ldr	r1, [pc, #280]	; (8005bcc <my_get_notify+0x14a0>)
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	9500      	str	r5, [sp, #0]
 8005ab8:	2207      	movs	r2, #7
 8005aba:	f000 fe45 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005abe:	9a04      	ldr	r2, [sp, #16]
 8005ac0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005ac2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005ac4:	4942      	ldr	r1, [pc, #264]	; (8005bd0 <my_get_notify+0x14a4>)
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	9500      	str	r5, [sp, #0]
 8005aca:	2207      	movs	r2, #7
 8005acc:	f000 fe3c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005ad0:	9a04      	ldr	r2, [sp, #16]
 8005ad2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005ad4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005ad6:	493f      	ldr	r1, [pc, #252]	; (8005bd4 <my_get_notify+0x14a8>)
 8005ad8:	4610      	mov	r0, r2
 8005ada:	9500      	str	r5, [sp, #0]
 8005adc:	2205      	movs	r2, #5
 8005ade:	f000 fe33 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005ae2:	9a04      	ldr	r2, [sp, #16]
 8005ae4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005ae6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8005ae8:	4934      	ldr	r1, [pc, #208]	; (8005bbc <my_get_notify+0x1490>)
 8005aea:	4610      	mov	r0, r2
 8005aec:	9500      	str	r5, [sp, #0]
 8005aee:	2204      	movs	r2, #4
 8005af0:	f000 fe2a 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005af4:	9a04      	ldr	r2, [sp, #16]
 8005af6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8005af8:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005afa:	4931      	ldr	r1, [pc, #196]	; (8005bc0 <my_get_notify+0x1494>)
 8005afc:	4610      	mov	r0, r2
 8005afe:	9500      	str	r5, [sp, #0]
 8005b00:	2204      	movs	r2, #4
 8005b02:	f000 fe21 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005b06:	9a04      	ldr	r2, [sp, #16]
 8005b08:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005b0a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005b0c:	492d      	ldr	r1, [pc, #180]	; (8005bc4 <my_get_notify+0x1498>)
 8005b0e:	4610      	mov	r0, r2
 8005b10:	9500      	str	r5, [sp, #0]
 8005b12:	222a      	movs	r2, #42	; 0x2a
 8005b14:	f000 fe18 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8005b18:	9a04      	ldr	r2, [sp, #16]
 8005b1a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005b1c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8005b1e:	4931      	ldr	r1, [pc, #196]	; (8005be4 <my_get_notify+0x14b8>)
 8005b20:	4610      	mov	r0, r2
 8005b22:	9500      	str	r5, [sp, #0]
 8005b24:	2219      	movs	r2, #25
 8005b26:	f000 fe0f 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8005b2a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8005b2e:	4a2e      	ldr	r2, [pc, #184]	; (8005be8 <my_get_notify+0x14bc>)
    status += htmlwrite(resp_packet_ptr, "Test Time(milliseconds): ");
 8005b30:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.RunTime * 1000 / NX_IP_PERIODIC_RATE, mytempstring);
 8005b32:	fb07 f303 	mul.w	r3, r7, r3
 8005b36:	492a      	ldr	r1, [pc, #168]	; (8005be0 <my_get_notify+0x14b4>)
 8005b38:	fba2 3003 	umull	r3, r0, r2, r3
 8005b3c:	0940      	lsrs	r0, r0, #5
 8005b3e:	f005 fbbf 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);   
 8005b42:	4827      	ldr	r0, [pc, #156]	; (8005be0 <my_get_notify+0x14b4>)
 8005b44:	f7fa fca2 	bl	800048c <strlen>
 8005b48:	9904      	ldr	r1, [sp, #16]
 8005b4a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	9500      	str	r5, [sp, #0]
 8005b50:	4608      	mov	r0, r1
 8005b52:	4923      	ldr	r1, [pc, #140]	; (8005be0 <my_get_notify+0x14b4>)
 8005b54:	f000 fdf8 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005b58:	9a04      	ldr	r2, [sp, #16]
 8005b5a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);   
 8005b5c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005b5e:	491b      	ldr	r1, [pc, #108]	; (8005bcc <my_get_notify+0x14a0>)
 8005b60:	4610      	mov	r0, r2
 8005b62:	9500      	str	r5, [sp, #0]
 8005b64:	2207      	movs	r2, #7
 8005b66:	f000 fdef 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005b6a:	9a04      	ldr	r2, [sp, #16]
 8005b6c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005b6e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005b70:	4917      	ldr	r1, [pc, #92]	; (8005bd0 <my_get_notify+0x14a4>)
 8005b72:	4610      	mov	r0, r2
 8005b74:	9500      	str	r5, [sp, #0]
 8005b76:	2207      	movs	r2, #7
 8005b78:	f000 fde6 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005b7c:	9a04      	ldr	r2, [sp, #16]
 8005b7e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005b80:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005b82:	4914      	ldr	r1, [pc, #80]	; (8005bd4 <my_get_notify+0x14a8>)
 8005b84:	4610      	mov	r0, r2
 8005b86:	9500      	str	r5, [sp, #0]
 8005b88:	2205      	movs	r2, #5
 8005b8a:	f000 fddd 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005b8e:	9a04      	ldr	r2, [sp, #16]
 8005b90:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005b92:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8005b94:	4909      	ldr	r1, [pc, #36]	; (8005bbc <my_get_notify+0x1490>)
 8005b96:	4610      	mov	r0, r2
 8005b98:	9500      	str	r5, [sp, #0]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	f000 fdd4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005ba0:	9a04      	ldr	r2, [sp, #16]
 8005ba2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8005ba4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005ba6:	4906      	ldr	r1, [pc, #24]	; (8005bc0 <my_get_notify+0x1494>)
 8005ba8:	4610      	mov	r0, r2
 8005baa:	9500      	str	r5, [sp, #0]
 8005bac:	e01e      	b.n	8005bec <my_get_notify+0x14c0>
 8005bae:	bf00      	nop
 8005bb0:	08025174 	.word	0x08025174
 8005bb4:	080251a4 	.word	0x080251a4
 8005bb8:	080251b8 	.word	0x080251b8
 8005bbc:	080251d4 	.word	0x080251d4
 8005bc0:	080251dc 	.word	0x080251dc
 8005bc4:	080251e4 	.word	0x080251e4
 8005bc8:	0802169c 	.word	0x0802169c
 8005bcc:	08025228 	.word	0x08025228
 8005bd0:	080248fc 	.word	0x080248fc
 8005bd4:	08024904 	.word	0x08024904
 8005bd8:	080252d8 	.word	0x080252d8
 8005bdc:	080252f4 	.word	0x080252f4
 8005be0:	20001630 	.word	0x20001630
 8005be4:	08025244 	.word	0x08025244
 8005be8:	51eb851f 	.word	0x51eb851f
 8005bec:	2204      	movs	r2, #4
 8005bee:	f000 fdab 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005bf2:	9a04      	ldr	r2, [sp, #16]
 8005bf4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005bf6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005bf8:	49b2      	ldr	r1, [pc, #712]	; (8005ec4 <my_get_notify+0x1798>)
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	9500      	str	r5, [sp, #0]
 8005bfe:	222a      	movs	r2, #42	; 0x2a
 8005c00:	f000 fda2 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Packets Transmitted: ");
 8005c04:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005c06:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Packets Transmitted: ");
 8005c08:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	49ae      	ldr	r1, [pc, #696]	; (8005ec8 <my_get_notify+0x179c>)
 8005c0e:	221f      	movs	r2, #31
 8005c10:	9500      	str	r5, [sp, #0]
 8005c12:	f000 fd99 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsTxed, mytempstring);
 8005c16:	49ad      	ldr	r1, [pc, #692]	; (8005ecc <my_get_notify+0x17a0>)
    status += htmlwrite(resp_packet_ptr, "Number of Packets Transmitted: ");
 8005c18:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.PacketsTxed, mytempstring);
 8005c1a:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
 8005c1e:	f005 fb4f 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 8005c22:	48aa      	ldr	r0, [pc, #680]	; (8005ecc <my_get_notify+0x17a0>)
 8005c24:	f7fa fc32 	bl	800048c <strlen>
 8005c28:	9904      	ldr	r1, [sp, #16]
 8005c2a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	9500      	str	r5, [sp, #0]
 8005c30:	4608      	mov	r0, r1
 8005c32:	49a6      	ldr	r1, [pc, #664]	; (8005ecc <my_get_notify+0x17a0>)
 8005c34:	f000 fd88 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005c38:	9a04      	ldr	r2, [sp, #16]
 8005c3a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);     
 8005c3c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005c3e:	49a4      	ldr	r1, [pc, #656]	; (8005ed0 <my_get_notify+0x17a4>)
 8005c40:	4610      	mov	r0, r2
 8005c42:	9500      	str	r5, [sp, #0]
 8005c44:	2207      	movs	r2, #7
 8005c46:	f000 fd7f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005c4a:	9a04      	ldr	r2, [sp, #16]
 8005c4c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005c4e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005c50:	49a0      	ldr	r1, [pc, #640]	; (8005ed4 <my_get_notify+0x17a8>)
 8005c52:	4610      	mov	r0, r2
 8005c54:	9500      	str	r5, [sp, #0]
 8005c56:	2207      	movs	r2, #7
 8005c58:	f000 fd76 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005c5c:	9a04      	ldr	r2, [sp, #16]
 8005c5e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005c60:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005c62:	499d      	ldr	r1, [pc, #628]	; (8005ed8 <my_get_notify+0x17ac>)
 8005c64:	4610      	mov	r0, r2
 8005c66:	9500      	str	r5, [sp, #0]
 8005c68:	2205      	movs	r2, #5
 8005c6a:	f000 fd6d 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005c6e:	9a04      	ldr	r2, [sp, #16]
 8005c70:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005c72:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8005c74:	4999      	ldr	r1, [pc, #612]	; (8005edc <my_get_notify+0x17b0>)
 8005c76:	4610      	mov	r0, r2
 8005c78:	9500      	str	r5, [sp, #0]
 8005c7a:	2204      	movs	r2, #4
 8005c7c:	f000 fd64 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005c80:	9a04      	ldr	r2, [sp, #16]
 8005c82:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8005c84:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005c86:	4996      	ldr	r1, [pc, #600]	; (8005ee0 <my_get_notify+0x17b4>)
 8005c88:	4610      	mov	r0, r2
 8005c8a:	9500      	str	r5, [sp, #0]
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	f000 fd5b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005c92:	9a04      	ldr	r2, [sp, #16]
 8005c94:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005c96:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005c98:	498a      	ldr	r1, [pc, #552]	; (8005ec4 <my_get_notify+0x1798>)
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	9500      	str	r5, [sp, #0]
 8005c9e:	222a      	movs	r2, #42	; 0x2a
 8005ca0:	f000 fd52 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Transmitted: ");
 8005ca4:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005ca6:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Transmitted: ");
 8005ca8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005caa:	4610      	mov	r0, r2
 8005cac:	498d      	ldr	r1, [pc, #564]	; (8005ee4 <my_get_notify+0x17b8>)
 8005cae:	221d      	movs	r2, #29
 8005cb0:	9500      	str	r5, [sp, #0]
 8005cb2:	f000 fd49 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.BytesTxed, mytempstring);
 8005cb6:	4985      	ldr	r1, [pc, #532]	; (8005ecc <my_get_notify+0x17a0>)
    status += htmlwrite(resp_packet_ptr, "Number of Bytes Transmitted: ");
 8005cb8:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.BytesTxed, mytempstring);
 8005cba:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8005cbe:	f005 faff 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8005cc2:	4882      	ldr	r0, [pc, #520]	; (8005ecc <my_get_notify+0x17a0>)
 8005cc4:	f7fa fbe2 	bl	800048c <strlen>
 8005cc8:	9904      	ldr	r1, [sp, #16]
 8005cca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005ccc:	4602      	mov	r2, r0
 8005cce:	9500      	str	r5, [sp, #0]
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	497e      	ldr	r1, [pc, #504]	; (8005ecc <my_get_notify+0x17a0>)
 8005cd4:	f000 fd38 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005cd8:	9a04      	ldr	r2, [sp, #16]
 8005cda:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8005cdc:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005cde:	497c      	ldr	r1, [pc, #496]	; (8005ed0 <my_get_notify+0x17a4>)
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	9500      	str	r5, [sp, #0]
 8005ce4:	2207      	movs	r2, #7
 8005ce6:	f000 fd2f 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005cea:	9a04      	ldr	r2, [sp, #16]
 8005cec:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005cee:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005cf0:	4978      	ldr	r1, [pc, #480]	; (8005ed4 <my_get_notify+0x17a8>)
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	9500      	str	r5, [sp, #0]
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	f000 fd26 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);   
 8005cfc:	9a04      	ldr	r2, [sp, #16]
 8005cfe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005d00:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);   
 8005d02:	4975      	ldr	r1, [pc, #468]	; (8005ed8 <my_get_notify+0x17ac>)
 8005d04:	4610      	mov	r0, r2
 8005d06:	9500      	str	r5, [sp, #0]
 8005d08:	2205      	movs	r2, #5
 8005d0a:	f000 fd1d 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005d0e:	9a04      	ldr	r2, [sp, #16]
 8005d10:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);   
 8005d12:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8005d14:	4971      	ldr	r1, [pc, #452]	; (8005edc <my_get_notify+0x17b0>)
 8005d16:	4610      	mov	r0, r2
 8005d18:	9500      	str	r5, [sp, #0]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	f000 fd14 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005d20:	9a04      	ldr	r2, [sp, #16]
 8005d22:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8005d24:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005d26:	496e      	ldr	r1, [pc, #440]	; (8005ee0 <my_get_notify+0x17b4>)
 8005d28:	4610      	mov	r0, r2
 8005d2a:	9500      	str	r5, [sp, #0]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	f000 fd0b 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005d32:	9a04      	ldr	r2, [sp, #16]
 8005d34:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005d36:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005d38:	4962      	ldr	r1, [pc, #392]	; (8005ec4 <my_get_notify+0x1798>)
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	9500      	str	r5, [sp, #0]
 8005d3e:	222a      	movs	r2, #42	; 0x2a
 8005d40:	f000 fd02 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps):");
 8005d44:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005d46:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps):");
 8005d48:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4966      	ldr	r1, [pc, #408]	; (8005ee8 <my_get_notify+0x17bc>)
 8005d4e:	2211      	movs	r2, #17
 8005d50:	9500      	str	r5, [sp, #0]
 8005d52:	f000 fcf9 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.ThroughPut, mytempstring);
 8005d56:	495d      	ldr	r1, [pc, #372]	; (8005ecc <my_get_notify+0x17a0>)
    status += htmlwrite(resp_packet_ptr, "Throughput(Mbps):");
 8005d58:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.ThroughPut, mytempstring);
 8005d5a:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8005d5e:	f005 faaf 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, mytempstring);  
 8005d62:	485a      	ldr	r0, [pc, #360]	; (8005ecc <my_get_notify+0x17a0>)
 8005d64:	f7fa fb92 	bl	800048c <strlen>
 8005d68:	9904      	ldr	r1, [sp, #16]
 8005d6a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	9500      	str	r5, [sp, #0]
 8005d70:	4608      	mov	r0, r1
 8005d72:	4956      	ldr	r1, [pc, #344]	; (8005ecc <my_get_notify+0x17a0>)
 8005d74:	f000 fce8 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005d78:	9a04      	ldr	r2, [sp, #16]
 8005d7a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);  
 8005d7c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005d7e:	4954      	ldr	r1, [pc, #336]	; (8005ed0 <my_get_notify+0x17a4>)
 8005d80:	4610      	mov	r0, r2
 8005d82:	9500      	str	r5, [sp, #0]
 8005d84:	2207      	movs	r2, #7
 8005d86:	f000 fcdf 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005d8a:	9a04      	ldr	r2, [sp, #16]
 8005d8c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005d8e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005d90:	4950      	ldr	r1, [pc, #320]	; (8005ed4 <my_get_notify+0x17a8>)
 8005d92:	4610      	mov	r0, r2
 8005d94:	9500      	str	r5, [sp, #0]
 8005d96:	2207      	movs	r2, #7
 8005d98:	f000 fcd6 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005d9c:	9a04      	ldr	r2, [sp, #16]
 8005d9e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005da0:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005da2:	494d      	ldr	r1, [pc, #308]	; (8005ed8 <my_get_notify+0x17ac>)
 8005da4:	4610      	mov	r0, r2
 8005da6:	9500      	str	r5, [sp, #0]
 8005da8:	2205      	movs	r2, #5
 8005daa:	f000 fccd 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trtag);
 8005dae:	9a04      	ldr	r2, [sp, #16]
 8005db0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005db2:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trtag);
 8005db4:	4949      	ldr	r1, [pc, #292]	; (8005edc <my_get_notify+0x17b0>)
 8005db6:	4610      	mov	r0, r2
 8005db8:	9500      	str	r5, [sp, #0]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	f000 fcc4 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005dc0:	9a04      	ldr	r2, [sp, #16]
 8005dc2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trtag);
 8005dc4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005dc6:	4946      	ldr	r1, [pc, #280]	; (8005ee0 <my_get_notify+0x17b4>)
 8005dc8:	4610      	mov	r0, r2
 8005dca:	9500      	str	r5, [sp, #0]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	f000 fcbb 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005dd2:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, tdtag);
 8005dd4:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005dd6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005dd8:	4610      	mov	r0, r2
 8005dda:	493a      	ldr	r1, [pc, #232]	; (8005ec4 <my_get_notify+0x1798>)
 8005ddc:	222a      	movs	r2, #42	; 0x2a
 8005dde:	9500      	str	r5, [sp, #0]
 8005de0:	f000 fcb2 	bl	8006748 <_nx_packet_data_append>
    _nx_http_server_number_convert(iperf_ctrl_info.idleTime, mytempstring);
 8005de4:	4939      	ldr	r1, [pc, #228]	; (8005ecc <my_get_notify+0x17a0>)
    status += htmlwrite(resp_packet_ptr, fonttag);
 8005de6:	4404      	add	r4, r0
    _nx_http_server_number_convert(iperf_ctrl_info.idleTime, mytempstring);
 8005de8:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8005dec:	f005 fa68 	bl	800b2c0 <_nx_http_server_number_convert>
    status += htmlwrite(resp_packet_ptr, "Idle Time: ");
 8005df0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005df2:	220b      	movs	r2, #11
 8005df4:	493d      	ldr	r1, [pc, #244]	; (8005eec <my_get_notify+0x17c0>)
 8005df6:	9804      	ldr	r0, [sp, #16]
 8005df8:	9500      	str	r5, [sp, #0]
 8005dfa:	f000 fca5 	bl	8006748 <_nx_packet_data_append>
 8005dfe:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8005e00:	4832      	ldr	r0, [pc, #200]	; (8005ecc <my_get_notify+0x17a0>)
 8005e02:	f7fa fb43 	bl	800048c <strlen>
 8005e06:	9904      	ldr	r1, [sp, #16]
 8005e08:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	9500      	str	r5, [sp, #0]
 8005e0e:	4608      	mov	r0, r1
 8005e10:	492e      	ldr	r1, [pc, #184]	; (8005ecc <my_get_notify+0x17a0>)
 8005e12:	f000 fc99 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, "%");   
 8005e16:	9a04      	ldr	r2, [sp, #16]
 8005e18:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, mytempstring);
 8005e1a:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, "%");   
 8005e1c:	4934      	ldr	r1, [pc, #208]	; (8005ef0 <my_get_notify+0x17c4>)
 8005e1e:	4610      	mov	r0, r2
 8005e20:	9500      	str	r5, [sp, #0]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f000 fc90 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005e28:	9a04      	ldr	r2, [sp, #16]
 8005e2a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, "%");   
 8005e2c:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005e2e:	4928      	ldr	r1, [pc, #160]	; (8005ed0 <my_get_notify+0x17a4>)
 8005e30:	4610      	mov	r0, r2
 8005e32:	9500      	str	r5, [sp, #0]
 8005e34:	2207      	movs	r2, #7
 8005e36:	f000 fc87 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005e3a:	9a04      	ldr	r2, [sp, #16]
 8005e3c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, fontendtag);
 8005e3e:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005e40:	4924      	ldr	r1, [pc, #144]	; (8005ed4 <my_get_notify+0x17a8>)
 8005e42:	4610      	mov	r0, r2
 8005e44:	9500      	str	r5, [sp, #0]
 8005e46:	2207      	movs	r2, #7
 8005e48:	f000 fc7e 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005e4c:	9a04      	ldr	r2, [sp, #16]
 8005e4e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005e50:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005e52:	4921      	ldr	r1, [pc, #132]	; (8005ed8 <my_get_notify+0x17ac>)
 8005e54:	4610      	mov	r0, r2
 8005e56:	9500      	str	r5, [sp, #0]
 8005e58:	2205      	movs	r2, #5
 8005e5a:	f000 fc75 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 8005e5e:	9a04      	ldr	r2, [sp, #16]
 8005e60:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    status += htmlwrite(resp_packet_ptr, trendtag);
 8005e62:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 8005e64:	4923      	ldr	r1, [pc, #140]	; (8005ef4 <my_get_notify+0x17c8>)
 8005e66:	4610      	mov	r0, r2
 8005e68:	9500      	str	r5, [sp, #0]
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	f000 fc6c 	bl	8006748 <_nx_packet_data_append>
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005e70:	9a04      	ldr	r2, [sp, #16]
    status += htmlwrite(resp_packet_ptr, tableendtag);  
 8005e72:	4404      	add	r4, r0
    status += htmlwrite(resp_packet_ptr, tdendtag);
 8005e74:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005e76:	4610      	mov	r0, r2
 8005e78:	4916      	ldr	r1, [pc, #88]	; (8005ed4 <my_get_notify+0x17a8>)
 8005e7a:	2207      	movs	r2, #7
 8005e7c:	9500      	str	r5, [sp, #0]
 8005e7e:	f000 fc63 	bl	8006748 <_nx_packet_data_append>
 8005e82:	4404      	add	r4, r0
    status +=  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), resp_packet_ptr, NX_HTTP_SERVER_TIMEOUT);
 8005e84:	463a      	mov	r2, r7
 8005e86:	9904      	ldr	r1, [sp, #16]
 8005e88:	9802      	ldr	r0, [sp, #8]
 8005e8a:	f002 f8db 	bl	8008044 <_nx_tcp_socket_send>
    if(status)
 8005e8e:	42c4      	cmn	r4, r0
 8005e90:	d006      	beq.n	8005ea0 <my_get_notify+0x1774>
        nx_packet_release(resp_packet_ptr);
 8005e92:	9804      	ldr	r0, [sp, #16]
 8005e94:	f000 fdac 	bl	80069f0 <_nx_packet_release>
        _iperf_test_error_counter++;
 8005e98:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <my_get_notify+0x17cc>)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	6013      	str	r3, [r2, #0]
    nx_udp_socket_unbind(&udp_client_socket);
 8005ea0:	4816      	ldr	r0, [pc, #88]	; (8005efc <my_get_notify+0x17d0>)
 8005ea2:	f003 f857 	bl	8008f54 <_nx_udp_socket_unbind>
    nx_udp_socket_delete(&udp_client_socket);
 8005ea6:	4815      	ldr	r0, [pc, #84]	; (8005efc <my_get_notify+0x17d0>)
 8005ea8:	f002 ff42 	bl	8008d30 <_nx_udp_socket_delete>
    tx_thread_terminate(&thread_udp_tx_iperf);
 8005eac:	4814      	ldr	r0, [pc, #80]	; (8005f00 <my_get_notify+0x17d4>)
 8005eae:	f017 ff7d 	bl	801ddac <_txe_thread_terminate>
    tx_thread_delete(&thread_udp_tx_iperf);
 8005eb2:	4813      	ldr	r0, [pc, #76]	; (8005f00 <my_get_notify+0x17d4>)
 8005eb4:	f017 ff26 	bl	801dd04 <_txe_thread_delete>
 8005eb8:	f7ff ba52 	b.w	8005360 <my_get_notify+0xc34>
      while(value_ptr && (*value_ptr != 0))
 8005ebc:	46c2      	mov	sl, r8
 8005ebe:	f7fe bcef 	b.w	80048a0 <my_get_notify+0x174>
 8005ec2:	bf00      	nop
 8005ec4:	080251e4 	.word	0x080251e4
 8005ec8:	08025308 	.word	0x08025308
 8005ecc:	20001630 	.word	0x20001630
 8005ed0:	08025228 	.word	0x08025228
 8005ed4:	080248fc 	.word	0x080248fc
 8005ed8:	08024904 	.word	0x08024904
 8005edc:	080251d4 	.word	0x080251d4
 8005ee0:	080251dc 	.word	0x080251dc
 8005ee4:	08025328 	.word	0x08025328
 8005ee8:	08021688 	.word	0x08021688
 8005eec:	080252b0 	.word	0x080252b0
 8005ef0:	080252bc 	.word	0x080252bc
 8005ef4:	08025168 	.word	0x08025168
 8005ef8:	20004bd0 	.word	0x20004bd0
 8005efc:	20004bdc 	.word	0x20004bdc
 8005f00:	20001928 	.word	0x20001928
 8005f04:	f11e 0100 	adds.w	r1, lr, #0
 8005f08:	9a03      	ldr	r2, [sp, #12]
 8005f0a:	4663      	mov	r3, ip
 8005f0c:	bf18      	it	ne
 8005f0e:	2101      	movne	r1, #1
 8005f10:	9206      	str	r2, [sp, #24]
                ctrl_info_ptr -> ip = (ctrl_info_ptr -> ip << 8) + val;
 8005f12:	2200      	movs	r2, #0
        while(value_ptr && (*value_ptr != 0) && (colon_sum != 0))
 8005f14:	b1ab      	cbz	r3, 8005f42 <my_get_notify+0x1816>
 8005f16:	b1a1      	cbz	r1, 8005f42 <my_get_notify+0x1816>
                            for(i = 0; i <= (UINT)(7 - colon_sum); i++)
 8005f18:	f1ce 0a07 	rsb	sl, lr, #7
            if(*value_ptr == '%')
 8005f1c:	2b25      	cmp	r3, #37	; 0x25
 8005f1e:	f107 0101 	add.w	r1, r7, #1
 8005f22:	d018      	beq.n	8005f56 <my_get_notify+0x182a>
                if(*value_ptr >= '0' && *value_ptr <='9')
 8005f24:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8005f28:	2c09      	cmp	r4, #9
 8005f2a:	d819      	bhi.n	8005f60 <my_get_notify+0x1834>
                    val = val * 16 + ((UINT)(*value_ptr - '0'));
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005f32:	4639      	mov	r1, r7
 8005f34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005f38:	4627      	mov	r7, r4
        while(value_ptr && (*value_ptr != 0) && (colon_sum != 0))
 8005f3a:	b117      	cbz	r7, 8005f42 <my_get_notify+0x1816>
 8005f3c:	784b      	ldrb	r3, [r1, #1]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1ec      	bne.n	8005f1c <my_get_notify+0x17f0>
        if (ctrl_info_ptr -> version == NX_IP_VERSION_V6)
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	2b06      	cmp	r3, #6
 8005f46:	d1b9      	bne.n	8005ebc <my_get_notify+0x1790>
            ctrl_info_ptr -> ipv6[3] = (ctrl_info_ptr -> ipv6[3] << 16) + val;
 8005f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f4a:	46c2      	mov	sl, r8
 8005f4c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f52:	f7fe bca5 	b.w	80048a0 <my_get_notify+0x174>
                if((*(++value_ptr) == '3') && (*(++value_ptr) == 'A')) 
 8005f56:	787b      	ldrb	r3, [r7, #1]
 8005f58:	2b33      	cmp	r3, #51	; 0x33
 8005f5a:	d019      	beq.n	8005f90 <my_get_notify+0x1864>
 8005f5c:	3702      	adds	r7, #2
 8005f5e:	e7ec      	b.n	8005f3a <my_get_notify+0x180e>
                else if(*value_ptr >= 'a' && *value_ptr <='f')
 8005f60:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8005f64:	2c05      	cmp	r4, #5
 8005f66:	d807      	bhi.n	8005f78 <my_get_notify+0x184c>
                    val = val * 16 + ((UINT)(*value_ptr - 'a')) + 10;
 8005f68:	460c      	mov	r4, r1
 8005f6a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005f6e:	4639      	mov	r1, r7
 8005f70:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
 8005f74:	4627      	mov	r7, r4
 8005f76:	e7e0      	b.n	8005f3a <my_get_notify+0x180e>
                else if(*value_ptr >= 'A' && *value_ptr <='F')
 8005f78:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8005f7c:	2c05      	cmp	r4, #5
 8005f7e:	d80d      	bhi.n	8005f9c <my_get_notify+0x1870>
                    val = val * 16 + ((UINT)(*value_ptr - 'A')) + 10;
 8005f80:	460c      	mov	r4, r1
 8005f82:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005f86:	4639      	mov	r1, r7
 8005f88:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 8005f8c:	4627      	mov	r7, r4
 8005f8e:	e7d4      	b.n	8005f3a <my_get_notify+0x180e>
                if((*(++value_ptr) == '3') && (*(++value_ptr) == 'A')) 
 8005f90:	78bb      	ldrb	r3, [r7, #2]
 8005f92:	1cb9      	adds	r1, r7, #2
 8005f94:	2b41      	cmp	r3, #65	; 0x41
 8005f96:	d01c      	beq.n	8005fd2 <my_get_notify+0x18a6>
 8005f98:	3703      	adds	r7, #3
 8005f9a:	e7ce      	b.n	8005f3a <my_get_notify+0x180e>
                else if(*value_ptr >= 'A' && *value_ptr <='F')
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	461f      	mov	r7, r3
 8005fa2:	e7ca      	b.n	8005f3a <my_get_notify+0x180e>
                ctrl_info_ptr -> ip = (ctrl_info_ptr -> ip << 8) + val;
 8005fa4:	4494      	add	ip, r2
 8005fa6:	f11e 0100 	adds.w	r1, lr, #0
 8005faa:	f04f 0404 	mov.w	r4, #4
 8005fae:	bf18      	it	ne
 8005fb0:	2101      	movne	r1, #1
 8005fb2:	f8cd c01c 	str.w	ip, [sp, #28]
 8005fb6:	9403      	str	r4, [sp, #12]
 8005fb8:	e7ac      	b.n	8005f14 <my_get_notify+0x17e8>
            iperf_ip.nxd_ip_address.v6[1] = iperf_ctrl_info.ipv6[1];
 8005fba:	e9d9 2303 	ldrd	r2, r3, [r9, #12]
            iperf_ip.nxd_ip_address.v6[0] = iperf_ctrl_info.ipv6[0];
 8005fbe:	607a      	str	r2, [r7, #4]
            iperf_ip.nxd_ip_address.v6[1] = iperf_ctrl_info.ipv6[1];
 8005fc0:	60bb      	str	r3, [r7, #8]
            iperf_ip.nxd_ip_address.v6[2] = iperf_ctrl_info.ipv6[2];
 8005fc2:	f8d9 2014 	ldr.w	r2, [r9, #20]
            iperf_ip.nxd_ip_address.v6[3] = iperf_ctrl_info.ipv6[3];
 8005fc6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8005fca:	e9c7 2303 	strd	r2, r3, [r7, #12]
 8005fce:	f7fe bf0f 	b.w	8004df0 <my_get_notify+0x6c4>
                    ctrl_info_ptr -> ipv6[colon_count/2] = (ctrl_info_ptr -> ipv6[colon_count/2] << 16) + val;
 8005fd2:	ea4f 0c60 	mov.w	ip, r0, asr #1
 8005fd6:	ab1e      	add	r3, sp, #120	; 0x78
                    if(*(value_ptr + 1) == '%')
 8005fd8:	f897 e003 	ldrb.w	lr, [r7, #3]
                    colon_count++;
 8005fdc:	1c44      	adds	r4, r0, #1
                    ctrl_info_ptr -> ipv6[colon_count/2] = (ctrl_info_ptr -> ipv6[colon_count/2] << 16) + val;
 8005fde:	f10c 0c02 	add.w	ip, ip, #2
                    if(*(value_ptr + 1) == '%')
 8005fe2:	f1be 0f25 	cmp.w	lr, #37	; 0x25
                    ctrl_info_ptr -> ipv6[colon_count/2] = (ctrl_info_ptr -> ipv6[colon_count/2] << 16) + val;
 8005fe6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005fea:	f85c 3c60 	ldr.w	r3, [ip, #-96]
 8005fee:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005ff2:	f84c 3c60 	str.w	r3, [ip, #-96]
                    if(*(value_ptr + 1) == '%')
 8005ff6:	d052      	beq.n	800609e <my_get_notify+0x1972>
 8005ff8:	3703      	adds	r7, #3
                    colon_count++;
 8005ffa:	4620      	mov	r0, r4
                    val = 0;
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	e79c      	b.n	8005f3a <my_get_notify+0x180e>
                ctrl_info_ptr -> ctrl_sign = UDP_RX_START;                            
 8006000:	2303      	movs	r3, #3
            next_token++;
 8006002:	46c2      	mov	sl, r8
                ctrl_info_ptr -> ctrl_sign = UDP_RX_START;                            
 8006004:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8006008:	f7fe bc4a 	b.w	80048a0 <my_get_notify+0x174>
                ctrl_info_ptr -> ip = (ctrl_info_ptr -> ip << 8) + val;
 800600c:	4462      	add	r2, ip
            next_token++;
 800600e:	46c2      	mov	sl, r8
                ctrl_info_ptr -> ip = (ctrl_info_ptr -> ip << 8) + val;
 8006010:	9207      	str	r2, [sp, #28]
 8006012:	f7fe bc45 	b.w	80048a0 <my_get_notify+0x174>
    else if(strncmp(token, "rate", strlen("rate")) == 0)
 8006016:	2204      	movs	r2, #4
 8006018:	494f      	ldr	r1, [pc, #316]	; (8006158 <my_get_notify+0x1a2c>)
 800601a:	4650      	mov	r0, sl
 800601c:	f018 fb96 	bl	801e74c <strncmp>
 8006020:	b9f0      	cbnz	r0, 8006060 <my_get_notify+0x1934>
      ctrl_info_ptr -> Rate = 0;
 8006022:	901b      	str	r0, [sp, #108]	; 0x6c
      while(value_ptr && (*value_ptr != 0))
 8006024:	2f00      	cmp	r7, #0
 8006026:	f43f af49 	beq.w	8005ebc <my_get_notify+0x1790>
 800602a:	783a      	ldrb	r2, [r7, #0]
 800602c:	2a00      	cmp	r2, #0
 800602e:	f43f af45 	beq.w	8005ebc <my_get_notify+0x1790>
 8006032:	4603      	mov	r3, r0
          ctrl_info_ptr -> Rate = ctrl_info_ptr -> Rate * 10 + ((UINT)(*value_ptr - '0'));
 8006034:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      while(value_ptr && (*value_ptr != 0))
 8006038:	1c7c      	adds	r4, r7, #1
          ctrl_info_ptr -> Rate = ctrl_info_ptr -> Rate * 10 + ((UINT)(*value_ptr - '0'));
 800603a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800603e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
      while(value_ptr && (*value_ptr != 0))
 8006042:	d003      	beq.n	800604c <my_get_notify+0x1920>
 8006044:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8006048:	2a00      	cmp	r2, #0
 800604a:	d1f3      	bne.n	8006034 <my_get_notify+0x1908>
 800604c:	931b      	str	r3, [sp, #108]	; 0x6c
 800604e:	46c2      	mov	sl, r8
 8006050:	f7fe bc26 	b.w	80048a0 <my_get_notify+0x174>
                ctrl_info_ptr -> ctrl_sign = UDP_TX_START;   
 8006054:	2307      	movs	r3, #7
            next_token++;
 8006056:	46c2      	mov	sl, r8
                ctrl_info_ptr -> ctrl_sign = UDP_TX_START;   
 8006058:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800605c:	f7fe bc20 	b.w	80048a0 <my_get_notify+0x174>
    else if(strncmp(token, "size", strlen("size")) == 0)
 8006060:	2204      	movs	r2, #4
 8006062:	493e      	ldr	r1, [pc, #248]	; (800615c <my_get_notify+0x1a30>)
 8006064:	4650      	mov	r0, sl
 8006066:	f018 fb71 	bl	801e74c <strncmp>
 800606a:	bb00      	cbnz	r0, 80060ae <my_get_notify+0x1982>
      ctrl_info_ptr -> PacketSize = 0;
 800606c:	901a      	str	r0, [sp, #104]	; 0x68
      while(value_ptr && (*value_ptr != 0))
 800606e:	2f00      	cmp	r7, #0
 8006070:	f43f af24 	beq.w	8005ebc <my_get_notify+0x1790>
 8006074:	783a      	ldrb	r2, [r7, #0]
 8006076:	2a00      	cmp	r2, #0
 8006078:	f43f af20 	beq.w	8005ebc <my_get_notify+0x1790>
 800607c:	4603      	mov	r3, r0
          ctrl_info_ptr -> PacketSize = ctrl_info_ptr -> PacketSize * 10 + ((UINT)(*value_ptr - '0'));
 800607e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      while(value_ptr && (*value_ptr != 0))
 8006082:	1c78      	adds	r0, r7, #1
          ctrl_info_ptr -> PacketSize = ctrl_info_ptr -> PacketSize * 10 + ((UINT)(*value_ptr - '0'));
 8006084:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006088:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
      while(value_ptr && (*value_ptr != 0))
 800608c:	d003      	beq.n	8006096 <my_get_notify+0x196a>
 800608e:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8006092:	2a00      	cmp	r2, #0
 8006094:	d1f3      	bne.n	800607e <my_get_notify+0x1952>
 8006096:	931a      	str	r3, [sp, #104]	; 0x68
 8006098:	46c2      	mov	sl, r8
 800609a:	f7fe bc01 	b.w	80048a0 <my_get_notify+0x174>
                        if((*(++value_ptr) == '3') && (*(++value_ptr) == 'A'))
 800609e:	793b      	ldrb	r3, [r7, #4]
 80060a0:	2b33      	cmp	r3, #51	; 0x33
 80060a2:	d030      	beq.n	8006106 <my_get_notify+0x19da>
 80060a4:	1d39      	adds	r1, r7, #4
                    colon_count++;
 80060a6:	4620      	mov	r0, r4
                    val = 0;
 80060a8:	2200      	movs	r2, #0
 80060aa:	3705      	adds	r7, #5
 80060ac:	e745      	b.n	8005f3a <my_get_notify+0x180e>
    else if(strncmp(token, "port", strlen("port")) == 0)
 80060ae:	4650      	mov	r0, sl
 80060b0:	2204      	movs	r2, #4
 80060b2:	492b      	ldr	r1, [pc, #172]	; (8006160 <my_get_notify+0x1a34>)
 80060b4:	f018 fb4a 	bl	801e74c <strncmp>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	f47f aeff 	bne.w	8005ebc <my_get_notify+0x1790>
      ctrl_info_ptr -> port = 0;
 80060be:	900c      	str	r0, [sp, #48]	; 0x30
      while(value_ptr && (*value_ptr != 0))
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	f43f aefb 	beq.w	8005ebc <my_get_notify+0x1790>
 80060c6:	783a      	ldrb	r2, [r7, #0]
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	f43f aef7 	beq.w	8005ebc <my_get_notify+0x1790>
 80060ce:	4603      	mov	r3, r0
 80060d0:	e002      	b.n	80060d8 <my_get_notify+0x19ac>
 80060d2:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 80060d6:	b13a      	cbz	r2, 80060e8 <my_get_notify+0x19bc>
          ctrl_info_ptr -> port = ctrl_info_ptr -> port * 10 + ((UINT)(*value_ptr - '0'));
 80060d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      while(value_ptr && (*value_ptr != 0))
 80060dc:	1c79      	adds	r1, r7, #1
          ctrl_info_ptr -> port = ctrl_info_ptr -> port * 10 + ((UINT)(*value_ptr - '0'));
 80060de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80060e2:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
      while(value_ptr && (*value_ptr != 0))
 80060e6:	d1f4      	bne.n	80060d2 <my_get_notify+0x19a6>
 80060e8:	930c      	str	r3, [sp, #48]	; 0x30
 80060ea:	46c2      	mov	sl, r8
 80060ec:	f7fe bbd8 	b.w	80048a0 <my_get_notify+0x174>
      ctrl_info_ptr -> PingRate = 0;
 80060f0:	9010      	str	r0, [sp, #64]	; 0x40
            next_token++;
 80060f2:	46c2      	mov	sl, r8
 80060f4:	f7fe bbd4 	b.w	80048a0 <my_get_notify+0x174>
            if(*ptr == '.') 
 80060f8:	4686      	mov	lr, r0
 80060fa:	f7ff b958 	b.w	80053ae <my_get_notify+0xc82>
        while(ptr && (*ptr != 0))
 80060fe:	461a      	mov	r2, r3
 8006100:	9b06      	ldr	r3, [sp, #24]
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	e71d      	b.n	8005f42 <my_get_notify+0x1816>
                        if((*(++value_ptr) == '3') && (*(++value_ptr) == 'A'))
 8006106:	797b      	ldrb	r3, [r7, #5]
 8006108:	1d79      	adds	r1, r7, #5
 800610a:	3706      	adds	r7, #6
 800610c:	2b41      	cmp	r3, #65	; 0x41
 800610e:	d010      	beq.n	8006132 <my_get_notify+0x1a06>
                    colon_count++;
 8006110:	4620      	mov	r0, r4
                    val = 0;
 8006112:	2200      	movs	r2, #0
 8006114:	e711      	b.n	8005f3a <my_get_notify+0x180e>
        while(value_ptr && (*value_ptr != 0))
 8006116:	4617      	mov	r7, r2
 8006118:	f7fe bd24 	b.w	8004b64 <my_get_notify+0x438>
    else if(strncmp(token, "test_time", strlen("test_time")) == 0)
 800611c:	4607      	mov	r7, r0
 800611e:	f7fe bd21 	b.w	8004b64 <my_get_notify+0x438>
 8006122:	f11e 0100 	adds.w	r1, lr, #0
 8006126:	9a03      	ldr	r2, [sp, #12]
 8006128:	4663      	mov	r3, ip
 800612a:	bf18      	it	ne
 800612c:	2101      	movne	r1, #1
 800612e:	9206      	str	r2, [sp, #24]
 8006130:	e6ef      	b.n	8005f12 <my_get_notify+0x17e6>
 8006132:	43c0      	mvns	r0, r0
                                ctrl_info_ptr -> ipv6[colon_count/2] = ctrl_info_ptr -> ipv6[colon_count/2] << 16;
 8006134:	1063      	asrs	r3, r4, #1
 8006136:	aa1e      	add	r2, sp, #120	; 0x78
                                colon_count++;
 8006138:	3401      	adds	r4, #1
                                ctrl_info_ptr -> ipv6[colon_count/2] = ctrl_info_ptr -> ipv6[colon_count/2] << 16;
 800613a:	3302      	adds	r3, #2
                            for(i = 0; i <= (UINT)(7 - colon_sum); i++)
 800613c:	eb00 0c04 	add.w	ip, r0, r4
                                ctrl_info_ptr -> ipv6[colon_count/2] = ctrl_info_ptr -> ipv6[colon_count/2] << 16;
 8006140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                            for(i = 0; i <= (UINT)(7 - colon_sum); i++)
 8006144:	45e2      	cmp	sl, ip
                                ctrl_info_ptr -> ipv6[colon_count/2] = ctrl_info_ptr -> ipv6[colon_count/2] << 16;
 8006146:	f853 2c60 	ldr.w	r2, [r3, #-96]
 800614a:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800614e:	f843 2c60 	str.w	r2, [r3, #-96]
                            for(i = 0; i <= (UINT)(7 - colon_sum); i++)
 8006152:	d2ef      	bcs.n	8006134 <my_get_notify+0x1a08>
 8006154:	e7dc      	b.n	8006110 <my_get_notify+0x19e4>
 8006156:	bf00      	nop
 8006158:	080215a4 	.word	0x080215a4
 800615c:	080215ac 	.word	0x080215ac
 8006160:	080215b4 	.word	0x080215b4

08006164 <_nx_ipv4_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8006168:	688d      	ldr	r5, [r1, #8]
{
 800616a:	b082      	sub	sp, #8
    pkt_length = val & NX_LOWER_16_MASK;

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 800616c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
{
 800616e:	460c      	mov	r4, r1
    val = ip_header_ptr -> nx_ip_header_word_0;
 8006170:	682b      	ldr	r3, [r5, #0]
{
 8006172:	4607      	mov	r7, r0
    NX_CHANGE_ULONG_ENDIAN(val);
 8006174:	ea83 4633 	eor.w	r6, r3, r3, ror #16
 8006178:	0a36      	lsrs	r6, r6, #8
 800617a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 800617e:	ea86 2633 	eor.w	r6, r6, r3, ror #8
    pkt_length = val & NX_LOWER_16_MASK;
 8006182:	b2b3      	uxth	r3, r6
    if (packet_ptr -> nx_packet_length != pkt_length)
 8006184:	429a      	cmp	r2, r3
 8006186:	d02f      	beq.n	80061e8 <_nx_ipv4_packet_receive+0x84>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 8006188:	f0c0 80ab 	bcc.w	80062e2 <_nx_ipv4_packet_receive+0x17e>

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 800618c:	ebb2 0903 	subs.w	r9, r2, r3
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 8006190:	624b      	str	r3, [r1, #36]	; 0x24
        while (delta)
 8006192:	d029      	beq.n	80061e8 <_nx_ipv4_packet_receive+0x84>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 8006194:	6988      	ldr	r0, [r1, #24]
 8006196:	2800      	cmp	r0, #0
 8006198:	f000 80eb 	beq.w	8006372 <_nx_ipv4_packet_receive+0x20e>
            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 800619c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	4599      	cmp	r9, r3
 80061a4:	d31d      	bcc.n	80061e2 <_nx_ipv4_packet_receive+0x7e>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 80061a6:	f04f 0800 	mov.w	r8, #0
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 80061aa:	eba9 0903 	sub.w	r9, r9, r3
                while (before_last_packet -> nx_packet_next != last_packet)
 80061ae:	4622      	mov	r2, r4
 80061b0:	e000      	b.n	80061b4 <_nx_ipv4_packet_receive+0x50>
 80061b2:	461a      	mov	r2, r3
 80061b4:	6853      	ldr	r3, [r2, #4]
 80061b6:	4283      	cmp	r3, r0
 80061b8:	d1fb      	bne.n	80061b2 <_nx_ipv4_packet_receive+0x4e>
                before_last_packet -> nx_packet_next =  NX_NULL;
 80061ba:	f8c2 8004 	str.w	r8, [r2, #4]
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 80061be:	42a2      	cmp	r2, r4
 80061c0:	bf08      	it	eq
 80061c2:	2200      	moveq	r2, #0
 80061c4:	61a2      	str	r2, [r4, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 80061c6:	f000 fc13 	bl	80069f0 <_nx_packet_release>
        while (delta)
 80061ca:	f1b9 0f00 	cmp.w	r9, #0
 80061ce:	d00b      	beq.n	80061e8 <_nx_ipv4_packet_receive+0x84>
            if (packet_ptr -> nx_packet_last == NX_NULL)
 80061d0:	69a0      	ldr	r0, [r4, #24]
 80061d2:	2800      	cmp	r0, #0
 80061d4:	f000 80cd 	beq.w	8006372 <_nx_ipv4_packet_receive+0x20e>
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 80061d8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	454b      	cmp	r3, r9
 80061e0:	d9e3      	bls.n	80061aa <_nx_ipv4_packet_receive+0x46>
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 80061e2:	eba2 0209 	sub.w	r2, r2, r9
 80061e6:	60c2      	str	r2, [r0, #12]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80061e8:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 80061ec:	f3c6 6603 	ubfx	r6, r6, #24, #4
        return;
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 80061f0:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80061f4:	f013 0302 	ands.w	r3, r3, #2
 80061f8:	d069      	beq.n	80062ce <_nx_ipv4_packet_receive+0x16a>

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 80061fa:	f8d5 e008 	ldr.w	lr, [r5, #8]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 80061fe:	2e05      	cmp	r6, #5
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006200:	68e8      	ldr	r0, [r5, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006202:	ea8e 423e 	eor.w	r2, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006206:	6929      	ldr	r1, [r5, #16]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006208:	e9d5 a900 	ldrd	sl, r9, [r5]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800620c:	ea4f 2212 	mov.w	r2, r2, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006210:	ea8a 4c3a 	eor.w	ip, sl, sl, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006214:	ea89 4339 	eor.w	r3, r9, r9, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006218:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800621c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006220:	ea4f 2313 	mov.w	r3, r3, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006224:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006228:	ea82 223e 	eor.w	r2, r2, lr, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800622c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006230:	ea8c 2c3a 	eor.w	ip, ip, sl, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006234:	60aa      	str	r2, [r5, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006236:	ea83 2939 	eor.w	r9, r3, r9, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800623a:	f8c5 c000 	str.w	ip, [r5]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800623e:	ea80 4330 	eor.w	r3, r0, r0, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006242:	ea81 4c31 	eor.w	ip, r1, r1, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006246:	f8c5 9004 	str.w	r9, [r5, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800624a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800624e:	ea4f 221c 	mov.w	r2, ip, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006252:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006256:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800625a:	ea83 2330 	eor.w	r3, r3, r0, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800625e:	ea82 2131 	eor.w	r1, r2, r1, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006262:	60eb      	str	r3, [r5, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006264:	6129      	str	r1, [r5, #16]
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 8006266:	d842      	bhi.n	80062ee <_nx_ipv4_packet_receive+0x18a>
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8006268:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800626c:	428b      	cmp	r3, r1
 800626e:	d00d      	beq.n	800628c <_nx_ipv4_packet_receive+0x128>
 8006270:	b161      	cbz	r1, 800628c <_nx_ipv4_packet_receive+0x128>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8006272:	e9d8 3206 	ldrd	r3, r2, [r8, #24]

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8006276:	ea03 0001 	and.w	r0, r3, r1
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800627a:	4290      	cmp	r0, r2
 800627c:	d075      	beq.n	800636a <_nx_ipv4_packet_receive+0x206>
          if_ptr -> nx_interface_ip_network) &&
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800627e:	1c4b      	adds	r3, r1, #1
 8006280:	d004      	beq.n	800628c <_nx_ipv4_packet_receive+0x128>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8006282:	f101 4301 	add.w	r3, r1, #2164260864	; 0x81000000
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8006286:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800628a:	d27d      	bcs.n	8006388 <_nx_ipv4_packet_receive+0x224>
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 800628c:	686b      	ldr	r3, [r5, #4]
 800628e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006292:	2b00      	cmp	r3, #0
 8006294:	d059      	beq.n	800634a <_nx_ipv4_packet_receive+0x1e6>
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 8006296:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 800629a:	b313      	cbz	r3, 80062e2 <_nx_ipv4_packet_receive+0x17e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800629c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80062a0:	b672      	cpsid	i

                /* Disable interrupts.  */
                TX_DISABLE

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 80062a2:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d068      	beq.n	800637c <_nx_ipv4_packet_receive+0x218>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 80062aa:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80062ae:	2300      	movs	r3, #0
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 80062b0:	61cc      	str	r4, [r1, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80062b2:	61e3      	str	r3, [r4, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 80062b4:	f8c7 47c8 	str.w	r4, [r7, #1992]	; 0x7c8
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80062b8:	f382 8810 	msr	PRIMASK, r2
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 80062bc:	2200      	movs	r2, #0
 80062be:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 80062c2:	2102      	movs	r1, #2
        _nx_packet_release(packet_ptr);

        /* Return to caller.  */
        return;
    }
}
 80062c4:	b002      	add	sp, #8
 80062c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 80062ca:	f016 ba2d 	b.w	801c728 <_tx_event_flags_set>
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	00b2      	lsls	r2, r6, #2
 80062d2:	2104      	movs	r1, #4
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7fb fe05 	bl	8001ee4 <_nx_ip_checksum_compute>
        if (checksum)
 80062da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062de:	4298      	cmp	r0, r3
 80062e0:	d08b      	beq.n	80061fa <_nx_ipv4_packet_receive+0x96>
            _nx_packet_release(packet_ptr);
 80062e2:	4620      	mov	r0, r4
}
 80062e4:	b002      	add	sp, #8
 80062e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            _nx_packet_release(packet_ptr);
 80062ea:	f000 bb81 	b.w	80069f0 <_nx_packet_release>
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 80062ee:	4621      	mov	r1, r4
 80062f0:	4638      	mov	r0, r7
 80062f2:	f00b fbbb 	bl	8011a6c <_nx_ipv4_option_process>
        if (option_processed == NX_FALSE)
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d0f3      	beq.n	80062e2 <_nx_ipv4_packet_receive+0x17e>
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 80062fa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 80062fe:	692a      	ldr	r2, [r5, #16]
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 8006300:	4433      	add	r3, r6
 8006302:	0098      	lsls	r0, r3, #2
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 8006304:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 8006308:	68e9      	ldr	r1, [r5, #12]
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 800630a:	182a      	adds	r2, r5, r0
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800630c:	3810      	subs	r0, #16
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800630e:	f842 1c04 	str.w	r1, [r2, #-4]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8006312:	f1a2 0610 	sub.w	r6, r2, #16
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 8006316:	68a9      	ldr	r1, [r5, #8]
 8006318:	f842 1c08 	str.w	r1, [r2, #-8]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 800631c:	6869      	ldr	r1, [r5, #4]
 800631e:	f842 1c0c 	str.w	r1, [r2, #-12]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 8006322:	6829      	ldr	r1, [r5, #0]
 8006324:	f021 419e 	bic.w	r1, r1, #1325400064	; 0x4f000000
 8006328:	f041 418a 	orr.w	r1, r1, #1157627904	; 0x45000000
 800632c:	f842 1c10 	str.w	r1, [r2, #-16]
 8006330:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 8006334:	4635      	mov	r5, r6
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8006336:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8006338:	f8d8 3014 	ldr.w	r3, [r8, #20]
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800633c:	1a12      	subs	r2, r2, r0
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 800633e:	60a6      	str	r6, [r4, #8]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8006340:	428b      	cmp	r3, r1
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8006342:	63a6      	str	r6, [r4, #56]	; 0x38
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8006344:	6262      	str	r2, [r4, #36]	; 0x24
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8006346:	d193      	bne.n	8006270 <_nx_ipv4_packet_receive+0x10c>
 8006348:	e7a0      	b.n	800628c <_nx_ipv4_packet_receive+0x128>
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800634a:	68a6      	ldr	r6, [r4, #8]
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800634c:	4638      	mov	r0, r7
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800634e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8006350:	4621      	mov	r1, r4
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8006352:	3614      	adds	r6, #20
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 8006354:	7aaa      	ldrb	r2, [r5, #10]
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8006356:	3b14      	subs	r3, #20
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8006358:	60a6      	str	r6, [r4, #8]
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800635a:	6263      	str	r3, [r4, #36]	; 0x24
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800635c:	f00a fd4e 	bl	8010dfc <_nx_ip_dispatch_process>
 8006360:	2800      	cmp	r0, #0
 8006362:	d1be      	bne.n	80062e2 <_nx_ipv4_packet_receive+0x17e>
}
 8006364:	b002      	add	sp, #8
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800636a:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 800636c:	438b      	bics	r3, r1
 800636e:	d186      	bne.n	800627e <_nx_ipv4_packet_receive+0x11a>
 8006370:	e78c      	b.n	800628c <_nx_ipv4_packet_receive+0x128>
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 8006372:	68e3      	ldr	r3, [r4, #12]
 8006374:	eba3 0309 	sub.w	r3, r3, r9
 8006378:	60e3      	str	r3, [r4, #12]
                break;
 800637a:	e735      	b.n	80061e8 <_nx_ipv4_packet_receive+0x84>
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 800637c:	f8c7 47c4 	str.w	r4, [r7, #1988]	; 0x7c4
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8006380:	f8c7 47c8 	str.w	r4, [r7, #1992]	; 0x7c8
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 8006384:	61e3      	str	r3, [r4, #28]
 8006386:	e797      	b.n	80062b8 <_nx_ipv4_packet_receive+0x154>
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 8006388:	4642      	mov	r2, r8
 800638a:	4638      	mov	r0, r7
 800638c:	f00a fc12 	bl	8010bb4 <_nx_igmp_multicast_check>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8006390:	2800      	cmp	r0, #0
 8006392:	f47f af7b 	bne.w	800628c <_nx_ipv4_packet_receive+0x128>
    else if (if_ptr -> nx_interface_ip_address == 0)
 8006396:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800639a:	bb5b      	cbnz	r3, 80063f4 <_nx_ipv4_packet_receive+0x290>
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 800639c:	68ab      	ldr	r3, [r5, #8]
 800639e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if (protocol == NX_IP_UDP)
 80063a2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80063a6:	d19c      	bne.n	80062e2 <_nx_ipv4_packet_receive+0x17e>
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80063a8:	68a1      	ldr	r1, [r4, #8]
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80063aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80063ac:	694a      	ldr	r2, [r1, #20]
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80063ae:	f101 0514 	add.w	r5, r1, #20
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80063b2:	f1a3 0014 	sub.w	r0, r3, #20
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80063b6:	ea82 4332 	eor.w	r3, r2, r2, ror #16
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80063ba:	60a5      	str	r5, [r4, #8]
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80063bc:	6260      	str	r0, [r4, #36]	; 0x24
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80063c4:	ea83 2332 	eor.w	r3, r3, r2, ror #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80063c8:	ea83 4233 	eor.w	r2, r3, r3, ror #16
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 80063cc:	b298      	uxth	r0, r3
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80063ce:	0a12      	lsrs	r2, r2, #8
            if (dest_port == 68)
 80063d0:	2844      	cmp	r0, #68	; 0x44
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80063d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80063d6:	ea82 2333 	eor.w	r3, r2, r3, ror #8
 80063da:	614b      	str	r3, [r1, #20]
            if (dest_port == 68)
 80063dc:	d181      	bne.n	80062e2 <_nx_ipv4_packet_receive+0x17e>
                if (ip_ptr -> nx_ip_udp_packet_receive)
 80063de:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f43f af7d 	beq.w	80062e2 <_nx_ipv4_packet_receive+0x17e>
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 80063e8:	4621      	mov	r1, r4
 80063ea:	4638      	mov	r0, r7
}
 80063ec:	b002      	add	sp, #8
 80063ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 80063f2:	4718      	bx	r3
    else if (ip_ptr -> nx_ip_forward_packet_process)
 80063f4:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f5      	bne.n	80063e8 <_nx_ipv4_packet_receive+0x284>
 80063fc:	e771      	b.n	80062e2 <_nx_ipv4_packet_receive+0x17e>
 80063fe:	bf00      	nop

08006400 <_nx_ipv6_multicast_join>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_multicast_join(NX_IP *ip_ptr, ULONG *multicast_addr, NX_INTERFACE *nx_interface)
{
 8006400:	b570      	push	{r4, r5, r6, lr}
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
    driver_request.nx_ip_driver_interface = nx_interface;

    /* Obtain the IP mutex so we can search the multicast join list.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006402:	f200 643c 	addw	r4, r0, #1596	; 0x63c
{
 8006406:	b088      	sub	sp, #32
 8006408:	4615      	mov	r5, r2
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 800640a:	68ce      	ldr	r6, [r1, #12]
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_JOIN;
 800640c:	2208      	movs	r2, #8
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 800640e:	f243 3333 	movw	r3, #13107	; 0x3333
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006412:	f04f 31ff 	mov.w	r1, #4294967295
    driver_request.nx_ip_driver_ptr = ip_ptr;
 8006416:	9006      	str	r0, [sp, #24]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006418:	4620      	mov	r0, r4
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_JOIN;
 800641a:	9200      	str	r2, [sp, #0]
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 800641c:	9302      	str	r3, [sp, #8]
    driver_request.nx_ip_driver_interface = nx_interface;
 800641e:	9507      	str	r5, [sp, #28]
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 8006420:	9603      	str	r6, [sp, #12]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006422:	f016 fb69 	bl	801caf8 <_tx_mutex_get>

    /* Call the device driver with the driver request. */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8006426:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006428:	4668      	mov	r0, sp
 800642a:	4798      	blx	r3

    /* Release the protection over the IP instance.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800642c:	4620      	mov	r0, r4
 800642e:	f016 fc4d 	bl	801cccc <_tx_mutex_put>

    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
}
 8006432:	9801      	ldr	r0, [sp, #4]
 8006434:	b008      	add	sp, #32
 8006436:	bd70      	pop	{r4, r5, r6, pc}

08006438 <CHECK_IP_ADDRESSES_BY_PREFIX>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
INT CHECK_IP_ADDRESSES_BY_PREFIX(ULONG *ip_addr1, ULONG *ip_addr2,
                                 ULONG prefix_len)
{
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Get the remaining bits in prefix length. */
    low_prefix  = prefix_len &  0x1f;

    /* Would the prefix length have 1 or more ULONGs? */
    if (high_prefix)
 800643a:	0954      	lsrs	r4, r2, #5
{
 800643c:	4607      	mov	r7, r0
 800643e:	460e      	mov	r6, r1
    low_prefix  = prefix_len &  0x1f;
 8006440:	f002 051f 	and.w	r5, r2, #31
    if (high_prefix)
 8006444:	d003      	beq.n	800644e <CHECK_IP_ADDRESSES_BY_PREFIX+0x16>
    {

        /* Yes; compare that number of ULONGS (in bytes) in each input address. */
        if (memcmp(ip_addr1, ip_addr2, high_prefix << 2))
 8006446:	00a2      	lsls	r2, r4, #2
 8006448:	f018 f874 	bl	801e534 <memcmp>
 800644c:	b990      	cbnz	r0, 8006474 <CHECK_IP_ADDRESSES_BY_PREFIX+0x3c>
            return(0);
        }
    }

    /* Are there any bits to compare after the high order bits? */
    if (low_prefix)
 800644e:	b17d      	cbz	r5, 8006470 <CHECK_IP_ADDRESSES_BY_PREFIX+0x38>
    {

        /* Compare these bits between the two addresses, after masking out the upper ULONGs. */
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;

        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 8006450:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;
 8006454:	f04f 33ff 	mov.w	r3, #4294967295
        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 8006458:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;
 800645c:	f1c5 0520 	rsb	r5, r5, #32
        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 8006460:	404a      	eors	r2, r1
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;
 8006462:	fa03 f505 	lsl.w	r5, r3, r5
        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 8006466:	422a      	tst	r2, r5
 8006468:	bf0c      	ite	eq
 800646a:	2001      	moveq	r0, #1
 800646c:	2000      	movne	r0, #0
            return(0);
        }
    }

    return(1);
}
 800646e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return(1);
 8006470:	2001      	movs	r0, #1
}
 8006472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return(0);
 8006474:	2000      	movs	r0, #0
}
 8006476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006478 <CHECK_IPV6_ADDRESSES_SAME>:
INT CHECK_IPV6_ADDRESSES_SAME(ULONG *ip_addr1, ULONG *ip_addr2)
{
#ifdef FEATURE_NX_IPV6
    return(ip_addr1[0] == ip_addr2[0] &&
           ip_addr1[1] == ip_addr2[1] &&
           ip_addr1[2] == ip_addr2[2] &&
 8006478:	6802      	ldr	r2, [r0, #0]
 800647a:	680b      	ldr	r3, [r1, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d001      	beq.n	8006484 <CHECK_IPV6_ADDRESSES_SAME+0xc>
 8006480:	2000      	movs	r0, #0
    NX_PARAMETER_NOT_USED(ip_addr1);
    NX_PARAMETER_NOT_USED(ip_addr2);

    return(0);
#endif /* FEATURE_NX_IPV6 */
}
 8006482:	4770      	bx	lr
    return(ip_addr1[0] == ip_addr2[0] &&
 8006484:	6842      	ldr	r2, [r0, #4]
 8006486:	684b      	ldr	r3, [r1, #4]
 8006488:	429a      	cmp	r2, r3
 800648a:	d1f9      	bne.n	8006480 <CHECK_IPV6_ADDRESSES_SAME+0x8>
           ip_addr1[1] == ip_addr2[1] &&
 800648c:	6882      	ldr	r2, [r0, #8]
 800648e:	688b      	ldr	r3, [r1, #8]
 8006490:	429a      	cmp	r2, r3
 8006492:	d1f5      	bne.n	8006480 <CHECK_IPV6_ADDRESSES_SAME+0x8>
           ip_addr1[2] == ip_addr2[2] &&
 8006494:	68c0      	ldr	r0, [r0, #12]
 8006496:	68cb      	ldr	r3, [r1, #12]
 8006498:	1ac0      	subs	r0, r0, r3
 800649a:	fab0 f080 	clz	r0, r0
 800649e:	0940      	lsrs	r0, r0, #5
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop

080064a4 <CHECK_UNSPECIFIED_ADDRESS>:
/*                                                                        */
/**************************************************************************/
INT CHECK_UNSPECIFIED_ADDRESS(ULONG *ip_addr)
{
#ifdef FEATURE_NX_IPV6
    return(!(ip_addr[0] || ip_addr[1] || ip_addr[2] || ip_addr[3]));
 80064a4:	6803      	ldr	r3, [r0, #0]
 80064a6:	b943      	cbnz	r3, 80064ba <CHECK_UNSPECIFIED_ADDRESS+0x16>
 80064a8:	6842      	ldr	r2, [r0, #4]
 80064aa:	b932      	cbnz	r2, 80064ba <CHECK_UNSPECIFIED_ADDRESS+0x16>
 80064ac:	6883      	ldr	r3, [r0, #8]
 80064ae:	b923      	cbnz	r3, 80064ba <CHECK_UNSPECIFIED_ADDRESS+0x16>
 80064b0:	68c0      	ldr	r0, [r0, #12]
 80064b2:	fab0 f080 	clz	r0, r0
 80064b6:	0940      	lsrs	r0, r0, #5
 80064b8:	4770      	bx	lr
 80064ba:	2000      	movs	r0, #0
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop

080064c0 <SET_UNSPECIFIED_ADDRESS>:
/*                                                                        */
/**************************************************************************/
void SET_UNSPECIFIED_ADDRESS(ULONG *ip_addr)
{
#ifdef FEATURE_NX_IPV6
    ip_addr[0] = 0;
 80064c0:	2300      	movs	r3, #0
    ip_addr[1] = 0;
 80064c2:	e9c0 3300 	strd	r3, r3, [r0]
    ip_addr[2] = 0;
    ip_addr[3] = 0;
 80064c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
#else
    NX_PARAMETER_NOT_USED(ip_addr);
#endif /* FEATURE_NX_IPV6 */
}
 80064ca:	4770      	bx	lr

080064cc <COPY_IPV6_ADDRESS>:
/*                                                                        */
/**************************************************************************/
void COPY_IPV6_ADDRESS(ULONG *copy_from, ULONG *copy_to)
{
#ifdef FEATURE_NX_IPV6
    copy_to[0] = copy_from[0];
 80064cc:	6803      	ldr	r3, [r0, #0]
 80064ce:	600b      	str	r3, [r1, #0]
    copy_to[1] = copy_from[1];
 80064d0:	6843      	ldr	r3, [r0, #4]
 80064d2:	604b      	str	r3, [r1, #4]
    copy_to[2] = copy_from[2];
 80064d4:	6883      	ldr	r3, [r0, #8]
 80064d6:	608b      	str	r3, [r1, #8]
    copy_to[3] = copy_from[3];
 80064d8:	68c3      	ldr	r3, [r0, #12]
 80064da:	60cb      	str	r3, [r1, #12]
#else
    NX_PARAMETER_NOT_USED(copy_from);
    NX_PARAMETER_NOT_USED(copy_to);
#endif /* FEATURE_NX_IPV6 */
}
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop

080064e0 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
void SET_SOLICITED_NODE_MULTICAST_ADDRESS(ULONG *address,
                                          ULONG *unicast_address)
{
 80064e0:	b410      	push	{r4}
#ifdef FEATURE_NX_IPV6
    address[0] = (ULONG)0xFF020000;
    address[1] = (ULONG)0;
    address[2] = (ULONG)0x00000001;
 80064e2:	2300      	movs	r3, #0
 80064e4:	2401      	movs	r4, #1
 80064e6:	4a05      	ldr	r2, [pc, #20]	; (80064fc <SET_SOLICITED_NODE_MULTICAST_ADDRESS+0x1c>)
 80064e8:	e880 001c 	stmia.w	r0, {r2, r3, r4}
    address[3] = (ULONG)(0xFF000000 | unicast_address[3]);
 80064ec:	68cb      	ldr	r3, [r1, #12]
#else
    NX_PARAMETER_NOT_USED(address);
    NX_PARAMETER_NOT_USED(unicast_address);
#endif /* FEATURE_NX_IPV6 */
}
 80064ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    address[3] = (ULONG)(0xFF000000 | unicast_address[3]);
 80064f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f6:	60c3      	str	r3, [r0, #12]
}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	ff020000 	.word	0xff020000

08006500 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS>:
{
#ifdef FEATURE_NX_IPV6

INT isMulticast = 0;

    if ((dest_ip[0] == (ULONG)0xFF020000) && (dest_ip[1] == (ULONG)0x0) &&
 8006500:	6803      	ldr	r3, [r0, #0]
 8006502:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 8006506:	d00d      	beq.n	8006524 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x24>
             ((dest_ip[3] == (ULONG)0x00000001)))     /* Realm-Local All nodes multicast address.     */
    {
        isMulticast = 1;
    }
#endif /* NX_ENABLE_THREAD  */
    else if ((dest_ip[0] == (ULONG)0xFF050000) &&
 8006508:	f513 0f7b 	cmn.w	r3, #16449536	; 0xfb0000
 800650c:	d10c      	bne.n	8006528 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x28>
 800650e:	6843      	ldr	r3, [r0, #4]
 8006510:	b953      	cbnz	r3, 8006528 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x28>
             (dest_ip[1] == (ULONG)0x0) &&
 8006512:	6882      	ldr	r2, [r0, #8]
 8006514:	b942      	cbnz	r2, 8006528 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x28>
             (dest_ip[2] == (ULONG)0x0) &&
 8006516:	68c0      	ldr	r0, [r0, #12]
 8006518:	4b10      	ldr	r3, [pc, #64]	; (800655c <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x5c>)
 800651a:	1ac0      	subs	r0, r0, r3
 800651c:	fab0 f080 	clz	r0, r0
 8006520:	0940      	lsrs	r0, r0, #5
 8006522:	4770      	bx	lr
    if ((dest_ip[0] == (ULONG)0xFF020000) && (dest_ip[1] == (ULONG)0x0) &&
 8006524:	6843      	ldr	r3, [r0, #4]
 8006526:	b10b      	cbz	r3, 800652c <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x2c>
INT isMulticast = 0;
 8006528:	2000      	movs	r0, #0
 800652a:	4770      	bx	lr
        (dest_ip[2] == (ULONG)0x00000001) &&
 800652c:	6882      	ldr	r2, [r0, #8]
    if ((dest_ip[0] == (ULONG)0xFF020000) && (dest_ip[1] == (ULONG)0x0) &&
 800652e:	2a01      	cmp	r2, #1
 8006530:	d00a      	beq.n	8006548 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x48>
             (dest_ip[1] == (ULONG)0x0) &&
 8006532:	2a00      	cmp	r2, #0
 8006534:	d1f8      	bne.n	8006528 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x28>
             ((dest_ip[3] == (ULONG)0x00000001) || (dest_ip[3] == (ULONG)0x00010002)))
 8006536:	68c0      	ldr	r0, [r0, #12]
 8006538:	4b09      	ldr	r3, [pc, #36]	; (8006560 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x60>)
        isMulticast = 1;
 800653a:	4298      	cmp	r0, r3
 800653c:	bf18      	it	ne
 800653e:	2801      	cmpne	r0, #1
 8006540:	bf0c      	ite	eq
 8006542:	2001      	moveq	r0, #1
 8006544:	2000      	movne	r0, #0
 8006546:	4770      	bx	lr
        (dest_ip[3] == ((myip[3] & (ULONG)0x00FFFFFF) | (ULONG)0xFF000000)))
 8006548:	68cb      	ldr	r3, [r1, #12]
        (dest_ip[2] == (ULONG)0x00000001) &&
 800654a:	68c2      	ldr	r2, [r0, #12]
        (dest_ip[3] == ((myip[3] & (ULONG)0x00FFFFFF) | (ULONG)0xFF000000)))
 800654c:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
        (dest_ip[2] == (ULONG)0x00000001) &&
 8006550:	1a80      	subs	r0, r0, r2
 8006552:	fab0 f080 	clz	r0, r0
 8006556:	0940      	lsrs	r0, r0, #5
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	00010003 	.word	0x00010003
 8006560:	00010002 	.word	0x00010002

08006564 <IPv6_Address_Type>:
   Everything else         Global
 */
ULONG tmp;

    /* Is this multicast? */
    if ((ip_address[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 8006564:	6803      	ldr	r3, [r0, #0]
 8006566:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800656a:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800656e:	d019      	beq.n	80065a4 <IPv6_Address_Type+0x40>
        }

        return(IPV6_ADDRESS_MULTICAST);
    }

    tmp = ip_address[0] & (0xFFC00000);
 8006570:	4a2a      	ldr	r2, [pc, #168]	; (800661c <IPv6_Address_Type+0xb8>)
 8006572:	401a      	ands	r2, r3

    if (tmp == (ULONG)0xFE800000)
 8006574:	f112 7fc0 	cmn.w	r2, #25165824	; 0x1800000
 8006578:	d010      	beq.n	800659c <IPv6_Address_Type+0x38>
    {
        return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_LINKLOCAL));
    }
    /* Note that site local are deprecated in RFC 4291 and are
       treated as global type address. */
    if (tmp == (ULONG)0xFEC00000)
 800657a:	f112 7fa0 	cmn.w	r2, #20971520	; 0x1400000
 800657e:	d00f      	beq.n	80065a0 <IPv6_Address_Type+0x3c>
    {
        return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_GLOBAL));
    }

    tmp = ip_address[0] | ip_address[1] | ip_address[2];
 8006580:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8006584:	430b      	orrs	r3, r1

    if (tmp == 0)
 8006586:	4313      	orrs	r3, r2
 8006588:	d10a      	bne.n	80065a0 <IPv6_Address_Type+0x3c>
    {
        if (ip_address[3] == 0)
 800658a:	68c3      	ldr	r3, [r0, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02f      	beq.n	80065f0 <IPv6_Address_Type+0x8c>
            return(IPV6_ADDRESS_UNSPECIFIED);
        }

        if (ip_address[3] == 1)
        {
            return(IPV6_ADDRESS_LOOPBACK);
 8006590:	2b01      	cmp	r3, #1
 8006592:	4823      	ldr	r0, [pc, #140]	; (8006620 <IPv6_Address_Type+0xbc>)
 8006594:	bf08      	it	eq
 8006596:	f04f 5080 	moveq.w	r0, #268435456	; 0x10000000
 800659a:	4770      	bx	lr
        return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_LINKLOCAL));
 800659c:	4821      	ldr	r0, [pc, #132]	; (8006624 <IPv6_Address_Type+0xc0>)
 800659e:	4770      	bx	lr
        }
    }

    return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_GLOBAL));
 80065a0:	481f      	ldr	r0, [pc, #124]	; (8006620 <IPv6_Address_Type+0xbc>)
 80065a2:	4770      	bx	lr
        if (((ip_address[0] == (ULONG)0xFF010000) ||
 80065a4:	f513 0f7f 	cmn.w	r3, #16711680	; 0xff0000
 80065a8:	d00a      	beq.n	80065c0 <IPv6_Address_Type+0x5c>
 80065aa:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 80065ae:	d007      	beq.n	80065c0 <IPv6_Address_Type+0x5c>
        if ((ip_address[0] == (ULONG)0xFF050000) &&     /* All DHCPv6 relay and server hosts */
 80065b0:	f513 0f7b 	cmn.w	r3, #16449536	; 0xfb0000
 80065b4:	d101      	bne.n	80065ba <IPv6_Address_Type+0x56>
 80065b6:	6842      	ldr	r2, [r0, #4]
 80065b8:	b352      	cbz	r2, 8006610 <IPv6_Address_Type+0xac>
        return(IPV6_ADDRESS_MULTICAST);
 80065ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
#else /* FEATURE_NX_IPV6 */
    NX_PARAMETER_NOT_USED(ip_address);

    return(0);
#endif /* FEATURE_NX_IPV6 */
}
 80065be:	4770      	bx	lr
             (ip_address[0] == (ULONG)0xFF020000)) &&
 80065c0:	6842      	ldr	r2, [r0, #4]
 80065c2:	2a00      	cmp	r2, #0
 80065c4:	d1f9      	bne.n	80065ba <IPv6_Address_Type+0x56>
            (ip_address[1] == (ULONG)0) &&
 80065c6:	6882      	ldr	r2, [r0, #8]
 80065c8:	b952      	cbnz	r2, 80065e0 <IPv6_Address_Type+0x7c>
            (ip_address[2] == (ULONG)0) &&
 80065ca:	68c2      	ldr	r2, [r0, #12]
 80065cc:	2a01      	cmp	r2, #1
 80065ce:	d005      	beq.n	80065dc <IPv6_Address_Type+0x78>
        if ((ip_address[0] == (ULONG)0xFF050000) &&     /* All DHCPv6 relay and server hosts */
 80065d0:	f513 0f7b 	cmn.w	r3, #16449536	; 0xfb0000
 80065d4:	d105      	bne.n	80065e2 <IPv6_Address_Type+0x7e>
            (ip_address[2] == (ULONG)0) &&
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <IPv6_Address_Type+0xc4>)
 80065d8:	429a      	cmp	r2, r3
 80065da:	d102      	bne.n	80065e2 <IPv6_Address_Type+0x7e>
            return(ret | IPV6_ALL_NODE_MCAST);
 80065dc:	4813      	ldr	r0, [pc, #76]	; (800662c <IPv6_Address_Type+0xc8>)
 80065de:	4770      	bx	lr
            (ip_address[1] == (ULONG)0) &&
 80065e0:	b94a      	cbnz	r2, 80065f6 <IPv6_Address_Type+0x92>
            (ip_address[2] == (ULONG)0) &&
 80065e2:	68c3      	ldr	r3, [r0, #12]
            return(ret | IPV6_ALL_ROUTER_MCAST);
 80065e4:	4812      	ldr	r0, [pc, #72]	; (8006630 <IPv6_Address_Type+0xcc>)
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	bf18      	it	ne
 80065ea:	f04f 4080 	movne.w	r0, #1073741824	; 0x40000000
 80065ee:	4770      	bx	lr
            return(IPV6_ADDRESS_UNSPECIFIED);
 80065f0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80065f4:	4770      	bx	lr
        if ((ip_address[0] == (ULONG)0xFF020000) &&
 80065f6:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 80065fa:	d1de      	bne.n	80065ba <IPv6_Address_Type+0x56>
            (ip_address[1] == (ULONG)0) &&
 80065fc:	2a01      	cmp	r2, #1
 80065fe:	d1dc      	bne.n	80065ba <IPv6_Address_Type+0x56>
            (ip_address[2] == (ULONG)1) &&
 8006600:	68c3      	ldr	r3, [r0, #12]
            return(ret | IPV6_SOLICITED_NODE_MCAST);
 8006602:	480c      	ldr	r0, [pc, #48]	; (8006634 <IPv6_Address_Type+0xd0>)
 8006604:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8006608:	bf38      	it	cc
 800660a:	f04f 4080 	movcc.w	r0, #1073741824	; 0x40000000
 800660e:	4770      	bx	lr
            (ip_address[1] == (ULONG)0) &&
 8006610:	6882      	ldr	r2, [r0, #8]
 8006612:	2a00      	cmp	r2, #0
 8006614:	d1e4      	bne.n	80065e0 <IPv6_Address_Type+0x7c>
 8006616:	68c2      	ldr	r2, [r0, #12]
 8006618:	e7dd      	b.n	80065d6 <IPv6_Address_Type+0x72>
 800661a:	bf00      	nop
 800661c:	ffc00000 	.word	0xffc00000
 8006620:	80000004 	.word	0x80000004
 8006624:	80000001 	.word	0x80000001
 8006628:	00010003 	.word	0x00010003
 800662c:	40000010 	.word	0x40000010
 8006630:	40000020 	.word	0x40000020
 8006634:	40000040 	.word	0x40000040

08006638 <_nx_ipv6_address_change_endian>:
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_address_change_endian(ULONG *address)
{
#ifdef FEATURE_NX_IPV6
    if (address == NX_NULL)
 8006638:	b330      	cbz	r0, 8006688 <_nx_ipv6_address_change_endian+0x50>
{
 800663a:	b4f0      	push	{r4, r5, r6, r7}
    {
        return;
    }

    NX_CHANGE_ULONG_ENDIAN(address[0]);
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 800663c:	e9d0 c700 	ldrd	ip, r7, [r0]
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8006640:	6886      	ldr	r6, [r0, #8]
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8006642:	68c5      	ldr	r5, [r0, #12]
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 8006644:	ea87 4137 	eor.w	r1, r7, r7, ror #16
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8006648:	ea86 4236 	eor.w	r2, r6, r6, ror #16
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 800664c:	ea85 4335 	eor.w	r3, r5, r5, ror #16
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8006650:	ea8c 443c 	eor.w	r4, ip, ip, ror #16
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 8006654:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8006656:	0a24      	lsrs	r4, r4, #8
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8006658:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 800665a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 800665e:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8006660:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8006664:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 8006668:	ea81 2137 	eor.w	r1, r1, r7, ror #8
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 800666c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8006670:	ea84 243c 	eor.w	r4, r4, ip, ror #8
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8006674:	ea82 2236 	eor.w	r2, r2, r6, ror #8
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8006678:	ea83 2335 	eor.w	r3, r3, r5, ror #8
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 800667c:	6004      	str	r4, [r0, #0]
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 800667e:	e9c0 1201 	strd	r1, r2, [r0, #4]
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8006682:	60c3      	str	r3, [r0, #12]
#else
    NX_PARAMETER_NOT_USED(address);
#endif /* FEATURE_NX_IPV6 */
}
 8006684:	bcf0      	pop	{r4, r5, r6, r7}
 8006686:	4770      	bx	lr
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop

0800668c <_nx_packet_allocate>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 800668e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006690:	4294      	cmp	r4, r2
 8006692:	d34a      	bcc.n	800672a <_nx_packet_allocate+0x9e>
    {
        return(NX_INVALID_PARAMETERS);
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8006694:	2400      	movs	r4, #0
 8006696:	600c      	str	r4, [r1, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006698:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800669c:	b672      	cpsid	i

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 800669e:	6885      	ldr	r5, [r0, #8]
 80066a0:	b1fd      	cbz	r5, 80066e2 <_nx_packet_allocate+0x56>

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 80066a2:	69c3      	ldr	r3, [r0, #28]
        pool_ptr -> nx_packet_pool_available--;
 80066a4:	3d01      	subs	r5, #1
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 80066a6:	f04f 3eaa 	mov.w	lr, #2863311530	; 0xaaaaaaaa
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80066aa:	f04f 0c04 	mov.w	ip, #4
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 80066ae:	691f      	ldr	r7, [r3, #16]
        pool_ptr -> nx_packet_pool_available--;
 80066b0:	6085      	str	r5, [r0, #8]
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 80066b2:	69dd      	ldr	r5, [r3, #28]
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 80066b4:	443a      	add	r2, r7
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 80066b6:	61c5      	str	r5, [r0, #28]

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;

        /* Set status to success.  */
        status =  NX_SUCCESS;
 80066b8:	4620      	mov	r0, r4
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 80066ba:	61dc      	str	r4, [r3, #28]
        work_ptr -> nx_packet_next =         NX_NULL;
 80066bc:	605c      	str	r4, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 80066be:	619c      	str	r4, [r3, #24]
        work_ptr -> nx_packet_length =       0;
 80066c0:	625c      	str	r4, [r3, #36]	; 0x24
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 80066c2:	635c      	str	r4, [r3, #52]	; 0x34
        work_ptr -> nx_packet_interface_capability_flag = 0;
 80066c4:	63dc      	str	r4, [r3, #60]	; 0x3c
        work_ptr -> nx_packet_option_state = 0;
 80066c6:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 80066ca:	f883 4032 	strb.w	r4, [r3, #50]	; 0x32
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 80066ce:	f8c3 e020 	str.w	lr, [r3, #32]
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80066d2:	f8a3 c030 	strh.w	ip, [r3, #48]	; 0x30
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 80066d6:	e9c3 2202 	strd	r2, r2, [r3, #8]
        *packet_ptr =  work_ptr;
 80066da:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80066dc:	f386 8810 	msr	PRIMASK, r6
    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
}
 80066e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (wait_option)
 80066e2:	b323      	cbz	r3, 800672e <_nx_packet_allocate+0xa2>
            thread_ptr =  _tx_thread_current_ptr;
 80066e4:	4c15      	ldr	r4, [pc, #84]	; (800673c <_nx_packet_allocate+0xb0>)
            if (pool_ptr -> nx_packet_pool_suspension_list)
 80066e6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
            thread_ptr =  _tx_thread_current_ptr;
 80066e8:	6824      	ldr	r4, [r4, #0]
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 80066ea:	4f15      	ldr	r7, [pc, #84]	; (8006740 <_nx_packet_allocate+0xb4>)
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 80066ec:	66e0      	str	r0, [r4, #108]	; 0x6c
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 80066ee:	66a7      	str	r7, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 80066f0:	e9c4 211e 	strd	r2, r1, [r4, #120]	; 0x78
            if (pool_ptr -> nx_packet_pool_suspension_list)
 80066f4:	b1ed      	cbz	r5, 8006732 <_nx_packet_allocate+0xa6>
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 80066f6:	6f6a      	ldr	r2, [r5, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 80066f8:	e9c4 521c 	strd	r5, r2, [r4, #112]	; 0x70
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80066fc:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80066fe:	6714      	str	r4, [r2, #112]	; 0x70
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8006700:	676c      	str	r4, [r5, #116]	; 0x74
            pool_ptr -> nx_packet_pool_suspended_count++;
 8006702:	6b01      	ldr	r1, [r0, #48]	; 0x30
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8006704:	270c      	movs	r7, #12
            _tx_thread_preempt_disable++;
 8006706:	4d0f      	ldr	r5, [pc, #60]	; (8006744 <_nx_packet_allocate+0xb8>)
            pool_ptr -> nx_packet_pool_suspended_count++;
 8006708:	3101      	adds	r1, #1
            _tx_thread_preempt_disable++;
 800670a:	682a      	ldr	r2, [r5, #0]
            pool_ptr -> nx_packet_pool_suspended_count++;
 800670c:	6301      	str	r1, [r0, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800670e:	2101      	movs	r1, #1
            _tx_thread_preempt_disable++;
 8006710:	3201      	adds	r2, #1
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006712:	64e3      	str	r3, [r4, #76]	; 0x4c
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8006714:	6327      	str	r7, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8006716:	602a      	str	r2, [r5, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006718:	63a1      	str	r1, [r4, #56]	; 0x38
 800671a:	f386 8810 	msr	PRIMASK, r6
            _tx_thread_system_suspend(thread_ptr);
 800671e:	4620      	mov	r0, r4
 8006720:	f016 fe4c 	bl	801d3bc <_tx_thread_system_suspend>
            return(thread_ptr -> tx_thread_suspend_status);
 8006724:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 8006728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(NX_INVALID_PARAMETERS);
 800672a:	204d      	movs	r0, #77	; 0x4d
}
 800672c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            status =  NX_NO_PACKET;
 800672e:	2001      	movs	r0, #1
 8006730:	e7d4      	b.n	80066dc <_nx_packet_allocate+0x50>
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 8006732:	62c4      	str	r4, [r0, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 8006734:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 8006738:	e7e3      	b.n	8006702 <_nx_packet_allocate+0x76>
 800673a:	bf00      	nop
 800673c:	20007a80 	.word	0x20007a80
 8006740:	0800687d 	.word	0x0800687d
 8006744:	20007a7c 	.word	0x20007a7c

08006748 <_nx_packet_data_append>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	4699      	mov	r9, r3
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800674e:	6983      	ldr	r3, [r0, #24]
{
 8006750:	b083      	sub	sp, #12
 8006752:	4680      	mov	r8, r0
 8006754:	460f      	mov	r7, r1
 8006756:	4615      	mov	r5, r2
    if (packet_ptr -> nx_packet_last)
 8006758:	2b00      	cmp	r3, #0
 800675a:	d05c      	beq.n	8006816 <_nx_packet_data_append+0xce>
 800675c:	461e      	mov	r6, r3
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 800675e:	2400      	movs	r4, #0
 8006760:	e000      	b.n	8006764 <_nx_packet_data_append+0x1c>
 8006762:	460e      	mov	r6, r1

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 8006764:	6972      	ldr	r2, [r6, #20]
 8006766:	68f0      	ldr	r0, [r6, #12]
            /* Remember the last packet.  */
            last_packet =  work_ptr;

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 8006768:	6871      	ldr	r1, [r6, #4]
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800676a:	1a12      	subs	r2, r2, r0
            available_bytes =  available_bytes +
 800676c:	4414      	add	r4, r2
        } while (work_ptr);
 800676e:	2900      	cmp	r1, #0
 8006770:	d1f7      	bne.n	8006762 <_nx_packet_data_append+0x1a>
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 8006772:	42ac      	cmp	r4, r5
 8006774:	9101      	str	r1, [sp, #4]
 8006776:	d21e      	bcs.n	80067b6 <_nx_packet_data_append+0x6e>
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 8006778:	f04f 0a00 	mov.w	sl, #0
 800677c:	e00c      	b.n	8006798 <_nx_packet_data_append+0x50>
            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800677e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8006782:	2a00      	cmp	r2, #0
 8006784:	d042      	beq.n	800680c <_nx_packet_data_append+0xc4>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 8006786:	6053      	str	r3, [r2, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 8006788:	f8ca 3018 	str.w	r3, [sl, #24]
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	1ad3      	subs	r3, r2, r3
            available_bytes =  available_bytes +
 8006792:	441c      	add	r4, r3
        while (available_bytes < data_size)
 8006794:	42a5      	cmp	r5, r4
 8006796:	d945      	bls.n	8006824 <_nx_packet_data_append+0xdc>
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8006798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800679a:	2200      	movs	r2, #0
 800679c:	a901      	add	r1, sp, #4
 800679e:	4648      	mov	r0, r9
 80067a0:	f7ff ff74 	bl	800668c <_nx_packet_allocate>
            if (status)
 80067a4:	4683      	mov	fp, r0
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d155      	bne.n	8006856 <_nx_packet_data_append+0x10e>
 80067aa:	9b01      	ldr	r3, [sp, #4]
            if (new_list_ptr)
 80067ac:	f1ba 0f00 	cmp.w	sl, #0
 80067b0:	d1e5      	bne.n	800677e <_nx_packet_data_append+0x36>
 80067b2:	469a      	mov	sl, r3
 80067b4:	e7ea      	b.n	800678c <_nx_packet_data_append+0x44>
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 80067b6:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80067ba:	442a      	add	r2, r5
 80067bc:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 80067c0:	9301      	str	r3, [sp, #4]
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 80067c2:	2d00      	cmp	r5, #0
 80067c4:	d041      	beq.n	800684a <_nx_packet_data_append+0x102>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80067c6:	68de      	ldr	r6, [r3, #12]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80067c8:	4639      	mov	r1, r7
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80067ca:	695c      	ldr	r4, [r3, #20]
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80067cc:	4630      	mov	r0, r6
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80067ce:	1ba4      	subs	r4, r4, r6
 80067d0:	42ac      	cmp	r4, r5
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80067d2:	4622      	mov	r2, r4
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80067d4:	d80d      	bhi.n	80067f2 <_nx_packet_data_append+0xaa>
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80067d6:	f017 febc 	bl	801e552 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 80067da:	9b01      	ldr	r3, [sp, #4]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 80067dc:	1b2d      	subs	r5, r5, r4
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 80067de:	4427      	add	r7, r4
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	4422      	add	r2, r4
 80067e4:	60da      	str	r2, [r3, #12]
        if (data_size)
 80067e6:	d030      	beq.n	800684a <_nx_packet_data_append+0x102>
            work_ptr =  work_ptr -> nx_packet_next;
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	9301      	str	r3, [sp, #4]
            packet_ptr -> nx_packet_last =  work_ptr;
 80067ec:	f8c8 3018 	str.w	r3, [r8, #24]
 80067f0:	e7e9      	b.n	80067c6 <_nx_packet_data_append+0x7e>
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80067f2:	462a      	mov	r2, r5

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 80067f4:	f04f 0b00 	mov.w	fp, #0
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80067f8:	f017 feab 	bl	801e552 <memcpy>
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 80067fc:	9a01      	ldr	r2, [sp, #4]
 80067fe:	68d3      	ldr	r3, [r2, #12]
 8006800:	441d      	add	r5, r3
 8006802:	60d5      	str	r5, [r2, #12]
}
 8006804:	4658      	mov	r0, fp
 8006806:	b003      	add	sp, #12
 8006808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800680c:	f8ca 3018 	str.w	r3, [sl, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 8006810:	f8ca 3004 	str.w	r3, [sl, #4]
 8006814:	e7ba      	b.n	800678c <_nx_packet_data_append+0x44>
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 8006816:	6944      	ldr	r4, [r0, #20]
 8006818:	68c2      	ldr	r2, [r0, #12]
 800681a:	1aa4      	subs	r4, r4, r2
    if (available_bytes < data_size)
 800681c:	42ac      	cmp	r4, r5
 800681e:	d224      	bcs.n	800686a <_nx_packet_data_append+0x122>
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 8006820:	461e      	mov	r6, r3
 8006822:	e7a9      	b.n	8006778 <_nx_packet_data_append+0x30>
        if (last_packet)
 8006824:	b336      	cbz	r6, 8006874 <_nx_packet_data_append+0x12c>
            last_packet -> nx_packet_next =  new_list_ptr;
 8006826:	f8c6 a004 	str.w	sl, [r6, #4]
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800682a:	2300      	movs	r3, #0
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800682c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
        new_list_ptr -> nx_packet_last =  NX_NULL;
 8006830:	f8ca 3018 	str.w	r3, [sl, #24]
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 8006834:	442a      	add	r2, r5
 8006836:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800683a:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
    if (packet_ptr -> nx_packet_last)
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf08      	it	eq
 8006842:	4643      	moveq	r3, r8
 8006844:	9301      	str	r3, [sp, #4]
    while (data_size)
 8006846:	2d00      	cmp	r5, #0
 8006848:	d1bd      	bne.n	80067c6 <_nx_packet_data_append+0x7e>
    return(NX_SUCCESS);
 800684a:	f04f 0b00 	mov.w	fp, #0
}
 800684e:	4658      	mov	r0, fp
 8006850:	b003      	add	sp, #12
 8006852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (new_list_ptr)
 8006856:	f1ba 0f00 	cmp.w	sl, #0
 800685a:	d0d3      	beq.n	8006804 <_nx_packet_data_append+0xbc>
                    _nx_packet_release(new_list_ptr);
 800685c:	4650      	mov	r0, sl
 800685e:	f000 f8c7 	bl	80069f0 <_nx_packet_release>
}
 8006862:	4658      	mov	r0, fp
 8006864:	b003      	add	sp, #12
 8006866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800686a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800686c:	4603      	mov	r3, r0
 800686e:	442a      	add	r2, r5
 8006870:	6242      	str	r2, [r0, #36]	; 0x24
 8006872:	e7a5      	b.n	80067c0 <_nx_packet_data_append+0x78>
            packet_ptr -> nx_packet_next =  new_list_ptr;
 8006874:	f8c8 a004 	str.w	sl, [r8, #4]
 8006878:	e7d7      	b.n	800682a <_nx_packet_data_append+0xe2>
 800687a:	bf00      	nop

0800687c <_nx_packet_pool_cleanup>:
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 800687c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800687e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006882:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8006884:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006886:	b152      	cbz	r2, 800689e <_nx_packet_pool_cleanup+0x22>
 8006888:	b14b      	cbz	r3, 800689e <_nx_packet_pool_cleanup+0x22>
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <_nx_packet_pool_cleanup+0x6c>)
{
 800688c:	b410      	push	{r4}
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800688e:	681c      	ldr	r4, [r3, #0]
 8006890:	4294      	cmp	r4, r2
 8006892:	d007      	beq.n	80068a4 <_nx_packet_pool_cleanup+0x28>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006894:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8006898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	f381 8810 	msr	PRIMASK, r1
 80068a2:	4770      	bx	lr
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80068a4:	6f02      	ldr	r2, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80068a6:	2400      	movs	r4, #0
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80068a8:	4282      	cmp	r2, r0
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80068aa:	6684      	str	r4, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80068ac:	d01a      	beq.n	80068e4 <_nx_packet_pool_cleanup+0x68>
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 80068ae:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80068b0:	4284      	cmp	r4, r0
                thread_ptr -> tx_thread_suspended_previous;
 80068b2:	6f44      	ldr	r4, [r0, #116]	; 0x74
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80068b4:	bf08      	it	eq
 80068b6:	62da      	streq	r2, [r3, #44]	; 0x2c
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80068b8:	6754      	str	r4, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80068ba:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80068bc:	6722      	str	r2, [r4, #112]	; 0x70
        pool_ptr -> nx_packet_pool_suspended_count--;
 80068be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80068c0:	6b04      	ldr	r4, [r0, #48]	; 0x30
        pool_ptr -> nx_packet_pool_suspended_count--;
 80068c2:	3a01      	subs	r2, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80068c4:	2c0c      	cmp	r4, #12
        pool_ptr -> nx_packet_pool_suspended_count--;
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80068c8:	d1e4      	bne.n	8006894 <_nx_packet_pool_cleanup+0x18>
            _tx_thread_preempt_disable++;
 80068ca:	4a08      	ldr	r2, [pc, #32]	; (80068ec <_nx_packet_pool_cleanup+0x70>)
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 80068cc:	2401      	movs	r4, #1
            _tx_thread_preempt_disable++;
 80068ce:	6813      	ldr	r3, [r2, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 80068d0:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 80068d4:	4423      	add	r3, r4
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	f381 8810 	msr	PRIMASK, r1
}
 80068dc:	f85d 4b04 	ldr.w	r4, [sp], #4
            _tx_thread_system_resume(thread_ptr);
 80068e0:	f016 bce6 	b.w	801d2b0 <_tx_thread_system_resume>
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 80068e4:	62dc      	str	r4, [r3, #44]	; 0x2c
 80068e6:	e7ea      	b.n	80068be <_nx_packet_pool_cleanup+0x42>
 80068e8:	5041434b 	.word	0x5041434b
 80068ec:	20007a7c 	.word	0x20007a7c

080068f0 <_nx_packet_pool_create>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 80068f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	b083      	sub	sp, #12
    /* Save the original payload size.  */
    original_payload_size =  payload_size;

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 80068f6:	1cdf      	adds	r7, r3, #3
{
 80068f8:	4693      	mov	fp, r2
 80068fa:	4604      	mov	r4, r0
 80068fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 80068fe:	f027 0703 	bic.w	r7, r7, #3
    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8006902:	f10b 0843 	add.w	r8, fp, #67	; 0x43
{
 8006906:	468a      	mov	sl, r1
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8006908:	441d      	add	r5, r3
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800690a:	f102 0640 	add.w	r6, r2, #64	; 0x40
 800690e:	f028 0803 	bic.w	r8, r8, #3

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 8006912:	223c      	movs	r2, #60	; 0x3c
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8006914:	1bed      	subs	r5, r5, r7
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 8006916:	2100      	movs	r1, #0
 8006918:	f017 fe3f 	bl	801e59a <memset>
    end_of_pool =  ((CHAR *)pool_start) + pool_size;

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
    packet_ptr =         (CHAR *)rounded_pool_start;
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 800691c:	eb07 0308 	add.w	r3, r7, r8
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8006920:	f025 0503 	bic.w	r5, r5, #3
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 8006924:	f8c4 a004 	str.w	sl, [r4, #4]
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 8006928:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 800692c:	eb07 0a05 	add.w	sl, r7, r5

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 8006930:	459a      	cmp	sl, r3
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 8006932:	e9c4 7508 	strd	r7, r5, [r4, #32]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 8006936:	f04f 0500 	mov.w	r5, #0
    while (next_packet_ptr <= end_of_pool)
 800693a:	d346      	bcc.n	80069ca <_nx_packet_pool_create+0xda>
 800693c:	f107 0940 	add.w	r9, r7, #64	; 0x40
 8006940:	eb07 0e06 	add.w	lr, r7, r6
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8006944:	f04f 3bff 	mov.w	fp, #4294967295
 8006948:	eba7 0c03 	sub.w	ip, r7, r3
 800694c:	eba9 0903 	sub.w	r9, r9, r3
        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 8006950:	ebae 0e03 	sub.w	lr, lr, r3
 8006954:	9701      	str	r7, [sp, #4]
 8006956:	e000      	b.n	800695a <_nx_packet_pool_create+0x6a>
 8006958:	4603      	mov	r3, r0

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 800695a:	eb03 0008 	add.w	r0, r3, r8
 800695e:	eb03 020c 	add.w	r2, r3, ip
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 8006962:	eb03 0609 	add.w	r6, r3, r9
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 8006966:	eb0e 0103 	add.w	r1, lr, r3
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 800696a:	2700      	movs	r7, #0
    while (next_packet_ptr <= end_of_pool)
 800696c:	4582      	cmp	sl, r0
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 800696e:	61d3      	str	r3, [r2, #28]
        packets++;
 8006970:	f105 0501 	add.w	r5, r5, #1
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 8006974:	f843 400c 	str.w	r4, [r3, ip]
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 8006978:	6057      	str	r7, [r2, #4]
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800697a:	f8c2 b020 	str.w	fp, [r2, #32]
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 800697e:	e9c2 6104 	strd	r6, r1, [r2, #16]
    while (next_packet_ptr <= end_of_pool)
 8006982:	d2e9      	bcs.n	8006958 <_nx_packet_pool_create+0x68>
 8006984:	9f01      	ldr	r7, [sp, #4]
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 8006986:	eba3 0308 	sub.w	r3, r3, r8

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 800698a:	2200      	movs	r2, #0
 800698c:	61da      	str	r2, [r3, #28]
    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
    pool_ptr -> nx_packet_pool_total =      packets;

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800698e:	61e7      	str	r7, [r4, #28]
    pool_ptr -> nx_packet_pool_total =      packets;
 8006990:	e9c4 5502 	strd	r5, r5, [r4, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006994:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006998:	b672      	cpsid	i
    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 800699a:	4a0d      	ldr	r2, [pc, #52]	; (80069d0 <_nx_packet_pool_create+0xe0>)
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 800699c:	480d      	ldr	r0, [pc, #52]	; (80069d4 <_nx_packet_pool_create+0xe4>)
    if (_nx_packet_pool_created_ptr)
 800699e:	6813      	ldr	r3, [r2, #0]
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 80069a0:	6020      	str	r0, [r4, #0]
    if (_nx_packet_pool_created_ptr)
 80069a2:	b173      	cbz	r3, 80069c2 <_nx_packet_pool_create+0xd2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 80069a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 80069a6:	639c      	str	r4, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 80069a8:	6354      	str	r4, [r2, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 80069aa:	e9c4 320d 	strd	r3, r2, [r4, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <_nx_packet_pool_create+0xe8>)
 80069b0:	6813      	ldr	r3, [r2, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80069b6:	f381 8810 	msr	PRIMASK, r1
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
}
 80069ba:	2000      	movs	r0, #0
 80069bc:	b003      	add	sp, #12
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_packet_pool_created_ptr =                  pool_ptr;
 80069c2:	6014      	str	r4, [r2, #0]
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 80069c4:	e9c4 440d 	strd	r4, r4, [r4, #52]	; 0x34
 80069c8:	e7f1      	b.n	80069ae <_nx_packet_pool_create+0xbe>
    packet_ptr =         (CHAR *)rounded_pool_start;
 80069ca:	463b      	mov	r3, r7
 80069cc:	e7db      	b.n	8006986 <_nx_packet_pool_create+0x96>
 80069ce:	bf00      	nop
 80069d0:	2000789c 	.word	0x2000789c
 80069d4:	5041434b 	.word	0x5041434b
 80069d8:	20007898 	.word	0x20007898

080069dc <_nx_packet_pool_initialize>:
VOID    _nx_packet_pool_initialize(VOID)
{

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	4902      	ldr	r1, [pc, #8]	; (80069e8 <_nx_packet_pool_initialize+0xc>)
    _nx_packet_pool_created_count =      0;
 80069e0:	4a02      	ldr	r2, [pc, #8]	; (80069ec <_nx_packet_pool_initialize+0x10>)
    _nx_packet_pool_created_ptr =        NX_NULL;
 80069e2:	600b      	str	r3, [r1, #0]
    _nx_packet_pool_created_count =      0;
 80069e4:	6013      	str	r3, [r2, #0]
}
 80069e6:	4770      	bx	lr
 80069e8:	2000789c 	.word	0x2000789c
 80069ec:	20007898 	.word	0x20007898

080069f0 <_nx_packet_release>:
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d05c      	beq.n	8006aae <_nx_packet_release+0xbe>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 80069f4:	6a02      	ldr	r2, [r0, #32]
 80069f6:	4603      	mov	r3, r0
 80069f8:	f1b2 3faa 	cmp.w	r2, #2863311530	; 0xaaaaaaaa
 80069fc:	d159      	bne.n	8006ab2 <_nx_packet_release+0xc2>
{
 80069fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8006a02:	f04f 36ff 	mov.w	r6, #4294967295
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006a06:	2400      	movs	r4, #0
            _tx_thread_preempt_disable++;
 8006a08:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006ab8 <_nx_packet_release+0xc8>
 8006a0c:	e033      	b.n	8006a76 <_nx_packet_release+0x86>
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8006a0e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8006a10:	4290      	cmp	r0, r2
 8006a12:	d047      	beq.n	8006aa4 <_nx_packet_release+0xb4>
                    thread_ptr -> tx_thread_suspended_previous;
 8006a14:	6f57      	ldr	r7, [r2, #116]	; 0x74
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8006a16:	62c8      	str	r0, [r1, #44]	; 0x2c
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8006a18:	6747      	str	r7, [r0, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8006a1a:	6f57      	ldr	r7, [r2, #116]	; 0x74
 8006a1c:	6738      	str	r0, [r7, #112]	; 0x70
            pool_ptr -> nx_packet_pool_suspended_count--;
 8006a1e:	6b0f      	ldr	r7, [r1, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8006a20:	f8d8 0000 	ldr.w	r0, [r8]
            pool_ptr -> nx_packet_pool_suspended_count--;
 8006a24:	3f01      	subs	r7, #1
            _tx_thread_preempt_disable++;
 8006a26:	3001      	adds	r0, #1
            pool_ptr -> nx_packet_pool_suspended_count--;
 8006a28:	630f      	str	r7, [r1, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8006a2a:	f8c8 0000 	str.w	r0, [r8]
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006a2e:	6694      	str	r4, [r2, #104]	; 0x68
 8006a30:	f38c 8810 	msr	PRIMASK, ip
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 8006a34:	6f97      	ldr	r7, [r2, #120]	; 0x78
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8006a36:	f04f 3caa 	mov.w	ip, #2863311530	; 0xaaaaaaaa
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 8006a3a:	6919      	ldr	r1, [r3, #16]
            _tx_thread_system_resume(thread_ptr);
 8006a3c:	4610      	mov	r0, r2
            packet_ptr -> nx_packet_option_state = 0;
 8006a3e:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
            packet_ptr -> nx_packet_ip_version  =  0;
 8006a42:	861c      	strh	r4, [r3, #48]	; 0x30
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 8006a44:	4439      	add	r1, r7
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 8006a46:	f883 4032 	strb.w	r4, [r3, #50]	; 0x32
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8006a4a:	6fd7      	ldr	r7, [r2, #124]	; 0x7c
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 8006a4c:	61dc      	str	r4, [r3, #28]
            packet_ptr -> nx_packet_next        =  NX_NULL;
 8006a4e:	605c      	str	r4, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 8006a50:	619c      	str	r4, [r3, #24]
            packet_ptr -> nx_packet_length      =  0;
 8006a52:	625c      	str	r4, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8006a54:	635c      	str	r4, [r3, #52]	; 0x34
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 8006a56:	63dc      	str	r4, [r3, #60]	; 0x3c
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8006a58:	f8c3 c020 	str.w	ip, [r3, #32]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 8006a5c:	e9c3 1102 	strd	r1, r1, [r3, #8]
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8006a60:	603b      	str	r3, [r7, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8006a62:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
            _tx_thread_system_resume(thread_ptr);
 8006a66:	f016 fc23 	bl	801d2b0 <_tx_thread_system_resume>
 8006a6a:	462b      	mov	r3, r5
    while (packet_ptr)
 8006a6c:	b1bd      	cbz	r5, 8006a9e <_nx_packet_release+0xae>
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 8006a6e:	6a2a      	ldr	r2, [r5, #32]
 8006a70:	f1b2 3faa 	cmp.w	r2, #2863311530	; 0xaaaaaaaa
 8006a74:	d118      	bne.n	8006aa8 <_nx_packet_release+0xb8>
        next_packet =  packet_ptr -> nx_packet_next;
 8006a76:	685d      	ldr	r5, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a78:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006a7c:	b672      	cpsid	i
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8006a7e:	6819      	ldr	r1, [r3, #0]
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 8006a80:	6aca      	ldr	r2, [r1, #44]	; 0x2c
        if (thread_ptr)
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	d1c3      	bne.n	8006a0e <_nx_packet_release+0x1e>

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 8006a86:	688a      	ldr	r2, [r1, #8]
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8006a88:	69c8      	ldr	r0, [r1, #28]
            pool_ptr -> nx_packet_pool_available++;
 8006a8a:	3201      	adds	r2, #1
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8006a8c:	e9c3 0607 	strd	r0, r6, [r3, #28]
            pool_ptr -> nx_packet_pool_available++;
 8006a90:	608a      	str	r2, [r1, #8]
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 8006a92:	61cb      	str	r3, [r1, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a94:	f38c 8810 	msr	PRIMASK, ip
 8006a98:	462b      	mov	r3, r5
    while (packet_ptr)
 8006a9a:	2d00      	cmp	r5, #0
 8006a9c:	d1e7      	bne.n	8006a6e <_nx_packet_release+0x7e>
        packet_ptr =  next_packet;
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 8006a9e:	2000      	movs	r0, #0
}
 8006aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 8006aa4:	62cc      	str	r4, [r1, #44]	; 0x2c
 8006aa6:	e7ba      	b.n	8006a1e <_nx_packet_release+0x2e>
            return(NX_PTR_ERROR);
 8006aa8:	2007      	movs	r0, #7
}
 8006aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return(NX_SUCCESS);
 8006aae:	2000      	movs	r0, #0
 8006ab0:	4770      	bx	lr
            return(NX_PTR_ERROR);
 8006ab2:	2007      	movs	r0, #7
}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	20007a7c 	.word	0x20007a7c

08006abc <_nx_packet_transmit_release>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006abc:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006ac0:	b672      	cpsid	i
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8006ac2:	6a03      	ldr	r3, [r0, #32]
 8006ac4:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8006ac8:	d015      	beq.n	8006af6 <_nx_packet_transmit_release+0x3a>
 8006aca:	3301      	adds	r3, #1
 8006acc:	d013      	beq.n	8006af6 <_nx_packet_transmit_release+0x3a>
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8006ace:	6882      	ldr	r2, [r0, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8006ad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006ad2:	b470      	push	{r4, r5, r6}
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8006ad4:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 8006ad8:	f04f 36dd 	mov.w	r6, #3722304989	; 0xdddddddd

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 8006adc:	2400      	movs	r4, #0
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8006ade:	442a      	add	r2, r5
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8006ae0:	1b5b      	subs	r3, r3, r5
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 8006ae2:	61c6      	str	r6, [r0, #28]
        packet_ptr -> nx_packet_ip_header_length = 0;
 8006ae4:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8006ae8:	6082      	str	r2, [r0, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8006aea:	6243      	str	r3, [r0, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006aec:	f381 8810 	msr	PRIMASK, r1
        status =  _nx_packet_release(packet_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8006af0:	4620      	mov	r0, r4
 8006af2:	bc70      	pop	{r4, r5, r6}
 8006af4:	4770      	bx	lr
 8006af6:	f381 8810 	msr	PRIMASK, r1
        status =  _nx_packet_release(packet_ptr);
 8006afa:	f7ff bf79 	b.w	80069f0 <_nx_packet_release>
 8006afe:	bf00      	nop

08006b00 <_nx_rarp_packet_deferred_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006b00:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006b02:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006b06:	b672      	cpsid	i

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 8006b08:	f8d0 3c2c 	ldr.w	r3, [r0, #3116]	; 0xc2c
 8006b0c:	b1e3      	cbz	r3, 8006b48 <_nx_rarp_packet_deferred_receive+0x48>
        /* Return to caller.  */
        return;
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 8006b0e:	f8d0 2c30 	ldr.w	r2, [r0, #3120]	; 0xc30
 8006b12:	b15a      	cbz	r2, 8006b2c <_nx_rarp_packet_deferred_receive+0x2c>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8006b14:	f8d0 2c34 	ldr.w	r2, [r0, #3124]	; 0xc34
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006b18:	2300      	movs	r3, #0
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8006b1a:	61d1      	str	r1, [r2, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006b1c:	61cb      	str	r3, [r1, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8006b1e:	f8c0 1c34 	str.w	r1, [r0, #3124]	; 0xc34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b22:	f384 8810 	msr	PRIMASK, r4
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
    }
}
 8006b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b2a:	4770      	bx	lr
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 8006b2c:	f8c0 1c30 	str.w	r1, [r0, #3120]	; 0xc30
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8006b30:	f8c0 1c34 	str.w	r1, [r0, #3124]	; 0xc34
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 8006b34:	61ca      	str	r2, [r1, #28]
 8006b36:	f384 8810 	msr	PRIMASK, r4
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 8006b3a:	2120      	movs	r1, #32
 8006b3c:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
}
 8006b40:	f85d 4b04 	ldr.w	r4, [sp], #4
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 8006b44:	f015 bdf0 	b.w	801c728 <_tx_event_flags_set>
 8006b48:	f384 8810 	msr	PRIMASK, r4
        _nx_packet_release(packet_ptr);
 8006b4c:	4608      	mov	r0, r1
}
 8006b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
        _nx_packet_release(packet_ptr);
 8006b52:	f7ff bf4d 	b.w	80069f0 <_nx_packet_release>
 8006b56:	bf00      	nop

08006b58 <_nx_system_initialize>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 8006b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8006b5c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8006bc8 <_nx_system_initialize+0x70>
 8006b60:	4f10      	ldr	r7, [pc, #64]	; (8006ba4 <_nx_system_initialize+0x4c>)
 8006b62:	f8d8 3000 	ldr.w	r3, [r8]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	4e0f      	ldr	r6, [pc, #60]	; (8006ba8 <_nx_system_initialize+0x50>)
 8006b6a:	4313      	orrs	r3, r2
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8006b6c:	4d0f      	ldr	r5, [pc, #60]	; (8006bac <_nx_system_initialize+0x54>)
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8006b6e:	6831      	ldr	r1, [r6, #0]
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8006b70:	682a      	ldr	r2, [r5, #0]
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8006b72:	430b      	orrs	r3, r1
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8006b74:	4c0e      	ldr	r4, [pc, #56]	; (8006bb0 <_nx_system_initialize+0x58>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	6822      	ldr	r2, [r4, #0]
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	d110      	bne.n	8006ba0 <_nx_system_initialize+0x48>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 8006b7e:	f7ff ff2d 	bl	80069dc <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 8006b82:	f7fb fb2f 	bl	80021e4 <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 8006b86:	f000 fa83 	bl	8007090 <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 8006b8a:	4a0a      	ldr	r2, [pc, #40]	; (8006bb4 <_nx_system_initialize+0x5c>)
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <_nx_system_initialize+0x60>)
    _nx_system_build_options_1 = 0
 8006b8e:	f8c8 2000 	str.w	r2, [r8]
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 8006b92:	490a      	ldr	r1, [pc, #40]	; (8006bbc <_nx_system_initialize+0x64>)
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8006b94:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <_nx_system_initialize+0x68>)
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 8006b96:	603b      	str	r3, [r7, #0]
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <_nx_system_initialize+0x6c>)
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 8006b9a:	6031      	str	r1, [r6, #0]
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8006b9c:	602a      	str	r2, [r5, #0]
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8006b9e:	6023      	str	r3, [r4, #0]
#endif
}
 8006ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba4:	200078b0 	.word	0x200078b0
 8006ba8:	200078a8 	.word	0x200078a8
 8006bac:	200078a4 	.word	0x200078a4
 8006bb0:	200078ac 	.word	0x200078ac
 8006bb4:	801ff000 	.word	0x801ff000
 8006bb8:	0064000a 	.word	0x0064000a
 8006bbc:	050a014b 	.word	0x050a014b
 8006bc0:	1c20124a 	.word	0x1c20124a
 8006bc4:	070a0a14 	.word	0x070a0a14
 8006bc8:	200078a0 	.word	0x200078a0

08006bcc <_nx_tcp_client_socket_bind>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_client_socket_bind(NX_TCP_SOCKET *socket_ptr, UINT port, ULONG wait_option)
{
 8006bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
NX_TCP_SOCKET *search_ptr;
NX_TCP_SOCKET *end_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8006bce:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
{
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	4617      	mov	r7, r2
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_CLIENT_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006bd8:	f205 663c 	addw	r6, r5, #1596	; 0x63c
{
 8006bdc:	9103      	str	r1, [sp, #12]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006bde:	f04f 31ff 	mov.w	r1, #4294967295
 8006be2:	4630      	mov	r0, r6
 8006be4:	f015 ff88 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_tcp_socket_bound_next) ||
 8006be8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8006bec:	b913      	cbnz	r3, 8006bf4 <_nx_tcp_client_socket_bind+0x28>
 8006bee:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006bf2:	b12b      	cbz	r3, 8006c00 <_nx_tcp_client_socket_bind+0x34>
        (socket_ptr -> nx_tcp_socket_bind_in_progress))
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f016 f869 	bl	801cccc <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 8006bfa:	2022      	movs	r0, #34	; 0x22
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));

        /* Return the port unavailable error.  */
        return(NX_PORT_UNAVAILABLE);
    }
}
 8006bfc:	b005      	add	sp, #20
 8006bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (port == NX_ANY_PORT)
 8006c00:	9903      	ldr	r1, [sp, #12]
 8006c02:	b361      	cbz	r1, 8006c5e <_nx_tcp_client_socket_bind+0x92>
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 8006c04:	eb01 2311 	add.w	r3, r1, r1, lsr #8
    socket_ptr -> nx_tcp_socket_port =  port;
 8006c08:	60e1      	str	r1, [r4, #12]
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    search_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 8006c12:	f8d5 0934 	ldr.w	r0, [r5, #2356]	; 0x934
    if (search_ptr)
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d050      	beq.n	8006cbc <_nx_tcp_client_socket_bind+0xf0>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	e003      	b.n	8006c26 <_nx_tcp_client_socket_bind+0x5a>
            search_ptr =  search_ptr -> nx_tcp_socket_bound_next;
 8006c1e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
        } while (search_ptr != end_ptr);
 8006c22:	4290      	cmp	r0, r2
 8006c24:	d030      	beq.n	8006c88 <_nx_tcp_client_socket_bind+0xbc>
            if (search_ptr -> nx_tcp_socket_port == port)
 8006c26:	68d3      	ldr	r3, [r2, #12]
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	d1f8      	bne.n	8006c1e <_nx_tcp_client_socket_bind+0x52>
    else if (wait_option)
 8006c2c:	2f00      	cmp	r7, #0
 8006c2e:	d04d      	beq.n	8006ccc <_nx_tcp_client_socket_bind+0x100>
        search_ptr -> nx_tcp_socket_bind_suspended_count++;
 8006c30:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
        _nx_tcp_socket_thread_suspend(&(search_ptr -> nx_tcp_socket_bind_suspension_list), _nx_tcp_client_bind_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8006c34:	4633      	mov	r3, r6
        socket_ptr -> nx_tcp_socket_bind_in_progress =  _tx_thread_current_ptr;
 8006c36:	4e2a      	ldr	r6, [pc, #168]	; (8006ce0 <_nx_tcp_client_socket_bind+0x114>)
        _nx_tcp_socket_thread_suspend(&(search_ptr -> nx_tcp_socket_bind_suspension_list), _nx_tcp_client_bind_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8006c38:	f502 7088 	add.w	r0, r2, #272	; 0x110
        search_ptr -> nx_tcp_socket_bind_suspended_count++;
 8006c3c:	3101      	adds	r1, #1
        socket_ptr -> nx_tcp_socket_bind_in_progress =  _tx_thread_current_ptr;
 8006c3e:	6835      	ldr	r5, [r6, #0]
        search_ptr -> nx_tcp_socket_bind_suspended_count++;
 8006c40:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
        socket_ptr -> nx_tcp_socket_bound_previous =  search_ptr;
 8006c44:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
        _nx_tcp_socket_thread_suspend(&(search_ptr -> nx_tcp_socket_bind_suspension_list), _nx_tcp_client_bind_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8006c48:	4622      	mov	r2, r4
 8006c4a:	9700      	str	r7, [sp, #0]
 8006c4c:	4925      	ldr	r1, [pc, #148]	; (8006ce4 <_nx_tcp_client_socket_bind+0x118>)
        socket_ptr -> nx_tcp_socket_bind_in_progress =  _tx_thread_current_ptr;
 8006c4e:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
        _nx_tcp_socket_thread_suspend(&(search_ptr -> nx_tcp_socket_bind_suspension_list), _nx_tcp_client_bind_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8006c52:	f001 fd3b 	bl	80086cc <_nx_tcp_socket_thread_suspend>
        return(_tx_thread_current_ptr -> tx_thread_suspend_status);
 8006c56:	6833      	ldr	r3, [r6, #0]
 8006c58:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8006c5c:	e7ce      	b.n	8006bfc <_nx_tcp_client_socket_bind+0x30>
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8006c5e:	f017 fd21 	bl	801e6a4 <rand>
 8006c62:	4601      	mov	r1, r0
 8006c64:	aa04      	add	r2, sp, #16
        if (_nx_tcp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8006c66:	4628      	mov	r0, r5
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8006c68:	424b      	negs	r3, r1
 8006c6a:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8006c6e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006c72:	bf58      	it	pl
 8006c74:	4259      	negpl	r1, r3
 8006c76:	f501 4140 	add.w	r1, r1, #49152	; 0xc000
 8006c7a:	f842 1d04 	str.w	r1, [r2, #-4]!
        if (_nx_tcp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8006c7e:	f000 f9cd 	bl	800701c <_nx_tcp_free_port_find>
 8006c82:	bb40      	cbnz	r0, 8006cd6 <_nx_tcp_client_socket_bind+0x10a>
 8006c84:	9903      	ldr	r1, [sp, #12]
 8006c86:	e7bd      	b.n	8006c04 <_nx_tcp_client_socket_bind+0x38>
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_tcp_socket_port != port))
 8006c88:	68c3      	ldr	r3, [r0, #12]
 8006c8a:	428b      	cmp	r3, r1
 8006c8c:	d0ce      	beq.n	8006c2c <_nx_tcp_client_socket_bind+0x60>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c8e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c92:	b672      	cpsid	i
                ip_ptr -> nx_ip_tcp_port_table[index];
 8006c94:	f8d5 3934 	ldr.w	r3, [r5, #2356]	; 0x934
                (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 8006c98:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
            socket_ptr -> nx_tcp_socket_bound_previous =
 8006c9c:	e9c4 313b 	strd	r3, r1, [r4, #236]	; 0xec
            ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 8006ca0:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8006ca4:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous =   socket_ptr;
 8006ca8:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006cac:	f382 8810 	msr	PRIMASK, r2
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f016 f80b 	bl	801cccc <_tx_mutex_put>
        return(NX_SUCCESS);
 8006cb6:	2000      	movs	r0, #0
}
 8006cb8:	b005      	add	sp, #20
 8006cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006cbc:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006cc0:	b672      	cpsid	i
            socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 8006cc2:	e9c4 443b 	strd	r4, r4, [r4, #236]	; 0xec
            ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 8006cc6:	f8c5 4934 	str.w	r4, [r5, #2356]	; 0x934
 8006cca:	e7ef      	b.n	8006cac <_nx_tcp_client_socket_bind+0xe0>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f015 fffd 	bl	801cccc <_tx_mutex_put>
        return(NX_PORT_UNAVAILABLE);
 8006cd2:	2023      	movs	r0, #35	; 0x23
 8006cd4:	e792      	b.n	8006bfc <_nx_tcp_client_socket_bind+0x30>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f015 fff8 	bl	801cccc <_tx_mutex_put>
            return(NX_NO_FREE_PORTS);
 8006cdc:	2045      	movs	r0, #69	; 0x45
 8006cde:	e78d      	b.n	8006bfc <_nx_tcp_client_socket_bind+0x30>
 8006ce0:	20007a80 	.word	0x20007a80
 8006ce4:	08012c65 	.word	0x08012c65

08006ce8 <_nx_tcp_client_socket_unbind>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_client_socket_unbind(NX_TCP_SOCKET *socket_ptr)
{
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
NX_IP         *ip_ptr;
NX_TCP_SOCKET *new_socket_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8006cec:	f8d0 70ac 	ldr.w	r7, [r0, #172]	; 0xac
{
 8006cf0:	4604      	mov	r4, r0
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_CLIENT_SOCKET_UNBIND, ip_ptr, socket_ptr, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf6:	f207 663c 	addw	r6, r7, #1596	; 0x63c
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f015 fefc 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket is still in the timed wait state.  */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 8006d00:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006d02:	2a0a      	cmp	r2, #10
 8006d04:	d06b      	beq.n	8006dde <_nx_tcp_client_socket_unbind+0xf6>
        /* Cleanup the transmission control block.  */
        _nx_tcp_socket_block_cleanup(socket_ptr);
    }

    /* Determine if the socket is still in the closed state.  */
    if (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED)
 8006d06:	2a01      	cmp	r2, #1
 8006d08:	d163      	bne.n	8006dd2 <_nx_tcp_client_socket_unbind+0xea>
        /* Return an error code.  */
        return(NX_NOT_CLOSED);
    }

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_tcp_socket_bound_next)
 8006d0a:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	d053      	beq.n	8006dba <_nx_tcp_client_socket_unbind+0xd2>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other TCP socket bind requests that are queued.  */

    /* Pickup the port number in the TCP socket structure.  */
    port =  socket_ptr -> nx_tcp_socket_port;
 8006d12:	68e2      	ldr	r2, [r4, #12]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 8006d14:	eb02 2212 	add.w	r2, r2, r2, lsr #8
 8006d18:	f002 051f 	and.w	r5, r2, #31
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006d1c:	f3ef 8810 	mrs	r8, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006d20:	b672      	cpsid	i
    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE

    /* The socket is off the bound list...  we need to check for queued receive packets and
       if found they need to be released.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 8006d22:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d15e      	bne.n	8006de8 <_nx_tcp_client_socket_unbind+0x100>
        /* Remove all packets on the socket's receive queue.  */
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
    }

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_tcp_socket_bound_next == socket_ptr)
 8006d2a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	d061      	beq.n	8006df6 <_nx_tcp_client_socket_unbind+0x10e>
 8006d32:	eb07 0285 	add.w	r2, r7, r5, lsl #2

        /* Relink the neighbors of this TCP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_tcp_socket_bound_next) -> nx_tcp_socket_bound_previous =
            socket_ptr -> nx_tcp_socket_bound_previous;
 8006d36:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
        (socket_ptr -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
            socket_ptr -> nx_tcp_socket_bound_next;

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_tcp_port_table[index] == socket_ptr)
 8006d3a:	f8d2 0934 	ldr.w	r0, [r2, #2356]	; 0x934
        (socket_ptr -> nx_tcp_socket_bound_next) -> nx_tcp_socket_bound_previous =
 8006d3e:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
        if (ip_ptr -> nx_ip_tcp_port_table[index] == socket_ptr)
 8006d42:	42a0      	cmp	r0, r4
        (socket_ptr -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 8006d44:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 8006d48:	f8c1 30ec 	str.w	r3, [r1, #236]	; 0xec
        if (ip_ptr -> nx_ip_tcp_port_table[index] == socket_ptr)
 8006d4c:	d061      	beq.n	8006e12 <_nx_tcp_client_socket_unbind+0x12a>
            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_tcp_port_table[index] =  socket_ptr -> nx_tcp_socket_bound_next;
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_tcp_socket_bound_next =  NX_NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d54:	f388 8810 	msr	PRIMASK, r8
    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    if (socket_ptr -> nx_tcp_socket_bind_suspension_list)
 8006d58:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8006d5c:	b33b      	cbz	r3, 8006dae <_nx_tcp_client_socket_unbind+0xc6>

        /* Inherit the suspension list from the previously bound socket.  Decrement the suspension count
           early since this thread will be resumed and removed from the list later.  */
        new_socket_ptr -> nx_tcp_socket_bind_suspension_list =
            socket_ptr -> nx_tcp_socket_bind_suspension_list;
        new_socket_ptr -> nx_tcp_socket_bind_suspended_count =   socket_ptr -> nx_tcp_socket_bind_suspended_count - 1;
 8006d5e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
        new_socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 8006d62:	2200      	movs	r2, #0
        new_socket_ptr =  (NX_TCP_SOCKET *)(socket_ptr -> nx_tcp_socket_bind_suspension_list) -> tx_thread_suspend_control_block;
 8006d64:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
        new_socket_ptr -> nx_tcp_socket_bind_suspended_count =   socket_ptr -> nx_tcp_socket_bind_suspended_count - 1;
 8006d66:	3901      	subs	r1, #1
        new_socket_ptr -> nx_tcp_socket_bind_suspension_list =
 8006d68:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
        new_socket_ptr -> nx_tcp_socket_bind_suspended_count =   socket_ptr -> nx_tcp_socket_bind_suspended_count - 1;
 8006d6c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
        new_socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 8006d70:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4

        /* Clear the original socket's information.  */
        socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 8006d74:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
        socket_ptr -> nx_tcp_socket_bind_suspended_count =  0;
 8006d78:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006d7c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006d80:	b672      	cpsid	i
 8006d82:	eb07 0385 	add.w	r3, r7, r5, lsl #2

        /* Disable interrupts.  */
        TX_DISABLE

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_tcp_port_table[index])
 8006d86:	f8d3 2934 	ldr.w	r2, [r3, #2356]	; 0x934
 8006d8a:	b3ea      	cbz	r2, 8006e08 <_nx_tcp_client_socket_unbind+0x120>
            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_tcp_socket_bound_next =
                ip_ptr -> nx_ip_tcp_port_table[index];
            new_socket_ptr -> nx_tcp_socket_bound_previous =
                (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 8006d8c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
            new_socket_ptr -> nx_tcp_socket_bound_previous =
 8006d90:	e9c0 233b 	strd	r2, r3, [r0, #236]	; 0xec
            ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 8006d94:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8006d98:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
                new_socket_ptr;
            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous =   new_socket_ptr;
 8006d9c:	f8c2 00f0 	str.w	r0, [r2, #240]	; 0xf0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006da0:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread suspended on the bind call.  */
        _nx_tcp_socket_thread_resume(&(new_socket_ptr -> nx_tcp_socket_bind_suspension_list), NX_SUCCESS);
 8006da4:	2100      	movs	r1, #0
 8006da6:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8006daa:	f001 fc69 	bl	8008680 <_nx_tcp_socket_thread_resume>
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006dae:	4630      	mov	r0, r6
 8006db0:	f015 ff8c 	bl	801cccc <_tx_mutex_put>

    /* Return success.  */
    return(NX_SUCCESS);
 8006db4:	2000      	movs	r0, #0
}
 8006db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (socket_ptr -> nx_tcp_socket_bind_in_progress)
 8006dba:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8006dbe:	b368      	cbz	r0, 8006e1c <_nx_tcp_client_socket_unbind+0x134>
            _nx_tcp_client_bind_cleanup(socket_ptr -> nx_tcp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f00b ff4f 	bl	8012c64 <_nx_tcp_client_bind_cleanup>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f015 ff80 	bl	801cccc <_tx_mutex_put>
            return(NX_SUCCESS);
 8006dcc:	4628      	mov	r0, r5
}
 8006dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f015 ff7a 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_CLOSED);
 8006dd8:	2035      	movs	r0, #53	; 0x35
}
 8006dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _nx_tcp_socket_block_cleanup(socket_ptr);
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 fcd0 	bl	8007784 <_nx_tcp_socket_block_cleanup>
 8006de4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006de6:	e78e      	b.n	8006d06 <_nx_tcp_client_socket_unbind+0x1e>
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 ff69 	bl	8007cc0 <_nx_tcp_socket_receive_queue_flush>
    if (socket_ptr -> nx_tcp_socket_bound_next == socket_ptr)
 8006dee:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8006df2:	42a3      	cmp	r3, r4
 8006df4:	d19d      	bne.n	8006d32 <_nx_tcp_client_socket_unbind+0x4a>
        ip_ptr -> nx_ip_tcp_port_table[index] =   NX_NULL;
 8006df6:	f505 7313 	add.w	r3, r5, #588	; 0x24c
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006e00:	605a      	str	r2, [r3, #4]
        socket_ptr -> nx_tcp_socket_bound_next =  NX_NULL;
 8006e02:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8006e06:	e7a5      	b.n	8006d54 <_nx_tcp_client_socket_unbind+0x6c>
            new_socket_ptr -> nx_tcp_socket_bound_previous =  new_socket_ptr;
 8006e08:	e9c0 003b 	strd	r0, r0, [r0, #236]	; 0xec
            ip_ptr -> nx_ip_tcp_port_table[index] =           new_socket_ptr;
 8006e0c:	f8c3 0934 	str.w	r0, [r3, #2356]	; 0x934
 8006e10:	e7c6      	b.n	8006da0 <_nx_tcp_client_socket_unbind+0xb8>
            ip_ptr -> nx_ip_tcp_port_table[index] =  socket_ptr -> nx_tcp_socket_bound_next;
 8006e12:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8006e16:	f8c2 3934 	str.w	r3, [r2, #2356]	; 0x934
 8006e1a:	e798      	b.n	8006d4e <_nx_tcp_client_socket_unbind+0x66>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f015 ff55 	bl	801cccc <_tx_mutex_put>
            return(NX_NOT_BOUND);
 8006e22:	2024      	movs	r0, #36	; 0x24
 8006e24:	e7c7      	b.n	8006db6 <_nx_tcp_client_socket_unbind+0xce>
 8006e26:	bf00      	nop

08006e28 <_nx_tcp_enable>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_enable(NX_IP *ip_ptr)
{
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Loop through the listen requests and link them on the available list.  */
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
    {

        /* Link listen request to next listen request.  */
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8006e2a:	f600 13fc 	addw	r3, r0, #2556	; 0x9fc
 8006e2e:	f500 6122 	add.w	r1, r0, #2592	; 0xa20
    listen_ptr =  &(ip_ptr -> nx_ip_tcp_server_listen_reqs[0]);
 8006e32:	f600 17d8 	addw	r7, r0, #2520	; 0x9d8

    /* Make sure the last listen request has a NULL pointer.  */
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;

    /* Set the TCP packet queue processing function.  */
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 8006e36:	4e23      	ldr	r6, [pc, #140]	; (8006ec4 <_nx_tcp_enable+0x9c>)
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8006e38:	f8c0 39f4 	str.w	r3, [r0, #2548]	; 0x9f4
 8006e3c:	f600 238c 	addw	r3, r0, #2700	; 0xa8c
 8006e40:	f8c0 1a18 	str.w	r1, [r0, #2584]	; 0xa18
 8006e44:	f600 2168 	addw	r1, r0, #2664	; 0xa68
 8006e48:	f8c0 3a84 	str.w	r3, [r0, #2692]	; 0xa84
 8006e4c:	f600 23d4 	addw	r3, r0, #2772	; 0xad4
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 8006e50:	f8c0 7b40 	str.w	r7, [r0, #2880]	; 0xb40
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8006e54:	f600 2744 	addw	r7, r0, #2628	; 0xa44
 8006e58:	f8c0 3acc 	str.w	r3, [r0, #2764]	; 0xacc
 8006e5c:	f600 331c 	addw	r3, r0, #2844	; 0xb1c
 8006e60:	f8c0 1a60 	str.w	r1, [r0, #2656]	; 0xa60
 8006e64:	f500 612b 	add.w	r1, r0, #2736	; 0xab0
 8006e68:	f8c0 3b14 	str.w	r3, [r0, #2836]	; 0xb14
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 8006e6c:	2500      	movs	r5, #0

    /* Set the TCP periodic processing function.  */
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;

    /* Set the TCP fast periodic processing function.  */
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 8006e6e:	4b16      	ldr	r3, [pc, #88]	; (8006ec8 <_nx_tcp_enable+0xa0>)
{
 8006e70:	4604      	mov	r4, r0
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8006e72:	f8c0 7a3c 	str.w	r7, [r0, #2620]	; 0xa3c

    /* Set the TCP deferred cleanup check function.  */
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;

    /* Setup base timer variables.  */
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 8006e76:	270a      	movs	r7, #10
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 8006e78:	f8c0 39c4 	str.w	r3, [r0, #2500]	; 0x9c4
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 8006e7c:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <_nx_tcp_enable+0xa4>)
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8006e7e:	f8c0 1aa8 	str.w	r1, [r0, #2728]	; 0xaa8
 8006e82:	f600 21f8 	addw	r1, r0, #2808	; 0xaf8
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 8006e86:	f8c0 3c44 	str.w	r3, [r0, #3140]	; 0xc44
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 8006e8a:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <_nx_tcp_enable+0xa8>)
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8006e8c:	f8c0 1af0 	str.w	r1, [r0, #2800]	; 0xaf0
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 8006e90:	2114      	movs	r1, #20
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 8006e92:	601f      	str	r7, [r3, #0]
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 8006e94:	4a0f      	ldr	r2, [pc, #60]	; (8006ed4 <_nx_tcp_enable+0xac>)
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 8006e96:	4b10      	ldr	r3, [pc, #64]	; (8006ed8 <_nx_tcp_enable+0xb0>)
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 8006e98:	f8c0 69c8 	str.w	r6, [r0, #2504]	; 0x9c8

    /*lint -e{778} suppress constant expression, since NX_TCP_TRANSMIT_TIMER_RATE can be redefined. */
    /*lint -e{835} -e{845} suppress operating on zero. */
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 8006e9c:	2664      	movs	r6, #100	; 0x64
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 8006e9e:	6019      	str	r1, [r3, #0]
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 8006ea0:	f8c0 29c0 	str.w	r2, [r0, #2496]	; 0x9c0

    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 8006ea4:	f645 52c0 	movw	r2, #24000	; 0x5dc0
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 8006ea8:	490c      	ldr	r1, [pc, #48]	; (8006edc <_nx_tcp_enable+0xb4>)
    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <_nx_tcp_enable+0xb8>)
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 8006eac:	f8c0 5b38 	str.w	r5, [r0, #2872]	; 0xb38
    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 8006eb0:	601a      	str	r2, [r3, #0]
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 8006eb2:	600e      	str	r6, [r1, #0]

    _nx_ip_fast_periodic_timer_create(ip_ptr);
 8006eb4:	f00a fa14 	bl	80112e0 <_nx_ip_fast_periodic_timer_create>

    /* Set the TCP packet receive function in the IP structure to indicate
       we are ready to receive TCP packets.  */
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 8006eb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <_nx_tcp_enable+0xbc>)

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 8006eba:	4628      	mov	r0, r5
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 8006ebc:	f8c4 39bc 	str.w	r3, [r4, #2492]	; 0x9bc
}
 8006ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	080073cd 	.word	0x080073cd
 8006ec8:	08006ee9 	.word	0x08006ee9
 8006ecc:	08012dd5 	.word	0x08012dd5
 8006ed0:	200078b4 	.word	0x200078b4
 8006ed4:	080073c9 	.word	0x080073c9
 8006ed8:	200078c0 	.word	0x200078c0
 8006edc:	200078b8 	.word	0x200078b8
 8006ee0:	200078bc 	.word	0x200078bc
 8006ee4:	08007095 	.word	0x08007095

08006ee8 <_nx_tcp_fast_periodic_processing>:
ULONG          sockets;
ULONG          timer_rate;


    /* Pickup this timer's periodic rate.  */
    timer_rate =  _nx_tcp_fast_timer_rate;
 8006ee8:	4a4b      	ldr	r2, [pc, #300]	; (8007018 <_nx_tcp_fast_periodic_processing+0x130>)

    /* Pickup the number of created TCP sockets.  */
    sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 8006eea:	f8d0 39b8 	ldr.w	r3, [r0, #2488]	; 0x9b8
{
 8006eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Pickup the first socket.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 8006ef2:	f8d0 49b4 	ldr.w	r4, [r0, #2484]	; 0x9b4
    timer_rate =  _nx_tcp_fast_timer_rate;
 8006ef6:	f8d2 8000 	ldr.w	r8, [r2]

    /* Loop through the created sockets.  */
    while (sockets--)
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d046      	beq.n	8006f8c <_nx_tcp_fast_periodic_processing+0xa4>
 8006efe:	1e5d      	subs	r5, r3, #1
 8006f00:	4606      	mov	r6, r0

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;

                /* Retransmit the packet. */
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 8006f02:	2700      	movs	r7, #0
 8006f04:	e008      	b.n	8006f18 <_nx_tcp_fast_periodic_processing+0x30>
                socket_ptr -> nx_tcp_socket_timeout -= timer_rate;
 8006f06:	eba3 0308 	sub.w	r3, r3, r8
 8006f0a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    while (sockets--)
 8006f0e:	3d01      	subs	r5, #1
                _nx_tcp_socket_block_cleanup(socket_ptr);
            }
        }

        /* Move to the next TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8006f10:	f8d4 4118 	ldr.w	r4, [r4, #280]	; 0x118
    while (sockets--)
 8006f14:	1c6b      	adds	r3, r5, #1
 8006f16:	d039      	beq.n	8006f8c <_nx_tcp_fast_periodic_processing+0xa4>
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 8006f18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d909      	bls.n	8006f32 <_nx_tcp_fast_periodic_processing+0x4a>
 8006f1e:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d038      	beq.n	8006f98 <_nx_tcp_fast_periodic_processing+0xb0>
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 8006f26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f28:	4543      	cmp	r3, r8
 8006f2a:	d93c      	bls.n	8006fa6 <_nx_tcp_fast_periodic_processing+0xbe>
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout -= timer_rate;
 8006f2c:	eba3 0308 	sub.w	r3, r3, r8
 8006f30:	6563      	str	r3, [r4, #84]	; 0x54
        if (socket_ptr -> nx_tcp_socket_timeout)
 8006f32:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0e9      	beq.n	8006f0e <_nx_tcp_fast_periodic_processing+0x26>
            if (socket_ptr -> nx_tcp_socket_timeout > timer_rate)
 8006f3a:	4543      	cmp	r3, r8
 8006f3c:	d8e3      	bhi.n	8006f06 <_nx_tcp_fast_periodic_processing+0x1e>
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8006f3e:	e9d4 3238 	ldrd	r3, r2, [r4, #224]	; 0xe0
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d302      	bcc.n	8006f4c <_nx_tcp_fast_periodic_processing+0x64>
 8006f46:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 8006f4a:	b309      	cbz	r1, 8006f90 <_nx_tcp_fast_periodic_processing+0xa8>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 8006f4c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8006f50:	428a      	cmp	r2, r1
 8006f52:	d803      	bhi.n	8006f5c <_nx_tcp_fast_periodic_processing+0x74>
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8006f54:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
 8006f58:	2a01      	cmp	r2, #1
 8006f5a:	d019      	beq.n	8006f90 <_nx_tcp_fast_periodic_processing+0xa8>
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 8006f5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006f5e:	1ed1      	subs	r1, r2, #3
 8006f60:	2901      	cmp	r1, #1
 8006f62:	d947      	bls.n	8006ff4 <_nx_tcp_fast_periodic_processing+0x10c>
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 8006f64:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8006f68:	b311      	cbz	r1, 8006fb0 <_nx_tcp_fast_periodic_processing+0xc8>
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8006f6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4630      	mov	r0, r6
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8006f72:	3b01      	subs	r3, #1
    while (sockets--)
 8006f74:	3d01      	subs	r5, #1
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8006f76:	66e3      	str	r3, [r4, #108]	; 0x6c
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 8006f78:	f000 febc 	bl	8007cf4 <_nx_tcp_socket_retransmit>
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 8006f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
                socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 8006f7e:	f884 70aa 	strb.w	r7, [r4, #170]	; 0xaa
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 8006f82:	6663      	str	r3, [r4, #100]	; 0x64
    while (sockets--)
 8006f84:	1c6b      	adds	r3, r5, #1
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8006f86:	f8d4 4118 	ldr.w	r4, [r4, #280]	; 0x118
    while (sockets--)
 8006f8a:	d1c5      	bne.n	8006f18 <_nx_tcp_fast_periodic_processing+0x30>
    }
}
 8006f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                _nx_tcp_socket_connection_reset(socket_ptr);
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fc0d 	bl	80077b0 <_nx_tcp_socket_connection_reset>
 8006f96:	e7ba      	b.n	8006f0e <_nx_tcp_fast_periodic_processing+0x26>
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 8006f98:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d2c8      	bcs.n	8006f32 <_nx_tcp_fast_periodic_processing+0x4a>
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 8006fa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006fa2:	4543      	cmp	r3, r8
 8006fa4:	d8c2      	bhi.n	8006f2c <_nx_tcp_fast_periodic_processing+0x44>
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8006fa6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 f8ad 	bl	8007108 <_nx_tcp_packet_send_ack>
 8006fae:	e7c0      	b.n	8006f32 <_nx_tcp_fast_periodic_processing+0x4a>
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 8006fb0:	6e21      	ldr	r1, [r4, #96]	; 0x60
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 8006fb2:	b909      	cbnz	r1, 8006fb8 <_nx_tcp_fast_periodic_processing+0xd0>
 8006fb4:	2a06      	cmp	r2, #6
 8006fb6:	d9d8      	bls.n	8006f6a <_nx_tcp_fast_periodic_processing+0x82>
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 8006fb8:	f022 0102 	bic.w	r1, r2, #2
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 8006fbc:	2909      	cmp	r1, #9
 8006fbe:	d007      	beq.n	8006fd0 <_nx_tcp_fast_periodic_processing+0xe8>
 8006fc0:	2a07      	cmp	r2, #7
 8006fc2:	d005      	beq.n	8006fd0 <_nx_tcp_fast_periodic_processing+0xe8>
            else if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 8006fc4:	2a0a      	cmp	r2, #10
 8006fc6:	d1a2      	bne.n	8006f0e <_nx_tcp_fast_periodic_processing+0x26>
                _nx_tcp_socket_block_cleanup(socket_ptr);
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 fbdb 	bl	8007784 <_nx_tcp_socket_block_cleanup>
 8006fce:	e79e      	b.n	8006f0e <_nx_tcp_fast_periodic_processing+0x26>
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 8006fd0:	3301      	adds	r3, #1
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8006fd2:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8006fd6:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8006fda:	fb01 f003 	mul.w	r0, r1, r3
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8006fde:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 8006fe0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8006fe4:	4082      	lsls	r2, r0
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8006fe6:	3901      	subs	r1, #1
 8006fe8:	4620      	mov	r0, r4
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8006fea:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8006fee:	f000 f989 	bl	8007304 <_nx_tcp_packet_send_fin>
 8006ff2:	e78c      	b.n	8006f0e <_nx_tcp_fast_periodic_processing+0x26>
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 8006ff4:	3301      	adds	r3, #1
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8006ff6:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8006ffa:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8006ffe:	fb01 f003 	mul.w	r0, r1, r3
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8007002:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 8007004:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8007008:	4082      	lsls	r2, r0
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800700a:	3901      	subs	r1, #1
 800700c:	4620      	mov	r0, r4
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800700e:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8007012:	f000 f985 	bl	8007320 <_nx_tcp_packet_send_syn>
 8007016:	e77a      	b.n	8006f0e <_nx_tcp_fast_periodic_processing+0x26>
 8007018:	200078b4 	.word	0x200078b4

0800701c <_nx_tcp_free_port_find>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007020:	4606      	mov	r6, r0
 8007022:	460f      	mov	r7, r1
 8007024:	4690      	mov	r8, r2
 8007026:	f200 653c 	addw	r5, r0, #1596	; 0x63c
        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800702a:	460c      	mov	r4, r1
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800702c:	f04f 31ff 	mov.w	r1, #4294967295
 8007030:	4628      	mov	r0, r5
 8007032:	f015 fd61 	bl	801caf8 <_tx_mutex_get>
        index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 8007036:	eb04 2314 	add.w	r3, r4, r4, lsr #8
 800703a:	f003 031f 	and.w	r3, r3, #31
        search_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 800703e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007042:	f8d3 1934 	ldr.w	r1, [r3, #2356]	; 0x934
        if (search_ptr)
 8007046:	b1a9      	cbz	r1, 8007074 <_nx_tcp_free_port_find+0x58>
 8007048:	460b      	mov	r3, r1
 800704a:	e003      	b.n	8007054 <_nx_tcp_free_port_find+0x38>
                search_ptr =  search_ptr -> nx_tcp_socket_bound_next;
 800704c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
            } while (search_ptr != end_ptr);
 8007050:	4299      	cmp	r1, r3
 8007052:	d00f      	beq.n	8007074 <_nx_tcp_free_port_find+0x58>
                if (search_ptr -> nx_tcp_socket_port == port)
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	42a2      	cmp	r2, r4
 8007058:	d1f8      	bne.n	800704c <_nx_tcp_free_port_find+0x30>
        port++;
 800705a:	3401      	adds	r4, #1
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800705c:	4628      	mov	r0, r5
 800705e:	f015 fe35 	bl	801cccc <_tx_mutex_put>
        if (port > NX_MAX_PORT)
 8007062:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8007066:	d30d      	bcc.n	8007084 <_nx_tcp_free_port_find+0x68>
        }
    } while (starting_port != port);
 8007068:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 800706c:	d00c      	beq.n	8007088 <_nx_tcp_free_port_find+0x6c>
            port =  NX_SEARCH_PORT_START;
 800706e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
 8007072:	e7db      	b.n	800702c <_nx_tcp_free_port_find+0x10>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007074:	4628      	mov	r0, r5
 8007076:	f015 fe29 	bl	801cccc <_tx_mutex_put>
            *free_port_ptr =  port;
 800707a:	f8c8 4000 	str.w	r4, [r8]
            return(NX_SUCCESS);
 800707e:	2000      	movs	r0, #0

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
}
 8007080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } while (starting_port != port);
 8007084:	42a7      	cmp	r7, r4
 8007086:	d1d1      	bne.n	800702c <_nx_tcp_free_port_find+0x10>
    return(NX_NO_FREE_PORTS);
 8007088:	2045      	movs	r0, #69	; 0x45
}
 800708a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800708e:	bf00      	nop

08007090 <_nx_tcp_initialize>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop

08007094 <_nx_tcp_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007094:	b430      	push	{r4, r5}
 8007096:	4603      	mov	r3, r0
 8007098:	460a      	mov	r2, r1
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800709a:	f3ef 8405 	mrs	r4, IPSR
        return;
    }
#endif

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800709e:	4d18      	ldr	r5, [pc, #96]	; (8007100 <_nx_tcp_packet_receive+0x6c>)
 80070a0:	682d      	ldr	r5, [r5, #0]
 80070a2:	432c      	orrs	r4, r5
 80070a4:	d105      	bne.n	80070b2 <_nx_tcp_packet_receive+0x1e>
 80070a6:	4d17      	ldr	r5, [pc, #92]	; (8007104 <_nx_tcp_packet_receive+0x70>)
 80070a8:	f500 64d3 	add.w	r4, r0, #1688	; 0x698
 80070ac:	682d      	ldr	r5, [r5, #0]
 80070ae:	42a5      	cmp	r5, r4
 80070b0:	d023      	beq.n	80070fa <_nx_tcp_packet_receive+0x66>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80070b2:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80070b6:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Add the packet to the TCP message queue.  */
        if (ip_ptr -> nx_ip_tcp_queue_head)
 80070b8:	f8d3 19cc 	ldr.w	r1, [r3, #2508]	; 0x9cc
 80070bc:	b1a1      	cbz	r1, 80070e8 <_nx_tcp_packet_receive+0x54>
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;

            /* Increment the count of incoming TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 80070be:	f8d3 19d4 	ldr.w	r1, [r3, #2516]	; 0x9d4
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 80070c2:	2400      	movs	r4, #0
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 80070c4:	f8d3 59d0 	ldr.w	r5, [r3, #2512]	; 0x9d0
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 80070c8:	3101      	adds	r1, #1
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 80070ca:	61ea      	str	r2, [r5, #28]
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
 80070cc:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 80070d0:	61d4      	str	r4, [r2, #28]
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 80070d2:	f8c3 19d4 	str.w	r1, [r3, #2516]	; 0x9d4
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80070d6:	f380 8810 	msr	PRIMASK, r0

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the TCP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 80070da:	2200      	movs	r2, #0
 80070dc:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 80070e0:	2180      	movs	r1, #128	; 0x80

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the TCP processing directly.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
    }
}
 80070e2:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 80070e4:	f015 bb20 	b.w	801c728 <_tx_event_flags_set>
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 80070e8:	2401      	movs	r4, #1
            ip_ptr -> nx_ip_tcp_queue_head =        packet_ptr;
 80070ea:	f8c3 29cc 	str.w	r2, [r3, #2508]	; 0x9cc
            ip_ptr -> nx_ip_tcp_queue_tail =        packet_ptr;
 80070ee:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
            packet_ptr -> nx_packet_queue_next =    NX_NULL;
 80070f2:	61d1      	str	r1, [r2, #28]
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 80070f4:	f8c3 49d4 	str.w	r4, [r3, #2516]	; 0x9d4
 80070f8:	e7ed      	b.n	80070d6 <_nx_tcp_packet_receive+0x42>
}
 80070fa:	bc30      	pop	{r4, r5}
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 80070fc:	f00b bf2e 	b.w	8012f5c <_nx_tcp_packet_process>
 8007100:	200000ec 	.word	0x200000ec
 8007104:	20007a80 	.word	0x20007a80

08007108 <_nx_tcp_packet_send_ack>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_ack(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 8007108:	b530      	push	{r4, r5, lr}
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800710a:	2400      	movs	r4, #0
{
 800710c:	b085      	sub	sp, #20
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800710e:	460a      	mov	r2, r1
 8007110:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007112:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007116:	9400      	str	r4, [sp, #0]
{
 8007118:	4605      	mov	r5, r0
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800711a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800711e:	f000 f807 	bl	8007130 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8007122:	4b02      	ldr	r3, [pc, #8]	; (800712c <_nx_tcp_packet_send_ack+0x24>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	656b      	str	r3, [r5, #84]	; 0x54
}
 8007128:	b005      	add	sp, #20
 800712a:	bd30      	pop	{r4, r5, pc}
 800712c:	200078c0 	.word	0x200078c0

08007130 <_nx_tcp_packet_send_control>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_control(NX_TCP_SOCKET *socket_ptr, ULONG control_bits, ULONG tx_sequence,
                                  ULONG ack_number, ULONG option_word_1, ULONG option_word_2, UCHAR *data)
{
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	4604      	mov	r4, r0
 8007136:	b089      	sub	sp, #36	; 0x24
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8007138:	f8d0 80ac 	ldr.w	r8, [r0, #172]	; 0xac

    if (control_bits & NX_TCP_SYN_BIT)
    {

        /* Set header size. */
        header_size = NX_TCP_SYN_HEADER;
 800713c:	f411 3b00 	ands.w	fp, r1, #131072	; 0x20000
 8007140:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
{
 8007144:	460d      	mov	r5, r1
 8007146:	4691      	mov	r9, r2
 8007148:	461f      	mov	r7, r3
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {

            /*lint -e{835} -e{845} suppress operating on zero. */
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 800714a:	f04f 0238 	mov.w	r2, #56	; 0x38
 800714e:	f04f 0300 	mov.w	r3, #0
 8007152:	f8d8 0638 	ldr.w	r0, [r8, #1592]	; 0x638
 8007156:	a907      	add	r1, sp, #28
        header_size = NX_TCP_SYN_HEADER;
 8007158:	bf0c      	ite	eq
 800715a:	f04f 4aa0 	moveq.w	sl, #1342177280	; 0x50000000
 800715e:	f04f 4ae0 	movne.w	sl, #1879048192	; 0x70000000
 8007162:	9605      	str	r6, [sp, #20]
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 8007164:	f7ff fa92 	bl	800668c <_nx_packet_allocate>
 8007168:	2800      	cmp	r0, #0
 800716a:	f040 80a3 	bne.w	80072b4 <_nx_tcp_packet_send_control+0x184>
        }
    }
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Check to see if the packet has enough room to fill with the max TCP header (SYN + probe data).  */
    if ((UINT)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr) < (NX_TCP_SYN_SIZE + 1))
 800716e:	9807      	ldr	r0, [sp, #28]
 8007170:	6886      	ldr	r6, [r0, #8]
 8007172:	6943      	ldr	r3, [r0, #20]
 8007174:	1b9b      	subs	r3, r3, r6
 8007176:	2b1c      	cmp	r3, #28
 8007178:	f240 80a4 	bls.w	80072c4 <_nx_tcp_packet_send_control+0x194>
        _nx_packet_release(packet_ptr);
        return;
    }

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized in _nx_packet_allocate. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 800717c:	6963      	ldr	r3, [r4, #20]

    /* Allocate a packet for the control message.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800717e:	2b04      	cmp	r3, #4
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 8007180:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007184:	d101      	bne.n	800718a <_nx_tcp_packet_send_control+0x5a>
    {

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 8007186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007188:	6343      	str	r3, [r0, #52]	; 0x34

    /* Build the control request in the TCP header.  */
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
    tcp_header_ptr -> nx_tcp_sequence_number =      tx_sequence;
    tcp_header_ptr -> nx_tcp_acknowledgment_number = ack_number;
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 800718a:	9b05      	ldr	r3, [sp, #20]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800718c:	ea87 4137 	eor.w	r1, r7, r7, ror #16
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 8007190:	68e2      	ldr	r2, [r4, #12]
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 8007192:	f04f 0c14 	mov.w	ip, #20
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 8007196:	431d      	orrs	r5, r3
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 8007198:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800719a:	0a09      	lsrs	r1, r1, #8
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 800719c:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 80071a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 80071a4:	f106 0214 	add.w	r2, r6, #20
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 80071a8:	ea45 0a0a 	orr.w	sl, r5, sl
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 80071ac:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 80071b0:	60c2      	str	r2, [r0, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 80071b2:	ea83 4e33 	eor.w	lr, r3, r3, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 80071b6:	ea89 4239 	eor.w	r2, r9, r9, ror #16
    socket_ptr -> nx_tcp_socket_rx_sequence_acked =    ack_number;
 80071ba:	6527      	str	r7, [r4, #80]	; 0x50
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 80071bc:	ea8a 453a 	eor.w	r5, sl, sl, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 80071c0:	f04f 0c00 	mov.w	ip, #0
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 80071c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 80071c8:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 80071ca:	0a2d      	lsrs	r5, r5, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 80071cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 80071d0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 80071d4:	ea81 2137 	eor.w	r1, r1, r7, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 80071d8:	ea8e 2333 	eor.w	r3, lr, r3, ror #8
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 80071dc:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 80071e0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 80071e4:	ea82 2239 	eor.w	r2, r2, r9, ror #8
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 80071e8:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 80071ec:	ea85 253a 	eor.w	r5, r5, sl, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 80071f0:	60b1      	str	r1, [r6, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 80071f2:	f8c6 c010 	str.w	ip, [r6, #16]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 80071f6:	60f5      	str	r5, [r6, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 80071f8:	e9c6 3200 	strd	r3, r2, [r6]

    /* Check whether or not data is set. */
    if (data)
 80071fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071fe:	b143      	cbz	r3, 8007212 <_nx_tcp_packet_send_control+0xe2>
    {

        /* Zero window probe data exist. */
        *packet_ptr -> nx_packet_append_ptr++ = *data;
 8007200:	f106 0315 	add.w	r3, r6, #21
 8007204:	60c3      	str	r3, [r0, #12]
 8007206:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	7533      	strb	r3, [r6, #20]
        packet_ptr -> nx_packet_length++;
 800720c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800720e:	3301      	adds	r3, #1
 8007210:	6243      	str	r3, [r0, #36]	; 0x24
    }

    /* Whether it is a SYN packet. */
    if (control_bits & NX_TCP_SYN_BIT)
 8007212:	f1bb 0f00 	cmp.w	fp, #0
 8007216:	d01a      	beq.n	800724e <_nx_tcp_packet_send_control+0x11e>
    {

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the TCP header.  */
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 8007218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800721a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800721c:	ea83 4233 	eor.w	r2, r3, r3, ror #16
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 8007220:	9b13      	ldr	r3, [sp, #76]	; 0x4c

        /* Set options. */
        /*lint --e{927} --e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 8007222:	68c1      	ldr	r1, [r0, #12]
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 8007224:	ea83 4333 	eor.w	r3, r3, r3, ror #16
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 8007228:	0a12      	lsrs	r2, r2, #8
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 800722a:	0a1b      	lsrs	r3, r3, #8
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 800722c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 8007230:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 8007234:	ea82 2235 	eor.w	r2, r2, r5, ror #8
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 8007238:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800723a:	ea83 2335 	eor.w	r3, r3, r5, ror #8
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 800723e:	600a      	str	r2, [r1, #0]
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;

        /* Adjust packet information. */
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 8007240:	f101 0208 	add.w	r2, r1, #8
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;
 8007244:	604b      	str	r3, [r1, #4]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 8007246:	6a43      	ldr	r3, [r0, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 8007248:	60c2      	str	r2, [r0, #12]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 800724a:	3308      	adds	r3, #8
 800724c:	6243      	str	r3, [r0, #36]	; 0x24
    }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800724e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007250:	6962      	ldr	r2, [r4, #20]
 8007252:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007254:	f011 0104 	ands.w	r1, r1, #4
 8007258:	d12f      	bne.n	80072ba <_nx_tcp_packet_send_control+0x18a>
    {


        /* Set the packet source IP address. */
#ifndef NX_DISABLE_IPV4
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800725a:	2a04      	cmp	r2, #4
 800725c:	d04b      	beq.n	80072f6 <_nx_tcp_packet_send_control+0x1c6>
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 800725e:	2a06      	cmp	r2, #6
 8007260:	d14d      	bne.n	80072fe <_nx_tcp_packet_send_control+0x1ce>
        {

            /* For IPv6, use the source address specified in the socket outgoing interface. */
            source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 8007262:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 8007266:	f104 0118 	add.w	r1, r4, #24
            source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 800726a:	3308      	adds	r3, #8
        }
#endif /* FEATURE_NX_IPV6 */

        /* Calculate the TCP checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800726c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800726e:	9100      	str	r1, [sp, #0]
 8007270:	2106      	movs	r1, #6
 8007272:	f7fa fe37 	bl	8001ee4 <_nx_ip_checksum_compute>
                                            (UINT)packet_ptr -> nx_packet_length, source_ip, dest_ip);

        checksum = ~checksum & NX_LOWER_16_MASK;
 8007276:	43c0      	mvns	r0, r0
 8007278:	6962      	ldr	r2, [r4, #20]

        /* Move the checksum into header.  */
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
        tcp_header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 800727a:	0403      	lsls	r3, r0, #16
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800727c:	ea43 4033 	orr.w	r0, r3, r3, ror #16
 8007280:	0a00      	lsrs	r0, r0, #8
 8007282:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8007286:	ea80 2033 	eor.w	r0, r0, r3, ror #8
 800728a:	6130      	str	r0, [r6, #16]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

#ifndef NX_DISABLE_IPV4
    /* Send the TCP packet to the IP component.  */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800728c:	2a04      	cmp	r2, #4
 800728e:	d01e      	beq.n	80072ce <_nx_tcp_packet_send_control+0x19e>
                           socket_ptr -> nx_tcp_socket_next_hop_address);
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8007290:	2a06      	cmp	r2, #6
 8007292:	d10f      	bne.n	80072b4 <_nx_tcp_packet_send_control+0x184>
    {

        /* The IPv6 packet interface must be set before sending. Set to the TCP socket outgoing interface. */
        packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 8007294:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138

        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
                             socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8007298:	3418      	adds	r4, #24
        packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 800729a:	9907      	ldr	r1, [sp, #28]
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
 800729c:	4640      	mov	r0, r8
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
 800729e:	f103 0508 	add.w	r5, r3, #8
        packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 80072a2:	634b      	str	r3, [r1, #52]	; 0x34
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
 80072a4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80072a6:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80072aa:	f8d8 4ee8 	ldr.w	r4, [r8, #3816]	; 0xee8
 80072ae:	9400      	str	r4, [sp, #0]
 80072b0:	f00a ff04 	bl	80120bc <_nx_ipv6_packet_send>
    }
#endif /* FEATURE_NX_IPV6 */
}
 80072b4:	b009      	add	sp, #36	; 0x24
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 80072ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80072bc:	f043 0304 	orr.w	r3, r3, #4
 80072c0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80072c2:	e7e3      	b.n	800728c <_nx_tcp_packet_send_control+0x15c>
        _nx_packet_release(packet_ptr);
 80072c4:	f7ff fb94 	bl	80069f0 <_nx_packet_release>
}
 80072c8:	b009      	add	sp, #36	; 0x24
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 80072ce:	f44f 25c0 	mov.w	r5, #393216	; 0x60000
 80072d2:	69a2      	ldr	r2, [r4, #24]
 80072d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80072d6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80072da:	9501      	str	r5, [sp, #4]
 80072dc:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80072e0:	9003      	str	r0, [sp, #12]
 80072e2:	4640      	mov	r0, r8
 80072e4:	9502      	str	r5, [sp, #8]
 80072e6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80072ea:	9907      	ldr	r1, [sp, #28]
 80072ec:	9500      	str	r5, [sp, #0]
 80072ee:	f7fa ffa3 	bl	8002238 <_nx_ip_packet_send>
 80072f2:	6962      	ldr	r2, [r4, #20]
 80072f4:	e7cc      	b.n	8007290 <_nx_tcp_packet_send_control+0x160>
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 80072f6:	3314      	adds	r3, #20
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 80072f8:	f104 0118 	add.w	r1, r4, #24
 80072fc:	e7b6      	b.n	800726c <_nx_tcp_packet_send_control+0x13c>
ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 80072fe:	460b      	mov	r3, r1
 8007300:	e7b4      	b.n	800726c <_nx_tcp_packet_send_control+0x13c>
 8007302:	bf00      	nop

08007304 <_nx_tcp_packet_send_fin>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_fin(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 8007304:	b510      	push	{r4, lr}
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 8007306:	2400      	movs	r4, #0
{
 8007308:	b084      	sub	sp, #16
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800730a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800730c:	460a      	mov	r2, r1
 800730e:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8007312:	9400      	str	r4, [sp, #0]
 8007314:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007318:	f7ff ff0a 	bl	8007130 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);
}
 800731c:	b004      	add	sp, #16
 800731e:	bd10      	pop	{r4, pc}

08007320 <_nx_tcp_packet_send_syn>:
    }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
    /* Update the mss value based on IP version type. */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007320:	6943      	ldr	r3, [r0, #20]
 8007322:	2b04      	cmp	r3, #4
{
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	4604      	mov	r4, r0
 8007328:	b084      	sub	sp, #16
 800732a:	460d      	mov	r5, r1
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800732c:	d030      	beq.n	8007390 <_nx_tcp_packet_send_syn+0x70>

    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 800732e:	2b06      	cmp	r3, #6
 8007330:	d11f      	bne.n	8007372 <_nx_tcp_packet_send_syn+0x52>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV6_HEADER)) - sizeof(NX_TCP_HEADER));
 8007332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    }
#endif /* FEATURE_NX_IPV6 */

    mss &= 0x0000FFFFUL;

    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 8007336:	6923      	ldr	r3, [r4, #16]
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV6_HEADER)) - sizeof(NX_TCP_HEADER));
 8007338:	3a3c      	subs	r2, #60	; 0x3c
    mss &= 0x0000FFFFUL;
 800733a:	b292      	uxth	r2, r2
    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 800733c:	4293      	cmp	r3, r2
 800733e:	d22e      	bcs.n	800739e <_nx_tcp_packet_send_syn+0x7e>
 8007340:	b36b      	cbz	r3, 800739e <_nx_tcp_packet_send_syn+0x7e>
 8007342:	f043 7101 	orr.w	r1, r3, #33816576	; 0x2040000

        /* Use the custom MSS. */
        mss = socket_ptr -> nx_tcp_socket_mss;
    }

    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 8007346:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007348:	2a04      	cmp	r2, #4
 800734a:	d018      	beq.n	800737e <_nx_tcp_packet_send_syn+0x5e>
        socket_ptr -> nx_tcp_rcv_win_scale_value = scale_factor;
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Send SYN or SYN+ACK packet according to socket state. */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 800734c:	2a03      	cmp	r2, #3
        socket_ptr -> nx_tcp_socket_connect_mss = mss;
 800734e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 8007350:	d029      	beq.n	80073a6 <_nx_tcp_packet_send_syn+0x86>
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
                                    0, option_word_1, option_word_2, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_SYN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 8007352:	481c      	ldr	r0, [pc, #112]	; (80073c4 <_nx_tcp_packet_send_syn+0xa4>)
 8007354:	2600      	movs	r6, #0
 8007356:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007358:	462a      	mov	r2, r5
 800735a:	9100      	str	r1, [sp, #0]
 800735c:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
 8007360:	9001      	str	r0, [sp, #4]
 8007362:	4620      	mov	r0, r4
 8007364:	9602      	str	r6, [sp, #8]
 8007366:	f7ff fee3 	bl	8007130 <_nx_tcp_packet_send_control>
                                    socket_ptr -> nx_tcp_socket_rx_sequence, option_word_1, option_word_2, NX_NULL);
    }

    /* Initialize recover sequence and previous cumulative acknowledgment. */
    socket_ptr -> nx_tcp_socket_tx_sequence_recover = tx_sequence;
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 800736a:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
}
 800736e:	b004      	add	sp, #16
 8007370:	bd70      	pop	{r4, r5, r6, pc}
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 8007372:	6c62      	ldr	r2, [r4, #68]	; 0x44
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8007374:	f04f 7101 	mov.w	r1, #33816576	; 0x2040000
    mss &= 0x0000FFFFUL;
 8007378:	2300      	movs	r3, #0
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800737a:	2a04      	cmp	r2, #4
 800737c:	d1e6      	bne.n	800734c <_nx_tcp_packet_send_syn+0x2c>
 800737e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007380:	4293      	cmp	r3, r2
 8007382:	bf28      	it	cs
 8007384:	4613      	movcs	r3, r2
            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 8007386:	fb03 f203 	mul.w	r2, r3, r3
 800738a:	62e3      	str	r3, [r4, #44]	; 0x2c
        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800738c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800738e:	e7e0      	b.n	8007352 <_nx_tcp_packet_send_syn+0x32>
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 8007390:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 8007394:	6923      	ldr	r3, [r4, #16]
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 8007396:	3a28      	subs	r2, #40	; 0x28
    mss &= 0x0000FFFFUL;
 8007398:	b292      	uxth	r2, r2
    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 800739a:	4293      	cmp	r3, r2
 800739c:	d3d0      	bcc.n	8007340 <_nx_tcp_packet_send_syn+0x20>
 800739e:	f042 7101 	orr.w	r1, r2, #33816576	; 0x2040000
    mss &= 0x0000FFFFUL;
 80073a2:	4613      	mov	r3, r2
 80073a4:	e7cf      	b.n	8007346 <_nx_tcp_packet_send_syn+0x26>
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
 80073a6:	2300      	movs	r3, #0
 80073a8:	4806      	ldr	r0, [pc, #24]	; (80073c4 <_nx_tcp_packet_send_syn+0xa4>)
 80073aa:	9100      	str	r1, [sp, #0]
 80073ac:	462a      	mov	r2, r5
 80073ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80073b2:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80073b6:	4620      	mov	r0, r4
 80073b8:	f7ff feba 	bl	8007130 <_nx_tcp_packet_send_control>
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 80073bc:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
}
 80073c0:	b004      	add	sp, #16
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	01010100 	.word	0x01010100

080073c8 <_nx_tcp_periodic_processing>:
        keepalive_enabled = socket_ptr -> nx_tcp_socket_keepalive_enabled;
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif
}
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop

080073cc <_nx_tcp_queue_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_queue_process(NX_IP *ip_ptr)
{
 80073cc:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80073ce:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80073d2:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE

    /* Remove the TCP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 80073d4:	2500      	movs	r5, #0
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
 80073d6:	f8d0 39cc 	ldr.w	r3, [r0, #2508]	; 0x9cc
    ip_ptr -> nx_ip_tcp_queue_tail =  NX_NULL;
 80073da:	f8c0 59d0 	str.w	r5, [r0, #2512]	; 0x9d0
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 80073de:	f8c0 59cc 	str.w	r5, [r0, #2508]	; 0x9cc
    ip_ptr -> nx_ip_tcp_received_packet_count =  0;
 80073e2:	f8c0 59d4 	str.w	r5, [r0, #2516]	; 0x9d4
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80073e6:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire TCP message queue and process packets
       one by one.  */
    while (queue_head)
 80073ea:	b14b      	cbz	r3, 8007400 <_nx_tcp_queue_process+0x34>
 80073ec:	4604      	mov	r4, r0
    {

        /* Pickup the first queue TCP message and remove it from the
           TCP queue.  */
        packet_ptr =  queue_head;
        queue_head =  queue_head -> nx_packet_queue_next;
 80073ee:	69de      	ldr	r6, [r3, #28]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Process the packet.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 80073f0:	4619      	mov	r1, r3
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80073f2:	61dd      	str	r5, [r3, #28]
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 80073f4:	4620      	mov	r0, r4
 80073f6:	f00b fdb1 	bl	8012f5c <_nx_tcp_packet_process>
    while (queue_head)
 80073fa:	4633      	mov	r3, r6
 80073fc:	2e00      	cmp	r6, #0
 80073fe:	d1f6      	bne.n	80073ee <_nx_tcp_queue_process+0x22>
    }
}
 8007400:	bd70      	pop	{r4, r5, r6, pc}
 8007402:	bf00      	nop

08007404 <_nx_tcp_server_socket_accept>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SERVER_SOCKET_ACCEPT, ip_ptr, socket_ptr, wait_option, socket_ptr -> nx_tcp_socket_state, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Check if the socket has already made a connection, return successful outcome to accept(). */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 8007404:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007406:	2b05      	cmp	r3, #5
 8007408:	d035      	beq.n	8007476 <_nx_tcp_server_socket_accept+0x72>
        return(NX_SUCCESS);
    }

    /* Determine if the socket is still in the listen state or has sent a SYN packet out already
       from a previous accept() call on this socket.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_LISTEN_STATE) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED))
 800740a:	2b02      	cmp	r3, #2
 800740c:	d003      	beq.n	8007416 <_nx_tcp_server_socket_accept+0x12>
 800740e:	2b04      	cmp	r3, #4
 8007410:	d001      	beq.n	8007416 <_nx_tcp_server_socket_accept+0x12>
    {

        /* Socket has either been closed or in the process of closing*/
        return(NX_NOT_LISTEN_STATE);
 8007412:	2036      	movs	r0, #54	; 0x36
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));

        /* Return in-progress completion status.  */
        return(NX_IN_PROGRESS);
    }
}
 8007414:	4770      	bx	lr
{
 8007416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800741a:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
 800741e:	4604      	mov	r4, r0
{
 8007420:	b082      	sub	sp, #8
 8007422:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007424:	f205 673c 	addw	r7, r5, #1596	; 0x63c
 8007428:	f04f 31ff 	mov.w	r1, #4294967295
 800742c:	4638      	mov	r0, r7
 800742e:	f015 fb63 	bl	801caf8 <_tx_mutex_get>
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_LISTEN_STATE)
 8007432:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007434:	2b02      	cmp	r3, #2
 8007436:	d020      	beq.n	800747a <_nx_tcp_server_socket_accept+0x76>
    if ((wait_option) && (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 8007438:	2e00      	cmp	r6, #0
 800743a:	d059      	beq.n	80074f0 <_nx_tcp_server_socket_accept+0xec>
 800743c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8007518 <_nx_tcp_server_socket_accept+0x114>
 8007440:	f505 65d3 	add.w	r5, r5, #1688	; 0x698
 8007444:	f8d8 3000 	ldr.w	r3, [r8]
 8007448:	42ab      	cmp	r3, r5
 800744a:	d051      	beq.n	80074f0 <_nx_tcp_server_socket_accept+0xec>
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), _nx_tcp_connect_cleanup,
 800744c:	463b      	mov	r3, r7
 800744e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8007452:	9600      	str	r6, [sp, #0]
 8007454:	4622      	mov	r2, r4
 8007456:	492f      	ldr	r1, [pc, #188]	; (8007514 <_nx_tcp_server_socket_accept+0x110>)
 8007458:	f001 f938 	bl	80086cc <_nx_tcp_socket_thread_suspend>
        if (_tx_thread_current_ptr -> tx_thread_suspend_status)
 800745c:	f8d8 3000 	ldr.w	r3, [r8]
 8007460:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007464:	b120      	cbz	r0, 8007470 <_nx_tcp_server_socket_accept+0x6c>
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8007466:	2202      	movs	r2, #2
            socket_ptr -> nx_tcp_socket_timeout =  0;
 8007468:	2300      	movs	r3, #0
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800746a:	6462      	str	r2, [r4, #68]	; 0x44
            socket_ptr -> nx_tcp_socket_timeout =  0;
 800746c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
}
 8007470:	b002      	add	sp, #8
 8007472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return(NX_SUCCESS);
 8007476:	2000      	movs	r0, #0
 8007478:	4770      	bx	lr
        if (socket_ptr -> nx_tcp_socket_tx_sequence == 0)
 800747a:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
 800747e:	f1b8 0f00 	cmp.w	r8, #0
 8007482:	d13c      	bne.n	80074fe <_nx_tcp_server_socket_accept+0xfa>
            socket_ptr -> nx_tcp_socket_tx_sequence =  (((ULONG)NX_RAND()) << NX_SHIFT_BY_16) & 0xFFFFFFFF;
 8007484:	f017 f90e 	bl	801e6a4 <rand>
 8007488:	0400      	lsls	r0, r0, #16
 800748a:	64a0      	str	r0, [r4, #72]	; 0x48
            socket_ptr -> nx_tcp_socket_tx_sequence |= (ULONG)NX_RAND();
 800748c:	f017 f90a 	bl	801e6a4 <rand>
 8007490:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007492:	4301      	orrs	r1, r0
 8007494:	64a1      	str	r1, [r4, #72]	; 0x48
        socket_ptr -> nx_tcp_socket_rx_window_current =    socket_ptr -> nx_tcp_socket_rx_window_default;
 8007496:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 8007498:	f04f 0c04 	mov.w	ip, #4
        socket_ptr -> nx_tcp_socket_fin_received =  NX_FALSE;
 800749c:	2200      	movs	r2, #0
        if (socket_ptr -> nx_tcp_socket_bound_next)
 800749e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 80074a2:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_fin_received =  NX_FALSE;
 80074a6:	65e2      	str	r2, [r4, #92]	; 0x5c
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_default;
 80074a8:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
        if (socket_ptr -> nx_tcp_socket_bound_next)
 80074ac:	b370      	cbz	r0, 800750c <_nx_tcp_server_socket_accept+0x108>
            socket_ptr -> nx_tcp_socket_rx_sequence++;
 80074ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            socket_ptr -> nx_tcp_socket_tx_sequence++;
 80074b0:	f101 0c01 	add.w	ip, r1, #1
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 80074b4:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
            _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80074b8:	4620      	mov	r0, r4
            socket_ptr -> nx_tcp_socket_rx_sequence++;
 80074ba:	3301      	adds	r3, #1
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 80074bc:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_receive_queue_tail  =  NX_NULL;
 80074c0:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
            socket_ptr -> nx_tcp_socket_rx_sequence++;
 80074c4:	64e3      	str	r3, [r4, #76]	; 0x4c
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 80074c6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
            socket_ptr -> nx_tcp_socket_tx_sequence++;
 80074ca:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 80074ce:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
            socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 80074d2:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
            socket_ptr -> nx_tcp_socket_bytes_sent = 0;
 80074d6:	e9c4 2222 	strd	r2, r2, [r4, #136]	; 0x88
            socket_ptr -> nx_tcp_socket_bytes_received = 0;
 80074da:	e9c4 2224 	strd	r2, r2, [r4, #144]	; 0x90
            socket_ptr -> nx_tcp_socket_checksum_errors = 0;
 80074de:	e9c4 2226 	strd	r2, r2, [r4, #152]	; 0x98
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 80074e2:	e9c4 2234 	strd	r2, r2, [r4, #208]	; 0xd0
            socket_ptr -> nx_tcp_socket_receive_queue_head  =  NX_NULL;
 80074e6:	e9c4 222f 	strd	r2, r2, [r4, #188]	; 0xbc
            _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80074ea:	f7ff ff19 	bl	8007320 <_nx_tcp_packet_send_syn>
 80074ee:	e7a3      	b.n	8007438 <_nx_tcp_server_socket_accept+0x34>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80074f0:	4638      	mov	r0, r7
 80074f2:	f015 fbeb 	bl	801cccc <_tx_mutex_put>
        return(NX_IN_PROGRESS);
 80074f6:	2037      	movs	r0, #55	; 0x37
}
 80074f8:	b002      	add	sp, #8
 80074fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            socket_ptr -> nx_tcp_socket_tx_sequence =  socket_ptr -> nx_tcp_socket_tx_sequence + ((ULONG)(((ULONG)0x10000))) + ((ULONG)NX_RAND());
 80074fe:	f017 f8d1 	bl	801e6a4 <rand>
 8007502:	f508 3180 	add.w	r1, r8, #65536	; 0x10000
 8007506:	4401      	add	r1, r0
 8007508:	64a1      	str	r1, [r4, #72]	; 0x48
 800750a:	e7c4      	b.n	8007496 <_nx_tcp_server_socket_accept+0x92>
            socket_ptr -> nx_tcp_socket_timeout = 0;
 800750c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
 8007510:	e792      	b.n	8007438 <_nx_tcp_server_socket_accept+0x34>
 8007512:	bf00      	nop
 8007514:	08012d25 	.word	0x08012d25
 8007518:	20007a80 	.word	0x20007a80

0800751c <_nx_tcp_server_socket_listen>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_server_socket_listen(NX_IP *ip_ptr, UINT port, NX_TCP_SOCKET *socket_ptr, UINT listen_queue_size,
                                   VOID (*tcp_listen_callback)(NX_TCP_SOCKET *socket_ptr, UINT port))
{
 800751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SERVER_SOCKET_LISTEN, ip_ptr, port, socket_ptr, listen_queue_size, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007520:	f200 653c 	addw	r5, r0, #1596	; 0x63c
{
 8007524:	4614      	mov	r4, r2
 8007526:	4606      	mov	r6, r0
 8007528:	460f      	mov	r7, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800752a:	4628      	mov	r0, r5
 800752c:	f04f 31ff 	mov.w	r1, #4294967295
{
 8007530:	4698      	mov	r8, r3
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007532:	f015 fae1 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the server socket is in a proper state.  */
    if (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED)
 8007536:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007538:	2b01      	cmp	r3, #1
 800753a:	d11c      	bne.n	8007576 <_nx_tcp_server_socket_listen+0x5a>
        return(NX_NOT_CLOSED);
    }

    /* Determine if the server socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_tcp_socket_bound_next) ||
 800753c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8007540:	b99b      	cbnz	r3, 800756a <_nx_tcp_server_socket_listen+0x4e>
 8007542:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8007546:	b983      	cbnz	r3, 800756a <_nx_tcp_server_socket_listen+0x4e>
    /* Clean connected interface. */
    socket_ptr -> nx_tcp_socket_connect_interface = NX_NULL;

    /* Search through the active listen requests to see if there is already
       one active.  */
    listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 8007548:	f8d6 1b44 	ldr.w	r1, [r6, #2884]	; 0xb44
    socket_ptr -> nx_tcp_socket_connect_interface = NX_NULL;
 800754c:	6363      	str	r3, [r4, #52]	; 0x34
    if (listen_ptr)
 800754e:	b1c1      	cbz	r1, 8007582 <_nx_tcp_server_socket_listen+0x66>
 8007550:	460b      	mov	r3, r1
 8007552:	e002      	b.n	800755a <_nx_tcp_server_socket_listen+0x3e>
                /* Return the error code.  */
                return(NX_DUPLICATE_LISTEN);
            }

            /* Move to the next listen request.  */
            listen_ptr =  listen_ptr -> nx_tcp_listen_next;
 8007554:	69db      	ldr	r3, [r3, #28]
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 8007556:	4299      	cmp	r1, r3
 8007558:	d013      	beq.n	8007582 <_nx_tcp_server_socket_listen+0x66>
            if (listen_ptr -> nx_tcp_listen_port == port)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	42ba      	cmp	r2, r7
 800755e:	d1f9      	bne.n	8007554 <_nx_tcp_server_socket_listen+0x38>
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007560:	4628      	mov	r0, r5
 8007562:	f015 fbb3 	bl	801cccc <_tx_mutex_put>
                return(NX_DUPLICATE_LISTEN);
 8007566:	2034      	movs	r0, #52	; 0x34
 8007568:	e003      	b.n	8007572 <_nx_tcp_server_socket_listen+0x56>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800756a:	4628      	mov	r0, r5
 800756c:	f015 fbae 	bl	801cccc <_tx_mutex_put>
        return(NX_ALREADY_BOUND);
 8007570:	2022      	movs	r0, #34	; 0x22
    /* Successful listen request, release the protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));

    /* Return success.  */
    return(NX_SUCCESS);
}
 8007572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007576:	4628      	mov	r0, r5
 8007578:	f015 fba8 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_CLOSED);
 800757c:	2035      	movs	r0, #53	; 0x35
}
 800757e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!ip_ptr -> nx_ip_tcp_available_listen_requests)
 8007582:	f8d6 3b40 	ldr.w	r3, [r6, #2880]	; 0xb40
 8007586:	b323      	cbz	r3, 80075d2 <_nx_tcp_server_socket_listen+0xb6>
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr -> nx_tcp_listen_next;
 8007588:	69da      	ldr	r2, [r3, #28]
    listen_ptr -> nx_tcp_listen_queue_current =  0;
 800758a:	2000      	movs	r0, #0
    socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800758c:	f04f 0c02 	mov.w	ip, #2
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr -> nx_tcp_listen_next;
 8007590:	f8c6 2b40 	str.w	r2, [r6, #2880]	; 0xb40
    listen_ptr -> nx_tcp_listen_callback =    tcp_listen_callback;
 8007594:	9a06      	ldr	r2, [sp, #24]
    listen_ptr -> nx_tcp_listen_port =        port;
 8007596:	601f      	str	r7, [r3, #0]
    listen_ptr -> nx_tcp_listen_socket_ptr =  socket_ptr;
 8007598:	e9c3 2401 	strd	r2, r4, [r3, #4]
    listen_ptr -> nx_tcp_listen_queue_current =  0;
 800759c:	e9c3 8003 	strd	r8, r0, [r3, #12]
    listen_ptr -> nx_tcp_listen_queue_tail =     NX_NULL;
 80075a0:	e9c3 0005 	strd	r0, r0, [r3, #20]
    socket_ptr -> nx_tcp_socket_client_type =  NX_FALSE;
 80075a4:	60a0      	str	r0, [r4, #8]
    socket_ptr -> nx_tcp_socket_timeout =  0;
 80075a6:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    socket_ptr -> nx_tcp_socket_port =  port;
 80075aa:	60e7      	str	r7, [r4, #12]
    socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 80075ac:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
    if (ip_ptr -> nx_ip_tcp_active_listen_requests)
 80075b0:	b151      	cbz	r1, 80075c8 <_nx_tcp_server_socket_listen+0xac>
        tail_ptr =  (ip_ptr -> nx_ip_tcp_active_listen_requests) -> nx_tcp_listen_previous;
 80075b2:	6a0a      	ldr	r2, [r1, #32]
        (ip_ptr -> nx_ip_tcp_active_listen_requests) -> nx_tcp_listen_previous =  listen_ptr;
 80075b4:	620b      	str	r3, [r1, #32]
        tail_ptr ->  nx_tcp_listen_next =  listen_ptr;
 80075b6:	61d3      	str	r3, [r2, #28]
        listen_ptr -> nx_tcp_listen_next =      ip_ptr -> nx_ip_tcp_active_listen_requests;
 80075b8:	e9c3 1207 	strd	r1, r2, [r3, #28]
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80075bc:	4628      	mov	r0, r5
 80075be:	f015 fb85 	bl	801cccc <_tx_mutex_put>
    return(NX_SUCCESS);
 80075c2:	2000      	movs	r0, #0
}
 80075c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ip_ptr -> nx_ip_tcp_active_listen_requests =  listen_ptr;
 80075c8:	f8c6 3b44 	str.w	r3, [r6, #2884]	; 0xb44
        listen_ptr -> nx_tcp_listen_next =            listen_ptr;
 80075cc:	e9c3 3307 	strd	r3, r3, [r3, #28]
 80075d0:	e7f4      	b.n	80075bc <_nx_tcp_server_socket_listen+0xa0>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80075d2:	4628      	mov	r0, r5
 80075d4:	f015 fb7a 	bl	801cccc <_tx_mutex_put>
        return(NX_MAX_LISTEN);
 80075d8:	2033      	movs	r0, #51	; 0x33
 80075da:	e7ca      	b.n	8007572 <_nx_tcp_server_socket_listen+0x56>

080075dc <_nx_tcp_server_socket_unaccept>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_server_socket_unaccept(NX_TCP_SOCKET *socket_ptr)
{
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
UINT                         index;
UINT                         port;


    /* Pickup the associated IP structure.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 80075de:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
{
 80075e2:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SERVER_SOCKET_UNACCEPT, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, 0, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can access the IP and socket data structures.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80075e4:	f04f 31ff 	mov.w	r1, #4294967295
 80075e8:	f206 653c 	addw	r5, r6, #1596	; 0x63c
 80075ec:	4628      	mov	r0, r5
 80075ee:	f015 fa83 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket is in a state of disconnect.  */
    if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_CLOSE_WAIT) ||
 80075f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d836      	bhi.n	8007666 <_nx_tcp_server_socket_unaccept+0x8a>
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d031      	beq.n	8007660 <_nx_tcp_server_socket_unaccept+0x84>

        socket_ptr -> nx_tcp_socket_connect_port =  0;
    }

    /* Determine if the socket is in the listen state now.  */
    if (socket_ptr -> nx_tcp_socket_state != NX_TCP_LISTEN_STATE)
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d13e      	bne.n	800767e <_nx_tcp_server_socket_unaccept+0xa2>
        /* Return an error code.  */
        return(NX_NOT_LISTEN_STATE);
    }

    /* Check for a thread suspended for disconnect processing to complete.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8007600:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 8007604:	b110      	cbz	r0, 800760c <_nx_tcp_server_socket_unaccept+0x30>
    {

        /* Call the disconnect thread suspension cleanup routine.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 8007606:	2100      	movs	r1, #0
 8007608:	f00b fc5a 	bl	8012ec0 <_nx_tcp_disconnect_cleanup>
    }

    /* Remove the TCP socket form the associated port.  */

    /* Pickup the port number in the TCP socket structure.  */
    port =  socket_ptr -> nx_tcp_socket_port;
 800760c:	68e3      	ldr	r3, [r4, #12]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_tcp_socket_bound_next == socket_ptr)
 800760e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 8007612:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    if (socket_ptr -> nx_tcp_socket_bound_next == socket_ptr)
 8007616:	42a2      	cmp	r2, r4
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 8007618:	f003 031f 	and.w	r3, r3, #31
    if (socket_ptr -> nx_tcp_socket_bound_next == socket_ptr)
 800761c:	d034      	beq.n	8007688 <_nx_tcp_server_socket_unaccept+0xac>

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_tcp_port_table[index] =   NX_NULL;
        socket_ptr -> nx_tcp_socket_bound_next =  NX_NULL;
    }
    else if (socket_ptr -> nx_tcp_socket_bound_next)
 800761e:	2a00      	cmp	r2, #0
 8007620:	d03f      	beq.n	80076a2 <_nx_tcp_server_socket_unaccept+0xc6>
    {

        /* Relink the neighbors of this TCP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_tcp_socket_bound_next) -> nx_tcp_socket_bound_previous = socket_ptr -> nx_tcp_socket_bound_previous;
 8007622:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 8007626:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800762a:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
        (socket_ptr -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =  socket_ptr -> nx_tcp_socket_bound_next;

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_tcp_port_table[index] == socket_ptr)
 800762e:	f8d3 1934 	ldr.w	r1, [r3, #2356]	; 0x934
        (socket_ptr -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =  socket_ptr -> nx_tcp_socket_bound_next;
 8007632:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
        if (ip_ptr -> nx_ip_tcp_port_table[index] == socket_ptr)
 8007636:	42a1      	cmp	r1, r4
        (socket_ptr -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =  socket_ptr -> nx_tcp_socket_bound_next;
 8007638:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
        if (ip_ptr -> nx_ip_tcp_port_table[index] == socket_ptr)
 800763c:	d040      	beq.n	80076c0 <_nx_tcp_server_socket_unaccept+0xe4>
            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_tcp_port_table[index] =  socket_ptr -> nx_tcp_socket_bound_next;
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_tcp_socket_bound_next =  NX_NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Adjust the socket back to default states.  */
    socket_ptr -> nx_tcp_socket_state =        NX_TCP_CLOSED;
 8007644:	2301      	movs	r3, #1
    socket_ptr -> nx_tcp_socket_client_type =  NX_TRUE;

    /* Socket is no longer active. Clear the timeout. */
    socket_ptr -> nx_tcp_socket_timeout =  0;
 8007646:	2100      	movs	r1, #0

    /* The socket is off the bound list...  we need to check for queued receive packets and
       if found they need to be released.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 8007648:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
    socket_ptr -> nx_tcp_socket_state =        NX_TCP_CLOSED;
 800764c:	6463      	str	r3, [r4, #68]	; 0x44
    socket_ptr -> nx_tcp_socket_client_type =  NX_TRUE;
 800764e:	60a3      	str	r3, [r4, #8]
    socket_ptr -> nx_tcp_socket_timeout =  0;
 8007650:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 8007654:	bb0a      	cbnz	r2, 800769a <_nx_tcp_server_socket_unaccept+0xbe>
        /* Release queued receive packets.  */
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
    }

    /* Release the IP protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007656:	4628      	mov	r0, r5
 8007658:	f015 fb38 	bl	801cccc <_tx_mutex_put>

    /* Return success.  */
    return(NX_SUCCESS);
 800765c:	2000      	movs	r0, #0
}
 800765e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSED) && (socket_ptr -> nx_tcp_socket_bound_next)))
 8007660:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8007664:	b15b      	cbz	r3, 800767e <_nx_tcp_server_socket_unaccept+0xa2>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8007666:	2302      	movs	r3, #2
        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =    0;
 8007668:	2700      	movs	r7, #0
        SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 800766a:	f104 0018 	add.w	r0, r4, #24
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800766e:	6463      	str	r3, [r4, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =    0;
 8007670:	6167      	str	r7, [r4, #20]
        SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8007672:	f7fe ff25 	bl	80064c0 <SET_UNSPECIFIED_ADDRESS>
 8007676:	6c63      	ldr	r3, [r4, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_connect_port =  0;
 8007678:	62a7      	str	r7, [r4, #40]	; 0x28
    if (socket_ptr -> nx_tcp_socket_state != NX_TCP_LISTEN_STATE)
 800767a:	2b02      	cmp	r3, #2
 800767c:	d0c0      	beq.n	8007600 <_nx_tcp_server_socket_unaccept+0x24>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800767e:	4628      	mov	r0, r5
 8007680:	f015 fb24 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_LISTEN_STATE);
 8007684:	2036      	movs	r0, #54	; 0x36
}
 8007686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ip_ptr -> nx_ip_tcp_port_table[index] =   NX_NULL;
 8007688:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800768c:	2200      	movs	r2, #0
 800768e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007692:	605a      	str	r2, [r3, #4]
        socket_ptr -> nx_tcp_socket_bound_next =  NX_NULL;
 8007694:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8007698:	e7d4      	b.n	8007644 <_nx_tcp_server_socket_unaccept+0x68>
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fb10 	bl	8007cc0 <_nx_tcp_socket_receive_queue_flush>
 80076a0:	e7d9      	b.n	8007656 <_nx_tcp_server_socket_unaccept+0x7a>
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 80076a2:	f8d6 1b44 	ldr.w	r1, [r6, #2884]	; 0xb44
        if (listen_ptr)
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d0cc      	beq.n	8007644 <_nx_tcp_server_socket_unaccept+0x68>
 80076aa:	460b      	mov	r3, r1
 80076ac:	e002      	b.n	80076b4 <_nx_tcp_server_socket_unaccept+0xd8>
                listen_ptr =  listen_ptr -> nx_tcp_listen_next;
 80076ae:	69db      	ldr	r3, [r3, #28]
            } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 80076b0:	4299      	cmp	r1, r3
 80076b2:	d0c7      	beq.n	8007644 <_nx_tcp_server_socket_unaccept+0x68>
                if (listen_ptr -> nx_tcp_listen_socket_ptr == socket_ptr)
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	42a2      	cmp	r2, r4
 80076b8:	d1f9      	bne.n	80076ae <_nx_tcp_server_socket_unaccept+0xd2>
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 80076ba:	2200      	movs	r2, #0
 80076bc:	609a      	str	r2, [r3, #8]
                    break;
 80076be:	e7c1      	b.n	8007644 <_nx_tcp_server_socket_unaccept+0x68>
            ip_ptr -> nx_ip_tcp_port_table[index] =  socket_ptr -> nx_tcp_socket_bound_next;
 80076c0:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 80076c4:	f8c3 2934 	str.w	r2, [r3, #2356]	; 0x934
 80076c8:	e7b9      	b.n	800763e <_nx_tcp_server_socket_unaccept+0x62>
 80076ca:	bf00      	nop

080076cc <_nx_tcp_server_socket_unlisten>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_server_socket_unlisten(NX_IP *ip_ptr, UINT port)
{
 80076cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SERVER_SOCKET_UNLISTEN, ip_ptr, port, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80076d0:	f200 673c 	addw	r7, r0, #1596	; 0x63c
{
 80076d4:	4606      	mov	r6, r0
 80076d6:	460d      	mov	r5, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80076d8:	f04f 31ff 	mov.w	r1, #4294967295
 80076dc:	4638      	mov	r0, r7
 80076de:	f015 fa0b 	bl	801caf8 <_tx_mutex_get>

    /* Search through the active listen requests to see if we can find
       one for this port.  */
    listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 80076e2:	f8d6 2b44 	ldr.w	r2, [r6, #2884]	; 0xb44
    if (listen_ptr)
 80076e6:	b332      	cbz	r2, 8007736 <_nx_tcp_server_socket_unlisten+0x6a>
 80076e8:	4614      	mov	r4, r2
 80076ea:	e002      	b.n	80076f2 <_nx_tcp_server_socket_unlisten+0x26>
                /* Return success!  */
                return(NX_SUCCESS);
            }

            /* Move to the next listen request.  */
            listen_ptr =  listen_ptr -> nx_tcp_listen_next;
 80076ec:	69e4      	ldr	r4, [r4, #28]
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 80076ee:	42a2      	cmp	r2, r4
 80076f0:	d021      	beq.n	8007736 <_nx_tcp_server_socket_unlisten+0x6a>
            if (listen_ptr -> nx_tcp_listen_port == port)
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	42ab      	cmp	r3, r5
 80076f6:	d1f9      	bne.n	80076ec <_nx_tcp_server_socket_unlisten+0x20>
                socket_ptr =  listen_ptr -> nx_tcp_listen_socket_ptr;
 80076f8:	68a3      	ldr	r3, [r4, #8]
                if (socket_ptr)
 80076fa:	b333      	cbz	r3, 800774a <_nx_tcp_server_socket_unlisten+0x7e>
                    if (socket_ptr -> nx_tcp_socket_state != NX_TCP_LISTEN_STATE)
 80076fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076fe:	2a02      	cmp	r2, #2
 8007700:	d13a      	bne.n	8007778 <_nx_tcp_server_socket_unlisten+0xac>
                    socket_ptr -> nx_tcp_socket_state = NX_TCP_CLOSED;
 8007702:	2101      	movs	r1, #1
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 8007704:	2200      	movs	r2, #0
                    socket_ptr -> nx_tcp_socket_state = NX_TCP_CLOSED;
 8007706:	6459      	str	r1, [r3, #68]	; 0x44
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 8007708:	60a2      	str	r2, [r4, #8]
                if (listen_ptr == listen_ptr -> nx_tcp_listen_next)
 800770a:	69e3      	ldr	r3, [r4, #28]
 800770c:	42a3      	cmp	r3, r4
 800770e:	d02f      	beq.n	8007770 <_nx_tcp_server_socket_unlisten+0xa4>
                        listen_ptr -> nx_tcp_listen_previous;
 8007710:	6a21      	ldr	r1, [r4, #32]
                    if (ip_ptr -> nx_ip_tcp_active_listen_requests == listen_ptr)
 8007712:	f8d6 2b44 	ldr.w	r2, [r6, #2884]	; 0xb44
                    (listen_ptr -> nx_tcp_listen_next) -> nx_tcp_listen_previous =
 8007716:	6219      	str	r1, [r3, #32]
                    if (ip_ptr -> nx_ip_tcp_active_listen_requests == listen_ptr)
 8007718:	42a2      	cmp	r2, r4
                    (listen_ptr -> nx_tcp_listen_previous) -> nx_tcp_listen_next =
 800771a:	6a21      	ldr	r1, [r4, #32]
 800771c:	61cb      	str	r3, [r1, #28]
                    if (ip_ptr -> nx_ip_tcp_active_listen_requests == listen_ptr)
 800771e:	d010      	beq.n	8007742 <_nx_tcp_server_socket_unlisten+0x76>
                listen_ptr -> nx_tcp_listen_next =  ip_ptr -> nx_ip_tcp_available_listen_requests;
 8007720:	f8d6 3b40 	ldr.w	r3, [r6, #2880]	; 0xb40
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007724:	4638      	mov	r0, r7
                listen_ptr -> nx_tcp_listen_next =  ip_ptr -> nx_ip_tcp_available_listen_requests;
 8007726:	61e3      	str	r3, [r4, #28]
                ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 8007728:	f8c6 4b40 	str.w	r4, [r6, #2880]	; 0xb40
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800772c:	f015 face 	bl	801cccc <_tx_mutex_put>
                return(NX_SUCCESS);
 8007730:	2000      	movs	r0, #0
    /* Unsuccessful listen request, release the protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));

    /* Return error code.  */
    return(NX_ENTRY_NOT_FOUND);
}
 8007732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007736:	4638      	mov	r0, r7
 8007738:	f015 fac8 	bl	801cccc <_tx_mutex_put>
    return(NX_ENTRY_NOT_FOUND);
 800773c:	2016      	movs	r0, #22
}
 800773e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        ip_ptr -> nx_ip_tcp_active_listen_requests =  listen_ptr -> nx_tcp_listen_next;
 8007742:	69e3      	ldr	r3, [r4, #28]
 8007744:	f8c6 3b44 	str.w	r3, [r6, #2884]	; 0xb44
 8007748:	e7ea      	b.n	8007720 <_nx_tcp_server_socket_unlisten+0x54>
                    queue_count =  listen_ptr -> nx_tcp_listen_queue_current;
 800774a:	6922      	ldr	r2, [r4, #16]
                    packet_ptr =   listen_ptr -> nx_tcp_listen_queue_head;
 800774c:	6960      	ldr	r0, [r4, #20]
                    listen_ptr -> nx_tcp_listen_queue_tail =  NX_NULL;
 800774e:	61a3      	str	r3, [r4, #24]
                    while (queue_count--)
 8007750:	1e55      	subs	r5, r2, #1
                    listen_ptr -> nx_tcp_listen_queue_current =  0;
 8007752:	6123      	str	r3, [r4, #16]
                    listen_ptr -> nx_tcp_listen_queue_head =  NX_NULL;
 8007754:	6163      	str	r3, [r4, #20]
                    while (queue_count--)
 8007756:	2a00      	cmp	r2, #0
 8007758:	d0d7      	beq.n	800770a <_nx_tcp_server_socket_unlisten+0x3e>
 800775a:	3d01      	subs	r5, #1
                        next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 800775c:	f8d0 801c 	ldr.w	r8, [r0, #28]
                        _nx_packet_release(packet_ptr);
 8007760:	f7ff f946 	bl	80069f0 <_nx_packet_release>
                    while (queue_count--)
 8007764:	1c6b      	adds	r3, r5, #1
                        packet_ptr =  next_packet_ptr;
 8007766:	4640      	mov	r0, r8
                    while (queue_count--)
 8007768:	d1f7      	bne.n	800775a <_nx_tcp_server_socket_unlisten+0x8e>
                if (listen_ptr == listen_ptr -> nx_tcp_listen_next)
 800776a:	69e3      	ldr	r3, [r4, #28]
 800776c:	42a3      	cmp	r3, r4
 800776e:	d1cf      	bne.n	8007710 <_nx_tcp_server_socket_unlisten+0x44>
                    ip_ptr -> nx_ip_tcp_active_listen_requests =  NX_NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	f8c6 3b44 	str.w	r3, [r6, #2884]	; 0xb44
 8007776:	e7d3      	b.n	8007720 <_nx_tcp_server_socket_unlisten+0x54>
                        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007778:	4638      	mov	r0, r7
 800777a:	f015 faa7 	bl	801cccc <_tx_mutex_put>
                        return(NX_NOT_LISTEN_STATE);
 800777e:	2036      	movs	r0, #54	; 0x36
}
 8007780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007784 <_nx_tcp_socket_block_cleanup>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_block_cleanup(NX_TCP_SOCKET *socket_ptr)
{
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4604      	mov	r4, r0

    /* Clean up the connect IP address.  */

    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 8007788:	2500      	movs	r5, #0
#ifdef FEATURE_NX_IPV6
    /* Clean up the IP address field. */
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 800778a:	3018      	adds	r0, #24
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 800778c:	6165      	str	r5, [r4, #20]
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 800778e:	f7fe fe97 	bl	80064c0 <SET_UNSPECIFIED_ADDRESS>

    /* Reset fast recovery stage. */
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;

    /* Connection needs to be closed down immediately.  */
    if (socket_ptr -> nx_tcp_socket_client_type)
 8007792:	68a3      	ldr	r3, [r4, #8]
    socket_ptr -> nx_tcp_socket_connect_port = 0;
 8007794:	62a5      	str	r5, [r4, #40]	; 0x28
    if (socket_ptr -> nx_tcp_socket_client_type)
 8007796:	42ab      	cmp	r3, r5
    socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 8007798:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
    socket_ptr -> nx_tcp_socket_timeout = 0;
 800779c:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Server socket, return to LISTEN state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 80077a0:	bf14      	ite	ne
 80077a2:	2301      	movne	r3, #1
 80077a4:	2302      	moveq	r3, #2
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 80077a6:	67a5      	str	r5, [r4, #120]	; 0x78
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 80077a8:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 80077ac:	6463      	str	r3, [r4, #68]	; 0x44
    }
}
 80077ae:	bd38      	pop	{r3, r4, r5, pc}

080077b0 <_nx_tcp_socket_connection_reset>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_connection_reset(NX_TCP_SOCKET *socket_ptr)
{
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	4604      	mov	r4, r0

UINT saved_state;

    /* Save the current state of the socket.  */
    saved_state =  socket_ptr -> nx_tcp_socket_state;
 80077b4:	6c45      	ldr	r5, [r0, #68]	; 0x44

    /* Cleanup the transmission control block.  */
    _nx_tcp_socket_block_cleanup(socket_ptr);
 80077b6:	f7ff ffe5 	bl	8007784 <_nx_tcp_socket_block_cleanup>

    /* Check for queued sent packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 80077ba:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80077be:	bb7b      	cbnz	r3, 8007820 <_nx_tcp_socket_connection_reset+0x70>
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
    }

    /* Check for queued receive packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 80077c0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80077c4:	b11b      	cbz	r3, 80077ce <_nx_tcp_socket_connection_reset+0x1e>
 80077c6:	e027      	b.n	8007818 <_nx_tcp_socket_connection_reset+0x68>
    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 80077c8:	2100      	movs	r1, #0
 80077ca:	f00b fe55 	bl	8013478 <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 80077ce:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d1f8      	bne.n	80077c8 <_nx_tcp_socket_connection_reset+0x18>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 80077d6:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80077da:	b130      	cbz	r0, 80077ea <_nx_tcp_socket_connection_reset+0x3a>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 80077dc:	2100      	movs	r1, #0
 80077de:	f000 ffd3 	bl	8008788 <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 80077e2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d1f8      	bne.n	80077dc <_nx_tcp_socket_connection_reset+0x2c>
    }

    /* Check for suspended connect thread.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 80077ea:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 80077ee:	b110      	cbz	r0, 80077f6 <_nx_tcp_socket_connection_reset+0x46>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 80077f0:	2100      	movs	r1, #0
 80077f2:	f00b fa97 	bl	8012d24 <_nx_tcp_connect_cleanup>
    }

    /* Check for suspended disconnect thread.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 80077f6:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 80077fa:	b110      	cbz	r0, 8007802 <_nx_tcp_socket_connection_reset+0x52>
    {

        /* Resume the thread suspended on the disconnect.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 80077fc:	2100      	movs	r1, #0
 80077fe:	f00b fb5f 	bl	8012ec0 <_nx_tcp_disconnect_cleanup>
    }

    /* Determine if the socket was in an established state.  */
    if (saved_state == NX_TCP_ESTABLISHED)
 8007802:	2d05      	cmp	r5, #5
 8007804:	d000      	beq.n	8007808 <_nx_tcp_socket_connection_reset+0x58>

        /* Notify the application through the socket disconnect_complete callback.  */
        (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
    }
#endif
}
 8007806:	bd70      	pop	{r4, r5, r6, pc}
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8007808:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0fa      	beq.n	8007806 <_nx_tcp_socket_connection_reset+0x56>
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8007810:	4620      	mov	r0, r4
}
 8007812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8007816:	4718      	bx	r3
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 8007818:	4620      	mov	r0, r4
 800781a:	f000 fa51 	bl	8007cc0 <_nx_tcp_socket_receive_queue_flush>
 800781e:	e7d6      	b.n	80077ce <_nx_tcp_socket_connection_reset+0x1e>
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 8007820:	4620      	mov	r0, r4
 8007822:	f000 ff85 	bl	8008730 <_nx_tcp_socket_transmit_queue_flush>
 8007826:	e7cb      	b.n	80077c0 <_nx_tcp_socket_connection_reset+0x10>

08007828 <_nx_tcp_socket_create>:
/**************************************************************************/
UINT  _nx_tcp_socket_create(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG window_size,
                            VOID (*tcp_urgent_data_callback)(NX_TCP_SOCKET *socket_ptr),
                            VOID (*tcp_disconnect_callback)(NX_TCP_SOCKET *socket_ptr))
{
 8007828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800782c:	460c      	mov	r4, r1
 800782e:	4606      	mov	r6, r0
 8007830:	4617      	mov	r7, r2

NX_TCP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_TCP_SOCKET));
 8007832:	2100      	movs	r1, #0
 8007834:	4620      	mov	r0, r4
 8007836:	f44f 729e 	mov.w	r2, #316	; 0x13c
{
 800783a:	4698      	mov	r8, r3
 800783c:	9d08      	ldr	r5, [sp, #32]
 800783e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    memset((void *)socket_ptr, 0, sizeof(NX_TCP_SOCKET));
 8007842:	f016 feaa 	bl	801e59a <memset>

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_FALSE;

    /* Setup the delayed ACK timeout periodic rate.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8007846:	4831      	ldr	r0, [pc, #196]	; (800790c <_nx_tcp_socket_create+0xe4>)
    socket_ptr -> nx_tcp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8007848:	f405 4180 	and.w	r1, r5, #16384	; 0x4000

    /* Setup the default transmit timeout.  */
    socket_ptr -> nx_tcp_socket_timeout_rate =         _nx_tcp_transmit_timer_rate;
 800784c:	4a30      	ldr	r2, [pc, #192]	; (8007910 <_nx_tcp_socket_create+0xe8>)
    socket_ptr -> nx_tcp_socket_client_type =  NX_TRUE;
 800784e:	2501      	movs	r5, #1
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8007850:	6803      	ldr	r3, [r0, #0]
    socket_ptr -> nx_tcp_socket_connect_mss =  NX_TCP_MSS_SIZE;
 8007852:	f240 5eb4 	movw	lr, #1460	; 0x5b4
    socket_ptr -> nx_tcp_socket_timeout_max_retries =  NX_TCP_MAXIMUM_RETRIES;
 8007856:	f04f 0c0a 	mov.w	ip, #10
    socket_ptr -> nx_tcp_socket_name =  name;
 800785a:	6067      	str	r7, [r4, #4]
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800785c:	6563      	str	r3, [r4, #84]	; 0x54
    socket_ptr -> nx_tcp_socket_timeout_shift =        NX_TCP_RETRY_SHIFT;

    /* Setup the default maximum transmit queue depth.  */
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum_default =  NX_TCP_MAXIMUM_TX_QUEUE;
 800785e:	2714      	movs	r7, #20
    socket_ptr -> nx_tcp_socket_timeout_rate =         _nx_tcp_transmit_timer_rate;
 8007860:	6813      	ldr	r3, [r2, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, window_size, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Get protection while we insert the TCP socket into the created list.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007862:	f206 693c 	addw	r9, r6, #1596	; 0x63c
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8007866:	2200      	movs	r2, #0
    socket_ptr -> nx_tcp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8007868:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
    socket_ptr -> nx_tcp_socket_timeout_rate =         _nx_tcp_transmit_timer_rate;
 800786c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007870:	4648      	mov	r0, r9
    socket_ptr -> nx_tcp_socket_time_to_live =  time_to_live;
 8007872:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007874:	f04f 31ff 	mov.w	r1, #4294967295
    socket_ptr -> nx_tcp_socket_connect_mss =  NX_TCP_MSS_SIZE;
 8007878:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
    socket_ptr -> nx_tcp_socket_time_to_live =  time_to_live;
 800787c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    socket_ptr -> nx_tcp_urgent_data_callback = tcp_urgent_data_callback;
 8007880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    socket_ptr -> nx_tcp_socket_timeout_max_retries =  NX_TCP_MAXIMUM_RETRIES;
 8007882:	f8c4 c0e4 	str.w	ip, [r4, #228]	; 0xe4
    socket_ptr -> nx_tcp_urgent_data_callback = tcp_urgent_data_callback;
 8007886:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    socket_ptr -> nx_tcp_disconnect_callback =  tcp_disconnect_callback;
 800788a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    socket_ptr -> nx_tcp_socket_client_type =  NX_TRUE;
 800788c:	60a5      	str	r5, [r4, #8]
    socket_ptr -> nx_tcp_disconnect_callback =  tcp_disconnect_callback;
 800788e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    socket_ptr -> nx_tcp_socket_ack_n_packet_counter = 1;
 8007892:	6765      	str	r5, [r4, #116]	; 0x74
    socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 8007894:	6465      	str	r5, [r4, #68]	; 0x44
    socket_ptr -> nx_tcp_socket_timeout_shift =        NX_TCP_RETRY_SHIFT;
 8007896:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800789a:	66a2      	str	r2, [r4, #104]	; 0x68
    socket_ptr -> nx_tcp_receive_callback =  NX_NULL;
 800789c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum_default =  NX_TCP_MAXIMUM_TX_QUEUE;
 80078a0:	f8c4 7134 	str.w	r7, [r4, #308]	; 0x134
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum =          NX_TCP_MAXIMUM_TX_QUEUE;
 80078a4:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
    socket_ptr -> nx_tcp_socket_type_of_service =  type_of_service;
 80078a8:	e9c4 682b 	strd	r6, r8, [r4, #172]	; 0xac
    socket_ptr -> nx_tcp_socket_rx_window_current =   window_size;
 80078ac:	e9c4 aa1f 	strd	sl, sl, [r4, #124]	; 0x7c
    socket_ptr -> nx_tcp_socket_tx_window_congestion = 0;
 80078b0:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80078b4:	f015 f920 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80078b8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80078bc:	b672      	cpsid	i

    /* Disable interrupts while we link the new TCP socket to the IP structure.  */
    TX_DISABLE

    /* Load the TCP ID field in the TCP control block.  */
    socket_ptr -> nx_tcp_socket_id =  NX_TCP_ID;
 80078be:	4915      	ldr	r1, [pc, #84]	; (8007914 <_nx_tcp_socket_create+0xec>)

    /* Place the new TCP control block on the list of created TCP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_tcp_created_sockets_ptr)
 80078c0:	f8d6 39b4 	ldr.w	r3, [r6, #2484]	; 0x9b4
    socket_ptr -> nx_tcp_socket_id =  NX_TCP_ID;
 80078c4:	6021      	str	r1, [r4, #0]
    if (ip_ptr -> nx_ip_tcp_created_sockets_ptr)
 80078c6:	b1cb      	cbz	r3, 80078fc <_nx_tcp_socket_create+0xd4>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_tcp_created_sockets_ptr) -> nx_tcp_socket_created_previous;
 80078c8:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c

        /* Place the new TCP socket control block in the list.  */
        (ip_ptr -> nx_ip_tcp_created_sockets_ptr) -> nx_tcp_socket_created_previous =  socket_ptr;
 80078cc:	f8c3 411c 	str.w	r4, [r3, #284]	; 0x11c
        tail_ptr ->  nx_tcp_socket_created_next =  socket_ptr;
 80078d0:	f8c1 4118 	str.w	r4, [r1, #280]	; 0x118

        /* Setup this TCP socket's created links.  */
        socket_ptr -> nx_tcp_socket_created_previous =  tail_ptr;
 80078d4:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
        socket_ptr -> nx_tcp_socket_created_next =      ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 80078d8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
        socket_ptr -> nx_tcp_socket_created_previous =  socket_ptr;
        socket_ptr -> nx_tcp_socket_created_next =      socket_ptr;
    }

    /* Increment the created TCP socket counter.  */
    ip_ptr -> nx_ip_tcp_created_sockets_count++;
 80078dc:	f8d6 39b8 	ldr.w	r3, [r6, #2488]	; 0x9b8

#ifdef FEATURE_NX_IPV6
    socket_ptr -> nx_tcp_socket_ipv6_addr   =             NX_NULL;
 80078e0:	2500      	movs	r5, #0
    ip_ptr -> nx_ip_tcp_created_sockets_count++;
 80078e2:	3301      	adds	r3, #1
 80078e4:	f8c6 39b8 	str.w	r3, [r6, #2488]	; 0x9b8
    socket_ptr -> nx_tcp_socket_ipv6_addr   =             NX_NULL;
 80078e8:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80078ec:	f382 8810 	msr	PRIMASK, r2
#endif /* NX_IPSEC_ENABLE */
    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80078f0:	4648      	mov	r0, r9
 80078f2:	f015 f9eb 	bl	801cccc <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 80078f6:	4628      	mov	r0, r5
 80078f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ip_ptr -> nx_ip_tcp_created_sockets_ptr =       socket_ptr;
 80078fc:	f8c6 49b4 	str.w	r4, [r6, #2484]	; 0x9b4
        socket_ptr -> nx_tcp_socket_created_previous =  socket_ptr;
 8007900:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
        socket_ptr -> nx_tcp_socket_created_next =      socket_ptr;
 8007904:	f8c4 4118 	str.w	r4, [r4, #280]	; 0x118
 8007908:	e7e8      	b.n	80078dc <_nx_tcp_socket_create+0xb4>
 800790a:	bf00      	nop
 800790c:	200078c0 	.word	0x200078c0
 8007910:	200078b8 	.word	0x200078b8
 8007914:	54435020 	.word	0x54435020

08007918 <_nx_tcp_socket_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_delete(NX_TCP_SOCKET *socket_ptr)
{
 8007918:	b570      	push	{r4, r5, r6, lr}

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800791a:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
{
 800791e:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_DELETE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, 0, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007920:	f04f 31ff 	mov.w	r1, #4294967295
 8007924:	f206 653c 	addw	r5, r6, #1596	; 0x63c
 8007928:	4628      	mov	r0, r5
 800792a:	f015 f8e5 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket has been created.  */
    if (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID)
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <_nx_tcp_socket_delete+0x90>)
 8007932:	429a      	cmp	r2, r3
 8007934:	d12d      	bne.n	8007992 <_nx_tcp_socket_delete+0x7a>
        /* Return a not created error code.  */
        return(NX_NOT_CREATED);
    }

    /* Determine if the socket is still bound to port.  */
    if ((socket_ptr -> nx_tcp_socket_bound_next) ||
 8007936:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800793a:	bb2b      	cbnz	r3, 8007988 <_nx_tcp_socket_delete+0x70>
 800793c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8007940:	bb13      	cbnz	r3, 8007988 <_nx_tcp_socket_delete+0x70>
        (socket_ptr -> nx_tcp_socket_bind_in_progress) ||
 8007942:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007944:	2a01      	cmp	r2, #1
 8007946:	d11f      	bne.n	8007988 <_nx_tcp_socket_delete+0x70>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007948:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800794c:	b672      	cpsid	i

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_tcp_socket_id =  0;

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_tcp_socket_created_next)
 800794e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    socket_ptr -> nx_tcp_socket_id =  0;
 8007952:	6023      	str	r3, [r4, #0]
    if (socket_ptr == socket_ptr -> nx_tcp_socket_created_next)
 8007954:	42a2      	cmp	r2, r4
 8007956:	d023      	beq.n	80079a0 <_nx_tcp_socket_delete+0x88>
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_tcp_socket_created_next) -> nx_tcp_socket_created_previous =
            socket_ptr -> nx_tcp_socket_created_previous;
 8007958:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
        (socket_ptr -> nx_tcp_socket_created_previous) -> nx_tcp_socket_created_next =
            socket_ptr -> nx_tcp_socket_created_next;

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_tcp_created_sockets_ptr == socket_ptr)
 800795c:	f8d6 39b4 	ldr.w	r3, [r6, #2484]	; 0x9b4
        (socket_ptr -> nx_tcp_socket_created_next) -> nx_tcp_socket_created_previous =
 8007960:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
        if (ip_ptr -> nx_ip_tcp_created_sockets_ptr == socket_ptr)
 8007964:	42a3      	cmp	r3, r4
        (socket_ptr -> nx_tcp_socket_created_previous) -> nx_tcp_socket_created_next =
 8007966:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
 800796a:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
        if (ip_ptr -> nx_ip_tcp_created_sockets_ptr == socket_ptr)
 800796e:	d015      	beq.n	800799c <_nx_tcp_socket_delete+0x84>
            ip_ptr -> nx_ip_tcp_created_sockets_ptr =  socket_ptr -> nx_tcp_socket_created_next;
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_tcp_created_sockets_count--;
 8007970:	f8d6 39b8 	ldr.w	r3, [r6, #2488]	; 0x9b8
 8007974:	3b01      	subs	r3, #1
 8007976:	f8c6 39b8 	str.w	r3, [r6, #2488]	; 0x9b8
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800797a:	f381 8810 	msr	PRIMASK, r1

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(ip_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800797e:	4628      	mov	r0, r5
 8007980:	f015 f9a4 	bl	801cccc <_tx_mutex_put>

    /* Return success.  */
    return(NX_SUCCESS);
 8007984:	2000      	movs	r0, #0
}
 8007986:	bd70      	pop	{r4, r5, r6, pc}
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007988:	4628      	mov	r0, r5
 800798a:	f015 f99f 	bl	801cccc <_tx_mutex_put>
        return(NX_STILL_BOUND);
 800798e:	2042      	movs	r0, #66	; 0x42
}
 8007990:	bd70      	pop	{r4, r5, r6, pc}
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007992:	4628      	mov	r0, r5
 8007994:	f015 f99a 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_CREATED);
 8007998:	2027      	movs	r0, #39	; 0x27
}
 800799a:	bd70      	pop	{r4, r5, r6, pc}
            ip_ptr -> nx_ip_tcp_created_sockets_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 800799c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80079a0:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
 80079a4:	e7e4      	b.n	8007970 <_nx_tcp_socket_delete+0x58>
 80079a6:	bf00      	nop
 80079a8:	54435020 	.word	0x54435020

080079ac <_nx_tcp_socket_disconnect>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_disconnect(NX_TCP_SOCKET *socket_ptr, ULONG wait_option)
{
 80079ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif
UINT          status;
NX_IP        *ip_ptr;

    /* Setup IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 80079b0:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
{
 80079b4:	4604      	mov	r4, r0
 80079b6:	b089      	sub	sp, #36	; 0x24
 80079b8:	4688      	mov	r8, r1

    /* Default status to success.  */
    status =  NX_SUCCESS;

    /* Obtain the IP mutex so we can access socket and IP information.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80079ba:	f205 663c 	addw	r6, r5, #1596	; 0x63c
 80079be:	f04f 31ff 	mov.w	r1, #4294967295
 80079c2:	4630      	mov	r0, r6
 80079c4:	f015 f898 	bl	801caf8 <_tx_mutex_get>
    /* Increment the TCP disconnections count.  */
    ip_ptr -> nx_ip_tcp_disconnections++;
#endif

    /* Determine if the socket is in a state not valid for a disconnect.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED) &&
 80079c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80079ca:	1ed3      	subs	r3, r2, #3
        (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) &&
        (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED) &&
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	f200 8090 	bhi.w	8007af2 <_nx_tcp_socket_disconnect+0x146>
    socket_ptr -> nx_tcp_socket_keepalive_timeout =  0;
    socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
#endif

    /* Determine if the connection wasn't fully completed.  */
    if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d957      	bls.n	8007a86 <_nx_tcp_socket_disconnect+0xda>
 80079d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48

#ifndef NX_DISABLE_RESET_DISCONNECT

    /* Determine if there is no timeout associated with the disconnect. If this is the case,
       we will send a RST and simply enter a closed state.  */
    else if (wait_option == NX_NO_WAIT)
 80079d8:	f1b8 0f00 	cmp.w	r8, #0
 80079dc:	d05e      	beq.n	8007a9c <_nx_tcp_socket_disconnect+0xf0>
    }
#endif

    /* Determine if this is an active disconnect, i.e. initiated by the application rather
       than in response to a disconnect from the connected socket.  */
    else if (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSE_WAIT)
 80079de:	2a06      	cmp	r2, #6
 80079e0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 80079e4:	d07a      	beq.n	8007adc <_nx_tcp_socket_disconnect+0x130>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_FIN_WAIT_1, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move the TCP state to FIN WAIT 1 state, the first state of an active close.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_1;
 80079e6:	2207      	movs	r2, #7
 80079e8:	6462      	str	r2, [r4, #68]	; 0x44

        /* Determine if the transmit queue is empty.  Only setup a FIN timeout here when
           there are no more transmit packets waiting to be ACKed.  If there are transmit
           packets still waiting, the FIN timeout will be setup when the transmit queue is completely
           acknowledged.  */
        if (socket_ptr -> nx_tcp_socket_transmit_sent_head == NX_NULL)
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d07a      	beq.n	8007ae4 <_nx_tcp_socket_disconnect+0x138>
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
        }

        /* Increment the sequence number.  */
        socket_ptr -> nx_tcp_socket_tx_sequence++;
 80079ee:	1c4b      	adds	r3, r1, #1

        /* Send FIN packet.  */
        _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80079f0:	4620      	mov	r0, r4
    status =  NX_SUCCESS;
 80079f2:	2700      	movs	r7, #0
        socket_ptr -> nx_tcp_socket_tx_sequence++;
 80079f4:	64a3      	str	r3, [r4, #72]	; 0x48
        _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80079f6:	f7ff fc85 	bl	8007304 <_nx_tcp_packet_send_fin>
 80079fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80079fc:	3b01      	subs	r3, #1
    }

    /* Optionally suspend the thread.  If timeout occurs, return a disconnect timeout status.  If
       immediate response is selected, return a disconnect in progress status.  Only on a real
       disconnect should success be returned.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_LISTEN_STATE) &&
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d91c      	bls.n	8007a3c <_nx_tcp_socket_disconnect+0x90>
#ifdef NX_DISABLE_RESET_DISCONNECT
        (wait_option) &&
#endif
        (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 8007a02:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8007b3c <_nx_tcp_socket_disconnect+0x190>
 8007a06:	f505 65d3 	add.w	r5, r5, #1688	; 0x698
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_LISTEN_STATE) &&
 8007a0a:	f8d9 3000 	ldr.w	r3, [r9]
 8007a0e:	42ab      	cmp	r3, r5
 8007a10:	d014      	beq.n	8007a3c <_nx_tcp_socket_disconnect+0x90>
    {

        /* Suspend the thread on socket disconnect.  */
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), _nx_tcp_disconnect_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8007a12:	4633      	mov	r3, r6
 8007a14:	4622      	mov	r2, r4
 8007a16:	4948      	ldr	r1, [pc, #288]	; (8007b38 <_nx_tcp_socket_disconnect+0x18c>)
 8007a18:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8007a1c:	f8cd 8000 	str.w	r8, [sp]
 8007a20:	f000 fe54 	bl	80086cc <_nx_tcp_socket_thread_suspend>

        /* Reobtain the IP mutex.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007a24:	f04f 31ff 	mov.w	r1, #4294967295
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f015 f865 	bl	801caf8 <_tx_mutex_get>

        /* Determine if the socket is in the timed wait state.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_TIMED_WAIT)
 8007a2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a30:	2b0a      	cmp	r3, #10
 8007a32:	d14f      	bne.n	8007ad4 <_nx_tcp_socket_disconnect+0x128>
            /* Cleanup the transmission control block.  */
            _nx_tcp_socket_block_cleanup(socket_ptr);
        }

        /* Use the thread return the completion code.  */
        status =  _tx_thread_current_ptr -> tx_thread_suspend_status;
 8007a34:	f8d9 3000 	ldr.w	r3, [r9]
 8007a38:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
    }

    /* We now need to check for any remaining sent packets in the transmit queue.
       If found they need to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_head)
 8007a3c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8007a40:	b113      	cbz	r3, 8007a48 <_nx_tcp_socket_disconnect+0x9c>
    {

        /* Release all transmit packets.  */
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 fe74 	bl	8008730 <_nx_tcp_socket_transmit_queue_flush>
    }

    /* Clear any connection suspension on this socket.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 8007a48:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 8007a4c:	b130      	cbz	r0, 8007a5c <_nx_tcp_socket_disconnect+0xb0>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 8007a4e:	2100      	movs	r1, #0
 8007a50:	f00b f968 	bl	8012d24 <_nx_tcp_connect_cleanup>
 8007a54:	e002      	b.n	8007a5c <_nx_tcp_socket_disconnect+0xb0>
    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 8007a56:	2100      	movs	r1, #0
 8007a58:	f00b fd0e 	bl	8013478 <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8007a5c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d1f8      	bne.n	8007a56 <_nx_tcp_socket_disconnect+0xaa>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 8007a64:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8007a68:	b130      	cbz	r0, 8007a78 <_nx_tcp_socket_disconnect+0xcc>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	f000 fe8c 	bl	8008788 <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 8007a70:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d1f8      	bne.n	8007a6a <_nx_tcp_socket_disconnect+0xbe>
    }

    /* Release the IP protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f015 f927 	bl	801cccc <_tx_mutex_put>

    /* Return in-progress completion status.  */
    return(status);
}
 8007a7e:	4638      	mov	r0, r7
 8007a80:	b009      	add	sp, #36	; 0x24
 8007a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (socket_ptr -> nx_tcp_socket_client_type)
 8007a86:	68a7      	ldr	r7, [r4, #8]
 8007a88:	b1cf      	cbz	r7, 8007abe <_nx_tcp_socket_disconnect+0x112>
            if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 8007a8a:	2a04      	cmp	r2, #4
 8007a8c:	d046      	beq.n	8007b1c <_nx_tcp_socket_disconnect+0x170>
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8007a8e:	2300      	movs	r3, #0
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 8007a90:	2201      	movs	r2, #1
    status =  NX_SUCCESS;
 8007a92:	461f      	mov	r7, r3
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 8007a94:	6462      	str	r2, [r4, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8007a96:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8007a9a:	e7cf      	b.n	8007a3c <_nx_tcp_socket_disconnect+0x90>
        tcp_header.nx_tcp_sequence_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 8007a9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        tcp_header.nx_tcp_header_word_3 = NX_TCP_ACK_BIT;
 8007a9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
        tcp_header.nx_tcp_acknowledgment_number =  socket_ptr -> nx_tcp_socket_tx_sequence;
 8007aa2:	9105      	str	r1, [sp, #20]
        _nx_tcp_packet_send_rst(socket_ptr, &tcp_header);
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	a903      	add	r1, sp, #12
        tcp_header.nx_tcp_sequence_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 8007aa8:	9304      	str	r3, [sp, #16]
        tcp_header.nx_tcp_header_word_3 = NX_TCP_ACK_BIT;
 8007aaa:	9206      	str	r2, [sp, #24]
        _nx_tcp_packet_send_rst(socket_ptr, &tcp_header);
 8007aac:	f00b fcc6 	bl	801343c <_nx_tcp_packet_send_rst>
        _nx_tcp_socket_block_cleanup(socket_ptr);
 8007ab0:	4620      	mov	r0, r4
        status =  NX_IN_PROGRESS;
 8007ab2:	2737      	movs	r7, #55	; 0x37
        _nx_tcp_socket_block_cleanup(socket_ptr);
 8007ab4:	f7ff fe66 	bl	8007784 <_nx_tcp_socket_block_cleanup>
 8007ab8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007aba:	3b01      	subs	r3, #1
 8007abc:	e79f      	b.n	80079fe <_nx_tcp_socket_disconnect+0x52>
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED) &&
 8007abe:	2a04      	cmp	r2, #4
 8007ac0:	d01c      	beq.n	8007afc <_nx_tcp_socket_disconnect+0x150>
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 8007ac2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8007ac4:	2102      	movs	r1, #2
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8007ac6:	2200      	movs	r2, #0
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 8007ac8:	3b01      	subs	r3, #1
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8007aca:	6461      	str	r1, [r4, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8007acc:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 8007ad0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007ad2:	e7b3      	b.n	8007a3c <_nx_tcp_socket_disconnect+0x90>
            _nx_tcp_socket_block_cleanup(socket_ptr);
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f7ff fe55 	bl	8007784 <_nx_tcp_socket_block_cleanup>
 8007ada:	e7ab      	b.n	8007a34 <_nx_tcp_socket_disconnect+0x88>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LAST_ACK;
 8007adc:	220b      	movs	r2, #11
 8007ade:	6462      	str	r2, [r4, #68]	; 0x44
        if (socket_ptr -> nx_tcp_socket_transmit_sent_head == NX_NULL)
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d184      	bne.n	80079ee <_nx_tcp_socket_disconnect+0x42>
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8007ae4:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8007ae8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8007aec:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 8007af0:	e77d      	b.n	80079ee <_nx_tcp_socket_disconnect+0x42>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007af2:	4630      	mov	r0, r6
        return(NX_NOT_CONNECTED);
 8007af4:	2738      	movs	r7, #56	; 0x38
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007af6:	f015 f8e9 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_CONNECTED);
 8007afa:	e7c0      	b.n	8007a7e <_nx_tcp_socket_disconnect+0xd2>
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED) &&
 8007afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0df      	beq.n	8007ac2 <_nx_tcp_socket_disconnect+0x116>
                socket_ptr -> nx_tcp_socket_tx_sequence++;
 8007b02:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8007b04:	4620      	mov	r0, r4
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate;
 8007b06:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
                socket_ptr -> nx_tcp_socket_tx_sequence++;
 8007b0a:	1c4a      	adds	r2, r1, #1
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8007b0c:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate;
 8007b10:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
                socket_ptr -> nx_tcp_socket_tx_sequence++;
 8007b14:	64a2      	str	r2, [r4, #72]	; 0x48
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8007b16:	f7ff fbf5 	bl	8007304 <_nx_tcp_packet_send_fin>
 8007b1a:	e7d2      	b.n	8007ac2 <_nx_tcp_socket_disconnect+0x116>
                socket_ptr -> nx_tcp_socket_tx_sequence++;
 8007b1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8007b1e:	2300      	movs	r3, #0
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate;
 8007b20:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
                socket_ptr -> nx_tcp_socket_tx_sequence++;
 8007b24:	1c4a      	adds	r2, r1, #1
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8007b26:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate;
 8007b2a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8007b2e:	4620      	mov	r0, r4
                socket_ptr -> nx_tcp_socket_tx_sequence++;
 8007b30:	64a2      	str	r2, [r4, #72]	; 0x48
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8007b32:	f7ff fbe7 	bl	8007304 <_nx_tcp_packet_send_fin>
 8007b36:	e7aa      	b.n	8007a8e <_nx_tcp_socket_disconnect+0xe2>
 8007b38:	08012ec1 	.word	0x08012ec1
 8007b3c:	20007a80 	.word	0x20007a80

08007b40 <_nx_tcp_socket_mss_get>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_mss_get(NX_TCP_SOCKET *socket_ptr, ULONG *mss)
{
 8007b40:	b570      	push	{r4, r5, r6, lr}

    /* Setup IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;

    /* Obtain the IP mutex so we can examine the bound port.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007b42:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
{
 8007b46:	4605      	mov	r5, r0
 8007b48:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8007b4e:	f204 643c 	addw	r4, r4, #1596	; 0x63c
 8007b52:	4620      	mov	r0, r4
 8007b54:	f014 ffd0 	bl	801caf8 <_tx_mutex_get>

    if (socket_ptr -> nx_tcp_socket_state < NX_TCP_ESTABLISHED)
 8007b58:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d807      	bhi.n	8007b6e <_nx_tcp_socket_mss_get+0x2e>
    {

        /* The socket is not connected. */
        if (socket_ptr -> nx_tcp_socket_mss)
 8007b5e:	692b      	ldr	r3, [r5, #16]
 8007b60:	b13b      	cbz	r3, 8007b72 <_nx_tcp_socket_mss_get+0x32>
    }
    else
    {

        /* Pickup SMSS value.  */
        *mss =  socket_ptr -> nx_tcp_socket_connect_mss;
 8007b62:	6033      	str	r3, [r6, #0]
    }

    /* Release protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007b64:	4620      	mov	r0, r4
 8007b66:	f015 f8b1 	bl	801cccc <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_MSS_GET, ip_ptr, socket_ptr, *mss, socket_ptr -> nx_tcp_socket_state, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Return successful completion status.  */
    return(NX_SUCCESS);
}
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	bd70      	pop	{r4, r5, r6, pc}
        *mss =  socket_ptr -> nx_tcp_socket_connect_mss;
 8007b6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007b70:	e7f7      	b.n	8007b62 <_nx_tcp_socket_mss_get+0x22>
            *mss = NX_TCP_MSS_SIZE;
 8007b72:	f240 53b4 	movw	r3, #1460	; 0x5b4
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007b76:	4620      	mov	r0, r4
            *mss = NX_TCP_MSS_SIZE;
 8007b78:	6033      	str	r3, [r6, #0]
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007b7a:	f015 f8a7 	bl	801cccc <_tx_mutex_put>
}
 8007b7e:	2000      	movs	r0, #0
 8007b80:	bd70      	pop	{r4, r5, r6, pc}
 8007b82:	bf00      	nop

08007b84 <_nx_tcp_socket_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_receive(NX_TCP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 8007b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8007b88:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
{
 8007b8c:	4688      	mov	r8, r1

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8007b8e:	2700      	movs	r7, #0
{
 8007b90:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_RECEIVE, socket_ptr, 0, 0, 0, NX_TRACE_TCP_EVENTS, &trace_event, &trace_timestamp);

    /* Get protection while we look at this socket.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007b92:	f205 663c 	addw	r6, r5, #1596	; 0x63c
{
 8007b96:	b083      	sub	sp, #12
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007b98:	f04f 31ff 	mov.w	r1, #4294967295
    *packet_ptr =   NX_NULL;
 8007b9c:	f8c8 7000 	str.w	r7, [r8]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007ba0:	4630      	mov	r0, r6
{
 8007ba2:	4691      	mov	r9, r2
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007ba4:	f014 ffa8 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket is currently bound.  */
    if (!socket_ptr ->  nx_tcp_socket_bound_next)
 8007ba8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d07b      	beq.n	8007ca8 <_nx_tcp_socket_receive+0x124>
        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
    }

    /* Do not return without data if there is data on the queue. */
    if (!socket_ptr -> nx_tcp_socket_receive_queue_head)
 8007bb0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8007bb4:	b34a      	cbz	r2, 8007c0a <_nx_tcp_socket_receive+0x86>
        head_packet_ptr =  NX_NULL;
    }

    /* Determine if there is a receive packet available.  */
    /*lint -e{923} suppress cast of ULONT to pointer.  */
    if ((head_packet_ptr) && (head_packet_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_PACKET_READY)))
 8007bb6:	69d3      	ldr	r3, [r2, #28]
 8007bb8:	f1b3 3fbb 	cmp.w	r3, #3149642683	; 0xbbbbbbbb
 8007bbc:	d032      	beq.n	8007c24 <_nx_tcp_socket_receive+0xa0>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));

        /* Return a successful status.  */
        return(NX_SUCCESS);
    }
    else if ((wait_option) && (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 8007bbe:	f1b9 0f00 	cmp.w	r9, #0
 8007bc2:	d01b      	beq.n	8007bfc <_nx_tcp_socket_receive+0x78>
 8007bc4:	4f3c      	ldr	r7, [pc, #240]	; (8007cb8 <_nx_tcp_socket_receive+0x134>)
 8007bc6:	f505 65d3 	add.w	r5, r5, #1688	; 0x698
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	42aa      	cmp	r2, r5
 8007bce:	d015      	beq.n	8007bfc <_nx_tcp_socket_receive+0x78>

        /* Save the return packet pointer address as well.  */
        _tx_thread_current_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;

        /* Increment the suspended thread count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count++;
 8007bd0:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc

        /* Suspend the thread on the receive queue.  */
        /* Note that the mutex is released inside _nx_tcp_socket_thread_suspend(). */
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), _nx_tcp_receive_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8007bd4:	4633      	mov	r3, r6
        _tx_thread_current_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8007bd6:	f8c2 807c 	str.w	r8, [r2, #124]	; 0x7c
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), _nx_tcp_receive_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8007bda:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
        socket_ptr -> nx_tcp_socket_receive_suspended_count++;
 8007bde:	3501      	adds	r5, #1
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), _nx_tcp_receive_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8007be0:	f8cd 9000 	str.w	r9, [sp]
 8007be4:	4622      	mov	r2, r4
 8007be6:	4935      	ldr	r1, [pc, #212]	; (8007cbc <_nx_tcp_socket_receive+0x138>)
        socket_ptr -> nx_tcp_socket_receive_suspended_count++;
 8007be8:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), _nx_tcp_receive_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8007bec:	f000 fd6e 	bl	80086cc <_nx_tcp_socket_thread_suspend>
            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_TCP_SOCKET_RECEIVE, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length, socket_ptr -> nx_tcp_socket_rx_sequence);
        }
#endif /* TX_ENABLE_EVENT_TRACE */
        /* If not, just return the error code.  */
        return(_tx_thread_current_ptr -> tx_thread_suspend_status);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));

        /* Return an empty receive queue error message.  */
        return(NX_NO_PACKET);
    }
}
 8007bf6:	b003      	add	sp, #12
 8007bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f015 f865 	bl	801cccc <_tx_mutex_put>
        return(NX_NO_PACKET);
 8007c02:	2001      	movs	r0, #1
}
 8007c04:	b003      	add	sp, #12
 8007c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((socket_ptr -> nx_tcp_socket_state < NX_TCP_SYN_SENT)   ||
 8007c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c0c:	1eda      	subs	r2, r3, #3
            (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSE_WAIT) ||
 8007c0e:	2a05      	cmp	r2, #5
 8007c10:	d801      	bhi.n	8007c16 <_nx_tcp_socket_receive+0x92>
 8007c12:	2b06      	cmp	r3, #6
 8007c14:	d1d3      	bne.n	8007bbe <_nx_tcp_socket_receive+0x3a>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007c16:	4630      	mov	r0, r6
 8007c18:	f015 f858 	bl	801cccc <_tx_mutex_put>
            return(NX_NOT_CONNECTED);
 8007c1c:	2038      	movs	r0, #56	; 0x38
}
 8007c1e:	b003      	add	sp, #12
 8007c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        header_ptr =  (NX_TCP_HEADER *)head_packet_ptr -> nx_packet_prepend_ptr;
 8007c24:	6890      	ldr	r0, [r2, #8]
        head_packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8007c26:	f04f 3eaa 	mov.w	lr, #2863311530	; 0xaaaaaaaa
        if (head_packet_ptr == socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8007c2a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
        head_packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007c2e:	f04f 0c00 	mov.w	ip, #0
        header_length =  (header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8007c32:	68c1      	ldr	r1, [r0, #12]
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8007c34:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        if (head_packet_ptr == socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8007c38:	429a      	cmp	r2, r3
        header_length =  (header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8007c3a:	ea4f 7111 	mov.w	r1, r1, lsr #28
        head_packet_ptr -> nx_packet_length =       head_packet_ptr -> nx_packet_length - header_length;
 8007c3e:	6a53      	ldr	r3, [r2, #36]	; 0x24
            socket_ptr -> nx_tcp_socket_receive_queue_head =  head_packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8007c40:	bf18      	it	ne
 8007c42:	6a17      	ldrne	r7, [r2, #32]
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8007c44:	f105 35ff 	add.w	r5, r5, #4294967295
        header_length =  (header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8007c48:	ea4f 0181 	mov.w	r1, r1, lsl #2
            socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 8007c4c:	bf08      	it	eq
 8007c4e:	f8c4 70c4 	streq.w	r7, [r4, #196]	; 0xc4
 8007c52:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
        head_packet_ptr -> nx_packet_prepend_ptr =  head_packet_ptr -> nx_packet_prepend_ptr + header_length;
 8007c56:	4408      	add	r0, r1
        head_packet_ptr -> nx_packet_length =       head_packet_ptr -> nx_packet_length - header_length;
 8007c58:	1a5b      	subs	r3, r3, r1
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8007c5a:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 8007c5e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
        head_packet_ptr -> nx_packet_prepend_ptr =  head_packet_ptr -> nx_packet_prepend_ptr + header_length;
 8007c60:	6090      	str	r0, [r2, #8]
        head_packet_ptr -> nx_packet_length =       head_packet_ptr -> nx_packet_length - header_length;
 8007c62:	6253      	str	r3, [r2, #36]	; 0x24
        head_packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007c64:	e9c2 ce07 	strd	ip, lr, [r2, #28]
        *packet_ptr =  head_packet_ptr;
 8007c68:	f8c8 2000 	str.w	r2, [r8]
        if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 8007c6c:	b30d      	cbz	r5, 8007cb2 <_nx_tcp_socket_receive+0x12e>
            socket_ptr -> nx_tcp_socket_rx_window_current += (*packet_ptr) -> nx_packet_length;
 8007c6e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007c72:	4413      	add	r3, r2
        if (((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2)) &&
 8007c74:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007c78:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8007c82:	d305      	bcc.n	8007c90 <_nx_tcp_socket_receive+0x10c>
            ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) || (socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) || (socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_2)))
 8007c84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c86:	1fda      	subs	r2, r3, #7
 8007c88:	2a01      	cmp	r2, #1
 8007c8a:	d908      	bls.n	8007c9e <_nx_tcp_socket_receive+0x11a>
 8007c8c:	2b05      	cmp	r3, #5
 8007c8e:	d006      	beq.n	8007c9e <_nx_tcp_socket_receive+0x11a>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007c90:	4630      	mov	r0, r6
 8007c92:	f015 f81b 	bl	801cccc <_tx_mutex_put>
        return(NX_SUCCESS);
 8007c96:	2000      	movs	r0, #0
}
 8007c98:	b003      	add	sp, #12
 8007c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8007c9e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f7ff fa31 	bl	8007108 <_nx_tcp_packet_send_ack>
 8007ca6:	e7f3      	b.n	8007c90 <_nx_tcp_socket_receive+0x10c>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f015 f80f 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_BOUND);
 8007cae:	2024      	movs	r0, #36	; 0x24
 8007cb0:	e7a1      	b.n	8007bf6 <_nx_tcp_socket_receive+0x72>
            socket_ptr -> nx_tcp_socket_rx_window_current =  socket_ptr -> nx_tcp_socket_rx_window_default;
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	e7de      	b.n	8007c74 <_nx_tcp_socket_receive+0xf0>
 8007cb6:	bf00      	nop
 8007cb8:	20007a80 	.word	0x20007a80
 8007cbc:	08013479 	.word	0x08013479

08007cc0 <_nx_tcp_socket_receive_queue_flush>:

    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 8007cc0:	2300      	movs	r3, #0
    packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 8007cc2:	e9d0 122f 	ldrd	r1, r2, [r0, #188]	; 0xbc
    socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 8007cc6:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
    socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 8007cca:	b189      	cbz	r1, 8007cf0 <_nx_tcp_socket_receive_queue_flush+0x30>
{
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	4604      	mov	r4, r0
        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;

        /* Mark it as allocated so it will be released.  */
        /*lint -e{923} suppress cast of ULONT to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8007cd0:	f04f 36aa 	mov.w	r6, #2863311530	; 0xaaaaaaaa
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8007cd4:	6a15      	ldr	r5, [r2, #32]

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8007cd6:	4610      	mov	r0, r2
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8007cd8:	6216      	str	r6, [r2, #32]
        _nx_packet_release(packet_ptr);
 8007cda:	f7fe fe89 	bl	80069f0 <_nx_packet_release>

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8007cde:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        packet_ptr =  next_packet_ptr;
 8007ce2:	462a      	mov	r2, r5
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f2      	bne.n	8007cd4 <_nx_tcp_socket_receive_queue_flush+0x14>
    }
}
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop

08007cf4 <_nx_tcp_socket_retransmit>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_retransmit(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, UINT need_fast_retransmit)
{
 8007cf4:	460b      	mov	r3, r1
       RFC 793 Sec 3.7, p42: keep send new data.

       In the zero window probe phase, we send the zero window probe, and increase
       exponentially the interval between successive probes.
       RFC 1122 Sec 4.2.2.17, p92.  */
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 8007cf6:	6e09      	ldr	r1, [r1, #96]	; 0x60
{
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	f8d3 b0d0 	ldr.w	fp, [r3, #208]	; 0xd0
 8007d00:	b08b      	sub	sp, #44	; 0x2c
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 8007d02:	2900      	cmp	r1, #0
 8007d04:	d149      	bne.n	8007d9a <_nx_tcp_socket_retransmit+0xa6>
    {

        /* Pickup the head of the transmit queue.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;

        if (packet_ptr)
 8007d06:	f1bb 0f00 	cmp.w	fp, #0
 8007d0a:	f000 812b 	beq.w	8007f64 <_nx_tcp_socket_retransmit+0x270>
        {

        /* Get one byte from send queue. */
        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_TCP_HEADER *header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007d0e:	f8db 4008 	ldr.w	r4, [fp, #8]

            /* Get sequence number and first byte. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));

            /* Now set zero window probe started. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 8007d12:	f04f 0c01 	mov.w	ip, #1
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d16:	68e5      	ldr	r5, [r4, #12]
 8007d18:	4667      	mov	r7, ip
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d1a:	6862      	ldr	r2, [r4, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d1c:	ea85 4035 	eor.w	r0, r5, r5, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d20:	ea82 4132 	eor.w	r1, r2, r2, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d24:	0a00      	lsrs	r0, r0, #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d26:	0a09      	lsrs	r1, r1, #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d28:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d2c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d30:	ea80 2035 	eor.w	r0, r0, r5, ror #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d34:	ea81 2132 	eor.w	r1, r1, r2, ror #8
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d38:	ea80 4530 	eor.w	r5, r0, r0, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d3c:	60e0      	str	r0, [r4, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d3e:	ea81 4631 	eor.w	r6, r1, r1, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d42:	6061      	str	r1, [r4, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d44:	0a2d      	lsrs	r5, r5, #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d46:	0a36      	lsrs	r6, r6, #8
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 8007d48:	0f02      	lsrs	r2, r0, #28
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d4a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d4e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 8007d52:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d56:	ea85 2030 	eor.w	r0, r5, r0, ror #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d5a:	ea86 2631 	eor.w	r6, r6, r1, ror #8
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
 8007d5e:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 8007d62:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 8007d66:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8007d6a:	6066      	str	r6, [r4, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007d6c:	60e0      	str	r0, [r4, #12]

        /* In the zero window probe phase, we send the zero window probe, and increase
           exponentially the interval between successive probes.  */

        /* Increment the retry counter.  */
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 8007d6e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;

        /* Setup the next timeout.  */
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8007d72:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 8007d76:	3001      	adds	r0, #1
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8007d78:	f8d3 50dc 	ldr.w	r5, [r3, #220]	; 0xdc
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;
 8007d7c:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8007d80:	fb04 f400 	mul.w	r4, r4, r0
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 8007d84:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0

        /* Send the zero window probe.  */
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 8007d88:	4618      	mov	r0, r3
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8007d8a:	40a5      	lsls	r5, r4
 8007d8c:	f8c3 50d8 	str.w	r5, [r3, #216]	; 0xd8
        else
        {
            packet_ptr = next_ptr;
        }
    }
}
 8007d90:	b00b      	add	sp, #44	; 0x2c
 8007d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 8007d96:	f00b bb39 	b.w	801340c <_nx_tcp_packet_send_probe>
    else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE)
 8007d9a:	f893 10a8 	ldrb.w	r1, [r3, #168]	; 0xa8
 8007d9e:	2901      	cmp	r1, #1
 8007da0:	f000 80d0 	beq.w	8007f44 <_nx_tcp_socket_retransmit+0x250>
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 8007da4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 8007da8:	2a01      	cmp	r2, #1
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 8007daa:	f101 0101 	add.w	r1, r1, #1
 8007dae:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 8007db2:	d011      	beq.n	8007dd8 <_nx_tcp_socket_retransmit+0xe4>
 8007db4:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8007db8:	2a00      	cmp	r2, #0
 8007dba:	f040 80d0 	bne.w	8007f5e <_nx_tcp_socket_retransmit+0x26a>
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8007dbe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 8007dc0:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8007dc4:	0854      	lsrs	r4, r2, #1
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 8007dc6:	ea4f 0249 	mov.w	r2, r9, lsl #1
        socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 8007dca:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 8007dce:	42a2      	cmp	r2, r4
 8007dd0:	bf38      	it	cc
 8007dd2:	4622      	movcc	r2, r4
 8007dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8007dd6:	e011      	b.n	8007dfc <_nx_tcp_socket_retransmit+0x108>
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 8007dd8:	6add      	ldr	r5, [r3, #44]	; 0x2c
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8007dda:	6e9c      	ldr	r4, [r3, #104]	; 0x68
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 8007ddc:	006f      	lsls	r7, r5, #1
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8007dde:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8007de0:	0864      	lsrs	r4, r4, #1
            socket_ptr -> nx_tcp_socket_fast_recovery = NX_TRUE;
 8007de2:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 8007de6:	443d      	add	r5, r7
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8007de8:	3e01      	subs	r6, #1
 8007dea:	42bc      	cmp	r4, r7
 8007dec:	66de      	str	r6, [r3, #108]	; 0x6c
 8007dee:	bf38      	it	cc
 8007df0:	463c      	movcc	r4, r7
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 8007df2:	eb05 0904 	add.w	r9, r5, r4
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 8007df6:	641c      	str	r4, [r3, #64]	; 0x40
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 8007df8:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8007dfc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8007e00:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8007e04:	fb04 f101 	mul.w	r1, r4, r1
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8007e08:	408a      	lsls	r2, r1
 8007e0a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 8007e0e:	f1bb 0f00 	cmp.w	fp, #0
 8007e12:	f000 8111 	beq.w	8008038 <_nx_tcp_socket_retransmit+0x344>
 8007e16:	f8db 201c 	ldr.w	r2, [fp, #28]
 8007e1a:	f1b2 3fdd 	cmp.w	r2, #3722304989	; 0xdddddddd
 8007e1e:	f040 810b 	bne.w	8008038 <_nx_tcp_socket_retransmit+0x344>
        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 8007e22:	f8db e024 	ldr.w	lr, [fp, #36]	; 0x24
 8007e26:	f109 0214 	add.w	r2, r9, #20
 8007e2a:	4572      	cmp	r2, lr
 8007e2c:	f0c0 8104 	bcc.w	8008038 <_nx_tcp_socket_retransmit+0x344>
 8007e30:	9009      	str	r0, [sp, #36]	; 0x24
 8007e32:	4698      	mov	r8, r3
 8007e34:	e072      	b.n	8007f1c <_nx_tcp_socket_retransmit+0x228>
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8007e36:	2f06      	cmp	r7, #6
 8007e38:	f040 80fa 	bne.w	8008030 <_nx_tcp_socket_retransmit+0x33c>
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 8007e3c:	f108 0218 	add.w	r2, r8, #24
            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8007e40:	f88b 7030 	strb.w	r7, [fp, #48]	; 0x30
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 8007e44:	9208      	str	r2, [sp, #32]
            source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 8007e46:	f8d8 2138 	ldr.w	r2, [r8, #312]	; 0x138
 8007e4a:	3208      	adds	r2, #8
 8007e4c:	9207      	str	r2, [sp, #28]
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 8007e4e:	f8d8 c080 	ldr.w	ip, [r8, #128]	; 0x80
        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 8007e52:	497b      	ldr	r1, [pc, #492]	; (8008040 <_nx_tcp_socket_retransmit+0x34c>)
        header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007e54:	f8db 4008 	ldr.w	r4, [fp, #8]
        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 8007e58:	ea4c 0101 	orr.w	r1, ip, r1
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8007e5c:	f8d3 a040 	ldr.w	sl, [r3, #64]	; 0x40
        original_header_word_4 = header_ptr -> nx_tcp_header_word_4;
 8007e60:	6926      	ldr	r6, [r4, #16]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007e62:	ea81 4331 	eor.w	r3, r1, r1, ror #16
        header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 8007e66:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007e6a:	ea86 4036 	eor.w	r0, r6, r6, ror #16
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8007e6e:	f01a 0f04 	tst.w	sl, #4
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007e72:	9305      	str	r3, [sp, #20]
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 8007e74:	68e3      	ldr	r3, [r4, #12]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007e76:	ea4f 2010 	mov.w	r0, r0, lsr #8
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 8007e7a:	9306      	str	r3, [sp, #24]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007e7c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007e80:	9b05      	ldr	r3, [sp, #20]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007e82:	ea80 2036 	eor.w	r0, r0, r6, ror #8
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007e86:	ea4f 2313 	mov.w	r3, r3, lsr #8
        header_ptr -> nx_tcp_header_word_4 = header_ptr -> nx_tcp_header_word_4 & 0x0000FFFF;
 8007e8a:	b280      	uxth	r0, r0
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007e8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007e90:	ea83 2331 	eor.w	r3, r3, r1, ror #8
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 8007e94:	68a1      	ldr	r1, [r4, #8]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8007e96:	60e3      	str	r3, [r4, #12]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007e98:	ea40 4330 	orr.w	r3, r0, r0, ror #16
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 8007e9c:	9105      	str	r1, [sp, #20]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8007e9e:	ea82 4132 	eor.w	r1, r2, r2, ror #16
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007ea2:	ea4f 2313 	mov.w	r3, r3, lsr #8
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8007ea6:	ea4f 2111 	mov.w	r1, r1, lsr #8
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007eaa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8007eae:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007eb2:	ea83 2330 	eor.w	r3, r3, r0, ror #8
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8007eb6:	ea81 2132 	eor.w	r1, r1, r2, ror #8
 8007eba:	60a1      	str	r1, [r4, #8]
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 8007ebc:	f8c8 c084 	str.w	ip, [r8, #132]	; 0x84
        socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 8007ec0:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8007ec4:	6123      	str	r3, [r4, #16]
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8007ec6:	f000 8094 	beq.w	8007ff2 <_nx_tcp_socket_retransmit+0x2fe>
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 8007eca:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 8007ece:	f042 0204 	orr.w	r2, r2, #4
 8007ed2:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 8007ed6:	9a05      	ldr	r2, [sp, #20]
 8007ed8:	428a      	cmp	r2, r1
 8007eda:	d04d      	beq.n	8007f78 <_nx_tcp_socket_retransmit+0x284>
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007edc:	2300      	movs	r3, #0
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007ede:	2f04      	cmp	r7, #4
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007ee0:	f8cb 301c 	str.w	r3, [fp, #28]
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007ee4:	d057      	beq.n	8007f96 <_nx_tcp_socket_retransmit+0x2a2>
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8007ee6:	2f06      	cmp	r7, #6
 8007ee8:	d06d      	beq.n	8007fc6 <_nx_tcp_socket_retransmit+0x2d2>
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 8007eea:	f1b5 3fee 	cmp.w	r5, #4008636142	; 0xeeeeeeee
 8007eee:	f000 80a3 	beq.w	8008038 <_nx_tcp_socket_retransmit+0x344>
 8007ef2:	f898 30aa 	ldrb.w	r3, [r8, #170]	; 0xaa
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	f000 809e 	beq.w	8008038 <_nx_tcp_socket_retransmit+0x344>
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	f000 809b 	beq.w	8008038 <_nx_tcp_socket_retransmit+0x344>
 8007f02:	69eb      	ldr	r3, [r5, #28]
 8007f04:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 8007f08:	f040 8096 	bne.w	8008038 <_nx_tcp_socket_retransmit+0x344>
        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 8007f0c:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
 8007f10:	f109 0314 	add.w	r3, r9, #20
 8007f14:	46ab      	mov	fp, r5
 8007f16:	459e      	cmp	lr, r3
 8007f18:	f200 808e 	bhi.w	8008038 <_nx_tcp_socket_retransmit+0x344>
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007f1c:	f8d8 7014 	ldr.w	r7, [r8, #20]
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8007f20:	f1ce 0314 	rsb	r3, lr, #20
        next_ptr = packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8007f24:	f8db 5020 	ldr.w	r5, [fp, #32]
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007f28:	2f04      	cmp	r7, #4
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8007f2a:	4499      	add	r9, r3
 8007f2c:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007f30:	d181      	bne.n	8007e36 <_nx_tcp_socket_retransmit+0x142>
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 8007f32:	f103 0214 	add.w	r2, r3, #20
            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8007f36:	f88b 7030 	strb.w	r7, [fp, #48]	; 0x30
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 8007f3a:	9207      	str	r2, [sp, #28]
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 8007f3c:	f108 0218 	add.w	r2, r8, #24
 8007f40:	9208      	str	r2, [sp, #32]
 8007f42:	e784      	b.n	8007e4e <_nx_tcp_socket_retransmit+0x15a>
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 8007f44:	2100      	movs	r1, #0
    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 8007f46:	2a01      	cmp	r2, #1
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 8007f48:	f883 10a8 	strb.w	r1, [r3, #168]	; 0xa8
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 8007f4c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007f50:	f101 0101 	add.w	r1, r1, #1
 8007f54:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 8007f58:	f47f af2c 	bne.w	8007db4 <_nx_tcp_socket_retransmit+0xc0>
 8007f5c:	e73c      	b.n	8007dd8 <_nx_tcp_socket_retransmit+0xe4>
 8007f5e:	f8d3 9064 	ldr.w	r9, [r3, #100]	; 0x64
 8007f62:	e74b      	b.n	8007dfc <_nx_tcp_socket_retransmit+0x108>
        else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 8007f64:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8007f68:	2a00      	cmp	r2, #0
 8007f6a:	d065      	beq.n	8008038 <_nx_tcp_socket_retransmit+0x344>
 8007f6c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8007f70:	e9d3 7128 	ldrd	r7, r1, [r3, #160]	; 0xa0
 8007f74:	3701      	adds	r7, #1
 8007f76:	e6fa      	b.n	8007d6e <_nx_tcp_socket_retransmit+0x7a>
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 8007f78:	68e2      	ldr	r2, [r4, #12]
 8007f7a:	9906      	ldr	r1, [sp, #24]
 8007f7c:	428a      	cmp	r2, r1
 8007f7e:	d1ad      	bne.n	8007edc <_nx_tcp_socket_retransmit+0x1e8>
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 8007f80:	429e      	cmp	r6, r3
 8007f82:	d1ab      	bne.n	8007edc <_nx_tcp_socket_retransmit+0x1e8>
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 8007f84:	2301      	movs	r3, #1
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007f86:	2f04      	cmp	r7, #4
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 8007f88:	f88b 3031 	strb.w	r3, [fp, #49]	; 0x31
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	f8cb 301c 	str.w	r3, [fp, #28]
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8007f94:	d1a7      	bne.n	8007ee6 <_nx_tcp_socket_retransmit+0x1f2>
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 8007f96:	f44f 24c0 	mov.w	r4, #393216	; 0x60000
 8007f9a:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8007f9e:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007fa8:	9401      	str	r4, [sp, #4]
 8007faa:	f8d8 40b8 	ldr.w	r4, [r8, #184]	; 0xb8
 8007fae:	9003      	str	r0, [sp, #12]
 8007fb0:	9402      	str	r4, [sp, #8]
 8007fb2:	f8d8 40b4 	ldr.w	r4, [r8, #180]	; 0xb4
 8007fb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fb8:	9400      	str	r4, [sp, #0]
 8007fba:	f7fa f93d 	bl	8002238 <_nx_ip_packet_send>
 8007fbe:	f8d8 7014 	ldr.w	r7, [r8, #20]
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8007fc2:	2f06      	cmp	r7, #6
 8007fc4:	d191      	bne.n	8007eea <_nx_tcp_socket_retransmit+0x1f6>
            packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 8007fc6:	f8d8 1138 	ldr.w	r1, [r8, #312]	; 0x138
                                 socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8007fca:	f108 0418 	add.w	r4, r8, #24
            _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP,
 8007fce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007fd0:	463a      	mov	r2, r7
                                 socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
 8007fd2:	f101 0008 	add.w	r0, r1, #8
            packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 8007fd6:	f8cb 1034 	str.w	r1, [fp, #52]	; 0x34
            _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP,
 8007fda:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8007fde:	4659      	mov	r1, fp
 8007fe0:	9001      	str	r0, [sp, #4]
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	9402      	str	r4, [sp, #8]
 8007fe6:	f8d6 4ee8 	ldr.w	r4, [r6, #3816]	; 0xee8
 8007fea:	9400      	str	r4, [sp, #0]
 8007fec:	f00a f866 	bl	80120bc <_nx_ipv6_packet_send>
 8007ff0:	e77b      	b.n	8007eea <_nx_tcp_socket_retransmit+0x1f6>
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8007ff2:	9b08      	ldr	r3, [sp, #32]
 8007ff4:	4672      	mov	r2, lr
 8007ff6:	2106      	movs	r1, #6
 8007ff8:	4658      	mov	r0, fp
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	9b07      	ldr	r3, [sp, #28]
 8007ffe:	f7f9 ff71 	bl	8001ee4 <_nx_ip_checksum_compute>
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8008002:	6922      	ldr	r2, [r4, #16]
            checksum = ~checksum & NX_LOWER_16_MASK;
 8008004:	43c0      	mvns	r0, r0
 8008006:	f8d8 7014 	ldr.w	r7, [r8, #20]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800800a:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 800800e:	68a1      	ldr	r1, [r4, #8]
 8008010:	0a1b      	lsrs	r3, r3, #8
 8008012:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008016:	ea83 2332 	eor.w	r3, r3, r2, ror #8
            header_ptr -> nx_tcp_header_word_4 =  header_ptr -> nx_tcp_header_word_4 | (checksum << NX_SHIFT_BY_16);
 800801a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800801e:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 8008022:	0a1b      	lsrs	r3, r3, #8
 8008024:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008028:	ea83 2330 	eor.w	r3, r3, r0, ror #8
 800802c:	6123      	str	r3, [r4, #16]
 800802e:	e752      	b.n	8007ed6 <_nx_tcp_socket_retransmit+0x1e2>
    ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 8008030:	2200      	movs	r2, #0
 8008032:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8008036:	e70a      	b.n	8007e4e <_nx_tcp_socket_retransmit+0x15a>
}
 8008038:	b00b      	add	sp, #44	; 0x2c
 800803a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803e:	bf00      	nop
 8008040:	50180000 	.word	0x50180000

08008044 <_nx_tcp_socket_send>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_send(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr, ULONG wait_option)
{

    return(_nx_tcp_socket_send_internal(socket_ptr, packet_ptr, wait_option));
 8008044:	f000 b800 	b.w	8008048 <_nx_tcp_socket_send_internal>

08008048 <_nx_tcp_socket_send_internal>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_send_internal(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr, ULONG wait_option)
{
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Check packet length. */
    if (packet_ptr -> nx_packet_length == 0)
 800804c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
{
 800804e:	b097      	sub	sp, #92	; 0x5c
UINT            old_threshold = 0;
 8008050:	2500      	movs	r5, #0
 8008052:	e9cd 1513 	strd	r1, r5, [sp, #76]	; 0x4c
    if (packet_ptr -> nx_packet_length == 0)
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 80ed 	beq.w	8008236 <_nx_tcp_socket_send_internal+0x1ee>
 800805c:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800805e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008062:	b672      	cpsid	i

    /* Lockout interrupts.  */
    TX_DISABLE

    /* Determine if the socket is currently bound.  */
    if (!socket_ptr ->  nx_tcp_socket_bound_next)
 8008064:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 819c 	beq.w	80083a6 <_nx_tcp_socket_send_internal+0x35e>
        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
    }

    /* Check if the connection is in progress. */
    if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) || (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 800806e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008070:	468a      	mov	sl, r1
 8008072:	9207      	str	r2, [sp, #28]
 8008074:	1ed9      	subs	r1, r3, #3
 8008076:	2901      	cmp	r1, #1
 8008078:	f240 80e3 	bls.w	8008242 <_nx_tcp_socket_send_internal+0x1fa>
        /* Yes it it. Wait for establish state. */
        _nx_tcp_socket_state_wait(socket_ptr, NX_TCP_ESTABLISHED, wait_option);
    }

    /* Check for the socket being in an established state.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSE_WAIT))
 800807c:	3b05      	subs	r3, #5
 800807e:	2b01      	cmp	r3, #1
 8008080:	f200 80d1 	bhi.w	8008226 <_nx_tcp_socket_send_internal+0x1de>
    }

    /* Pickup the important information from the socket.  */

    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8008084:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8008088:	9309      	str	r3, [sp, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800808a:	f385 8810 	msr	PRIMASK, r5

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800808e:	6963      	ldr	r3, [r4, #20]
 8008090:	2b04      	cmp	r3, #4
 8008092:	f000 8190 	beq.w	80083b6 <_nx_tcp_socket_send_internal+0x36e>
        data_offset = NX_PHYSICAL_HEADER + sizeof(NX_IPV4_HEADER) + sizeof(NX_TCP_HEADER);
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8008096:	2b06      	cmp	r3, #6
 8008098:	f040 80dc 	bne.w	8008254 <_nx_tcp_socket_send_internal+0x20c>
    {

        /* Determine whether or not the IPv6 address is valid. */
        if (socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800809c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80080a0:	789a      	ldrb	r2, [r3, #2]
 80080a2:	2a04      	cmp	r2, #4
 80080a4:	f040 8202 	bne.w	80084ac <_nx_tcp_socket_send_internal+0x464>

        /* Set the destinatino address. */
        dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;

        /* The outgoing address should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 80080a8:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 80080ac:	3308      	adds	r3, #8
 80080ae:	9310      	str	r3, [sp, #64]	; 0x40
        dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 80080b0:	f104 0318 	add.w	r3, r4, #24
 80080b4:	9311      	str	r3, [sp, #68]	; 0x44

        /* Calculate the data offset required by fragmented TCP packet. */
        data_offset = NX_PHYSICAL_HEADER + sizeof(NX_IPV6_HEADER) + sizeof(NX_TCP_HEADER);
 80080b6:	234c      	movs	r3, #76	; 0x4c
 80080b8:	930d      	str	r3, [sp, #52]	; 0x34

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_SEND, socket_ptr, packet_ptr, packet_ptr -> nx_packet_length, socket_ptr -> nx_tcp_socket_tx_sequence, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Get the max mss this socket could send  */
    send_mss = socket_ptr -> nx_tcp_socket_connect_mss;
 80080ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
UCHAR           preempted = NX_FALSE;
 80080bc:	2300      	movs	r3, #0
    send_mss = socket_ptr -> nx_tcp_socket_connect_mss;
 80080be:	920a      	str	r2, [sp, #40]	; 0x28

    /* Get original pool. */
    pool_ptr = packet_ptr -> nx_packet_pool_owner;
 80080c0:	f8da 2000 	ldr.w	r2, [sl]
UCHAR           preempted = NX_FALSE;
 80080c4:	9308      	str	r3, [sp, #32]
    pool_ptr = packet_ptr -> nx_packet_pool_owner;
 80080c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80080c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
ULONG           checksum = 0;
 80080ca:	930f      	str	r3, [sp, #60]	; 0x3c
UINT            compute_checksum = 1;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f202 6b3c 	addw	fp, r2, #1596	; 0x63c
 80080d2:	930e      	str	r3, [sp, #56]	; 0x38
    /* Loop to send the packet. */
    for (;;)
    {

        /* Place protection while we check the sequence number for the new TCP packet.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80080d4:	f04f 31ff 	mov.w	r1, #4294967295
 80080d8:	4658      	mov	r0, fp
 80080da:	f014 fd0d 	bl	801caf8 <_tx_mutex_get>

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 80080de:	e9d4 3218 	ldrd	r3, r2, [r4, #96]	; 0x60
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d905      	bls.n	80080f2 <_nx_tcp_socket_send_internal+0xaa>
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 80080e6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80080e8:	3901      	subs	r1, #1
 80080ea:	2901      	cmp	r1, #1
 80080ec:	f240 8100 	bls.w	80082f0 <_nx_tcp_socket_send_internal+0x2a8>
 80080f0:	4613      	mov	r3, r2
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 80080f2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80080f4:	4293      	cmp	r3, r2
 80080f6:	f240 80b2 	bls.w	800825e <_nx_tcp_socket_send_internal+0x216>
        {
            tx_window_current -= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 80080fa:	eba3 0802 	sub.w	r8, r3, r2
        {
            tx_window_current = 0;
        }

        /* Pick up the min(tx_window, send_mss). */
        if (tx_window_current > send_mss)
 80080fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008100:	4543      	cmp	r3, r8
 8008102:	d203      	bcs.n	800810c <_nx_tcp_socket_send_internal+0xc4>

        /* Store the data that is left. */
        data_left = packet_ptr -> nx_packet_length;

        /* Check whether data can be sent. */
        if ((tx_window_current != 0) && (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 80aa 	beq.w	800825e <_nx_tcp_socket_send_internal+0x216>
 800810a:	4698      	mov	r8, r3
 800810c:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 8008110:	429a      	cmp	r2, r3
 8008112:	f080 80a4 	bcs.w	800825e <_nx_tcp_socket_send_internal+0x216>
 8008116:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 800811a:	f8da 7008 	ldr.w	r7, [sl, #8]
        {

            /* Whether to adjust the packet? */
            if (packet_ptr -> nx_packet_length > tx_window_current)
 800811e:	4590      	cmp	r8, r2
 8008120:	920c      	str	r2, [sp, #48]	; 0x30
 8008122:	f0c0 80ec 	bcc.w	80082fe <_nx_tcp_socket_send_internal+0x2b6>

                /* Packet need to be fragmented. */
                adjust_packet = NX_TRUE;
            }
            /*lint -e(923) suppress cast of pointer to ULONG.  */
            else if (((ALIGN_TYPE)packet_ptr -> nx_packet_prepend_ptr) & 3)
 8008126:	07b9      	lsls	r1, r7, #30
 8008128:	f040 81be 	bne.w	80084a8 <_nx_tcp_socket_send_internal+0x460>

                /* Starting address of TCP header need to be four bytes aligned. */
                adjust_packet = NX_TRUE;
            }
#ifndef NX_DISABLE_PACKET_CHAIN
            else if ((packet_ptr -> nx_packet_next != NX_NULL) &&
 800812c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 81e0 	beq.w	80084f6 <_nx_tcp_socket_send_internal+0x4ae>
                     ((packet_ptr -> nx_packet_length + data_offset) < pool_ptr -> nx_packet_pool_payload_size) &&
 8008136:	990d      	ldr	r1, [sp, #52]	; 0x34
            else if ((packet_ptr -> nx_packet_next != NX_NULL) &&
 8008138:	980b      	ldr	r0, [sp, #44]	; 0x2c
                     ((packet_ptr -> nx_packet_length + data_offset) < pool_ptr -> nx_packet_pool_payload_size) &&
 800813a:	188a      	adds	r2, r1, r2
            else if ((packet_ptr -> nx_packet_next != NX_NULL) &&
 800813c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800813e:	428a      	cmp	r2, r1
 8008140:	d203      	bcs.n	800814a <_nx_tcp_socket_send_internal+0x102>
                     ((packet_ptr -> nx_packet_length + data_offset) < pool_ptr -> nx_packet_pool_payload_size) &&
 8008142:	6882      	ldr	r2, [r0, #8]
 8008144:	2a00      	cmp	r2, #0
 8008146:	f040 81c1 	bne.w	80084cc <_nx_tcp_socket_send_internal+0x484>
            {

                /* All data can be sent in one packet but they are in chained packets. */
                adjust_packet = NX_TRUE;
            }
            else if (packet_ptr -> nx_packet_prepend_ptr == packet_ptr -> nx_packet_append_ptr)
 800814a:	f8da 200c 	ldr.w	r2, [sl, #12]
 800814e:	42ba      	cmp	r2, r7
 8008150:	f000 81af 	beq.w	80084b2 <_nx_tcp_socket_send_internal+0x46a>
            }
            else
            {

                /* Send the packet directly. */
                send_packet = packet_ptr;
 8008154:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008156:	4651      	mov	r1, sl
 8008158:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
            }

            /* Now the send_packet can be sent. */
            /* Set IP version. */
            send_packet -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 800815c:	6962      	ldr	r2, [r4, #20]

            /* Prepend the TCP header to the packet.  First, make room for the TCP header.  */
            send_packet -> nx_packet_prepend_ptr =  send_packet -> nx_packet_prepend_ptr - sizeof(NX_TCP_HEADER);

            /* Add the length of the TCP header.  */
            send_packet -> nx_packet_length =  send_packet -> nx_packet_length + (ULONG)sizeof(NX_TCP_HEADER);
 800815e:	3014      	adds	r0, #20
            send_packet -> nx_packet_prepend_ptr =  send_packet -> nx_packet_prepend_ptr - sizeof(NX_TCP_HEADER);
 8008160:	f1a7 0c14 	sub.w	ip, r7, #20
            /* Remember the last ACKed sequence and the last reported window size.  */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
            socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;

            /* Setup a new delayed ACK timeout.  */
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8008164:	4b99      	ldr	r3, [pc, #612]	; (80083cc <_nx_tcp_socket_send_internal+0x384>)
            send_packet -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 8008166:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
            header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 800816a:	68e2      	ldr	r2, [r4, #12]
 800816c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
            window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800816e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 8008172:	ea45 4802 	orr.w	r8, r5, r2, lsl #16
            header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 8008176:	4d96      	ldr	r5, [pc, #600]	; (80083d0 <_nx_tcp_socket_send_internal+0x388>)
            header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 8008178:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 800817a:	4335      	orrs	r5, r6
            send_packet -> nx_packet_length =  send_packet -> nx_packet_length + (ULONG)sizeof(NX_TCP_HEADER);
 800817c:	6248      	str	r0, [r1, #36]	; 0x24
            send_packet -> nx_packet_prepend_ptr =  send_packet -> nx_packet_prepend_ptr - sizeof(NX_TCP_HEADER);
 800817e:	f8c1 c008 	str.w	ip, [r1, #8]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the TCP header.  */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_0);
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8008182:	ea82 4032 	eor.w	r0, r2, r2, ror #16
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8008186:	f8d3 e000 	ldr.w	lr, [r3]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800818a:	ea85 4135 	eor.w	r1, r5, r5, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_0);
 800818e:	ea88 4338 	eor.w	r3, r8, r8, ror #16
            socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 8008192:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8008196:	0a00      	lsrs	r0, r0, #8
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 8008198:	6522      	str	r2, [r4, #80]	; 0x50
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_0);
 800819a:	0a1b      	lsrs	r3, r3, #8
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800819c:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80081a0:	0a09      	lsrs	r1, r1, #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 80081a2:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_0);
 80081a6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);

            /* Release the protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80081aa:	4658      	mov	r0, fp
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80081ac:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 80081b0:	ea86 2232 	eor.w	r2, r6, r2, ror #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_0);
 80081b4:	ea83 2838 	eor.w	r8, r3, r8, ror #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 80081b8:	2300      	movs	r3, #0
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80081ba:	ea81 2135 	eor.w	r1, r1, r5, ror #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 80081be:	f847 2c0c 	str.w	r2, [r7, #-12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_0);
 80081c2:	f847 8c14 	str.w	r8, [r7, #-20]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 80081c6:	e947 1302 	strd	r1, r3, [r7, #-8]
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80081ca:	f014 fd7f 	bl	801cccc <_tx_mutex_put>

            /* Pickup the current transmit sequence number.  */
            header_ptr -> nx_tcp_sequence_number =  socket_ptr -> nx_tcp_socket_tx_sequence;
 80081ce:	6ca5      	ldr	r5, [r4, #72]	; 0x48

            /* Swap the headers for endianness. */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 80081d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80081d2:	ea85 4335 	eor.w	r3, r5, r5, ror #16
            if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 80081d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80081d8:	0a1b      	lsrs	r3, r3, #8
 80081da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80081de:	ea83 2335 	eor.w	r3, r3, r5, ror #8
 80081e2:	f847 3c10 	str.w	r3, [r7, #-16]
                compute_checksum = 1;
            }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
            if (compute_checksum)
 80081e6:	0753      	lsls	r3, r2, #29
 80081e8:	d403      	bmi.n	80081f2 <_nx_tcp_socket_send_internal+0x1aa>
 80081ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 81ad 	bne.w	800854c <_nx_tcp_socket_send_internal+0x504>
                checksum = ~checksum & NX_LOWER_16_MASK;
            }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            else
            {
                send_packet -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 80081f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081f4:	2300      	movs	r3, #0
 80081f6:	930e      	str	r3, [sp, #56]	; 0x38
 80081f8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80081fa:	f043 0304 	orr.w	r3, r3, #4
 80081fe:	63d3      	str	r3, [r2, #60]	; 0x3c
            }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

            /* Place protection while we check the sequence number for the new TCP packet.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008200:	f04f 31ff 	mov.w	r1, #4294967295
 8008204:	4658      	mov	r0, fp
 8008206:	f014 fc77 	bl	801caf8 <_tx_mutex_get>

            /* Determine if the sequence number is the same.  */
            if (sequence_number != socket_ptr -> nx_tcp_socket_tx_sequence)
 800820a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800820c:	429d      	cmp	r5, r3
 800820e:	f000 80e5 	beq.w	80083dc <_nx_tcp_socket_send_internal+0x394>
            {

                /* Another transmit on this socket took place and changed the sequence.  We need to
                   recalculate the checksum with a new sequence number.  Release protection and
                   just resume the loop.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008212:	4658      	mov	r0, fp
 8008214:	f014 fd5a 	bl	801cccc <_tx_mutex_put>

                /* Release the packet when the sequence is changed. */
                if (send_packet != packet_ptr)
 8008218:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800821a:	4550      	cmp	r0, sl
 800821c:	f43f af5a 	beq.w	80080d4 <_nx_tcp_socket_send_internal+0x8c>
                {
                    _nx_packet_release(send_packet);
 8008220:	f7fe fbe6 	bl	80069f0 <_nx_packet_release>
 8008224:	e756      	b.n	80080d4 <_nx_tcp_socket_send_internal+0x8c>
 8008226:	f385 8810 	msr	PRIMASK, r5
        return(NX_NOT_CONNECTED);
 800822a:	f04f 0938 	mov.w	r9, #56	; 0x38
                /* Return a transmit queue exceeded error.  */
                return(NX_TX_QUEUE_DEPTH);
            }
        }
    }
}
 800822e:	4648      	mov	r0, r9
 8008230:	b017      	add	sp, #92	; 0x5c
 8008232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(NX_INVALID_PACKET);
 8008236:	f04f 0912 	mov.w	r9, #18
}
 800823a:	4648      	mov	r0, r9
 800823c:	b017      	add	sp, #92	; 0x5c
 800823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_tcp_socket_state_wait(socket_ptr, NX_TCP_ESTABLISHED, wait_option);
 8008242:	2105      	movs	r1, #5
 8008244:	f000 f9fe 	bl	8008644 <_nx_tcp_socket_state_wait>
 8008248:	6c63      	ldr	r3, [r4, #68]	; 0x44
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSE_WAIT))
 800824a:	3b05      	subs	r3, #5
 800824c:	2b01      	cmp	r3, #1
 800824e:	f67f af19 	bls.w	8008084 <_nx_tcp_socket_send_internal+0x3c>
 8008252:	e7e8      	b.n	8008226 <_nx_tcp_socket_send_internal+0x1de>
ULONG           data_offset = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	930d      	str	r3, [sp, #52]	; 0x34
ULONG          *source_ip = NX_NULL, *dest_ip = NX_NULL;
 8008258:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800825c:	e72d      	b.n	80080ba <_nx_tcp_socket_send_internal+0x72>
        else if ((wait_option) && (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 800825e:	9b07      	ldr	r3, [sp, #28]
 8008260:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 8157 	beq.w	8008518 <_nx_tcp_socket_send_internal+0x4d0>
 800826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826c:	f503 60d3 	add.w	r0, r3, #1688	; 0x698
 8008270:	4b58      	ldr	r3, [pc, #352]	; (80083d4 <_nx_tcp_socket_send_internal+0x38c>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	4290      	cmp	r0, r2
 8008276:	f000 814f 	beq.w	8008518 <_nx_tcp_socket_send_internal+0x4d0>
            socket_ptr -> nx_tcp_socket_transmit_suspended_count++;
 800827a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            _tx_thread_current_ptr -> tx_thread_additional_suspend_info =  (VOID *)packet_ptr;
 800827e:	f8c2 a07c 	str.w	sl, [r2, #124]	; 0x7c
            socket_ptr -> nx_tcp_socket_transmit_suspended_count++;
 8008282:	3301      	adds	r3, #1
 8008284:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
            if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 8008288:	b961      	cbnz	r1, 80082a4 <_nx_tcp_socket_send_internal+0x25c>
                socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800828a:	2201      	movs	r2, #1
                socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 800828c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800828e:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
                socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr);
 8008292:	f8da 2008 	ldr.w	r2, [sl, #8]
 8008296:	7812      	ldrb	r2, [r2, #0]
                socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 8008298:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
                socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr);
 800829c:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
                socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 80082a0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
            if (preempted == NX_FALSE)
 80082a4:	9b08      	ldr	r3, [sp, #32]
 80082a6:	b193      	cbz	r3, 80082ce <_nx_tcp_socket_send_internal+0x286>
            _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), _nx_tcp_transmit_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 80082a8:	9b07      	ldr	r3, [sp, #28]
 80082aa:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80082ae:	4622      	mov	r2, r4
 80082b0:	4949      	ldr	r1, [pc, #292]	; (80083d8 <_nx_tcp_socket_send_internal+0x390>)
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	465b      	mov	r3, fp
 80082b6:	f000 fa09 	bl	80086cc <_nx_tcp_socket_thread_suspend>
            if (_tx_thread_current_ptr -> tx_thread_suspend_status)
 80082ba:	4b46      	ldr	r3, [pc, #280]	; (80083d4 <_nx_tcp_socket_send_internal+0x38c>)
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f040 815a 	bne.w	800857c <_nx_tcp_socket_send_internal+0x534>
 80082c8:	2301      	movs	r3, #1
 80082ca:	9308      	str	r3, [sp, #32]
 80082cc:	e702      	b.n	80080d4 <_nx_tcp_socket_send_internal+0x8c>
                tx_thread_info_get(&ip_ptr -> nx_ip_thread, NX_NULL, NX_NULL, NX_NULL, &ip_thread_priority, NX_NULL,
 80082ce:	a915      	add	r1, sp, #84	; 0x54
 80082d0:	461a      	mov	r2, r3
 80082d2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80082d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80082da:	9100      	str	r1, [sp, #0]
 80082dc:	4619      	mov	r1, r3
 80082de:	f014 fe9f 	bl	801d020 <_tx_thread_info_get>
                tx_thread_preemption_change(_tx_thread_current_ptr, ip_thread_priority, &old_threshold);
 80082e2:	4b3c      	ldr	r3, [pc, #240]	; (80083d4 <_nx_tcp_socket_send_internal+0x38c>)
 80082e4:	aa14      	add	r2, sp, #80	; 0x50
 80082e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f014 ff03 	bl	801d0f4 <_tx_thread_preemption_change>
 80082ee:	e7db      	b.n	80082a8 <_nx_tcp_socket_send_internal+0x260>
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 80082f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80082f2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80082f6:	4293      	cmp	r3, r2
 80082f8:	bf28      	it	cs
 80082fa:	4613      	movcs	r3, r2
 80082fc:	e6f9      	b.n	80080f2 <_nx_tcp_socket_send_internal+0xaa>
 80082fe:	4590      	cmp	r8, r2
 8008300:	bf28      	it	cs
 8008302:	4690      	movcs	r8, r2
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008304:	4658      	mov	r0, fp
 8008306:	f014 fce1 	bl	801cccc <_tx_mutex_put>
                ret = _nx_packet_allocate(pool_ptr, &send_packet,
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800830e:	a913      	add	r1, sp, #76	; 0x4c
 8008310:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008312:	f7fe f9bb 	bl	800668c <_nx_packet_allocate>
                if (ret != NX_SUCCESS)
 8008316:	4681      	mov	r9, r0
 8008318:	2800      	cmp	r0, #0
 800831a:	f040 815f 	bne.w	80085dc <_nx_tcp_socket_send_internal+0x594>
                tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800831e:	f04f 31ff 	mov.w	r1, #4294967295
 8008322:	4658      	mov	r0, fp
 8008324:	f014 fbe8 	bl	801caf8 <_tx_mutex_get>
                while (remaining_bytes)
 8008328:	f1b8 0f00 	cmp.w	r8, #0
 800832c:	d024      	beq.n	8008378 <_nx_tcp_socket_send_internal+0x330>
 800832e:	4655      	mov	r5, sl
 8008330:	e002      	b.n	8008338 <_nx_tcp_socket_send_internal+0x2f0>
                        current_packet = current_packet -> nx_packet_next;
 8008332:	686d      	ldr	r5, [r5, #4]
                        if (current_packet == NX_NULL)
 8008334:	b33d      	cbz	r5, 8008386 <_nx_tcp_socket_send_internal+0x33e>
                        current_ptr = current_packet -> nx_packet_prepend_ptr;
 8008336:	68af      	ldr	r7, [r5, #8]
                        source_data_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_ptr);
 8008338:	68ea      	ldr	r2, [r5, #12]
                    while (source_data_size == 0)
 800833a:	1bd2      	subs	r2, r2, r7
 800833c:	d0f9      	beq.n	8008332 <_nx_tcp_socket_send_internal+0x2ea>
 800833e:	4542      	cmp	r2, r8
                    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008340:	4658      	mov	r0, fp
 8008342:	bf28      	it	cs
 8008344:	4642      	movcs	r2, r8
 8008346:	4616      	mov	r6, r2
 8008348:	f014 fcc0 	bl	801cccc <_tx_mutex_put>
                    ret = _nx_packet_data_append(send_packet, current_ptr, copy_size,
 800834c:	9b07      	ldr	r3, [sp, #28]
 800834e:	4639      	mov	r1, r7
 8008350:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008352:	4632      	mov	r2, r6
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008358:	f7fe f9f6 	bl	8006748 <_nx_packet_data_append>
 800835c:	4681      	mov	r9, r0
                    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800835e:	f04f 31ff 	mov.w	r1, #4294967295
 8008362:	4658      	mov	r0, fp
 8008364:	f014 fbc8 	bl	801caf8 <_tx_mutex_get>
                    if (ret != NX_SUCCESS)
 8008368:	f1b9 0f00 	cmp.w	r9, #0
 800836c:	f040 8122 	bne.w	80085b4 <_nx_tcp_socket_send_internal+0x56c>
                while (remaining_bytes)
 8008370:	ebb8 0806 	subs.w	r8, r8, r6
                    current_ptr += copy_size;
 8008374:	4437      	add	r7, r6
                while (remaining_bytes)
 8008376:	d1df      	bne.n	8008338 <_nx_tcp_socket_send_internal+0x2f0>
 8008378:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800837a:	6a48      	ldr	r0, [r1, #36]	; 0x24
                send_packet -> nx_packet_address = packet_ptr -> nx_packet_address;
 800837c:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8008380:	688f      	ldr	r7, [r1, #8]
 8008382:	634b      	str	r3, [r1, #52]	; 0x34
 8008384:	e6ea      	b.n	800815c <_nx_tcp_socket_send_internal+0x114>
                            if (preempted == NX_TRUE)
 8008386:	9b08      	ldr	r3, [sp, #32]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f040 80be 	bne.w	800850a <_nx_tcp_socket_send_internal+0x4c2>
                            _nx_packet_release(send_packet);
 800838e:	9813      	ldr	r0, [sp, #76]	; 0x4c
                            return(NX_INVALID_PACKET);
 8008390:	f04f 0912 	mov.w	r9, #18
                            _nx_packet_release(send_packet);
 8008394:	f7fe fb2c 	bl	80069f0 <_nx_packet_release>
                            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008398:	4658      	mov	r0, fp
 800839a:	f014 fc97 	bl	801cccc <_tx_mutex_put>
}
 800839e:	4648      	mov	r0, r9
 80083a0:	b017      	add	sp, #92	; 0x5c
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	f385 8810 	msr	PRIMASK, r5
        return(NX_NOT_BOUND);
 80083aa:	f04f 0924 	mov.w	r9, #36	; 0x24
}
 80083ae:	4648      	mov	r0, r9
 80083b0:	b017      	add	sp, #92	; 0x5c
 80083b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 80083b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
        dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 80083b8:	f104 0218 	add.w	r2, r4, #24
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 80083bc:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 80083c0:	3314      	adds	r3, #20
        dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 80083c2:	9211      	str	r2, [sp, #68]	; 0x44
        data_offset = NX_PHYSICAL_HEADER + sizeof(NX_IPV4_HEADER) + sizeof(NX_TCP_HEADER);
 80083c4:	2238      	movs	r2, #56	; 0x38
        source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 80083c6:	9310      	str	r3, [sp, #64]	; 0x40
        data_offset = NX_PHYSICAL_HEADER + sizeof(NX_IPV4_HEADER) + sizeof(NX_TCP_HEADER);
 80083c8:	920d      	str	r2, [sp, #52]	; 0x34
 80083ca:	e676      	b.n	80080ba <_nx_tcp_socket_send_internal+0x72>
 80083cc:	200078c0 	.word	0x200078c0
 80083d0:	50180000 	.word	0x50180000
 80083d4:	20007a80 	.word	0x20007a80
 80083d8:	08008789 	.word	0x08008789
            if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSE_WAIT))
 80083dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80083de:	3b05      	subs	r3, #5
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	f200 8118 	bhi.w	8008616 <_nx_tcp_socket_send_internal+0x5ce>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80083e6:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80083ea:	b672      	cpsid	i
                (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 80083ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            socket_ptr -> nx_tcp_socket_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence +
 80083ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80083f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083f2:	3a14      	subs	r2, #20
 80083f4:	4413      	add	r3, r2
 80083f6:	64a3      	str	r3, [r4, #72]	; 0x48
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80083f8:	f381 8810 	msr	PRIMASK, r1
            header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 80083fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 80083fe:	2200      	movs	r2, #0
            data_left -= (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8008400:	9913      	ldr	r1, [sp, #76]	; 0x4c
            header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 8008402:	041b      	lsls	r3, r3, #16
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 8008404:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
            data_left -= (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8008408:	6a4a      	ldr	r2, [r1, #36]	; 0x24
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800840a:	461d      	mov	r5, r3
 800840c:	ea43 4333 	orr.w	r3, r3, r3, ror #16
            if (socket_ptr -> nx_tcp_socket_transmit_sent_head)
 8008410:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
            data_left -= (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8008414:	f1c2 0914 	rsb	r9, r2, #20
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8008418:	0a1b      	lsrs	r3, r3, #8
 800841a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800841e:	ea83 2335 	eor.w	r3, r3, r5, ror #8
            data_left -= (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8008422:	9d0c      	ldr	r5, [sp, #48]	; 0x30
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8008424:	f847 3c04 	str.w	r3, [r7, #-4]
            data_left -= (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8008428:	44a9      	add	r9, r5
            if (socket_ptr -> nx_tcp_socket_transmit_sent_head)
 800842a:	2800      	cmp	r0, #0
 800842c:	f000 809c 	beq.w	8008568 <_nx_tcp_socket_send_internal+0x520>
                (socket_ptr -> nx_tcp_socket_transmit_sent_tail) -> nx_packet_union_next.nx_packet_tcp_queue_next =  send_packet;
 8008430:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8008434:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008436:	6201      	str	r1, [r0, #32]
                socket_ptr -> nx_tcp_socket_transmit_sent_tail =  send_packet;
 8008438:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
            socket_ptr -> nx_tcp_socket_tx_outstanding_bytes +=
 800843c:	3a14      	subs	r2, #20
            socket_ptr -> nx_tcp_socket_transmit_sent_count++;
 800843e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
            send_packet -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 8008442:	f04f 35ee 	mov.w	r5, #4008636142	; 0xeeeeeeee
            socket_ptr -> nx_tcp_socket_tx_outstanding_bytes +=
 8008446:	4413      	add	r3, r2
            if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8008448:	6962      	ldr	r2, [r4, #20]
            socket_ptr -> nx_tcp_socket_transmit_sent_count++;
 800844a:	3001      	adds	r0, #1
            send_packet -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800844c:	620d      	str	r5, [r1, #32]
            if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800844e:	2a04      	cmp	r2, #4
            socket_ptr -> nx_tcp_socket_tx_outstanding_bytes +=
 8008450:	66a3      	str	r3, [r4, #104]	; 0x68
            socket_ptr -> nx_tcp_socket_transmit_sent_count++;
 8008452:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
            if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8008456:	f000 809a 	beq.w	800858e <_nx_tcp_socket_send_internal+0x546>
            if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 800845a:	2a06      	cmp	r2, #6
 800845c:	d039      	beq.n	80084d2 <_nx_tcp_socket_send_internal+0x48a>
            if (data_left == 0)
 800845e:	f1b9 0f00 	cmp.w	r9, #0
 8008462:	f000 80c6 	beq.w	80085f2 <_nx_tcp_socket_send_internal+0x5aa>
                remaining_bytes = packet_ptr -> nx_packet_length - data_left;
 8008466:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
                       (UINT)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr))
 800846a:	e9da 1302 	ldrd	r1, r3, [sl, #8]
                remaining_bytes = packet_ptr -> nx_packet_length - data_left;
 800846e:	eba5 0909 	sub.w	r9, r5, r9
                       (UINT)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr))
 8008472:	1a5a      	subs	r2, r3, r1
                while (remaining_bytes >
 8008474:	4591      	cmp	r9, r2
 8008476:	4652      	mov	r2, sl
 8008478:	d90c      	bls.n	8008494 <_nx_tcp_socket_send_internal+0x44c>
                    current_packet -> nx_packet_append_ptr = (UCHAR *)(((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3));
 800847a:	f023 0003 	bic.w	r0, r3, #3
                    packet_ptr -> nx_packet_length -= (ULONG)((ALIGN_TYPE)current_packet -> nx_packet_append_ptr - (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr);
 800847e:	1ac9      	subs	r1, r1, r3
                    current_packet -> nx_packet_append_ptr = (UCHAR *)(((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3));
 8008480:	60d0      	str	r0, [r2, #12]
                    remaining_bytes -= (ULONG)((ALIGN_TYPE)current_packet -> nx_packet_append_ptr - (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr);
 8008482:	4489      	add	r9, r1
                    current_packet -> nx_packet_prepend_ptr = current_packet -> nx_packet_append_ptr;
 8008484:	6090      	str	r0, [r2, #8]
                    packet_ptr -> nx_packet_length -= (ULONG)((ALIGN_TYPE)current_packet -> nx_packet_append_ptr - (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr);
 8008486:	440d      	add	r5, r1
                    current_packet = current_packet -> nx_packet_next;
 8008488:	6852      	ldr	r2, [r2, #4]
                       (UINT)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr))
 800848a:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 800848e:	1a58      	subs	r0, r3, r1
                while (remaining_bytes >
 8008490:	4548      	cmp	r0, r9
 8008492:	d3f2      	bcc.n	800847a <_nx_tcp_socket_send_internal+0x432>
                packet_ptr -> nx_packet_length -= remaining_bytes;
 8008494:	eba5 0509 	sub.w	r5, r5, r9
                current_packet -> nx_packet_prepend_ptr += remaining_bytes;
 8008498:	4449      	add	r1, r9
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800849a:	4658      	mov	r0, fp
                packet_ptr -> nx_packet_length -= remaining_bytes;
 800849c:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
                current_packet -> nx_packet_prepend_ptr += remaining_bytes;
 80084a0:	6091      	str	r1, [r2, #8]
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80084a2:	f014 fc13 	bl	801cccc <_tx_mutex_put>
            if (data_left == 0)
 80084a6:	e615      	b.n	80080d4 <_nx_tcp_socket_send_internal+0x8c>
 80084a8:	4690      	mov	r8, r2
 80084aa:	e72b      	b.n	8008304 <_nx_tcp_socket_send_internal+0x2bc>
            return(NX_NO_INTERFACE_ADDRESS);
 80084ac:	f04f 0950 	mov.w	r9, #80	; 0x50
 80084b0:	e6bd      	b.n	800822e <_nx_tcp_socket_send_internal+0x1e6>
                while ((current_packet != NX_NULL) && (current_packet -> nx_packet_prepend_ptr == current_packet -> nx_packet_append_ptr))
 80084b2:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 80084b6:	4291      	cmp	r1, r2
 80084b8:	d105      	bne.n	80084c6 <_nx_tcp_socket_send_internal+0x47e>
                    current_packet = current_packet -> nx_packet_next;
 80084ba:	685b      	ldr	r3, [r3, #4]
                while ((current_packet != NX_NULL) && (current_packet -> nx_packet_prepend_ptr == current_packet -> nx_packet_append_ptr))
 80084bc:	b303      	cbz	r3, 8008500 <_nx_tcp_socket_send_internal+0x4b8>
 80084be:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 80084c2:	428a      	cmp	r2, r1
 80084c4:	d0f9      	beq.n	80084ba <_nx_tcp_socket_send_internal+0x472>
                if (((ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr) & 3)
 80084c6:	0792      	lsls	r2, r2, #30
 80084c8:	f43f ae44 	beq.w	8008154 <_nx_tcp_socket_send_internal+0x10c>
 80084cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80084d0:	e718      	b.n	8008304 <_nx_tcp_socket_send_internal+0x2bc>
                                     socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
 80084d2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
                                     socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 80084d6:	f104 0518 	add.w	r5, r4, #24
                _nx_ipv6_packet_send(ip_ptr,
 80084da:	9e09      	ldr	r6, [sp, #36]	; 0x24
                                     socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
 80084dc:	f103 0008 	add.w	r0, r3, #8
                _nx_ipv6_packet_send(ip_ptr,
 80084e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80084e2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80084e4:	9001      	str	r0, [sp, #4]
 80084e6:	4630      	mov	r0, r6
 80084e8:	9502      	str	r5, [sp, #8]
 80084ea:	f8d6 5ee8 	ldr.w	r5, [r6, #3816]	; 0xee8
 80084ee:	9500      	str	r5, [sp, #0]
 80084f0:	f009 fde4 	bl	80120bc <_nx_ipv6_packet_send>
 80084f4:	e7b3      	b.n	800845e <_nx_tcp_socket_send_internal+0x416>
            else if (packet_ptr -> nx_packet_prepend_ptr == packet_ptr -> nx_packet_append_ptr)
 80084f6:	f8da 300c 	ldr.w	r3, [sl, #12]
 80084fa:	42bb      	cmp	r3, r7
 80084fc:	f47f ae2a 	bne.w	8008154 <_nx_tcp_socket_send_internal+0x10c>
                NX_ASSERT(current_packet != NX_NULL);
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	f014 fe80 	bl	801d208 <_tx_thread_sleep>
 8008508:	e7fa      	b.n	8008500 <_nx_tcp_socket_send_internal+0x4b8>
                                tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800850a:	4b4d      	ldr	r3, [pc, #308]	; (8008640 <_nx_tcp_socket_send_internal+0x5f8>)
 800850c:	aa14      	add	r2, sp, #80	; 0x50
 800850e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	f014 fdef 	bl	801d0f4 <_tx_thread_preemption_change>
 8008516:	e73a      	b.n	800838e <_nx_tcp_socket_send_internal+0x346>
            if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 8008518:	b961      	cbnz	r1, 8008534 <_nx_tcp_socket_send_internal+0x4ec>
                socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800851a:	2201      	movs	r2, #1
                socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 800851c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800851e:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
                socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr);
 8008522:	f8da 2008 	ldr.w	r2, [sl, #8]
 8008526:	7812      	ldrb	r2, [r2, #0]
                socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 8008528:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
                socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr);
 800852c:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
                socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 8008530:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008534:	4658      	mov	r0, fp
            if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 8008536:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 800853a:	429a      	cmp	r2, r3
                return(NX_WINDOW_OVERFLOW);
 800853c:	bf34      	ite	cc
 800853e:	f04f 0939 	movcc.w	r9, #57	; 0x39
                return(NX_TX_QUEUE_DEPTH);
 8008542:	f04f 0949 	movcs.w	r9, #73	; 0x49
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008546:	f014 fbc1 	bl	801cccc <_tx_mutex_put>
                return(NX_TX_QUEUE_DEPTH);
 800854a:	e670      	b.n	800822e <_nx_tcp_socket_send_internal+0x1e6>
                checksum =  _nx_ip_checksum_compute(send_packet, NX_PROTOCOL_TCP,
 800854c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800854e:	2201      	movs	r2, #1
 8008550:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008552:	2106      	movs	r1, #6
 8008554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008556:	920e      	str	r2, [sp, #56]	; 0x38
 8008558:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800855a:	9600      	str	r6, [sp, #0]
 800855c:	f7f9 fcc2 	bl	8001ee4 <_nx_ip_checksum_compute>
                checksum = ~checksum & NX_LOWER_16_MASK;
 8008560:	43c0      	mvns	r0, r0
 8008562:	b283      	uxth	r3, r0
 8008564:	930f      	str	r3, [sp, #60]	; 0x3c
 8008566:	e64b      	b.n	8008200 <_nx_tcp_socket_send_internal+0x1b8>
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8008568:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800856c:	4603      	mov	r3, r0
 800856e:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8008572:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
                socket_ptr -> nx_tcp_socket_transmit_sent_tail =  send_packet;
 8008576:	e9c4 1134 	strd	r1, r1, [r4, #208]	; 0xd0
 800857a:	e75f      	b.n	800843c <_nx_tcp_socket_send_internal+0x3f4>
                tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800857c:	aa14      	add	r2, sp, #80	; 0x50
 800857e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008580:	f014 fdb8 	bl	801d0f4 <_tx_thread_preemption_change>
                return(_tx_thread_current_ptr -> tx_thread_suspend_status);
 8008584:	4b2e      	ldr	r3, [pc, #184]	; (8008640 <_nx_tcp_socket_send_internal+0x5f8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f8d3 9084 	ldr.w	r9, [r3, #132]	; 0x84
 800858c:	e64f      	b.n	800822e <_nx_tcp_socket_send_internal+0x1e6>
                _nx_ip_packet_send(ip_ptr, send_packet,
 800858e:	f44f 25c0 	mov.w	r5, #393216	; 0x60000
 8008592:	69a2      	ldr	r2, [r4, #24]
 8008594:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008596:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800859a:	9501      	str	r5, [sp, #4]
 800859c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80085a0:	9003      	str	r0, [sp, #12]
 80085a2:	9502      	str	r5, [sp, #8]
 80085a4:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80085a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085aa:	9500      	str	r5, [sp, #0]
 80085ac:	f7f9 fe44 	bl	8002238 <_nx_ip_packet_send>
 80085b0:	6962      	ldr	r2, [r4, #20]
 80085b2:	e752      	b.n	800845a <_nx_tcp_socket_send_internal+0x412>
                        if (send_packet -> nx_packet_length == 0)
 80085b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80085b6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80085b8:	2800      	cmp	r0, #0
 80085ba:	f47f aedf 	bne.w	800837c <_nx_tcp_socket_send_internal+0x334>
                            if (preempted == NX_TRUE)
 80085be:	9b08      	ldr	r3, [sp, #32]
 80085c0:	b12b      	cbz	r3, 80085ce <_nx_tcp_socket_send_internal+0x586>
                                tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 80085c2:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <_nx_tcp_socket_send_internal+0x5f8>)
 80085c4:	aa14      	add	r2, sp, #80	; 0x50
 80085c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	f014 fd93 	bl	801d0f4 <_tx_thread_preemption_change>
                            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80085ce:	4658      	mov	r0, fp
 80085d0:	f014 fb7c 	bl	801cccc <_tx_mutex_put>
                            _nx_packet_release(send_packet);
 80085d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80085d6:	f7fe fa0b 	bl	80069f0 <_nx_packet_release>
                            return(ret);
 80085da:	e628      	b.n	800822e <_nx_tcp_socket_send_internal+0x1e6>
                    if (preempted == NX_TRUE)
 80085dc:	9b08      	ldr	r3, [sp, #32]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f43f ae25 	beq.w	800822e <_nx_tcp_socket_send_internal+0x1e6>
                        tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 80085e4:	4b16      	ldr	r3, [pc, #88]	; (8008640 <_nx_tcp_socket_send_internal+0x5f8>)
 80085e6:	aa14      	add	r2, sp, #80	; 0x50
 80085e8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	f014 fd82 	bl	801d0f4 <_tx_thread_preemption_change>
 80085f0:	e61d      	b.n	800822e <_nx_tcp_socket_send_internal+0x1e6>
                if (send_packet != packet_ptr)
 80085f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085f4:	4553      	cmp	r3, sl
 80085f6:	d002      	beq.n	80085fe <_nx_tcp_socket_send_internal+0x5b6>
                    _nx_packet_release(packet_ptr);
 80085f8:	4650      	mov	r0, sl
 80085fa:	f7fe f9f9 	bl	80069f0 <_nx_packet_release>
                if (preempted == NX_TRUE)
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	b12b      	cbz	r3, 800860e <_nx_tcp_socket_send_internal+0x5c6>
                    tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <_nx_tcp_socket_send_internal+0x5f8>)
 8008604:	aa14      	add	r2, sp, #80	; 0x50
 8008606:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	f014 fd73 	bl	801d0f4 <_tx_thread_preemption_change>
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800860e:	4658      	mov	r0, fp
 8008610:	f014 fb5c 	bl	801cccc <_tx_mutex_put>
                return(NX_SUCCESS);
 8008614:	e60b      	b.n	800822e <_nx_tcp_socket_send_internal+0x1e6>
                if (preempted == NX_TRUE)
 8008616:	9b08      	ldr	r3, [sp, #32]
 8008618:	b12b      	cbz	r3, 8008626 <_nx_tcp_socket_send_internal+0x5de>
                    tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800861a:	4b09      	ldr	r3, [pc, #36]	; (8008640 <_nx_tcp_socket_send_internal+0x5f8>)
 800861c:	aa14      	add	r2, sp, #80	; 0x50
 800861e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	f014 fd67 	bl	801d0f4 <_tx_thread_preemption_change>
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008626:	4658      	mov	r0, fp
                return(NX_NOT_CONNECTED);
 8008628:	f04f 0938 	mov.w	r9, #56	; 0x38
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800862c:	f014 fb4e 	bl	801cccc <_tx_mutex_put>
                if (send_packet != packet_ptr)
 8008630:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008632:	4550      	cmp	r0, sl
 8008634:	f43f adfb 	beq.w	800822e <_nx_tcp_socket_send_internal+0x1e6>
                    _nx_packet_release(send_packet);
 8008638:	f7fe f9da 	bl	80069f0 <_nx_packet_release>
 800863c:	e5f7      	b.n	800822e <_nx_tcp_socket_send_internal+0x1e6>
 800863e:	bf00      	nop
 8008640:	20007a80 	.word	0x20007a80

08008644 <_nx_tcp_socket_state_wait>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_wait(NX_TCP_SOCKET *socket_ptr, UINT desired_state, ULONG wait_option)
{
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Loop to wait for the desired socket state.   */
    for (;;)
    {

        /* Determine if the socket pointer is still valid.  */
        if (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID)
 8008646:	4b0d      	ldr	r3, [pc, #52]	; (800867c <_nx_tcp_socket_state_wait+0x38>)
 8008648:	6806      	ldr	r6, [r0, #0]
 800864a:	429e      	cmp	r6, r3
 800864c:	d112      	bne.n	8008674 <_nx_tcp_socket_state_wait+0x30>
            /* Not still valid, return an error.  */
            return(NX_PTR_ERROR);
        }

        /* Determine if the desired state is present.  */
        if (socket_ptr -> nx_tcp_socket_state == desired_state)
 800864e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008650:	4605      	mov	r5, r0
 8008652:	460f      	mov	r7, r1
 8008654:	4299      	cmp	r1, r3
 8008656:	d00b      	beq.n	8008670 <_nx_tcp_socket_state_wait+0x2c>
 8008658:	4614      	mov	r4, r2
            /* The desired state is present, return success!  */
            return(NX_SUCCESS);
        }

        /* Check to see if there is more time to wait.  */
        if (wait_option)
 800865a:	b16c      	cbz	r4, 8008678 <_nx_tcp_socket_state_wait+0x34>
        {

            /* Yes, there is more time... sleep for a tick.  */
            tx_thread_sleep(1);
 800865c:	2001      	movs	r0, #1

            /* Decrease the wait time.  */
            wait_option--;
 800865e:	3c01      	subs	r4, #1
            tx_thread_sleep(1);
 8008660:	f014 fdd2 	bl	801d208 <_tx_thread_sleep>
        if (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID)
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	42b3      	cmp	r3, r6
 8008668:	d104      	bne.n	8008674 <_nx_tcp_socket_state_wait+0x30>
        if (socket_ptr -> nx_tcp_socket_state == desired_state)
 800866a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800866c:	42bb      	cmp	r3, r7
 800866e:	d1f4      	bne.n	800865a <_nx_tcp_socket_state_wait+0x16>
            return(NX_SUCCESS);
 8008670:	2000      	movs	r0, #0

            /* Timeout, just return an error.  */
            return(NX_NOT_SUCCESSFUL);
        }
    }
}
 8008672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return(NX_PTR_ERROR);
 8008674:	2007      	movs	r0, #7
}
 8008676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return(NX_NOT_SUCCESSFUL);
 8008678:	2043      	movs	r0, #67	; 0x43
}
 800867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867c:	54435020 	.word	0x54435020

08008680 <_nx_tcp_socket_thread_resume>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_resume(TX_THREAD **suspension_list_head, UINT status)
{
 8008680:	b430      	push	{r4, r5}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008682:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008686:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the thread pointer.  */
    thread_ptr =  *suspension_list_head;
 8008688:	6803      	ldr	r3, [r0, #0]

    /* Determine if there still is a thread suspended.  */
    if (thread_ptr)
 800868a:	b1cb      	cbz	r3, 80086c0 <_nx_tcp_socket_thread_resume+0x40>
    {

        /* Determine if there are anymore threads on the suspension list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800868c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800868e:	429a      	cmp	r2, r3
 8008690:	d013      	beq.n	80086ba <_nx_tcp_socket_thread_resume+0x3a>
        {

            /* More than one thread is on the suspension list, we need to
               adjust the link pointers and move the next entry to the
               front of the list.  */
            *suspension_list_head =  thread_ptr -> tx_thread_suspended_next;
 8008692:	6002      	str	r2, [r0, #0]

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
                thread_ptr -> tx_thread_suspended_previous;
 8008694:	e9d3 201c 	ldrd	r2, r0, [r3, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008698:	6750      	str	r0, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800869a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800869c:	6702      	str	r2, [r0, #112]	; 0x70

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800869e:	480a      	ldr	r0, [pc, #40]	; (80086c8 <_nx_tcp_socket_thread_resume+0x48>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80086a0:	2500      	movs	r5, #0
        _tx_thread_preempt_disable++;
 80086a2:	6802      	ldr	r2, [r0, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80086a4:	669d      	str	r5, [r3, #104]	; 0x68
        _tx_thread_preempt_disable++;
 80086a6:	3201      	adds	r2, #1
 80086a8:	6002      	str	r2, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80086aa:	f384 8810 	msr	PRIMASK, r4

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  status;
 80086ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80086b2:	4618      	mov	r0, r3
    {

        /* Nothing was suspended.  Simply restore interrupts.  */
        TX_RESTORE
    }
}
 80086b4:	bc30      	pop	{r4, r5}
        _tx_thread_system_resume(thread_ptr);
 80086b6:	f014 bdfb 	b.w	801d2b0 <_tx_thread_system_resume>
            *suspension_list_head =  TX_NULL;
 80086ba:	2200      	movs	r2, #0
 80086bc:	6002      	str	r2, [r0, #0]
 80086be:	e7ee      	b.n	800869e <_nx_tcp_socket_thread_resume+0x1e>
 80086c0:	f384 8810 	msr	PRIMASK, r4
}
 80086c4:	bc30      	pop	{r4, r5}
 80086c6:	4770      	bx	lr
 80086c8:	20007a7c 	.word	0x20007a7c

080086cc <_nx_tcp_socket_thread_suspend>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_suspend(TX_THREAD **suspension_list_head, VOID (*suspend_cleanup)(TX_THREAD * NX_CLEANUP_PARAMETER), NX_TCP_SOCKET *socket_ptr, TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	f8dd c018 	ldr.w	ip, [sp, #24]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80086d2:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80086d6:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup thread pointer.  */
    thread_ptr =  _tx_thread_current_ptr;
 80086d8:	4c13      	ldr	r4, [pc, #76]	; (8008728 <_nx_tcp_socket_thread_suspend+0x5c>)

    /* Setup suspension list.  */
    if (*suspension_list_head)
 80086da:	6805      	ldr	r5, [r0, #0]
    thread_ptr =  _tx_thread_current_ptr;
 80086dc:	6824      	ldr	r4, [r4, #0]
    if (*suspension_list_head)
 80086de:	b1f5      	cbz	r5, 800871e <_nx_tcp_socket_thread_suspend+0x52>
    {

        /* This list is not NULL, add current thread to the end. */
        thread_ptr -> tx_thread_suspended_next =      *suspension_list_head;
 80086e0:	6725      	str	r5, [r4, #112]	; 0x70
        thread_ptr -> tx_thread_suspended_previous =  (*suspension_list_head) -> tx_thread_suspended_previous;
 80086e2:	6805      	ldr	r5, [r0, #0]
 80086e4:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 80086e6:	6765      	str	r5, [r4, #116]	; 0x74
        ((*suspension_list_head) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 80086e8:	6805      	ldr	r5, [r0, #0]
 80086ea:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 80086ec:	672c      	str	r4, [r5, #112]	; 0x70
        (*suspension_list_head) -> tx_thread_suspended_previous =   thread_ptr;
 80086ee:	6800      	ldr	r0, [r0, #0]
 80086f0:	6744      	str	r4, [r0, #116]	; 0x74

    /* Set the suspending flag.  */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80086f2:	4d0e      	ldr	r5, [pc, #56]	; (800872c <_nx_tcp_socket_thread_suspend+0x60>)
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80086f4:	2001      	movs	r0, #1
    thread_ptr -> tx_thread_suspend_cleanup =  suspend_cleanup;
 80086f6:	66a1      	str	r1, [r4, #104]	; 0x68
    thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80086f8:	270c      	movs	r7, #12
    _tx_thread_preempt_disable++;
 80086fa:	6829      	ldr	r1, [r5, #0]
    thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 80086fc:	66e2      	str	r2, [r4, #108]	; 0x6c
    _tx_thread_preempt_disable++;
 80086fe:	4401      	add	r1, r0

    /* Save the timeout value.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008700:	f8c4 c04c 	str.w	ip, [r4, #76]	; 0x4c
    thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008704:	6327      	str	r7, [r4, #48]	; 0x30
    _tx_thread_preempt_disable++;
 8008706:	6029      	str	r1, [r5, #0]
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008708:	63a0      	str	r0, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800870a:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release protection.  */
    tx_mutex_put(mutex_ptr);
 800870e:	4618      	mov	r0, r3
 8008710:	f014 fadc 	bl	801cccc <_tx_mutex_put>

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8008714:	4620      	mov	r0, r4
}
 8008716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _tx_thread_system_suspend(thread_ptr);
 800871a:	f014 be4f 	b.w	801d3bc <_tx_thread_system_suspend>
        *suspension_list_head =  thread_ptr;
 800871e:	6004      	str	r4, [r0, #0]
        thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8008720:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 8008724:	e7e5      	b.n	80086f2 <_nx_tcp_socket_thread_suspend+0x26>
 8008726:	bf00      	nop
 8008728:	20007a80 	.word	0x20007a80
 800872c:	20007a7c 	.word	0x20007a7c

08008730 <_nx_tcp_socket_transmit_queue_flush>:

    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 8008730:	2200      	movs	r2, #0
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8008732:	e9d0 1333 	ldrd	r1, r3, [r0, #204]	; 0xcc
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 8008736:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
    socket_ptr -> nx_tcp_socket_transmit_sent_tail =  NX_NULL;

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800873a:	b319      	cbz	r1, 8008784 <_nx_tcp_socket_transmit_queue_flush+0x54>
{
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	4604      	mov	r4, r0
        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;

        /* Mark the packet as no longer being in a TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008740:	f04f 36aa 	mov.w	r6, #2863311530	; 0xaaaaaaaa
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008744:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008748:	b672      	cpsid	i
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800874a:	e9d3 2507 	ldrd	r2, r5, [r3, #28]
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800874e:	621e      	str	r6, [r3, #32]

        /* Has the packet been transmitted?  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8008750:	f1b2 3fdd 	cmp.w	r2, #3722304989	; 0xdddddddd
 8008754:	d009      	beq.n	800876a <_nx_tcp_socket_transmit_queue_flush+0x3a>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008756:	f381 8810 	msr	PRIMASK, r1

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 800875a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800875e:	3b01      	subs	r3, #1
 8008760:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 8008764:	b16b      	cbz	r3, 8008782 <_nx_tcp_socket_transmit_queue_flush+0x52>
{
 8008766:	462b      	mov	r3, r5
 8008768:	e7ec      	b.n	8008744 <_nx_tcp_socket_transmit_queue_flush+0x14>
 800876a:	f381 8810 	msr	PRIMASK, r1
            _nx_packet_release(packet_ptr);
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe f93e 	bl	80069f0 <_nx_packet_release>
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 8008774:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8008778:	3b01      	subs	r3, #1
 800877a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f1      	bne.n	8008766 <_nx_tcp_socket_transmit_queue_flush+0x36>
    }
}
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop

08008788 <_nx_tcp_transmit_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008788:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800878c:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800878e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8008790:	2b00      	cmp	r3, #0
 8008792:	d045      	beq.n	8008820 <_nx_tcp_transmit_cleanup+0x98>
 8008794:	492a      	ldr	r1, [pc, #168]	; (8008840 <_nx_tcp_transmit_cleanup+0xb8>)
{
 8008796:	b430      	push	{r4, r5}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8008798:	681c      	ldr	r4, [r3, #0]
 800879a:	428c      	cmp	r4, r1
 800879c:	d003      	beq.n	80087a6 <_nx_tcp_transmit_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800879e:	f382 8810 	msr	PRIMASK, r2
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 80087a2:	bc30      	pop	{r4, r5}
 80087a4:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 80087a6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80087a8:	2900      	cmp	r1, #0
 80087aa:	d0f8      	beq.n	800879e <_nx_tcp_transmit_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80087ac:	f3ef 8405 	mrs	r4, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 80087b0:	4924      	ldr	r1, [pc, #144]	; (8008844 <_nx_tcp_transmit_cleanup+0xbc>)
 80087b2:	6809      	ldr	r1, [r1, #0]
 80087b4:	4321      	orrs	r1, r4
 80087b6:	d125      	bne.n	8008804 <_nx_tcp_transmit_cleanup+0x7c>
 80087b8:	4d23      	ldr	r5, [pc, #140]	; (8008848 <_nx_tcp_transmit_cleanup+0xc0>)
 80087ba:	4c24      	ldr	r4, [pc, #144]	; (800884c <_nx_tcp_transmit_cleanup+0xc4>)
 80087bc:	682d      	ldr	r5, [r5, #0]
 80087be:	42a5      	cmp	r5, r4
 80087c0:	d020      	beq.n	8008804 <_nx_tcp_transmit_cleanup+0x7c>
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80087c2:	6f04      	ldr	r4, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80087c4:	6681      	str	r1, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80087c6:	4284      	cmp	r4, r0
 80087c8:	d02d      	beq.n	8008826 <_nx_tcp_transmit_cleanup+0x9e>
                thread_ptr -> tx_thread_suspended_previous;
 80087ca:	6f41      	ldr	r1, [r0, #116]	; 0x74
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80087cc:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80087d0:	6761      	str	r1, [r4, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80087d2:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80087d4:	670c      	str	r4, [r1, #112]	; 0x70
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 80087d6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80087da:	6b04      	ldr	r4, [r0, #48]	; 0x30
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 80087dc:	3901      	subs	r1, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80087de:	2c0c      	cmp	r4, #12
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 80087e0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80087e4:	d1db      	bne.n	800879e <_nx_tcp_transmit_cleanup+0x16>
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 80087e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80087e8:	2905      	cmp	r1, #5
 80087ea:	d01f      	beq.n	800882c <_nx_tcp_transmit_cleanup+0xa4>
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 80087ec:	2338      	movs	r3, #56	; 0x38
 80087ee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 80087f2:	4917      	ldr	r1, [pc, #92]	; (8008850 <_nx_tcp_transmit_cleanup+0xc8>)
 80087f4:	680b      	ldr	r3, [r1, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80087fa:	f382 8810 	msr	PRIMASK, r2
}
 80087fe:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 8008800:	f014 bd56 	b.w	801d2b0 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8008804:	4913      	ldr	r1, [pc, #76]	; (8008854 <_nx_tcp_transmit_cleanup+0xcc>)
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8008806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800880a:	6681      	str	r1, [r0, #104]	; 0x68
 800880c:	f382 8810 	msr	PRIMASK, r2
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8008810:	2200      	movs	r2, #0
 8008812:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 8008816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 800881a:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800881c:	f013 bf84 	b.w	801c728 <_tx_event_flags_set>
 8008820:	f382 8810 	msr	PRIMASK, r2
 8008824:	4770      	bx	lr
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  NX_NULL;
 8008826:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 800882a:	e7d4      	b.n	80087d6 <_nx_tcp_transmit_cleanup+0x4e>
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 800882c:	e9d3 3132 	ldrd	r3, r1, [r3, #200]	; 0xc8
 8008830:	4299      	cmp	r1, r3
                thread_ptr -> tx_thread_suspend_status =  NX_WINDOW_OVERFLOW;
 8008832:	bf34      	ite	cc
 8008834:	2339      	movcc	r3, #57	; 0x39
                thread_ptr -> tx_thread_suspend_status =  NX_TX_QUEUE_DEPTH;
 8008836:	2349      	movcs	r3, #73	; 0x49
 8008838:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 800883c:	e7d9      	b.n	80087f2 <_nx_tcp_transmit_cleanup+0x6a>
 800883e:	bf00      	nop
 8008840:	54435020 	.word	0x54435020
 8008844:	200000ec 	.word	0x200000ec
 8008848:	20007a80 	.word	0x20007a80
 800884c:	20007b28 	.word	0x20007b28
 8008850:	20007a7c 	.word	0x20007a7c
 8008854:	08012c61 	.word	0x08012c61

08008858 <_nx_udp_enable>:
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <_nx_udp_enable+0xc>)
 800885a:	f8c0 3930 	str.w	r3, [r0, #2352]	; 0x930

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 800885e:	2000      	movs	r0, #0
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	08008869 	.word	0x08008869

08008868 <_nx_udp_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800886c:	688d      	ldr	r5, [r1, #8]
{
 800886e:	4607      	mov	r7, r0

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8008870:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8008b48 <_nx_udp_packet_receive+0x2e0>
{
 8008874:	460e      	mov	r6, r1
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008876:	e9d5 4000 	ldrd	r4, r0, [r5]
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800887a:	f8d8 1000 	ldr.w	r1, [r8]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800887e:	ea84 4334 	eor.w	r3, r4, r4, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008882:	ea80 4230 	eor.w	r2, r0, r0, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008886:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008888:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800888a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800888e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008892:	ea83 2334 	eor.w	r3, r3, r4, ror #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008896:	ea82 2230 	eor.w	r2, r2, r0, ror #8
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800889a:	fa1f f983 	uxth.w	r9, r3
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800889e:	eb09 2a19 	add.w	sl, r9, r9, lsr #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80088a2:	e9c5 3200 	strd	r3, r2, [r5]
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 80088a6:	f00a 0a1f 	and.w	sl, sl, #31
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80088aa:	b129      	cbz	r1, 80088b8 <_nx_udp_packet_receive+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80088ac:	f3ef 8305 	mrs	r3, IPSR
 80088b0:	4aa2      	ldr	r2, [pc, #648]	; (8008b3c <_nx_udp_packet_receive+0x2d4>)
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	d027      	beq.n	8008908 <_nx_udp_packet_receive+0xa0>
 80088b8:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80088bc:	f8da 38a8 	ldr.w	r3, [sl, #2216]	; 0x8a8

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 80088c0:	b373      	cbz	r3, 8008920 <_nx_udp_packet_receive+0xb8>
 80088c2:	461c      	mov	r4, r3
 80088c4:	e002      	b.n	80088cc <_nx_udp_packet_receive+0x64>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 80088c6:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d03e      	beq.n	800894a <_nx_udp_packet_receive+0xe2>
        if (socket_ptr -> nx_udp_socket_port == port)
 80088cc:	68a2      	ldr	r2, [r4, #8]
 80088ce:	454a      	cmp	r2, r9
 80088d0:	d1f9      	bne.n	80088c6 <_nx_udp_packet_receive+0x5e>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80088d2:	f8d8 3000 	ldr.w	r3, [r8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d03c      	beq.n	8008954 <_nx_udp_packet_receive+0xec>
 80088da:	f3ef 8305 	mrs	r3, IPSR
 80088de:	4a97      	ldr	r2, [pc, #604]	; (8008b3c <_nx_udp_packet_receive+0x2d4>)
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	f000 80da 	beq.w	8008a9c <_nx_udp_packet_receive+0x234>
        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	454b      	cmp	r3, r9
 80088ec:	d032      	beq.n	8008954 <_nx_udp_packet_receive+0xec>
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80088ee:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	f000 80d7 	beq.w	8008aa6 <_nx_udp_packet_receive+0x23e>
        }
#endif /* !NX_DISABLE_IPV4 && !NX_DISABLE_ICMPV4_ERROR_MESSAGE  */

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* If ICMPv6 is enabled, send Destination unreachable. */
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 80088f8:	2b06      	cmp	r3, #6
 80088fa:	f000 80ad 	beq.w	8008a58 <_nx_udp_packet_receive+0x1f0>

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 80088fe:	4630      	mov	r0, r6

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
    }
}
 8008900:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        _nx_packet_release(packet_ptr);
 8008904:	f7fe b874 	b.w	80069f0 <_nx_packet_release>
 8008908:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 800890c:	f04f 31ff 	mov.w	r1, #4294967295
 8008910:	f207 603c 	addw	r0, r7, #1596	; 0x63c
 8008914:	f014 f8f0 	bl	801caf8 <_tx_mutex_get>
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8008918:	f8da 38a8 	ldr.w	r3, [sl, #2216]	; 0x8a8
    if (!socket_ptr)
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1d0      	bne.n	80088c2 <_nx_udp_packet_receive+0x5a>
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8008920:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8008924:	2a04      	cmp	r2, #4
 8008926:	d079      	beq.n	8008a1c <_nx_udp_packet_receive+0x1b4>
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8008928:	2a06      	cmp	r2, #6
 800892a:	d056      	beq.n	80089da <_nx_udp_packet_receive+0x172>
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800892c:	f8d8 3000 	ldr.w	r3, [r8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0e4      	beq.n	80088fe <_nx_udp_packet_receive+0x96>
 8008934:	f3ef 8305 	mrs	r3, IPSR
 8008938:	4a80      	ldr	r2, [pc, #512]	; (8008b3c <_nx_udp_packet_receive+0x2d4>)
 800893a:	6812      	ldr	r2, [r2, #0]
 800893c:	4313      	orrs	r3, r2
 800893e:	d1de      	bne.n	80088fe <_nx_udp_packet_receive+0x96>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008940:	f207 603c 	addw	r0, r7, #1596	; 0x63c
 8008944:	f014 f9c2 	bl	801cccc <_tx_mutex_put>
 8008948:	e7d9      	b.n	80088fe <_nx_udp_packet_receive+0x96>
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800894a:	f8d8 3000 	ldr.w	r3, [r8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1c3      	bne.n	80088da <_nx_udp_packet_receive+0x72>
 8008952:	e7c9      	b.n	80088e8 <_nx_udp_packet_receive+0x80>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008954:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008958:	b672      	cpsid	i
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 800895a:	4b79      	ldr	r3, [pc, #484]	; (8008b40 <_nx_udp_packet_receive+0x2d8>)
 800895c:	6822      	ldr	r2, [r4, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d134      	bne.n	80089cc <_nx_udp_packet_receive+0x164>
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 8008962:	f8da 38a8 	ldr.w	r3, [sl, #2216]	; 0x8a8
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 8008966:	6f25      	ldr	r5, [r4, #112]	; 0x70
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 8008968:	42a3      	cmp	r3, r4
 800896a:	d004      	beq.n	8008976 <_nx_udp_packet_receive+0x10e>
 800896c:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80b9 	beq.w	8008ae8 <_nx_udp_packet_receive+0x280>
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8008976:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (thread_ptr)
 8008978:	2800      	cmp	r0, #0
 800897a:	f000 80b8 	beq.w	8008aee <_nx_udp_packet_receive+0x286>
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800897e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008980:	4283      	cmp	r3, r0
 8008982:	f000 80c6 	beq.w	8008b12 <_nx_udp_packet_receive+0x2aa>
                thread_ptr -> tx_thread_suspended_previous;
 8008986:	6f42      	ldr	r2, [r0, #116]	; 0x74
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8008988:	65a3      	str	r3, [r4, #88]	; 0x58
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800898a:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800898c:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800898e:	6713      	str	r3, [r2, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8008990:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8008b4c <_nx_udp_packet_receive+0x2e4>
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008994:	2700      	movs	r7, #0
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8008996:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        _tx_thread_preempt_disable++;
 8008998:	f8dc 3000 	ldr.w	r3, [ip]
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800899c:	f8d0 e07c 	ldr.w	lr, [r0, #124]	; 0x7c
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 80089a0:	3a01      	subs	r2, #1
        _tx_thread_preempt_disable++;
 80089a2:	3301      	adds	r3, #1
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 80089a4:	65e2      	str	r2, [r4, #92]	; 0x5c
        _tx_thread_preempt_disable++;
 80089a6:	f8cc 3000 	str.w	r3, [ip]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80089aa:	6687      	str	r7, [r0, #104]	; 0x68
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 80089ac:	f8ce 6000 	str.w	r6, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80089b0:	f381 8810 	msr	PRIMASK, r1
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 80089b4:	f8c0 7084 	str.w	r7, [r0, #132]	; 0x84
        _tx_thread_system_resume(thread_ptr);
 80089b8:	f014 fc7a 	bl	801d2b0 <_tx_thread_system_resume>
    if (receive_callback)
 80089bc:	2d00      	cmp	r5, #0
 80089be:	f000 80ba 	beq.w	8008b36 <_nx_udp_packet_receive+0x2ce>
        (receive_callback)(socket_ptr);
 80089c2:	4620      	mov	r0, r4
 80089c4:	462b      	mov	r3, r5
}
 80089c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        (receive_callback)(socket_ptr);
 80089ca:	4718      	bx	r3
 80089cc:	f381 8810 	msr	PRIMASK, r1
        _nx_packet_release(packet_ptr);
 80089d0:	4630      	mov	r0, r6
}
 80089d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        _nx_packet_release(packet_ptr);
 80089d6:	f7fe b80b 	b.w	80069f0 <_nx_packet_release>
            if ((ip_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) != (ULONG)0xFF000000)
 80089da:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80089e2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80089e6:	d0a1      	beq.n	800892c <_nx_udp_packet_receive+0xc4>
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80089e8:	686a      	ldr	r2, [r5, #4]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 80089ea:	2300      	movs	r3, #0
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80089ec:	682c      	ldr	r4, [r5, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80089ee:	ea82 4032 	eor.w	r0, r2, r2, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80089f2:	ea84 4134 	eor.w	r1, r4, r4, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80089f6:	0a00      	lsrs	r0, r0, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80089f8:	0a09      	lsrs	r1, r1, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80089fa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80089fe:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a02:	ea80 2032 	eor.w	r0, r0, r2, ror #8
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8008a06:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a0a:	ea81 2134 	eor.w	r1, r1, r4, ror #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a0e:	6068      	str	r0, [r5, #4]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8008a10:	4638      	mov	r0, r7
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a12:	6029      	str	r1, [r5, #0]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8008a14:	4631      	mov	r1, r6
 8008a16:	f007 fce9 	bl	80103ec <_nx_icmpv6_send_error_message>
 8008a1a:	e787      	b.n	800892c <_nx_udp_packet_receive+0xc4>
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8008a1c:	f8d7 2888 	ldr.w	r2, [r7, #2184]	; 0x888
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	d083      	beq.n	800892c <_nx_udp_packet_receive+0xc4>
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8008a24:	4631      	mov	r1, r6
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a26:	e9d5 c200 	ldrd	ip, r2, [r5]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a2a:	ea8c 403c 	eor.w	r0, ip, ip, ror #16
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a2e:	ea82 4432 	eor.w	r4, r2, r2, ror #16
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a32:	0a00      	lsrs	r0, r0, #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a34:	0a24      	lsrs	r4, r4, #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a36:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a3a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a3e:	ea80 203c 	eor.w	r0, r0, ip, ror #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a42:	ea84 2432 	eor.w	r4, r4, r2, ror #8
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8008a46:	4a3f      	ldr	r2, [pc, #252]	; (8008b44 <_nx_udp_packet_receive+0x2dc>)
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a48:	6028      	str	r0, [r5, #0]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8008a4a:	4638      	mov	r0, r7
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a4c:	606c      	str	r4, [r5, #4]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8008a4e:	f006 fd79 	bl	800f544 <_nx_icmpv4_send_error_message>
 8008a52:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8008a56:	e767      	b.n	8008928 <_nx_udp_packet_receive+0xc0>
            if ((ip_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) != (ULONG)0xFF000000)
 8008a58:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008a60:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8008a64:	f43f af4b 	beq.w	80088fe <_nx_udp_packet_receive+0x96>
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a68:	686b      	ldr	r3, [r5, #4]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8008a6a:	4638      	mov	r0, r7
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a6c:	682c      	ldr	r4, [r5, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a6e:	ea83 4133 	eor.w	r1, r3, r3, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a72:	ea84 4234 	eor.w	r2, r4, r4, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a76:	0a09      	lsrs	r1, r1, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a78:	0a12      	lsrs	r2, r2, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a7a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a7e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a82:	ea81 2133 	eor.w	r1, r1, r3, ror #8
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8008a86:	2300      	movs	r3, #0
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a88:	ea82 2234 	eor.w	r2, r2, r4, ror #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a8c:	6069      	str	r1, [r5, #4]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8008a8e:	4631      	mov	r1, r6
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a90:	602a      	str	r2, [r5, #0]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8008a92:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
 8008a96:	f007 fca9 	bl	80103ec <_nx_icmpv6_send_error_message>
 8008a9a:	e730      	b.n	80088fe <_nx_udp_packet_receive+0x96>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008a9c:	f207 603c 	addw	r0, r7, #1596	; 0x63c
 8008aa0:	f014 f914 	bl	801cccc <_tx_mutex_put>
 8008aa4:	e720      	b.n	80088e8 <_nx_udp_packet_receive+0x80>
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8008aa6:	f8d7 3888 	ldr.w	r3, [r7, #2184]	; 0x888
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f43f af27 	beq.w	80088fe <_nx_udp_packet_receive+0x96>
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008ab0:	686a      	ldr	r2, [r5, #4]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8008ab2:	2300      	movs	r3, #0
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008ab4:	f8d5 c000 	ldr.w	ip, [r5]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8008ab8:	4631      	mov	r1, r6
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008aba:	ea82 4432 	eor.w	r4, r2, r2, ror #16
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008abe:	ea8c 403c 	eor.w	r0, ip, ip, ror #16
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008ac2:	0a24      	lsrs	r4, r4, #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008ac4:	0a00      	lsrs	r0, r0, #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008ac6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008aca:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008ace:	ea84 2432 	eor.w	r4, r4, r2, ror #8
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8008ad2:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <_nx_udp_packet_receive+0x2dc>)
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008ad4:	ea80 203c 	eor.w	r0, r0, ip, ror #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008ad8:	606c      	str	r4, [r5, #4]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008ada:	6028      	str	r0, [r5, #0]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8008adc:	4638      	mov	r0, r7
 8008ade:	f006 fd31 	bl	800f544 <_nx_icmpv4_send_error_message>
 8008ae2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8008ae6:	e707      	b.n	80088f8 <_nx_udp_packet_receive+0x90>
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 8008ae8:	f8ca 48a8 	str.w	r4, [sl, #2216]	; 0x8a8
 8008aec:	e743      	b.n	8008976 <_nx_udp_packet_receive+0x10e>
 8008aee:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
        if (socket_ptr -> nx_udp_socket_receive_head)
 8008af2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008af4:	f10c 0301 	add.w	r3, ip, #1
 8008af8:	b172      	cbz	r2, 8008b18 <_nx_udp_packet_receive+0x2b0>
            if (socket_ptr -> nx_udp_socket_receive_count >
 8008afa:	f8d4 e040 	ldr.w	lr, [r4, #64]	; 0x40
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8008afe:	6ca7      	ldr	r7, [r4, #72]	; 0x48
            if (socket_ptr -> nx_udp_socket_receive_count >
 8008b00:	459e      	cmp	lr, r3
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8008b02:	61fe      	str	r6, [r7, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8008b04:	64a6      	str	r6, [r4, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8008b06:	61f0      	str	r0, [r6, #28]
            socket_ptr -> nx_udp_socket_receive_count++;
 8008b08:	63e3      	str	r3, [r4, #60]	; 0x3c
            if (socket_ptr -> nx_udp_socket_receive_count >
 8008b0a:	d30a      	bcc.n	8008b22 <_nx_udp_packet_receive+0x2ba>
 8008b0c:	f381 8810 	msr	PRIMASK, r1
 8008b10:	e754      	b.n	80089bc <_nx_udp_packet_receive+0x154>
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b16:	e73b      	b.n	8008990 <_nx_udp_packet_receive+0x128>
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8008b18:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8008b1c:	61f2      	str	r2, [r6, #28]
            socket_ptr -> nx_udp_socket_receive_count++;
 8008b1e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008b20:	e7f4      	b.n	8008b0c <_nx_udp_packet_receive+0x2a4>
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8008b22:	69d3      	ldr	r3, [r2, #28]
                socket_ptr -> nx_udp_socket_receive_count--;
 8008b24:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8008b28:	6463      	str	r3, [r4, #68]	; 0x44
 8008b2a:	f381 8810 	msr	PRIMASK, r1
                _nx_packet_release(packet_ptr);
 8008b2e:	4610      	mov	r0, r2
 8008b30:	f7fd ff5e 	bl	80069f0 <_nx_packet_release>
 8008b34:	e742      	b.n	80089bc <_nx_udp_packet_receive+0x154>
}
 8008b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200000ec 	.word	0x200000ec
 8008b40:	55445020 	.word	0x55445020
 8008b44:	03030000 	.word	0x03030000
 8008b48:	20007a80 	.word	0x20007a80
 8008b4c:	20007a7c 	.word	0x20007a7c

08008b50 <_nx_udp_socket_bind>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8008b50:	b5f0      	push	{r4, r5, r6, r7, lr}
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8008b52:	68c5      	ldr	r5, [r0, #12]
{
 8008b54:	b083      	sub	sp, #12
 8008b56:	4604      	mov	r4, r0
 8008b58:	4617      	mov	r7, r2
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008b5a:	f205 663c 	addw	r6, r5, #1596	; 0x63c
{
 8008b5e:	9101      	str	r1, [sp, #4]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008b60:	f04f 31ff 	mov.w	r1, #4294967295
 8008b64:	4630      	mov	r0, r6
 8008b66:	f013 ffc7 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8008b6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008b6c:	b90b      	cbnz	r3, 8008b72 <_nx_udp_socket_bind+0x22>
 8008b6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008b70:	b12b      	cbz	r3, 8008b7e <_nx_udp_socket_bind+0x2e>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008b72:	4630      	mov	r0, r6
 8008b74:	f014 f8aa 	bl	801cccc <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 8008b78:	2022      	movs	r0, #34	; 0x22
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));

        /* Return the port unavailable error.  */
        return(NX_PORT_UNAVAILABLE);
    }
}
 8008b7a:	b003      	add	sp, #12
 8008b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (port == NX_ANY_PORT)
 8008b7e:	9a01      	ldr	r2, [sp, #4]
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	d03e      	beq.n	8008c02 <_nx_udp_socket_bind+0xb2>
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8008b84:	eb02 2312 	add.w	r3, r2, r2, lsr #8
    socket_ptr -> nx_udp_socket_port =  port;
 8008b88:	60a2      	str	r2, [r4, #8]
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8008b8a:	f003 031f 	and.w	r3, r3, #31
 8008b8e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8008b92:	f8d5 08a8 	ldr.w	r0, [r5, #2216]	; 0x8a8
    if (search_ptr)
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d05e      	beq.n	8008c58 <_nx_udp_socket_bind+0x108>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	e002      	b.n	8008ba4 <_nx_udp_socket_bind+0x54>
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8008b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        } while (search_ptr != end_ptr);
 8008ba0:	4298      	cmp	r0, r3
 8008ba2:	d043      	beq.n	8008c2c <_nx_udp_socket_bind+0xdc>
            if (search_ptr -> nx_udp_socket_port == port)
 8008ba4:	6899      	ldr	r1, [r3, #8]
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	d1f9      	bne.n	8008b9e <_nx_udp_socket_bind+0x4e>
    else if (wait_option)
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d065      	beq.n	8008c7a <_nx_udp_socket_bind+0x12a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008bae:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008bb2:	b672      	cpsid	i
        thread_ptr =  _tx_thread_current_ptr;
 8008bb4:	4a33      	ldr	r2, [pc, #204]	; (8008c84 <_nx_udp_socket_bind+0x134>)
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 8008bb6:	4934      	ldr	r1, [pc, #208]	; (8008c88 <_nx_udp_socket_bind+0x138>)
        thread_ptr =  _tx_thread_current_ptr;
 8008bb8:	6815      	ldr	r5, [r2, #0]
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 8008bba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 8008bbc:	e9c5 141a 	strd	r1, r4, [r5, #104]	; 0x68
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 8008bc0:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	d04f      	beq.n	8008c68 <_nx_udp_socket_bind+0x118>
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 8008bc8:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8008bca:	e9c5 211c 	strd	r2, r1, [r5, #112]	; 0x70
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 8008bce:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8008bd0:	670d      	str	r5, [r1, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8008bd2:	6755      	str	r5, [r2, #116]	; 0x74
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 8008bd4:	6e59      	ldr	r1, [r3, #100]	; 0x64
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008bd6:	240c      	movs	r4, #12
        _tx_thread_preempt_disable++;
 8008bd8:	482c      	ldr	r0, [pc, #176]	; (8008c8c <_nx_udp_socket_bind+0x13c>)
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 8008bda:	3101      	adds	r1, #1
        _tx_thread_preempt_disable++;
 8008bdc:	6802      	ldr	r2, [r0, #0]
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 8008bde:	6659      	str	r1, [r3, #100]	; 0x64
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008be0:	2301      	movs	r3, #1
        _tx_thread_preempt_disable++;
 8008be2:	3201      	adds	r2, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008be4:	64ef      	str	r7, [r5, #76]	; 0x4c
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008be6:	632c      	str	r4, [r5, #48]	; 0x30
        _tx_thread_preempt_disable++;
 8008be8:	6002      	str	r2, [r0, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008bea:	63ab      	str	r3, [r5, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008bec:	f38c 8810 	msr	PRIMASK, ip
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f014 f86b 	bl	801cccc <_tx_mutex_put>
        _tx_thread_system_suspend(thread_ptr);
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f014 fbe0 	bl	801d3bc <_tx_thread_system_suspend>
        return(thread_ptr -> tx_thread_suspend_status);
 8008bfc:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 8008c00:	e7bb      	b.n	8008b7a <_nx_udp_socket_bind+0x2a>
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8008c02:	f015 fd4f 	bl	801e6a4 <rand>
 8008c06:	4601      	mov	r1, r0
 8008c08:	aa02      	add	r2, sp, #8
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8008c0a:	4628      	mov	r0, r5
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8008c0c:	424b      	negs	r3, r1
 8008c0e:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8008c12:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c16:	bf58      	it	pl
 8008c18:	4259      	negpl	r1, r3
 8008c1a:	f501 4140 	add.w	r1, r1, #49152	; 0xc000
 8008c1e:	f842 1d04 	str.w	r1, [r2, #-4]!
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8008c22:	f00b fd53 	bl	80146cc <_nx_udp_free_port_find>
 8008c26:	bb18      	cbnz	r0, 8008c70 <_nx_udp_socket_bind+0x120>
 8008c28:	9a01      	ldr	r2, [sp, #4]
 8008c2a:	e7ab      	b.n	8008b84 <_nx_udp_socket_bind+0x34>
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 8008c2c:	6881      	ldr	r1, [r0, #8]
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	d0bb      	beq.n	8008baa <_nx_udp_socket_bind+0x5a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008c32:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008c36:	b672      	cpsid	i
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 8008c38:	f8d5 38a8 	ldr.w	r3, [r5, #2216]	; 0x8a8
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8008c3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c3e:	e9c4 3113 	strd	r3, r1, [r4, #76]	; 0x4c
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 8008c42:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c44:	64cc      	str	r4, [r1, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 8008c46:	651c      	str	r4, [r3, #80]	; 0x50
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008c48:	f382 8810 	msr	PRIMASK, r2
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f014 f83d 	bl	801cccc <_tx_mutex_put>
        return(NX_SUCCESS);
 8008c52:	2000      	movs	r0, #0
}
 8008c54:	b003      	add	sp, #12
 8008c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008c58:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008c5c:	b672      	cpsid	i
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 8008c5e:	e9c4 4413 	strd	r4, r4, [r4, #76]	; 0x4c
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 8008c62:	f8c5 48a8 	str.w	r4, [r5, #2216]	; 0x8a8
 8008c66:	e7ef      	b.n	8008c48 <_nx_udp_socket_bind+0xf8>
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 8008c68:	661d      	str	r5, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 8008c6a:	e9c5 551c 	strd	r5, r5, [r5, #112]	; 0x70
 8008c6e:	e7b1      	b.n	8008bd4 <_nx_udp_socket_bind+0x84>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008c70:	4630      	mov	r0, r6
 8008c72:	f014 f82b 	bl	801cccc <_tx_mutex_put>
            return(NX_NO_FREE_PORTS);
 8008c76:	2045      	movs	r0, #69	; 0x45
 8008c78:	e77f      	b.n	8008b7a <_nx_udp_socket_bind+0x2a>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f014 f826 	bl	801cccc <_tx_mutex_put>
        return(NX_PORT_UNAVAILABLE);
 8008c80:	2023      	movs	r0, #35	; 0x23
 8008c82:	e77a      	b.n	8008b7a <_nx_udp_socket_bind+0x2a>
 8008c84:	20007a80 	.word	0x20007a80
 8008c88:	0801465d 	.word	0x0801465d
 8008c8c:	20007a7c 	.word	0x20007a7c

08008c90 <_nx_udp_socket_checksum_disable>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008c90:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008c94:	b672      	cpsid	i

    /* Lockout interrupts.  */
    TX_DISABLE

    /* Determine if the socket is currently bound.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 8008c96:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008c98:	b12b      	cbz	r3, 8008ca6 <_nx_udp_socket_checksum_disable+0x16>
        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
    }

    /* Set the checksum disable flag.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_TRUE;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	6383      	str	r3, [r0, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008c9e:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8008ca2:	2000      	movs	r0, #0
}
 8008ca4:	4770      	bx	lr
 8008ca6:	f382 8810 	msr	PRIMASK, r2
        return(NX_NOT_BOUND);
 8008caa:	2024      	movs	r0, #36	; 0x24
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop

08008cb0 <_nx_udp_socket_create>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 8008cb0:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	4692      	mov	sl, r2

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 8008cba:	4608      	mov	r0, r1
 8008cbc:	2278      	movs	r2, #120	; 0x78
 8008cbe:	2100      	movs	r1, #0
{
 8008cc0:	461f      	mov	r7, r3
 8008cc2:	9d08      	ldr	r5, [sp, #32]
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 8008cc4:	f015 fc69 	bl	801e59a <memset>

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 8008cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008cca:	f206 693c 	addw	r9, r6, #1596	; 0x63c
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8008cce:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 8008cd2:	6323      	str	r3, [r4, #48]	; 0x30
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008cd4:	f04f 31ff 	mov.w	r1, #4294967295
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 8008cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008cda:	4648      	mov	r0, r9
    socket_ptr -> nx_udp_socket_name =  name;
 8008cdc:	f8c4 a004 	str.w	sl, [r4, #4]
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 8008ce0:	60e6      	str	r6, [r4, #12]
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8008ce2:	6365      	str	r5, [r4, #52]	; 0x34
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 8008ce4:	62e7      	str	r7, [r4, #44]	; 0x2c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 8008ce6:	6423      	str	r3, [r4, #64]	; 0x40
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008ce8:	f013 ff06 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008cec:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008cf0:	b672      	cpsid	i

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 8008cf2:	490e      	ldr	r1, [pc, #56]	; (8008d2c <_nx_udp_socket_create+0x7c>)

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 8008cf4:	f8d6 3928 	ldr.w	r3, [r6, #2344]	; 0x928
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 8008cf8:	6021      	str	r1, [r4, #0]
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 8008cfa:	b18b      	cbz	r3, 8008d20 <_nx_udp_socket_create+0x70>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 8008cfc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 8008cfe:	66dc      	str	r4, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 8008d00:	668c      	str	r4, [r1, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 8008d02:	e9c4 311a 	strd	r3, r1, [r4, #104]	; 0x68
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 8008d06:	f8d6 392c 	ldr.w	r3, [r6, #2348]	; 0x92c
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f8c6 392c 	str.w	r3, [r6, #2348]	; 0x92c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008d10:	f382 8810 	msr	PRIMASK, r2

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008d14:	4648      	mov	r0, r9
 8008d16:	f013 ffd9 	bl	801cccc <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 8008d20:	f8c6 4928 	str.w	r4, [r6, #2344]	; 0x928
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 8008d24:	e9c4 441a 	strd	r4, r4, [r4, #104]	; 0x68
 8008d28:	e7ed      	b.n	8008d06 <_nx_udp_socket_create+0x56>
 8008d2a:	bf00      	nop
 8008d2c:	55445020 	.word	0x55445020

08008d30 <_nx_udp_socket_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 8008d30:	b570      	push	{r4, r5, r6, lr}

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8008d32:	68c5      	ldr	r5, [r0, #12]
{
 8008d34:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008d36:	f04f 31ff 	mov.w	r1, #4294967295
 8008d3a:	f205 663c 	addw	r6, r5, #1596	; 0x63c
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f013 feda 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 8008d44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008d46:	bb03      	cbnz	r3, 8008d8a <_nx_udp_socket_delete+0x5a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008d48:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008d4c:	b672      	cpsid	i

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 8008d4e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    socket_ptr -> nx_udp_socket_id =  0;
 8008d50:	6023      	str	r3, [r4, #0]
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 8008d52:	42a2      	cmp	r2, r4
 8008d54:	d016      	beq.n	8008d84 <_nx_udp_socket_delete+0x54>
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
            socket_ptr -> nx_udp_socket_created_previous;
 8008d56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
            socket_ptr -> nx_udp_socket_created_next;

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 8008d58:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8008d5c:	66d0      	str	r0, [r2, #108]	; 0x6c
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 8008d5e:	42a3      	cmp	r3, r4
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8008d60:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008d62:	6682      	str	r2, [r0, #104]	; 0x68
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 8008d64:	d00d      	beq.n	8008d82 <_nx_udp_socket_delete+0x52>
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 8008d66:	f8d5 392c 	ldr.w	r3, [r5, #2348]	; 0x92c
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	f8c5 392c 	str.w	r3, [r5, #2348]	; 0x92c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008d70:	f381 8810 	msr	PRIMASK, r1

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008d74:	4630      	mov	r0, r6
 8008d76:	f013 ffa9 	bl	801cccc <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8008d7a:	f014 fa7b 	bl	801d274 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8008d7e:	2000      	movs	r0, #0
}
 8008d80:	bd70      	pop	{r4, r5, r6, pc}
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 8008d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d84:	f8c5 3928 	str.w	r3, [r5, #2344]	; 0x928
 8008d88:	e7ed      	b.n	8008d66 <_nx_udp_socket_delete+0x36>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f013 ff9e 	bl	801cccc <_tx_mutex_put>
        return(NX_STILL_BOUND);
 8008d90:	2042      	movs	r0, #66	; 0x42
}
 8008d92:	bd70      	pop	{r4, r5, r6, pc}

08008d94 <_nx_udp_socket_receive>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8008d94:	2300      	movs	r3, #0
{
 8008d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *packet_ptr =   NX_NULL;
 8008d9a:	600b      	str	r3, [r1, #0]
{
 8008d9c:	b083      	sub	sp, #12
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008d9e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008da2:	b672      	cpsid	i

        /* Lockout interrupts.  */
        TX_DISABLE

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 8008da4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8008da6:	2c00      	cmp	r4, #0
 8008da8:	f000 80b9 	beq.w	8008f1e <_nx_udp_socket_receive+0x18a>
 8008dac:	4691      	mov	r9, r2
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 8008db2:	f8df b198 	ldr.w	fp, [pc, #408]	; 8008f4c <_nx_udp_socket_receive+0x1b8>

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8008db6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8008f50 <_nx_udp_socket_receive+0x1bc>
 8008dba:	462a      	mov	r2, r5
 8008dbc:	461c      	mov	r4, r3
 8008dbe:	e047      	b.n	8008e50 <_nx_udp_socket_receive+0xbc>
            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 8008dc0:	686a      	ldr	r2, [r5, #4]
 8008dc2:	fa1f fc82 	uxth.w	ip, r2
 8008dc6:	f1bc 0f00 	cmp.w	ip, #0
 8008dca:	d05e      	beq.n	8008e8a <_nx_udp_socket_receive+0xf6>
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	f040 80b5 	bne.w	8008f3c <_nx_udp_socket_receive+0x1a8>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 8008dd2:	6b81      	ldr	r1, [r0, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 8008dd4:	f101 030c 	add.w	r3, r1, #12
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 8008dd8:	f101 0e10 	add.w	lr, r1, #16

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008ddc:	f8d5 8000 	ldr.w	r8, [r5]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008de0:	ea82 4c32 	eor.w	ip, r2, r2, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008de4:	ea88 4138 	eor.w	r1, r8, r8, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008dec:	0a09      	lsrs	r1, r1, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008dee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008df2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008df6:	ea8c 2c32 	eor.w	ip, ip, r2, ror #8
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 8008dfa:	6a42      	ldr	r2, [r0, #36]	; 0x24
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008dfc:	ea81 2138 	eor.w	r1, r1, r8, ror #8
 8008e00:	e9c5 1c00 	strd	r1, ip, [r5]
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 8008e04:	2111      	movs	r1, #17
 8008e06:	f8cd e000 	str.w	lr, [sp]
 8008e0a:	f7f9 f86b 	bl	8001ee4 <_nx_ip_checksum_compute>

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;

                /* Determine if it is valid.  */
                if (checksum == 0)
 8008e0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008e12:	e9d5 2c00 	ldrd	r2, ip, [r5]
                if (checksum == 0)
 8008e16:	4288      	cmp	r0, r1
 8008e18:	6838      	ldr	r0, [r7, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008e1a:	ea82 4e32 	eor.w	lr, r2, r2, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008e1e:	ea8c 433c 	eor.w	r3, ip, ip, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008e22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008e26:	ea4f 2313 	mov.w	r3, r3, lsr #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008e2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008e2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008e32:	ea8e 2232 	eor.w	r2, lr, r2, ror #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008e36:	ea83 233c 	eor.w	r3, r3, ip, ror #8
 8008e3a:	e9c5 2300 	strd	r2, r3, [r5]
                if (checksum == 0)
 8008e3e:	d075      	beq.n	8008f2c <_nx_udp_socket_receive+0x198>
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 8008e40:	f7fd fdd6 	bl	80069f0 <_nx_packet_release>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008e44:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008e48:	b672      	cpsid	i
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 8008e4a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d065      	beq.n	8008f1c <_nx_udp_socket_receive+0x188>
        if (socket_ptr -> nx_udp_socket_receive_head)
 8008e50:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d031      	beq.n	8008eba <_nx_udp_socket_receive+0x126>
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8008e56:	603b      	str	r3, [r7, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	6473      	str	r3, [r6, #68]	; 0x44
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d057      	beq.n	8008f10 <_nx_udp_socket_receive+0x17c>
            socket_ptr -> nx_udp_socket_receive_count--;
 8008e60:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8008e62:	3b01      	subs	r3, #1
 8008e64:	63f3      	str	r3, [r6, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008e66:	f382 8810 	msr	PRIMASK, r2
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8008e6a:	6838      	ldr	r0, [r7, #0]
 8008e6c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d013      	beq.n	8008e9c <_nx_udp_socket_receive+0x108>
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8008e74:	2b06      	cmp	r3, #6
 8008e76:	d101      	bne.n	8008e7c <_nx_udp_socket_receive+0xe8>
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8008e78:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008e7a:	6854      	ldr	r4, [r2, #4]
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 8008e7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e7e:	6885      	ldr	r5, [r0, #8]
 8008e80:	0692      	lsls	r2, r2, #26
 8008e82:	d410      	bmi.n	8008ea6 <_nx_udp_socket_receive+0x112>
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 8008e84:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8008e86:	2900      	cmp	r1, #0
 8008e88:	d09a      	beq.n	8008dc0 <_nx_udp_socket_receive+0x2c>
 8008e8a:	2b06      	cmp	r3, #6
 8008e8c:	d10b      	bne.n	8008ea6 <_nx_udp_socket_receive+0x112>
                    ipv6_header = (NX_IPV6_HEADER *)(current_ptr -> nx_packet_ip_header);
 8008e8e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008e90:	686a      	ldr	r2, [r5, #4]
                    ip_src_addr = (&ipv6_header -> nx_ip_header_source_ip[0]);
 8008e92:	f101 0308 	add.w	r3, r1, #8
                    ip_dest_addr = (&ipv6_header -> nx_ip_header_destination_ip[0]);
 8008e96:	f101 0e18 	add.w	lr, r1, #24
 8008e9a:	e79f      	b.n	8008ddc <_nx_udp_socket_receive+0x48>
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 8008e9c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008e9e:	6885      	ldr	r5, [r0, #8]
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 8008ea0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008ea2:	0692      	lsls	r2, r2, #26
 8008ea4:	d5ee      	bpl.n	8008e84 <_nx_udp_socket_receive+0xf0>
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8008ea6:	6a42      	ldr	r2, [r0, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 8008ea8:	3508      	adds	r5, #8

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 8008eaa:	2300      	movs	r3, #0
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8008eac:	3a08      	subs	r2, #8
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 8008eae:	6085      	str	r5, [r0, #8]
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8008eb0:	6242      	str	r2, [r0, #36]	; 0x24
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	b003      	add	sp, #12
 8008eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (wait_option)
 8008eba:	f1b9 0f00 	cmp.w	r9, #0
 8008ebe:	d037      	beq.n	8008f30 <_nx_udp_socket_receive+0x19c>
                thread_ptr =  _tx_thread_current_ptr;
 8008ec0:	f8db 5000 	ldr.w	r5, [fp]
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 8008ec4:	6db3      	ldr	r3, [r6, #88]	; 0x58
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 8008ec6:	4920      	ldr	r1, [pc, #128]	; (8008f48 <_nx_udp_socket_receive+0x1b4>)
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8008ec8:	67ef      	str	r7, [r5, #124]	; 0x7c
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8008eca:	e9c5 161a 	strd	r1, r6, [r5, #104]	; 0x68
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 8008ece:	b30b      	cbz	r3, 8008f14 <_nx_udp_socket_receive+0x180>
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 8008ed0:	6f59      	ldr	r1, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 8008ed2:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008ed6:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8008ed8:	670d      	str	r5, [r1, #112]	; 0x70
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8008eda:	675d      	str	r5, [r3, #116]	; 0x74
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 8008edc:	6df1      	ldr	r1, [r6, #92]	; 0x5c
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008ede:	2001      	movs	r0, #1
                _tx_thread_preempt_disable++;
 8008ee0:	f8da 3000 	ldr.w	r3, [sl]
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008ee4:	f04f 0c0c 	mov.w	ip, #12
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 8008ee8:	4401      	add	r1, r0
                _tx_thread_preempt_disable++;
 8008eea:	4403      	add	r3, r0
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 8008eec:	65f1      	str	r1, [r6, #92]	; 0x5c
                _tx_thread_preempt_disable++;
 8008eee:	f8ca 3000 	str.w	r3, [sl]
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008ef2:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008ef6:	f8c5 c030 	str.w	ip, [r5, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008efa:	63a8      	str	r0, [r5, #56]	; 0x38
 8008efc:	f382 8810 	msr	PRIMASK, r2
                _tx_thread_system_suspend(thread_ptr);
 8008f00:	4628      	mov	r0, r5
 8008f02:	f014 fa5b 	bl	801d3bc <_tx_thread_system_suspend>
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 8008f06:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0ad      	beq.n	8008e6a <_nx_udp_socket_receive+0xd6>
 8008f0e:	e7d0      	b.n	8008eb2 <_nx_udp_socket_receive+0x11e>
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 8008f10:	64b3      	str	r3, [r6, #72]	; 0x48
 8008f12:	e7a5      	b.n	8008e60 <_nx_udp_socket_receive+0xcc>
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 8008f14:	65b5      	str	r5, [r6, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 8008f16:	e9c5 551c 	strd	r5, r5, [r5, #112]	; 0x70
 8008f1a:	e7df      	b.n	8008edc <_nx_udp_socket_receive+0x148>
 8008f1c:	4615      	mov	r5, r2
 8008f1e:	f385 8810 	msr	PRIMASK, r5
            return(NX_NOT_BOUND);
 8008f22:	2324      	movs	r3, #36	; 0x24
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	b003      	add	sp, #12
 8008f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2c:	6885      	ldr	r5, [r0, #8]
 8008f2e:	e7ba      	b.n	8008ea6 <_nx_udp_socket_receive+0x112>
 8008f30:	f382 8810 	msr	PRIMASK, r2
                return(NX_NO_PACKET);
 8008f34:	2301      	movs	r3, #1
                *packet_ptr =   NX_NULL;
 8008f36:	f8c7 9000 	str.w	r9, [r7]
                return(NX_NO_PACKET);
 8008f3a:	e7ba      	b.n	8008eb2 <_nx_udp_socket_receive+0x11e>
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) /*  IPv6 */
 8008f3c:	2b06      	cmp	r3, #6
 8008f3e:	d0a6      	beq.n	8008e8e <_nx_udp_socket_receive+0xfa>
 8008f40:	468e      	mov	lr, r1
 8008f42:	460b      	mov	r3, r1
 8008f44:	e74a      	b.n	8008ddc <_nx_udp_socket_receive+0x48>
 8008f46:	bf00      	nop
 8008f48:	08014765 	.word	0x08014765
 8008f4c:	20007a80 	.word	0x20007a80
 8008f50:	20007a7c 	.word	0x20007a7c

08008f54 <_nx_udp_socket_unbind>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 8008f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8008f58:	68c7      	ldr	r7, [r0, #12]
{
 8008f5a:	4604      	mov	r4, r0
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f60:	f207 663c 	addw	r6, r7, #1596	; 0x63c
 8008f64:	4630      	mov	r0, r6
 8008f66:	f013 fdc7 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 8008f6a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	f000 80a6 	beq.w	80090be <_nx_udp_socket_unbind+0x16a>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 8008f72:	68a3      	ldr	r3, [r4, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8008f74:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8008f78:	f003 081f 	and.w	r8, r3, #31
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008f7c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008f80:	b672      	cpsid	i

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 8008f82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d05e      	beq.n	8009046 <_nx_udp_socket_unbind+0xf2>
 8008f88:	eb07 0188 	add.w	r1, r7, r8, lsl #2

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
            socket_ptr -> nx_udp_socket_bound_previous;
 8008f8c:	6d20      	ldr	r0, [r4, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
            socket_ptr -> nx_udp_socket_bound_next;

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 8008f8e:	f8d1 58a8 	ldr.w	r5, [r1, #2216]	; 0x8a8
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 8008f92:	6518      	str	r0, [r3, #80]	; 0x50
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 8008f94:	42a5      	cmp	r5, r4
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8008f96:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008f98:	64c3      	str	r3, [r0, #76]	; 0x4c
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 8008f9a:	f000 80a2 	beq.w	80090e2 <_nx_udp_socket_unbind+0x18e>
            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	64e3      	str	r3, [r4, #76]	; 0x4c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008fa2:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 8008fa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d057      	beq.n	800905c <_nx_udp_socket_unbind+0x108>

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 8008fac:	2200      	movs	r2, #0
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8008fae:	6c65      	ldr	r5, [r4, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 8008fb0:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 8008fb4:	4628      	mov	r0, r5
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 8008fb6:	69ed      	ldr	r5, [r5, #28]
            _nx_packet_release(packet_ptr);
 8008fb8:	f7fd fd1a 	bl	80069f0 <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 8008fbc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008fbe:	3a01      	subs	r2, #1
 8008fc0:	63e2      	str	r2, [r4, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	d1f6      	bne.n	8008fb4 <_nx_udp_socket_unbind+0x60>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008fc6:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008fca:	b672      	cpsid	i
    /* Disable interrupts again.  */
    TX_DISABLE

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 8008fcc:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    if (thread_ptr)
 8008fd0:	f1b9 0f00 	cmp.w	r9, #0
 8008fd4:	d06b      	beq.n	80090ae <_nx_udp_socket_unbind+0x15a>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8008fd6:	f8d9 1070 	ldr.w	r1, [r9, #112]	; 0x70
 8008fda:	4549      	cmp	r1, r9
 8008fdc:	d07f      	beq.n	80090de <_nx_udp_socket_unbind+0x18a>
            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
                thread_ptr -> tx_thread_suspended_previous;
 8008fde:	f8d9 3074 	ldr.w	r3, [r9, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008fe2:	674b      	str	r3, [r1, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008fe4:	f8d9 3074 	ldr.w	r3, [r9, #116]	; 0x74
 8008fe8:	6719      	str	r1, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_next;
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8008fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fec:	eb07 0788 	add.w	r7, r7, r8, lsl #2

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8008ff0:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 8008ff4:	f04f 0c00 	mov.w	ip, #0
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8008ff8:	1e55      	subs	r5, r2, #1
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 8008ffa:	f8d7 28a8 	ldr.w	r2, [r7, #2216]	; 0x8a8
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8008ffe:	6665      	str	r5, [r4, #100]	; 0x64
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 8009000:	6619      	str	r1, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 8009002:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8009006:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
        if (ip_ptr -> nx_ip_udp_port_table[index])
 800900a:	2a00      	cmp	r2, #0
 800900c:	d062      	beq.n	80090d4 <_nx_udp_socket_unbind+0x180>
            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800900e:	6d11      	ldr	r1, [r2, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 8009010:	e9c3 2113 	strd	r2, r1, [r3, #76]	; 0x4c
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8009014:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8009016:	64cb      	str	r3, [r1, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 8009018:	6513      	str	r3, [r2, #80]	; 0x50

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800901a:	4a36      	ldr	r2, [pc, #216]	; (80090f4 <_nx_udp_socket_unbind+0x1a0>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800901c:	2500      	movs	r5, #0
        _tx_thread_preempt_disable++;
 800901e:	6813      	ldr	r3, [r2, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009020:	f8c9 5068 	str.w	r5, [r9, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8009024:	3301      	adds	r3, #1
 8009026:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009028:	f380 8810 	msr	PRIMASK, r0

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800902c:	f8c9 5084 	str.w	r5, [r9, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009030:	4630      	mov	r0, r6
 8009032:	f013 fe4b 	bl	801cccc <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009036:	4648      	mov	r0, r9
 8009038:	f014 f93a 	bl	801d2b0 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800903c:	f014 f91a 	bl	801d274 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8009040:	4628      	mov	r0, r5
}
 8009042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 8009046:	2100      	movs	r1, #0
 8009048:	f208 232a 	addw	r3, r8, #554	; 0x22a
 800904c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 8009050:	64e1      	str	r1, [r4, #76]	; 0x4c
 8009052:	f382 8810 	msr	PRIMASK, r2
    if (socket_ptr -> nx_udp_socket_receive_count)
 8009056:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1a7      	bne.n	8008fac <_nx_udp_socket_unbind+0x58>
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800905c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800905e:	2a00      	cmp	r2, #0
 8009060:	d0b1      	beq.n	8008fc6 <_nx_udp_socket_unbind+0x72>
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009062:	469a      	mov	sl, r3
 8009064:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80090f4 <_nx_udp_socket_unbind+0x1a0>
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 8009068:	f04f 0926 	mov.w	r9, #38	; 0x26
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800906c:	6da5      	ldr	r5, [r4, #88]	; 0x58
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800906e:	65a3      	str	r3, [r4, #88]	; 0x58
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009070:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009074:	b672      	cpsid	i
            _tx_thread_preempt_disable++;
 8009076:	f8db 3000 	ldr.w	r3, [fp]
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800907a:	f8c5 a068 	str.w	sl, [r5, #104]	; 0x68
            _tx_thread_preempt_disable++;
 800907e:	3301      	adds	r3, #1
 8009080:	f8cb 3000 	str.w	r3, [fp]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009084:	f382 8810 	msr	PRIMASK, r2
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 8009088:	f8c5 9084 	str.w	r9, [r5, #132]	; 0x84
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800908c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800908e:	6f68      	ldr	r0, [r5, #116]	; 0x74
 8009090:	f014 f90e 	bl	801d2b0 <_tx_thread_system_resume>
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009094:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009096:	3b01      	subs	r3, #1
 8009098:	65e3      	str	r3, [r4, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e8      	bne.n	8009070 <_nx_udp_socket_unbind+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800909e:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80090a2:	b672      	cpsid	i
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 80090a4:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    if (thread_ptr)
 80090a8:	f1b9 0f00 	cmp.w	r9, #0
 80090ac:	d193      	bne.n	8008fd6 <_nx_udp_socket_unbind+0x82>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80090ae:	f380 8810 	msr	PRIMASK, r0
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80090b2:	4630      	mov	r0, r6
 80090b4:	f013 fe0a 	bl	801cccc <_tx_mutex_put>
        return(NX_SUCCESS);
 80090b8:	4648      	mov	r0, r9
}
 80090ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 80090be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090c0:	b198      	cbz	r0, 80090ea <_nx_udp_socket_unbind+0x196>
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 80090c2:	4629      	mov	r1, r5
 80090c4:	f00b faca 	bl	801465c <_nx_udp_bind_cleanup>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80090c8:	4630      	mov	r0, r6
 80090ca:	f013 fdff 	bl	801cccc <_tx_mutex_put>
            return(NX_SUCCESS);
 80090ce:	4628      	mov	r0, r5
}
 80090d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 80090d4:	e9c3 3313 	strd	r3, r3, [r3, #76]	; 0x4c
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 80090d8:	f8c7 38a8 	str.w	r3, [r7, #2216]	; 0x8a8
 80090dc:	e79d      	b.n	800901a <_nx_udp_socket_unbind+0xc6>
 80090de:	2100      	movs	r1, #0
 80090e0:	e783      	b.n	8008fea <_nx_udp_socket_unbind+0x96>
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 80090e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80090e4:	f8c1 38a8 	str.w	r3, [r1, #2216]	; 0x8a8
 80090e8:	e759      	b.n	8008f9e <_nx_udp_socket_unbind+0x4a>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80090ea:	4630      	mov	r0, r6
 80090ec:	f013 fdee 	bl	801cccc <_tx_mutex_put>
            return(NX_NOT_BOUND);
 80090f0:	2024      	movs	r0, #36	; 0x24
 80090f2:	e7a6      	b.n	8009042 <_nx_udp_socket_unbind+0xee>
 80090f4:	20007a7c 	.word	0x20007a7c

080090f8 <_nx_dhcp_send_request_internal>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_send_request_internal(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UINT dhcp_message_type)
{
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	b097      	sub	sp, #92	; 0x5c
 80090fe:	460d      	mov	r5, r1
 8009100:	4607      	mov	r7, r0
 8009102:	4690      	mov	r8, r2

    /* Set the interface idnex.  */
    iface_index = interface_record -> nx_dhcp_interface_index;

    /* Allocate a DHCP packet.  */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8009104:	2300      	movs	r3, #0
 8009106:	f8d0 0bd8 	ldr.w	r0, [r0, #3032]	; 0xbd8
 800910a:	222c      	movs	r2, #44	; 0x2c
 800910c:	a909      	add	r1, sp, #36	; 0x24
    iface_index = interface_record -> nx_dhcp_interface_index;
 800910e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8009112:	f7fd fabb 	bl	800668c <_nx_packet_allocate>

    /* Was the packet allocation successful?  */
    if (status != NX_SUCCESS)
 8009116:	4606      	mov	r6, r0
 8009118:	b140      	cbz	r0, 800912c <_nx_dhcp_send_request_internal+0x34>
    {

        /* Increment the DHCP internal error counter.  */
        interface_record -> nx_dhcp_internal_errors++;
 800911a:	f8d5 3184 	ldr.w	r3, [r5, #388]	; 0x184
 800911e:	3301      	adds	r3, #1
 8009120:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
        nx_packet_release(packet_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8009124:	4630      	mov	r0, r6
 8009126:	b017      	add	sp, #92	; 0x5c
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 800912c:	ea4f 038a 	mov.w	r3, sl, lsl #2
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 8009130:	9909      	ldr	r1, [sp, #36]	; 0x24
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8009132:	f44f 7296 	mov.w	r2, #300	; 0x12c
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8009136:	4618      	mov	r0, r3
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	4450      	add	r0, sl
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 800913e:	688c      	ldr	r4, [r1, #8]
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8009140:	4631      	mov	r1, r6
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8009142:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8009146:	4620      	mov	r0, r4
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8009148:	f8d3 bc54 	ldr.w	fp, [r3, #3156]	; 0xc54
    dhcp_client_mac_lsw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 800914c:	f8d3 9c58 	ldr.w	r9, [r3, #3160]	; 0xc58
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8009150:	f015 fa23 	bl	801e59a <memset>
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 8009154:	4ac3      	ldr	r2, [pc, #780]	; (8009464 <_nx_dhcp_send_request_internal+0x36c>)

    /* Store the value.  */
    while (size-- > 0)
    {

        *data = (UCHAR) ((value >> 24) & 0xff);
 8009156:	4633      	mov	r3, r6
    buffer[NX_BOOTP_OFFSET_SERVER_NM] = 0;  
 8009158:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 800915c:	f1b8 0f04 	cmp.w	r8, #4
    buffer[NX_BOOTP_OFFSET_BOOT_FILE] = 0;  
 8009160:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 8009164:	6022      	str	r2, [r4, #0]
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_XID, 4, interface_record -> nx_dhcp_xid);
 8009166:	686a      	ldr	r2, [r5, #4]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009168:	ea4f 6112 	mov.w	r1, r2, lsr #24
 800916c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009170:	f361 0307 	bfi	r3, r1, #0, #8
 8009174:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009178:	f360 230f 	bfi	r3, r0, #8, #8
 800917c:	f361 4317 	bfi	r3, r1, #16, #8
 8009180:	f362 631f 	bfi	r3, r2, #24, #8
 8009184:	6063      	str	r3, [r4, #4]
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 8009186:	d042      	beq.n	800920e <_nx_dhcp_send_request_internal+0x116>
 8009188:	f1b8 0f07 	cmp.w	r8, #7
 800918c:	d03f      	beq.n	800920e <_nx_dhcp_send_request_internal+0x116>
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, interface_record -> nx_dhcp_seconds);
 800918e:	68ab      	ldr	r3, [r5, #8]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009190:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009194:	7263      	strb	r3, [r4, #9]
 8009196:	7222      	strb	r2, [r4, #8]
    else if (interface_record -> nx_dhcp_clear_broadcast == NX_TRUE)
 8009198:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800919a:	2b01      	cmp	r3, #1
 800919c:	f000 83b6 	beq.w	800990c <_nx_dhcp_send_request_internal+0x814>
        *data = (UCHAR) ((value >> 24) & 0xff);
 80091a0:	2380      	movs	r3, #128	; 0x80
 80091a2:	72a3      	strb	r3, [r4, #10]
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 80091a4:	f1b8 0f08 	cmp.w	r8, #8
 80091a8:	d038      	beq.n	800921c <_nx_dhcp_send_request_internal+0x124>
        *data = (UCHAR) ((value >> 24) & 0xff);
 80091aa:	2300      	movs	r3, #0
 80091ac:	60e3      	str	r3, [r4, #12]
 80091ae:	2300      	movs	r3, #0
 80091b0:	f3c9 4107 	ubfx	r1, r9, #16, #8
 80091b4:	f3cb 2207 	ubfx	r2, fp, #8, #8
 80091b8:	ea4f 6c19 	mov.w	ip, r9, lsr #24
 80091bc:	f884 9021 	strb.w	r9, [r4, #33]	; 0x21
    *(bootp_message + (*index)) = (UCHAR)option;
 80091c0:	2035      	movs	r0, #53	; 0x35
        *data = (UCHAR) ((value >> 24) & 0xff);
 80091c2:	7722      	strb	r2, [r4, #28]
 80091c4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80091c8:	6123      	str	r3, [r4, #16]
    *(bootp_message + (*index)) = (UCHAR)size; 
 80091ca:	2201      	movs	r2, #1
        *data = (UCHAR) ((value >> 24) & 0xff);
 80091cc:	6163      	str	r3, [r4, #20]
 80091ce:	61a3      	str	r3, [r4, #24]
    switch (dhcp_message_type)
 80091d0:	f108 33ff 	add.w	r3, r8, #4294967295
        *data = (UCHAR) ((value >> 24) & 0xff);
 80091d4:	77e1      	strb	r1, [r4, #31]
 80091d6:	49a4      	ldr	r1, [pc, #656]	; (8009468 <_nx_dhcp_send_request_internal+0x370>)
 80091d8:	f884 b01d 	strb.w	fp, [r4, #29]
 80091dc:	f884 80f2 	strb.w	r8, [r4, #242]	; 0xf2
 80091e0:	f884 c01e 	strb.w	ip, [r4, #30]
 80091e4:	f884 9020 	strb.w	r9, [r4, #32]
    *(bootp_message + (*index)) = (UCHAR)option;
 80091e8:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
        *data = (UCHAR) ((value >> 24) & 0xff);
 80091ec:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
    *(bootp_message + (*index)) = (UCHAR)size; 
 80091f0:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
    switch (dhcp_message_type)
 80091f4:	2b07      	cmp	r3, #7
 80091f6:	f200 838b 	bhi.w	8009910 <_nx_dhcp_send_request_internal+0x818>
 80091fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80091fe:	01f4      	.short	0x01f4
 8009200:	015f0389 	.word	0x015f0389
 8009204:	03890137 	.word	0x03890137
 8009208:	00200389 	.word	0x00200389
 800920c:	009c      	.short	0x009c
        *data = (UCHAR) ((value >> 24) & 0xff);
 800920e:	2300      	movs	r3, #0
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 8009210:	f1b8 0f08 	cmp.w	r8, #8
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009214:	7223      	strb	r3, [r4, #8]
 8009216:	7263      	strb	r3, [r4, #9]
 8009218:	72a3      	strb	r3, [r4, #10]
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 800921a:	d1c6      	bne.n	80091aa <_nx_dhcp_send_request_internal+0xb2>
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 800921c:	68ea      	ldr	r2, [r5, #12]
        *data = (UCHAR) ((value >> 24) & 0xff);
 800921e:	2300      	movs	r3, #0
 8009220:	0e11      	lsrs	r1, r2, #24
 8009222:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009226:	f361 0307 	bfi	r3, r1, #0, #8
 800922a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800922e:	f360 230f 	bfi	r3, r0, #8, #8
 8009232:	f361 4317 	bfi	r3, r1, #16, #8
 8009236:	f362 631f 	bfi	r3, r2, #24, #8
 800923a:	60e3      	str	r3, [r4, #12]
 800923c:	e7b7      	b.n	80091ae <_nx_dhcp_send_request_internal+0xb6>
            _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 800923e:	68ea      	ldr	r2, [r5, #12]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009240:	2300      	movs	r3, #0
    *(bootp_message + (*index)) = (UCHAR)option;
 8009242:	2136      	movs	r1, #54	; 0x36
    (*index) += size;    
 8009244:	f04f 09f9 	mov.w	r9, #249	; 0xf9
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009248:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800924c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009250:	f36c 0307 	bfi	r3, ip, #0, #8
 8009254:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8009258:	f360 230f 	bfi	r3, r0, #8, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 800925c:	2004      	movs	r0, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 800925e:	f36c 4317 	bfi	r3, ip, #16, #8
 8009262:	f362 631f 	bfi	r3, r2, #24, #8
 8009266:	60e3      	str	r3, [r4, #12]
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8009268:	696b      	ldr	r3, [r5, #20]
    *(bootp_message + (*index)) = (UCHAR)option;
 800926a:	f884 10f3 	strb.w	r1, [r4, #243]	; 0xf3
        *data = (UCHAR) ((value >> 24) & 0xff);
 800926e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8009272:	0e19      	lsrs	r1, r3, #24
 8009274:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009278:	f3c3 2307 	ubfx	r3, r3, #8, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 800927c:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009280:	f884 10f5 	strb.w	r1, [r4, #245]	; 0xf5
 8009284:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
 8009288:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
            interface_record -> nx_dhcp_releases_sent++;
 800928c:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
 8009290:	3301      	adds	r3, #1
 8009292:	f8c5 319c 	str.w	r3, [r5, #412]	; 0x19c
    if (dhcp_ptr -> nx_dhcp_user_option_add)
 8009296:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 800929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929c:	eb04 0c09 	add.w	ip, r4, r9
 80092a0:	f8d2 b000 	ldr.w	fp, [r2]
 80092a4:	f1bb 0f00 	cmp.w	fp, #0
 80092a8:	d017      	beq.n	80092da <_nx_dhcp_send_request_internal+0x1e2>
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 80092aa:	6959      	ldr	r1, [r3, #20]
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 80092ac:	4663      	mov	r3, ip
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 80092ae:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 80092b2:	4642      	mov	r2, r8
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 80092b4:	eba1 0c0c 	sub.w	ip, r1, ip
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 80092b8:	4638      	mov	r0, r7
 80092ba:	4651      	mov	r1, sl
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 80092bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80092c0:	f84e cd30 	str.w	ip, [lr, #-48]!
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 80092c4:	f8cd e000 	str.w	lr, [sp]
 80092c8:	47d8      	blx	fp
 80092ca:	2801      	cmp	r0, #1
 80092cc:	f040 8319 	bne.w	8009902 <_nx_dhcp_send_request_internal+0x80a>
 80092d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
            index += user_option_length;
 80092d4:	4491      	add	r9, r2
 80092d6:	eb04 0c09 	add.w	ip, r4, r9
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 80092da:	f44f 7496 	mov.w	r4, #300	; 0x12c
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 80092de:	689a      	ldr	r2, [r3, #8]
    index ++;
 80092e0:	f109 0101 	add.w	r1, r9, #1
    *(buffer + index) = NX_DHCP_OPTION_END;
 80092e4:	20ff      	movs	r0, #255	; 0xff
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 80092e6:	4422      	add	r2, r4
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 80092e8:	625c      	str	r4, [r3, #36]	; 0x24
    if (index > NX_BOOTP_OFFSET_END)
 80092ea:	42a1      	cmp	r1, r4
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 80092ec:	60da      	str	r2, [r3, #12]
    *(buffer + index) = NX_DHCP_OPTION_END;
 80092ee:	f88c 0000 	strb.w	r0, [ip]
        packet_ptr -> nx_packet_length = index;
 80092f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    if (index > NX_BOOTP_OFFSET_END)
 80092f4:	d903      	bls.n	80092fe <_nx_dhcp_send_request_internal+0x206>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 80092f6:	68a3      	ldr	r3, [r4, #8]
        packet_ptr -> nx_packet_length = index;
 80092f8:	6261      	str	r1, [r4, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 80092fa:	4419      	add	r1, r3
 80092fc:	60e1      	str	r1, [r4, #12]
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 80092fe:	f1b8 0f03 	cmp.w	r8, #3
 8009302:	f000 8232 	beq.w	800976a <_nx_dhcp_send_request_internal+0x672>
 8009306:	f1b8 0f07 	cmp.w	r8, #7
 800930a:	f000 822c 	beq.w	8009766 <_nx_dhcp_send_request_internal+0x66e>
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDISCOVER) ||
 800930e:	f1b8 0f01 	cmp.w	r8, #1
 8009312:	f000 8232 	beq.w	800977a <_nx_dhcp_send_request_internal+0x682>
        targetIP = NX_BOOTP_BC_ADDRESS;
 8009316:	f04f 32ff 	mov.w	r2, #4294967295
        status = nx_udp_socket_interface_send(&(dhcp_ptr -> nx_dhcp_socket), packet_ptr, targetIP, NX_DHCP_SERVER_UDP_PORT, iface_index);
 800931a:	f8cd a000 	str.w	sl, [sp]
 800931e:	4621      	mov	r1, r4
 8009320:	f607 30dc 	addw	r0, r7, #3036	; 0xbdc
 8009324:	2343      	movs	r3, #67	; 0x43
 8009326:	f00b fa5d 	bl	80147e4 <_nx_udp_socket_source_send>
    if (status != NX_SUCCESS)
 800932a:	4606      	mov	r6, r0
 800932c:	2800      	cmp	r0, #0
 800932e:	f43f aef9 	beq.w	8009124 <_nx_dhcp_send_request_internal+0x2c>
 8009332:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009334:	e2e1      	b.n	80098fa <_nx_dhcp_send_request_internal+0x802>
            if (dhcp_ptr -> nx_dhcp_name)
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	2800      	cmp	r0, #0
 800933a:	f000 8325 	beq.w	8009988 <_nx_dhcp_send_request_internal+0x890>
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 800933e:	22ff      	movs	r2, #255	; 0xff
 8009340:	a90b      	add	r1, sp, #44	; 0x2c
 8009342:	f00b fa5d 	bl	8014800 <_nx_utility_string_length_check>
 8009346:	2800      	cmp	r0, #0
 8009348:	f040 83cc 	bne.w	8009ae4 <_nx_dhcp_send_request_internal+0x9ec>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 800934c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    *(bootp_message + (*index)) = (UCHAR)option;
 800934e:	220c      	movs	r2, #12
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8009350:	687b      	ldr	r3, [r7, #4]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 8009352:	f104 0ef5 	add.w	lr, r4, #245	; 0xf5
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009356:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
/**************************************************************************/
static VOID  _nx_dhcp_move_string(UCHAR *dest, UCHAR *source, UINT size)
{

    /* Loop to copy all bytes.  */
    while (size-- > 0)
 800935a:	f101 39ff 	add.w	r9, r1, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 800935e:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
    while (size-- > 0)
 8009362:	2900      	cmp	r1, #0
 8009364:	d075      	beq.n	8009452 <_nx_dhcp_send_request_internal+0x35a>
 8009366:	1d1a      	adds	r2, r3, #4
 8009368:	f104 00f9 	add.w	r0, r4, #249	; 0xf9
 800936c:	4283      	cmp	r3, r0
 800936e:	bf38      	it	cc
 8009370:	4596      	cmpcc	lr, r2
 8009372:	f0c0 8422 	bcc.w	8009bba <_nx_dhcp_send_request_internal+0xac2>
 8009376:	290b      	cmp	r1, #11
 8009378:	f240 841f 	bls.w	8009bba <_nx_dhcp_send_request_internal+0xac2>
 800937c:	425a      	negs	r2, r3
 800937e:	f002 0203 	and.w	r2, r2, #3
 8009382:	1cd0      	adds	r0, r2, #3
 8009384:	4548      	cmp	r0, r9
 8009386:	d843      	bhi.n	8009410 <_nx_dhcp_send_request_internal+0x318>
 8009388:	2a00      	cmp	r2, #0
 800938a:	f000 8430 	beq.w	8009bee <_nx_dhcp_send_request_internal+0xaf6>
    {
        
        /* Copy a byte.  */
        *dest++ = *source++;
 800938e:	f893 c000 	ldrb.w	ip, [r3]
 8009392:	1c58      	adds	r0, r3, #1
 8009394:	2a01      	cmp	r2, #1
 8009396:	f104 0ef6 	add.w	lr, r4, #246	; 0xf6
 800939a:	9005      	str	r0, [sp, #20]
    while (size-- > 0)
 800939c:	f1a1 0902 	sub.w	r9, r1, #2
        *dest++ = *source++;
 80093a0:	f884 c0f5 	strb.w	ip, [r4, #245]	; 0xf5
 80093a4:	d015      	beq.n	80093d2 <_nx_dhcp_send_request_internal+0x2da>
 80093a6:	f893 c001 	ldrb.w	ip, [r3, #1]
 80093aa:	1c98      	adds	r0, r3, #2
 80093ac:	2a03      	cmp	r2, #3
 80093ae:	f104 0ef7 	add.w	lr, r4, #247	; 0xf7
 80093b2:	9005      	str	r0, [sp, #20]
    while (size-- > 0)
 80093b4:	f1a1 0903 	sub.w	r9, r1, #3
        *dest++ = *source++;
 80093b8:	f884 c0f6 	strb.w	ip, [r4, #246]	; 0xf6
 80093bc:	d109      	bne.n	80093d2 <_nx_dhcp_send_request_internal+0x2da>
 80093be:	f893 c002 	ldrb.w	ip, [r3, #2]
 80093c2:	1cd8      	adds	r0, r3, #3
 80093c4:	f104 0ef8 	add.w	lr, r4, #248	; 0xf8
    while (size-- > 0)
 80093c8:	f1a1 0904 	sub.w	r9, r1, #4
        *dest++ = *source++;
 80093cc:	9005      	str	r0, [sp, #20]
 80093ce:	f884 c0f7 	strb.w	ip, [r4, #247]	; 0xf7
 80093d2:	1a88      	subs	r0, r1, r2
 80093d4:	4413      	add	r3, r2
 80093d6:	468c      	mov	ip, r1
 80093d8:	9004      	str	r0, [sp, #16]
 80093da:	f102 00f5 	add.w	r0, r2, #245	; 0xf5
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80093de:	2200      	movs	r2, #0
 80093e0:	4420      	add	r0, r4
 80093e2:	9006      	str	r0, [sp, #24]
 80093e4:	9804      	ldr	r0, [sp, #16]
 80093e6:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 80093ea:	9806      	ldr	r0, [sp, #24]
 80093ec:	3201      	adds	r2, #1
        *dest++ = *source++;
 80093ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80093f2:	4593      	cmp	fp, r2
 80093f4:	f840 1b04 	str.w	r1, [r0], #4
 80093f8:	d8f8      	bhi.n	80093ec <_nx_dhcp_send_request_internal+0x2f4>
 80093fa:	9804      	ldr	r0, [sp, #16]
 80093fc:	4661      	mov	r1, ip
 80093fe:	9b05      	ldr	r3, [sp, #20]
 8009400:	f020 0203 	bic.w	r2, r0, #3
 8009404:	4282      	cmp	r2, r0
 8009406:	4413      	add	r3, r2
 8009408:	4496      	add	lr, r2
 800940a:	eba9 0902 	sub.w	r9, r9, r2
 800940e:	d020      	beq.n	8009452 <_nx_dhcp_send_request_internal+0x35a>
 8009410:	781a      	ldrb	r2, [r3, #0]
 8009412:	f88e 2000 	strb.w	r2, [lr]
    while (size-- > 0)
 8009416:	f1b9 0f00 	cmp.w	r9, #0
 800941a:	d01a      	beq.n	8009452 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 800941c:	785a      	ldrb	r2, [r3, #1]
    while (size-- > 0)
 800941e:	f1b9 0f01 	cmp.w	r9, #1
        *dest++ = *source++;
 8009422:	f88e 2001 	strb.w	r2, [lr, #1]
    while (size-- > 0)
 8009426:	d014      	beq.n	8009452 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 8009428:	789a      	ldrb	r2, [r3, #2]
    while (size-- > 0)
 800942a:	f1b9 0f02 	cmp.w	r9, #2
        *dest++ = *source++;
 800942e:	f88e 2002 	strb.w	r2, [lr, #2]
    while (size-- > 0)
 8009432:	d00e      	beq.n	8009452 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 8009434:	78da      	ldrb	r2, [r3, #3]
    while (size-- > 0)
 8009436:	f1b9 0f03 	cmp.w	r9, #3
        *dest++ = *source++;
 800943a:	f88e 2003 	strb.w	r2, [lr, #3]
    while (size-- > 0)
 800943e:	d008      	beq.n	8009452 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 8009440:	791a      	ldrb	r2, [r3, #4]
    while (size-- > 0)
 8009442:	f1b9 0f04 	cmp.w	r9, #4
        *dest++ = *source++;
 8009446:	f88e 2004 	strb.w	r2, [lr, #4]
    while (size-- > 0)
 800944a:	d002      	beq.n	8009452 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 800944c:	795b      	ldrb	r3, [r3, #5]
 800944e:	f88e 3005 	strb.w	r3, [lr, #5]
    (*index) += size;    
 8009452:	f101 0ef5 	add.w	lr, r1, #245	; 0xf5
 8009456:	f101 0cf6 	add.w	ip, r1, #246	; 0xf6
 800945a:	f101 00f7 	add.w	r0, r1, #247	; 0xf7
 800945e:	f101 09f8 	add.w	r9, r1, #248	; 0xf8
 8009462:	e298      	b.n	8009996 <_nx_dhcp_send_request_internal+0x89e>
 8009464:	00060101 	.word	0x00060101
 8009468:	63538263 	.word	0x63538263
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800946c:	68eb      	ldr	r3, [r5, #12]
 800946e:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
 8009472:	1e5a      	subs	r2, r3, #1
 8009474:	3203      	adds	r2, #3
 8009476:	f240 826a 	bls.w	800994e <_nx_dhcp_send_request_internal+0x856>
 800947a:	23f4      	movs	r3, #244	; 0xf4
 800947c:	f04f 09f9 	mov.w	r9, #249	; 0xf9
    (*index) += size;    
 8009480:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
 8009484:	9304      	str	r3, [sp, #16]
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8009486:	696a      	ldr	r2, [r5, #20]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009488:	2300      	movs	r3, #0
    *(bootp_message + (*index)) = (UCHAR)option;
 800948a:	f04f 0e36 	mov.w	lr, #54	; 0x36
        *data = (UCHAR) ((value >> 24) & 0xff);
 800948e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8009492:	f3c2 4007 	ubfx	r0, r2, #16, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 8009496:	f804 e00b 	strb.w	lr, [r4, fp]
        *data = (UCHAR) ((value >> 24) & 0xff);
 800949a:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 800949e:	f36c 0307 	bfi	r3, ip, #0, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 80094a2:	f04f 0c04 	mov.w	ip, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 80094a6:	f360 230f 	bfi	r3, r0, #8, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 80094aa:	9804      	ldr	r0, [sp, #16]
        *data = (UCHAR) ((value >> 24) & 0xff);
 80094ac:	f36e 4317 	bfi	r3, lr, #16, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 80094b0:	f804 c000 	strb.w	ip, [r4, r0]
        *data = (UCHAR) ((value >> 24) & 0xff);
 80094b4:	f362 631f 	bfi	r3, r2, #24, #8
 80094b8:	600b      	str	r3, [r1, #0]
 80094ba:	e6ec      	b.n	8009296 <_nx_dhcp_send_request_internal+0x19e>
            if (dhcp_ptr -> nx_dhcp_name)
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	2800      	cmp	r0, #0
 80094c0:	f000 827a 	beq.w	80099b8 <_nx_dhcp_send_request_internal+0x8c0>
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80094c4:	22ff      	movs	r2, #255	; 0xff
 80094c6:	a90b      	add	r1, sp, #44	; 0x2c
 80094c8:	f00b f99a 	bl	8014800 <_nx_utility_string_length_check>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	f040 8309 	bne.w	8009ae4 <_nx_dhcp_send_request_internal+0x9ec>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80094d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    *(bootp_message + (*index)) = (UCHAR)option;
 80094d4:	210c      	movs	r1, #12
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80094d6:	687b      	ldr	r3, [r7, #4]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 80094d8:	f104 0ef5 	add.w	lr, r4, #245	; 0xf5
    *(bootp_message + (*index)) = (UCHAR)size; 
 80094dc:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
    while (size-- > 0)
 80094e0:	f102 39ff 	add.w	r9, r2, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 80094e4:	f884 10f3 	strb.w	r1, [r4, #243]	; 0xf3
    while (size-- > 0)
 80094e8:	2a00      	cmp	r2, #0
 80094ea:	d075      	beq.n	80095d8 <_nx_dhcp_send_request_internal+0x4e0>
 80094ec:	f104 01f9 	add.w	r1, r4, #249	; 0xf9
 80094f0:	1d18      	adds	r0, r3, #4
 80094f2:	4586      	cmp	lr, r0
 80094f4:	bf38      	it	cc
 80094f6:	428b      	cmpcc	r3, r1
 80094f8:	f0c0 836c 	bcc.w	8009bd4 <_nx_dhcp_send_request_internal+0xadc>
 80094fc:	2a0b      	cmp	r2, #11
 80094fe:	f240 8369 	bls.w	8009bd4 <_nx_dhcp_send_request_internal+0xadc>
 8009502:	4259      	negs	r1, r3
 8009504:	f001 0103 	and.w	r1, r1, #3
 8009508:	1cc8      	adds	r0, r1, #3
 800950a:	4581      	cmp	r9, r0
 800950c:	d343      	bcc.n	8009596 <_nx_dhcp_send_request_internal+0x49e>
 800950e:	2900      	cmp	r1, #0
 8009510:	f000 8370 	beq.w	8009bf4 <_nx_dhcp_send_request_internal+0xafc>
        *dest++ = *source++;
 8009514:	f893 c000 	ldrb.w	ip, [r3]
 8009518:	1c58      	adds	r0, r3, #1
 800951a:	2901      	cmp	r1, #1
 800951c:	f104 0ef6 	add.w	lr, r4, #246	; 0xf6
 8009520:	9005      	str	r0, [sp, #20]
    while (size-- > 0)
 8009522:	f1a2 0902 	sub.w	r9, r2, #2
        *dest++ = *source++;
 8009526:	f884 c0f5 	strb.w	ip, [r4, #245]	; 0xf5
 800952a:	d015      	beq.n	8009558 <_nx_dhcp_send_request_internal+0x460>
 800952c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8009530:	1c98      	adds	r0, r3, #2
 8009532:	2903      	cmp	r1, #3
 8009534:	f104 0ef7 	add.w	lr, r4, #247	; 0xf7
 8009538:	9005      	str	r0, [sp, #20]
    while (size-- > 0)
 800953a:	f1a2 0903 	sub.w	r9, r2, #3
        *dest++ = *source++;
 800953e:	f884 c0f6 	strb.w	ip, [r4, #246]	; 0xf6
 8009542:	d109      	bne.n	8009558 <_nx_dhcp_send_request_internal+0x460>
 8009544:	f893 c002 	ldrb.w	ip, [r3, #2]
 8009548:	1cd8      	adds	r0, r3, #3
 800954a:	f104 0ef8 	add.w	lr, r4, #248	; 0xf8
    while (size-- > 0)
 800954e:	f1a2 0904 	sub.w	r9, r2, #4
        *dest++ = *source++;
 8009552:	9005      	str	r0, [sp, #20]
 8009554:	f884 c0f7 	strb.w	ip, [r4, #247]	; 0xf7
 8009558:	1a50      	subs	r0, r2, r1
 800955a:	440b      	add	r3, r1
 800955c:	4694      	mov	ip, r2
 800955e:	9004      	str	r0, [sp, #16]
 8009560:	f101 00f5 	add.w	r0, r1, #245	; 0xf5
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8009564:	2100      	movs	r1, #0
 8009566:	4420      	add	r0, r4
 8009568:	9006      	str	r0, [sp, #24]
 800956a:	9804      	ldr	r0, [sp, #16]
 800956c:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 8009570:	9806      	ldr	r0, [sp, #24]
 8009572:	3101      	adds	r1, #1
        *dest++ = *source++;
 8009574:	f853 2b04 	ldr.w	r2, [r3], #4
 8009578:	458b      	cmp	fp, r1
 800957a:	f840 2b04 	str.w	r2, [r0], #4
 800957e:	d8f8      	bhi.n	8009572 <_nx_dhcp_send_request_internal+0x47a>
 8009580:	9804      	ldr	r0, [sp, #16]
 8009582:	4662      	mov	r2, ip
 8009584:	9b05      	ldr	r3, [sp, #20]
 8009586:	f020 0103 	bic.w	r1, r0, #3
 800958a:	4288      	cmp	r0, r1
 800958c:	440b      	add	r3, r1
 800958e:	448e      	add	lr, r1
 8009590:	eba9 0901 	sub.w	r9, r9, r1
 8009594:	d020      	beq.n	80095d8 <_nx_dhcp_send_request_internal+0x4e0>
 8009596:	7819      	ldrb	r1, [r3, #0]
 8009598:	f88e 1000 	strb.w	r1, [lr]
    while (size-- > 0)
 800959c:	f1b9 0f00 	cmp.w	r9, #0
 80095a0:	d01a      	beq.n	80095d8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 80095a2:	7859      	ldrb	r1, [r3, #1]
    while (size-- > 0)
 80095a4:	f1b9 0f01 	cmp.w	r9, #1
        *dest++ = *source++;
 80095a8:	f88e 1001 	strb.w	r1, [lr, #1]
    while (size-- > 0)
 80095ac:	d014      	beq.n	80095d8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 80095ae:	7899      	ldrb	r1, [r3, #2]
    while (size-- > 0)
 80095b0:	f1b9 0f02 	cmp.w	r9, #2
        *dest++ = *source++;
 80095b4:	f88e 1002 	strb.w	r1, [lr, #2]
    while (size-- > 0)
 80095b8:	d00e      	beq.n	80095d8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 80095ba:	78d9      	ldrb	r1, [r3, #3]
    while (size-- > 0)
 80095bc:	f1b9 0f03 	cmp.w	r9, #3
        *dest++ = *source++;
 80095c0:	f88e 1003 	strb.w	r1, [lr, #3]
    while (size-- > 0)
 80095c4:	d008      	beq.n	80095d8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 80095c6:	7919      	ldrb	r1, [r3, #4]
    while (size-- > 0)
 80095c8:	f1b9 0f04 	cmp.w	r9, #4
        *dest++ = *source++;
 80095cc:	f88e 1004 	strb.w	r1, [lr, #4]
    while (size-- > 0)
 80095d0:	d002      	beq.n	80095d8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 80095d2:	795b      	ldrb	r3, [r3, #5]
 80095d4:	f88e 3005 	strb.w	r3, [lr, #5]
    (*index) += size;    
 80095d8:	f102 00f5 	add.w	r0, r2, #245	; 0xf5
 80095dc:	f102 01f6 	add.w	r1, r2, #246	; 0xf6
 80095e0:	f102 03f7 	add.w	r3, r2, #247	; 0xf7
 80095e4:	e1eb      	b.n	80099be <_nx_dhcp_send_request_internal+0x8c6>
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80095e6:	68eb      	ldr	r3, [r5, #12]
 80095e8:	f104 02f5 	add.w	r2, r4, #245	; 0xf5
 80095ec:	1e59      	subs	r1, r3, #1
 80095ee:	3103      	adds	r1, #3
 80095f0:	f240 8191 	bls.w	8009916 <_nx_dhcp_send_request_internal+0x81e>
 80095f4:	f04f 09f9 	mov.w	r9, #249	; 0xf9
 80095f8:	20f4      	movs	r0, #244	; 0xf4
    (*index) += size;    
 80095fa:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
    *(bootp_message + (*index)) = (UCHAR)option;
 80095fe:	f04f 0c33 	mov.w	ip, #51	; 0x33
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009602:	2104      	movs	r1, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009604:	f04f 33ff 	mov.w	r3, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 8009608:	f804 c00b 	strb.w	ip, [r4, fp]
    *(bootp_message + (*index)) = (UCHAR)size; 
 800960c:	5421      	strb	r1, [r4, r0]
        *data = (UCHAR) ((value >> 24) & 0xff);
 800960e:	6013      	str	r3, [r2, #0]
            if (dhcp_ptr -> nx_dhcp_name)
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	2800      	cmp	r0, #0
 8009614:	f000 808e 	beq.w	8009734 <_nx_dhcp_send_request_internal+0x63c>
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8009618:	22ff      	movs	r2, #255	; 0xff
 800961a:	a90b      	add	r1, sp, #44	; 0x2c
 800961c:	f00b f8f0 	bl	8014800 <_nx_utility_string_length_check>
 8009620:	2800      	cmp	r0, #0
 8009622:	f040 825f 	bne.w	8009ae4 <_nx_dhcp_send_request_internal+0x9ec>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8009626:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    *(bootp_message + (*index)) = (UCHAR)option;
 800962a:	210c      	movs	r1, #12
    (*index) ++;
 800962c:	f10b 0008 	add.w	r0, fp, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009630:	eb04 020b 	add.w	r2, r4, fp
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8009634:	687b      	ldr	r3, [r7, #4]
    while (size-- > 0)
 8009636:	f10c 3eff 	add.w	lr, ip, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 800963a:	f804 1009 	strb.w	r1, [r4, r9]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 800963e:	1821      	adds	r1, r4, r0
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009640:	f882 c007 	strb.w	ip, [r2, #7]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 8009644:	9004      	str	r0, [sp, #16]
    while (size-- > 0)
 8009646:	f1bc 0f00 	cmp.w	ip, #0
 800964a:	d070      	beq.n	800972e <_nx_dhcp_send_request_internal+0x636>
 800964c:	f10b 020c 	add.w	r2, fp, #12
 8009650:	1d18      	adds	r0, r3, #4
 8009652:	4422      	add	r2, r4
 8009654:	4281      	cmp	r1, r0
 8009656:	bf38      	it	cc
 8009658:	4293      	cmpcc	r3, r2
 800965a:	f0c0 82a4 	bcc.w	8009ba6 <_nx_dhcp_send_request_internal+0xaae>
 800965e:	f1bc 0f0b 	cmp.w	ip, #11
 8009662:	f240 82a0 	bls.w	8009ba6 <_nx_dhcp_send_request_internal+0xaae>
 8009666:	425a      	negs	r2, r3
 8009668:	f002 0903 	and.w	r9, r2, #3
 800966c:	f109 0003 	add.w	r0, r9, #3
 8009670:	4570      	cmp	r0, lr
 8009672:	d841      	bhi.n	80096f8 <_nx_dhcp_send_request_internal+0x600>
 8009674:	f1b9 0f00 	cmp.w	r9, #0
 8009678:	f000 82be 	beq.w	8009bf8 <_nx_dhcp_send_request_internal+0xb00>
        *dest++ = *source++;
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	7818      	ldrb	r0, [r3, #0]
 8009680:	f1b9 0f01 	cmp.w	r9, #1
    while (size-- > 0)
 8009684:	f1ac 0e02 	sub.w	lr, ip, #2
        *dest++ = *source++;
 8009688:	9206      	str	r2, [sp, #24]
 800968a:	f101 0201 	add.w	r2, r1, #1
 800968e:	9205      	str	r2, [sp, #20]
 8009690:	9a04      	ldr	r2, [sp, #16]
 8009692:	54a0      	strb	r0, [r4, r2]
 8009694:	d013      	beq.n	80096be <_nx_dhcp_send_request_internal+0x5c6>
 8009696:	1c9a      	adds	r2, r3, #2
 8009698:	7858      	ldrb	r0, [r3, #1]
 800969a:	f1b9 0f03 	cmp.w	r9, #3
    while (size-- > 0)
 800969e:	f1ac 0e03 	sub.w	lr, ip, #3
        *dest++ = *source++;
 80096a2:	9206      	str	r2, [sp, #24]
 80096a4:	f101 0202 	add.w	r2, r1, #2
 80096a8:	7048      	strb	r0, [r1, #1]
 80096aa:	9205      	str	r2, [sp, #20]
 80096ac:	d107      	bne.n	80096be <_nx_dhcp_send_request_internal+0x5c6>
 80096ae:	1cca      	adds	r2, r1, #3
 80096b0:	7898      	ldrb	r0, [r3, #2]
    while (size-- > 0)
 80096b2:	f1ac 0e04 	sub.w	lr, ip, #4
        *dest++ = *source++;
 80096b6:	9205      	str	r2, [sp, #20]
 80096b8:	1cda      	adds	r2, r3, #3
 80096ba:	7088      	strb	r0, [r1, #2]
 80096bc:	9206      	str	r2, [sp, #24]
 80096be:	f109 0108 	add.w	r1, r9, #8
 80096c2:	ebac 0009 	sub.w	r0, ip, r9
 80096c6:	444b      	add	r3, r9
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80096c8:	2200      	movs	r2, #0
 80096ca:	4459      	add	r1, fp
 80096cc:	ea4f 0990 	mov.w	r9, r0, lsr #2
 80096d0:	9007      	str	r0, [sp, #28]
 80096d2:	4421      	add	r1, r4
 80096d4:	3201      	adds	r2, #1
        *dest++ = *source++;
 80096d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80096da:	4591      	cmp	r9, r2
 80096dc:	f841 0b04 	str.w	r0, [r1], #4
 80096e0:	d8f8      	bhi.n	80096d4 <_nx_dhcp_send_request_internal+0x5dc>
 80096e2:	9807      	ldr	r0, [sp, #28]
 80096e4:	9b06      	ldr	r3, [sp, #24]
 80096e6:	f020 0203 	bic.w	r2, r0, #3
 80096ea:	9905      	ldr	r1, [sp, #20]
 80096ec:	4282      	cmp	r2, r0
 80096ee:	4413      	add	r3, r2
 80096f0:	4411      	add	r1, r2
 80096f2:	ebae 0e02 	sub.w	lr, lr, r2
 80096f6:	d01a      	beq.n	800972e <_nx_dhcp_send_request_internal+0x636>
 80096f8:	781a      	ldrb	r2, [r3, #0]
 80096fa:	700a      	strb	r2, [r1, #0]
    while (size-- > 0)
 80096fc:	f1be 0f00 	cmp.w	lr, #0
 8009700:	d015      	beq.n	800972e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 8009702:	785a      	ldrb	r2, [r3, #1]
    while (size-- > 0)
 8009704:	f1be 0f01 	cmp.w	lr, #1
        *dest++ = *source++;
 8009708:	704a      	strb	r2, [r1, #1]
    while (size-- > 0)
 800970a:	d010      	beq.n	800972e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 800970c:	789a      	ldrb	r2, [r3, #2]
    while (size-- > 0)
 800970e:	f1be 0f02 	cmp.w	lr, #2
        *dest++ = *source++;
 8009712:	708a      	strb	r2, [r1, #2]
    while (size-- > 0)
 8009714:	d00b      	beq.n	800972e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 8009716:	78da      	ldrb	r2, [r3, #3]
    while (size-- > 0)
 8009718:	f1be 0f03 	cmp.w	lr, #3
        *dest++ = *source++;
 800971c:	70ca      	strb	r2, [r1, #3]
    while (size-- > 0)
 800971e:	d006      	beq.n	800972e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 8009720:	791a      	ldrb	r2, [r3, #4]
    while (size-- > 0)
 8009722:	f1be 0f04 	cmp.w	lr, #4
        *dest++ = *source++;
 8009726:	710a      	strb	r2, [r1, #4]
    while (size-- > 0)
 8009728:	d001      	beq.n	800972e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 800972a:	795b      	ldrb	r3, [r3, #5]
 800972c:	714b      	strb	r3, [r1, #5]
    (*index) += size;    
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	4463      	add	r3, ip
 8009732:	4699      	mov	r9, r3
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009734:	eb04 0209 	add.w	r2, r4, r9
        *dest++ = *source++;
 8009738:	4b9e      	ldr	r3, [pc, #632]	; (80099b4 <_nx_dhcp_send_request_internal+0x8bc>)
    *(bootp_message + (*index)) = (UCHAR)option;
 800973a:	2137      	movs	r1, #55	; 0x37
    *(bootp_message + (*index)) = (UCHAR)size; 
 800973c:	2003      	movs	r0, #3
    *(bootp_message + (*index)) = (UCHAR)option;
 800973e:	f804 1009 	strb.w	r1, [r4, r9]
    (*index) ++;
 8009742:	f109 0102 	add.w	r1, r9, #2
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009746:	7050      	strb	r0, [r2, #1]
    (*index) += size;    
 8009748:	f109 0905 	add.w	r9, r9, #5
        *dest++ = *source++;
 800974c:	7818      	ldrb	r0, [r3, #0]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 800974e:	1862      	adds	r2, r4, r1
        *dest++ = *source++;
 8009750:	5460      	strb	r0, [r4, r1]
 8009752:	7859      	ldrb	r1, [r3, #1]
 8009754:	7051      	strb	r1, [r2, #1]
 8009756:	789b      	ldrb	r3, [r3, #2]
 8009758:	7093      	strb	r3, [r2, #2]
            interface_record -> nx_dhcp_discoveries_sent++;
 800975a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
 800975e:	3301      	adds	r3, #1
 8009760:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
            break;
 8009764:	e597      	b.n	8009296 <_nx_dhcp_send_request_internal+0x19e>
        targetIP = interface_record -> nx_dhcp_server_ip;
 8009766:	696a      	ldr	r2, [r5, #20]
 8009768:	e5d7      	b.n	800931a <_nx_dhcp_send_request_internal+0x222>
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 800976a:	786b      	ldrb	r3, [r5, #1]
 800976c:	2b06      	cmp	r3, #6
 800976e:	d0fa      	beq.n	8009766 <_nx_dhcp_send_request_internal+0x66e>
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 8009770:	2b04      	cmp	r3, #4
        targetIP = NX_BOOTP_BC_ADDRESS;
 8009772:	f04f 32ff 	mov.w	r2, #4294967295
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 8009776:	f63f add0 	bhi.w	800931a <_nx_dhcp_send_request_internal+0x222>
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 800977a:	9b03      	ldr	r3, [sp, #12]
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 800977c:	2200      	movs	r2, #0
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 800977e:	68bd      	ldr	r5, [r7, #8]
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 8009780:	f04f 31ff 	mov.w	r1, #4294967295
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 8009784:	4453      	add	r3, sl
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 8009786:	920c      	str	r2, [sp, #48]	; 0x30
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 8009788:	910d      	str	r1, [sp, #52]	; 0x34
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	f603 4248 	addw	r2, r3, #3144	; 0xc48
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8009790:	442b      	add	r3, r5
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 8009792:	442a      	add	r2, r5
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8009794:	f893 1c4c 	ldrb.w	r1, [r3, #3148]	; 0xc4c
    packet_ptr -> nx_packet_ip_interface = interface_ptr;
 8009798:	6362      	str	r2, [r4, #52]	; 0x34
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 800979a:	2900      	cmp	r1, #0
 800979c:	f000 80ac 	beq.w	80098f8 <_nx_dhcp_send_request_internal+0x800>
 80097a0:	f893 2c4e 	ldrb.w	r2, [r3, #3150]	; 0xc4e
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	f000 80a7 	beq.w	80098f8 <_nx_dhcp_send_request_internal+0x800>
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80097aa:	2104      	movs	r1, #4
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 80097ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 80097ae:	f8d4 8008 	ldr.w	r8, [r4, #8]
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80097b2:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 80097b6:	3208      	adds	r2, #8
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 80097b8:	f8d3 0c88 	ldr.w	r0, [r3, #3208]	; 0xc88
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 80097bc:	f1a8 0108 	sub.w	r1, r8, #8
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80097c0:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 80097c4:	ea4f 4e02 	mov.w	lr, r2, lsl #16
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 80097c8:	60a1      	str	r1, [r4, #8]
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80097ca:	041b      	lsls	r3, r3, #16
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 80097cc:	6262      	str	r2, [r4, #36]	; 0x24
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80097ce:	ea4e 413e 	orr.w	r1, lr, lr, ror #16
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80097d2:	f043 0c43 	orr.w	ip, r3, #67	; 0x43
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80097d6:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80097d8:	ea8c 433c 	eor.w	r3, ip, ip, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80097dc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80097e0:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80097e2:	ea81 213e 	eor.w	r1, r1, lr, ror #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80097e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80097ea:	ea83 233c 	eor.w	r3, r3, ip, ror #8
 80097ee:	e948 3102 	strd	r3, r1, [r8, #-8]
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 80097f2:	06c3      	lsls	r3, r0, #27
 80097f4:	f140 8194 	bpl.w	8009b20 <_nx_dhcp_send_request_internal+0xa28>
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 80097f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097fa:	f043 0310 	orr.w	r3, r3, #16
 80097fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009800:	f205 633c 	addw	r3, r5, #1596	; 0x63c
 8009804:	f04f 31ff 	mov.w	r1, #4294967295
 8009808:	4618      	mov	r0, r3
 800980a:	9303      	str	r3, [sp, #12]
 800980c:	f014 f972 	bl	801daf4 <_txe_mutex_get>
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 8009810:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8009812:	f8d7 1c10 	ldr.w	r1, [r7, #3088]	; 0xc10
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8009816:	f8d7 0c08 	ldr.w	r0, [r7, #3080]	; 0xc08
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 800981a:	f103 0e14 	add.w	lr, r3, #20
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 800981e:	f8d7 2c0c 	ldr.w	r2, [r7, #3084]	; 0xc0c
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8009822:	f8d5 3634 	ldr.w	r3, [r5, #1588]	; 0x634
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8009826:	f040 408a 	orr.w	r0, r0, #1157627904	; 0x45000000
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 800982a:	0612      	lsls	r2, r2, #24
    ip_header_ptr -> nx_ip_header_destination_ip =  ip_dest_addr;
 800982c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8009830:	ea41 4b03 	orr.w	fp, r1, r3, lsl #16
 8009834:	3301      	adds	r3, #1
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8009836:	fa1f fa8e 	uxth.w	sl, lr
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 800983a:	f442 1c88 	orr.w	ip, r2, #1114112	; 0x110000
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800983e:	ea8b 413b 	eor.w	r1, fp, fp, ror #16
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8009842:	9304      	str	r3, [sp, #16]
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8009844:	ea40 0a0a 	orr.w	sl, r0, sl
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8009848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800984a:	ea4c 423c 	orr.w	r2, ip, ip, ror #16
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 800984e:	f8d4 8008 	ldr.w	r8, [r4, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8009852:	ea8a 403a 	eor.w	r0, sl, sl, ror #16
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 8009856:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800985a:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800985c:	ea83 4333 	eor.w	r3, r3, r3, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8009860:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8009862:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8009866:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8009868:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800986a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800986e:	ea81 213b 	eor.w	r1, r1, fp, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8009872:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8009876:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800987a:	ea89 4339 	eor.w	r3, r9, r9, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800987e:	ea80 203a 	eor.w	r0, r0, sl, ror #8
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 8009882:	f1a8 0a14 	sub.w	sl, r8, #20
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8009886:	ea82 223c 	eor.w	r2, r2, ip, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800988a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 800988e:	9b04      	ldr	r3, [sp, #16]
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 8009890:	f8c4 a008 	str.w	sl, [r4, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8009894:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8009898:	f8c5 3634 	str.w	r3, [r5, #1588]	; 0x634
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800989c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800989e:	f848 0c14 	str.w	r0, [r8, #-20]
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 80098a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 80098a4:	ea8b 2333 	eor.w	r3, fp, r3, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 80098a8:	f848 1c10 	str.w	r1, [r8, #-16]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 80098ac:	ea8c 2139 	eor.w	r1, ip, r9, ror #8
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 80098b0:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 80098b4:	f848 1c04 	str.w	r1, [r8, #-4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 80098b8:	e948 2303 	strd	r2, r3, [r8, #-12]
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 80098bc:	f01c 0301 	ands.w	r3, ip, #1
 80098c0:	f000 8116 	beq.w	8009af0 <_nx_dhcp_send_request_internal+0x9f8>
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 80098c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	63e3      	str	r3, [r4, #60]	; 0x3c
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80098cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80098d0:	2104      	movs	r1, #4
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 80098d6:	9514      	str	r5, [sp, #80]	; 0x50
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80098d8:	9310      	str	r3, [sp, #64]	; 0x40
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 80098da:	6a43      	ldr	r3, [r0, #36]	; 0x24
    driver_request.nx_ip_driver_packet =                packet_ptr;
 80098dc:	9412      	str	r4, [sp, #72]	; 0x48
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 80098de:	4573      	cmp	r3, lr
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_ip_interface;
 80098e0:	9015      	str	r0, [sp, #84]	; 0x54
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80098e2:	910e      	str	r1, [sp, #56]	; 0x38
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80098e4:	9211      	str	r2, [sp, #68]	; 0x44
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 80098e6:	f0c0 814f 	bcc.w	8009b88 <_nx_dhcp_send_request_internal+0xa90>
    (packet_ptr -> nx_packet_ip_interface -> nx_interface_link_driver_entry) (&driver_request);
 80098ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80098ec:	a80e      	add	r0, sp, #56	; 0x38
 80098ee:	4798      	blx	r3
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80098f0:	9803      	ldr	r0, [sp, #12]
 80098f2:	f014 f933 	bl	801db5c <_txe_mutex_put>
 80098f6:	e415      	b.n	8009124 <_nx_dhcp_send_request_internal+0x2c>
        return(NX_INVALID_INTERFACE);
 80098f8:	264c      	movs	r6, #76	; 0x4c
        nx_packet_release(packet_ptr);
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7fd f878 	bl	80069f0 <_nx_packet_release>
 8009900:	e410      	b.n	8009124 <_nx_dhcp_send_request_internal+0x2c>
            nx_packet_release(packet_ptr);
 8009902:	9809      	ldr	r0, [sp, #36]	; 0x24
            return(NX_DHCP_UNKNOWN_OPTION);
 8009904:	269f      	movs	r6, #159	; 0x9f
            nx_packet_release(packet_ptr);
 8009906:	f7fd f873 	bl	80069f0 <_nx_packet_release>
            return(NX_DHCP_UNKNOWN_OPTION);
 800990a:	e40b      	b.n	8009124 <_nx_dhcp_send_request_internal+0x2c>
        *data = (UCHAR) ((value >> 24) & 0xff);
 800990c:	72a6      	strb	r6, [r4, #10]
 800990e:	e449      	b.n	80091a4 <_nx_dhcp_send_request_internal+0xac>
    (*index) += size;    
 8009910:	f04f 09f3 	mov.w	r9, #243	; 0xf3
 8009914:	e4bf      	b.n	8009296 <_nx_dhcp_send_request_internal+0x19e>
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009916:	0e18      	lsrs	r0, r3, #24
    *(bootp_message + (*index)) = (UCHAR)option;
 8009918:	2232      	movs	r2, #50	; 0x32
        *data = (UCHAR) ((value >> 24) & 0xff);
 800991a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 800991e:	f04f 0c04 	mov.w	ip, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009922:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8009926:	f3c3 2307 	ubfx	r3, r3, #8, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 800992a:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
        *data = (UCHAR) ((value >> 24) & 0xff);
 800992e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8009932:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
 8009936:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
    *(bootp_message + (*index)) = (UCHAR)size; 
 800993a:	f884 c0f4 	strb.w	ip, [r4, #244]	; 0xf4
        *data = (UCHAR) ((value >> 24) & 0xff);
 800993e:	20fa      	movs	r0, #250	; 0xfa
 8009940:	f884 10f6 	strb.w	r1, [r4, #246]	; 0xf6
    (*index) += size;    
 8009944:	f04f 0bf9 	mov.w	fp, #249	; 0xf9
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009948:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 800994c:	e657      	b.n	80095fe <_nx_dhcp_send_request_internal+0x506>
 800994e:	0e18      	lsrs	r0, r3, #24
    *(bootp_message + (*index)) = (UCHAR)option;
 8009950:	2132      	movs	r1, #50	; 0x32
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009952:	f3c3 4207 	ubfx	r2, r3, #16, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009956:	f04f 0c04 	mov.w	ip, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 800995a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 800995e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009962:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
 8009966:	20fa      	movs	r0, #250	; 0xfa
    *(bootp_message + (*index)) = (UCHAR)option;
 8009968:	f884 10f3 	strb.w	r1, [r4, #243]	; 0xf3
        *data = (UCHAR) ((value >> 24) & 0xff);
 800996c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8009970:	f104 01fb 	add.w	r1, r4, #251	; 0xfb
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009974:	f884 c0f4 	strb.w	ip, [r4, #244]	; 0xf4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009978:	9004      	str	r0, [sp, #16]
    (*index) += size;    
 800997a:	f04f 0bf9 	mov.w	fp, #249	; 0xf9
        *data = (UCHAR) ((value >> 24) & 0xff);
 800997e:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
 8009982:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8009986:	e57e      	b.n	8009486 <_nx_dhcp_send_request_internal+0x38e>
 8009988:	f04f 09f6 	mov.w	r9, #246	; 0xf6
 800998c:	20f5      	movs	r0, #245	; 0xf5
 800998e:	f04f 0cf4 	mov.w	ip, #244	; 0xf4
    (*index) += size;    
 8009992:	f04f 0ef3 	mov.w	lr, #243	; 0xf3
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009996:	2301      	movs	r3, #1
    *(bootp_message + (*index)) = (UCHAR)option;
 8009998:	2237      	movs	r2, #55	; 0x37
 800999a:	f804 200e 	strb.w	r2, [r4, lr]
    *(bootp_message + (*index)) = (UCHAR)size; 
 800999e:	f804 300c 	strb.w	r3, [r4, ip]
        *dest++ = *source++;
 80099a2:	78ab      	ldrb	r3, [r5, #2]
 80099a4:	5423      	strb	r3, [r4, r0]
            interface_record -> nx_dhcp_informs_sent++;
 80099a6:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
 80099aa:	3301      	adds	r3, #1
 80099ac:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
            break;
 80099b0:	e471      	b.n	8009296 <_nx_dhcp_send_request_internal+0x19e>
 80099b2:	bf00      	nop
 80099b4:	20000090 	.word	0x20000090
 80099b8:	23f5      	movs	r3, #245	; 0xf5
 80099ba:	21f4      	movs	r1, #244	; 0xf4
    (*index) += size;    
 80099bc:	20f3      	movs	r0, #243	; 0xf3
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80099be:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80099c2:	eb04 0b01 	add.w	fp, r4, r1
 80099c6:	4423      	add	r3, r4
 80099c8:	1822      	adds	r2, r4, r0
 80099ca:	f10e 31ff 	add.w	r1, lr, #4294967295
 80099ce:	3103      	adds	r1, #3
 80099d0:	d828      	bhi.n	8009a24 <_nx_dhcp_send_request_internal+0x92c>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 80099d2:	7869      	ldrb	r1, [r5, #1]
 80099d4:	3906      	subs	r1, #6
 80099d6:	2901      	cmp	r1, #1
 80099d8:	d924      	bls.n	8009a24 <_nx_dhcp_send_request_internal+0x92c>
        *data = (UCHAR) ((value >> 24) & 0xff);
 80099da:	ea4f 6c1e 	mov.w	ip, lr, lsr #24
 80099de:	2100      	movs	r1, #0
 80099e0:	f3ce 4907 	ubfx	r9, lr, #16, #8
 80099e4:	f36c 0107 	bfi	r1, ip, #0, #8
 80099e8:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 80099ec:	f369 210f 	bfi	r1, r9, #8, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 80099f0:	f04f 0932 	mov.w	r9, #50	; 0x32
        *data = (UCHAR) ((value >> 24) & 0xff);
 80099f4:	f36c 4117 	bfi	r1, ip, #16, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 80099f8:	f882 9000 	strb.w	r9, [r2]
    (*index) += size;    
 80099fc:	f100 0c06 	add.w	ip, r0, #6
 8009a00:	f100 0907 	add.w	r9, r0, #7
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009a04:	f36e 611f 	bfi	r1, lr, #24, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009a08:	f04f 0204 	mov.w	r2, #4
 8009a0c:	f100 0e08 	add.w	lr, r0, #8
    (*index) += size;    
 8009a10:	4660      	mov	r0, ip
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009a12:	f88b 2000 	strb.w	r2, [fp]
 8009a16:	eb04 020c 	add.w	r2, r4, ip
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009a1a:	6019      	str	r1, [r3, #0]
 8009a1c:	eb04 0b09 	add.w	fp, r4, r9
 8009a20:	eb04 030e 	add.w	r3, r4, lr
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 8009a24:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8009a26:	2900      	cmp	r1, #0
 8009a28:	d046      	beq.n	8009ab8 <_nx_dhcp_send_request_internal+0x9c0>
 8009a2a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d043      	beq.n	8009ab8 <_nx_dhcp_send_request_internal+0x9c0>
 8009a30:	4681      	mov	r9, r0
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 8009a32:	7869      	ldrb	r1, [r5, #1]
 8009a34:	3906      	subs	r1, #6
 8009a36:	2901      	cmp	r1, #1
 8009a38:	f240 8094 	bls.w	8009b64 <_nx_dhcp_send_request_internal+0xa6c>
                (interface_record -> nx_dhcp_server_ip != NX_BOOTP_BC_ADDRESS)
 8009a3c:	f8d5 c014 	ldr.w	ip, [r5, #20]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 8009a40:	f1bc 3fff 	cmp.w	ip, #4294967295
 8009a44:	d021      	beq.n	8009a8a <_nx_dhcp_send_request_internal+0x992>
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009a46:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8009a50:	f36e 0107 	bfi	r1, lr, #0, #8
 8009a54:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8009a58:	f360 210f 	bfi	r1, r0, #8, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 8009a5c:	2036      	movs	r0, #54	; 0x36
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009a5e:	f36e 4117 	bfi	r1, lr, #16, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 8009a62:	7010      	strb	r0, [r2, #0]
 8009a64:	f109 0e07 	add.w	lr, r9, #7
    (*index) += size;    
 8009a68:	f109 0006 	add.w	r0, r9, #6
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009a6c:	f36c 611f 	bfi	r1, ip, #24, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009a70:	f04f 0204 	mov.w	r2, #4
 8009a74:	f109 0c08 	add.w	ip, r9, #8
    (*index) += size;    
 8009a78:	4681      	mov	r9, r0
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009a7a:	f88b 2000 	strb.w	r2, [fp]
 8009a7e:	1822      	adds	r2, r4, r0
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009a80:	6019      	str	r1, [r3, #0]
 8009a82:	eb04 0b0e 	add.w	fp, r4, lr
 8009a86:	eb04 030c 	add.w	r3, r4, ip
        *dest++ = *source++;
 8009a8a:	495d      	ldr	r1, [pc, #372]	; (8009c00 <_nx_dhcp_send_request_internal+0xb08>)
    *(bootp_message + (*index)) = (UCHAR)option;
 8009a8c:	f04f 0c37 	mov.w	ip, #55	; 0x37
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009a90:	2003      	movs	r0, #3
    (*index) += size;    
 8009a92:	f109 0905 	add.w	r9, r9, #5
    *(bootp_message + (*index)) = (UCHAR)option;
 8009a96:	f882 c000 	strb.w	ip, [r2]
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009a9a:	f88b 0000 	strb.w	r0, [fp]
        *dest++ = *source++;
 8009a9e:	780a      	ldrb	r2, [r1, #0]
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	784a      	ldrb	r2, [r1, #1]
 8009aa4:	705a      	strb	r2, [r3, #1]
 8009aa6:	788a      	ldrb	r2, [r1, #2]
 8009aa8:	709a      	strb	r2, [r3, #2]
            interface_record -> nx_dhcp_requests_sent++;
 8009aaa:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
 8009aae:	3301      	adds	r3, #1
 8009ab0:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
            break;
 8009ab4:	f7ff bbef 	b.w	8009296 <_nx_dhcp_send_request_internal+0x19e>
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009ab8:	f04f 0c04 	mov.w	ip, #4
    *(bootp_message + (*index)) = (UCHAR)option;
 8009abc:	f04f 0e33 	mov.w	lr, #51	; 0x33
    (*index) += size;    
 8009ac0:	f100 0906 	add.w	r9, r0, #6
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009ac4:	f04f 31ff 	mov.w	r1, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 8009ac8:	f882 e000 	strb.w	lr, [r2]
    *(bootp_message + (*index)) = (UCHAR)size; 
 8009acc:	f88b c000 	strb.w	ip, [fp]
 8009ad0:	f100 0c07 	add.w	ip, r0, #7
 8009ad4:	3008      	adds	r0, #8
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009ad6:	6019      	str	r1, [r3, #0]
 8009ad8:	eb04 0209 	add.w	r2, r4, r9
 8009adc:	eb04 0b0c 	add.w	fp, r4, ip
 8009ae0:	1823      	adds	r3, r4, r0
 8009ae2:	e7a6      	b.n	8009a32 <_nx_dhcp_send_request_internal+0x93a>
                    nx_packet_release(packet_ptr);
 8009ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
                    return(NX_DHCP_INVALID_NAME);
 8009ae6:	26a8      	movs	r6, #168	; 0xa8
                    nx_packet_release(packet_ptr);
 8009ae8:	f7fc ff82 	bl	80069f0 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8009aec:	f7ff bb1a 	b.w	8009124 <_nx_dhcp_send_request_internal+0x2c>
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4, 20, NULL, NULL);
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	2214      	movs	r2, #20
 8009af4:	2104      	movs	r1, #4
 8009af6:	4620      	mov	r0, r4
 8009af8:	f7f8 f9f4 	bl	8001ee4 <_nx_ip_checksum_compute>
        val = val & NX_LOWER_16_MASK;
 8009afc:	43c1      	mvns	r1, r0
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8009afe:	f858 2c0c 	ldr.w	r2, [r8, #-12]
        val = val & NX_LOWER_16_MASK;
 8009b02:	b289      	uxth	r1, r1
 8009b04:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009b06:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
        NX_CHANGE_ULONG_ENDIAN(val);
 8009b0a:	ea41 4331 	orr.w	r3, r1, r1, ror #16
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009b14:	ea83 2331 	eor.w	r3, r3, r1, ror #8
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	f848 3c0c 	str.w	r3, [r8, #-12]
 8009b1e:	e6d5      	b.n	80098cc <_nx_dhcp_send_request_internal+0x7d4>
        checksum = _nx_ip_checksum_compute(packet_ptr,
 8009b20:	a80d      	add	r0, sp, #52	; 0x34
 8009b22:	ab0c      	add	r3, sp, #48	; 0x30
 8009b24:	2111      	movs	r1, #17
 8009b26:	9000      	str	r0, [sp, #0]
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7f8 f9db 	bl	8001ee4 <_nx_ip_checksum_compute>
        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009b2e:	f858 1c04 	ldr.w	r1, [r8, #-4]
 8009b32:	43c2      	mvns	r2, r0
        if (checksum == 0)
 8009b34:	f64f 70ff 	movw	r0, #65535	; 0xffff
        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009b38:	ea81 4331 	eor.w	r3, r1, r1, ror #16
 8009b3c:	b292      	uxth	r2, r2
 8009b3e:	0a1b      	lsrs	r3, r3, #8
        if (checksum == 0)
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	bf08      	it	eq
 8009b44:	4602      	moveq	r2, r0
        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009b46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009b4a:	ea83 2331 	eor.w	r3, r3, r1, ror #8
        udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8009b4e:	4313      	orrs	r3, r2
        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009b50:	ea83 4233 	eor.w	r2, r3, r3, ror #16
 8009b54:	0a12      	lsrs	r2, r2, #8
 8009b56:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8009b5a:	ea82 2333 	eor.w	r3, r2, r3, ror #8
 8009b5e:	f848 3c04 	str.w	r3, [r8, #-4]
 8009b62:	e64d      	b.n	8009800 <_nx_dhcp_send_request_internal+0x708>
                _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8009b64:	68e8      	ldr	r0, [r5, #12]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8009b66:	2100      	movs	r1, #0
 8009b68:	ea4f 6c10 	mov.w	ip, r0, lsr #24
 8009b6c:	f3c0 4e07 	ubfx	lr, r0, #16, #8
 8009b70:	f36c 0107 	bfi	r1, ip, #0, #8
 8009b74:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8009b78:	f36e 210f 	bfi	r1, lr, #8, #8
 8009b7c:	f36c 4117 	bfi	r1, ip, #16, #8
 8009b80:	f360 611f 	bfi	r1, r0, #24, #8
 8009b84:	60e1      	str	r1, [r4, #12]
 8009b86:	e780      	b.n	8009a8a <_nx_dhcp_send_request_internal+0x992>
        if ((ip_ptr -> nx_ip_fragment_processing) && (socket_ptr -> nx_udp_socket_fragment_enable != NX_DONT_FRAGMENT))
 8009b88:	f8d5 37b4 	ldr.w	r3, [r5, #1972]	; 0x7b4
 8009b8c:	b12b      	cbz	r3, 8009b9a <_nx_dhcp_send_request_internal+0xaa2>
 8009b8e:	f8d7 2c10 	ldr.w	r2, [r7, #3088]	; 0xc10
 8009b92:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009b96:	f47f aea9 	bne.w	80098ec <_nx_dhcp_send_request_internal+0x7f4>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009b9a:	9803      	ldr	r0, [sp, #12]
            return(NX_NOT_SUCCESSFUL);
 8009b9c:	2643      	movs	r6, #67	; 0x43
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009b9e:	f013 ffdd 	bl	801db5c <_txe_mutex_put>
 8009ba2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009ba4:	e6a9      	b.n	80098fa <_nx_dhcp_send_request_internal+0x802>
 8009ba6:	3901      	subs	r1, #1
 8009ba8:	eb03 000c 	add.w	r0, r3, ip
        *dest++ = *source++;
 8009bac:	f813 2b01 	ldrb.w	r2, [r3], #1
    while (size-- > 0)
 8009bb0:	4283      	cmp	r3, r0
        *dest++ = *source++;
 8009bb2:	f801 2f01 	strb.w	r2, [r1, #1]!
    while (size-- > 0)
 8009bb6:	d1f9      	bne.n	8009bac <_nx_dhcp_send_request_internal+0xab4>
 8009bb8:	e5b9      	b.n	800972e <_nx_dhcp_send_request_internal+0x636>
 8009bba:	f101 0cf4 	add.w	ip, r1, #244	; 0xf4
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
 8009bc4:	44a4      	add	ip, r4
        *dest++ = *source++;
 8009bc6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8009bca:	f802 0f01 	strb.w	r0, [r2, #1]!
    while (size-- > 0)
 8009bce:	4562      	cmp	r2, ip
 8009bd0:	d1f9      	bne.n	8009bc6 <_nx_dhcp_send_request_internal+0xace>
 8009bd2:	e43e      	b.n	8009452 <_nx_dhcp_send_request_internal+0x35a>
 8009bd4:	f102 0cf4 	add.w	ip, r2, #244	; 0xf4
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
 8009bde:	44a4      	add	ip, r4
        *dest++ = *source++;
 8009be0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8009be4:	f801 0f01 	strb.w	r0, [r1, #1]!
    while (size-- > 0)
 8009be8:	4561      	cmp	r1, ip
 8009bea:	d1f9      	bne.n	8009be0 <_nx_dhcp_send_request_internal+0xae8>
 8009bec:	e4f4      	b.n	80095d8 <_nx_dhcp_send_request_internal+0x4e0>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	f7ff bbef 	b.w	80093d2 <_nx_dhcp_send_request_internal+0x2da>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8009bf4:	9305      	str	r3, [sp, #20]
 8009bf6:	e4af      	b.n	8009558 <_nx_dhcp_send_request_internal+0x460>
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8009bf8:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8009bfc:	e55f      	b.n	80096be <_nx_dhcp_send_request_internal+0x5c6>
 8009bfe:	bf00      	nop
 8009c00:	20000090 	.word	0x20000090

08009c04 <_nx_dhcp_timeout_entry>:
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_TIMER_EVENT, TX_OR);
 8009c04:	f500 50ea 	add.w	r0, r0, #7488	; 0x1d40
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	3014      	adds	r0, #20
 8009c0e:	f013 bed3 	b.w	801d9b8 <_txe_event_flags_set>
 8009c12:	bf00      	nop

08009c14 <_nx_dhcp_udp_receive_notify>:
    tx_event_flags_set(&(_nx_dhcp_created_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_RECEIVE_EVENT, TX_OR);
 8009c14:	4b04      	ldr	r3, [pc, #16]	; (8009c28 <_nx_dhcp_udp_receive_notify+0x14>)
 8009c16:	f641 5054 	movw	r0, #7508	; 0x1d54
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4418      	add	r0, r3
 8009c22:	f013 bec9 	b.w	801d9b8 <_txe_event_flags_set>
 8009c26:	bf00      	nop
 8009c28:	20001a04 	.word	0x20001a04

08009c2c <_nx_dhcp_get_option_value>:
{
 8009c2c:	b4f0      	push	{r4, r5, r6, r7}
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 8009c2e:	f100 04f0 	add.w	r4, r0, #240	; 0xf0
 8009c32:	f1a3 07f1 	sub.w	r7, r3, #241	; 0xf1
    i = 0;
 8009c36:	2000      	movs	r0, #0
    while (i < length - 1)
 8009c38:	42b8      	cmp	r0, r7
 8009c3a:	f100 0001 	add.w	r0, r0, #1
 8009c3e:	d207      	bcs.n	8009c50 <_nx_dhcp_get_option_value+0x24>
        if (*data == NX_DHCP_OPTION_PAD)
 8009c40:	7825      	ldrb	r5, [r4, #0]
 8009c42:	b945      	cbnz	r5, 8009c56 <_nx_dhcp_get_option_value+0x2a>
    while (i < length - 1)
 8009c44:	42b8      	cmp	r0, r7
            data++;
 8009c46:	f104 0401 	add.w	r4, r4, #1
 8009c4a:	f100 0001 	add.w	r0, r0, #1
    while (i < length - 1)
 8009c4e:	d3f7      	bcc.n	8009c40 <_nx_dhcp_get_option_value+0x14>
    return(NX_OPTION_ERROR);
 8009c50:	200a      	movs	r0, #10
}
 8009c52:	bcf0      	pop	{r4, r5, r6, r7}
 8009c54:	4770      	bx	lr
 8009c56:	7866      	ldrb	r6, [r4, #1]
        else if (*data == option)
 8009c58:	42a9      	cmp	r1, r5
            data += size + 1;
 8009c5a:	f106 0c02 	add.w	ip, r6, #2
 8009c5e:	4430      	add	r0, r6
        else if (*data == option)
 8009c60:	d001      	beq.n	8009c66 <_nx_dhcp_get_option_value+0x3a>
            data += size + 1;
 8009c62:	4464      	add	r4, ip
 8009c64:	e7e8      	b.n	8009c38 <_nx_dhcp_get_option_value+0xc>
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8009c66:	3bf0      	subs	r3, #240	; 0xf0
            if ((i + size + 1) > length)
 8009c68:	4283      	cmp	r3, r0
 8009c6a:	d3f1      	bcc.n	8009c50 <_nx_dhcp_get_option_value+0x24>
        if (data != NX_NULL)
 8009c6c:	1c63      	adds	r3, r4, #1
 8009c6e:	d0ef      	beq.n	8009c50 <_nx_dhcp_get_option_value+0x24>
            if (*data > 4)
 8009c70:	2e04      	cmp	r6, #4
 8009c72:	d90f      	bls.n	8009c94 <_nx_dhcp_get_option_value+0x68>
                if (option == NX_DHCP_OPTION_GATEWAYS)
 8009c74:	2903      	cmp	r1, #3
 8009c76:	d11b      	bne.n	8009cb0 <_nx_dhcp_get_option_value+0x84>
        value = (value << 8) | *data++;
 8009c78:	78a3      	ldrb	r3, [r4, #2]
                    return(NX_SUCCESS);
 8009c7a:	2000      	movs	r0, #0
        value = (value << 8) | *data++;
 8009c7c:	78e5      	ldrb	r5, [r4, #3]
 8009c7e:	7921      	ldrb	r1, [r4, #4]
 8009c80:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8009c84:	7963      	ldrb	r3, [r4, #5]
 8009c86:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8009c8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
 8009c8e:	bcf0      	pop	{r4, r5, r6, r7}
                    *value =  _nx_dhcp_get_data(data + 1, 4);
 8009c90:	6013      	str	r3, [r2, #0]
}
 8009c92:	4770      	bx	lr
                *value = _nx_dhcp_get_data(data + 1, *data);
 8009c94:	3402      	adds	r4, #2
    while (size-- > 0)
 8009c96:	b13e      	cbz	r6, 8009ca8 <_nx_dhcp_get_option_value+0x7c>
 8009c98:	19a1      	adds	r1, r4, r6
ULONG   value = 0;
 8009c9a:	2600      	movs	r6, #0
        value = (value << 8) | *data++;
 8009c9c:	f814 3b01 	ldrb.w	r3, [r4], #1
    while (size-- > 0)
 8009ca0:	428c      	cmp	r4, r1
        value = (value << 8) | *data++;
 8009ca2:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
    while (size-- > 0)
 8009ca6:	d1f9      	bne.n	8009c9c <_nx_dhcp_get_option_value+0x70>
                *value = _nx_dhcp_get_data(data + 1, *data);
 8009ca8:	6016      	str	r6, [r2, #0]
                return(NX_SUCCESS);  
 8009caa:	2000      	movs	r0, #0
}
 8009cac:	bcf0      	pop	{r4, r5, r6, r7}
 8009cae:	4770      	bx	lr
                    return(NX_SIZE_ERROR);
 8009cb0:	2009      	movs	r0, #9
}
 8009cb2:	bcf0      	pop	{r4, r5, r6, r7}
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop

08009cb8 <_nx_dhcp_extract_information.isra.1>:
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
 8009cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 8009cbc:	f102 0610 	add.w	r6, r2, #16
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	f102 0414 	add.w	r4, r2, #20
ULONG   value = 0;
 8009cc6:	2700      	movs	r7, #0
    while (size-- > 0)
 8009cc8:	42a6      	cmp	r6, r4
 8009cca:	d004      	beq.n	8009cd6 <_nx_dhcp_extract_information.isra.1+0x1e>
        value = (value << 8) | *data++;
 8009ccc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009cd0:	ea45 2707 	orr.w	r7, r5, r7, lsl #8
 8009cd4:	e7f8      	b.n	8009cc8 <_nx_dhcp_extract_information.isra.1+0x10>
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8009cd6:	2f00      	cmp	r7, #0
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 8009cd8:	9700      	str	r7, [sp, #0]
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8009cda:	d101      	bne.n	8009ce0 <_nx_dhcp_extract_information.isra.1+0x28>
        return(NX_DHCP_BAD_IP_ADDRESS);
 8009cdc:	2092      	movs	r0, #146	; 0x92
 8009cde:	e0a3      	b.n	8009e28 <_nx_dhcp_extract_information.isra.1+0x170>
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8009ce0:	da09      	bge.n	8009cf6 <_nx_dhcp_extract_information.isra.1+0x3e>
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8009ce2:	f007 4440 	and.w	r4, r7, #3221225472	; 0xc0000000
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8009ce6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8009cea:	d004      	beq.n	8009cf6 <_nx_dhcp_extract_information.isra.1+0x3e>
         ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8009cec:	f007 4460 	and.w	r4, r7, #3758096384	; 0xe0000000
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8009cf0:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
 8009cf4:	d1f2      	bne.n	8009cdc <_nx_dhcp_extract_information.isra.1+0x24>
 8009cf6:	4616      	mov	r6, r2
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	4680      	mov	r8, r0
        interface_record -> nx_dhcp_ip_address =  value;
 8009cfc:	60cf      	str	r7, [r1, #12]
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_SUBNET_MASK, &value, length) == NX_SUCCESS)
 8009cfe:	466a      	mov	r2, sp
 8009d00:	2101      	movs	r1, #1
 8009d02:	4630      	mov	r0, r6
 8009d04:	461d      	mov	r5, r3
 8009d06:	f7ff ff91 	bl	8009c2c <_nx_dhcp_get_option_value>
 8009d0a:	b958      	cbnz	r0, 8009d24 <_nx_dhcp_extract_information.isra.1+0x6c>
        if (value != NX_BOOTP_NO_ADDRESS)
 8009d0c:	9b00      	ldr	r3, [sp, #0]
 8009d0e:	b10b      	cbz	r3, 8009d14 <_nx_dhcp_extract_information.isra.1+0x5c>
            interface_record -> nx_dhcp_network_mask =  value;
 8009d10:	61a3      	str	r3, [r4, #24]
 8009d12:	e007      	b.n	8009d24 <_nx_dhcp_extract_information.isra.1+0x6c>
            nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, 
 8009d14:	f8d8 0000 	ldr.w	r0, [r8]
 8009d18:	f104 0318 	add.w	r3, r4, #24
 8009d1c:	aa01      	add	r2, sp, #4
 8009d1e:	69e1      	ldr	r1, [r4, #28]
 8009d20:	f007 fbd8 	bl	80114d4 <_nx_ip_interface_address_get>
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_SERVER, &value, length) == NX_SUCCESS)
 8009d24:	462b      	mov	r3, r5
 8009d26:	466a      	mov	r2, sp
 8009d28:	2136      	movs	r1, #54	; 0x36
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7ff ff7e 	bl	8009c2c <_nx_dhcp_get_option_value>
 8009d30:	b970      	cbnz	r0, 8009d50 <_nx_dhcp_extract_information.isra.1+0x98>
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8009d32:	9b00      	ldr	r3, [sp, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0d1      	beq.n	8009cdc <_nx_dhcp_extract_information.isra.1+0x24>
 8009d38:	da09      	bge.n	8009d4e <_nx_dhcp_extract_information.isra.1+0x96>
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8009d3a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8009d3e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8009d42:	d004      	beq.n	8009d4e <_nx_dhcp_extract_information.isra.1+0x96>
             ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8009d44:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8009d48:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8009d4c:	d1c6      	bne.n	8009cdc <_nx_dhcp_extract_information.isra.1+0x24>
            interface_record -> nx_dhcp_server_ip = value;
 8009d4e:	6163      	str	r3, [r4, #20]
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_LEASE, &value, length) == NX_SUCCESS)
 8009d50:	462b      	mov	r3, r5
 8009d52:	466a      	mov	r2, sp
 8009d54:	2133      	movs	r1, #51	; 0x33
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7ff ff68 	bl	8009c2c <_nx_dhcp_get_option_value>
 8009d5c:	b978      	cbnz	r0, 8009d7e <_nx_dhcp_extract_information.isra.1+0xc6>
        if (value == 0xFFFFFFFF)
 8009d5e:	9a00      	ldr	r2, [sp, #0]
 8009d60:	1c51      	adds	r1, r2, #1
 8009d62:	d103      	bne.n	8009d6c <_nx_dhcp_extract_information.isra.1+0xb4>
            interface_record -> nx_dhcp_rebind_time = value;
 8009d64:	6362      	str	r2, [r4, #52]	; 0x34
            interface_record -> nx_dhcp_renewal_time = value;
 8009d66:	e9c4 220b 	strd	r2, r2, [r4, #44]	; 0x2c
 8009d6a:	e008      	b.n	8009d7e <_nx_dhcp_extract_information.isra.1+0xc6>
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8009d6c:	2364      	movs	r3, #100	; 0x64
 8009d6e:	fb03 f302 	mul.w	r3, r3, r2
            interface_record -> nx_dhcp_renewal_time = interface_record -> nx_dhcp_lease_time / 2;
 8009d72:	085a      	lsrs	r2, r3, #1
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8009d74:	62e3      	str	r3, [r4, #44]	; 0x2c
            interface_record -> nx_dhcp_rebind_time =  interface_record -> nx_dhcp_lease_time - (interface_record -> nx_dhcp_lease_time / 8);
 8009d76:	eba3 03d3 	sub.w	r3, r3, r3, lsr #3
 8009d7a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8009d7e:	462b      	mov	r3, r5
 8009d80:	466a      	mov	r2, sp
 8009d82:	213a      	movs	r1, #58	; 0x3a
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff ff51 	bl	8009c2c <_nx_dhcp_get_option_value>
 8009d8a:	b940      	cbnz	r0, 8009d9e <_nx_dhcp_extract_information.isra.1+0xe6>
        (value <= interface_record -> nx_dhcp_lease_time))
 8009d8c:	9b00      	ldr	r3, [sp, #0]
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8009d8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d304      	bcc.n	8009d9e <_nx_dhcp_extract_information.isra.1+0xe6>
        if (value == 0xFFFFFFFF)
 8009d94:	1c5a      	adds	r2, r3, #1
            interface_record -> nx_dhcp_renewal_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8009d96:	bf1c      	itt	ne
 8009d98:	2264      	movne	r2, #100	; 0x64
 8009d9a:	4353      	mulne	r3, r2
 8009d9c:	6323      	str	r3, [r4, #48]	; 0x30
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_REBIND, &value, length) == NX_SUCCESS)
 8009d9e:	462b      	mov	r3, r5
 8009da0:	466a      	mov	r2, sp
 8009da2:	213b      	movs	r1, #59	; 0x3b
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7ff ff41 	bl	8009c2c <_nx_dhcp_get_option_value>
 8009daa:	b978      	cbnz	r0, 8009dcc <_nx_dhcp_extract_information.isra.1+0x114>
        if (value == 0xFFFFFFFF)
 8009dac:	9a00      	ldr	r2, [sp, #0]
 8009dae:	1c53      	adds	r3, r2, #1
 8009db0:	d101      	bne.n	8009db6 <_nx_dhcp_extract_information.isra.1+0xfe>
            interface_record -> nx_dhcp_rebind_time = value;
 8009db2:	6362      	str	r2, [r4, #52]	; 0x34
 8009db4:	e00a      	b.n	8009dcc <_nx_dhcp_extract_information.isra.1+0x114>
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 8009db6:	2364      	movs	r3, #100	; 0x64
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8009db8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 8009dba:	fb03 f302 	mul.w	r3, r3, r2
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8009dbe:	428b      	cmp	r3, r1
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 8009dc0:	9300      	str	r3, [sp, #0]
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8009dc2:	d803      	bhi.n	8009dcc <_nx_dhcp_extract_information.isra.1+0x114>
 8009dc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009dc6:	4293      	cmp	r3, r2
                interface_record -> nx_dhcp_rebind_time =  value;
 8009dc8:	bf28      	it	cs
 8009dca:	6363      	strcs	r3, [r4, #52]	; 0x34
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8009dcc:	7863      	ldrb	r3, [r4, #1]
 8009dce:	1f9a      	subs	r2, r3, #6
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8009dd0:	2a01      	cmp	r2, #1
 8009dd2:	d901      	bls.n	8009dd8 <_nx_dhcp_extract_information.isra.1+0x120>
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d117      	bne.n	8009e08 <_nx_dhcp_extract_information.isra.1+0x150>
        if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_GATEWAYS, &value, length) == NX_SUCCESS)
 8009dd8:	466a      	mov	r2, sp
 8009dda:	462b      	mov	r3, r5
 8009ddc:	2103      	movs	r1, #3
 8009dde:	4630      	mov	r0, r6
 8009de0:	f7ff ff24 	bl	8009c2c <_nx_dhcp_get_option_value>
 8009de4:	b980      	cbnz	r0, 8009e08 <_nx_dhcp_extract_information.isra.1+0x150>
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f43f af77 	beq.w	8009cdc <_nx_dhcp_extract_information.isra.1+0x24>
 8009dee:	da0a      	bge.n	8009e06 <_nx_dhcp_extract_information.isra.1+0x14e>
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8009df0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8009df4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8009df8:	d005      	beq.n	8009e06 <_nx_dhcp_extract_information.isra.1+0x14e>
                 ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8009dfa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8009dfe:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8009e02:	f47f af6b 	bne.w	8009cdc <_nx_dhcp_extract_information.isra.1+0x24>
                interface_record -> nx_dhcp_gateway_address = value;
 8009e06:	6123      	str	r3, [r4, #16]
     if ((length - NX_BOOTP_OFFSET_OPTIONS) > NX_DHCP_OPTIONS_BUFFER_SIZE)
 8009e08:	f1a5 02f0 	sub.w	r2, r5, #240	; 0xf0
     memcpy(interface_record -> nx_dhcp_options_buffer, 
 8009e0c:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
 8009e10:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8009e14:	f5b2 7f9c 	cmp.w	r2, #312	; 0x138
 8009e18:	bf28      	it	cs
 8009e1a:	f44f 729c 	movcs.w	r2, #312	; 0x138
 8009e1e:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
 8009e22:	f014 fb96 	bl	801e552 <memcpy>
    return (NX_SUCCESS);
 8009e26:	2000      	movs	r0, #0
}
 8009e28:	b002      	add	sp, #8
 8009e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009e30 <_nx_dhcp_create>:
{
 8009e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e34:	4615      	mov	r5, r2
 8009e36:	b088      	sub	sp, #32
 8009e38:	460e      	mov	r6, r1
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 8009e3a:	f641 7268 	movw	r2, #8040	; 0x1f68
 8009e3e:	2100      	movs	r1, #0
{
 8009e40:	4604      	mov	r4, r0
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8009e42:	f100 070c 	add.w	r7, r0, #12
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 8009e46:	f014 fba8 	bl	801e59a <memset>
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8009e4a:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    dhcp_ptr -> nx_dhcp_name =  name_ptr;
 8009e4e:	6065      	str	r5, [r4, #4]
    dhcp_ptr -> nx_dhcp_ip_ptr =  ip_ptr;
 8009e50:	60a6      	str	r6, [r4, #8]
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8009e52:	4638      	mov	r0, r7
 8009e54:	9200      	str	r2, [sp, #0]
 8009e56:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8009e5a:	f44f 7214 	mov.w	r2, #592	; 0x250
 8009e5e:	4963      	ldr	r1, [pc, #396]	; (8009fec <_nx_dhcp_create+0x1bc>)
 8009e60:	f7fc fd46 	bl	80068f0 <_nx_packet_pool_create>
    if (status != NX_SUCCESS)
 8009e64:	4605      	mov	r5, r0
 8009e66:	b118      	cbz	r0, 8009e70 <_nx_dhcp_create+0x40>
}
 8009e68:	4628      	mov	r0, r5
 8009e6a:	b008      	add	sp, #32
 8009e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 8009e70:	f04f 0e04 	mov.w	lr, #4
 8009e74:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8009e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e7c:	f604 38dc 	addw	r8, r4, #3036	; 0xbdc
    dhcp_ptr -> nx_dhcp_packet_pool_ptr = &dhcp_ptr -> nx_dhcp_pool;
 8009e80:	f8c4 7bd8 	str.w	r7, [r4, #3032]	; 0xbd8
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 8009e84:	4603      	mov	r3, r0
 8009e86:	9200      	str	r2, [sp, #0]
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	4a57      	ldr	r2, [pc, #348]	; (8009fec <_nx_dhcp_create+0x1bc>)
 8009e8e:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8009e92:	f7fe ff0d 	bl	8008cb0 <_nx_udp_socket_create>
    if (status != NX_SUCCESS)
 8009e96:	4605      	mov	r5, r0
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d173      	bne.n	8009f84 <_nx_dhcp_create+0x154>
    status = nx_udp_socket_receive_notify(&(dhcp_ptr -> nx_dhcp_socket), _nx_dhcp_udp_receive_notify);
 8009e9c:	4954      	ldr	r1, [pc, #336]	; (8009ff0 <_nx_dhcp_create+0x1c0>)
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f00a fc98 	bl	80147d4 <_nx_udp_socket_receive_notify>
    if (status != NX_SUCCESS) 
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f040 8083 	bne.w	8009fb0 <_nx_dhcp_create+0x180>
    status =  tx_timer_create(&(dhcp_ptr -> nx_dhcp_timer), "DHCP Client Timer", _nx_dhcp_timeout_entry,
 8009eaa:	f641 567c 	movw	r6, #7548	; 0x1d7c
 8009eae:	212c      	movs	r1, #44	; 0x2c
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	2264      	movs	r2, #100	; 0x64
 8009eb4:	4426      	add	r6, r4
 8009eb6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8009eba:	e9cd 2200 	strd	r2, r2, [sp]
 8009ebe:	4623      	mov	r3, r4
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4a4c      	ldr	r2, [pc, #304]	; (8009ff4 <_nx_dhcp_create+0x1c4>)
 8009ec4:	494c      	ldr	r1, [pc, #304]	; (8009ff8 <_nx_dhcp_create+0x1c8>)
 8009ec6:	f013 ff93 	bl	801ddf0 <_txe_timer_create>
    if (status != NX_SUCCESS)
 8009eca:	4605      	mov	r5, r0
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d156      	bne.n	8009f7e <_nx_dhcp_create+0x14e>
    status =  tx_mutex_create(&(dhcp_ptr -> nx_dhcp_mutex), "NetX DHCP Client", TX_NO_INHERIT);
 8009ed0:	f504 57e9 	add.w	r7, r4, #7456	; 0x1d20
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	2334      	movs	r3, #52	; 0x34
 8009ed8:	4944      	ldr	r1, [pc, #272]	; (8009fec <_nx_dhcp_create+0x1bc>)
 8009eda:	4638      	mov	r0, r7
 8009edc:	f013 fd82 	bl	801d9e4 <_txe_mutex_create>
    if (status != NX_SUCCESS)
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d159      	bne.n	8009f9a <_nx_dhcp_create+0x16a>
    status =  tx_thread_create(&(dhcp_ptr -> nx_dhcp_thread), "NetX DHCP Client", _nx_dhcp_thread_entry, (ULONG)(ALIGN_TYPE)dhcp_ptr,
 8009ee6:	2203      	movs	r2, #3
 8009ee8:	23c8      	movs	r3, #200	; 0xc8
 8009eea:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8009eee:	f504 6152 	add.w	r1, r4, #3360	; 0xd20
 8009ef2:	f604 4a58 	addw	sl, r4, #3160	; 0xc58
 8009ef6:	f04f 0901 	mov.w	r9, #1
 8009efa:	9005      	str	r0, [sp, #20]
 8009efc:	9306      	str	r3, [sp, #24]
 8009efe:	4650      	mov	r0, sl
 8009f00:	9100      	str	r1, [sp, #0]
 8009f02:	4623      	mov	r3, r4
 8009f04:	4939      	ldr	r1, [pc, #228]	; (8009fec <_nx_dhcp_create+0x1bc>)
 8009f06:	e9cd 2903 	strd	r2, r9, [sp, #12]
 8009f0a:	e9cd c201 	strd	ip, r2, [sp, #4]
 8009f0e:	4a3b      	ldr	r2, [pc, #236]	; (8009ffc <_nx_dhcp_create+0x1cc>)
 8009f10:	f013 fe40 	bl	801db94 <_txe_thread_create>
    if (status != NX_SUCCESS)
 8009f14:	4605      	mov	r5, r0
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d13c      	bne.n	8009f94 <_nx_dhcp_create+0x164>
    status = tx_event_flags_create(&(dhcp_ptr -> nx_dhcp_events), (CHAR *)"DHCP Client Events");
 8009f1a:	f641 5054 	movw	r0, #7508	; 0x1d54
 8009f1e:	2228      	movs	r2, #40	; 0x28
 8009f20:	4937      	ldr	r1, [pc, #220]	; (800a000 <_nx_dhcp_create+0x1d0>)
 8009f22:	4420      	add	r0, r4
 8009f24:	f013 fcc0 	bl	801d8a8 <_txe_event_flags_create>
    if (status != TX_SUCCESS)
 8009f28:	4605      	mov	r5, r0
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d14c      	bne.n	8009fc8 <_nx_dhcp_create+0x198>
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 8009f2e:	4a35      	ldr	r2, [pc, #212]	; (800a004 <_nx_dhcp_create+0x1d4>)
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8009f30:	f04f 31ff 	mov.w	r1, #4294967295
    _nx_dhcp_created_ptr = dhcp_ptr;
 8009f34:	4b34      	ldr	r3, [pc, #208]	; (800a008 <_nx_dhcp_create+0x1d8>)
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8009f36:	4638      	mov	r0, r7
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 8009f38:	6022      	str	r2, [r4, #0]
    _nx_dhcp_created_ptr = dhcp_ptr;
 8009f3a:	601c      	str	r4, [r3, #0]
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8009f3c:	f013 fdda 	bl	801daf4 <_txe_mutex_get>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 8009f40:	f641 53a8 	movw	r3, #7592	; 0x1da8
 8009f44:	5ce2      	ldrb	r2, [r4, r3]
 8009f46:	18e6      	adds	r6, r4, r3
 8009f48:	2a01      	cmp	r2, #1
 8009f4a:	d039      	beq.n	8009fc0 <_nx_dhcp_create+0x190>
    client_physical_msw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8009f4c:	68a2      	ldr	r2, [r4, #8]
    interface_record -> nx_dhcp_record_valid = NX_TRUE;
 8009f4e:	f804 9003 	strb.w	r9, [r4, r3]
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8009f52:	f04f 33ff 	mov.w	r3, #4294967295
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8009f56:	f8d2 4c54 	ldr.w	r4, [r2, #3156]	; 0xc54
 8009f5a:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
    interface_record -> nx_dhcp_interface_index = iface_index;
 8009f5e:	61f5      	str	r5, [r6, #28]
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8009f60:	4054      	eors	r4, r2
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS;
 8009f62:	60f5      	str	r5, [r6, #12]
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS;
 8009f64:	6175      	str	r5, [r6, #20]
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8009f66:	62f3      	str	r3, [r6, #44]	; 0x2c
    interface_record -> nx_dhcp_renewal_time =  0;
 8009f68:	e9c6 550c 	strd	r5, r5, [r6, #48]	; 0x30
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8009f6c:	f014 fb9a 	bl	801e6a4 <rand>
 8009f70:	4044      	eors	r4, r0
    interface_record -> nx_dhcp_timeout = 0;
 8009f72:	6235      	str	r5, [r6, #32]
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 8009f74:	4638      	mov	r0, r7
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8009f76:	6074      	str	r4, [r6, #4]
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 8009f78:	f013 fdf0 	bl	801db5c <_txe_mutex_put>
 8009f7c:	e774      	b.n	8009e68 <_nx_dhcp_create+0x38>
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f7fe fed6 	bl	8008d30 <_nx_udp_socket_delete>
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8009f84:	f8d4 0bd8 	ldr.w	r0, [r4, #3032]	; 0xbd8
 8009f88:	f008 fe12 	bl	8012bb0 <_nx_packet_pool_delete>
}
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	b008      	add	sp, #32
 8009f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 8009f94:	4638      	mov	r0, r7
 8009f96:	f013 fd8f 	bl	801dab8 <_txe_mutex_delete>
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f7fe fec8 	bl	8008d30 <_nx_udp_socket_delete>
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8009fa0:	f8d4 0bd8 	ldr.w	r0, [r4, #3032]	; 0xbd8
 8009fa4:	f008 fe04 	bl	8012bb0 <_nx_packet_pool_delete>
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f013 ff9f 	bl	801deec <_txe_timer_delete>
        return(status);
 8009fae:	e75b      	b.n	8009e68 <_nx_dhcp_create+0x38>
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8009fb0:	f8d4 0bd8 	ldr.w	r0, [r4, #3032]	; 0xbd8
 8009fb4:	f008 fdfc 	bl	8012bb0 <_nx_packet_pool_delete>
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8009fb8:	4640      	mov	r0, r8
 8009fba:	f7fe feb9 	bl	8008d30 <_nx_udp_socket_delete>
 8009fbe:	e774      	b.n	8009eaa <_nx_dhcp_create+0x7a>
                 tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8009fc0:	4638      	mov	r0, r7
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8009fc2:	f013 fdcb 	bl	801db5c <_txe_mutex_put>
 8009fc6:	e74f      	b.n	8009e68 <_nx_dhcp_create+0x38>
        tx_thread_delete(&(dhcp_ptr -> nx_dhcp_thread));
 8009fc8:	4650      	mov	r0, sl
 8009fca:	f013 fe9b 	bl	801dd04 <_txe_thread_delete>
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 8009fce:	4638      	mov	r0, r7
 8009fd0:	f013 fd72 	bl	801dab8 <_txe_mutex_delete>
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f013 ff89 	bl	801deec <_txe_timer_delete>
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8009fda:	4640      	mov	r0, r8
 8009fdc:	f7fe fea8 	bl	8008d30 <_nx_udp_socket_delete>
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8009fe0:	f8d4 0bd8 	ldr.w	r0, [r4, #3032]	; 0xbd8
 8009fe4:	f008 fde4 	bl	8012bb0 <_nx_packet_pool_delete>
        return(status);
 8009fe8:	e73e      	b.n	8009e68 <_nx_dhcp_create+0x38>
 8009fea:	bf00      	nop
 8009fec:	08025548 	.word	0x08025548
 8009ff0:	08009c15 	.word	0x08009c15
 8009ff4:	08009c05 	.word	0x08009c05
 8009ff8:	0802555c 	.word	0x0802555c
 8009ffc:	0800a0b9 	.word	0x0800a0b9
 800a000:	08025570 	.word	0x08025570
 800a004:	44484350 	.word	0x44484350
 800a008:	20001a04 	.word	0x20001a04

0800a00c <_nx_dhcp_interface_reinitialize>:
{
 800a00c:	b5f0      	push	{r4, r5, r6, r7, lr}
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 800a00e:	f500 56e9 	add.w	r6, r0, #7456	; 0x1d20
{
 800a012:	4605      	mov	r5, r0
    /* Find which DHCP Client interface record is assigned the input interface. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 800a014:	f641 54a8 	movw	r4, #7592	; 0x1da8
{
 800a018:	b085      	sub	sp, #20
 800a01a:	460f      	mov	r7, r1
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 800a01c:	4630      	mov	r0, r6
 800a01e:	f04f 31ff 	mov.w	r1, #4294967295
 800a022:	f013 fd67 	bl	801daf4 <_txe_mutex_get>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 800a026:	5d2b      	ldrb	r3, [r5, r4]
 800a028:	442c      	add	r4, r5
 800a02a:	b1eb      	cbz	r3, 800a068 <_nx_dhcp_interface_reinitialize+0x5c>
            continue;

        /* Check if the interface index matches.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 800a02c:	f641 53c4 	movw	r3, #7620	; 0x1dc4
 800a030:	58eb      	ldr	r3, [r5, r3]
 800a032:	429f      	cmp	r7, r3
 800a034:	d118      	bne.n	800a068 <_nx_dhcp_interface_reinitialize+0x5c>
    if (interface_record -> nx_dhcp_ip_address)
 800a036:	68e3      	ldr	r3, [r4, #12]
 800a038:	b9e3      	cbnz	r3, 800a074 <_nx_dhcp_interface_reinitialize+0x68>
    if (interface_record -> nx_dhcp_gateway_address)
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	bb6b      	cbnz	r3, 800a09a <_nx_dhcp_interface_reinitialize+0x8e>
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 800a03e:	2500      	movs	r5, #0
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 800a040:	f04f 33ff 	mov.w	r3, #4294967295
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a044:	4630      	mov	r0, r6
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 800a046:	60e5      	str	r5, [r4, #12]
    interface_record -> nx_dhcp_network_mask = NX_BOOTP_NO_ADDRESS;
 800a048:	61a5      	str	r5, [r4, #24]
    interface_record -> nx_dhcp_skip_discovery = NX_FALSE;
 800a04a:	6465      	str	r5, [r4, #68]	; 0x44
    interface_record -> nx_dhcp_seconds = 0;
 800a04c:	60a5      	str	r5, [r4, #8]
    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_NOT_STARTED;
 800a04e:	7065      	strb	r5, [r4, #1]
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 800a050:	62e3      	str	r3, [r4, #44]	; 0x2c
    interface_record -> nx_dhcp_gateway_address = NX_BOOTP_NO_ADDRESS; 
 800a052:	e9c4 5504 	strd	r5, r5, [r4, #16]
    interface_record -> nx_dhcp_renewal_time =  0;
 800a056:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    interface_record -> nx_dhcp_rtr_interval = 0;
 800a05a:	e9c4 5508 	strd	r5, r5, [r4, #32]
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a05e:	f013 fd7d 	bl	801db5c <_txe_mutex_put>
    return NX_SUCCESS;
 800a062:	4628      	mov	r0, r5
}
 800a064:	b005      	add	sp, #20
 800a066:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a068:	4630      	mov	r0, r6
 800a06a:	f013 fd77 	bl	801db5c <_txe_mutex_put>
        return(status);
 800a06e:	20a4      	movs	r0, #164	; 0xa4
}
 800a070:	b005      	add	sp, #20
 800a072:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, &ip_address, &network_mask);
 800a074:	ab02      	add	r3, sp, #8
 800a076:	aa01      	add	r2, sp, #4
 800a078:	4639      	mov	r1, r7
 800a07a:	68a8      	ldr	r0, [r5, #8]
 800a07c:	f007 fa2a 	bl	80114d4 <_nx_ip_interface_address_get>
        if ((status == NX_SUCCESS) && (ip_address == interface_record -> nx_dhcp_ip_address))
 800a080:	2800      	cmp	r0, #0
 800a082:	d1da      	bne.n	800a03a <_nx_dhcp_interface_reinitialize+0x2e>
 800a084:	68e2      	ldr	r2, [r4, #12]
 800a086:	9b01      	ldr	r3, [sp, #4]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d1d6      	bne.n	800a03a <_nx_dhcp_interface_reinitialize+0x2e>
            nx_ip_interface_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, 0, 0);
 800a08c:	4603      	mov	r3, r0
 800a08e:	4602      	mov	r2, r0
 800a090:	4639      	mov	r1, r7
 800a092:	68a8      	ldr	r0, [r5, #8]
 800a094:	f007 fa42 	bl	801151c <_nx_ip_interface_address_set>
 800a098:	e7cf      	b.n	800a03a <_nx_dhcp_interface_reinitialize+0x2e>
        status = nx_ip_gateway_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, &gateway_address);
 800a09a:	a903      	add	r1, sp, #12
 800a09c:	68a8      	ldr	r0, [r5, #8]
 800a09e:	f007 f94f 	bl	8011340 <_nx_ip_gateway_address_get>
        if ((status == NX_SUCCESS) && (gateway_address == interface_record -> nx_dhcp_gateway_address))
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d1cb      	bne.n	800a03e <_nx_dhcp_interface_reinitialize+0x32>
 800a0a6:	6922      	ldr	r2, [r4, #16]
 800a0a8:	9b03      	ldr	r3, [sp, #12]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d1c7      	bne.n	800a03e <_nx_dhcp_interface_reinitialize+0x32>
            nx_ip_gateway_address_clear(dhcp_ptr -> nx_dhcp_ip_ptr);
 800a0ae:	68a8      	ldr	r0, [r5, #8]
 800a0b0:	f007 f930 	bl	8011314 <_nx_ip_gateway_address_clear>
 800a0b4:	e7c3      	b.n	800a03e <_nx_dhcp_interface_reinitialize+0x32>
 800a0b6:	bf00      	nop

0800a0b8 <_nx_dhcp_thread_entry>:
{
 800a0b8:	4684      	mov	ip, r0
 800a0ba:	f641 5154 	movw	r1, #7508	; 0x1d54
 800a0be:	f641 725c 	movw	r2, #8028	; 0x1f5c
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a0c2:	4663      	mov	r3, ip
{
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	1859      	adds	r1, r3, r1
 800a0ca:	b09f      	sub	sp, #124	; 0x7c
 800a0cc:	f641 7458 	movw	r4, #8024	; 0x1f58
 800a0d0:	f641 5ee4 	movw	lr, #7652	; 0x1de4
 800a0d4:	9105      	str	r1, [sp, #20]
 800a0d6:	4661      	mov	r1, ip
 800a0d8:	f641 58c4 	movw	r8, #7620	; 0x1dc4
 800a0dc:	f641 57c8 	movw	r7, #7624	; 0x1dc8
 800a0e0:	3108      	adds	r1, #8
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a0e2:	f50c 5ae9 	add.w	sl, ip, #7456	; 0x1d20
 800a0e6:	44e0      	add	r8, ip
 800a0e8:	4467      	add	r7, ip
 800a0ea:	9113      	str	r1, [sp, #76]	; 0x4c
 800a0ec:	1919      	adds	r1, r3, r4
 800a0ee:	f641 56a8 	movw	r6, #7592	; 0x1da8
 800a0f2:	f641 5bb0 	movw	fp, #7600	; 0x1db0
 800a0f6:	9108      	str	r1, [sp, #32]
 800a0f8:	1899      	adds	r1, r3, r2
 800a0fa:	f641 52a9 	movw	r2, #7593	; 0x1da9
{
 800a0fe:	9004      	str	r0, [sp, #16]
 800a100:	9109      	str	r1, [sp, #36]	; 0x24
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a102:	4650      	mov	r0, sl
 800a104:	1899      	adds	r1, r3, r2
 800a106:	f641 52b4 	movw	r2, #7604	; 0x1db4
 800a10a:	f60c 35dc 	addw	r5, ip, #3036	; 0xbdc
 800a10e:	44e3      	add	fp, ip
 800a110:	9103      	str	r1, [sp, #12]
 800a112:	1899      	adds	r1, r3, r2
 800a114:	f641 52ec 	movw	r2, #7660	; 0x1dec
 800a118:	4466      	add	r6, ip
 800a11a:	910e      	str	r1, [sp, #56]	; 0x38
 800a11c:	1899      	adds	r1, r3, r2
 800a11e:	f641 52cc 	movw	r2, #7628	; 0x1dcc
 800a122:	9110      	str	r1, [sp, #64]	; 0x40
 800a124:	1899      	adds	r1, r3, r2
 800a126:	f641 52dc 	movw	r2, #7644	; 0x1ddc
 800a12a:	9107      	str	r1, [sp, #28]
 800a12c:	1899      	adds	r1, r3, r2
 800a12e:	f641 52d8 	movw	r2, #7640	; 0x1dd8
 800a132:	910d      	str	r1, [sp, #52]	; 0x34
 800a134:	1899      	adds	r1, r3, r2
 800a136:	4672      	mov	r2, lr
 800a138:	910f      	str	r1, [sp, #60]	; 0x3c
 800a13a:	f50c 51ef 	add.w	r1, ip, #7648	; 0x1de0
 800a13e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a140:	1899      	adds	r1, r3, r2
 800a142:	f641 52d4 	movw	r2, #7636	; 0x1dd4
 800a146:	910c      	str	r1, [sp, #48]	; 0x30
 800a148:	f04f 31ff 	mov.w	r1, #4294967295
 800a14c:	4413      	add	r3, r2
 800a14e:	9311      	str	r3, [sp, #68]	; 0x44
 800a150:	f013 fcd0 	bl	801daf4 <_txe_mutex_get>
 800a154:	4642      	mov	r2, r8
 800a156:	463b      	mov	r3, r7
 800a158:	46d8      	mov	r8, fp
 800a15a:	462f      	mov	r7, r5
 800a15c:	46d3      	mov	fp, sl
 800a15e:	461d      	mov	r5, r3
 800a160:	4692      	mov	sl, r2
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 800a162:	4653      	mov	r3, sl
 800a164:	46ba      	mov	sl, r7
 800a166:	461f      	mov	r7, r3
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a168:	4658      	mov	r0, fp
 800a16a:	f013 fcf7 	bl	801db5c <_txe_mutex_put>
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 800a16e:	f04f 33ff 	mov.w	r3, #4294967295
 800a172:	2201      	movs	r2, #1
 800a174:	f04f 31ff 	mov.w	r1, #4294967295
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	ab17      	add	r3, sp, #92	; 0x5c
 800a17c:	9805      	ldr	r0, [sp, #20]
 800a17e:	f013 fbef 	bl	801d960 <_txe_event_flags_get>
        tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a182:	f04f 31ff 	mov.w	r1, #4294967295
 800a186:	4658      	mov	r0, fp
 800a188:	f013 fcb4 	bl	801daf4 <_txe_mutex_get>
        if  (events & NX_DHCP_CLIENT_RECEIVE_EVENT)
 800a18c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a18e:	07da      	lsls	r2, r3, #31
 800a190:	f100 80f3 	bmi.w	800a37a <_nx_dhcp_thread_entry+0x2c2>
        if (events & NX_DHCP_CLIENT_TIMER_EVENT)
 800a194:	079b      	lsls	r3, r3, #30
 800a196:	d5e7      	bpl.n	800a168 <_nx_dhcp_thread_entry+0xb0>
         if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE)
 800a198:	7833      	ldrb	r3, [r6, #0]
 800a19a:	b163      	cbz	r3, 800a1b6 <_nx_dhcp_thread_entry+0xfe>
         interface_record -> nx_dhcp_seconds ++;
 800a19c:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	f8c8 3000 	str.w	r3, [r8]
        if (interface_record -> nx_dhcp_timeout != 0)
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0dd      	beq.n	800a168 <_nx_dhcp_thread_entry+0xb0>
            if (interface_record -> nx_dhcp_timeout > NX_DHCP_TIME_INTERVAL)
 800a1ac:	2b64      	cmp	r3, #100	; 0x64
 800a1ae:	d906      	bls.n	800a1be <_nx_dhcp_thread_entry+0x106>
                interface_record -> nx_dhcp_timeout -= (ULONG)NX_DHCP_TIME_INTERVAL;
 800a1b0:	3b64      	subs	r3, #100	; 0x64
 800a1b2:	602b      	str	r3, [r5, #0]
 800a1b4:	e7d8      	b.n	800a168 <_nx_dhcp_thread_entry+0xb0>
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	4657      	mov	r7, sl
 800a1ba:	469a      	mov	sl, r3
 800a1bc:	e7d1      	b.n	800a162 <_nx_dhcp_thread_entry+0xaa>
                interface_record -> nx_dhcp_timeout = 0; 
 800a1be:	2300      	movs	r3, #0
 800a1c0:	602b      	str	r3, [r5, #0]
                original_state = interface_record -> nx_dhcp_state;
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	781c      	ldrb	r4, [r3, #0]
                switch (interface_record -> nx_dhcp_state)
 800a1c6:	1ea3      	subs	r3, r4, #2
 800a1c8:	2b05      	cmp	r3, #5
 800a1ca:	d8cd      	bhi.n	800a168 <_nx_dhcp_thread_entry+0xb0>
 800a1cc:	e8df f003 	tbb	[pc, r3]
 800a1d0:	53789fa1 	.word	0x53789fa1
 800a1d4:	0335      	.short	0x0335
                        if (interface_record -> nx_dhcp_rebind_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 800a1d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1d8:	9a07      	ldr	r2, [sp, #28]
 800a1da:	680b      	ldr	r3, [r1, #0]
 800a1dc:	6812      	ldr	r2, [r2, #0]
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	f0c0 813d 	bcc.w	800a45e <_nx_dhcp_thread_entry+0x3a6>
                            interface_record -> nx_dhcp_rebind_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 800a1e4:	1a9b      	subs	r3, r3, r2
 800a1e6:	600b      	str	r3, [r1, #0]
    if (timeout != 0)
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 813a 	beq.w	800a462 <_nx_dhcp_thread_entry+0x3aa>
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 800a1ee:	f241 7270 	movw	r2, #6000	; 0x1770
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d905      	bls.n	800a202 <_nx_dhcp_thread_entry+0x14a>
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 800a1f6:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800a1fa:	428b      	cmp	r3, r1
 800a1fc:	f240 825f 	bls.w	800a6be <_nx_dhcp_thread_entry+0x606>
                timeout = timeout / 2;
 800a200:	085b      	lsrs	r3, r3, #1
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 800a202:	602b      	str	r3, [r5, #0]
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800a204:	2203      	movs	r2, #3
 800a206:	4631      	mov	r1, r6
 800a208:	9804      	ldr	r0, [sp, #16]
 800a20a:	f7fe ff75 	bl	80090f8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 800a20e:	682b      	ldr	r3, [r5, #0]
 800a210:	9a07      	ldr	r2, [sp, #28]
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	7819      	ldrb	r1, [r3, #0]
                if (original_state != interface_record -> nx_dhcp_state)
 800a218:	42a1      	cmp	r1, r4
 800a21a:	d0a5      	beq.n	800a168 <_nx_dhcp_thread_entry+0xb0>
                    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800a21c:	9b08      	ldr	r3, [sp, #32]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	b10b      	cbz	r3, 800a226 <_nx_dhcp_thread_entry+0x16e>
                        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 800a222:	9804      	ldr	r0, [sp, #16]
 800a224:	4798      	blx	r3
                    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800a226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d09c      	beq.n	800a168 <_nx_dhcp_thread_entry+0xb0>
                        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 800a22e:	9a03      	ldr	r2, [sp, #12]
 800a230:	9804      	ldr	r0, [sp, #16]
 800a232:	7812      	ldrb	r2, [r2, #0]
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	4798      	blx	r3
 800a238:	e796      	b.n	800a168 <_nx_dhcp_thread_entry+0xb0>
                        if (interface_record -> nx_dhcp_renewal_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 800a23a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a23c:	9a07      	ldr	r2, [sp, #28]
 800a23e:	680b      	ldr	r3, [r1, #0]
 800a240:	6812      	ldr	r2, [r2, #0]
 800a242:	4293      	cmp	r3, r2
 800a244:	f0c0 813f 	bcc.w	800a4c6 <_nx_dhcp_thread_entry+0x40e>
                            interface_record -> nx_dhcp_renewal_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 800a248:	1a9b      	subs	r3, r3, r2
 800a24a:	600b      	str	r3, [r1, #0]
    if (timeout != 0)
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1ce      	bne.n	800a1ee <_nx_dhcp_thread_entry+0x136>
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 800a250:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 800a254:	f04f 0c07 	mov.w	ip, #7
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800a258:	2203      	movs	r2, #3
 800a25a:	4631      	mov	r1, r6
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 800a25c:	f883 c000 	strb.w	ip, [r3]
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800a260:	f7fe ff4a 	bl	80090f8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rebind_remain_time = interface_record -> nx_dhcp_lease_time - interface_record -> nx_dhcp_rebind_time;
 800a264:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6812      	ldr	r2, [r2, #0]
 800a26c:	1a9b      	subs	r3, r3, r2
 800a26e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a270:	6013      	str	r3, [r2, #0]
    if (timeout != 0)
 800a272:	b9ab      	cbnz	r3, 800a2a0 <_nx_dhcp_thread_entry+0x1e8>
 800a274:	e01e      	b.n	800a2b4 <_nx_dhcp_thread_entry+0x1fc>
                        interface_record -> nx_dhcp_seconds = 0;
 800a276:	2000      	movs	r0, #0
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 800a278:	f04f 0c06 	mov.w	ip, #6
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800a27c:	2203      	movs	r2, #3
 800a27e:	4631      	mov	r1, r6
                        interface_record -> nx_dhcp_seconds = 0;
 800a280:	f8c8 0000 	str.w	r0, [r8]
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 800a284:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 800a288:	f883 c000 	strb.w	ip, [r3]
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800a28c:	f7fe ff34 	bl	80090f8 <_nx_dhcp_send_request_internal>
                        interface_record -> nx_dhcp_renewal_remain_time = interface_record -> nx_dhcp_rebind_time - interface_record -> nx_dhcp_renewal_time;
 800a290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a292:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	1a9b      	subs	r3, r3, r2
 800a29a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a29c:	6013      	str	r3, [r2, #0]
    if (timeout != 0)
 800a29e:	b14b      	cbz	r3, 800a2b4 <_nx_dhcp_thread_entry+0x1fc>
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 800a2a0:	f241 7270 	movw	r2, #6000	; 0x1770
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d905      	bls.n	800a2b4 <_nx_dhcp_thread_entry+0x1fc>
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 800a2a8:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800a2ac:	428b      	cmp	r3, r1
                timeout = timeout / 2;
 800a2ae:	bf8c      	ite	hi
 800a2b0:	085b      	lsrhi	r3, r3, #1
                timeout =  NX_DHCP_MIN_RENEW_TIMEOUT ;
 800a2b2:	4613      	movls	r3, r2
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 800a2b4:	9a07      	ldr	r2, [sp, #28]
                            interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 800a2b6:	602b      	str	r3, [r5, #0]
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	7819      	ldrb	r1, [r3, #0]
 800a2be:	e7ab      	b.n	800a218 <_nx_dhcp_thread_entry+0x160>
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	9804      	ldr	r0, [sp, #16]
 800a2c6:	f7fe ff17 	bl	80090f8 <_nx_dhcp_send_request_internal>
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 800a2ca:	9a07      	ldr	r2, [sp, #28]
 800a2cc:	6813      	ldr	r3, [r2, #0]
 800a2ce:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800a2d2:	f5b9 5fc8 	cmp.w	r9, #6400	; 0x1900
 800a2d6:	f080 80a3 	bcs.w	800a420 <_nx_dhcp_thread_entry+0x368>
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800a2da:	f8c2 9000 	str.w	r9, [r2]
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 800a2de:	f8c5 9000 	str.w	r9, [r5]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800a2e2:	f014 f9df 	bl	801e6a4 <rand>
 800a2e6:	4bae      	ldr	r3, [pc, #696]	; (800a5a0 <_nx_dhcp_thread_entry+0x4e8>)
 800a2e8:	22c9      	movs	r2, #201	; 0xc9
 800a2ea:	fba3 1300 	umull	r1, r3, r3, r0
 800a2ee:	085b      	lsrs	r3, r3, #1
 800a2f0:	fb02 0313 	mls	r3, r2, r3, r0
    if (adjustment < NX_IP_PERIODIC_RATE)
 800a2f4:	2b63      	cmp	r3, #99	; 0x63
 800a2f6:	f200 80a2 	bhi.w	800a43e <_nx_dhcp_thread_entry+0x386>
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 800a2fa:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800a2fe:	4591      	cmp	r9, r2
 800a300:	f200 809d 	bhi.w	800a43e <_nx_dhcp_thread_entry+0x386>
 800a304:	9b03      	ldr	r3, [sp, #12]
 800a306:	7819      	ldrb	r1, [r3, #0]
                            interface_record -> nx_dhcp_timeout = 1;
 800a308:	2301      	movs	r3, #1
 800a30a:	602b      	str	r3, [r5, #0]
 800a30c:	e784      	b.n	800a218 <_nx_dhcp_thread_entry+0x160>
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 800a30e:	2201      	movs	r2, #1
 800a310:	e7d7      	b.n	800a2c2 <_nx_dhcp_thread_entry+0x20a>
                        interface_record -> nx_dhcp_seconds = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	f8c8 3000 	str.w	r3, [r8]
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 800a318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	b123      	cbz	r3, 800a328 <_nx_dhcp_thread_entry+0x270>
 800a31e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f040 81be 	bne.w	800a6a4 <_nx_dhcp_thread_entry+0x5ec>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 800a328:	2201      	movs	r2, #1
 800a32a:	4631      	mov	r1, r6
 800a32c:	9804      	ldr	r0, [sp, #16]
 800a32e:	f7fe fee3 	bl	80090f8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_SELECTING;
 800a332:	2303      	movs	r3, #3
 800a334:	9a03      	ldr	r2, [sp, #12]
 800a336:	7013      	strb	r3, [r2, #0]
                        if (interface_record -> nx_dhcp_rtr_interval == 0)
 800a338:	9a07      	ldr	r2, [sp, #28]
 800a33a:	6813      	ldr	r3, [r2, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f040 80a3 	bne.w	800a488 <_nx_dhcp_thread_entry+0x3d0>
                            interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 800a342:	f44f 79c8 	mov.w	r9, #400	; 0x190
 800a346:	f8c2 9000 	str.w	r9, [r2]
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 800a34a:	f8c5 9000 	str.w	r9, [r5]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800a34e:	f014 f9a9 	bl	801e6a4 <rand>
 800a352:	4b93      	ldr	r3, [pc, #588]	; (800a5a0 <_nx_dhcp_thread_entry+0x4e8>)
 800a354:	22c9      	movs	r2, #201	; 0xc9
 800a356:	fba3 1300 	umull	r1, r3, r3, r0
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	fb02 0313 	mls	r3, r2, r3, r0
    if (adjustment < NX_IP_PERIODIC_RATE)
 800a360:	2b63      	cmp	r3, #99	; 0x63
 800a362:	f200 808b 	bhi.w	800a47c <_nx_dhcp_thread_entry+0x3c4>
 800a366:	9a03      	ldr	r2, [sp, #12]
 800a368:	7811      	ldrb	r1, [r2, #0]
            timeout -= (ULONG)(NX_IP_PERIODIC_RATE - adjustment);
 800a36a:	f1a9 0264 	sub.w	r2, r9, #100	; 0x64
 800a36e:	4413      	add	r3, r2
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 800a370:	602b      	str	r3, [r5, #0]
                        if (interface_record -> nx_dhcp_timeout == 0)
 800a372:	2b00      	cmp	r3, #0
 800a374:	f47f af50 	bne.w	800a218 <_nx_dhcp_thread_entry+0x160>
 800a378:	e7c6      	b.n	800a308 <_nx_dhcp_thread_entry+0x250>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 800a37a:	9506      	str	r5, [sp, #24]
 800a37c:	2200      	movs	r2, #0
 800a37e:	a916      	add	r1, sp, #88	; 0x58
 800a380:	4650      	mov	r0, sl
 800a382:	f7fe fd07 	bl	8008d94 <_nx_udp_socket_receive>
                if (status != NX_SUCCESS)
 800a386:	b9d0      	cbnz	r0, 800a3be <_nx_dhcp_thread_entry+0x306>
                status = nx_udp_packet_info_extract(packet_ptr, &source_ip_address, &protocol, &source_port, &iface_index);
 800a388:	aa18      	add	r2, sp, #96	; 0x60
 800a38a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a38c:	ab19      	add	r3, sp, #100	; 0x64
 800a38e:	a91a      	add	r1, sp, #104	; 0x68
 800a390:	9200      	str	r2, [sp, #0]
 800a392:	aa1b      	add	r2, sp, #108	; 0x6c
 800a394:	f00a f9d2 	bl	801473c <_nx_udp_packet_info_extract>
                if (status != NX_SUCCESS) 
 800a398:	b9a0      	cbnz	r0, 800a3c4 <_nx_dhcp_thread_entry+0x30c>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 800a39a:	7833      	ldrb	r3, [r6, #0]
 800a39c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800a39e:	b123      	cbz	r3, 800a3aa <_nx_dhcp_thread_entry+0x2f2>
                status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 800a3a0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	4599      	cmp	r9, r3
 800a3a8:	d010      	beq.n	800a3cc <_nx_dhcp_thread_entry+0x314>
                    nx_packet_release(packet_ptr);
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f7fc fb20 	bl	80069f0 <_nx_packet_release>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	a916      	add	r1, sp, #88	; 0x58
 800a3b4:	4650      	mov	r0, sl
 800a3b6:	f7fe fced 	bl	8008d94 <_nx_udp_socket_receive>
                if (status != NX_SUCCESS)
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d0e4      	beq.n	800a388 <_nx_dhcp_thread_entry+0x2d0>
 800a3be:	9d06      	ldr	r5, [sp, #24]
 800a3c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3c2:	e6e7      	b.n	800a194 <_nx_dhcp_thread_entry+0xdc>
                    nx_packet_release(packet_ptr); 
 800a3c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a3c6:	f7fc fb13 	bl	80069f0 <_nx_packet_release>
                    continue;
 800a3ca:	e7d7      	b.n	800a37c <_nx_dhcp_thread_entry+0x2c4>
    if (packet_ptr -> nx_packet_length <= NX_BOOTP_OFFSET_OPTIONS)
 800a3cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ce:	2bf0      	cmp	r3, #240	; 0xf0
 800a3d0:	d9eb      	bls.n	800a3aa <_nx_dhcp_thread_entry+0x2f2>
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 800a3d2:	9d04      	ldr	r5, [sp, #16]
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	222c      	movs	r2, #44	; 0x2c
 800a3d8:	a91c      	add	r1, sp, #112	; 0x70
 800a3da:	f8d5 0bd8 	ldr.w	r0, [r5, #3032]	; 0xbd8
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 800a3de:	68ad      	ldr	r5, [r5, #8]
 800a3e0:	950a      	str	r5, [sp, #40]	; 0x28
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 800a3e2:	f7fc f953 	bl	800668c <_nx_packet_allocate>
    if (status != NX_SUCCESS)
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d1df      	bne.n	800a3aa <_nx_dhcp_thread_entry+0x2f2>
    if ((ULONG)(new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_prepend_ptr) < ((packet_ptr) -> nx_packet_length))
 800a3ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ee:	688a      	ldr	r2, [r1, #8]
 800a3f0:	694d      	ldr	r5, [r1, #20]
 800a3f2:	eba5 0c02 	sub.w	ip, r5, r2
 800a3f6:	459c      	cmp	ip, r3
 800a3f8:	d32a      	bcc.n	800a450 <_nx_dhcp_thread_entry+0x398>
    status = nx_packet_data_extract_offset(packet_ptr, offset, (VOID *)new_packet_ptr -> nx_packet_prepend_ptr, (packet_ptr) -> nx_packet_length, &bytes_copied);
 800a3fa:	a91d      	add	r1, sp, #116	; 0x74
 800a3fc:	9100      	str	r1, [sp, #0]
 800a3fe:	4601      	mov	r1, r0
 800a400:	4620      	mov	r0, r4
 800a402:	f008 fb95 	bl	8012b30 <_nx_packet_data_extract_offset>
    if ((status != NX_SUCCESS) || (bytes_copied == 0))
 800a406:	4603      	mov	r3, r0
 800a408:	2800      	cmp	r0, #0
 800a40a:	d15f      	bne.n	800a4cc <_nx_dhcp_thread_entry+0x414>
 800a40c:	e9dd 021c 	ldrd	r0, r2, [sp, #112]	; 0x70
 800a410:	2a00      	cmp	r2, #0
 800a412:	d15d      	bne.n	800a4d0 <_nx_dhcp_thread_entry+0x418>
        nx_packet_release(new_packet_ptr);
 800a414:	f7fc faec 	bl	80069f0 <_nx_packet_release>
        nx_packet_release(packet_ptr);
 800a418:	4620      	mov	r0, r4
 800a41a:	f7fc fae9 	bl	80069f0 <_nx_packet_release>
 800a41e:	e7ad      	b.n	800a37c <_nx_dhcp_thread_entry+0x2c4>
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800a420:	f44f 59c8 	mov.w	r9, #6400	; 0x1900
 800a424:	f8c2 9000 	str.w	r9, [r2]
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 800a428:	f8c5 9000 	str.w	r9, [r5]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800a42c:	f014 f93a 	bl	801e6a4 <rand>
 800a430:	4b5b      	ldr	r3, [pc, #364]	; (800a5a0 <_nx_dhcp_thread_entry+0x4e8>)
 800a432:	22c9      	movs	r2, #201	; 0xc9
 800a434:	fba3 1300 	umull	r1, r3, r3, r0
 800a438:	085b      	lsrs	r3, r3, #1
 800a43a:	fb02 0313 	mls	r3, r2, r3, r0
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 800a43e:	444b      	add	r3, r9
 800a440:	9a03      	ldr	r2, [sp, #12]
 800a442:	3b64      	subs	r3, #100	; 0x64
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 800a444:	602b      	str	r3, [r5, #0]
 800a446:	7811      	ldrb	r1, [r2, #0]
                        if (interface_record -> nx_dhcp_timeout == 0)
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f47f aee5 	bne.w	800a218 <_nx_dhcp_thread_entry+0x160>
 800a44e:	e75b      	b.n	800a308 <_nx_dhcp_thread_entry+0x250>
        nx_packet_release(new_packet_ptr);
 800a450:	4608      	mov	r0, r1
 800a452:	f7fc facd 	bl	80069f0 <_nx_packet_release>
        nx_packet_release(packet_ptr);
 800a456:	4620      	mov	r0, r4
 800a458:	f7fc faca 	bl	80069f0 <_nx_packet_release>
 800a45c:	e78e      	b.n	800a37c <_nx_dhcp_thread_entry+0x2c4>
 800a45e:	2300      	movs	r3, #0
 800a460:	600b      	str	r3, [r1, #0]
                            _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	9804      	ldr	r0, [sp, #16]
 800a466:	f7ff fdd1 	bl	800a00c <_nx_dhcp_interface_reinitialize>
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800a46a:	2264      	movs	r2, #100	; 0x64
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800a46c:	2102      	movs	r1, #2
 800a46e:	9803      	ldr	r0, [sp, #12]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 800a470:	2300      	movs	r3, #0
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800a472:	7001      	strb	r1, [r0, #0]
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800a474:	602a      	str	r2, [r5, #0]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 800a476:	9a07      	ldr	r2, [sp, #28]
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	e6cf      	b.n	800a21c <_nx_dhcp_thread_entry+0x164>
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 800a47c:	f1a9 0264 	sub.w	r2, r9, #100	; 0x64
 800a480:	9903      	ldr	r1, [sp, #12]
 800a482:	4413      	add	r3, r2
 800a484:	7809      	ldrb	r1, [r1, #0]
 800a486:	e773      	b.n	800a370 <_nx_dhcp_thread_entry+0x2b8>
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 800a488:	ea4f 0943 	mov.w	r9, r3, lsl #1
                            interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800a48c:	9b07      	ldr	r3, [sp, #28]
 800a48e:	f5b9 5fc8 	cmp.w	r9, #6400	; 0x1900
 800a492:	bf28      	it	cs
 800a494:	f44f 59c8 	movcs.w	r9, #6400	; 0x1900
 800a498:	f8c3 9000 	str.w	r9, [r3]
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 800a49c:	f8c5 9000 	str.w	r9, [r5]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800a4a0:	f014 f900 	bl	801e6a4 <rand>
 800a4a4:	4b3e      	ldr	r3, [pc, #248]	; (800a5a0 <_nx_dhcp_thread_entry+0x4e8>)
 800a4a6:	22c9      	movs	r2, #201	; 0xc9
 800a4a8:	fba3 1300 	umull	r1, r3, r3, r0
 800a4ac:	085b      	lsrs	r3, r3, #1
 800a4ae:	fb02 0313 	mls	r3, r2, r3, r0
    if (adjustment < NX_IP_PERIODIC_RATE)
 800a4b2:	2b63      	cmp	r3, #99	; 0x63
 800a4b4:	d8e2      	bhi.n	800a47c <_nx_dhcp_thread_entry+0x3c4>
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 800a4b6:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800a4ba:	9903      	ldr	r1, [sp, #12]
 800a4bc:	4591      	cmp	r9, r2
 800a4be:	7809      	ldrb	r1, [r1, #0]
 800a4c0:	f67f af22 	bls.w	800a308 <_nx_dhcp_thread_entry+0x250>
 800a4c4:	e751      	b.n	800a36a <_nx_dhcp_thread_entry+0x2b2>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	600b      	str	r3, [r1, #0]
 800a4ca:	e6c1      	b.n	800a250 <_nx_dhcp_thread_entry+0x198>
 800a4cc:	981c      	ldr	r0, [sp, #112]	; 0x70
 800a4ce:	e7a1      	b.n	800a414 <_nx_dhcp_thread_entry+0x35c>
    new_packet_ptr -> nx_packet_length = bytes_copied; 
 800a4d0:	6242      	str	r2, [r0, #36]	; 0x24
    nx_packet_release(packet_ptr);
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	9312      	str	r3, [sp, #72]	; 0x48
 800a4d6:	f7fc fa8b 	bl	80069f0 <_nx_packet_release>
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 800a4da:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 800a4de:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800a4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 800a4e4:	f8dc e008 	ldr.w	lr, [ip, #8]
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 800a4e8:	eb02 0409 	add.w	r4, r2, r9
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 800a4ec:	f8be 101c 	ldrh.w	r1, [lr, #28]
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 800a4f0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800a4f4:	f8de 001e 	ldr.w	r0, [lr, #30]
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 800a4f8:	ba49      	rev16	r1, r1
 800a4fa:	f8d4 4c54 	ldr.w	r4, [r4, #3156]	; 0xc54
 800a4fe:	ba00      	rev	r0, r0
 800a500:	b289      	uxth	r1, r1
 800a502:	42a1      	cmp	r1, r4
 800a504:	f040 80d7 	bne.w	800a6b6 <_nx_dhcp_thread_entry+0x5fe>
    dhcp_client_mac_lsw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 800a508:	444a      	add	r2, r9
 800a50a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 800a50e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a510:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 800a514:	4282      	cmp	r2, r0
 800a516:	f040 80ce 	bne.w	800a6b6 <_nx_dhcp_thread_entry+0x5fe>
        value = (value << 8) | *data++;
 800a51a:	f8be 2004 	ldrh.w	r2, [lr, #4]
 800a51e:	f89e 4006 	ldrb.w	r4, [lr, #6]
 800a522:	ba52      	rev16	r2, r2
 800a524:	f89e 0007 	ldrb.w	r0, [lr, #7]
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 800a528:	6871      	ldr	r1, [r6, #4]
        value = (value << 8) | *data++;
 800a52a:	b292      	uxth	r2, r2
 800a52c:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
 800a530:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 800a534:	4281      	cmp	r1, r0
 800a536:	f040 80be 	bne.w	800a6b6 <_nx_dhcp_thread_entry+0x5fe>
    original_state  = interface_record -> nx_dhcp_state;
 800a53a:	7872      	ldrb	r2, [r6, #1]
 800a53c:	9212      	str	r2, [sp, #72]	; 0x48
    switch (interface_record -> nx_dhcp_state)
 800a53e:	3a03      	subs	r2, #3
 800a540:	2a04      	cmp	r2, #4
 800a542:	d816      	bhi.n	800a572 <_nx_dhcp_thread_entry+0x4ba>
 800a544:	e8df f002 	tbb	[pc, r2]
 800a548:	67152e46 	.word	0x67152e46
 800a54c:	8b          	.byte	0x8b
 800a54d:	00          	.byte	0x00
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 800a54e:	4649      	mov	r1, r9
 800a550:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a552:	69b3      	ldr	r3, [r6, #24]
 800a554:	68f2      	ldr	r2, [r6, #12]
 800a556:	f006 ffe1 	bl	801151c <_nx_ip_interface_address_set>
                    if (interface_record -> nx_dhcp_gateway_address)
 800a55a:	6931      	ldr	r1, [r6, #16]
 800a55c:	b119      	cbz	r1, 800a566 <_nx_dhcp_thread_entry+0x4ae>
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	6898      	ldr	r0, [r3, #8]
 800a562:	f006 ff07 	bl	8011374 <_nx_ip_gateway_address_set>
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 800a566:	2205      	movs	r2, #5
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 800a568:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800a56a:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 800a56e:	7072      	strb	r2, [r6, #1]
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 800a570:	6233      	str	r3, [r6, #32]
    nx_packet_release(new_packet_ptr);
 800a572:	4660      	mov	r0, ip
 800a574:	f7fc fa3c 	bl	80069f0 <_nx_packet_release>
    if (original_state != interface_record -> nx_dhcp_state)
 800a578:	7871      	ldrb	r1, [r6, #1]
 800a57a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a57c:	428b      	cmp	r3, r1
 800a57e:	f43f aefd 	beq.w	800a37c <_nx_dhcp_thread_entry+0x2c4>
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800a582:	9b08      	ldr	r3, [sp, #32]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	b10b      	cbz	r3, 800a58c <_nx_dhcp_thread_entry+0x4d4>
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 800a588:	9804      	ldr	r0, [sp, #16]
 800a58a:	4798      	blx	r3
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800a58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	f43f aef3 	beq.w	800a37c <_nx_dhcp_thread_entry+0x2c4>
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 800a596:	7872      	ldrb	r2, [r6, #1]
 800a598:	9804      	ldr	r0, [sp, #16]
 800a59a:	69f1      	ldr	r1, [r6, #28]
 800a59c:	4798      	blx	r3
 800a59e:	e6ed      	b.n	800a37c <_nx_dhcp_thread_entry+0x2c4>
 800a5a0:	028c1979 	.word	0x028c1979
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 800a5a4:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 800a5a8:	f10e 02f0 	add.w	r2, lr, #240	; 0xf0
 800a5ac:	9d06      	ldr	r5, [sp, #24]
 800a5ae:	f1a4 00f1 	sub.w	r0, r4, #241	; 0xf1
 800a5b2:	9415      	str	r4, [sp, #84]	; 0x54
    while (i < length - 1)
 800a5b4:	4283      	cmp	r3, r0
 800a5b6:	f103 0301 	add.w	r3, r3, #1
 800a5ba:	d209      	bcs.n	800a5d0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800a5bc:	7811      	ldrb	r1, [r2, #0]
 800a5be:	9106      	str	r1, [sp, #24]
 800a5c0:	2900      	cmp	r1, #0
 800a5c2:	d17e      	bne.n	800a6c2 <_nx_dhcp_thread_entry+0x60a>
    while (i < length - 1)
 800a5c4:	4283      	cmp	r3, r0
            data++;
 800a5c6:	f102 0201 	add.w	r2, r2, #1
 800a5ca:	f103 0301 	add.w	r3, r3, #1
    while (i < length - 1)
 800a5ce:	d3f5      	bcc.n	800a5bc <_nx_dhcp_thread_entry+0x504>
 800a5d0:	9506      	str	r5, [sp, #24]
 800a5d2:	e7ce      	b.n	800a572 <_nx_dhcp_thread_entry+0x4ba>
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr -> nx_packet_length);
 800a5d4:	f8dc 9024 	ldr.w	r9, [ip, #36]	; 0x24
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 800a5d8:	f10e 02f0 	add.w	r2, lr, #240	; 0xf0
 800a5dc:	9d06      	ldr	r5, [sp, #24]
 800a5de:	f1a9 00f1 	sub.w	r0, r9, #241	; 0xf1
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	900a      	str	r0, [sp, #40]	; 0x28
    while (i < length - 1)
 800a5e6:	428b      	cmp	r3, r1
 800a5e8:	f103 0301 	add.w	r3, r3, #1
 800a5ec:	d2f0      	bcs.n	800a5d0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800a5ee:	7814      	ldrb	r4, [r2, #0]
 800a5f0:	b944      	cbnz	r4, 800a604 <_nx_dhcp_thread_entry+0x54c>
    while (i < length - 1)
 800a5f2:	428b      	cmp	r3, r1
            data++;
 800a5f4:	f102 0201 	add.w	r2, r2, #1
 800a5f8:	f103 0301 	add.w	r3, r3, #1
    while (i < length - 1)
 800a5fc:	d2e8      	bcs.n	800a5d0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800a5fe:	7814      	ldrb	r4, [r2, #0]
 800a600:	2c00      	cmp	r4, #0
 800a602:	d0f6      	beq.n	800a5f2 <_nx_dhcp_thread_entry+0x53a>
 800a604:	7851      	ldrb	r1, [r2, #1]
        else if (*data == option)
 800a606:	2c35      	cmp	r4, #53	; 0x35
            data += size + 1;
 800a608:	f101 0002 	add.w	r0, r1, #2
 800a60c:	440b      	add	r3, r1
        else if (*data == option)
 800a60e:	d063      	beq.n	800a6d8 <_nx_dhcp_thread_entry+0x620>
            data += size + 1;
 800a610:	4402      	add	r2, r0
 800a612:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a614:	e7e7      	b.n	800a5e6 <_nx_dhcp_thread_entry+0x52e>
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 800a616:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 800a61a:	f10e 02f0 	add.w	r2, lr, #240	; 0xf0
 800a61e:	9d06      	ldr	r5, [sp, #24]
 800a620:	f1a4 00f1 	sub.w	r0, r4, #241	; 0xf1
 800a624:	9415      	str	r4, [sp, #84]	; 0x54
    while (i < length - 1)
 800a626:	4298      	cmp	r0, r3
 800a628:	f103 0301 	add.w	r3, r3, #1
 800a62c:	d9d0      	bls.n	800a5d0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800a62e:	7811      	ldrb	r1, [r2, #0]
 800a630:	9106      	str	r1, [sp, #24]
 800a632:	b949      	cbnz	r1, 800a648 <_nx_dhcp_thread_entry+0x590>
    while (i < length - 1)
 800a634:	4298      	cmp	r0, r3
            data++;
 800a636:	f102 0201 	add.w	r2, r2, #1
 800a63a:	f103 0301 	add.w	r3, r3, #1
    while (i < length - 1)
 800a63e:	d9c7      	bls.n	800a5d0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800a640:	7811      	ldrb	r1, [r2, #0]
 800a642:	9106      	str	r1, [sp, #24]
 800a644:	2900      	cmp	r1, #0
 800a646:	d0f5      	beq.n	800a634 <_nx_dhcp_thread_entry+0x57c>
 800a648:	7851      	ldrb	r1, [r2, #1]
            data += size + 1;
 800a64a:	1c8c      	adds	r4, r1, #2
 800a64c:	440b      	add	r3, r1
 800a64e:	9414      	str	r4, [sp, #80]	; 0x50
        else if (*data == option)
 800a650:	9c06      	ldr	r4, [sp, #24]
 800a652:	2c35      	cmp	r4, #53	; 0x35
 800a654:	f000 80b5 	beq.w	800a7c2 <_nx_dhcp_thread_entry+0x70a>
            data += size + 1;
 800a658:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a65a:	440a      	add	r2, r1
 800a65c:	e7e3      	b.n	800a626 <_nx_dhcp_thread_entry+0x56e>
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 800a65e:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 800a662:	f10e 02f0 	add.w	r2, lr, #240	; 0xf0
 800a666:	9d06      	ldr	r5, [sp, #24]
 800a668:	f1a4 00f1 	sub.w	r0, r4, #241	; 0xf1
 800a66c:	9415      	str	r4, [sp, #84]	; 0x54
    while (i < length - 1)
 800a66e:	4283      	cmp	r3, r0
 800a670:	f103 0301 	add.w	r3, r3, #1
 800a674:	d2ac      	bcs.n	800a5d0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800a676:	7811      	ldrb	r1, [r2, #0]
 800a678:	9106      	str	r1, [sp, #24]
 800a67a:	b949      	cbnz	r1, 800a690 <_nx_dhcp_thread_entry+0x5d8>
    while (i < length - 1)
 800a67c:	4283      	cmp	r3, r0
            data++;
 800a67e:	f102 0201 	add.w	r2, r2, #1
 800a682:	f103 0301 	add.w	r3, r3, #1
    while (i < length - 1)
 800a686:	d2a3      	bcs.n	800a5d0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800a688:	7811      	ldrb	r1, [r2, #0]
 800a68a:	9106      	str	r1, [sp, #24]
 800a68c:	2900      	cmp	r1, #0
 800a68e:	d0f5      	beq.n	800a67c <_nx_dhcp_thread_entry+0x5c4>
 800a690:	7851      	ldrb	r1, [r2, #1]
            data += size + 1;
 800a692:	1c8c      	adds	r4, r1, #2
 800a694:	440b      	add	r3, r1
 800a696:	9414      	str	r4, [sp, #80]	; 0x50
        else if (*data == option)
 800a698:	9c06      	ldr	r4, [sp, #24]
 800a69a:	2c35      	cmp	r4, #53	; 0x35
 800a69c:	d060      	beq.n	800a760 <_nx_dhcp_thread_entry+0x6a8>
            data += size + 1;
 800a69e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a6a0:	440a      	add	r2, r1
 800a6a2:	e7e4      	b.n	800a66e <_nx_dhcp_thread_entry+0x5b6>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800a6a4:	2203      	movs	r2, #3
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	9804      	ldr	r0, [sp, #16]
 800a6aa:	f7fe fd25 	bl	80090f8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 800a6ae:	2304      	movs	r3, #4
 800a6b0:	9a03      	ldr	r2, [sp, #12]
 800a6b2:	7013      	strb	r3, [r2, #0]
 800a6b4:	e640      	b.n	800a338 <_nx_dhcp_thread_entry+0x280>
        nx_packet_release(new_packet_ptr);
 800a6b6:	4660      	mov	r0, ip
 800a6b8:	f7fc f99a 	bl	80069f0 <_nx_packet_release>
 800a6bc:	e65e      	b.n	800a37c <_nx_dhcp_thread_entry+0x2c4>
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 800a6be:	602a      	str	r2, [r5, #0]
 800a6c0:	e5a0      	b.n	800a204 <_nx_dhcp_thread_entry+0x14c>
 800a6c2:	7851      	ldrb	r1, [r2, #1]
            data += size + 1;
 800a6c4:	1c8c      	adds	r4, r1, #2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	9414      	str	r4, [sp, #80]	; 0x50
        else if (*data == option)
 800a6ca:	9c06      	ldr	r4, [sp, #24]
 800a6cc:	2c35      	cmp	r4, #53	; 0x35
 800a6ce:	f000 80a9 	beq.w	800a824 <_nx_dhcp_thread_entry+0x76c>
            data += size + 1;
 800a6d2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a6d4:	440a      	add	r2, r1
 800a6d6:	e76d      	b.n	800a5b4 <_nx_dhcp_thread_entry+0x4fc>
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 800a6d8:	f1a9 00f0 	sub.w	r0, r9, #240	; 0xf0
 800a6dc:	9506      	str	r5, [sp, #24]
            if ((i + size + 1) > length)
 800a6de:	4298      	cmp	r0, r3
 800a6e0:	f4ff af47 	bcc.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
        if (data != NX_NULL)
 800a6e4:	1c54      	adds	r4, r2, #1
 800a6e6:	f43f af44 	beq.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
            if (*data > 4)
 800a6ea:	2904      	cmp	r1, #4
 800a6ec:	f63f af41 	bhi.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
                *value = _nx_dhcp_get_data(data + 1, *data);
 800a6f0:	3202      	adds	r2, #2
    while (size-- > 0)
 800a6f2:	2900      	cmp	r1, #0
 800a6f4:	f43f af3d 	beq.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
 800a6f8:	4411      	add	r1, r2
ULONG   value = 0;
 800a6fa:	2300      	movs	r3, #0
        value = (value << 8) | *data++;
 800a6fc:	f812 0b01 	ldrb.w	r0, [r2], #1
    while (size-- > 0)
 800a700:	428a      	cmp	r2, r1
        value = (value << 8) | *data++;
 800a702:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    while (size-- > 0)
 800a706:	d1f9      	bne.n	800a6fc <_nx_dhcp_thread_entry+0x644>
            if ((status == NX_SUCCESS) && (dhcp_type == NX_DHCP_TYPE_DHCPOFFER))
 800a708:	2b02      	cmp	r3, #2
 800a70a:	9506      	str	r5, [sp, #24]
 800a70c:	f47f af31 	bne.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
                interface_record -> nx_dhcp_offers_received++;
 800a710:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a714:	464b      	mov	r3, r9
 800a716:	4672      	mov	r2, lr
 800a718:	4631      	mov	r1, r6
                interface_record -> nx_dhcp_offers_received++;
 800a71a:	1c44      	adds	r4, r0, #1
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a71c:	9813      	ldr	r0, [sp, #76]	; 0x4c
                interface_record -> nx_dhcp_offers_received++;
 800a71e:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a722:	f7ff fac9 	bl	8009cb8 <_nx_dhcp_extract_information.isra.1>
 800a726:	2800      	cmp	r0, #0
 800a728:	f040 80a6 	bne.w	800a878 <_nx_dhcp_thread_entry+0x7c0>
                _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800a72c:	2203      	movs	r2, #3
 800a72e:	4631      	mov	r1, r6
 800a730:	9804      	ldr	r0, [sp, #16]
 800a732:	f7fe fce1 	bl	80090f8 <_nx_dhcp_send_request_internal>
                interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 800a736:	f44f 73c8 	mov.w	r3, #400	; 0x190
                interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 800a73a:	e9c6 3308 	strd	r3, r3, [r6, #32]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800a73e:	f013 ffb1 	bl	801e6a4 <rand>
 800a742:	4b5e      	ldr	r3, [pc, #376]	; (800a8bc <_nx_dhcp_thread_entry+0x804>)
 800a744:	22c9      	movs	r2, #201	; 0xc9
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 800a746:	2104      	movs	r1, #4
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800a748:	fba3 4300 	umull	r4, r3, r3, r0
 800a74c:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 800a750:	7071      	strb	r1, [r6, #1]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800a752:	085b      	lsrs	r3, r3, #1
 800a754:	fb02 0313 	mls	r3, r2, r3, r0
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 800a758:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 800a75c:	6233      	str	r3, [r6, #32]
 800a75e:	e708      	b.n	800a572 <_nx_dhcp_thread_entry+0x4ba>
 800a760:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a762:	9506      	str	r5, [sp, #24]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 800a764:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
            if ((i + size + 1) > length)
 800a768:	4298      	cmp	r0, r3
 800a76a:	f4ff af02 	bcc.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
        if (data != NX_NULL)
 800a76e:	1c50      	adds	r0, r2, #1
 800a770:	f43f aeff 	beq.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
            if (*data > 4)
 800a774:	2904      	cmp	r1, #4
 800a776:	f63f aefc 	bhi.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
                *value = _nx_dhcp_get_data(data + 1, *data);
 800a77a:	3202      	adds	r2, #2
    while (size-- > 0)
 800a77c:	2900      	cmp	r1, #0
 800a77e:	f43f aef8 	beq.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
 800a782:	4411      	add	r1, r2
ULONG   value = 0;
 800a784:	2300      	movs	r3, #0
        value = (value << 8) | *data++;
 800a786:	f812 0b01 	ldrb.w	r0, [r2], #1
    while (size-- > 0)
 800a78a:	428a      	cmp	r2, r1
        value = (value << 8) | *data++;
 800a78c:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    while (size-- > 0)
 800a790:	d1f9      	bne.n	800a786 <_nx_dhcp_thread_entry+0x6ce>
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 800a792:	2b05      	cmp	r3, #5
 800a794:	9506      	str	r5, [sp, #24]
 800a796:	d072      	beq.n	800a87e <_nx_dhcp_thread_entry+0x7c6>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 800a798:	2b06      	cmp	r3, #6
 800a79a:	f47f aeea 	bne.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
                    interface_record -> nx_dhcp_nacks_received++;
 800a79e:	f8d6 3198 	ldr.w	r3, [r6, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800a7a2:	69f1      	ldr	r1, [r6, #28]
                    interface_record -> nx_dhcp_nacks_received++;
 800a7a4:	3301      	adds	r3, #1
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800a7a6:	9804      	ldr	r0, [sp, #16]
                    interface_record -> nx_dhcp_nacks_received++;
 800a7a8:	f8c6 3198 	str.w	r3, [r6, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800a7ac:	f7ff fc2e 	bl	800a00c <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800a7b0:	2202      	movs	r2, #2
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800a7b2:	2364      	movs	r3, #100	; 0x64
                    interface_record -> nx_dhcp_rtr_interval = 0;
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800a7ba:	6271      	str	r1, [r6, #36]	; 0x24
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800a7bc:	7072      	strb	r2, [r6, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800a7be:	6233      	str	r3, [r6, #32]
 800a7c0:	e6d7      	b.n	800a572 <_nx_dhcp_thread_entry+0x4ba>
 800a7c2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a7c4:	9506      	str	r5, [sp, #24]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 800a7c6:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
            if ((i + size + 1) > length)
 800a7ca:	4298      	cmp	r0, r3
 800a7cc:	f4ff aed1 	bcc.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
        if (data != NX_NULL)
 800a7d0:	1c53      	adds	r3, r2, #1
 800a7d2:	f43f aece 	beq.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
            if (*data > 4)
 800a7d6:	2904      	cmp	r1, #4
 800a7d8:	f63f aecb 	bhi.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
                *value = _nx_dhcp_get_data(data + 1, *data);
 800a7dc:	3202      	adds	r2, #2
    while (size-- > 0)
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	f43f aec7 	beq.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
 800a7e4:	4411      	add	r1, r2
ULONG   value = 0;
 800a7e6:	2300      	movs	r3, #0
        value = (value << 8) | *data++;
 800a7e8:	f812 0b01 	ldrb.w	r0, [r2], #1
    while (size-- > 0)
 800a7ec:	428a      	cmp	r2, r1
        value = (value << 8) | *data++;
 800a7ee:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    while (size-- > 0)
 800a7f2:	d1f9      	bne.n	800a7e8 <_nx_dhcp_thread_entry+0x730>
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 800a7f4:	2b05      	cmp	r3, #5
 800a7f6:	9506      	str	r5, [sp, #24]
 800a7f8:	d041      	beq.n	800a87e <_nx_dhcp_thread_entry+0x7c6>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 800a7fa:	2b06      	cmp	r3, #6
 800a7fc:	f47f aeb9 	bne.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
                    interface_record -> nx_dhcp_nacks_received++;
 800a800:	f8d6 3198 	ldr.w	r3, [r6, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800a804:	69f1      	ldr	r1, [r6, #28]
                    interface_record -> nx_dhcp_nacks_received++;
 800a806:	3301      	adds	r3, #1
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800a808:	9804      	ldr	r0, [sp, #16]
                    interface_record -> nx_dhcp_nacks_received++;
 800a80a:	f8c6 3198 	str.w	r3, [r6, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800a80e:	f7ff fbfd 	bl	800a00c <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800a812:	2202      	movs	r2, #2
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800a814:	2364      	movs	r3, #100	; 0x64
                    interface_record -> nx_dhcp_rtr_interval = 0;
 800a816:	2100      	movs	r1, #0
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800a818:	7072      	strb	r2, [r6, #1]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 800a81a:	6271      	str	r1, [r6, #36]	; 0x24
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800a81c:	6233      	str	r3, [r6, #32]
 800a81e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800a822:	e6a6      	b.n	800a572 <_nx_dhcp_thread_entry+0x4ba>
 800a824:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a826:	9506      	str	r5, [sp, #24]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 800a828:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
            if ((i + size + 1) > length)
 800a82c:	4298      	cmp	r0, r3
 800a82e:	f4ff aea0 	bcc.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
        if (data != NX_NULL)
 800a832:	1c50      	adds	r0, r2, #1
 800a834:	f43f ae9d 	beq.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
            if (*data > 4)
 800a838:	2904      	cmp	r1, #4
 800a83a:	f63f ae9a 	bhi.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
                *value = _nx_dhcp_get_data(data + 1, *data);
 800a83e:	3202      	adds	r2, #2
    while (size-- > 0)
 800a840:	2900      	cmp	r1, #0
 800a842:	f43f ae96 	beq.w	800a572 <_nx_dhcp_thread_entry+0x4ba>
 800a846:	4411      	add	r1, r2
ULONG   value = 0;
 800a848:	2300      	movs	r3, #0
        value = (value << 8) | *data++;
 800a84a:	f812 0b01 	ldrb.w	r0, [r2], #1
    while (size-- > 0)
 800a84e:	4291      	cmp	r1, r2
        value = (value << 8) | *data++;
 800a850:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    while (size-- > 0)
 800a854:	d1f9      	bne.n	800a84a <_nx_dhcp_thread_entry+0x792>
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 800a856:	2b05      	cmp	r3, #5
 800a858:	9506      	str	r5, [sp, #24]
 800a85a:	d1ce      	bne.n	800a7fa <_nx_dhcp_thread_entry+0x742>
                    interface_record -> nx_dhcp_acks_received++;
 800a85c:	f8d6 0194 	ldr.w	r0, [r6, #404]	; 0x194
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a860:	4623      	mov	r3, r4
 800a862:	4672      	mov	r2, lr
 800a864:	4631      	mov	r1, r6
                    interface_record -> nx_dhcp_acks_received++;
 800a866:	1c44      	adds	r4, r0, #1
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a868:	9813      	ldr	r0, [sp, #76]	; 0x4c
                    interface_record -> nx_dhcp_acks_received++;
 800a86a:	f8c6 4194 	str.w	r4, [r6, #404]	; 0x194
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a86e:	f7ff fa23 	bl	8009cb8 <_nx_dhcp_extract_information.isra.1>
 800a872:	2800      	cmp	r0, #0
 800a874:	f43f ae6b 	beq.w	800a54e <_nx_dhcp_thread_entry+0x496>
 800a878:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800a87c:	e679      	b.n	800a572 <_nx_dhcp_thread_entry+0x4ba>
                    interface_record -> nx_dhcp_acks_received++;
 800a87e:	f8d6 0194 	ldr.w	r0, [r6, #404]	; 0x194
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a882:	4623      	mov	r3, r4
 800a884:	4672      	mov	r2, lr
 800a886:	4631      	mov	r1, r6
                    interface_record -> nx_dhcp_acks_received++;
 800a888:	1c44      	adds	r4, r0, #1
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a88a:	9813      	ldr	r0, [sp, #76]	; 0x4c
                    interface_record -> nx_dhcp_acks_received++;
 800a88c:	f8c6 4194 	str.w	r4, [r6, #404]	; 0x194
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800a890:	f7ff fa12 	bl	8009cb8 <_nx_dhcp_extract_information.isra.1>
 800a894:	2800      	cmp	r0, #0
 800a896:	d1ef      	bne.n	800a878 <_nx_dhcp_thread_entry+0x7c0>
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 800a898:	4649      	mov	r1, r9
 800a89a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a89c:	69b3      	ldr	r3, [r6, #24]
 800a89e:	68f2      	ldr	r2, [r6, #12]
 800a8a0:	f006 fe3c 	bl	801151c <_nx_ip_interface_address_set>
                    if (interface_record -> nx_dhcp_gateway_address)
 800a8a4:	6931      	ldr	r1, [r6, #16]
 800a8a6:	b119      	cbz	r1, 800a8b0 <_nx_dhcp_thread_entry+0x7f8>
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 800a8a8:	9b04      	ldr	r3, [sp, #16]
 800a8aa:	6898      	ldr	r0, [r3, #8]
 800a8ac:	f006 fd62 	bl	8011374 <_nx_ip_gateway_address_set>
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 800a8b0:	6b32      	ldr	r2, [r6, #48]	; 0x30
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 800a8b2:	2305      	movs	r3, #5
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 800a8b4:	6232      	str	r2, [r6, #32]
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 800a8b6:	7073      	strb	r3, [r6, #1]
 800a8b8:	e7de      	b.n	800a878 <_nx_dhcp_thread_entry+0x7c0>
 800a8ba:	bf00      	nop
 800a8bc:	028c1979 	.word	0x028c1979

0800a8c0 <_nx_dhcp_start>:
{
 800a8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 800a8c4:	f641 59a8 	movw	r9, #7592	; 0x1da8
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a8c8:	f500 55e9 	add.w	r5, r0, #7456	; 0x1d20
{
 800a8cc:	4604      	mov	r4, r0
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a8ce:	f04f 31ff 	mov.w	r1, #4294967295
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 800a8d2:	eb00 0709 	add.w	r7, r0, r9
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f013 f90c 	bl	801daf4 <_txe_mutex_get>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 800a8dc:	f814 3009 	ldrb.w	r3, [r4, r9]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d134      	bne.n	800a94e <_nx_dhcp_start+0x8e>
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 800a8e4:	f641 56c4 	movw	r6, #7620	; 0x1dc4
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a8e8:	f04f 31ff 	mov.w	r1, #4294967295
 800a8ec:	4628      	mov	r0, r5
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 800a8ee:	f854 8006 	ldr.w	r8, [r4, r6]
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800a8f2:	f013 f8ff 	bl	801daf4 <_txe_mutex_get>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 800a8f6:	f814 3009 	ldrb.w	r3, [r4, r9]
 800a8fa:	b32b      	cbz	r3, 800a948 <_nx_dhcp_start+0x88>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 800a8fc:	59a3      	ldr	r3, [r4, r6]
 800a8fe:	4598      	cmp	r8, r3
 800a900:	d122      	bne.n	800a948 <_nx_dhcp_start+0x88>
    if (interface_record -> nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED)
 800a902:	787b      	ldrb	r3, [r7, #1]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d143      	bne.n	800a990 <_nx_dhcp_start+0xd0>
        status =  nx_udp_socket_bind(&(dhcp_ptr -> nx_dhcp_socket), NX_DHCP_CLIENT_UDP_PORT, NX_WAIT_FOREVER);
 800a908:	f604 38dc 	addw	r8, r4, #3036	; 0xbdc
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295
 800a910:	2144      	movs	r1, #68	; 0x44
 800a912:	4640      	mov	r0, r8
 800a914:	f7fe f91c 	bl	8008b50 <_nx_udp_socket_bind>
        if (status != NX_SUCCESS)
 800a918:	4606      	mov	r6, r0
 800a91a:	b950      	cbnz	r0, 800a932 <_nx_dhcp_start+0x72>
        status = tx_thread_resume(&(dhcp_ptr -> nx_dhcp_thread));
 800a91c:	f604 4058 	addw	r0, r4, #3160	; 0xc58
 800a920:	f013 fa2c 	bl	801dd7c <_txe_thread_resume>
        if ((status != TX_SUCCESS) && (status != TX_SUSPEND_LIFTED))
 800a924:	4606      	mov	r6, r0
 800a926:	b1c0      	cbz	r0, 800a95a <_nx_dhcp_start+0x9a>
 800a928:	2819      	cmp	r0, #25
 800a92a:	d016      	beq.n	800a95a <_nx_dhcp_start+0x9a>
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 800a92c:	4640      	mov	r0, r8
 800a92e:	f7fe fb11 	bl	8008f54 <_nx_udp_socket_unbind>
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a932:	4628      	mov	r0, r5
 800a934:	f013 f912 	bl	801db5c <_txe_mutex_put>
             if ((status == NX_SUCCESS) || (status == NX_DHCP_ALREADY_STARTED))
 800a938:	2e93      	cmp	r6, #147	; 0x93
 800a93a:	d108      	bne.n	800a94e <_nx_dhcp_start+0x8e>
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a93c:	4628      	mov	r0, r5
 800a93e:	f013 f90d 	bl	801db5c <_txe_mutex_put>
    return(NX_SUCCESS);  
 800a942:	2000      	movs	r0, #0
}
 800a944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a948:	4628      	mov	r0, r5
 800a94a:	f013 f907 	bl	801db5c <_txe_mutex_put>
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a94e:	4628      	mov	r0, r5
 800a950:	f013 f904 	bl	801db5c <_txe_mutex_put>
        return NX_DHCP_NO_INTERFACES_STARTED;
 800a954:	20a6      	movs	r0, #166	; 0xa6
}
 800a956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        status = tx_timer_activate(&(dhcp_ptr -> nx_dhcp_timer));
 800a95a:	f641 507c 	movw	r0, #7548	; 0x1d7c
 800a95e:	4420      	add	r0, r4
 800a960:	f013 fa3a 	bl	801ddd8 <_txe_timer_activate>
        if (status != NX_SUCCESS)
 800a964:	4606      	mov	r6, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	d1e0      	bne.n	800a92c <_nx_dhcp_start+0x6c>
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800a96a:	2102      	movs	r1, #2
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800a96c:	f641 7358 	movw	r3, #8024	; 0x1f58
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800a970:	2264      	movs	r2, #100	; 0x64
    interface_record -> nx_dhcp_rtr_interval = 0;
 800a972:	6278      	str	r0, [r7, #36]	; 0x24
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800a974:	7079      	strb	r1, [r7, #1]
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800a976:	58e3      	ldr	r3, [r4, r3]
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800a978:	623a      	str	r2, [r7, #32]
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800a97a:	b10b      	cbz	r3, 800a980 <_nx_dhcp_start+0xc0>
        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 800a97c:	4620      	mov	r0, r4
 800a97e:	4798      	blx	r3
    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800a980:	f641 735c 	movw	r3, #8028	; 0x1f5c
 800a984:	58e3      	ldr	r3, [r4, r3]
 800a986:	b11b      	cbz	r3, 800a990 <_nx_dhcp_start+0xd0>
        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 800a988:	4620      	mov	r0, r4
 800a98a:	787a      	ldrb	r2, [r7, #1]
 800a98c:	69f9      	ldr	r1, [r7, #28]
 800a98e:	4798      	blx	r3
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800a990:	4628      	mov	r0, r5
 800a992:	f013 f8e3 	bl	801db5c <_txe_mutex_put>
 800a996:	e7d1      	b.n	800a93c <_nx_dhcp_start+0x7c>

0800a998 <_nx_http_server_connection_present>:
NX_HTTP_SERVER *server_ptr;

    NX_PARAMETER_NOT_USED(port);

    /* Pickup the server pointer.  */
    server_ptr =  (NX_HTTP_SERVER *) socket_ptr -> nx_tcp_socket_reserved_ptr;
 800a998:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130

    /* Set the connection pending flag.  */
    server_ptr -> nx_http_connection_pending =  NX_TRUE;
 800a99c:	2201      	movs	r2, #1

    /* Resume the HTTP Server thread.  */
    tx_thread_resume(&(server_ptr -> nx_http_server_thread));
 800a99e:	f503 7066 	add.w	r0, r3, #920	; 0x398
    server_ptr -> nx_http_connection_pending =  NX_TRUE;
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
    tx_thread_resume(&(server_ptr -> nx_http_server_thread));
 800a9a4:	f013 b9ea 	b.w	801dd7c <_txe_thread_resume>

0800a9a8 <_nx_http_server_retrieve_resource.constprop.6>:
UINT    i;
CHAR    *buffer_ptr;


    /* Set the destination to NULL.  */
    destination[0] =  (CHAR) 0;
 800a9a8:	2300      	movs	r3, #0
UINT  _nx_http_server_retrieve_resource(NX_PACKET *packet_ptr, CHAR *destination, UINT max_size)
 800a9aa:	b4f0      	push	{r4, r5, r6, r7}
    destination[0] =  (CHAR) 0;
 800a9ac:	700b      	strb	r3, [r1, #0]

    /* Setup pointer to buffer.  */
    buffer_ptr =  (CHAR *) packet_ptr -> nx_packet_prepend_ptr;

    /* Find the first space which is the start position of URI. */
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800a9ae:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800a9b2:	42a2      	cmp	r2, r4
 800a9b4:	d20c      	bcs.n	800a9d0 <_nx_http_server_retrieve_resource.constprop.6+0x28>
 800a9b6:	7813      	ldrb	r3, [r2, #0]
 800a9b8:	2b20      	cmp	r3, #32
 800a9ba:	d00c      	beq.n	800a9d6 <_nx_http_server_retrieve_resource.constprop.6+0x2e>
 800a9bc:	1c53      	adds	r3, r2, #1
 800a9be:	e002      	b.n	800a9c6 <_nx_http_server_retrieve_resource.constprop.6+0x1e>
 800a9c0:	7815      	ldrb	r5, [r2, #0]
 800a9c2:	2d20      	cmp	r5, #32
 800a9c4:	d007      	beq.n	800a9d6 <_nx_http_server_retrieve_resource.constprop.6+0x2e>
 800a9c6:	429c      	cmp	r4, r3
    {

        /* Move the pointer up to the next character.  */
        buffer_ptr++;
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	f103 0301 	add.w	r3, r3, #1
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800a9ce:	d1f7      	bne.n	800a9c0 <_nx_http_server_retrieve_resource.constprop.6+0x18>
    }

    /* Check for an error condition.  */
    if (buffer_ptr >= (CHAR *) packet_ptr -> nx_packet_append_ptr)
        return(NX_HTTP_ERROR);
 800a9d0:	20e0      	movs	r0, #224	; 0xe0
    /* Everything is okay, place a NULL at the end of the resource.  */
    destination[i] =  (CHAR) 0;

    /* Return success.  */
    return(NX_SUCCESS);
}
 800a9d2:	bcf0      	pop	{r4, r5, r6, r7}
 800a9d4:	4770      	bx	lr
    if ((buffer_ptr + 7 < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800a9d6:	f102 0508 	add.w	r5, r2, #8
    buffer_ptr++;
 800a9da:	1c53      	adds	r3, r2, #1
    if ((buffer_ptr + 7 < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800a9dc:	42a5      	cmp	r5, r4
 800a9de:	d22d      	bcs.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
 800a9e0:	7856      	ldrb	r6, [r2, #1]
 800a9e2:	2e2f      	cmp	r6, #47	; 0x2f
 800a9e4:	d02a      	beq.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
        if (((*buffer_ptr == 'h') || (*buffer_ptr == 'H')) &&
 800a9e6:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800a9ea:	2e48      	cmp	r6, #72	; 0x48
 800a9ec:	d126      	bne.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
            ((*(buffer_ptr + 1) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800a9ee:	7896      	ldrb	r6, [r2, #2]
        if (((*buffer_ptr == 'h') || (*buffer_ptr == 'H')) &&
 800a9f0:	f006 07df 	and.w	r7, r6, #223	; 0xdf
 800a9f4:	2f54      	cmp	r7, #84	; 0x54
 800a9f6:	d121      	bne.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
            ((*(buffer_ptr + 1) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800a9f8:	78d7      	ldrb	r7, [r2, #3]
            ((*(buffer_ptr + 2) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800a9fa:	2f74      	cmp	r7, #116	; 0x74
 800a9fc:	d001      	beq.n	800aa02 <_nx_http_server_retrieve_resource.constprop.6+0x5a>
 800a9fe:	2e54      	cmp	r6, #84	; 0x54
 800aa00:	d11c      	bne.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
            ((*(buffer_ptr + 3) == 'p') || (*(buffer_ptr + 1) == 'P')) &&
 800aa02:	7916      	ldrb	r6, [r2, #4]
 800aa04:	2e70      	cmp	r6, #112	; 0x70
 800aa06:	d119      	bne.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
 800aa08:	7956      	ldrb	r6, [r2, #5]
 800aa0a:	2e3a      	cmp	r6, #58	; 0x3a
 800aa0c:	d116      	bne.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
            (*(buffer_ptr + 4) == ':') &&
 800aa0e:	7996      	ldrb	r6, [r2, #6]
 800aa10:	2e2f      	cmp	r6, #47	; 0x2f
 800aa12:	d113      	bne.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
            (*(buffer_ptr + 5) == '/') &&
 800aa14:	79d6      	ldrb	r6, [r2, #7]
 800aa16:	2e2f      	cmp	r6, #47	; 0x2f
 800aa18:	d110      	bne.n	800aa3c <_nx_http_server_retrieve_resource.constprop.6+0x94>
            while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != '/'))
 800aa1a:	7a13      	ldrb	r3, [r2, #8]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d06c      	beq.n	800aafa <_nx_http_server_retrieve_resource.constprop.6+0x152>
 800aa20:	2b2f      	cmp	r3, #47	; 0x2f
 800aa22:	d06a      	beq.n	800aafa <_nx_http_server_retrieve_resource.constprop.6+0x152>
 800aa24:	3209      	adds	r2, #9
 800aa26:	e005      	b.n	800aa34 <_nx_http_server_retrieve_resource.constprop.6+0x8c>
 800aa28:	f812 3b01 	ldrb.w	r3, [r2], #1
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d064      	beq.n	800aafa <_nx_http_server_retrieve_resource.constprop.6+0x152>
 800aa30:	2b2f      	cmp	r3, #47	; 0x2f
 800aa32:	d062      	beq.n	800aafa <_nx_http_server_retrieve_resource.constprop.6+0x152>
 800aa34:	42a2      	cmp	r2, r4
                buffer_ptr++;
 800aa36:	4615      	mov	r5, r2
            while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != '/'))
 800aa38:	d3f6      	bcc.n	800aa28 <_nx_http_server_retrieve_resource.constprop.6+0x80>
 800aa3a:	e7c9      	b.n	800a9d0 <_nx_http_server_retrieve_resource.constprop.6+0x28>
    if ((buffer_ptr >= (CHAR *) packet_ptr -> nx_packet_append_ptr) || (*buffer_ptr != '/'))
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	d2c7      	bcs.n	800a9d0 <_nx_http_server_retrieve_resource.constprop.6+0x28>
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	2a2f      	cmp	r2, #47	; 0x2f
 800aa44:	d1c4      	bne.n	800a9d0 <_nx_http_server_retrieve_resource.constprop.6+0x28>
 800aa46:	2500      	movs	r5, #0
 800aa48:	e006      	b.n	800aa58 <_nx_http_server_retrieve_resource.constprop.6+0xb0>
            destination[i++] =  *buffer_ptr++;
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	554a      	strb	r2, [r1, r5]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' ') && (*buffer_ptr != ';') && (*buffer_ptr != '?') && (i < (max_size-1)))
 800aa4e:	68c4      	ldr	r4, [r0, #12]
 800aa50:	3501      	adds	r5, #1
 800aa52:	429c      	cmp	r4, r3
 800aa54:	d946      	bls.n	800aae4 <_nx_http_server_retrieve_resource.constprop.6+0x13c>
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	f002 06fb 	and.w	r6, r2, #251	; 0xfb
 800aa5c:	2e3b      	cmp	r6, #59	; 0x3b
 800aa5e:	d046      	beq.n	800aaee <_nx_http_server_retrieve_resource.constprop.6+0x146>
 800aa60:	2a20      	cmp	r2, #32
 800aa62:	d044      	beq.n	800aaee <_nx_http_server_retrieve_resource.constprop.6+0x146>
 800aa64:	2d28      	cmp	r5, #40	; 0x28
 800aa66:	d03d      	beq.n	800aae4 <_nx_http_server_retrieve_resource.constprop.6+0x13c>
        if(*buffer_ptr == '%')
 800aa68:	2a25      	cmp	r2, #37	; 0x25
 800aa6a:	d1ee      	bne.n	800aa4a <_nx_http_server_retrieve_resource.constprop.6+0xa2>
            if((buffer_ptr + 2) < (CHAR *)packet_ptr -> nx_packet_append_ptr)
 800aa6c:	1c9a      	adds	r2, r3, #2
 800aa6e:	4294      	cmp	r4, r2
 800aa70:	d938      	bls.n	800aae4 <_nx_http_server_retrieve_resource.constprop.6+0x13c>
                if((*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800aa72:	785c      	ldrb	r4, [r3, #1]
 800aa74:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	2a09      	cmp	r2, #9
 800aa7c:	d80e      	bhi.n	800aa9c <_nx_http_server_retrieve_resource.constprop.6+0xf4>
 800aa7e:	194e      	adds	r6, r1, r5
                    destination[i] = (CHAR)(*buffer_ptr - '0');
 800aa80:	554a      	strb	r2, [r1, r5]
                destination[i] = (CHAR)(destination[i] << 4);
 800aa82:	0112      	lsls	r2, r2, #4
 800aa84:	b2d2      	uxtb	r2, r2
 800aa86:	7032      	strb	r2, [r6, #0]
                if((*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800aa88:	789f      	ldrb	r7, [r3, #2]
 800aa8a:	f1a7 0430 	sub.w	r4, r7, #48	; 0x30
 800aa8e:	b2e4      	uxtb	r4, r4
 800aa90:	2c09      	cmp	r4, #9
 800aa92:	d811      	bhi.n	800aab8 <_nx_http_server_retrieve_resource.constprop.6+0x110>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - '0'));
 800aa94:	4422      	add	r2, r4
 800aa96:	7032      	strb	r2, [r6, #0]
                buffer_ptr++;
 800aa98:	3303      	adds	r3, #3
 800aa9a:	e7d8      	b.n	800aa4e <_nx_http_server_retrieve_resource.constprop.6+0xa6>
                else if((*buffer_ptr >= 'a') && (*buffer_ptr <= 'f'))
 800aa9c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800aaa0:	2a05      	cmp	r2, #5
 800aaa2:	d915      	bls.n	800aad0 <_nx_http_server_retrieve_resource.constprop.6+0x128>
                else if((*buffer_ptr >= 'A') && (*buffer_ptr <= 'F'))
 800aaa4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800aaa8:	2a05      	cmp	r2, #5
 800aaaa:	d81b      	bhi.n	800aae4 <_nx_http_server_retrieve_resource.constprop.6+0x13c>
                    destination[i] = (CHAR)(*buffer_ptr - 'A' + 10);
 800aaac:	f1a4 0237 	sub.w	r2, r4, #55	; 0x37
 800aab0:	194e      	adds	r6, r1, r5
 800aab2:	b2d2      	uxtb	r2, r2
 800aab4:	554a      	strb	r2, [r1, r5]
 800aab6:	e7e4      	b.n	800aa82 <_nx_http_server_retrieve_resource.constprop.6+0xda>
                else if((*buffer_ptr >= 'a') && (*buffer_ptr <= 'f'))
 800aab8:	f1a7 0461 	sub.w	r4, r7, #97	; 0x61
 800aabc:	2c05      	cmp	r4, #5
 800aabe:	d90d      	bls.n	800aadc <_nx_http_server_retrieve_resource.constprop.6+0x134>
                else if((*buffer_ptr >= 'A') && (*buffer_ptr <= 'F'))
 800aac0:	f1a7 0441 	sub.w	r4, r7, #65	; 0x41
 800aac4:	2c05      	cmp	r4, #5
 800aac6:	d80d      	bhi.n	800aae4 <_nx_http_server_retrieve_resource.constprop.6+0x13c>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - 'A' + 10));
 800aac8:	3f37      	subs	r7, #55	; 0x37
 800aaca:	443a      	add	r2, r7
 800aacc:	7032      	strb	r2, [r6, #0]
 800aace:	e7e3      	b.n	800aa98 <_nx_http_server_retrieve_resource.constprop.6+0xf0>
                    destination[i] = (CHAR)(*buffer_ptr - 'a' + 10);
 800aad0:	f1a4 0257 	sub.w	r2, r4, #87	; 0x57
 800aad4:	194e      	adds	r6, r1, r5
 800aad6:	b2d2      	uxtb	r2, r2
 800aad8:	554a      	strb	r2, [r1, r5]
 800aada:	e7d2      	b.n	800aa82 <_nx_http_server_retrieve_resource.constprop.6+0xda>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - 'a' + 10));
 800aadc:	3f57      	subs	r7, #87	; 0x57
 800aade:	443a      	add	r2, r7
 800aae0:	7032      	strb	r2, [r6, #0]
 800aae2:	e7d9      	b.n	800aa98 <_nx_http_server_retrieve_resource.constprop.6+0xf0>
                    destination[0] =  (CHAR) 0;
 800aae4:	2300      	movs	r3, #0
                    return(NX_HTTP_ERROR);
 800aae6:	20e0      	movs	r0, #224	; 0xe0
                    destination[0] =  (CHAR) 0;
 800aae8:	700b      	strb	r3, [r1, #0]
}
 800aaea:	bcf0      	pop	{r4, r5, r6, r7}
 800aaec:	4770      	bx	lr
    if ((destination[0] == (CHAR) 0) || (buffer_ptr >= (CHAR *)packet_ptr -> nx_packet_append_ptr) || ((*buffer_ptr != ' ') && (*buffer_ptr != '?') && (*buffer_ptr != ';')))
 800aaee:	780b      	ldrb	r3, [r1, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d0f7      	beq.n	800aae4 <_nx_http_server_retrieve_resource.constprop.6+0x13c>
    destination[i] =  (CHAR) 0;
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	5548      	strb	r0, [r1, r5]
 800aaf8:	e76b      	b.n	800a9d2 <_nx_http_server_retrieve_resource.constprop.6+0x2a>
UINT  _nx_http_server_retrieve_resource(NX_PACKET *packet_ptr, CHAR *destination, UINT max_size)
 800aafa:	462b      	mov	r3, r5
 800aafc:	e7a0      	b.n	800aa40 <_nx_http_server_retrieve_resource.constprop.6+0x98>
 800aafe:	bf00      	nop

0800ab00 <_nx_http_server_type_get_extended.part.1>:
/*    DATE              NAME                      DESCRIPTION             */
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_http_server_type_get_extended(NX_HTTP_SERVER *server_ptr, CHAR *name, UINT name_length, CHAR *http_type_string, UINT http_type_string_max_size)
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ch = name + name_length;

    /* Now look backwards to find the last period that signals the
       file extension.  */
    ext_length = 0;
    while ((ch >= name) && (*ch != '.') &&(*ch != '/'))
 800ab04:	188d      	adds	r5, r1, r2
UINT  _nx_http_server_type_get_extended(NX_HTTP_SERVER *server_ptr, CHAR *name, UINT name_length, CHAR *http_type_string, UINT http_type_string_max_size)
 800ab06:	b085      	sub	sp, #20
 800ab08:	4607      	mov	r7, r0
 800ab0a:	5c88      	ldrb	r0, [r1, r2]
 800ab0c:	9301      	str	r3, [sp, #4]
    while ((ch >= name) && (*ch != '.') &&(*ch != '/'))
 800ab0e:	f080 80d4 	bcs.w	800acba <_nx_http_server_type_get_extended.part.1+0x1ba>
 800ab12:	f1a0 032e 	sub.w	r3, r0, #46	; 0x2e
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	f240 80cf 	bls.w	800acba <_nx_http_server_type_get_extended.part.1+0x1ba>
 800ab1c:	1e6b      	subs	r3, r5, #1
 800ab1e:	3201      	adds	r2, #1
 800ab20:	2401      	movs	r4, #1
 800ab22:	e000      	b.n	800ab26 <_nx_http_server_type_get_extended.part.1+0x26>
 800ab24:	4634      	mov	r4, r6
    {
        ch--;
 800ab26:	461d      	mov	r5, r3
    while ((ch >= name) && (*ch != '.') &&(*ch != '/'))
 800ab28:	42a2      	cmp	r2, r4
 800ab2a:	f813 0901 	ldrb.w	r0, [r3], #-1
 800ab2e:	f104 0601 	add.w	r6, r4, #1
 800ab32:	f1a0 012e 	sub.w	r1, r0, #46	; 0x2e
 800ab36:	d001      	beq.n	800ab3c <_nx_http_server_type_get_extended.part.1+0x3c>
 800ab38:	2901      	cmp	r1, #1
 800ab3a:	d8f3      	bhi.n	800ab24 <_nx_http_server_type_get_extended.part.1+0x24>
        ext_length++;
    }

    if(*ch != '.')
 800ab3c:	282e      	cmp	r0, #46	; 0x2e
 800ab3e:	d008      	beq.n	800ab52 <_nx_http_server_type_get_extended.part.1+0x52>
    {

        /* No extension is found. Return the default mime type. */
        if(http_type_string_max_size < (sizeof(NX_HTTP_SERVER_DEFAULT_MIME)))
 800ab40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab42:	2b0a      	cmp	r3, #10
 800ab44:	f200 80ab 	bhi.w	800ac9e <_nx_http_server_type_get_extended.part.1+0x19e>
        {
            /* NX_HTTP_SERVER_DEFAULT_MIME does not fit into 
               the caller-supplied http_type_string. */
            return (0);
 800ab48:	2400      	movs	r4, #0
    }

    /* return the default MIME type. */
    memcpy(http_type_string, NX_HTTP_SERVER_DEFAULT_MIME, sizeof(NX_HTTP_SERVER_DEFAULT_MIME));
    return(sizeof(NX_HTTP_SERVER_DEFAULT_MIME) - 1);
}
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	b005      	add	sp, #20
 800ab4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(server_ptr -> nx_http_server_mime_maps_additional &&
 800ab52:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
    ext_length--;
 800ab56:	3c01      	subs	r4, #1
    if(server_ptr -> nx_http_server_mime_maps_additional &&
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d055      	beq.n	800ac08 <_nx_http_server_type_get_extended.part.1+0x108>
 800ab5c:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 800ab60:	2a00      	cmp	r2, #0
 800ab62:	d051      	beq.n	800ac08 <_nx_http_server_type_get_extended.part.1+0x108>
                _nx_utility_string_length_check(server_ptr -> nx_http_server_mime_maps_additional[i].nx_http_server_mime_map_type,
 800ab64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        for(i = 0; i < server_ptr -> nx_http_server_mime_maps_additional_num; i++)
 800ab66:	2600      	movs	r6, #0
 800ab68:	f10d 0808 	add.w	r8, sp, #8
                _nx_utility_string_length_check(server_ptr -> nx_http_server_mime_maps_additional[i].nx_http_server_mime_map_type,
 800ab6c:	f102 39ff 	add.w	r9, r2, #4294967295
 800ab70:	e006      	b.n	800ab80 <_nx_http_server_type_get_extended.part.1+0x80>
        for(i = 0; i < server_ptr -> nx_http_server_mime_maps_additional_num; i++)
 800ab72:	3601      	adds	r6, #1
 800ab74:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800ab78:	429e      	cmp	r6, r3
 800ab7a:	d247      	bcs.n	800ac0c <_nx_http_server_type_get_extended.part.1+0x10c>
 800ab7c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
            if (_nx_utility_string_length_check(server_ptr -> nx_http_server_mime_maps_additional[i].nx_http_server_mime_map_extension,
 800ab80:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
 800ab84:	4622      	mov	r2, r4
 800ab86:	4641      	mov	r1, r8
 800ab88:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 800ab8c:	f009 fe38 	bl	8014800 <_nx_utility_string_length_check>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d1ee      	bne.n	800ab72 <_nx_http_server_type_get_extended.part.1+0x72>
                _nx_utility_string_length_check(server_ptr -> nx_http_server_mime_maps_additional[i].nx_http_server_mime_map_type,
 800ab94:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800ab98:	464a      	mov	r2, r9
 800ab9a:	a903      	add	r1, sp, #12
 800ab9c:	4453      	add	r3, sl
 800ab9e:	6858      	ldr	r0, [r3, #4]
 800aba0:	f009 fe2e 	bl	8014800 <_nx_utility_string_length_check>
                                                &map_ext_length, ext_length) ||
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d1e4      	bne.n	800ab72 <_nx_http_server_type_get_extended.part.1+0x72>
UINT  _nx_http_server_memicmp(UCHAR *src, ULONG src_length, UCHAR *dest, ULONG dest_length)
{
UCHAR   ch;

    /* Compare the length. */
    if(src_length != dest_length)
 800aba8:	9b02      	ldr	r3, [sp, #8]
 800abaa:	429c      	cmp	r4, r3
 800abac:	d1e1      	bne.n	800ab72 <_nx_http_server_type_get_extended.part.1+0x72>
                                       (UCHAR *)server_ptr -> nx_http_server_mime_maps_additional[i].nx_http_server_mime_map_extension,
 800abae:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800abb2:	eb03 0b0a 	add.w	fp, r3, sl
        return NX_HTTP_FAILED;

    while(src_length)
 800abb6:	b1fc      	cbz	r4, 800abf8 <_nx_http_server_type_get_extended.part.1+0xf8>
 800abb8:	f853 300a 	ldr.w	r3, [r3, sl]
 800abbc:	46ae      	mov	lr, r5
                                       (UCHAR *)server_ptr -> nx_http_server_mime_maps_additional[i].nx_http_server_mime_map_extension,
 800abbe:	4620      	mov	r0, r4
 800abc0:	f103 3cff 	add.w	ip, r3, #4294967295
    {

        /* Is src lowercase? */
        if((*src >= 'a') && (*src <= 'z'))
 800abc4:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800abc8:	f1a3 0a61 	sub.w	sl, r3, #97	; 0x61
            ch = (UCHAR)(*src - 'a' + 'A');
 800abcc:	f1a3 0220 	sub.w	r2, r3, #32

        /* Is src uppercase? */
        else if((*src >= 'A') && (*src <= 'Z'))
 800abd0:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
        if((*src >= 'a') && (*src <= 'z'))
 800abd4:	f1ba 0f19 	cmp.w	sl, #25
            ch = (UCHAR)(*src - 'a' + 'A');
 800abd8:	b2d2      	uxtb	r2, r2
        if((*src >= 'a') && (*src <= 'z'))
 800abda:	d905      	bls.n	800abe8 <_nx_http_server_type_get_extended.part.1+0xe8>
        else if((*src >= 'A') && (*src <= 'Z'))
 800abdc:	2919      	cmp	r1, #25
            ch = (UCHAR)(*src - 'A' + 'a');
 800abde:	f103 0120 	add.w	r1, r3, #32
        else if((*src >= 'A') && (*src <= 'Z'))
 800abe2:	461a      	mov	r2, r3
            ch = (UCHAR)(*src - 'A' + 'a');
 800abe4:	bf98      	it	ls
 800abe6:	b2ca      	uxtbls	r2, r1
        else
            ch = *src;

        /* Compare case insensitive. */
        if((*src != *dest) && (ch != *dest))
 800abe8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800abec:	4291      	cmp	r1, r2
 800abee:	d001      	beq.n	800abf4 <_nx_http_server_type_get_extended.part.1+0xf4>
 800abf0:	428b      	cmp	r3, r1
 800abf2:	d1be      	bne.n	800ab72 <_nx_http_server_type_get_extended.part.1+0x72>
    while(src_length)
 800abf4:	3801      	subs	r0, #1
 800abf6:	d1e5      	bne.n	800abc4 <_nx_http_server_type_get_extended.part.1+0xc4>
                memcpy(http_type_string, server_ptr -> nx_http_server_mime_maps_additional[i].nx_http_server_mime_map_type, map_type_length + 1);
 800abf8:	9c03      	ldr	r4, [sp, #12]
 800abfa:	9801      	ldr	r0, [sp, #4]
 800abfc:	f8db 1004 	ldr.w	r1, [fp, #4]
 800ac00:	1c62      	adds	r2, r4, #1
 800ac02:	f013 fca6 	bl	801e552 <memcpy>
 800ac06:	e7a0      	b.n	800ab4a <_nx_http_server_type_get_extended.part.1+0x4a>
 800ac08:	f10d 0808 	add.w	r8, sp, #8
            _nx_utility_string_length_check(_nx_http_server_mime_maps[i].nx_http_server_mime_map_type,
 800ac0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        else if((*src >= 'A') && (*src <= 'Z'))
 800ac0e:	2600      	movs	r6, #0
 800ac10:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800acc4 <_nx_http_server_type_get_extended.part.1+0x1c4>
            _nx_utility_string_length_check(_nx_http_server_mime_maps[i].nx_http_server_mime_map_type,
 800ac14:	f103 3aff 	add.w	sl, r3, #4294967295
 800ac18:	e002      	b.n	800ac20 <_nx_http_server_type_get_extended.part.1+0x120>
 800ac1a:	3608      	adds	r6, #8
    for(i = 0; i < sizeof(_nx_http_server_mime_maps) / sizeof(NX_HTTP_SERVER_MIME_MAP); i++)
 800ac1c:	2e30      	cmp	r6, #48	; 0x30
 800ac1e:	d08f      	beq.n	800ab40 <_nx_http_server_type_get_extended.part.1+0x40>
        if (_nx_utility_string_length_check(_nx_http_server_mime_maps[i].nx_http_server_mime_map_extension,
 800ac20:	f859 7006 	ldr.w	r7, [r9, r6]
 800ac24:	4622      	mov	r2, r4
 800ac26:	4641      	mov	r1, r8
 800ac28:	4638      	mov	r0, r7
 800ac2a:	f009 fde9 	bl	8014800 <_nx_utility_string_length_check>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d1f3      	bne.n	800ac1a <_nx_http_server_type_get_extended.part.1+0x11a>
            _nx_utility_string_length_check(_nx_http_server_mime_maps[i].nx_http_server_mime_map_type,
 800ac32:	eb09 0306 	add.w	r3, r9, r6
 800ac36:	4652      	mov	r2, sl
 800ac38:	a903      	add	r1, sp, #12
 800ac3a:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800ac3e:	4658      	mov	r0, fp
 800ac40:	f009 fdde 	bl	8014800 <_nx_utility_string_length_check>
                                            &map_ext_length, ext_length) || 
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d1e8      	bne.n	800ac1a <_nx_http_server_type_get_extended.part.1+0x11a>
    if(src_length != dest_length)
 800ac48:	9b02      	ldr	r3, [sp, #8]
 800ac4a:	429c      	cmp	r4, r3
 800ac4c:	d1e5      	bne.n	800ac1a <_nx_http_server_type_get_extended.part.1+0x11a>
    while(src_length)
 800ac4e:	b1e4      	cbz	r4, 800ac8a <_nx_http_server_type_get_extended.part.1+0x18a>
 800ac50:	3f01      	subs	r7, #1
 800ac52:	46ac      	mov	ip, r5
 800ac54:	4620      	mov	r0, r4
        if((*src >= 'a') && (*src <= 'z'))
 800ac56:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ac5a:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
            ch = (UCHAR)(*src - 'a' + 'A');
 800ac5e:	f1a3 0220 	sub.w	r2, r3, #32
        else if((*src >= 'A') && (*src <= 'Z'))
 800ac62:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
        if((*src >= 'a') && (*src <= 'z'))
 800ac66:	f1be 0f19 	cmp.w	lr, #25
            ch = (UCHAR)(*src - 'a' + 'A');
 800ac6a:	b2d2      	uxtb	r2, r2
        if((*src >= 'a') && (*src <= 'z'))
 800ac6c:	d905      	bls.n	800ac7a <_nx_http_server_type_get_extended.part.1+0x17a>
        else if((*src >= 'A') && (*src <= 'Z'))
 800ac6e:	2919      	cmp	r1, #25
            ch = (UCHAR)(*src - 'A' + 'a');
 800ac70:	f103 0120 	add.w	r1, r3, #32
        else if((*src >= 'A') && (*src <= 'Z'))
 800ac74:	461a      	mov	r2, r3
            ch = (UCHAR)(*src - 'A' + 'a');
 800ac76:	bf98      	it	ls
 800ac78:	b2ca      	uxtbls	r2, r1
        if((*src != *dest) && (ch != *dest))
 800ac7a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800ac7e:	428b      	cmp	r3, r1
 800ac80:	d001      	beq.n	800ac86 <_nx_http_server_type_get_extended.part.1+0x186>
 800ac82:	4291      	cmp	r1, r2
 800ac84:	d1c9      	bne.n	800ac1a <_nx_http_server_type_get_extended.part.1+0x11a>
    while(src_length)
 800ac86:	3801      	subs	r0, #1
 800ac88:	d1e5      	bne.n	800ac56 <_nx_http_server_type_get_extended.part.1+0x156>
            memcpy(http_type_string, _nx_http_server_mime_maps[i].nx_http_server_mime_map_type, map_type_length + 1);
 800ac8a:	9c03      	ldr	r4, [sp, #12]
 800ac8c:	4659      	mov	r1, fp
 800ac8e:	9801      	ldr	r0, [sp, #4]
 800ac90:	1c62      	adds	r2, r4, #1
 800ac92:	f013 fc5e 	bl	801e552 <memcpy>
}
 800ac96:	4620      	mov	r0, r4
 800ac98:	b005      	add	sp, #20
 800ac9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy(http_type_string, NX_HTTP_SERVER_DEFAULT_MIME, sizeof(NX_HTTP_SERVER_DEFAULT_MIME));
 800ac9e:	4b08      	ldr	r3, [pc, #32]	; (800acc0 <_nx_http_server_type_get_extended.part.1+0x1c0>)
        return(sizeof(NX_HTTP_SERVER_DEFAULT_MIME) - 1);
 800aca0:	240a      	movs	r4, #10
        memcpy(http_type_string, NX_HTTP_SERVER_DEFAULT_MIME, sizeof(NX_HTTP_SERVER_DEFAULT_MIME));
 800aca2:	9d01      	ldr	r5, [sp, #4]
 800aca4:	cb03      	ldmia	r3!, {r0, r1}
 800aca6:	881a      	ldrh	r2, [r3, #0]
 800aca8:	6028      	str	r0, [r5, #0]
}
 800acaa:	4620      	mov	r0, r4
        memcpy(http_type_string, NX_HTTP_SERVER_DEFAULT_MIME, sizeof(NX_HTTP_SERVER_DEFAULT_MIME));
 800acac:	789b      	ldrb	r3, [r3, #2]
 800acae:	6069      	str	r1, [r5, #4]
 800acb0:	812a      	strh	r2, [r5, #8]
 800acb2:	72ab      	strb	r3, [r5, #10]
}
 800acb4:	b005      	add	sp, #20
 800acb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ext_length = 0;
 800acba:	2400      	movs	r4, #0
 800acbc:	e73e      	b.n	800ab3c <_nx_http_server_type_get_extended.part.1+0x3c>
 800acbe:	bf00      	nop
 800acc0:	08025820 	.word	0x08025820
 800acc4:	080256a0 	.word	0x080256a0

0800acc8 <_nx_http_server_content_length_get_extended>:
{
 800acc8:	b4f0      	push	{r4, r5, r6, r7}
    while (((buffer_ptr+17) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800acca:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
    *length =  0;
 800acce:	2200      	movs	r2, #0
    while (((buffer_ptr+17) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800acd0:	f104 0311 	add.w	r3, r4, #17
    *length =  0;
 800acd4:	600a      	str	r2, [r1, #0]
    while (((buffer_ptr+17) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800acd6:	429e      	cmp	r6, r3
 800acd8:	7822      	ldrb	r2, [r4, #0]
 800acda:	d959      	bls.n	800ad90 <_nx_http_server_content_length_get_extended+0xc8>
 800acdc:	b30a      	cbz	r2, 800ad22 <_nx_http_server_content_length_get_extended+0x5a>
 800acde:	4623      	mov	r3, r4
 800ace0:	f1a6 0511 	sub.w	r5, r6, #17
        if (((*buffer_ptr ==      'c') || (*buffer_ptr ==      'C')) &&
 800ace4:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 800ace8:	461f      	mov	r7, r3
 800acea:	3301      	adds	r3, #1
 800acec:	2843      	cmp	r0, #67	; 0x43
 800acee:	781a      	ldrb	r2, [r3, #0]
 800acf0:	461c      	mov	r4, r3
 800acf2:	d112      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
 800acf4:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 800acf8:	284f      	cmp	r0, #79	; 0x4f
 800acfa:	d10e      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+2) ==  'n') || (*(buffer_ptr+2) ==  'N')) &&
 800acfc:	7858      	ldrb	r0, [r3, #1]
            ((*(buffer_ptr+1) ==  'o') || (*(buffer_ptr+1) ==  'O')) &&
 800acfe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad02:	284e      	cmp	r0, #78	; 0x4e
 800ad04:	d109      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+3) ==  't') || (*(buffer_ptr+3) ==  'T')) &&
 800ad06:	7898      	ldrb	r0, [r3, #2]
            ((*(buffer_ptr+2) ==  'n') || (*(buffer_ptr+2) ==  'N')) &&
 800ad08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad0c:	2854      	cmp	r0, #84	; 0x54
 800ad0e:	d104      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+4) ==  'e') || (*(buffer_ptr+4) ==  'E')) &&
 800ad10:	78d8      	ldrb	r0, [r3, #3]
            ((*(buffer_ptr+3) ==  't') || (*(buffer_ptr+3) ==  'T')) &&
 800ad12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad16:	2845      	cmp	r0, #69	; 0x45
 800ad18:	d006      	beq.n	800ad28 <_nx_http_server_content_length_get_extended+0x60>
    while (((buffer_ptr+17) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800ad1a:	429d      	cmp	r5, r3
 800ad1c:	d038      	beq.n	800ad90 <_nx_http_server_content_length_get_extended+0xc8>
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d1e0      	bne.n	800ace4 <_nx_http_server_content_length_get_extended+0x1c>
         return NX_HTTP_INCOMPLETE_PUT_ERROR;
 800ad22:	20ef      	movs	r0, #239	; 0xef
}
 800ad24:	bcf0      	pop	{r4, r5, r6, r7}
 800ad26:	4770      	bx	lr
            ((*(buffer_ptr+5) ==  'n') || (*(buffer_ptr+5) ==  'N')) &&
 800ad28:	7918      	ldrb	r0, [r3, #4]
            ((*(buffer_ptr+4) ==  'e') || (*(buffer_ptr+4) ==  'E')) &&
 800ad2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad2e:	284e      	cmp	r0, #78	; 0x4e
 800ad30:	d1f3      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+6) ==  't') || (*(buffer_ptr+6) ==  'T')) &&
 800ad32:	7958      	ldrb	r0, [r3, #5]
            ((*(buffer_ptr+5) ==  'n') || (*(buffer_ptr+5) ==  'N')) &&
 800ad34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad38:	2854      	cmp	r0, #84	; 0x54
 800ad3a:	d1ee      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+6) ==  't') || (*(buffer_ptr+6) ==  'T')) &&
 800ad3c:	7998      	ldrb	r0, [r3, #6]
 800ad3e:	282d      	cmp	r0, #45	; 0x2d
 800ad40:	d1eb      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+8) ==  'l') || (*(buffer_ptr+8) ==  'L')) &&
 800ad42:	79d8      	ldrb	r0, [r3, #7]
            (*(buffer_ptr+7) ==  '-') &&
 800ad44:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad48:	284c      	cmp	r0, #76	; 0x4c
 800ad4a:	d1e6      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+9) ==  'e') || (*(buffer_ptr+9) ==  'E')) &&
 800ad4c:	7a18      	ldrb	r0, [r3, #8]
            ((*(buffer_ptr+8) ==  'l') || (*(buffer_ptr+8) ==  'L')) &&
 800ad4e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad52:	2845      	cmp	r0, #69	; 0x45
 800ad54:	d1e1      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+10) == 'n') || (*(buffer_ptr+10) == 'N')) &&
 800ad56:	7a58      	ldrb	r0, [r3, #9]
            ((*(buffer_ptr+9) ==  'e') || (*(buffer_ptr+9) ==  'E')) &&
 800ad58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad5c:	284e      	cmp	r0, #78	; 0x4e
 800ad5e:	d1dc      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+11) == 'g') || (*(buffer_ptr+11) == 'G')) &&
 800ad60:	7a98      	ldrb	r0, [r3, #10]
            ((*(buffer_ptr+10) == 'n') || (*(buffer_ptr+10) == 'N')) &&
 800ad62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad66:	2847      	cmp	r0, #71	; 0x47
 800ad68:	d1d7      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+12) == 't') || (*(buffer_ptr+12) == 'T')) &&
 800ad6a:	7ad8      	ldrb	r0, [r3, #11]
            ((*(buffer_ptr+11) == 'g') || (*(buffer_ptr+11) == 'G')) &&
 800ad6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad70:	2854      	cmp	r0, #84	; 0x54
 800ad72:	d1d2      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+13) == 'h') || (*(buffer_ptr+13) == 'H')) &&
 800ad74:	7b18      	ldrb	r0, [r3, #12]
            ((*(buffer_ptr+12) == 't') || (*(buffer_ptr+12) == 'T')) &&
 800ad76:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad7a:	2848      	cmp	r0, #72	; 0x48
 800ad7c:	d1cd      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            ((*(buffer_ptr+13) == 'h') || (*(buffer_ptr+13) == 'H')) &&
 800ad7e:	7b58      	ldrb	r0, [r3, #13]
 800ad80:	283a      	cmp	r0, #58	; 0x3a
 800ad82:	d1ca      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            (*(buffer_ptr+14) == ':') &&
 800ad84:	7b98      	ldrb	r0, [r3, #14]
 800ad86:	2820      	cmp	r0, #32
 800ad88:	d1c7      	bne.n	800ad1a <_nx_http_server_content_length_get_extended+0x52>
            buffer_ptr =  buffer_ptr + 16;
 800ad8a:	f107 0410 	add.w	r4, r7, #16
 800ad8e:	7c3a      	ldrb	r2, [r7, #16]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800ad90:	42b4      	cmp	r4, r6
 800ad92:	d216      	bcs.n	800adc2 <_nx_http_server_content_length_get_extended+0xfa>
 800ad94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ad98:	2b09      	cmp	r3, #9
 800ad9a:	d812      	bhi.n	800adc2 <_nx_http_server_content_length_get_extended+0xfa>
 800ad9c:	2300      	movs	r3, #0
        *length =  *length * 10;
 800ad9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        *length =  *length + (((UINT) (*buffer_ptr)) - 0x30);
 800ada2:	4620      	mov	r0, r4
        *length =  *length * 10;
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	600b      	str	r3, [r1, #0]
        *length =  *length + (((UINT) (*buffer_ptr)) - 0x30);
 800ada8:	3b30      	subs	r3, #48	; 0x30
 800adaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adae:	4413      	add	r3, r2
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800adb0:	42b0      	cmp	r0, r6
        *length =  *length + (((UINT) (*buffer_ptr)) - 0x30);
 800adb2:	600b      	str	r3, [r1, #0]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800adb4:	7862      	ldrb	r2, [r4, #1]
 800adb6:	d204      	bcs.n	800adc2 <_nx_http_server_content_length_get_extended+0xfa>
 800adb8:	4604      	mov	r4, r0
 800adba:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800adbe:	2809      	cmp	r0, #9
 800adc0:	d9ed      	bls.n	800ad9e <_nx_http_server_content_length_get_extended+0xd6>
     if ((*buffer_ptr != ' ') && (*buffer_ptr != (CHAR) 13))
 800adc2:	2a20      	cmp	r2, #32
 800adc4:	d102      	bne.n	800adcc <_nx_http_server_content_length_get_extended+0x104>
    return NX_SUCCESS;
 800adc6:	2000      	movs	r0, #0
}
 800adc8:	bcf0      	pop	{r4, r5, r6, r7}
 800adca:	4770      	bx	lr
     if ((*buffer_ptr != ' ') && (*buffer_ptr != (CHAR) 13))
 800adcc:	2a0d      	cmp	r2, #13
 800adce:	d0fa      	beq.n	800adc6 <_nx_http_server_content_length_get_extended+0xfe>
 800add0:	e7a7      	b.n	800ad22 <_nx_http_server_content_length_get_extended+0x5a>
 800add2:	bf00      	nop

0800add4 <_nx_http_server_create>:
{
 800add4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800add8:	460f      	mov	r7, r1
 800adda:	b089      	sub	sp, #36	; 0x24
 800addc:	4616      	mov	r6, r2
    memset((void *) http_server_ptr, 0, sizeof(NX_HTTP_SERVER));
 800adde:	2100      	movs	r1, #0
 800ade0:	f44f 6291 	mov.w	r2, #1160	; 0x488
{
 800ade4:	4699      	mov	r9, r3
    status =  nx_tcp_socket_create(ip_ptr, &(http_server_ptr -> nx_http_server_socket), http_server_name,
 800ade6:	f500 7816 	add.w	r8, r0, #600	; 0x258
 800adea:	f44f 4580 	mov.w	r5, #16384	; 0x4000
{
 800adee:	4604      	mov	r4, r0
    memset((void *) http_server_ptr, 0, sizeof(NX_HTTP_SERVER));
 800adf0:	f013 fbd3 	bl	801e59a <memset>
    status =  nx_tcp_socket_create(ip_ptr, &(http_server_ptr -> nx_http_server_socket), http_server_name,
 800adf4:	2300      	movs	r3, #0
 800adf6:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 800adfa:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800adfe:	9500      	str	r5, [sp, #0]
 800ae00:	4641      	mov	r1, r8
 800ae02:	463a      	mov	r2, r7
 800ae04:	4630      	mov	r0, r6
 800ae06:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ae0a:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800ae0e:	f7fc fd0b 	bl	8007828 <_nx_tcp_socket_create>
    if (status != NX_SUCCESS)
 800ae12:	4605      	mov	r5, r0
 800ae14:	b118      	cbz	r0, 800ae1e <_nx_http_server_create+0x4a>
}
 800ae16:	4628      	mov	r0, r5
 800ae18:	b009      	add	sp, #36	; 0x24
 800ae1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status =  tx_thread_create(&(http_server_ptr -> nx_http_server_thread), "HTTP Server Thread", _nx_http_server_thread_entry,
 800ae1e:	2210      	movs	r2, #16
 800ae20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae22:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 800ae26:	2102      	movs	r1, #2
 800ae28:	9005      	str	r0, [sp, #20]
 800ae2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	4623      	mov	r3, r4
 800ae30:	9000      	str	r0, [sp, #0]
 800ae32:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800ae36:	9202      	str	r2, [sp, #8]
 800ae38:	f8cd c018 	str.w	ip, [sp, #24]
 800ae3c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800ae40:	4a0f      	ldr	r2, [pc, #60]	; (800ae80 <_nx_http_server_create+0xac>)
 800ae42:	4910      	ldr	r1, [pc, #64]	; (800ae84 <_nx_http_server_create+0xb0>)
 800ae44:	f012 fea6 	bl	801db94 <_txe_thread_create>
    if (status != NX_SUCCESS)
 800ae48:	4605      	mov	r5, r0
 800ae4a:	b990      	cbnz	r0, 800ae72 <_nx_http_server_create+0x9e>
    http_server_ptr -> nx_http_server_packet_pool_ptr =  pool_ptr;
 800ae4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
}
 800ae4e:	4628      	mov	r0, r5
    http_server_ptr -> nx_http_server_id =  NXD_HTTP_SERVER_ID;
 800ae50:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <_nx_http_server_create+0xb4>)
    http_server_ptr -> nx_http_server_socket.nx_tcp_socket_reserved_ptr =  (void *) http_server_ptr;
 800ae52:	f8c4 4388 	str.w	r4, [r4, #904]	; 0x388
    http_server_ptr -> nx_http_server_id =  NXD_HTTP_SERVER_ID;
 800ae56:	6023      	str	r3, [r4, #0]
    http_server_ptr -> nx_http_server_media_ptr =  media_ptr;
 800ae58:	e9c4 290f 	strd	r2, r9, [r4, #60]	; 0x3c
    http_server_ptr -> nx_http_server_authentication_check =  authentication_check;
 800ae5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae5e:	f8c4 246c 	str.w	r2, [r4, #1132]	; 0x46c
    http_server_ptr -> nx_http_server_request_notify =        request_notify;
 800ae62:	9a14      	ldr	r2, [sp, #80]	; 0x50
    http_server_ptr -> nx_http_server_ip_ptr =  ip_ptr;
 800ae64:	e9c4 7601 	strd	r7, r6, [r4, #4]
    http_server_ptr -> nx_http_server_request_notify =        request_notify;
 800ae68:	f8c4 2474 	str.w	r2, [r4, #1140]	; 0x474
}
 800ae6c:	b009      	add	sp, #36	; 0x24
 800ae6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nx_tcp_socket_delete(&(http_server_ptr -> nx_http_server_socket));
 800ae72:	4640      	mov	r0, r8
 800ae74:	f7fc fd50 	bl	8007918 <_nx_tcp_socket_delete>
}
 800ae78:	4628      	mov	r0, r5
 800ae7a:	b009      	add	sp, #36	; 0x24
 800ae7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae80:	0800d4d9 	.word	0x0800d4d9
 800ae84:	0802582c 	.word	0x0802582c
 800ae88:	48545451 	.word	0x48545451

0800ae8c <_nx_http_server_query_get>:
{
 800ae8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    query_ptr[0] =  (CHAR) NX_NULL;
 800ae90:	2400      	movs	r4, #0
 800ae92:	7014      	strb	r4, [r2, #0]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800ae94:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
 800ae98:	42b4      	cmp	r4, r6
 800ae9a:	d20c      	bcs.n	800aeb6 <_nx_http_server_query_get+0x2a>
 800ae9c:	7825      	ldrb	r5, [r4, #0]
 800ae9e:	2d2f      	cmp	r5, #47	; 0x2f
 800aea0:	d00c      	beq.n	800aebc <_nx_http_server_query_get+0x30>
 800aea2:	1c65      	adds	r5, r4, #1
 800aea4:	e002      	b.n	800aeac <_nx_http_server_query_get+0x20>
 800aea6:	7827      	ldrb	r7, [r4, #0]
 800aea8:	2f2f      	cmp	r7, #47	; 0x2f
 800aeaa:	d007      	beq.n	800aebc <_nx_http_server_query_get+0x30>
 800aeac:	42b5      	cmp	r5, r6
        buffer_ptr++;
 800aeae:	462c      	mov	r4, r5
 800aeb0:	f105 0501 	add.w	r5, r5, #1
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800aeb4:	d1f7      	bne.n	800aea6 <_nx_http_server_query_get+0x1a>
        return(NX_HTTP_NOT_FOUND);
 800aeb6:	20e6      	movs	r0, #230	; 0xe6
}
 800aeb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    current_query =  0;
 800aebc:	2700      	movs	r7, #0
 800aebe:	e00d      	b.n	800aedc <_nx_http_server_query_get+0x50>
        if (((*buffer_ptr == '?') && (current_query == 0)) ||
 800aec0:	2d26      	cmp	r5, #38	; 0x26
            if ((*buffer_ptr == '?') || (*buffer_ptr == ' ') || (*buffer_ptr == ';'))
 800aec2:	f005 0cfb 	and.w	ip, r5, #251	; 0xfb
        if (((*buffer_ptr == '?') && (current_query == 0)) ||
 800aec6:	d04d      	beq.n	800af64 <_nx_http_server_query_get+0xd8>
            if ((*buffer_ptr == '?') || (*buffer_ptr == ' ') || (*buffer_ptr == ';'))
 800aec8:	2d20      	cmp	r5, #32
 800aeca:	d0f4      	beq.n	800aeb6 <_nx_http_server_query_get+0x2a>
 800aecc:	f1bc 0f3b 	cmp.w	ip, #59	; 0x3b
 800aed0:	d0f1      	beq.n	800aeb6 <_nx_http_server_query_get+0x2a>
    } while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 13));
 800aed2:	42b4      	cmp	r4, r6
 800aed4:	d2ef      	bcs.n	800aeb6 <_nx_http_server_query_get+0x2a>
 800aed6:	7825      	ldrb	r5, [r4, #0]
 800aed8:	2d0d      	cmp	r5, #13
 800aeda:	d0ec      	beq.n	800aeb6 <_nx_http_server_query_get+0x2a>
 800aedc:	46a6      	mov	lr, r4
        if (((*buffer_ptr == '?') && (current_query == 0)) ||
 800aede:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aee2:	2d3f      	cmp	r5, #63	; 0x3f
 800aee4:	d1ec      	bne.n	800aec0 <_nx_http_server_query_get+0x34>
 800aee6:	2f00      	cmp	r7, #0
 800aee8:	d1e5      	bne.n	800aeb6 <_nx_http_server_query_get+0x2a>
            if (current_query == query_number)
 800aeea:	428f      	cmp	r7, r1
                current_query++;
 800aeec:	f107 0701 	add.w	r7, r7, #1
            if (current_query == query_number)
 800aef0:	d1ef      	bne.n	800aed2 <_nx_http_server_query_get+0x46>
                for (i = 0; i < max_query_size; i++)
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d048      	beq.n	800af88 <_nx_http_server_query_get+0xfc>
                    if (buffer_ptr >= (CHAR *)packet_ptr -> nx_packet_append_ptr)
 800aef6:	42b4      	cmp	r4, r6
 800aef8:	d2dd      	bcs.n	800aeb6 <_nx_http_server_query_get+0x2a>
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800aefa:	f89e 5001 	ldrb.w	r5, [lr, #1]
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800aefe:	f1a5 010d 	sub.w	r1, r5, #13
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800af02:	f005 06fb 	and.w	r6, r5, #251	; 0xfb
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af06:	b2cf      	uxtb	r7, r1
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800af08:	f1a6 063b 	sub.w	r6, r6, #59	; 0x3b
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af0c:	2f19      	cmp	r7, #25
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800af0e:	fab6 f686 	clz	r6, r6
 800af12:	ea4f 1656 	mov.w	r6, r6, lsr #5
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af16:	d928      	bls.n	800af6a <_nx_http_server_query_get+0xde>
 800af18:	bbb6      	cbnz	r6, 800af88 <_nx_http_server_query_get+0xfc>
 800af1a:	3401      	adds	r4, #1
 800af1c:	1e57      	subs	r7, r2, #1
 800af1e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800af8c <_nx_http_server_query_get+0x100>
                for (i = 0; i < max_query_size; i++)
 800af22:	3601      	adds	r6, #1
                    query_ptr[i] =  *buffer_ptr++;
 800af24:	f807 5f01 	strb.w	r5, [r7, #1]!
                for (i = 0; i < max_query_size; i++)
 800af28:	42b3      	cmp	r3, r6
 800af2a:	d02b      	beq.n	800af84 <_nx_http_server_query_get+0xf8>
                    if (buffer_ptr >= (CHAR *)packet_ptr -> nx_packet_append_ptr)
 800af2c:	68c1      	ldr	r1, [r0, #12]
 800af2e:	42a1      	cmp	r1, r4
 800af30:	d9c1      	bls.n	800aeb6 <_nx_http_server_query_get+0x2a>
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800af32:	f814 5b01 	ldrb.w	r5, [r4], #1
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af36:	f1a5 010d 	sub.w	r1, r5, #13
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800af3a:	f005 0cfb 	and.w	ip, r5, #251	; 0xfb
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af3e:	b2c9      	uxtb	r1, r1
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800af40:	f1ac 083b 	sub.w	r8, ip, #59	; 0x3b
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af44:	2919      	cmp	r1, #25
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800af46:	fab8 f888 	clz	r8, r8
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af4a:	fa29 fe01 	lsr.w	lr, r9, r1
                    if ((*buffer_ptr == ';') || (*buffer_ptr == '?') ||
 800af4e:	ea4f 1858 	mov.w	r8, r8, lsr #5
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af52:	d910      	bls.n	800af76 <_nx_http_server_query_get+0xea>
 800af54:	f1bc 0f3b 	cmp.w	ip, #59	; 0x3b
 800af58:	d1e3      	bne.n	800af22 <_nx_http_server_query_get+0x96>
 800af5a:	4432      	add	r2, r6
                query_ptr[i] =  (CHAR) NX_NULL;
 800af5c:	2300      	movs	r3, #0
                    return(NX_SUCCESS);
 800af5e:	4618      	mov	r0, r3
                query_ptr[i] =  (CHAR) NX_NULL;
 800af60:	7013      	strb	r3, [r2, #0]
 800af62:	e7a9      	b.n	800aeb8 <_nx_http_server_query_get+0x2c>
            ((*buffer_ptr == '&') && (current_query != 0)))
 800af64:	2f00      	cmp	r7, #0
 800af66:	d0b4      	beq.n	800aed2 <_nx_http_server_query_get+0x46>
 800af68:	e7bf      	b.n	800aeea <_nx_http_server_query_get+0x5e>
                        (*buffer_ptr == '&') || (*buffer_ptr == ' ') ||
 800af6a:	4908      	ldr	r1, [pc, #32]	; (800af8c <_nx_http_server_query_get+0x100>)
 800af6c:	40f9      	lsrs	r1, r7
 800af6e:	f001 0101 	and.w	r1, r1, #1
 800af72:	430e      	orrs	r6, r1
 800af74:	e7d0      	b.n	800af18 <_nx_http_server_query_get+0x8c>
 800af76:	f01e 0f01 	tst.w	lr, #1
 800af7a:	d1ee      	bne.n	800af5a <_nx_http_server_query_get+0xce>
 800af7c:	f1b8 0f00 	cmp.w	r8, #0
 800af80:	d0cf      	beq.n	800af22 <_nx_http_server_query_get+0x96>
 800af82:	e7ea      	b.n	800af5a <_nx_http_server_query_get+0xce>
 800af84:	441a      	add	r2, r3
 800af86:	e7e9      	b.n	800af5c <_nx_http_server_query_get+0xd0>
                    return(NX_HTTP_NO_QUERY_PARSED);
 800af88:	20f2      	movs	r0, #242	; 0xf2
 800af8a:	e795      	b.n	800aeb8 <_nx_http_server_query_get+0x2c>
 800af8c:	02080001 	.word	0x02080001

0800af90 <_nx_http_server_start>:
{
 800af90:	b530      	push	{r4, r5, lr}
 800af92:	4604      	mov	r4, r0
 800af94:	b083      	sub	sp, #12
    status =  nx_tcp_server_socket_listen(http_server_ptr -> nx_http_server_ip_ptr, NX_HTTP_SERVER_PORT,
 800af96:	4d09      	ldr	r5, [pc, #36]	; (800afbc <_nx_http_server_start+0x2c>)
 800af98:	2305      	movs	r3, #5
 800af9a:	6880      	ldr	r0, [r0, #8]
 800af9c:	2150      	movs	r1, #80	; 0x50
 800af9e:	9500      	str	r5, [sp, #0]
 800afa0:	f504 7216 	add.w	r2, r4, #600	; 0x258
 800afa4:	f7fc faba 	bl	800751c <_nx_tcp_server_socket_listen>
    if (status != NX_SUCCESS)
 800afa8:	4605      	mov	r5, r0
 800afaa:	b918      	cbnz	r0, 800afb4 <_nx_http_server_start+0x24>
    tx_thread_resume(&(http_server_ptr -> nx_http_server_thread));
 800afac:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800afb0:	f012 fee4 	bl	801dd7c <_txe_thread_resume>
}
 800afb4:	4628      	mov	r0, r5
 800afb6:	b003      	add	sp, #12
 800afb8:	bd30      	pop	{r4, r5, pc}
 800afba:	bf00      	nop
 800afbc:	0800a999 	.word	0x0800a999

0800afc0 <_nx_http_server_callback_data_send>:
{
 800afc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afc2:	b085      	sub	sp, #20
 800afc4:	4604      	mov	r4, r0
 800afc6:	460d      	mov	r5, r1
 800afc8:	4616      	mov	r6, r2
    status =  nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &new_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800afca:	f04f 33ff 	mov.w	r3, #4294967295
 800afce:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800afd0:	224c      	movs	r2, #76	; 0x4c
 800afd2:	a903      	add	r1, sp, #12
 800afd4:	f7fb fb5a 	bl	800668c <_nx_packet_allocate>
    if (status != NX_SUCCESS)
 800afd8:	bb10      	cbnz	r0, 800b020 <_nx_http_server_callback_data_send+0x60>
    status =  nx_packet_data_append(new_packet_ptr, data_ptr, data_length,
 800afda:	f04f 37ff 	mov.w	r7, #4294967295
 800afde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afe0:	4629      	mov	r1, r5
 800afe2:	9803      	ldr	r0, [sp, #12]
 800afe4:	4632      	mov	r2, r6
 800afe6:	9700      	str	r7, [sp, #0]
 800afe8:	f7fb fbae 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800afec:	4605      	mov	r5, r0
 800afee:	b970      	cbnz	r0, 800b00e <_nx_http_server_callback_data_send+0x4e>
    status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800aff0:	f504 7016 	add.w	r0, r4, #600	; 0x258
 800aff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aff8:	9903      	ldr	r1, [sp, #12]
 800affa:	f7fd f823 	bl	8008044 <_nx_tcp_socket_send>
    if (status != NX_SUCCESS)
 800affe:	4605      	mov	r5, r0
 800b000:	b158      	cbz	r0, 800b01a <_nx_http_server_callback_data_send+0x5a>
        nx_packet_release(new_packet_ptr);
 800b002:	9803      	ldr	r0, [sp, #12]
 800b004:	f7fb fcf4 	bl	80069f0 <_nx_packet_release>
}
 800b008:	4628      	mov	r0, r5
 800b00a:	b005      	add	sp, #20
 800b00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        server_ptr -> nx_http_server_allocation_errors++;
 800b00e:	6e63      	ldr	r3, [r4, #100]	; 0x64
        nx_packet_release(new_packet_ptr);
 800b010:	9803      	ldr	r0, [sp, #12]
        server_ptr -> nx_http_server_allocation_errors++;
 800b012:	3301      	adds	r3, #1
 800b014:	6663      	str	r3, [r4, #100]	; 0x64
        nx_packet_release(new_packet_ptr);
 800b016:	f7fb fceb 	bl	80069f0 <_nx_packet_release>
}
 800b01a:	4628      	mov	r0, r5
 800b01c:	b005      	add	sp, #20
 800b01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        server_ptr -> nx_http_server_allocation_errors++;
 800b020:	6e63      	ldr	r3, [r4, #100]	; 0x64
        return(NX_HTTP_ERROR);
 800b022:	25e0      	movs	r5, #224	; 0xe0
        server_ptr -> nx_http_server_allocation_errors++;
 800b024:	3301      	adds	r3, #1
}
 800b026:	4628      	mov	r0, r5
        server_ptr -> nx_http_server_allocation_errors++;
 800b028:	6663      	str	r3, [r4, #100]	; 0x64
}
 800b02a:	b005      	add	sp, #20
 800b02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b02e:	bf00      	nop

0800b030 <_nx_http_server_get_client_request>:
{
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	4680      	mov	r8, r0
 800b036:	b087      	sub	sp, #28
 800b038:	4608      	mov	r0, r1
    *packet_ptr =  NX_NULL;
 800b03a:	2300      	movs	r3, #0
    status =  nx_tcp_socket_receive(&(server_ptr -> nx_http_server_socket), &head_packet_ptr, NX_HTTP_SERVER_TIMEOUT_RECEIVE);
 800b03c:	f508 7b16 	add.w	fp, r8, #600	; 0x258
{
 800b040:	9102      	str	r1, [sp, #8]
    *packet_ptr =  NX_NULL;
 800b042:	6003      	str	r3, [r0, #0]
    status =  nx_tcp_socket_receive(&(server_ptr -> nx_http_server_socket), &head_packet_ptr, NX_HTTP_SERVER_TIMEOUT_RECEIVE);
 800b044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b048:	a904      	add	r1, sp, #16
 800b04a:	4658      	mov	r0, fp
 800b04c:	f7fc fd9a 	bl	8007b84 <_nx_tcp_socket_receive>
    if (status != NX_SUCCESS)
 800b050:	4681      	mov	r9, r0
 800b052:	bb70      	cbnz	r0, 800b0b2 <_nx_http_server_get_client_request+0x82>
    buffer_ptr =  (CHAR *) head_packet_ptr -> nx_packet_prepend_ptr;
 800b054:	9f04      	ldr	r7, [sp, #16]
 800b056:	68bc      	ldr	r4, [r7, #8]
    if ((buffer_ptr[0] != 'G') && (buffer_ptr[0] != 'g') && (buffer_ptr[0] != 'P') && (buffer_ptr[0] != 'p') &&
 800b058:	7823      	ldrb	r3, [r4, #0]
 800b05a:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 800b05e:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
        (buffer_ptr[0] != 'T') && (buffer_ptr[0] != 't'))
 800b062:	2b44      	cmp	r3, #68	; 0x44
 800b064:	bf18      	it	ne
 800b066:	2a50      	cmpne	r2, #80	; 0x50
 800b068:	d002      	beq.n	800b070 <_nx_http_server_get_client_request+0x40>
    if ((buffer_ptr[0] != 'G') && (buffer_ptr[0] != 'g') && (buffer_ptr[0] != 'P') && (buffer_ptr[0] != 'p') &&
 800b06a:	3a47      	subs	r2, #71	; 0x47
        (buffer_ptr[0] != 'T') && (buffer_ptr[0] != 't'))
 800b06c:	2a01      	cmp	r2, #1
 800b06e:	d86d      	bhi.n	800b14c <_nx_http_server_get_client_request+0x11c>
     if (((head_packet_ptr -> nx_packet_data_end - head_packet_ptr -> nx_packet_data_start) - 
 800b070:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b074:	1a9b      	subs	r3, r3, r2
 800b076:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 800b07a:	db55      	blt.n	800b128 <_nx_http_server_get_client_request+0xf8>
 800b07c:	68fb      	ldr	r3, [r7, #12]
    crlf_found = 0;
 800b07e:	2500      	movs	r5, #0
            status =  nx_tcp_socket_receive(&(server_ptr -> nx_http_server_socket), &new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_RECEIVE);
 800b080:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
        while (buffer_ptr < (CHAR *) work_ptr -> nx_packet_append_ptr)
 800b084:	429c      	cmp	r4, r3
 800b086:	d306      	bcc.n	800b096 <_nx_http_server_get_client_request+0x66>
        if (work_ptr -> nx_packet_next != NX_NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	b1fb      	cbz	r3, 800b0cc <_nx_http_server_get_client_request+0x9c>
            buffer_ptr =  (CHAR *) work_ptr -> nx_packet_prepend_ptr; 
 800b08c:	689c      	ldr	r4, [r3, #8]
 800b08e:	461f      	mov	r7, r3
 800b090:	68db      	ldr	r3, [r3, #12]
        while (buffer_ptr < (CHAR *) work_ptr -> nx_packet_append_ptr)
 800b092:	429c      	cmp	r4, r3
 800b094:	d2f8      	bcs.n	800b088 <_nx_http_server_get_client_request+0x58>
            if (!(crlf_found & 1) && (*buffer_ptr == (CHAR)13))
 800b096:	f015 0101 	ands.w	r1, r5, #1
 800b09a:	7822      	ldrb	r2, [r4, #0]
 800b09c:	d00d      	beq.n	800b0ba <_nx_http_server_get_client_request+0x8a>
            else if((crlf_found & 1) && (*buffer_ptr == (CHAR)10))
 800b09e:	2a0a      	cmp	r2, #10
 800b0a0:	d00d      	beq.n	800b0be <_nx_http_server_get_client_request+0x8e>
                crlf_found = 0;
 800b0a2:	2500      	movs	r5, #0
            buffer_ptr++;
 800b0a4:	3401      	adds	r4, #1
 800b0a6:	e7ed      	b.n	800b084 <_nx_http_server_get_client_request+0x54>
 800b0a8:	4603      	mov	r3, r0
                nx_packet_release(head_packet_ptr);
 800b0aa:	9804      	ldr	r0, [sp, #16]
            status =  nx_tcp_socket_receive(&(server_ptr -> nx_http_server_socket), &new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_RECEIVE);
 800b0ac:	4699      	mov	r9, r3
                nx_packet_release(head_packet_ptr);
 800b0ae:	f7fb fc9f 	bl	80069f0 <_nx_packet_release>
}
 800b0b2:	4648      	mov	r0, r9
 800b0b4:	b007      	add	sp, #28
 800b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (!(crlf_found & 1) && (*buffer_ptr == (CHAR)13))
 800b0ba:	2a0d      	cmp	r2, #13
 800b0bc:	d1f1      	bne.n	800b0a2 <_nx_http_server_get_client_request+0x72>
                crlf_found++;
 800b0be:	3501      	adds	r5, #1
            if (crlf_found == 4)
 800b0c0:	2d04      	cmp	r5, #4
 800b0c2:	d1ef      	bne.n	800b0a4 <_nx_http_server_get_client_request+0x74>
                *packet_ptr =  head_packet_ptr;
 800b0c4:	9b04      	ldr	r3, [sp, #16]
 800b0c6:	9a02      	ldr	r2, [sp, #8]
 800b0c8:	6013      	str	r3, [r2, #0]
                return(NX_SUCCESS);
 800b0ca:	e7f2      	b.n	800b0b2 <_nx_http_server_get_client_request+0x82>
            status =  nx_tcp_socket_receive(&(server_ptr -> nx_http_server_socket), &new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_RECEIVE);
 800b0cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0d0:	a905      	add	r1, sp, #20
 800b0d2:	4658      	mov	r0, fp
 800b0d4:	f7fc fd56 	bl	8007b84 <_nx_tcp_socket_receive>
            if (status != NX_SUCCESS)
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d1e5      	bne.n	800b0a8 <_nx_http_server_get_client_request+0x78>
            tmp_ptr = new_packet_ptr;
 800b0dc:	9e05      	ldr	r6, [sp, #20]
            while (tmp_ptr)
 800b0de:	b1f6      	cbz	r6, 800b11e <_nx_http_server_get_client_request+0xee>
 800b0e0:	9403      	str	r4, [sp, #12]
 800b0e2:	e001      	b.n	800b0e8 <_nx_http_server_get_client_request+0xb8>
                tmp_ptr = tmp_ptr -> nx_packet_next;
 800b0e4:	6876      	ldr	r6, [r6, #4]
            while (tmp_ptr)
 800b0e6:	b1c6      	cbz	r6, 800b11a <_nx_http_server_get_client_request+0xea>
                status =  nx_packet_data_append(head_packet_ptr, (VOID *) tmp_ptr -> nx_packet_prepend_ptr,
 800b0e8:	68b2      	ldr	r2, [r6, #8]
 800b0ea:	68f4      	ldr	r4, [r6, #12]
 800b0ec:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	9804      	ldr	r0, [sp, #16]
 800b0f4:	1aa2      	subs	r2, r4, r2
 800b0f6:	f8cd a000 	str.w	sl, [sp]
 800b0fa:	f7fb fb25 	bl	8006748 <_nx_packet_data_append>
                if (status != NX_SUCCESS)
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d0f0      	beq.n	800b0e4 <_nx_http_server_get_client_request+0xb4>
 800b102:	4603      	mov	r3, r0
                    nx_packet_release(head_packet_ptr);
 800b104:	9804      	ldr	r0, [sp, #16]
                status =  nx_packet_data_append(head_packet_ptr, (VOID *) tmp_ptr -> nx_packet_prepend_ptr,
 800b106:	4699      	mov	r9, r3
                    nx_packet_release(head_packet_ptr);
 800b108:	f7fb fc72 	bl	80069f0 <_nx_packet_release>
                    nx_packet_release(new_packet_ptr);
 800b10c:	9805      	ldr	r0, [sp, #20]
 800b10e:	f7fb fc6f 	bl	80069f0 <_nx_packet_release>
}
 800b112:	4648      	mov	r0, r9
 800b114:	b007      	add	sp, #28
 800b116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11a:	9c03      	ldr	r4, [sp, #12]
 800b11c:	9e05      	ldr	r6, [sp, #20]
            nx_packet_release(new_packet_ptr);
 800b11e:	4630      	mov	r0, r6
 800b120:	f7fb fc66 	bl	80069f0 <_nx_packet_release>
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	e7ad      	b.n	800b084 <_nx_http_server_get_client_request+0x54>
         status =  nx_packet_copy(head_packet_ptr, &new_packet_ptr, server_ptr -> nx_http_server_packet_pool_ptr, NX_HTTP_SERVER_TIMEOUT);
 800b128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b12c:	4638      	mov	r0, r7
 800b12e:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
 800b132:	a905      	add	r1, sp, #20
 800b134:	f007 fc9a 	bl	8012a6c <_nx_packet_copy>
         if (status != NX_SUCCESS)
 800b138:	4603      	mov	r3, r0
             nx_packet_release(head_packet_ptr);
 800b13a:	9804      	ldr	r0, [sp, #16]
         if (status != NX_SUCCESS)
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1b5      	bne.n	800b0ac <_nx_http_server_get_client_request+0x7c>
         nx_packet_release(head_packet_ptr);
 800b140:	f7fb fc56 	bl	80069f0 <_nx_packet_release>
         head_packet_ptr =  new_packet_ptr;
 800b144:	9f05      	ldr	r7, [sp, #20]
 800b146:	68bc      	ldr	r4, [r7, #8]
 800b148:	9704      	str	r7, [sp, #16]
 800b14a:	e797      	b.n	800b07c <_nx_http_server_get_client_request+0x4c>
        nx_packet_release(head_packet_ptr);
 800b14c:	4638      	mov	r0, r7
        return(NX_HTTP_ERROR);
 800b14e:	f04f 09e0 	mov.w	r9, #224	; 0xe0
        nx_packet_release(head_packet_ptr);
 800b152:	f7fb fc4d 	bl	80069f0 <_nx_packet_release>
        return(NX_HTTP_ERROR);
 800b156:	e7ac      	b.n	800b0b2 <_nx_http_server_get_client_request+0x82>

0800b158 <_nx_http_server_retrieve_basic_authorization>:
    authorization_request_ptr[0] =  NX_NULL;
 800b158:	2300      	movs	r3, #0
{
 800b15a:	b4f0      	push	{r4, r5, r6, r7}
    authorization_request_ptr[0] =  NX_NULL;
 800b15c:	700b      	strb	r3, [r1, #0]
    while (((buffer_ptr+15) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800b15e:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
 800b162:	f105 020f 	add.w	r2, r5, #15
 800b166:	4294      	cmp	r4, r2
 800b168:	d924      	bls.n	800b1b4 <_nx_http_server_retrieve_basic_authorization+0x5c>
 800b16a:	782b      	ldrb	r3, [r5, #0]
 800b16c:	b313      	cbz	r3, 800b1b4 <_nx_http_server_retrieve_basic_authorization+0x5c>
        if (((*buffer_ptr ==      'a') || (*buffer_ptr ==      'A')) &&
 800b16e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b172:	2b41      	cmp	r3, #65	; 0x41
 800b174:	d117      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+1) ==  'u') || (*(buffer_ptr+1) ==  'U')) &&
 800b176:	f812 3c0e 	ldrb.w	r3, [r2, #-14]
        if (((*buffer_ptr ==      'a') || (*buffer_ptr ==      'A')) &&
 800b17a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b17e:	2b55      	cmp	r3, #85	; 0x55
 800b180:	d111      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+2) ==  't') || (*(buffer_ptr+2) ==  'T')) &&
 800b182:	f812 3c0d 	ldrb.w	r3, [r2, #-13]
            ((*(buffer_ptr+1) ==  'u') || (*(buffer_ptr+1) ==  'U')) &&
 800b186:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b18a:	2b54      	cmp	r3, #84	; 0x54
 800b18c:	d10b      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+3) ==  'h') || (*(buffer_ptr+3) ==  'H')) &&
 800b18e:	f812 3c0c 	ldrb.w	r3, [r2, #-12]
            ((*(buffer_ptr+2) ==  't') || (*(buffer_ptr+2) ==  'T')) &&
 800b192:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b196:	2b48      	cmp	r3, #72	; 0x48
 800b198:	d105      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+4) ==  'o') || (*(buffer_ptr+4) ==  'O')) &&
 800b19a:	f812 3c0b 	ldrb.w	r3, [r2, #-11]
            ((*(buffer_ptr+3) ==  'h') || (*(buffer_ptr+3) ==  'H')) &&
 800b19e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1a2:	2b4f      	cmp	r3, #79	; 0x4f
 800b1a4:	d009      	beq.n	800b1ba <_nx_http_server_retrieve_basic_authorization+0x62>
 800b1a6:	3201      	adds	r2, #1
    while (((buffer_ptr+15) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800b1a8:	4294      	cmp	r4, r2
 800b1aa:	d047      	beq.n	800b23c <_nx_http_server_retrieve_basic_authorization+0xe4>
 800b1ac:	f812 3c0f 	ldrb.w	r3, [r2, #-15]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1dc      	bne.n	800b16e <_nx_http_server_retrieve_basic_authorization+0x16>
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	bcf0      	pop	{r4, r5, r6, r7}
 800b1b8:	4770      	bx	lr
            ((*(buffer_ptr+5) ==  'r') || (*(buffer_ptr+5) ==  'R')) &&
 800b1ba:	f812 3c0a 	ldrb.w	r3, [r2, #-10]
            ((*(buffer_ptr+4) ==  'o') || (*(buffer_ptr+4) ==  'O')) &&
 800b1be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1c2:	2b52      	cmp	r3, #82	; 0x52
 800b1c4:	d1ef      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+6) ==  'i') || (*(buffer_ptr+6) ==  'I')) &&
 800b1c6:	f812 3c09 	ldrb.w	r3, [r2, #-9]
            ((*(buffer_ptr+5) ==  'r') || (*(buffer_ptr+5) ==  'R')) &&
 800b1ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1ce:	2b49      	cmp	r3, #73	; 0x49
 800b1d0:	d1e9      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+7) ==  'z') || (*(buffer_ptr+7) ==  'Z')) &&
 800b1d2:	f812 3c08 	ldrb.w	r3, [r2, #-8]
            ((*(buffer_ptr+6) ==  'i') || (*(buffer_ptr+6) ==  'I')) &&
 800b1d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1da:	2b5a      	cmp	r3, #90	; 0x5a
 800b1dc:	d1e3      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+8) ==  'a') || (*(buffer_ptr+8) ==  'A')) &&
 800b1de:	f812 3c07 	ldrb.w	r3, [r2, #-7]
            ((*(buffer_ptr+7) ==  'z') || (*(buffer_ptr+7) ==  'Z')) &&
 800b1e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1e6:	2b41      	cmp	r3, #65	; 0x41
 800b1e8:	d1dd      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+9) ==  't') || (*(buffer_ptr+9) ==  'T')) &&
 800b1ea:	f812 3c06 	ldrb.w	r3, [r2, #-6]
            ((*(buffer_ptr+8) ==  'a') || (*(buffer_ptr+8) ==  'A')) &&
 800b1ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1f2:	2b54      	cmp	r3, #84	; 0x54
 800b1f4:	d1d7      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+10) == 'i') || (*(buffer_ptr+10) == 'I')) &&
 800b1f6:	f812 3c05 	ldrb.w	r3, [r2, #-5]
            ((*(buffer_ptr+9) ==  't') || (*(buffer_ptr+9) ==  'T')) &&
 800b1fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1fe:	2b49      	cmp	r3, #73	; 0x49
 800b200:	d1d1      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+11) == 'o') || (*(buffer_ptr+11) == 'O')) &&
 800b202:	f812 3c04 	ldrb.w	r3, [r2, #-4]
            ((*(buffer_ptr+10) == 'i') || (*(buffer_ptr+10) == 'I')) &&
 800b206:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b20a:	2b4f      	cmp	r3, #79	; 0x4f
 800b20c:	d1cb      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+12) == 'n') || (*(buffer_ptr+12) == 'N')) &&
 800b20e:	f812 3c03 	ldrb.w	r3, [r2, #-3]
            ((*(buffer_ptr+11) == 'o') || (*(buffer_ptr+11) == 'O')) &&
 800b212:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b216:	2b4e      	cmp	r3, #78	; 0x4e
 800b218:	d1c5      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            ((*(buffer_ptr+12) == 'n') || (*(buffer_ptr+12) == 'N')) &&
 800b21a:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 800b21e:	2b3a      	cmp	r3, #58	; 0x3a
 800b220:	d1c1      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
            (*(buffer_ptr+13) == ':') &&
 800b222:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800b226:	2b20      	cmp	r3, #32
 800b228:	d1bd      	bne.n	800b1a6 <_nx_http_server_retrieve_basic_authorization+0x4e>
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr == ' '))
 800b22a:	42a2      	cmp	r2, r4
 800b22c:	f102 0501 	add.w	r5, r2, #1
 800b230:	d208      	bcs.n	800b244 <_nx_http_server_retrieve_basic_authorization+0xec>
 800b232:	7813      	ldrb	r3, [r2, #0]
 800b234:	2b20      	cmp	r3, #32
 800b236:	d105      	bne.n	800b244 <_nx_http_server_retrieve_basic_authorization+0xec>
 800b238:	462a      	mov	r2, r5
 800b23a:	e7f6      	b.n	800b22a <_nx_http_server_retrieve_basic_authorization+0xd2>
        return(length);
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	bcf0      	pop	{r4, r5, r6, r7}
 800b240:	4618      	mov	r0, r3
 800b242:	4770      	bx	lr
 800b244:	1d95      	adds	r5, r2, #6
 800b246:	4613      	mov	r3, r2
    while (((buffer_ptr+6) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800b248:	42a5      	cmp	r5, r4
 800b24a:	d21e      	bcs.n	800b28a <_nx_http_server_retrieve_basic_authorization+0x132>
 800b24c:	7816      	ldrb	r6, [r2, #0]
 800b24e:	3201      	adds	r2, #1
        if (((*buffer_ptr ==      'b') || (*buffer_ptr ==      'B')) &&
 800b250:	f006 07df 	and.w	r7, r6, #223	; 0xdf
    while (((buffer_ptr+6) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800b254:	b1ce      	cbz	r6, 800b28a <_nx_http_server_retrieve_basic_authorization+0x132>
        if (((*buffer_ptr ==      'b') || (*buffer_ptr ==      'B')) &&
 800b256:	2f42      	cmp	r7, #66	; 0x42
 800b258:	d1f4      	bne.n	800b244 <_nx_http_server_retrieve_basic_authorization+0xec>
            ((*(buffer_ptr+1) ==  'a') || (*(buffer_ptr+1) ==  'A')) &&
 800b25a:	7813      	ldrb	r3, [r2, #0]
        if (((*buffer_ptr ==      'b') || (*buffer_ptr ==      'B')) &&
 800b25c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b260:	2b41      	cmp	r3, #65	; 0x41
 800b262:	d1ef      	bne.n	800b244 <_nx_http_server_retrieve_basic_authorization+0xec>
            ((*(buffer_ptr+2) ==  's') || (*(buffer_ptr+2) ==  'S')) &&
 800b264:	7853      	ldrb	r3, [r2, #1]
            ((*(buffer_ptr+1) ==  'a') || (*(buffer_ptr+1) ==  'A')) &&
 800b266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b26a:	2b53      	cmp	r3, #83	; 0x53
 800b26c:	d1ea      	bne.n	800b244 <_nx_http_server_retrieve_basic_authorization+0xec>
            ((*(buffer_ptr+3) ==  'i') || (*(buffer_ptr+3) ==  'I')) &&
 800b26e:	7893      	ldrb	r3, [r2, #2]
            ((*(buffer_ptr+2) ==  's') || (*(buffer_ptr+2) ==  'S')) &&
 800b270:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b274:	2b49      	cmp	r3, #73	; 0x49
 800b276:	d1e5      	bne.n	800b244 <_nx_http_server_retrieve_basic_authorization+0xec>
            ((*(buffer_ptr+4) ==  'c') || (*(buffer_ptr+4) ==  'C')) &&
 800b278:	78d3      	ldrb	r3, [r2, #3]
            ((*(buffer_ptr+3) ==  'i') || (*(buffer_ptr+3) ==  'I')) &&
 800b27a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b27e:	2b43      	cmp	r3, #67	; 0x43
 800b280:	d1e0      	bne.n	800b244 <_nx_http_server_retrieve_basic_authorization+0xec>
            ((*(buffer_ptr+4) ==  'c') || (*(buffer_ptr+4) ==  'C')) &&
 800b282:	7913      	ldrb	r3, [r2, #4]
 800b284:	2b20      	cmp	r3, #32
 800b286:	d1dd      	bne.n	800b244 <_nx_http_server_retrieve_basic_authorization+0xec>
 800b288:	462b      	mov	r3, r5
 800b28a:	461a      	mov	r2, r3
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr == ' '))
 800b28c:	42a2      	cmp	r2, r4
 800b28e:	f102 0501 	add.w	r5, r2, #1
 800b292:	d204      	bcs.n	800b29e <_nx_http_server_retrieve_basic_authorization+0x146>
 800b294:	7813      	ldrb	r3, [r2, #0]
 800b296:	2b20      	cmp	r3, #32
 800b298:	d101      	bne.n	800b29e <_nx_http_server_retrieve_basic_authorization+0x146>
 800b29a:	462a      	mov	r2, r5
 800b29c:	e7f6      	b.n	800b28c <_nx_http_server_retrieve_basic_authorization+0x134>
 800b29e:	2300      	movs	r3, #0
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != ' ') && (*buffer_ptr != (CHAR) 13) && (length < NX_HTTP_MAX_STRING))
 800b2a0:	4294      	cmp	r4, r2
 800b2a2:	d987      	bls.n	800b1b4 <_nx_http_server_retrieve_basic_authorization+0x5c>
 800b2a4:	f812 4b01 	ldrb.w	r4, [r2], #1
 800b2a8:	f014 0fdf 	tst.w	r4, #223	; 0xdf
 800b2ac:	d082      	beq.n	800b1b4 <_nx_http_server_retrieve_basic_authorization+0x5c>
 800b2ae:	2c0d      	cmp	r4, #13
 800b2b0:	d080      	beq.n	800b1b4 <_nx_http_server_retrieve_basic_authorization+0x5c>
 800b2b2:	2b37      	cmp	r3, #55	; 0x37
 800b2b4:	f43f af7e 	beq.w	800b1b4 <_nx_http_server_retrieve_basic_authorization+0x5c>
        authorization_request_ptr[length] =  *buffer_ptr++;
 800b2b8:	54cc      	strb	r4, [r1, r3]
        length++;
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	68c4      	ldr	r4, [r0, #12]
 800b2be:	e7ef      	b.n	800b2a0 <_nx_http_server_retrieve_basic_authorization+0x148>

0800b2c0 <_nx_http_server_number_convert>:
{
 800b2c0:	b4f0      	push	{r4, r5, r6, r7}
 800b2c2:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800b37c <_nx_http_server_number_convert+0xbc>
    size =  0;
 800b2c6:	2500      	movs	r5, #0
{
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	e037      	b.n	800b33c <_nx_http_server_number_convert+0x7c>
            string[j] =  string[j-1];
 800b2cc:	f813 7c01 	ldrb.w	r7, [r3, #-1]
        for (j = size; j != 0; j--)
 800b2d0:	2d01      	cmp	r5, #1
            string[j] =  string[j-1];
 800b2d2:	701f      	strb	r7, [r3, #0]
        for (j = size; j != 0; j--)
 800b2d4:	d02c      	beq.n	800b330 <_nx_http_server_number_convert+0x70>
            string[j] =  string[j-1];
 800b2d6:	f813 7c02 	ldrb.w	r7, [r3, #-2]
        for (j = size; j != 0; j--)
 800b2da:	2d02      	cmp	r5, #2
            string[j] =  string[j-1];
 800b2dc:	f803 7c01 	strb.w	r7, [r3, #-1]
        for (j = size; j != 0; j--)
 800b2e0:	d026      	beq.n	800b330 <_nx_http_server_number_convert+0x70>
            string[j] =  string[j-1];
 800b2e2:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        for (j = size; j != 0; j--)
 800b2e6:	2d03      	cmp	r5, #3
            string[j] =  string[j-1];
 800b2e8:	f803 7c02 	strb.w	r7, [r3, #-2]
        for (j = size; j != 0; j--)
 800b2ec:	d020      	beq.n	800b330 <_nx_http_server_number_convert+0x70>
            string[j] =  string[j-1];
 800b2ee:	f813 7c04 	ldrb.w	r7, [r3, #-4]
        for (j = size; j != 0; j--)
 800b2f2:	2d04      	cmp	r5, #4
            string[j] =  string[j-1];
 800b2f4:	f803 7c03 	strb.w	r7, [r3, #-3]
        for (j = size; j != 0; j--)
 800b2f8:	d01a      	beq.n	800b330 <_nx_http_server_number_convert+0x70>
            string[j] =  string[j-1];
 800b2fa:	f813 7c05 	ldrb.w	r7, [r3, #-5]
        for (j = size; j != 0; j--)
 800b2fe:	2d05      	cmp	r5, #5
            string[j] =  string[j-1];
 800b300:	f803 7c04 	strb.w	r7, [r3, #-4]
        for (j = size; j != 0; j--)
 800b304:	d014      	beq.n	800b330 <_nx_http_server_number_convert+0x70>
            string[j] =  string[j-1];
 800b306:	f813 7c06 	ldrb.w	r7, [r3, #-6]
        for (j = size; j != 0; j--)
 800b30a:	2d06      	cmp	r5, #6
            string[j] =  string[j-1];
 800b30c:	f803 7c05 	strb.w	r7, [r3, #-5]
        for (j = size; j != 0; j--)
 800b310:	d00e      	beq.n	800b330 <_nx_http_server_number_convert+0x70>
            string[j] =  string[j-1];
 800b312:	f813 7c07 	ldrb.w	r7, [r3, #-7]
        for (j = size; j != 0; j--)
 800b316:	2d07      	cmp	r5, #7
            string[j] =  string[j-1];
 800b318:	f803 7c06 	strb.w	r7, [r3, #-6]
        for (j = size; j != 0; j--)
 800b31c:	d008      	beq.n	800b330 <_nx_http_server_number_convert+0x70>
            string[j] =  string[j-1];
 800b31e:	f813 7c08 	ldrb.w	r7, [r3, #-8]
        for (j = size; j != 0; j--)
 800b322:	2d08      	cmp	r5, #8
            string[j] =  string[j-1];
 800b324:	f803 7c07 	strb.w	r7, [r3, #-7]
        for (j = size; j != 0; j--)
 800b328:	d002      	beq.n	800b330 <_nx_http_server_number_convert+0x70>
            string[j] =  string[j-1];
 800b32a:	780d      	ldrb	r5, [r1, #0]
 800b32c:	f803 5c08 	strb.w	r5, [r3, #-8]
        string[0] =  (CHAR) (digit + 0x30);
 800b330:	700a      	strb	r2, [r1, #0]
        if (number == 0)
 800b332:	b1bc      	cbz	r4, 800b364 <_nx_http_server_number_convert+0xa4>
    while (size < 10)
 800b334:	2e0a      	cmp	r6, #10
 800b336:	d01a      	beq.n	800b36e <_nx_http_server_number_convert+0xae>
 800b338:	3301      	adds	r3, #1
{
 800b33a:	4635      	mov	r5, r6
 800b33c:	fbac 2400 	umull	r2, r4, ip, r0
        for (j = size; j != 0; j--)
 800b340:	4299      	cmp	r1, r3
 800b342:	f105 0601 	add.w	r6, r5, #1
 800b346:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 800b34a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800b34e:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 800b352:	4620      	mov	r0, r4
 800b354:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800b358:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 800b35c:	d1b6      	bne.n	800b2cc <_nx_http_server_number_convert+0xc>
        string[0] =  (CHAR) (digit + 0x30);
 800b35e:	700a      	strb	r2, [r1, #0]
        if (number == 0)
 800b360:	2c00      	cmp	r4, #0
 800b362:	d1e9      	bne.n	800b338 <_nx_http_server_number_convert+0x78>
    string[size] =  (CHAR) NX_NULL;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4630      	mov	r0, r6
    string[size] =  (CHAR) NX_NULL;
 800b368:	558b      	strb	r3, [r1, r6]
}
 800b36a:	bcf0      	pop	{r4, r5, r6, r7}
 800b36c:	4770      	bx	lr
    string[size] =  (CHAR) NX_NULL;
 800b36e:	2600      	movs	r6, #0
        string[0] = '0';
 800b370:	2330      	movs	r3, #48	; 0x30
}
 800b372:	4630      	mov	r0, r6
    string[size] =  (CHAR) NX_NULL;
 800b374:	728e      	strb	r6, [r1, #10]
        string[0] = '0';
 800b376:	700b      	strb	r3, [r1, #0]
}
 800b378:	bcf0      	pop	{r4, r5, r6, r7}
 800b37a:	4770      	bx	lr
 800b37c:	cccccccd 	.word	0xcccccccd

0800b380 <_nx_http_base64_decode>:
    length =  ((length * 6) / 8);
 800b380:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b384:	f3c1 019c 	ubfx	r1, r1, #2, #29
{
 800b388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    while ((j < length) && (base64name[i]) && (base64name[i] != '='))
 800b38c:	2900      	cmp	r1, #0
 800b38e:	d07a      	beq.n	800b486 <_nx_http_base64_decode+0x106>
 800b390:	7803      	ldrb	r3, [r0, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d077      	beq.n	800b486 <_nx_http_base64_decode+0x106>
 800b396:	2b3d      	cmp	r3, #61	; 0x3d
 800b398:	d075      	beq.n	800b486 <_nx_http_base64_decode+0x106>
    step =  0;
 800b39a:	2700      	movs	r7, #0
 800b39c:	4616      	mov	r6, r2
    j =  0;
 800b39e:	463d      	mov	r5, r7
    i =     0;
 800b3a0:	46bc      	mov	ip, r7
 800b3a2:	e023      	b.n	800b3ec <_nx_http_base64_decode+0x6c>
            value1 =  (UINT) (base64name[i] - 'A');
 800b3a4:	4623      	mov	r3, r4
        if ((base64name[i+1] >= 'A') && (base64name[i+1] <= 'Z'))
 800b3a6:	f10c 0801 	add.w	r8, ip, #1
 800b3aa:	f810 e008 	ldrb.w	lr, [r0, r8]
 800b3ae:	f1ae 0441 	sub.w	r4, lr, #65	; 0x41
 800b3b2:	fa5f f984 	uxtb.w	r9, r4
 800b3b6:	f1b9 0f19 	cmp.w	r9, #25
 800b3ba:	d905      	bls.n	800b3c8 <_nx_http_base64_decode+0x48>
        else if ((base64name[i+1] >= 'a') && (base64name[i+1] <= 'z'))
 800b3bc:	f1ae 0461 	sub.w	r4, lr, #97	; 0x61
 800b3c0:	2c19      	cmp	r4, #25
 800b3c2:	d835      	bhi.n	800b430 <_nx_http_base64_decode+0xb0>
            value2 =  (UINT) (base64name[i+1] - 'a') + 26;
 800b3c4:	f1ae 0447 	sub.w	r4, lr, #71	; 0x47
 800b3c8:	46b6      	mov	lr, r6
        if (step == 0)
 800b3ca:	b9e7      	cbnz	r7, 800b406 <_nx_http_base64_decode+0x86>
            name[j++] =    (CHAR) (((value1 & 0x3f) << 2) | ((value2 >> 4) & 3));
 800b3cc:	0924      	lsrs	r4, r4, #4
 800b3ce:	3501      	adds	r5, #1
            i++;
 800b3d0:	46c4      	mov	ip, r8
            step++;
 800b3d2:	2701      	movs	r7, #1
            name[j++] =    (CHAR) (((value1 & 0x3f) << 2) | ((value2 >> 4) & 3));
 800b3d4:	ea44 0383 	orr.w	r3, r4, r3, lsl #2
 800b3d8:	7033      	strb	r3, [r6, #0]
 800b3da:	1956      	adds	r6, r2, r5
 800b3dc:	46b6      	mov	lr, r6
    while ((j < length) && (base64name[i]) && (base64name[i] != '='))
 800b3de:	428d      	cmp	r5, r1
 800b3e0:	d221      	bcs.n	800b426 <_nx_http_base64_decode+0xa6>
 800b3e2:	f810 300c 	ldrb.w	r3, [r0, ip]
 800b3e6:	b1f3      	cbz	r3, 800b426 <_nx_http_base64_decode+0xa6>
 800b3e8:	2b3d      	cmp	r3, #61	; 0x3d
 800b3ea:	d01c      	beq.n	800b426 <_nx_http_base64_decode+0xa6>
        if ((base64name[i] >= 'A') && (base64name[i] <= 'Z'))
 800b3ec:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 800b3f0:	fa5f fe84 	uxtb.w	lr, r4
 800b3f4:	f1be 0f19 	cmp.w	lr, #25
 800b3f8:	d9d4      	bls.n	800b3a4 <_nx_http_base64_decode+0x24>
        else if ((base64name[i] >= 'a') && (base64name[i] <= 'z'))
 800b3fa:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 800b3fe:	2c19      	cmp	r4, #25
 800b400:	d81d      	bhi.n	800b43e <_nx_http_base64_decode+0xbe>
            value1 =  (UINT) (base64name[i] - 'a') + 26;
 800b402:	3b47      	subs	r3, #71	; 0x47
 800b404:	e7cf      	b.n	800b3a6 <_nx_http_base64_decode+0x26>
        else if (step == 1)
 800b406:	2f01      	cmp	r7, #1
 800b408:	d01f      	beq.n	800b44a <_nx_http_base64_decode+0xca>
        else if (step == 2)
 800b40a:	2f02      	cmp	r7, #2
 800b40c:	d1e7      	bne.n	800b3de <_nx_http_base64_decode+0x5e>
            name[j++] =   (CHAR) (((value1 & 3) << 6) | (value2 & 0x3f));
 800b40e:	3501      	adds	r5, #1
 800b410:	ea44 1383 	orr.w	r3, r4, r3, lsl #6
            i++;
 800b414:	f10c 0c02 	add.w	ip, ip, #2
            step =  0;
 800b418:	2700      	movs	r7, #0
            name[j++] =   (CHAR) (((value1 & 3) << 6) | (value2 & 0x3f));
 800b41a:	7033      	strb	r3, [r6, #0]
    while ((j < length) && (base64name[i]) && (base64name[i] != '='))
 800b41c:	428d      	cmp	r5, r1
 800b41e:	eb02 0605 	add.w	r6, r2, r5
 800b422:	46b6      	mov	lr, r6
 800b424:	d3dd      	bcc.n	800b3e2 <_nx_http_base64_decode+0x62>
    name[j] =  NX_NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	f88e 3000 	strb.w	r3, [lr]
}
 800b42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if ((base64name[i+1] >= '0') && (base64name[i+1] <= '9'))
 800b430:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
 800b434:	2c09      	cmp	r4, #9
 800b436:	d819      	bhi.n	800b46c <_nx_http_base64_decode+0xec>
            value2 =  (UINT) (base64name[i+1] - '0') + 52;
 800b438:	f10e 0404 	add.w	r4, lr, #4
 800b43c:	e7c4      	b.n	800b3c8 <_nx_http_base64_decode+0x48>
        else if ((base64name[i] >= '0') && (base64name[i] <= '9'))
 800b43e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800b442:	2c09      	cmp	r4, #9
 800b444:	d80b      	bhi.n	800b45e <_nx_http_base64_decode+0xde>
            value1 =  (UINT) (base64name[i] - '0') + 52;
 800b446:	3304      	adds	r3, #4
 800b448:	e7ad      	b.n	800b3a6 <_nx_http_base64_decode+0x26>
            name[j++] =    (CHAR) (((value1 & 0xF) << 4) | (value2 >> 2));
 800b44a:	08a4      	lsrs	r4, r4, #2
 800b44c:	3501      	adds	r5, #1
            i++;
 800b44e:	46c4      	mov	ip, r8
            step++;
 800b450:	2702      	movs	r7, #2
            name[j++] =    (CHAR) (((value1 & 0xF) << 4) | (value2 >> 2));
 800b452:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 800b456:	7033      	strb	r3, [r6, #0]
 800b458:	1956      	adds	r6, r2, r5
 800b45a:	46b6      	mov	lr, r6
 800b45c:	e7bf      	b.n	800b3de <_nx_http_base64_decode+0x5e>
        else if (base64name[i] == '+')
 800b45e:	2b2b      	cmp	r3, #43	; 0x2b
 800b460:	d00f      	beq.n	800b482 <_nx_http_base64_decode+0x102>
            value1 =  63;
 800b462:	2b2f      	cmp	r3, #47	; 0x2f
 800b464:	bf14      	ite	ne
 800b466:	2300      	movne	r3, #0
 800b468:	233f      	moveq	r3, #63	; 0x3f
 800b46a:	e79c      	b.n	800b3a6 <_nx_http_base64_decode+0x26>
        else if (base64name[i+1] == '+')
 800b46c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
 800b470:	d005      	beq.n	800b47e <_nx_http_base64_decode+0xfe>
            value2 =  63;
 800b472:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 800b476:	bf14      	ite	ne
 800b478:	2400      	movne	r4, #0
 800b47a:	243f      	moveq	r4, #63	; 0x3f
 800b47c:	e7a4      	b.n	800b3c8 <_nx_http_base64_decode+0x48>
            value2 =  62;
 800b47e:	243e      	movs	r4, #62	; 0x3e
 800b480:	e7a2      	b.n	800b3c8 <_nx_http_base64_decode+0x48>
            value1 =  62;
 800b482:	233e      	movs	r3, #62	; 0x3e
 800b484:	e78f      	b.n	800b3a6 <_nx_http_base64_decode+0x26>
    while ((j < length) && (base64name[i]) && (base64name[i] != '='))
 800b486:	4696      	mov	lr, r2
    name[j] =  NX_NULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	f88e 3000 	strb.w	r3, [lr]
}
 800b48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b492:	bf00      	nop

0800b494 <_nx_http_server_basic_authenticate>:
{
 800b494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b498:	b086      	sub	sp, #24
CHAR        crlf[2] = {13,10};
 800b49a:	4d6d      	ldr	r5, [pc, #436]	; (800b650 <_nx_http_server_basic_authenticate+0x1bc>)
    *auth_request_present = NX_FALSE;
 800b49c:	2400      	movs	r4, #0
CHAR        quote[2] = {0x22, 0};
 800b49e:	f04f 0c22 	mov.w	ip, #34	; 0x22
{
 800b4a2:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800b4a6:	4689      	mov	r9, r1
CHAR        crlf[2] = {13,10};
 800b4a8:	f8b5 e000 	ldrh.w	lr, [r5]
{
 800b4ac:	4690      	mov	r8, r2
    memset(&authorization_decoded[0], 0, sizeof(authorization_decoded));
 800b4ae:	4e69      	ldr	r6, [pc, #420]	; (800b654 <_nx_http_server_basic_authenticate+0x1c0>)
    memset(&authorization_request[0], 0, sizeof(authorization_request));
 800b4b0:	2238      	movs	r2, #56	; 0x38
{
 800b4b2:	9103      	str	r1, [sp, #12]
 800b4b4:	4605      	mov	r5, r0
    memset(&authorization_request[0], 0, sizeof(authorization_request));
 800b4b6:	4621      	mov	r1, r4
    *auth_request_present = NX_FALSE;
 800b4b8:	f8ca 4000 	str.w	r4, [sl]
    memset(&authorization_request[0], 0, sizeof(authorization_request));
 800b4bc:	4866      	ldr	r0, [pc, #408]	; (800b658 <_nx_http_server_basic_authenticate+0x1c4>)
{
 800b4be:	461f      	mov	r7, r3
CHAR        crlf[2] = {13,10};
 800b4c0:	f8ad e014 	strh.w	lr, [sp, #20]
CHAR        quote[2] = {0x22, 0};
 800b4c4:	f8ad c010 	strh.w	ip, [sp, #16]
    memset(&authorization_request[0], 0, sizeof(authorization_request));
 800b4c8:	f013 f867 	bl	801e59a <memset>
    memset(&authorization_decoded[0], 0, sizeof(authorization_decoded));
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	222a      	movs	r2, #42	; 0x2a
 800b4d2:	f013 f862 	bl	801e59a <memset>
    length = _nx_http_server_retrieve_basic_authorization(packet_ptr, authorization_request);
 800b4d6:	4648      	mov	r0, r9
 800b4d8:	495f      	ldr	r1, [pc, #380]	; (800b658 <_nx_http_server_basic_authenticate+0x1c4>)
 800b4da:	f7ff fe3d 	bl	800b158 <_nx_http_server_retrieve_basic_authorization>
    if (length)
 800b4de:	b328      	cbz	r0, 800b52c <_nx_http_server_basic_authenticate+0x98>
        *auth_request_present = NX_TRUE;
 800b4e0:	f04f 0901 	mov.w	r9, #1
        _nx_http_base64_decode(authorization_request, length, authorization_decoded);
 800b4e4:	4601      	mov	r1, r0
 800b4e6:	4632      	mov	r2, r6
 800b4e8:	485b      	ldr	r0, [pc, #364]	; (800b658 <_nx_http_server_basic_authenticate+0x1c4>)
        *auth_request_present = NX_TRUE;
 800b4ea:	f8ca 9000 	str.w	r9, [sl]
        _nx_http_base64_decode(authorization_request, length, authorization_decoded);
 800b4ee:	f7ff ff47 	bl	800b380 <_nx_http_base64_decode>
        while (name_ptr[i] && (i < sizeof(authorization_decoded)))
 800b4f2:	f898 3000 	ldrb.w	r3, [r8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 80a6 	beq.w	800b648 <_nx_http_server_basic_authenticate+0x1b4>
        i =  0;
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	4642      	mov	r2, r8
        match = NX_TRUE;
 800b500:	4648      	mov	r0, r9
 800b502:	4634      	mov	r4, r6
 800b504:	e001      	b.n	800b50a <_nx_http_server_basic_authenticate+0x76>
        while (name_ptr[i] && (i < sizeof(authorization_decoded)))
 800b506:	292a      	cmp	r1, #42	; 0x2a
 800b508:	d010      	beq.n	800b52c <_nx_http_server_basic_authenticate+0x98>
            if (name_ptr[i] != authorization_decoded[i])
 800b50a:	f814 cb01 	ldrb.w	ip, [r4], #1
            i++;
 800b50e:	3101      	adds	r1, #1
                match = NX_FALSE;
 800b510:	459c      	cmp	ip, r3
 800b512:	bf18      	it	ne
 800b514:	2000      	movne	r0, #0
        while (name_ptr[i] && (i < sizeof(authorization_decoded)))
 800b516:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1f3      	bne.n	800b506 <_nx_http_server_basic_authenticate+0x72>
        if (match && (i < sizeof(authorization_decoded)) && (authorization_decoded[i] == ':'))
 800b51e:	2929      	cmp	r1, #41	; 0x29
 800b520:	d804      	bhi.n	800b52c <_nx_http_server_basic_authenticate+0x98>
 800b522:	07c3      	lsls	r3, r0, #31
 800b524:	d502      	bpl.n	800b52c <_nx_http_server_basic_authenticate+0x98>
 800b526:	5c73      	ldrb	r3, [r6, r1]
 800b528:	2b3a      	cmp	r3, #58	; 0x3a
 800b52a:	d06c      	beq.n	800b606 <_nx_http_server_basic_authenticate+0x172>
        status1 =  nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800b52c:	f04f 33ff 	mov.w	r3, #4294967295
 800b530:	224c      	movs	r2, #76	; 0x4c
 800b532:	a903      	add	r1, sp, #12
 800b534:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800b536:	f7fb f8a9 	bl	800668c <_nx_packet_allocate>
        if (status1 != NX_SUCCESS)
 800b53a:	4604      	mov	r4, r0
 800b53c:	b130      	cbz	r0, 800b54c <_nx_http_server_basic_authenticate+0xb8>
            server_ptr -> nx_http_server_allocation_errors++;
 800b53e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b540:	3301      	adds	r3, #1
 800b542:	666b      	str	r3, [r5, #100]	; 0x64
}
 800b544:	4620      	mov	r0, r4
 800b546:	b006      	add	sp, #24
 800b548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,
 800b54c:	f04f 34ff 	mov.w	r4, #4294967295
 800b550:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b552:	2208      	movs	r2, #8
 800b554:	4941      	ldr	r1, [pc, #260]	; (800b65c <_nx_http_server_basic_authenticate+0x1c8>)
 800b556:	9400      	str	r4, [sp, #0]
 800b558:	9803      	ldr	r0, [sp, #12]
 800b55a:	f7fb f8f5 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, " ", 1, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b55e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b560:	2201      	movs	r2, #1
 800b562:	9400      	str	r4, [sp, #0]
 800b564:	493e      	ldr	r1, [pc, #248]	; (800b660 <_nx_http_server_basic_authenticate+0x1cc>)
 800b566:	9803      	ldr	r0, [sp, #12]
 800b568:	f7fb f8ee 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, NX_HTTP_STATUS_UNAUTHORIZED, sizeof(NX_HTTP_STATUS_UNAUTHORIZED) - 1,
 800b56c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b56e:	2210      	movs	r2, #16
 800b570:	9400      	str	r4, [sp, #0]
 800b572:	493c      	ldr	r1, [pc, #240]	; (800b664 <_nx_http_server_basic_authenticate+0x1d0>)
 800b574:	9803      	ldr	r0, [sp, #12]
 800b576:	f7fb f8e7 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, crlf, 2,
 800b57a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b57c:	2202      	movs	r2, #2
 800b57e:	a905      	add	r1, sp, #20
 800b580:	9400      	str	r4, [sp, #0]
 800b582:	9803      	ldr	r0, [sp, #12]
 800b584:	f7fb f8e0 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, "WWW-Authenticate: Basic realm=", 30,
 800b588:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b58a:	221e      	movs	r2, #30
 800b58c:	9400      	str	r4, [sp, #0]
 800b58e:	4936      	ldr	r1, [pc, #216]	; (800b668 <_nx_http_server_basic_authenticate+0x1d4>)
 800b590:	9803      	ldr	r0, [sp, #12]
 800b592:	f7fb f8d9 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, quote, 1,
 800b596:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b598:	a904      	add	r1, sp, #16
 800b59a:	9400      	str	r4, [sp, #0]
 800b59c:	2201      	movs	r2, #1
 800b59e:	9803      	ldr	r0, [sp, #12]
 800b5a0:	f7fb f8d2 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, realm_ptr, realm_length,
 800b5a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b5a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5a8:	9400      	str	r4, [sp, #0]
 800b5aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b5ac:	9803      	ldr	r0, [sp, #12]
 800b5ae:	f7fb f8cb 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, quote, 1,
 800b5b2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b5b4:	a904      	add	r1, sp, #16
 800b5b6:	9400      	str	r4, [sp, #0]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	9803      	ldr	r0, [sp, #12]
 800b5bc:	f7fb f8c4 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, crlf, 2,
 800b5c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b5c2:	a905      	add	r1, sp, #20
 800b5c4:	9400      	str	r4, [sp, #0]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	9803      	ldr	r0, [sp, #12]
 800b5ca:	f7fb f8bd 	bl	8006748 <_nx_packet_data_append>
        nx_packet_data_append(packet_ptr, crlf, 2,
 800b5ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b5d0:	a905      	add	r1, sp, #20
 800b5d2:	9400      	str	r4, [sp, #0]
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	9803      	ldr	r0, [sp, #12]
 800b5d8:	f7fb f8b6 	bl	8006748 <_nx_packet_data_append>
        status1 =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800b5dc:	f505 7016 	add.w	r0, r5, #600	; 0x258
 800b5e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5e4:	9903      	ldr	r1, [sp, #12]
 800b5e6:	f7fc fd2d 	bl	8008044 <_nx_tcp_socket_send>
        if (status1)
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	b130      	cbz	r0, 800b5fc <_nx_http_server_basic_authenticate+0x168>
            nx_packet_release(packet_ptr);
 800b5ee:	9803      	ldr	r0, [sp, #12]
 800b5f0:	f7fb f9fe 	bl	80069f0 <_nx_packet_release>
}
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	b006      	add	sp, #24
 800b5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fc:	24e4      	movs	r4, #228	; 0xe4
 800b5fe:	4620      	mov	r0, r4
 800b600:	b006      	add	sp, #24
 800b602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            while (password_ptr[j] && (i < sizeof(authorization_decoded)))
 800b606:	783b      	ldrb	r3, [r7, #0]
            i++;
 800b608:	3101      	adds	r1, #1
            while (password_ptr[j] && (i < sizeof(authorization_decoded)))
 800b60a:	b1fb      	cbz	r3, 800b64c <_nx_http_server_basic_authenticate+0x1b8>
 800b60c:	292a      	cmp	r1, #42	; 0x2a
 800b60e:	d08d      	beq.n	800b52c <_nx_http_server_basic_authenticate+0x98>
 800b610:	1870      	adds	r0, r6, r1
            match = NX_TRUE;
 800b612:	2201      	movs	r2, #1
 800b614:	e001      	b.n	800b61a <_nx_http_server_basic_authenticate+0x186>
            while (password_ptr[j] && (i < sizeof(authorization_decoded)))
 800b616:	292a      	cmp	r1, #42	; 0x2a
 800b618:	d088      	beq.n	800b52c <_nx_http_server_basic_authenticate+0x98>
                if (password_ptr[j] != authorization_decoded[i])
 800b61a:	f810 4b01 	ldrb.w	r4, [r0], #1
                i++;
 800b61e:	3101      	adds	r1, #1
                    match = NX_FALSE;
 800b620:	429c      	cmp	r4, r3
 800b622:	bf18      	it	ne
 800b624:	2200      	movne	r2, #0
            while (password_ptr[j] && (i < sizeof(authorization_decoded)))
 800b626:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1f3      	bne.n	800b616 <_nx_http_server_basic_authenticate+0x182>
 800b62e:	f002 0201 	and.w	r2, r2, #1
            if (match && (i < sizeof(authorization_decoded)) && (authorization_decoded[i] == (CHAR) NX_NULL))
 800b632:	2929      	cmp	r1, #41	; 0x29
 800b634:	f63f af7a 	bhi.w	800b52c <_nx_http_server_basic_authenticate+0x98>
 800b638:	2a00      	cmp	r2, #0
 800b63a:	f43f af77 	beq.w	800b52c <_nx_http_server_basic_authenticate+0x98>
 800b63e:	5c74      	ldrb	r4, [r6, r1]
 800b640:	2c00      	cmp	r4, #0
 800b642:	f47f af73 	bne.w	800b52c <_nx_http_server_basic_authenticate+0x98>
 800b646:	e77d      	b.n	800b544 <_nx_http_server_basic_authenticate+0xb0>
        i =  0;
 800b648:	4619      	mov	r1, r3
 800b64a:	e76c      	b.n	800b526 <_nx_http_server_basic_authenticate+0x92>
            while (password_ptr[j] && (i < sizeof(authorization_decoded)))
 800b64c:	2201      	movs	r2, #1
 800b64e:	e7f0      	b.n	800b632 <_nx_http_server_basic_authenticate+0x19e>
 800b650:	0801f940 	.word	0x0801f940
 800b654:	20001a08 	.word	0x20001a08
 800b658:	20001a34 	.word	0x20001a34
 800b65c:	08025584 	.word	0x08025584
 800b660:	0802525c 	.word	0x0802525c
 800b664:	08025590 	.word	0x08025590
 800b668:	080255a4 	.word	0x080255a4

0800b66c <_nx_http_server_date_to_string>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_http_server_date_to_string(NX_HTTP_SERVER_DATE *date, CHAR *string)
{
 800b66c:	4602      	mov	r2, r0

UINT index = 0;

    /* RDC1122-date. */
    /* Append weekday. */
    string[index++] = *(_nx_http_server_weekday[date -> nx_http_server_weekday]);
 800b66e:	4869      	ldr	r0, [pc, #420]	; (800b814 <_nx_http_server_date_to_string+0x1a8>)
    while(count > 0)
    {
        count--;

        /* Compute the next decimal digit.  */
        digit =  date % 10;
 800b670:	4b69      	ldr	r3, [pc, #420]	; (800b818 <_nx_http_server_date_to_string+0x1ac>)
{
 800b672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    string[index++] = *(_nx_http_server_weekday[date -> nx_http_server_weekday]);
 800b676:	79d5      	ldrb	r5, [r2, #7]
    string[index++] = ' ';
 800b678:	2620      	movs	r6, #32
    string[index++] = ',';
 800b67a:	272c      	movs	r7, #44	; 0x2c
    *((ULONG*)string) = 0x30303030;
 800b67c:	f04f 3430 	mov.w	r4, #808464432	; 0x30303030
    string[index++] = *(_nx_http_server_weekday[date -> nx_http_server_weekday]);
 800b680:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    string[index++] = ':';
 800b684:	f04f 0e3a 	mov.w	lr, #58	; 0x3a
    string[index++] = *(_nx_http_server_weekday[date -> nx_http_server_weekday]);
 800b688:	f895 c000 	ldrb.w	ip, [r5]
 800b68c:	f881 c000 	strb.w	ip, [r1]
    string[index++] = *(_nx_http_server_weekday[date -> nx_http_server_weekday] + 1);
 800b690:	f892 c007 	ldrb.w	ip, [r2, #7]
 800b694:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 800b698:	f89c c001 	ldrb.w	ip, [ip, #1]
 800b69c:	f881 c001 	strb.w	ip, [r1, #1]
    string[index++] = *(_nx_http_server_weekday[date -> nx_http_server_weekday] + 2);
 800b6a0:	f892 c007 	ldrb.w	ip, [r2, #7]
 800b6a4:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800b6a8:	7880      	ldrb	r0, [r0, #2]
    string[index++] = ',';
 800b6aa:	70cf      	strb	r7, [r1, #3]
    string[index++] = *(_nx_http_server_weekday[date -> nx_http_server_weekday] + 2);
 800b6ac:	7088      	strb	r0, [r1, #2]
    string[index++] = ' ';
 800b6ae:	710e      	strb	r6, [r1, #4]
    _nx_http_server_date_convert(date -> nx_http_server_day, 2, &string[index]);
 800b6b0:	78d7      	ldrb	r7, [r2, #3]
    *((ULONG*)string) = 0x30303030;
 800b6b2:	f8c1 4005 	str.w	r4, [r1, #5]
        digit =  date % 10;
 800b6b6:	fba3 c007 	umull	ip, r0, r3, r7
    string[index++] = ' ';
 800b6ba:	71ce      	strb	r6, [r1, #7]
        digit =  date % 10;
 800b6bc:	08c0      	lsrs	r0, r0, #3
 800b6be:	fba3 8c00 	umull	r8, ip, r3, r0
 800b6c2:	eb00 0880 	add.w	r8, r0, r0, lsl #2
 800b6c6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800b6ca:	eba7 0748 	sub.w	r7, r7, r8, lsl #1
 800b6ce:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2

        /* Update the input date.  */
        date =  date / 10;

        /* Store the new digit in ASCII form.  */
        string[count] =  (CHAR) (digit + 0x30);
 800b6d2:	3730      	adds	r7, #48	; 0x30
        digit =  date % 10;
 800b6d4:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
    string[index++] = *(_nx_http_server_month[date -> nx_http_server_month]);
 800b6d8:	f8df c148 	ldr.w	ip, [pc, #328]	; 800b824 <_nx_http_server_date_to_string+0x1b8>
        string[count] =  (CHAR) (digit + 0x30);
 800b6dc:	718f      	strb	r7, [r1, #6]
 800b6de:	3030      	adds	r0, #48	; 0x30
        date =  date / 10;
 800b6e0:	4f4e      	ldr	r7, [pc, #312]	; (800b81c <_nx_http_server_date_to_string+0x1b0>)
        string[count] =  (CHAR) (digit + 0x30);
 800b6e2:	7148      	strb	r0, [r1, #5]
    string[index++] = *(_nx_http_server_month[date -> nx_http_server_month]);
 800b6e4:	7890      	ldrb	r0, [r2, #2]
 800b6e6:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 800b6ea:	7800      	ldrb	r0, [r0, #0]
 800b6ec:	7208      	strb	r0, [r1, #8]
    string[index++] = *(_nx_http_server_month[date -> nx_http_server_month] + 1);
 800b6ee:	7890      	ldrb	r0, [r2, #2]
 800b6f0:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 800b6f4:	7840      	ldrb	r0, [r0, #1]
 800b6f6:	7248      	strb	r0, [r1, #9]
    string[index++] = *(_nx_http_server_month[date -> nx_http_server_month] + 2);
 800b6f8:	7890      	ldrb	r0, [r2, #2]
 800b6fa:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 800b6fe:	7880      	ldrb	r0, [r0, #2]
    string[index++] = ' ';
 800b700:	72ce      	strb	r6, [r1, #11]
    string[index++] = *(_nx_http_server_month[date -> nx_http_server_month] + 2);
 800b702:	7288      	strb	r0, [r1, #10]
    _nx_http_server_date_convert(date -> nx_http_server_year, 4, &string[index]);
 800b704:	f8b2 8000 	ldrh.w	r8, [r2]
    string[index++] = ' ';
 800b708:	740e      	strb	r6, [r1, #16]
        digit =  date % 10;
 800b70a:	fba3 0c08 	umull	r0, ip, r3, r8
        date =  date / 10;
 800b70e:	4844      	ldr	r0, [pc, #272]	; (800b820 <_nx_http_server_date_to_string+0x1b4>)
 800b710:	fba7 9708 	umull	r9, r7, r7, r8
 800b714:	fba0 9008 	umull	r9, r0, r0, r8
        digit =  date % 10;
 800b718:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        date =  date / 10;
 800b71c:	097f      	lsrs	r7, r7, #5
        digit =  date % 10;
 800b71e:	eb0c 0b8c 	add.w	fp, ip, ip, lsl #2
 800b722:	fba3 9a0c 	umull	r9, sl, r3, ip
        date =  date / 10;
 800b726:	0980      	lsrs	r0, r0, #6
        digit =  date % 10;
 800b728:	fba3 5907 	umull	r5, r9, r3, r7
 800b72c:	eba8 084b 	sub.w	r8, r8, fp, lsl #1
 800b730:	fba3 5b00 	umull	r5, fp, r3, r0
 800b734:	ea4f 0ada 	mov.w	sl, sl, lsr #3
        string[count] =  (CHAR) (digit + 0x30);
 800b738:	f108 0830 	add.w	r8, r8, #48	; 0x30
        digit =  date % 10;
 800b73c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800b740:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
        string[count] =  (CHAR) (digit + 0x30);
 800b744:	f881 800f 	strb.w	r8, [r1, #15]
        digit =  date % 10;
 800b748:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800b74c:	eb0b 088b 	add.w	r8, fp, fp, lsl #2
 800b750:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800b754:	ebac 0c4a 	sub.w	ip, ip, sl, lsl #1
 800b758:	eba7 0749 	sub.w	r7, r7, r9, lsl #1
 800b75c:	eba0 0048 	sub.w	r0, r0, r8, lsl #1
        string[count] =  (CHAR) (digit + 0x30);
 800b760:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800b764:	3730      	adds	r7, #48	; 0x30
 800b766:	3030      	adds	r0, #48	; 0x30
 800b768:	f881 c00e 	strb.w	ip, [r1, #14]
 800b76c:	734f      	strb	r7, [r1, #13]
 800b76e:	7308      	strb	r0, [r1, #12]
    _nx_http_server_date_convert(date -> nx_http_server_hour, 2, &string[index]);
 800b770:	7917      	ldrb	r7, [r2, #4]
    *((ULONG*)string) = 0x30303030;
 800b772:	f8c1 4011 	str.w	r4, [r1, #17]
        digit =  date % 10;
 800b776:	fba3 5007 	umull	r5, r0, r3, r7
    string[index++] = ':';
 800b77a:	f881 e013 	strb.w	lr, [r1, #19]
        digit =  date % 10;
 800b77e:	08c0      	lsrs	r0, r0, #3
 800b780:	fba3 5c00 	umull	r5, ip, r3, r0
 800b784:	eb00 0880 	add.w	r8, r0, r0, lsl #2
 800b788:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800b78c:	eba7 0748 	sub.w	r7, r7, r8, lsl #1
 800b790:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
        string[count] =  (CHAR) (digit + 0x30);
 800b794:	3730      	adds	r7, #48	; 0x30
        digit =  date % 10;
 800b796:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
    string[index++] = 'T';
 800b79a:	f04f 0c54 	mov.w	ip, #84	; 0x54
        string[count] =  (CHAR) (digit + 0x30);
 800b79e:	748f      	strb	r7, [r1, #18]
    string[index++] = 'M';
 800b7a0:	274d      	movs	r7, #77	; 0x4d
        string[count] =  (CHAR) (digit + 0x30);
 800b7a2:	3030      	adds	r0, #48	; 0x30
 800b7a4:	7448      	strb	r0, [r1, #17]
    _nx_http_server_date_convert(date -> nx_http_server_minute, 2, &string[index]);
 800b7a6:	f892 8005 	ldrb.w	r8, [r2, #5]
    *((ULONG*)string) = 0x30303030;
 800b7aa:	614c      	str	r4, [r1, #20]
        digit =  date % 10;
 800b7ac:	fba3 4008 	umull	r4, r0, r3, r8
    string[index++] = ':';
 800b7b0:	f881 e016 	strb.w	lr, [r1, #22]
        digit =  date % 10;
 800b7b4:	08c0      	lsrs	r0, r0, #3
 800b7b6:	fba3 5400 	umull	r5, r4, r3, r0
 800b7ba:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
 800b7be:	08e4      	lsrs	r4, r4, #3
 800b7c0:	eba8 084e 	sub.w	r8, r8, lr, lsl #1
 800b7c4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        string[count] =  (CHAR) (digit + 0x30);
 800b7c8:	f108 0830 	add.w	r8, r8, #48	; 0x30
        digit =  date % 10;
 800b7cc:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
}
 800b7d0:	201d      	movs	r0, #29
        string[count] =  (CHAR) (digit + 0x30);
 800b7d2:	f881 8015 	strb.w	r8, [r1, #21]
 800b7d6:	3430      	adds	r4, #48	; 0x30
 800b7d8:	750c      	strb	r4, [r1, #20]
    _nx_http_server_date_convert(date -> nx_http_server_second, 2, &string[index]);
 800b7da:	7994      	ldrb	r4, [r2, #6]
    string[index++] = ' ';
 800b7dc:	764e      	strb	r6, [r1, #25]
        digit =  date % 10;
 800b7de:	fba3 5204 	umull	r5, r2, r3, r4
    string[index++] = 'G';
 800b7e2:	f04f 0547 	mov.w	r5, #71	; 0x47
    string[index++] = 'M';
 800b7e6:	76cf      	strb	r7, [r1, #27]
        digit =  date % 10;
 800b7e8:	08d2      	lsrs	r2, r2, #3
    string[index++] = 'G';
 800b7ea:	768d      	strb	r5, [r1, #26]
    string[index++] = 'T';
 800b7ec:	f881 c01c 	strb.w	ip, [r1, #28]
        digit =  date % 10;
 800b7f0:	fba3 5302 	umull	r5, r3, r3, r2
 800b7f4:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 800b7f8:	08db      	lsrs	r3, r3, #3
 800b7fa:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 800b7fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        string[count] =  (CHAR) (digit + 0x30);
 800b802:	3430      	adds	r4, #48	; 0x30
        digit =  date % 10;
 800b804:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
        string[count] =  (CHAR) (digit + 0x30);
 800b808:	760c      	strb	r4, [r1, #24]
 800b80a:	3330      	adds	r3, #48	; 0x30
 800b80c:	75cb      	strb	r3, [r1, #23]
}
 800b80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b812:	bf00      	nop
 800b814:	200000c4 	.word	0x200000c4
 800b818:	cccccccd 	.word	0xcccccccd
 800b81c:	51eb851f 	.word	0x51eb851f
 800b820:	10624dd3 	.word	0x10624dd3
 800b824:	20000094 	.word	0x20000094

0800b828 <_nx_http_server_generate_response_header>:
{
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
CHAR        crlf[2] = {13,10};
 800b82c:	4db9      	ldr	r5, [pc, #740]	; (800bb14 <_nx_http_server_generate_response_header+0x2ec>)
{
 800b82e:	b093      	sub	sp, #76	; 0x4c
 800b830:	4604      	mov	r4, r0
 800b832:	4692      	mov	sl, r2
CHAR        crlf[2] = {13,10};
 800b834:	882d      	ldrh	r5, [r5, #0]
{
 800b836:	469b      	mov	fp, r3
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800b838:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800b83a:	f04f 33ff 	mov.w	r3, #4294967295
 800b83e:	224c      	movs	r2, #76	; 0x4c
{
 800b840:	460e      	mov	r6, r1
CHAR        crlf[2] = {13,10};
 800b842:	f8ad 5018 	strh.w	r5, [sp, #24]
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800b846:	f7fa ff21 	bl	800668c <_nx_packet_allocate>
    if(status != NX_SUCCESS)
 800b84a:	4607      	mov	r7, r0
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f040 813c 	bne.w	800baca <_nx_http_server_generate_response_header+0x2a2>
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800b852:	2207      	movs	r2, #7
 800b854:	49b0      	ldr	r1, [pc, #704]	; (800bb18 <_nx_http_server_generate_response_header+0x2f0>)
 800b856:	4650      	mov	r0, sl
        packet_ptr = *packet_pptr;
 800b858:	6836      	ldr	r6, [r6, #0]
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800b85a:	f012 fe6b 	bl	801e534 <memcmp>
 800b85e:	fab0 f380 	clz	r3, r0
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b862:	f04f 38ff 	mov.w	r8, #4294967295
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800b866:	9005      	str	r0, [sp, #20]
 800b868:	461d      	mov	r5, r3
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800b86a:	2211      	movs	r2, #17
 800b86c:	49ab      	ldr	r1, [pc, #684]	; (800bb1c <_nx_http_server_generate_response_header+0x2f4>)
 800b86e:	4650      	mov	r0, sl
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800b870:	096d      	lsrs	r5, r5, #5
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800b872:	f012 fe5f 	bl	801e534 <memcmp>
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b876:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800b878:	fab0 f980 	clz	r9, r0
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b87c:	2208      	movs	r2, #8
 800b87e:	49a8      	ldr	r1, [pc, #672]	; (800bb20 <_nx_http_server_generate_response_header+0x2f8>)
 800b880:	4630      	mov	r0, r6
 800b882:	f8cd 8000 	str.w	r8, [sp]
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800b886:	ea4f 1959 	mov.w	r9, r9, lsr #5
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800b88a:	9504      	str	r5, [sp, #16]
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b88c:	f7fa ff5c 	bl	8006748 <_nx_packet_data_append>
 800b890:	4605      	mov	r5, r0
    status += nx_packet_data_append(packet_ptr, " ", 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b892:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b894:	2201      	movs	r2, #1
 800b896:	49a3      	ldr	r1, [pc, #652]	; (800bb24 <_nx_http_server_generate_response_header+0x2fc>)
 800b898:	4630      	mov	r0, r6
 800b89a:	f8cd 8000 	str.w	r8, [sp]
 800b89e:	f7fa ff53 	bl	8006748 <_nx_packet_data_append>
 800b8a2:	4405      	add	r5, r0
    status += nx_packet_data_append(packet_ptr, status_code, status_code_length,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8a6:	465a      	mov	r2, fp
 800b8a8:	4651      	mov	r1, sl
 800b8aa:	f8cd 8000 	str.w	r8, [sp]
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f7fa ff4a 	bl	8006748 <_nx_packet_data_append>
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    status += nx_packet_data_append(packet_ptr, status_code, status_code_length,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8b6:	4405      	add	r5, r0
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8b8:	f8cd 8000 	str.w	r8, [sp]
 800b8bc:	4630      	mov	r0, r6
 800b8be:	a906      	add	r1, sp, #24
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	f7fa ff41 	bl	8006748 <_nx_packet_data_append>
    if(content_type)
 800b8c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8c8:	4405      	add	r5, r0
    if(content_type)
 800b8ca:	b1db      	cbz	r3, 800b904 <_nx_http_server_generate_response_header+0xdc>
        status += nx_packet_data_append(packet_ptr, "Content-Type: ", 14,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8ce:	220e      	movs	r2, #14
 800b8d0:	4995      	ldr	r1, [pc, #596]	; (800bb28 <_nx_http_server_generate_response_header+0x300>)
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f8cd 8000 	str.w	r8, [sp]
 800b8d8:	f7fa ff36 	bl	8006748 <_nx_packet_data_append>
 800b8dc:	4682      	mov	sl, r0
        status += nx_packet_data_append(packet_ptr, content_type, content_type_length,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b8e4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800b8e6:	f8cd 8000 	str.w	r8, [sp]
 800b8ea:	f7fa ff2d 	bl	8006748 <_nx_packet_data_append>
 800b8ee:	4450      	add	r0, sl
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8f2:	2202      	movs	r2, #2
        status += nx_packet_data_append(packet_ptr, content_type, content_type_length,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8f4:	4405      	add	r5, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b8f6:	f8cd 8000 	str.w	r8, [sp]
 800b8fa:	a906      	add	r1, sp, #24
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7fa ff23 	bl	8006748 <_nx_packet_data_append>
 800b902:	4405      	add	r5, r0
    if(content_length || (status_code_not_modified == NX_TRUE))
 800b904:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b908:	2a00      	cmp	r2, #0
 800b90a:	d169      	bne.n	800b9e0 <_nx_http_server_generate_response_header+0x1b8>
 800b90c:	f1b9 0f00 	cmp.w	r9, #0
 800b910:	d166      	bne.n	800b9e0 <_nx_http_server_generate_response_header+0x1b8>
        status += nx_packet_data_append(packet_ptr, "Connection: Close", 17,
 800b912:	f04f 3aff 	mov.w	sl, #4294967295
 800b916:	2211      	movs	r2, #17
 800b918:	4984      	ldr	r1, [pc, #528]	; (800bb2c <_nx_http_server_generate_response_header+0x304>)
 800b91a:	4630      	mov	r0, r6
 800b91c:	f8cd a000 	str.w	sl, [sp]
 800b920:	f7fa ff12 	bl	8006748 <_nx_packet_data_append>
 800b924:	4680      	mov	r8, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b926:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b928:	2202      	movs	r2, #2
 800b92a:	f8cd a000 	str.w	sl, [sp]
 800b92e:	a906      	add	r1, sp, #24
 800b930:	4630      	mov	r0, r6
 800b932:	f7fa ff09 	bl	8006748 <_nx_packet_data_append>
 800b936:	4440      	add	r0, r8
 800b938:	4405      	add	r5, r0
    if(server_ptr -> nx_http_server_gmt_get)
 800b93a:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 800b93e:	b38b      	cbz	r3, 800b9a4 <_nx_http_server_generate_response_header+0x17c>
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800b940:	aa0a      	add	r2, sp, #40	; 0x28
        status += nx_packet_data_append(packet_ptr, "Date: ", 6,
 800b942:	f04f 3aff 	mov.w	sl, #4294967295
        server_ptr -> nx_http_server_gmt_get(&date);
 800b946:	a808      	add	r0, sp, #32
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800b948:	9203      	str	r2, [sp, #12]
        server_ptr -> nx_http_server_gmt_get(&date);
 800b94a:	4798      	blx	r3
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800b94c:	9903      	ldr	r1, [sp, #12]
 800b94e:	a808      	add	r0, sp, #32
 800b950:	f7ff fe8c 	bl	800b66c <_nx_http_server_date_to_string>
        status += nx_packet_data_append(packet_ptr, "Date: ", 6,
 800b954:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800b956:	4683      	mov	fp, r0
        status += nx_packet_data_append(packet_ptr, "Date: ", 6,
 800b958:	2206      	movs	r2, #6
 800b95a:	4975      	ldr	r1, [pc, #468]	; (800bb30 <_nx_http_server_generate_response_header+0x308>)
 800b95c:	4630      	mov	r0, r6
 800b95e:	f8cd a000 	str.w	sl, [sp]
 800b962:	f7fa fef1 	bl	8006748 <_nx_packet_data_append>
 800b966:	4680      	mov	r8, r0
        status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b96a:	465a      	mov	r2, fp
 800b96c:	9903      	ldr	r1, [sp, #12]
 800b96e:	4630      	mov	r0, r6
 800b970:	f8cd a000 	str.w	sl, [sp]
 800b974:	f7fa fee8 	bl	8006748 <_nx_packet_data_append>
 800b978:	4480      	add	r8, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b97a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b97c:	2202      	movs	r2, #2
 800b97e:	f8cd a000 	str.w	sl, [sp]
 800b982:	a906      	add	r1, sp, #24
 800b984:	4630      	mov	r0, r6
        status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b986:	4445      	add	r5, r8
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b988:	f7fa fede 	bl	8006748 <_nx_packet_data_append>
        if((server_ptr -> nx_http_server_cache_info_get) && 
 800b98c:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b990:	4405      	add	r5, r0
        if((server_ptr -> nx_http_server_cache_info_get) && 
 800b992:	b13b      	cbz	r3, 800b9a4 <_nx_http_server_generate_response_header+0x17c>
 800b994:	9a04      	ldr	r2, [sp, #16]
 800b996:	2a00      	cmp	r2, #0
 800b998:	f040 809e 	bne.w	800bad8 <_nx_http_server_generate_response_header+0x2b0>
 800b99c:	f1b9 0f00 	cmp.w	r9, #0
 800b9a0:	f040 809a 	bne.w	800bad8 <_nx_http_server_generate_response_header+0x2b0>
    if(additional_header)
 800b9a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b9a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9a8:	b14a      	cbz	r2, 800b9be <_nx_http_server_generate_response_header+0x196>
        status += nx_packet_data_append(packet_ptr, additional_header, additional_header_length,
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b9b2:	9000      	str	r0, [sp, #0]
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7fa fec7 	bl	8006748 <_nx_packet_data_append>
 800b9ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9bc:	4405      	add	r5, r0
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b9be:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c2:	a906      	add	r1, sp, #24
 800b9c4:	2202      	movs	r2, #2
 800b9c6:	9000      	str	r0, [sp, #0]
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f7fa febd 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800b9ce:	182f      	adds	r7, r5, r0
 800b9d0:	d002      	beq.n	800b9d8 <_nx_http_server_generate_response_header+0x1b0>
        nx_packet_release(packet_ptr);
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f7fb f80c 	bl	80069f0 <_nx_packet_release>
}
 800b9d8:	4638      	mov	r0, r7
 800b9da:	b013      	add	sp, #76	; 0x4c
 800b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        status += nx_packet_data_append(packet_ptr, "Connection: Close", 17,
 800b9e0:	f04f 3aff 	mov.w	sl, #4294967295
 800b9e4:	2211      	movs	r2, #17
 800b9e6:	4951      	ldr	r1, [pc, #324]	; (800bb2c <_nx_http_server_generate_response_header+0x304>)
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f8cd a000 	str.w	sl, [sp]
 800b9ee:	f7fa feab 	bl	8006748 <_nx_packet_data_append>
 800b9f2:	4680      	mov	r8, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800b9f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f8cd a000 	str.w	sl, [sp]
 800b9fc:	a906      	add	r1, sp, #24
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f7fa fea2 	bl	8006748 <_nx_packet_data_append>
        if(content_length)
 800ba04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800ba06:	4440      	add	r0, r8
 800ba08:	4405      	add	r5, r0
        if(content_length)
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d095      	beq.n	800b93a <_nx_http_server_generate_response_header+0x112>
 800ba0e:	469e      	mov	lr, r3
 800ba10:	ab0a      	add	r3, sp, #40	; 0x28
    size =  0;
 800ba12:	2100      	movs	r1, #0
 800ba14:	f8df c120 	ldr.w	ip, [pc, #288]	; 800bb38 <_nx_http_server_generate_response_header+0x310>
 800ba18:	9303      	str	r3, [sp, #12]
 800ba1a:	e03c      	b.n	800ba96 <_nx_http_server_generate_response_header+0x26e>
            string[j] =  string[j-1];
 800ba1c:	f813 8c01 	ldrb.w	r8, [r3, #-1]
        for (j = size; j != 0; j--)
 800ba20:	2901      	cmp	r1, #1
            string[j] =  string[j-1];
 800ba22:	f883 8000 	strb.w	r8, [r3]
        for (j = size; j != 0; j--)
 800ba26:	d02d      	beq.n	800ba84 <_nx_http_server_generate_response_header+0x25c>
            string[j] =  string[j-1];
 800ba28:	f813 8c02 	ldrb.w	r8, [r3, #-2]
        for (j = size; j != 0; j--)
 800ba2c:	2902      	cmp	r1, #2
            string[j] =  string[j-1];
 800ba2e:	f803 8c01 	strb.w	r8, [r3, #-1]
        for (j = size; j != 0; j--)
 800ba32:	d027      	beq.n	800ba84 <_nx_http_server_generate_response_header+0x25c>
            string[j] =  string[j-1];
 800ba34:	f813 8c03 	ldrb.w	r8, [r3, #-3]
        for (j = size; j != 0; j--)
 800ba38:	2903      	cmp	r1, #3
            string[j] =  string[j-1];
 800ba3a:	f803 8c02 	strb.w	r8, [r3, #-2]
        for (j = size; j != 0; j--)
 800ba3e:	d021      	beq.n	800ba84 <_nx_http_server_generate_response_header+0x25c>
            string[j] =  string[j-1];
 800ba40:	f813 8c04 	ldrb.w	r8, [r3, #-4]
        for (j = size; j != 0; j--)
 800ba44:	2904      	cmp	r1, #4
            string[j] =  string[j-1];
 800ba46:	f803 8c03 	strb.w	r8, [r3, #-3]
        for (j = size; j != 0; j--)
 800ba4a:	d01b      	beq.n	800ba84 <_nx_http_server_generate_response_header+0x25c>
            string[j] =  string[j-1];
 800ba4c:	f813 8c05 	ldrb.w	r8, [r3, #-5]
        for (j = size; j != 0; j--)
 800ba50:	2905      	cmp	r1, #5
            string[j] =  string[j-1];
 800ba52:	f803 8c04 	strb.w	r8, [r3, #-4]
        for (j = size; j != 0; j--)
 800ba56:	d015      	beq.n	800ba84 <_nx_http_server_generate_response_header+0x25c>
            string[j] =  string[j-1];
 800ba58:	f813 8c06 	ldrb.w	r8, [r3, #-6]
        for (j = size; j != 0; j--)
 800ba5c:	2906      	cmp	r1, #6
            string[j] =  string[j-1];
 800ba5e:	f803 8c05 	strb.w	r8, [r3, #-5]
        for (j = size; j != 0; j--)
 800ba62:	d00f      	beq.n	800ba84 <_nx_http_server_generate_response_header+0x25c>
            string[j] =  string[j-1];
 800ba64:	f813 8c07 	ldrb.w	r8, [r3, #-7]
        for (j = size; j != 0; j--)
 800ba68:	2907      	cmp	r1, #7
            string[j] =  string[j-1];
 800ba6a:	f803 8c06 	strb.w	r8, [r3, #-6]
        for (j = size; j != 0; j--)
 800ba6e:	d009      	beq.n	800ba84 <_nx_http_server_generate_response_header+0x25c>
            string[j] =  string[j-1];
 800ba70:	f813 8c08 	ldrb.w	r8, [r3, #-8]
        for (j = size; j != 0; j--)
 800ba74:	2908      	cmp	r1, #8
            string[j] =  string[j-1];
 800ba76:	f803 8c07 	strb.w	r8, [r3, #-7]
        for (j = size; j != 0; j--)
 800ba7a:	d003      	beq.n	800ba84 <_nx_http_server_generate_response_header+0x25c>
            string[j] =  string[j-1];
 800ba7c:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 800ba80:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
        string[0] =  (CHAR) (digit + 0x30);
 800ba84:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        if (number == 0)
 800ba88:	b1c8      	cbz	r0, 800babe <_nx_http_server_generate_response_header+0x296>
    while (size < 10)
 800ba8a:	f1bb 0f0a 	cmp.w	fp, #10
 800ba8e:	f000 80e8 	beq.w	800bc62 <_nx_http_server_generate_response_header+0x43a>
 800ba92:	3301      	adds	r3, #1
{
 800ba94:	4659      	mov	r1, fp
 800ba96:	fbac 200e 	umull	r2, r0, ip, lr
 800ba9a:	f101 0b01 	add.w	fp, r1, #1
 800ba9e:	08c0      	lsrs	r0, r0, #3
 800baa0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800baa4:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
 800baa8:	4686      	mov	lr, r0
 800baaa:	3230      	adds	r2, #48	; 0x30
 800baac:	b2d2      	uxtb	r2, r2
        for (j = size; j != 0; j--)
 800baae:	2900      	cmp	r1, #0
 800bab0:	d1b4      	bne.n	800ba1c <_nx_http_server_generate_response_header+0x1f4>
        string[0] =  (CHAR) (digit + 0x30);
 800bab2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        if (number == 0)
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d1eb      	bne.n	800ba92 <_nx_http_server_generate_response_header+0x26a>
 800baba:	f04f 0b01 	mov.w	fp, #1
    string[size] =  (CHAR) NX_NULL;
 800babe:	ab12      	add	r3, sp, #72	; 0x48
 800bac0:	2200      	movs	r2, #0
 800bac2:	445b      	add	r3, fp
 800bac4:	f803 2c20 	strb.w	r2, [r3, #-32]
 800bac8:	e0d2      	b.n	800bc70 <_nx_http_server_generate_response_header+0x448>
        server_ptr -> nx_http_server_allocation_errors++;
 800baca:	6e63      	ldr	r3, [r4, #100]	; 0x64
}
 800bacc:	4638      	mov	r0, r7
        server_ptr -> nx_http_server_allocation_errors++;
 800bace:	3301      	adds	r3, #1
 800bad0:	6663      	str	r3, [r4, #100]	; 0x64
}
 800bad2:	b013      	add	sp, #76	; 0x4c
 800bad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ((status_code_ok == NX_TRUE) || (status_code_not_modified == NX_TRUE)) &&
 800bad8:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
 800badc:	2a01      	cmp	r2, #1
 800bade:	f47f af61 	bne.w	800b9a4 <_nx_http_server_generate_response_header+0x17c>
            if(server_ptr -> nx_http_server_cache_info_get(server_ptr -> nx_http_server_request_resource, &max_age, &date) == NX_TRUE)
 800bae2:	aa08      	add	r2, sp, #32
 800bae4:	a907      	add	r1, sp, #28
 800bae6:	f104 000c 	add.w	r0, r4, #12
 800baea:	4798      	blx	r3
 800baec:	2801      	cmp	r0, #1
 800baee:	f47f af59 	bne.w	800b9a4 <_nx_http_server_generate_response_header+0x17c>
                status += nx_packet_data_append(packet_ptr, "Cache-Control: max-age=", 23,
 800baf2:	f04f 30ff 	mov.w	r0, #4294967295
 800baf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800baf8:	490e      	ldr	r1, [pc, #56]	; (800bb34 <_nx_http_server_generate_response_header+0x30c>)
 800bafa:	2217      	movs	r2, #23
 800bafc:	9000      	str	r0, [sp, #0]
 800bafe:	4630      	mov	r0, r6
 800bb00:	f7fa fe22 	bl	8006748 <_nx_packet_data_append>
 800bb04:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800bb38 <_nx_http_server_generate_response_header+0x310>
                temp = _nx_http_server_number_convert(max_age, temp_string);
 800bb08:	f8dd c01c 	ldr.w	ip, [sp, #28]
                status += nx_packet_data_append(packet_ptr, "Cache-Control: max-age=", 23,
 800bb0c:	4405      	add	r5, r0
 800bb0e:	9b03      	ldr	r3, [sp, #12]
    size =  0;
 800bb10:	2100      	movs	r1, #0
 800bb12:	e04f      	b.n	800bbb4 <_nx_http_server_generate_response_header+0x38c>
 800bb14:	0801f940 	.word	0x0801f940
 800bb18:	080255e4 	.word	0x080255e4
 800bb1c:	080255ec 	.word	0x080255ec
 800bb20:	08025584 	.word	0x08025584
 800bb24:	0802525c 	.word	0x0802525c
 800bb28:	08025600 	.word	0x08025600
 800bb2c:	08025610 	.word	0x08025610
 800bb30:	08025638 	.word	0x08025638
 800bb34:	08025640 	.word	0x08025640
 800bb38:	cccccccd 	.word	0xcccccccd
            string[j] =  string[j-1];
 800bb3c:	f813 9c01 	ldrb.w	r9, [r3, #-1]
        for (j = size; j != 0; j--)
 800bb40:	2901      	cmp	r1, #1
            string[j] =  string[j-1];
 800bb42:	f883 9000 	strb.w	r9, [r3]
        for (j = size; j != 0; j--)
 800bb46:	d02d      	beq.n	800bba4 <_nx_http_server_generate_response_header+0x37c>
            string[j] =  string[j-1];
 800bb48:	f813 9c02 	ldrb.w	r9, [r3, #-2]
        for (j = size; j != 0; j--)
 800bb4c:	2902      	cmp	r1, #2
            string[j] =  string[j-1];
 800bb4e:	f803 9c01 	strb.w	r9, [r3, #-1]
        for (j = size; j != 0; j--)
 800bb52:	d027      	beq.n	800bba4 <_nx_http_server_generate_response_header+0x37c>
            string[j] =  string[j-1];
 800bb54:	f813 9c03 	ldrb.w	r9, [r3, #-3]
        for (j = size; j != 0; j--)
 800bb58:	2903      	cmp	r1, #3
            string[j] =  string[j-1];
 800bb5a:	f803 9c02 	strb.w	r9, [r3, #-2]
        for (j = size; j != 0; j--)
 800bb5e:	d021      	beq.n	800bba4 <_nx_http_server_generate_response_header+0x37c>
            string[j] =  string[j-1];
 800bb60:	f813 9c04 	ldrb.w	r9, [r3, #-4]
        for (j = size; j != 0; j--)
 800bb64:	2904      	cmp	r1, #4
            string[j] =  string[j-1];
 800bb66:	f803 9c03 	strb.w	r9, [r3, #-3]
        for (j = size; j != 0; j--)
 800bb6a:	d01b      	beq.n	800bba4 <_nx_http_server_generate_response_header+0x37c>
            string[j] =  string[j-1];
 800bb6c:	f813 9c05 	ldrb.w	r9, [r3, #-5]
        for (j = size; j != 0; j--)
 800bb70:	2905      	cmp	r1, #5
            string[j] =  string[j-1];
 800bb72:	f803 9c04 	strb.w	r9, [r3, #-4]
        for (j = size; j != 0; j--)
 800bb76:	d015      	beq.n	800bba4 <_nx_http_server_generate_response_header+0x37c>
            string[j] =  string[j-1];
 800bb78:	f813 9c06 	ldrb.w	r9, [r3, #-6]
        for (j = size; j != 0; j--)
 800bb7c:	2906      	cmp	r1, #6
            string[j] =  string[j-1];
 800bb7e:	f803 9c05 	strb.w	r9, [r3, #-5]
        for (j = size; j != 0; j--)
 800bb82:	d00f      	beq.n	800bba4 <_nx_http_server_generate_response_header+0x37c>
            string[j] =  string[j-1];
 800bb84:	f813 9c07 	ldrb.w	r9, [r3, #-7]
        for (j = size; j != 0; j--)
 800bb88:	2907      	cmp	r1, #7
            string[j] =  string[j-1];
 800bb8a:	f803 9c06 	strb.w	r9, [r3, #-6]
        for (j = size; j != 0; j--)
 800bb8e:	d009      	beq.n	800bba4 <_nx_http_server_generate_response_header+0x37c>
            string[j] =  string[j-1];
 800bb90:	f813 9c08 	ldrb.w	r9, [r3, #-8]
        for (j = size; j != 0; j--)
 800bb94:	2908      	cmp	r1, #8
            string[j] =  string[j-1];
 800bb96:	f803 9c07 	strb.w	r9, [r3, #-7]
        for (j = size; j != 0; j--)
 800bb9a:	d003      	beq.n	800bba4 <_nx_http_server_generate_response_header+0x37c>
            string[j] =  string[j-1];
 800bb9c:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 800bba0:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
        string[0] =  (CHAR) (digit + 0x30);
 800bba4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        if (number == 0)
 800bba8:	b1c8      	cbz	r0, 800bbde <_nx_http_server_generate_response_header+0x3b6>
    while (size < 10)
 800bbaa:	f1be 0f0a 	cmp.w	lr, #10
 800bbae:	d07e      	beq.n	800bcae <_nx_http_server_generate_response_header+0x486>
 800bbb0:	3301      	adds	r3, #1
        size =  0;
 800bbb2:	4671      	mov	r1, lr
 800bbb4:	fba8 200c 	umull	r2, r0, r8, ip
 800bbb8:	f101 0e01 	add.w	lr, r1, #1
 800bbbc:	08c0      	lsrs	r0, r0, #3
 800bbbe:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800bbc2:	ebac 0242 	sub.w	r2, ip, r2, lsl #1
 800bbc6:	4684      	mov	ip, r0
 800bbc8:	3230      	adds	r2, #48	; 0x30
 800bbca:	f002 02ff 	and.w	r2, r2, #255	; 0xff
        for (j = size; j != 0; j--)
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	d1b4      	bne.n	800bb3c <_nx_http_server_generate_response_header+0x314>
        string[0] =  (CHAR) (digit + 0x30);
 800bbd2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        if (number == 0)
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d1ea      	bne.n	800bbb0 <_nx_http_server_generate_response_header+0x388>
 800bbda:	f04f 0e01 	mov.w	lr, #1
    string[size] =  (CHAR) NX_NULL;
 800bbde:	ab12      	add	r3, sp, #72	; 0x48
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4677      	mov	r7, lr
 800bbe4:	4473      	add	r3, lr
 800bbe6:	f803 2c20 	strb.w	r2, [r3, #-32]
                status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800bbea:	f04f 38ff 	mov.w	r8, #4294967295
 800bbee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bbf0:	463a      	mov	r2, r7
 800bbf2:	9903      	ldr	r1, [sp, #12]
 800bbf4:	f8cd 8000 	str.w	r8, [sp]
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f7fa fda5 	bl	8006748 <_nx_packet_data_append>
                status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bbfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800bc00:	4405      	add	r5, r0
                status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bc02:	f8cd 8000 	str.w	r8, [sp]
 800bc06:	2202      	movs	r2, #2
 800bc08:	a906      	add	r1, sp, #24
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f7fa fd9c 	bl	8006748 <_nx_packet_data_append>
                if(status_code_ok == NX_TRUE)
 800bc10:	9b05      	ldr	r3, [sp, #20]
                status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bc12:	4405      	add	r5, r0
                if(status_code_ok == NX_TRUE)
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f47f aec5 	bne.w	800b9a4 <_nx_http_server_generate_response_header+0x17c>
                    temp = _nx_http_server_date_to_string(&date, temp_string);
 800bc1a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800bc1e:	a808      	add	r0, sp, #32
 800bc20:	4651      	mov	r1, sl
 800bc22:	f7ff fd23 	bl	800b66c <_nx_http_server_date_to_string>
                    status += nx_packet_data_append(packet_ptr, "Last-Modified: ", 15,
 800bc26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                    temp = _nx_http_server_date_to_string(&date, temp_string);
 800bc28:	4681      	mov	r9, r0
                    status += nx_packet_data_append(packet_ptr, "Last-Modified: ", 15,
 800bc2a:	220f      	movs	r2, #15
 800bc2c:	4923      	ldr	r1, [pc, #140]	; (800bcbc <_nx_http_server_generate_response_header+0x494>)
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f8cd 8000 	str.w	r8, [sp]
 800bc34:	f7fa fd88 	bl	8006748 <_nx_packet_data_append>
 800bc38:	4607      	mov	r7, r0
                    status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bc3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc3c:	464a      	mov	r2, r9
 800bc3e:	4651      	mov	r1, sl
 800bc40:	f8cd 8000 	str.w	r8, [sp]
 800bc44:	4630      	mov	r0, r6
 800bc46:	f7fa fd7f 	bl	8006748 <_nx_packet_data_append>
 800bc4a:	4438      	add	r0, r7
                    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bc4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc4e:	2202      	movs	r2, #2
                    status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bc50:	4405      	add	r5, r0
                    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bc52:	f8cd 8000 	str.w	r8, [sp]
 800bc56:	a906      	add	r1, sp, #24
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7fa fd75 	bl	8006748 <_nx_packet_data_append>
 800bc5e:	4405      	add	r5, r0
 800bc60:	e6a0      	b.n	800b9a4 <_nx_http_server_generate_response_header+0x17c>
    string[size] =  (CHAR) NX_NULL;
 800bc62:	f04f 0b00 	mov.w	fp, #0
        string[0] = '0';
 800bc66:	2330      	movs	r3, #48	; 0x30
    string[size] =  (CHAR) NX_NULL;
 800bc68:	f88d b032 	strb.w	fp, [sp, #50]	; 0x32
        string[0] = '0';
 800bc6c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            status += nx_packet_data_append(packet_ptr, "Content-Length: ", 16,
 800bc70:	f04f 3aff 	mov.w	sl, #4294967295
 800bc74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc76:	2210      	movs	r2, #16
 800bc78:	4911      	ldr	r1, [pc, #68]	; (800bcc0 <_nx_http_server_generate_response_header+0x498>)
 800bc7a:	f8cd a000 	str.w	sl, [sp]
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f7fa fd62 	bl	8006748 <_nx_packet_data_append>
 800bc84:	4680      	mov	r8, r0
            status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800bc86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc88:	465a      	mov	r2, fp
 800bc8a:	9903      	ldr	r1, [sp, #12]
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f8cd a000 	str.w	sl, [sp]
 800bc92:	f7fa fd59 	bl	8006748 <_nx_packet_data_append>
 800bc96:	4440      	add	r0, r8
            status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bc98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc9a:	2202      	movs	r2, #2
            status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800bc9c:	4405      	add	r5, r0
            status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bc9e:	f8cd a000 	str.w	sl, [sp]
 800bca2:	a906      	add	r1, sp, #24
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7fa fd4f 	bl	8006748 <_nx_packet_data_append>
 800bcaa:	4405      	add	r5, r0
 800bcac:	e645      	b.n	800b93a <_nx_http_server_generate_response_header+0x112>
    string[size] =  (CHAR) NX_NULL;
 800bcae:	2200      	movs	r2, #0
        string[0] = '0';
 800bcb0:	2330      	movs	r3, #48	; 0x30
    string[size] =  (CHAR) NX_NULL;
 800bcb2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
        string[0] = '0';
 800bcb6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bcba:	e796      	b.n	800bbea <_nx_http_server_generate_response_header+0x3c2>
 800bcbc:	08025658 	.word	0x08025658
 800bcc0:	08025624 	.word	0x08025624

0800bcc4 <_nx_http_server_response_send>:
{
 800bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc8:	4604      	mov	r4, r0
 800bcca:	b097      	sub	sp, #92	; 0x5c
 800bccc:	468a      	mov	sl, r1
 800bcce:	4693      	mov	fp, r2
    if(information)
 800bcd0:	4698      	mov	r8, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80e6 	beq.w	800bea4 <_nx_http_server_response_send+0x1e0>
        if (additional_information)
 800bcd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 80c6 	beq.w	800be6c <_nx_http_server_response_send+0x1a8>
            length = length + additional_info_length;
 800bce0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bce2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bce4:	4413      	add	r3, r2
 800bce6:	9303      	str	r3, [sp, #12]
CHAR        crlf[2] = {13,10};
 800bce8:	48ba      	ldr	r0, [pc, #744]	; (800bfd4 <_nx_http_server_response_send+0x310>)
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800bcea:	f04f 33ff 	mov.w	r3, #4294967295
 800bcee:	224c      	movs	r2, #76	; 0x4c
 800bcf0:	a90a      	add	r1, sp, #40	; 0x28
CHAR        crlf[2] = {13,10};
 800bcf2:	8805      	ldrh	r5, [r0, #0]
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800bcf4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
CHAR        crlf[2] = {13,10};
 800bcf6:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800bcfa:	f7fa fcc7 	bl	800668c <_nx_packet_allocate>
    if(status != NX_SUCCESS)
 800bcfe:	9004      	str	r0, [sp, #16]
 800bd00:	2800      	cmp	r0, #0
 800bd02:	f040 80c7 	bne.w	800be94 <_nx_http_server_response_send+0x1d0>
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800bd06:	2207      	movs	r2, #7
 800bd08:	49b3      	ldr	r1, [pc, #716]	; (800bfd8 <_nx_http_server_response_send+0x314>)
 800bd0a:	4650      	mov	r0, sl
        packet_ptr = *packet_pptr;
 800bd0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800bd0e:	f012 fc11 	bl	801e534 <memcmp>
 800bd12:	fab0 f580 	clz	r5, r0
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd16:	f04f 39ff 	mov.w	r9, #4294967295
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800bd1a:	9007      	str	r0, [sp, #28]
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800bd1c:	2211      	movs	r2, #17
 800bd1e:	49af      	ldr	r1, [pc, #700]	; (800bfdc <_nx_http_server_response_send+0x318>)
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800bd20:	096d      	lsrs	r5, r5, #5
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800bd22:	4650      	mov	r0, sl
 800bd24:	f012 fc06 	bl	801e534 <memcmp>
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800bd2a:	fab0 f780 	clz	r7, r0
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd2e:	2208      	movs	r2, #8
 800bd30:	49ab      	ldr	r1, [pc, #684]	; (800bfe0 <_nx_http_server_response_send+0x31c>)
 800bd32:	4630      	mov	r0, r6
 800bd34:	f8cd 9000 	str.w	r9, [sp]
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800bd38:	097f      	lsrs	r7, r7, #5
    if(memcmp(status_code, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK)) == 0)
 800bd3a:	9505      	str	r5, [sp, #20]
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd3c:	f7fa fd04 	bl	8006748 <_nx_packet_data_append>
 800bd40:	4605      	mov	r5, r0
    status += nx_packet_data_append(packet_ptr, " ", 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd44:	2201      	movs	r2, #1
 800bd46:	49a7      	ldr	r1, [pc, #668]	; (800bfe4 <_nx_http_server_response_send+0x320>)
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f8cd 9000 	str.w	r9, [sp]
 800bd4e:	f7fa fcfb 	bl	8006748 <_nx_packet_data_append>
 800bd52:	4405      	add	r5, r0
    status += nx_packet_data_append(packet_ptr, status_code, status_code_length,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd56:	465a      	mov	r2, fp
 800bd58:	4651      	mov	r1, sl
 800bd5a:	f8cd 9000 	str.w	r9, [sp]
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7fa fcf2 	bl	8006748 <_nx_packet_data_append>
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    status += nx_packet_data_append(packet_ptr, status_code, status_code_length,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd66:	4405      	add	r5, r0
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd68:	f8cd 9000 	str.w	r9, [sp]
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	a909      	add	r1, sp, #36	; 0x24
 800bd70:	2202      	movs	r2, #2
    if(memcmp(status_code, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED)) == 0)
 800bd72:	9706      	str	r7, [sp, #24]
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd74:	f7fa fce8 	bl	8006748 <_nx_packet_data_append>
    if(content_length || (status_code_not_modified == NX_TRUE))
 800bd78:	9b03      	ldr	r3, [sp, #12]
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd7a:	4405      	add	r5, r0
    if(content_length || (status_code_not_modified == NX_TRUE))
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f040 8093 	bne.w	800bea8 <_nx_http_server_response_send+0x1e4>
 800bd82:	2f00      	cmp	r7, #0
 800bd84:	f040 8090 	bne.w	800bea8 <_nx_http_server_response_send+0x1e4>
        status += nx_packet_data_append(packet_ptr, "Connection: Close", 17,
 800bd88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd8a:	2211      	movs	r2, #17
 800bd8c:	4996      	ldr	r1, [pc, #600]	; (800bfe8 <_nx_http_server_response_send+0x324>)
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f8cd 9000 	str.w	r9, [sp]
 800bd94:	f7fa fcd8 	bl	8006748 <_nx_packet_data_append>
 800bd98:	4607      	mov	r7, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bd9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd9c:	2202      	movs	r2, #2
 800bd9e:	f8cd 9000 	str.w	r9, [sp]
 800bda2:	a909      	add	r1, sp, #36	; 0x24
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7fa fccf 	bl	8006748 <_nx_packet_data_append>
 800bdaa:	4438      	add	r0, r7
 800bdac:	4405      	add	r5, r0
    if(server_ptr -> nx_http_server_gmt_get)
 800bdae:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 800bdb2:	b38b      	cbz	r3, 800be18 <_nx_http_server_response_send+0x154>
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800bdb4:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
        status += nx_packet_data_append(packet_ptr, "Date: ", 6,
 800bdb8:	f04f 39ff 	mov.w	r9, #4294967295
        server_ptr -> nx_http_server_gmt_get(&date);
 800bdbc:	a80c      	add	r0, sp, #48	; 0x30
 800bdbe:	4798      	blx	r3
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800bdc0:	4659      	mov	r1, fp
 800bdc2:	a80c      	add	r0, sp, #48	; 0x30
 800bdc4:	f7ff fc52 	bl	800b66c <_nx_http_server_date_to_string>
        status += nx_packet_data_append(packet_ptr, "Date: ", 6,
 800bdc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800bdca:	4682      	mov	sl, r0
        status += nx_packet_data_append(packet_ptr, "Date: ", 6,
 800bdcc:	2206      	movs	r2, #6
 800bdce:	4987      	ldr	r1, [pc, #540]	; (800bfec <_nx_http_server_response_send+0x328>)
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f8cd 9000 	str.w	r9, [sp]
 800bdd6:	f7fa fcb7 	bl	8006748 <_nx_packet_data_append>
 800bdda:	4607      	mov	r7, r0
        status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdde:	4652      	mov	r2, sl
 800bde0:	4659      	mov	r1, fp
 800bde2:	f8cd 9000 	str.w	r9, [sp]
 800bde6:	4630      	mov	r0, r6
 800bde8:	f7fa fcae 	bl	8006748 <_nx_packet_data_append>
 800bdec:	4407      	add	r7, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bdee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	f8cd 9000 	str.w	r9, [sp]
 800bdf6:	a909      	add	r1, sp, #36	; 0x24
 800bdf8:	4630      	mov	r0, r6
        status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bdfa:	443d      	add	r5, r7
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bdfc:	f7fa fca4 	bl	8006748 <_nx_packet_data_append>
        if((server_ptr -> nx_http_server_cache_info_get) && 
 800be00:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800be04:	4405      	add	r5, r0
        if((server_ptr -> nx_http_server_cache_info_get) && 
 800be06:	b13b      	cbz	r3, 800be18 <_nx_http_server_response_send+0x154>
 800be08:	9a05      	ldr	r2, [sp, #20]
 800be0a:	2a00      	cmp	r2, #0
 800be0c:	f040 80c4 	bne.w	800bf98 <_nx_http_server_response_send+0x2d4>
 800be10:	9a06      	ldr	r2, [sp, #24]
 800be12:	2a00      	cmp	r2, #0
 800be14:	f040 80c0 	bne.w	800bf98 <_nx_http_server_response_send+0x2d4>
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800be18:	f04f 37ff 	mov.w	r7, #4294967295
 800be1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800be1e:	a909      	add	r1, sp, #36	; 0x24
 800be20:	2202      	movs	r2, #2
 800be22:	9700      	str	r7, [sp, #0]
 800be24:	4630      	mov	r0, r6
 800be26:	f7fa fc8f 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800be2a:	42c5      	cmn	r5, r0
 800be2c:	f040 816e 	bne.w	800c10c <_nx_http_server_response_send+0x448>
 800be30:	980a      	ldr	r0, [sp, #40]	; 0x28
    if (information)
 800be32:	f1b8 0f00 	cmp.w	r8, #0
 800be36:	d01c      	beq.n	800be72 <_nx_http_server_response_send+0x1ae>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800be38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800be3a:	4641      	mov	r1, r8
 800be3c:	9700      	str	r7, [sp, #0]
 800be3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be40:	f7fa fc82 	bl	8006748 <_nx_packet_data_append>
        if (additional_information)
 800be44:	9b21      	ldr	r3, [sp, #132]	; 0x84
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800be46:	4605      	mov	r5, r0
        if (additional_information)
 800be48:	b13b      	cbz	r3, 800be5a <_nx_http_server_response_send+0x196>
 800be4a:	4619      	mov	r1, r3
            status += nx_packet_data_append(packet_ptr, additional_information, additional_info_length,
 800be4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800be50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800be52:	9700      	str	r7, [sp, #0]
 800be54:	f7fa fc78 	bl	8006748 <_nx_packet_data_append>
 800be58:	4405      	add	r5, r0
 800be5a:	980a      	ldr	r0, [sp, #40]	; 0x28
    if (status != NX_SUCCESS)
 800be5c:	b14d      	cbz	r5, 800be72 <_nx_http_server_response_send+0x1ae>
        return(NX_HTTP_ERROR);
 800be5e:	24e0      	movs	r4, #224	; 0xe0
        nx_packet_release(packet_ptr);
 800be60:	f7fa fdc6 	bl	80069f0 <_nx_packet_release>
}
 800be64:	4620      	mov	r0, r4
 800be66:	b017      	add	sp, #92	; 0x5c
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        length = information_length;
 800be6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be6e:	9303      	str	r3, [sp, #12]
 800be70:	e73a      	b.n	800bce8 <_nx_http_server_response_send+0x24>
    status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800be72:	4601      	mov	r1, r0
 800be74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be78:	f504 7016 	add.w	r0, r4, #600	; 0x258
 800be7c:	f7fc f8e2 	bl	8008044 <_nx_tcp_socket_send>
    if (status != NX_SUCCESS)
 800be80:	4604      	mov	r4, r0
 800be82:	2800      	cmp	r0, #0
 800be84:	d0ee      	beq.n	800be64 <_nx_http_server_response_send+0x1a0>
        nx_packet_release(packet_ptr);
 800be86:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be88:	f7fa fdb2 	bl	80069f0 <_nx_packet_release>
}
 800be8c:	4620      	mov	r0, r4
 800be8e:	b017      	add	sp, #92	; 0x5c
 800be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        server_ptr -> nx_http_server_allocation_errors++;
 800be94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be96:	3301      	adds	r3, #1
 800be98:	6663      	str	r3, [r4, #100]	; 0x64
        return(NX_HTTP_ERROR);
 800be9a:	24e0      	movs	r4, #224	; 0xe0
}
 800be9c:	4620      	mov	r0, r4
 800be9e:	b017      	add	sp, #92	; 0x5c
 800bea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        length = 0;
 800bea4:	9303      	str	r3, [sp, #12]
 800bea6:	e71f      	b.n	800bce8 <_nx_http_server_response_send+0x24>
        status += nx_packet_data_append(packet_ptr, "Connection: Close", 17,
 800bea8:	f04f 3aff 	mov.w	sl, #4294967295
 800beac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800beae:	2211      	movs	r2, #17
 800beb0:	494d      	ldr	r1, [pc, #308]	; (800bfe8 <_nx_http_server_response_send+0x324>)
 800beb2:	f8cd a000 	str.w	sl, [sp]
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7fa fc46 	bl	8006748 <_nx_packet_data_append>
 800bebc:	4681      	mov	r9, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bebe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bec0:	2202      	movs	r2, #2
 800bec2:	f8cd a000 	str.w	sl, [sp]
 800bec6:	a909      	add	r1, sp, #36	; 0x24
 800bec8:	4630      	mov	r0, r6
 800beca:	f7fa fc3d 	bl	8006748 <_nx_packet_data_append>
        if(content_length)
 800bece:	9b03      	ldr	r3, [sp, #12]
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800bed0:	4448      	add	r0, r9
 800bed2:	4405      	add	r5, r0
        if(content_length)
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f43f af6a 	beq.w	800bdae <_nx_http_server_response_send+0xea>
 800beda:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 800bede:	461f      	mov	r7, r3
    size =  0;
 800bee0:	2100      	movs	r1, #0
 800bee2:	f8df c110 	ldr.w	ip, [pc, #272]	; 800bff4 <_nx_http_server_response_send+0x330>
 800bee6:	465b      	mov	r3, fp
 800bee8:	e03c      	b.n	800bf64 <_nx_http_server_response_send+0x2a0>
            string[j] =  string[j-1];
 800beea:	f813 ec01 	ldrb.w	lr, [r3, #-1]
        for (j = size; j != 0; j--)
 800beee:	2901      	cmp	r1, #1
            string[j] =  string[j-1];
 800bef0:	f883 e000 	strb.w	lr, [r3]
        for (j = size; j != 0; j--)
 800bef4:	d02d      	beq.n	800bf52 <_nx_http_server_response_send+0x28e>
            string[j] =  string[j-1];
 800bef6:	f813 ec02 	ldrb.w	lr, [r3, #-2]
        for (j = size; j != 0; j--)
 800befa:	2902      	cmp	r1, #2
            string[j] =  string[j-1];
 800befc:	f803 ec01 	strb.w	lr, [r3, #-1]
        for (j = size; j != 0; j--)
 800bf00:	d027      	beq.n	800bf52 <_nx_http_server_response_send+0x28e>
            string[j] =  string[j-1];
 800bf02:	f813 ec03 	ldrb.w	lr, [r3, #-3]
        for (j = size; j != 0; j--)
 800bf06:	2903      	cmp	r1, #3
            string[j] =  string[j-1];
 800bf08:	f803 ec02 	strb.w	lr, [r3, #-2]
        for (j = size; j != 0; j--)
 800bf0c:	d021      	beq.n	800bf52 <_nx_http_server_response_send+0x28e>
            string[j] =  string[j-1];
 800bf0e:	f813 ec04 	ldrb.w	lr, [r3, #-4]
        for (j = size; j != 0; j--)
 800bf12:	2904      	cmp	r1, #4
            string[j] =  string[j-1];
 800bf14:	f803 ec03 	strb.w	lr, [r3, #-3]
        for (j = size; j != 0; j--)
 800bf18:	d01b      	beq.n	800bf52 <_nx_http_server_response_send+0x28e>
            string[j] =  string[j-1];
 800bf1a:	f813 ec05 	ldrb.w	lr, [r3, #-5]
        for (j = size; j != 0; j--)
 800bf1e:	2905      	cmp	r1, #5
            string[j] =  string[j-1];
 800bf20:	f803 ec04 	strb.w	lr, [r3, #-4]
        for (j = size; j != 0; j--)
 800bf24:	d015      	beq.n	800bf52 <_nx_http_server_response_send+0x28e>
            string[j] =  string[j-1];
 800bf26:	f813 ec06 	ldrb.w	lr, [r3, #-6]
        for (j = size; j != 0; j--)
 800bf2a:	2906      	cmp	r1, #6
            string[j] =  string[j-1];
 800bf2c:	f803 ec05 	strb.w	lr, [r3, #-5]
        for (j = size; j != 0; j--)
 800bf30:	d00f      	beq.n	800bf52 <_nx_http_server_response_send+0x28e>
            string[j] =  string[j-1];
 800bf32:	f813 ec07 	ldrb.w	lr, [r3, #-7]
        for (j = size; j != 0; j--)
 800bf36:	2907      	cmp	r1, #7
            string[j] =  string[j-1];
 800bf38:	f803 ec06 	strb.w	lr, [r3, #-6]
        for (j = size; j != 0; j--)
 800bf3c:	d009      	beq.n	800bf52 <_nx_http_server_response_send+0x28e>
            string[j] =  string[j-1];
 800bf3e:	f813 ec08 	ldrb.w	lr, [r3, #-8]
        for (j = size; j != 0; j--)
 800bf42:	2908      	cmp	r1, #8
            string[j] =  string[j-1];
 800bf44:	f803 ec07 	strb.w	lr, [r3, #-7]
        for (j = size; j != 0; j--)
 800bf48:	d003      	beq.n	800bf52 <_nx_http_server_response_send+0x28e>
            string[j] =  string[j-1];
 800bf4a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800bf4e:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        string[0] =  (CHAR) (digit + 0x30);
 800bf52:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        if (number == 0)
 800bf56:	b1c8      	cbz	r0, 800bf8c <_nx_http_server_response_send+0x2c8>
    while (size < 10)
 800bf58:	f1b9 0f0a 	cmp.w	r9, #10
 800bf5c:	f000 80da 	beq.w	800c114 <_nx_http_server_response_send+0x450>
 800bf60:	3301      	adds	r3, #1
        length = information_length;
 800bf62:	4649      	mov	r1, r9
 800bf64:	fbac 2007 	umull	r2, r0, ip, r7
 800bf68:	f101 0901 	add.w	r9, r1, #1
 800bf6c:	08c0      	lsrs	r0, r0, #3
 800bf6e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800bf72:	eba7 0242 	sub.w	r2, r7, r2, lsl #1
 800bf76:	4607      	mov	r7, r0
 800bf78:	3230      	adds	r2, #48	; 0x30
 800bf7a:	b2d2      	uxtb	r2, r2
        for (j = size; j != 0; j--)
 800bf7c:	2900      	cmp	r1, #0
 800bf7e:	d1b4      	bne.n	800beea <_nx_http_server_response_send+0x226>
        string[0] =  (CHAR) (digit + 0x30);
 800bf80:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        if (number == 0)
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d1eb      	bne.n	800bf60 <_nx_http_server_response_send+0x29c>
 800bf88:	f04f 0901 	mov.w	r9, #1
    string[size] =  (CHAR) NX_NULL;
 800bf8c:	ab16      	add	r3, sp, #88	; 0x58
 800bf8e:	2200      	movs	r2, #0
 800bf90:	444b      	add	r3, r9
 800bf92:	f803 2c20 	strb.w	r2, [r3, #-32]
 800bf96:	e0c4      	b.n	800c122 <_nx_http_server_response_send+0x45e>
           ((status_code_ok == NX_TRUE) || (status_code_not_modified == NX_TRUE)) &&
 800bf98:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
 800bf9c:	2a01      	cmp	r2, #1
 800bf9e:	f47f af3b 	bne.w	800be18 <_nx_http_server_response_send+0x154>
            if(server_ptr -> nx_http_server_cache_info_get(server_ptr -> nx_http_server_request_resource, &max_age, &date) == NX_TRUE)
 800bfa2:	aa0c      	add	r2, sp, #48	; 0x30
 800bfa4:	a90b      	add	r1, sp, #44	; 0x2c
 800bfa6:	f104 000c 	add.w	r0, r4, #12
 800bfaa:	4798      	blx	r3
 800bfac:	2801      	cmp	r0, #1
 800bfae:	f47f af33 	bne.w	800be18 <_nx_http_server_response_send+0x154>
                status += nx_packet_data_append(packet_ptr, "Cache-Control: max-age=", 23,
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bfb8:	490d      	ldr	r1, [pc, #52]	; (800bff0 <_nx_http_server_response_send+0x32c>)
 800bfba:	2217      	movs	r2, #23
 800bfbc:	9000      	str	r0, [sp, #0]
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7fa fbc2 	bl	8006748 <_nx_packet_data_append>
                temp = _nx_http_server_number_convert(max_age, temp_string);
 800bfc4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
                status += nx_packet_data_append(packet_ptr, "Cache-Control: max-age=", 23,
 800bfc6:	eb05 0900 	add.w	r9, r5, r0
 800bfca:	465b      	mov	r3, fp
    size =  0;
 800bfcc:	2100      	movs	r1, #0
 800bfce:	f8df e024 	ldr.w	lr, [pc, #36]	; 800bff4 <_nx_http_server_response_send+0x330>
 800bfd2:	e04c      	b.n	800c06e <_nx_http_server_response_send+0x3aa>
 800bfd4:	0801f940 	.word	0x0801f940
 800bfd8:	080255e4 	.word	0x080255e4
 800bfdc:	080255ec 	.word	0x080255ec
 800bfe0:	08025584 	.word	0x08025584
 800bfe4:	0802525c 	.word	0x0802525c
 800bfe8:	08025610 	.word	0x08025610
 800bfec:	08025638 	.word	0x08025638
 800bff0:	08025640 	.word	0x08025640
 800bff4:	cccccccd 	.word	0xcccccccd
            string[j] =  string[j-1];
 800bff8:	f813 cc01 	ldrb.w	ip, [r3, #-1]
        for (j = size; j != 0; j--)
 800bffc:	2901      	cmp	r1, #1
            string[j] =  string[j-1];
 800bffe:	f883 c000 	strb.w	ip, [r3]
        for (j = size; j != 0; j--)
 800c002:	d02d      	beq.n	800c060 <_nx_http_server_response_send+0x39c>
            string[j] =  string[j-1];
 800c004:	f813 cc02 	ldrb.w	ip, [r3, #-2]
        for (j = size; j != 0; j--)
 800c008:	2902      	cmp	r1, #2
            string[j] =  string[j-1];
 800c00a:	f803 cc01 	strb.w	ip, [r3, #-1]
        for (j = size; j != 0; j--)
 800c00e:	d027      	beq.n	800c060 <_nx_http_server_response_send+0x39c>
            string[j] =  string[j-1];
 800c010:	f813 cc03 	ldrb.w	ip, [r3, #-3]
        for (j = size; j != 0; j--)
 800c014:	2903      	cmp	r1, #3
            string[j] =  string[j-1];
 800c016:	f803 cc02 	strb.w	ip, [r3, #-2]
        for (j = size; j != 0; j--)
 800c01a:	d021      	beq.n	800c060 <_nx_http_server_response_send+0x39c>
            string[j] =  string[j-1];
 800c01c:	f813 cc04 	ldrb.w	ip, [r3, #-4]
        for (j = size; j != 0; j--)
 800c020:	2904      	cmp	r1, #4
            string[j] =  string[j-1];
 800c022:	f803 cc03 	strb.w	ip, [r3, #-3]
        for (j = size; j != 0; j--)
 800c026:	d01b      	beq.n	800c060 <_nx_http_server_response_send+0x39c>
            string[j] =  string[j-1];
 800c028:	f813 cc05 	ldrb.w	ip, [r3, #-5]
        for (j = size; j != 0; j--)
 800c02c:	2905      	cmp	r1, #5
            string[j] =  string[j-1];
 800c02e:	f803 cc04 	strb.w	ip, [r3, #-4]
        for (j = size; j != 0; j--)
 800c032:	d015      	beq.n	800c060 <_nx_http_server_response_send+0x39c>
            string[j] =  string[j-1];
 800c034:	f813 cc06 	ldrb.w	ip, [r3, #-6]
        for (j = size; j != 0; j--)
 800c038:	2906      	cmp	r1, #6
            string[j] =  string[j-1];
 800c03a:	f803 cc05 	strb.w	ip, [r3, #-5]
        for (j = size; j != 0; j--)
 800c03e:	d00f      	beq.n	800c060 <_nx_http_server_response_send+0x39c>
            string[j] =  string[j-1];
 800c040:	f813 cc07 	ldrb.w	ip, [r3, #-7]
        for (j = size; j != 0; j--)
 800c044:	2907      	cmp	r1, #7
            string[j] =  string[j-1];
 800c046:	f803 cc06 	strb.w	ip, [r3, #-6]
        for (j = size; j != 0; j--)
 800c04a:	d009      	beq.n	800c060 <_nx_http_server_response_send+0x39c>
            string[j] =  string[j-1];
 800c04c:	f813 cc08 	ldrb.w	ip, [r3, #-8]
        for (j = size; j != 0; j--)
 800c050:	2908      	cmp	r1, #8
            string[j] =  string[j-1];
 800c052:	f803 cc07 	strb.w	ip, [r3, #-7]
        for (j = size; j != 0; j--)
 800c056:	d003      	beq.n	800c060 <_nx_http_server_response_send+0x39c>
            string[j] =  string[j-1];
 800c058:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c05c:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        string[0] =  (CHAR) (digit + 0x30);
 800c060:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        if (number == 0)
 800c064:	b1b0      	cbz	r0, 800c094 <_nx_http_server_response_send+0x3d0>
    while (size < 10)
 800c066:	2d0a      	cmp	r5, #10
 800c068:	d07a      	beq.n	800c160 <_nx_http_server_response_send+0x49c>
 800c06a:	3301      	adds	r3, #1
        size =  0;
 800c06c:	4629      	mov	r1, r5
 800c06e:	fbae 2007 	umull	r2, r0, lr, r7
 800c072:	1c4d      	adds	r5, r1, #1
 800c074:	08c0      	lsrs	r0, r0, #3
 800c076:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800c07a:	eba7 0242 	sub.w	r2, r7, r2, lsl #1
 800c07e:	4607      	mov	r7, r0
 800c080:	3230      	adds	r2, #48	; 0x30
 800c082:	f002 02ff 	and.w	r2, r2, #255	; 0xff
        for (j = size; j != 0; j--)
 800c086:	2900      	cmp	r1, #0
 800c088:	d1b6      	bne.n	800bff8 <_nx_http_server_response_send+0x334>
        string[0] =  (CHAR) (digit + 0x30);
 800c08a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        if (number == 0)
 800c08e:	2800      	cmp	r0, #0
 800c090:	d1eb      	bne.n	800c06a <_nx_http_server_response_send+0x3a6>
 800c092:	2501      	movs	r5, #1
    string[size] =  (CHAR) NX_NULL;
 800c094:	ab16      	add	r3, sp, #88	; 0x58
 800c096:	2200      	movs	r2, #0
 800c098:	9504      	str	r5, [sp, #16]
 800c09a:	442b      	add	r3, r5
 800c09c:	f803 2c20 	strb.w	r2, [r3, #-32]
 800c0a0:	462a      	mov	r2, r5
                status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800c0a2:	f04f 37ff 	mov.w	r7, #4294967295
 800c0a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c0a8:	4659      	mov	r1, fp
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	9700      	str	r7, [sp, #0]
 800c0ae:	f7fa fb4b 	bl	8006748 <_nx_packet_data_append>
                status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c0b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800c0b4:	eb09 0500 	add.w	r5, r9, r0
                status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c0b8:	9700      	str	r7, [sp, #0]
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	a909      	add	r1, sp, #36	; 0x24
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7fa fb42 	bl	8006748 <_nx_packet_data_append>
                if(status_code_ok == NX_TRUE)
 800c0c4:	9b07      	ldr	r3, [sp, #28]
                status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c0c6:	4405      	add	r5, r0
                if(status_code_ok == NX_TRUE)
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f47f aea5 	bne.w	800be18 <_nx_http_server_response_send+0x154>
                    temp = _nx_http_server_date_to_string(&date, temp_string);
 800c0ce:	4659      	mov	r1, fp
 800c0d0:	a80c      	add	r0, sp, #48	; 0x30
 800c0d2:	f7ff facb 	bl	800b66c <_nx_http_server_date_to_string>
                    status += nx_packet_data_append(packet_ptr, "Last-Modified: ", 15,
 800c0d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                    temp = _nx_http_server_date_to_string(&date, temp_string);
 800c0d8:	4682      	mov	sl, r0
                    status += nx_packet_data_append(packet_ptr, "Last-Modified: ", 15,
 800c0da:	220f      	movs	r2, #15
 800c0dc:	4924      	ldr	r1, [pc, #144]	; (800c170 <_nx_http_server_response_send+0x4ac>)
 800c0de:	4630      	mov	r0, r6
 800c0e0:	9700      	str	r7, [sp, #0]
 800c0e2:	f7fa fb31 	bl	8006748 <_nx_packet_data_append>
 800c0e6:	4681      	mov	r9, r0
                    status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c0e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c0ea:	4652      	mov	r2, sl
 800c0ec:	4659      	mov	r1, fp
 800c0ee:	9700      	str	r7, [sp, #0]
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f7fa fb29 	bl	8006748 <_nx_packet_data_append>
 800c0f6:	4448      	add	r0, r9
                    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c0f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c0fa:	2202      	movs	r2, #2
                    status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c0fc:	4405      	add	r5, r0
                    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c0fe:	9700      	str	r7, [sp, #0]
 800c100:	a909      	add	r1, sp, #36	; 0x24
 800c102:	4630      	mov	r0, r6
 800c104:	f7fa fb20 	bl	8006748 <_nx_packet_data_append>
 800c108:	4405      	add	r5, r0
 800c10a:	e685      	b.n	800be18 <_nx_http_server_response_send+0x154>
        nx_packet_release(packet_ptr);
 800c10c:	4630      	mov	r0, r6
 800c10e:	f7fa fc6f 	bl	80069f0 <_nx_packet_release>
 800c112:	e6c2      	b.n	800be9a <_nx_http_server_response_send+0x1d6>
    string[size] =  (CHAR) NX_NULL;
 800c114:	f04f 0900 	mov.w	r9, #0
        string[0] = '0';
 800c118:	2330      	movs	r3, #48	; 0x30
    string[size] =  (CHAR) NX_NULL;
 800c11a:	f88d 9042 	strb.w	r9, [sp, #66]	; 0x42
        string[0] = '0';
 800c11e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
            status += nx_packet_data_append(packet_ptr, "Content-Length: ", 16,
 800c122:	f04f 3aff 	mov.w	sl, #4294967295
 800c126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c128:	2210      	movs	r2, #16
 800c12a:	4912      	ldr	r1, [pc, #72]	; (800c174 <_nx_http_server_response_send+0x4b0>)
 800c12c:	f8cd a000 	str.w	sl, [sp]
 800c130:	4630      	mov	r0, r6
 800c132:	f7fa fb09 	bl	8006748 <_nx_packet_data_append>
 800c136:	4607      	mov	r7, r0
            status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800c138:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c13a:	464a      	mov	r2, r9
 800c13c:	4659      	mov	r1, fp
 800c13e:	f8cd a000 	str.w	sl, [sp]
 800c142:	4630      	mov	r0, r6
 800c144:	f7fa fb00 	bl	8006748 <_nx_packet_data_append>
 800c148:	4438      	add	r0, r7
            status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c14a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c14c:	2202      	movs	r2, #2
            status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800c14e:	4405      	add	r5, r0
            status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800c150:	f8cd a000 	str.w	sl, [sp]
 800c154:	a909      	add	r1, sp, #36	; 0x24
 800c156:	4630      	mov	r0, r6
 800c158:	f7fa faf6 	bl	8006748 <_nx_packet_data_append>
 800c15c:	4405      	add	r5, r0
 800c15e:	e626      	b.n	800bdae <_nx_http_server_response_send+0xea>
    string[size] =  (CHAR) NX_NULL;
 800c160:	2200      	movs	r2, #0
        string[0] = '0';
 800c162:	2330      	movs	r3, #48	; 0x30
    string[size] =  (CHAR) NX_NULL;
 800c164:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
        string[0] = '0';
 800c168:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800c16c:	9a04      	ldr	r2, [sp, #16]
 800c16e:	e798      	b.n	800c0a2 <_nx_http_server_response_send+0x3de>
 800c170:	08025658 	.word	0x08025658
 800c174:	08025624 	.word	0x08025624

0800c178 <_nx_http_server_put_process>:
UINT        auth_request_present = NX_FALSE;
 800c178:	2300      	movs	r3, #0
{
 800c17a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c17e:	460c      	mov	r4, r1
    destination[0] =  (CHAR) 0;
 800c180:	7303      	strb	r3, [r0, #12]
{
 800c182:	b099      	sub	sp, #100	; 0x64
 800c184:	4605      	mov	r5, r0
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800c186:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
UINT        name_length = 0;
 800c18a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800c18e:	428a      	cmp	r2, r1
UINT        temp_realm_length = 0;
 800c190:	9311      	str	r3, [sp, #68]	; 0x44
UINT        realm_length = 0;
 800c192:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
UINT        temp_password_length = 0;
 800c196:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800c19a:	d20c      	bcs.n	800c1b6 <_nx_http_server_put_process+0x3e>
 800c19c:	7813      	ldrb	r3, [r2, #0]
 800c19e:	2b20      	cmp	r3, #32
 800c1a0:	d030      	beq.n	800c204 <_nx_http_server_put_process+0x8c>
 800c1a2:	1c53      	adds	r3, r2, #1
 800c1a4:	e002      	b.n	800c1ac <_nx_http_server_put_process+0x34>
 800c1a6:	7810      	ldrb	r0, [r2, #0]
 800c1a8:	2820      	cmp	r0, #32
 800c1aa:	d02b      	beq.n	800c204 <_nx_http_server_put_process+0x8c>
 800c1ac:	4299      	cmp	r1, r3
        buffer_ptr++;
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f103 0301 	add.w	r3, r3, #1
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800c1b4:	d1f7      	bne.n	800c1a6 <_nx_http_server_put_process+0x2e>
    status = _nx_http_server_generate_response_header(server_ptr, &packet_ptr, status_code, status_code_length, length, NX_NULL, 0, NX_NULL, 0);
 800c1b6:	2400      	movs	r4, #0
 800c1b8:	2611      	movs	r6, #17
 800c1ba:	230f      	movs	r3, #15
 800c1bc:	4a95      	ldr	r2, [pc, #596]	; (800c414 <_nx_http_server_put_process+0x29c>)
 800c1be:	9404      	str	r4, [sp, #16]
 800c1c0:	a913      	add	r1, sp, #76	; 0x4c
 800c1c2:	9403      	str	r4, [sp, #12]
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	9600      	str	r6, [sp, #0]
 800c1c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800c1cc:	f7ff fb2c 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status != NX_SUCCESS)
 800c1d0:	b9a8      	cbnz	r0, 800c1fe <_nx_http_server_put_process+0x86>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800c1d2:	f04f 31ff 	mov.w	r1, #4294967295
 800c1d6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c1d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c1da:	4632      	mov	r2, r6
 800c1dc:	9100      	str	r1, [sp, #0]
 800c1de:	498e      	ldr	r1, [pc, #568]	; (800c418 <_nx_http_server_put_process+0x2a0>)
 800c1e0:	f7fa fab2 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	f040 80af 	bne.w	800c348 <_nx_http_server_put_process+0x1d0>
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), data_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800c1ea:	f505 7016 	add.w	r0, r5, #600	; 0x258
 800c1ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c1f4:	f7fb ff26 	bl	8008044 <_nx_tcp_socket_send>
        if (status != NX_SUCCESS)
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	f040 80a5 	bne.w	800c348 <_nx_http_server_put_process+0x1d0>
}
 800c1fe:	b019      	add	sp, #100	; 0x64
 800c200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((buffer_ptr + 7 < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800c204:	f102 0008 	add.w	r0, r2, #8
    buffer_ptr++;
 800c208:	1c53      	adds	r3, r2, #1
    if ((buffer_ptr + 7 < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800c20a:	4288      	cmp	r0, r1
 800c20c:	d231      	bcs.n	800c272 <_nx_http_server_put_process+0xfa>
 800c20e:	7856      	ldrb	r6, [r2, #1]
 800c210:	2e2f      	cmp	r6, #47	; 0x2f
 800c212:	d02e      	beq.n	800c272 <_nx_http_server_put_process+0xfa>
        if (((*buffer_ptr == 'h') || (*buffer_ptr == 'H')) &&
 800c214:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800c218:	2e48      	cmp	r6, #72	; 0x48
 800c21a:	d12a      	bne.n	800c272 <_nx_http_server_put_process+0xfa>
            ((*(buffer_ptr + 1) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800c21c:	7896      	ldrb	r6, [r2, #2]
        if (((*buffer_ptr == 'h') || (*buffer_ptr == 'H')) &&
 800c21e:	f006 07df 	and.w	r7, r6, #223	; 0xdf
 800c222:	2f54      	cmp	r7, #84	; 0x54
 800c224:	d125      	bne.n	800c272 <_nx_http_server_put_process+0xfa>
            ((*(buffer_ptr + 1) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800c226:	78d7      	ldrb	r7, [r2, #3]
            ((*(buffer_ptr + 2) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800c228:	2f74      	cmp	r7, #116	; 0x74
 800c22a:	d001      	beq.n	800c230 <_nx_http_server_put_process+0xb8>
 800c22c:	2e54      	cmp	r6, #84	; 0x54
 800c22e:	d120      	bne.n	800c272 <_nx_http_server_put_process+0xfa>
            ((*(buffer_ptr + 3) == 'p') || (*(buffer_ptr + 1) == 'P')) &&
 800c230:	7916      	ldrb	r6, [r2, #4]
 800c232:	2e70      	cmp	r6, #112	; 0x70
 800c234:	d11d      	bne.n	800c272 <_nx_http_server_put_process+0xfa>
 800c236:	7956      	ldrb	r6, [r2, #5]
 800c238:	2e3a      	cmp	r6, #58	; 0x3a
 800c23a:	d11a      	bne.n	800c272 <_nx_http_server_put_process+0xfa>
            (*(buffer_ptr + 4) == ':') &&
 800c23c:	7996      	ldrb	r6, [r2, #6]
 800c23e:	2e2f      	cmp	r6, #47	; 0x2f
 800c240:	d117      	bne.n	800c272 <_nx_http_server_put_process+0xfa>
            (*(buffer_ptr + 5) == '/') &&
 800c242:	79d6      	ldrb	r6, [r2, #7]
 800c244:	2e2f      	cmp	r6, #47	; 0x2f
 800c246:	d114      	bne.n	800c272 <_nx_http_server_put_process+0xfa>
            while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != '/'))
 800c248:	7a13      	ldrb	r3, [r2, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 823b 	beq.w	800c6c6 <_nx_http_server_put_process+0x54e>
 800c250:	2b2f      	cmp	r3, #47	; 0x2f
 800c252:	f000 8238 	beq.w	800c6c6 <_nx_http_server_put_process+0x54e>
 800c256:	3209      	adds	r2, #9
 800c258:	e007      	b.n	800c26a <_nx_http_server_put_process+0xf2>
 800c25a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 8231 	beq.w	800c6c6 <_nx_http_server_put_process+0x54e>
 800c264:	2b2f      	cmp	r3, #47	; 0x2f
 800c266:	f000 822e 	beq.w	800c6c6 <_nx_http_server_put_process+0x54e>
 800c26a:	428a      	cmp	r2, r1
                buffer_ptr++;
 800c26c:	4610      	mov	r0, r2
            while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != '/'))
 800c26e:	d3f4      	bcc.n	800c25a <_nx_http_server_put_process+0xe2>
 800c270:	e7a1      	b.n	800c1b6 <_nx_http_server_put_process+0x3e>
    if ((buffer_ptr >= (CHAR *) packet_ptr -> nx_packet_append_ptr) || (*buffer_ptr != '/'))
 800c272:	428b      	cmp	r3, r1
 800c274:	d29f      	bcs.n	800c1b6 <_nx_http_server_put_process+0x3e>
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	2a2f      	cmp	r2, #47	; 0x2f
 800c27a:	d19c      	bne.n	800c1b6 <_nx_http_server_put_process+0x3e>
    status =  _nx_http_server_retrieve_resource(packet_ptr, server_ptr -> nx_http_server_request_resource, NX_HTTP_MAX_RESOURCE + 1);
 800c27c:	f105 070c 	add.w	r7, r5, #12
 800c280:	2600      	movs	r6, #0
 800c282:	e007      	b.n	800c294 <_nx_http_server_put_process+0x11c>
            destination[i++] =  *buffer_ptr++;
 800c284:	3301      	adds	r3, #1
 800c286:	55ba      	strb	r2, [r7, r6]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' ') && (*buffer_ptr != ';') && (*buffer_ptr != '?') && (i < (max_size-1)))
 800c288:	68e1      	ldr	r1, [r4, #12]
 800c28a:	3601      	adds	r6, #1
 800c28c:	4299      	cmp	r1, r3
 800c28e:	f240 8087 	bls.w	800c3a0 <_nx_http_server_put_process+0x228>
 800c292:	781a      	ldrb	r2, [r3, #0]
 800c294:	f002 00fb 	and.w	r0, r2, #251	; 0xfb
 800c298:	283b      	cmp	r0, #59	; 0x3b
 800c29a:	f000 8084 	beq.w	800c3a6 <_nx_http_server_put_process+0x22e>
 800c29e:	2a20      	cmp	r2, #32
 800c2a0:	f000 8081 	beq.w	800c3a6 <_nx_http_server_put_process+0x22e>
 800c2a4:	2e28      	cmp	r6, #40	; 0x28
 800c2a6:	d07b      	beq.n	800c3a0 <_nx_http_server_put_process+0x228>
        if(*buffer_ptr == '%')
 800c2a8:	2a25      	cmp	r2, #37	; 0x25
 800c2aa:	d1eb      	bne.n	800c284 <_nx_http_server_put_process+0x10c>
            if((buffer_ptr + 2) < (CHAR *)packet_ptr -> nx_packet_append_ptr)
 800c2ac:	1c9a      	adds	r2, r3, #2
 800c2ae:	4291      	cmp	r1, r2
 800c2b0:	d976      	bls.n	800c3a0 <_nx_http_server_put_process+0x228>
                if((*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800c2b2:	7859      	ldrb	r1, [r3, #1]
 800c2b4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c2b8:	b2d2      	uxtb	r2, r2
 800c2ba:	2a09      	cmp	r2, #9
 800c2bc:	d84a      	bhi.n	800c354 <_nx_http_server_put_process+0x1dc>
 800c2be:	19b8      	adds	r0, r7, r6
                    destination[i] = (CHAR)(*buffer_ptr - '0');
 800c2c0:	55ba      	strb	r2, [r7, r6]
                destination[i] = (CHAR)(destination[i] << 4);
 800c2c2:	0112      	lsls	r2, r2, #4
 800c2c4:	b2d2      	uxtb	r2, r2
 800c2c6:	7002      	strb	r2, [r0, #0]
                if((*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800c2c8:	f893 c002 	ldrb.w	ip, [r3, #2]
 800c2cc:	f1ac 0130 	sub.w	r1, ip, #48	; 0x30
 800c2d0:	b2c9      	uxtb	r1, r1
 800c2d2:	2909      	cmp	r1, #9
 800c2d4:	d84c      	bhi.n	800c370 <_nx_http_server_put_process+0x1f8>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - '0'));
 800c2d6:	440a      	add	r2, r1
 800c2d8:	7002      	strb	r2, [r0, #0]
                buffer_ptr++;
 800c2da:	3303      	adds	r3, #3
 800c2dc:	e7d4      	b.n	800c288 <_nx_http_server_put_process+0x110>
    while (length)
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 81f8 	beq.w	800c6d4 <_nx_http_server_put_process+0x55c>
 800c2e4:	f505 7816 	add.w	r8, r5, #600	; 0x258
 800c2e8:	af13      	add	r7, sp, #76	; 0x4c
        status =  nx_tcp_socket_receive(&(server_ptr -> nx_http_server_socket), &data_packet_ptr, NX_HTTP_SERVER_TIMEOUT_RECEIVE);
 800c2ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	f7fb fc47 	bl	8007b84 <_nx_tcp_socket_receive>
        if (status != NX_SUCCESS)
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	f040 81e7 	bne.w	800c6ca <_nx_http_server_put_process+0x552>
        next_packet_ptr =  data_packet_ptr;
 800c2fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c2fe:	e00f      	b.n	800c320 <_nx_http_server_put_process+0x1a8>
            length =  length - (UINT)(next_packet_ptr -> nx_packet_append_ptr - next_packet_ptr -> nx_packet_prepend_ptr);
 800c300:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c304:	9b07      	ldr	r3, [sp, #28]
 800c306:	1a89      	subs	r1, r1, r2
            server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received +
 800c308:	6e2a      	ldr	r2, [r5, #96]	; 0x60
            next_packet_ptr =  next_packet_ptr -> nx_packet_next;
 800c30a:	6864      	ldr	r4, [r4, #4]
            length =  length - (UINT)(next_packet_ptr -> nx_packet_append_ptr - next_packet_ptr -> nx_packet_prepend_ptr);
 800c30c:	1a5b      	subs	r3, r3, r1
            server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received +
 800c30e:	440a      	add	r2, r1
            length =  length - (UINT)(next_packet_ptr -> nx_packet_append_ptr - next_packet_ptr -> nx_packet_prepend_ptr);
 800c310:	9307      	str	r3, [sp, #28]
            server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received +
 800c312:	662a      	str	r2, [r5, #96]	; 0x60
        } while ((length) && (next_packet_ptr));
 800c314:	2c00      	cmp	r4, #0
 800c316:	f000 819c 	beq.w	800c652 <_nx_http_server_put_process+0x4da>
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 8199 	beq.w	800c652 <_nx_http_server_put_process+0x4da>
            status =  fx_file_write(&(server_ptr -> nx_http_server_file), next_packet_ptr -> nx_packet_prepend_ptr,
 800c320:	68a2      	ldr	r2, [r4, #8]
 800c322:	4630      	mov	r0, r6
                                               (ULONG)(next_packet_ptr -> nx_packet_append_ptr - next_packet_ptr -> nx_packet_prepend_ptr));
 800c324:	68e3      	ldr	r3, [r4, #12]
            status =  fx_file_write(&(server_ptr -> nx_http_server_file), next_packet_ptr -> nx_packet_prepend_ptr,
 800c326:	4611      	mov	r1, r2
 800c328:	1a9a      	subs	r2, r3, r2
 800c32a:	f009 fdfb 	bl	8015f24 <_fxe_file_write>
            if (status != NX_SUCCESS)
 800c32e:	2800      	cmp	r0, #0
 800c330:	d0e6      	beq.n	800c300 <_nx_http_server_put_process+0x188>
                _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c332:	2100      	movs	r1, #0
 800c334:	241b      	movs	r4, #27
 800c336:	4628      	mov	r0, r5
 800c338:	4b38      	ldr	r3, [pc, #224]	; (800c41c <_nx_http_server_put_process+0x2a4>)
 800c33a:	9102      	str	r1, [sp, #8]
 800c33c:	2219      	movs	r2, #25
 800c33e:	e9cd 4100 	strd	r4, r1, [sp]
 800c342:	4937      	ldr	r1, [pc, #220]	; (800c420 <_nx_http_server_put_process+0x2a8>)
 800c344:	f7ff fcbe 	bl	800bcc4 <_nx_http_server_response_send>
                nx_packet_release(data_packet_ptr);
 800c348:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c34a:	f7fa fb51 	bl	80069f0 <_nx_packet_release>
}
 800c34e:	b019      	add	sp, #100	; 0x64
 800c350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                else if((*buffer_ptr >= 'a') && (*buffer_ptr <= 'f'))
 800c354:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 800c358:	2a05      	cmp	r2, #5
 800c35a:	d916      	bls.n	800c38a <_nx_http_server_put_process+0x212>
                else if((*buffer_ptr >= 'A') && (*buffer_ptr <= 'F'))
 800c35c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 800c360:	2a05      	cmp	r2, #5
 800c362:	d81d      	bhi.n	800c3a0 <_nx_http_server_put_process+0x228>
                    destination[i] = (CHAR)(*buffer_ptr - 'A' + 10);
 800c364:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 800c368:	19b8      	adds	r0, r7, r6
 800c36a:	b2d2      	uxtb	r2, r2
 800c36c:	55ba      	strb	r2, [r7, r6]
 800c36e:	e7a8      	b.n	800c2c2 <_nx_http_server_put_process+0x14a>
                else if((*buffer_ptr >= 'a') && (*buffer_ptr <= 'f'))
 800c370:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
 800c374:	2905      	cmp	r1, #5
 800c376:	d90e      	bls.n	800c396 <_nx_http_server_put_process+0x21e>
                else if((*buffer_ptr >= 'A') && (*buffer_ptr <= 'F'))
 800c378:	f1ac 0141 	sub.w	r1, ip, #65	; 0x41
 800c37c:	2905      	cmp	r1, #5
 800c37e:	d80f      	bhi.n	800c3a0 <_nx_http_server_put_process+0x228>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - 'A' + 10));
 800c380:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
 800c384:	4462      	add	r2, ip
 800c386:	7002      	strb	r2, [r0, #0]
 800c388:	e7a7      	b.n	800c2da <_nx_http_server_put_process+0x162>
                    destination[i] = (CHAR)(*buffer_ptr - 'a' + 10);
 800c38a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
 800c38e:	19b8      	adds	r0, r7, r6
 800c390:	b2d2      	uxtb	r2, r2
 800c392:	55ba      	strb	r2, [r7, r6]
 800c394:	e795      	b.n	800c2c2 <_nx_http_server_put_process+0x14a>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - 'a' + 10));
 800c396:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
 800c39a:	4462      	add	r2, ip
 800c39c:	7002      	strb	r2, [r0, #0]
 800c39e:	e79c      	b.n	800c2da <_nx_http_server_put_process+0x162>
                    destination[0] =  (CHAR) 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	732b      	strb	r3, [r5, #12]
 800c3a4:	e707      	b.n	800c1b6 <_nx_http_server_put_process+0x3e>
    if ((destination[0] == (CHAR) 0) || (buffer_ptr >= (CHAR *)packet_ptr -> nx_packet_append_ptr) || ((*buffer_ptr != ' ') && (*buffer_ptr != '?') && (*buffer_ptr != ';')))
 800c3a6:	7b2b      	ldrb	r3, [r5, #12]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d0f9      	beq.n	800c3a0 <_nx_http_server_put_process+0x228>
    destination[i] =  (CHAR) 0;
 800c3ac:	f04f 0800 	mov.w	r8, #0
    status =  _nx_http_server_content_length_get_extended(packet_ptr, &length);
 800c3b0:	a907      	add	r1, sp, #28
 800c3b2:	4620      	mov	r0, r4
    destination[i] =  (CHAR) 0;
 800c3b4:	f807 8006 	strb.w	r8, [r7, r6]
    status =  _nx_http_server_content_length_get_extended(packet_ptr, &length);
 800c3b8:	f7fe fc86 	bl	800acc8 <_nx_http_server_content_length_get_extended>
    if (status != NX_SUCCESS)
 800c3bc:	b1e8      	cbz	r0, 800c3fa <_nx_http_server_put_process+0x282>
    status = _nx_http_server_generate_response_header(server_ptr, &packet_ptr, status_code, status_code_length, length, NX_NULL, 0, NX_NULL, 0);
 800c3be:	2420      	movs	r4, #32
 800c3c0:	230f      	movs	r3, #15
 800c3c2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c3c6:	a913      	add	r1, sp, #76	; 0x4c
 800c3c8:	f8cd 8004 	str.w	r8, [sp, #4]
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	9400      	str	r4, [sp, #0]
 800c3d0:	4a10      	ldr	r2, [pc, #64]	; (800c414 <_nx_http_server_put_process+0x29c>)
 800c3d2:	e9cd 8803 	strd	r8, r8, [sp, #12]
 800c3d6:	f7ff fa27 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status != NX_SUCCESS)
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	f47f af0f 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800c3e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c3e4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c3e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c3e8:	4622      	mov	r2, r4
 800c3ea:	9100      	str	r1, [sp, #0]
 800c3ec:	490d      	ldr	r1, [pc, #52]	; (800c424 <_nx_http_server_put_process+0x2ac>)
 800c3ee:	f7fa f9ab 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	f43f aef9 	beq.w	800c1ea <_nx_http_server_put_process+0x72>
 800c3f8:	e7a6      	b.n	800c348 <_nx_http_server_put_process+0x1d0>
    while (((buffer_ptr+3) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800c3fa:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 800c3fe:	1cda      	adds	r2, r3, #3
 800c400:	4291      	cmp	r1, r2
 800c402:	d961      	bls.n	800c4c8 <_nx_http_server_put_process+0x350>
 800c404:	781a      	ldrb	r2, [r3, #0]
 800c406:	2a00      	cmp	r2, #0
 800c408:	d05e      	beq.n	800c4c8 <_nx_http_server_put_process+0x350>
 800c40a:	f1a1 0803 	sub.w	r8, r1, #3
 800c40e:	eba8 0803 	sub.w	r8, r8, r3
 800c412:	e010      	b.n	800c436 <_nx_http_server_put_process+0x2be>
 800c414:	080256d0 	.word	0x080256d0
 800c418:	080256e0 	.word	0x080256e0
 800c41c:	080257b0 	.word	0x080257b0
 800c420:	08025758 	.word	0x08025758
 800c424:	080256f4 	.word	0x080256f4
        offset++;
 800c428:	3001      	adds	r0, #1
        buffer_ptr++;
 800c42a:	3301      	adds	r3, #1
    while (((buffer_ptr+3) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800c42c:	4540      	cmp	r0, r8
 800c42e:	d00f      	beq.n	800c450 <_nx_http_server_put_process+0x2d8>
 800c430:	781a      	ldrb	r2, [r3, #0]
 800c432:	2a00      	cmp	r2, #0
 800c434:	d046      	beq.n	800c4c4 <_nx_http_server_put_process+0x34c>
        if ((*buffer_ptr ==      (CHAR) 13) &&
 800c436:	2a0d      	cmp	r2, #13
 800c438:	d1f6      	bne.n	800c428 <_nx_http_server_put_process+0x2b0>
 800c43a:	785a      	ldrb	r2, [r3, #1]
 800c43c:	2a0a      	cmp	r2, #10
 800c43e:	d1f3      	bne.n	800c428 <_nx_http_server_put_process+0x2b0>
            (*(buffer_ptr+1) ==  (CHAR) 10) &&
 800c440:	789a      	ldrb	r2, [r3, #2]
 800c442:	2a0d      	cmp	r2, #13
 800c444:	d1f0      	bne.n	800c428 <_nx_http_server_put_process+0x2b0>
            (*(buffer_ptr+2) ==  (CHAR) 13) &&
 800c446:	78da      	ldrb	r2, [r3, #3]
 800c448:	2a0a      	cmp	r2, #10
 800c44a:	d1ed      	bne.n	800c428 <_nx_http_server_put_process+0x2b0>
            offset =  offset + 4;
 800c44c:	f100 0804 	add.w	r8, r0, #4
    if (server_ptr -> nx_http_server_authentication_check ||
 800c450:	f8d5 946c 	ldr.w	r9, [r5, #1132]	; 0x46c
 800c454:	f8d5 6470 	ldr.w	r6, [r5, #1136]	; 0x470
 800c458:	f1b9 0f00 	cmp.w	r9, #0
 800c45c:	d040      	beq.n	800c4e0 <_nx_http_server_put_process+0x368>
        if (server_ptr -> nx_http_server_authentication_check_extended)
 800c45e:	2e00      	cmp	r6, #0
 800c460:	d06f      	beq.n	800c542 <_nx_http_server_put_process+0x3ca>
            status = (server_ptr -> nx_http_server_authentication_check_extended)(server_ptr, NX_HTTP_SERVER_PUT_REQUEST, server_ptr -> nx_http_server_request_resource,
 800c462:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800c466:	ab0a      	add	r3, sp, #40	; 0x28
 800c468:	aa0d      	add	r2, sp, #52	; 0x34
 800c46a:	a909      	add	r1, sp, #36	; 0x24
 800c46c:	a80c      	add	r0, sp, #48	; 0x30
 800c46e:	9202      	str	r2, [sp, #8]
 800c470:	463a      	mov	r2, r7
 800c472:	9101      	str	r1, [sp, #4]
 800c474:	2104      	movs	r1, #4
 800c476:	9000      	str	r0, [sp, #0]
 800c478:	4628      	mov	r0, r5
 800c47a:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 800c47e:	ab08      	add	r3, sp, #32
 800c480:	47b0      	blx	r6
 800c482:	4606      	mov	r6, r0
        if (status == NX_HTTP_BASIC_AUTHENTICATE ||
 800c484:	f1a6 03e4 	sub.w	r3, r6, #228	; 0xe4
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d965      	bls.n	800c558 <_nx_http_server_put_process+0x3e0>
        if ((status != NX_HTTP_DONT_AUTHENTICATE) && (status != NX_SUCCESS))
 800c48c:	2ee3      	cmp	r6, #227	; 0xe3
 800c48e:	d029      	beq.n	800c4e4 <_nx_http_server_put_process+0x36c>
 800c490:	b346      	cbz	r6, 800c4e4 <_nx_http_server_put_process+0x36c>
            if (server_ptr -> nx_http_server_invalid_username_password_callback && auth_request_present)
 800c492:	f8d5 3478 	ldr.w	r3, [r5, #1144]	; 0x478
 800c496:	2b00      	cmp	r3, #0
 800c498:	f43f aeb1 	beq.w	800c1fe <_nx_http_server_put_process+0x86>
 800c49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f43f aead 	beq.w	800c1fe <_nx_http_server_put_process+0x86>
                status =   nxd_tcp_socket_peer_info_get(&(server_ptr->nx_http_server_socket), &client_nxd_address , &client_port);
 800c4a4:	aa12      	add	r2, sp, #72	; 0x48
 800c4a6:	f505 7016 	add.w	r0, r5, #600	; 0x258
 800c4aa:	a913      	add	r1, sp, #76	; 0x4c
 800c4ac:	f002 fcf2 	bl	800ee94 <_nxd_tcp_socket_peer_info_get>
                if (status == NX_SUCCESS)
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	f47f aea4 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
                    (server_ptr -> nx_http_server_invalid_username_password_callback)(server_ptr -> nx_http_server_request_resource, &client_nxd_address, NX_HTTP_SERVER_PUT_REQUEST);
 800c4b6:	f8d5 3478 	ldr.w	r3, [r5, #1144]	; 0x478
 800c4ba:	a913      	add	r1, sp, #76	; 0x4c
 800c4bc:	4638      	mov	r0, r7
 800c4be:	2204      	movs	r2, #4
 800c4c0:	4798      	blx	r3
 800c4c2:	e69c      	b.n	800c1fe <_nx_http_server_put_process+0x86>
    while (((buffer_ptr+3) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800c4c4:	4680      	mov	r8, r0
 800c4c6:	e7c3      	b.n	800c450 <_nx_http_server_put_process+0x2d8>
        _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_BAD_REQUEST, sizeof(NX_HTTP_STATUS_BAD_REQUEST) - 1, 
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	2420      	movs	r4, #32
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	4b82      	ldr	r3, [pc, #520]	; (800c6d8 <_nx_http_server_put_process+0x560>)
 800c4d0:	9102      	str	r1, [sp, #8]
 800c4d2:	220f      	movs	r2, #15
 800c4d4:	e9cd 4100 	strd	r4, r1, [sp]
 800c4d8:	4980      	ldr	r1, [pc, #512]	; (800c6dc <_nx_http_server_put_process+0x564>)
 800c4da:	f7ff fbf3 	bl	800bcc4 <_nx_http_server_response_send>
        return;
 800c4de:	e68e      	b.n	800c1fe <_nx_http_server_put_process+0x86>
    if (server_ptr -> nx_http_server_authentication_check ||
 800c4e0:	2e00      	cmp	r6, #0
 800c4e2:	d1be      	bne.n	800c462 <_nx_http_server_put_process+0x2ea>
    if (server_ptr -> nx_http_server_request_notify)
 800c4e4:	f8d5 6474 	ldr.w	r6, [r5, #1140]	; 0x474
 800c4e8:	b12e      	cbz	r6, 800c4f6 <_nx_http_server_put_process+0x37e>
        status =  (server_ptr -> nx_http_server_request_notify)(server_ptr, NX_HTTP_SERVER_PUT_REQUEST, server_ptr -> nx_http_server_request_resource, packet_ptr);
 800c4ea:	4623      	mov	r3, r4
 800c4ec:	463a      	mov	r2, r7
 800c4ee:	2104      	movs	r1, #4
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b0      	blx	r6
        if (status != NX_SUCCESS)
 800c4f4:	b9b0      	cbnz	r0, 800c524 <_nx_http_server_put_process+0x3ac>
    if (length == 0)
 800c4f6:	9b07      	ldr	r3, [sp, #28]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f43f ae80 	beq.w	800c1fe <_nx_http_server_put_process+0x86>
    status = fx_file_create(server_ptr -> nx_http_server_media_ptr, server_ptr -> nx_http_server_request_resource);
 800c4fe:	4639      	mov	r1, r7
 800c500:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800c502:	f009 fc63 	bl	8015dcc <_fxe_file_create>
    if (status != NX_SUCCESS)
 800c506:	4681      	mov	r9, r0
 800c508:	2800      	cmp	r0, #0
 800c50a:	d06b      	beq.n	800c5e4 <_nx_http_server_put_process+0x46c>
        _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c50c:	2100      	movs	r1, #0
 800c50e:	241c      	movs	r4, #28
 800c510:	4628      	mov	r0, r5
 800c512:	4b73      	ldr	r3, [pc, #460]	; (800c6e0 <_nx_http_server_put_process+0x568>)
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c514:	9102      	str	r1, [sp, #8]
 800c516:	2219      	movs	r2, #25
 800c518:	e9cd 4100 	strd	r4, r1, [sp]
 800c51c:	4971      	ldr	r1, [pc, #452]	; (800c6e4 <_nx_http_server_put_process+0x56c>)
 800c51e:	f7ff fbd1 	bl	800bcc4 <_nx_http_server_response_send>
            return;
 800c522:	e66c      	b.n	800c1fe <_nx_http_server_put_process+0x86>
            if (status == NX_HTTP_CALLBACK_COMPLETED)
 800c524:	28e8      	cmp	r0, #232	; 0xe8
                _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, NX_NULL, 0, NX_NULL, 0);
 800c526:	f04f 0400 	mov.w	r4, #0
            if (status == NX_HTTP_CALLBACK_COMPLETED)
 800c52a:	d051      	beq.n	800c5d0 <_nx_http_server_put_process+0x458>
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c52c:	2119      	movs	r1, #25
 800c52e:	4628      	mov	r0, r5
 800c530:	4b6d      	ldr	r3, [pc, #436]	; (800c6e8 <_nx_http_server_put_process+0x570>)
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c532:	460a      	mov	r2, r1
 800c534:	9402      	str	r4, [sp, #8]
 800c536:	e9cd 1400 	strd	r1, r4, [sp]
 800c53a:	496a      	ldr	r1, [pc, #424]	; (800c6e4 <_nx_http_server_put_process+0x56c>)
 800c53c:	f7ff fbc2 	bl	800bcc4 <_nx_http_server_response_send>
            return;
 800c540:	e65d      	b.n	800c1fe <_nx_http_server_put_process+0x86>
            status = (server_ptr -> nx_http_server_authentication_check)(server_ptr, NX_HTTP_SERVER_PUT_REQUEST, server_ptr -> nx_http_server_request_resource,
 800c542:	a90a      	add	r1, sp, #40	; 0x28
 800c544:	a809      	add	r0, sp, #36	; 0x24
 800c546:	ab08      	add	r3, sp, #32
 800c548:	463a      	mov	r2, r7
 800c54a:	9101      	str	r1, [sp, #4]
 800c54c:	2104      	movs	r1, #4
 800c54e:	9000      	str	r0, [sp, #0]
 800c550:	4628      	mov	r0, r5
 800c552:	47c8      	blx	r9
 800c554:	4606      	mov	r6, r0
 800c556:	e795      	b.n	800c484 <_nx_http_server_put_process+0x30c>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800c558:	2214      	movs	r2, #20
 800c55a:	a90f      	add	r1, sp, #60	; 0x3c
 800c55c:	9808      	ldr	r0, [sp, #32]
 800c55e:	f008 f94f 	bl	8014800 <_nx_utility_string_length_check>
 800c562:	2800      	cmp	r0, #0
 800c564:	f47f ae4b 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800c568:	2214      	movs	r2, #20
 800c56a:	a910      	add	r1, sp, #64	; 0x40
 800c56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c56e:	f008 f947 	bl	8014800 <_nx_utility_string_length_check>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800c572:	2800      	cmp	r0, #0
 800c574:	f47f ae43 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
                _nx_utility_string_length_check(realm_ptr, &temp_realm_length, NX_MAX_STRING_LENGTH))
 800c578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c57c:	a911      	add	r1, sp, #68	; 0x44
 800c57e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c580:	f008 f93e 	bl	8014800 <_nx_utility_string_length_check>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800c584:	2800      	cmp	r0, #0
 800c586:	f47f ae3a 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
            if (server_ptr -> nx_http_server_authentication_check_extended &&
 800c58a:	f8d5 3470 	ldr.w	r3, [r5, #1136]	; 0x470
 800c58e:	b173      	cbz	r3, 800c5ae <_nx_http_server_put_process+0x436>
 800c590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c592:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c594:	429a      	cmp	r2, r3
 800c596:	f47f ae32 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
                ((realm_length != temp_realm_length) ||
 800c59a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c59c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	f47f ae2d 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
                 (name_length != temp_name_length) ||
 800c5a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	f47f ae28 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
        if (status == NX_HTTP_BASIC_AUTHENTICATE)
 800c5ae:	2ee4      	cmp	r6, #228	; 0xe4
 800c5b0:	f47f af6f 	bne.w	800c492 <_nx_http_server_put_process+0x31a>
            status =  _nx_http_server_basic_authenticate(server_ptr, packet_ptr, name_ptr, password_ptr, realm_ptr, temp_realm_length, &auth_request_present);
 800c5b4:	ae0b      	add	r6, sp, #44	; 0x2c
 800c5b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	9602      	str	r6, [sp, #8]
 800c5be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c5c0:	9001      	str	r0, [sp, #4]
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	9600      	str	r6, [sp, #0]
 800c5c6:	9a08      	ldr	r2, [sp, #32]
 800c5c8:	f7fe ff64 	bl	800b494 <_nx_http_server_basic_authenticate>
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	e75d      	b.n	800c48c <_nx_http_server_put_process+0x314>
                _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, NX_NULL, 0, NX_NULL, 0);
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	2206      	movs	r2, #6
 800c5d4:	4945      	ldr	r1, [pc, #276]	; (800c6ec <_nx_http_server_put_process+0x574>)
 800c5d6:	4623      	mov	r3, r4
 800c5d8:	9402      	str	r4, [sp, #8]
 800c5da:	e9cd 4400 	strd	r4, r4, [sp]
 800c5de:	f7ff fb71 	bl	800bcc4 <_nx_http_server_response_send>
                return;
 800c5e2:	e60c      	b.n	800c1fe <_nx_http_server_put_process+0x86>
    status =  fx_file_open(server_ptr -> nx_http_server_media_ptr, &(server_ptr -> nx_http_server_file), server_ptr -> nx_http_server_request_resource, FX_OPEN_FOR_WRITE);
 800c5e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c5e8:	f105 0678 	add.w	r6, r5, #120	; 0x78
 800c5ec:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800c5ee:	463a      	mov	r2, r7
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	f009 fc1d 	bl	8015e34 <_fxe_file_open>
    if (status != NX_SUCCESS)
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d143      	bne.n	800c686 <_nx_http_server_put_process+0x50e>
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) > offset)
 800c5fe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800c602:	1a52      	subs	r2, r2, r1
 800c604:	4590      	cmp	r8, r2
 800c606:	d349      	bcc.n	800c69c <_nx_http_server_put_process+0x524>
 800c608:	9b07      	ldr	r3, [sp, #28]
    next_packet_ptr =  packet_ptr -> nx_packet_next;
 800c60a:	6864      	ldr	r4, [r4, #4]
    while ((length) && (next_packet_ptr))
 800c60c:	2c00      	cmp	r4, #0
 800c60e:	f43f ae66 	beq.w	800c2de <_nx_http_server_put_process+0x166>
 800c612:	b983      	cbnz	r3, 800c636 <_nx_http_server_put_process+0x4be>
 800c614:	e663      	b.n	800c2de <_nx_http_server_put_process+0x166>
        length =  length - (ULONG)(next_packet_ptr -> nx_packet_append_ptr - next_packet_ptr -> nx_packet_prepend_ptr);
 800c616:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800c61a:	9b07      	ldr	r3, [sp, #28]
 800c61c:	1a52      	subs	r2, r2, r1
        server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received +
 800c61e:	6e29      	ldr	r1, [r5, #96]	; 0x60
        next_packet_ptr =  next_packet_ptr -> nx_packet_next;
 800c620:	6864      	ldr	r4, [r4, #4]
        length =  length - (ULONG)(next_packet_ptr -> nx_packet_append_ptr - next_packet_ptr -> nx_packet_prepend_ptr);
 800c622:	1a9b      	subs	r3, r3, r2
        server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received +
 800c624:	440a      	add	r2, r1
        length =  length - (ULONG)(next_packet_ptr -> nx_packet_append_ptr - next_packet_ptr -> nx_packet_prepend_ptr);
 800c626:	9307      	str	r3, [sp, #28]
        server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received +
 800c628:	662a      	str	r2, [r5, #96]	; 0x60
    while ((length) && (next_packet_ptr))
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f43f ae57 	beq.w	800c2de <_nx_http_server_put_process+0x166>
 800c630:	2c00      	cmp	r4, #0
 800c632:	f43f ae54 	beq.w	800c2de <_nx_http_server_put_process+0x166>
        status =  fx_file_write(&(server_ptr -> nx_http_server_file), next_packet_ptr -> nx_packet_prepend_ptr,
 800c636:	68a3      	ldr	r3, [r4, #8]
 800c638:	4630      	mov	r0, r6
                                (ULONG)(next_packet_ptr -> nx_packet_append_ptr - next_packet_ptr -> nx_packet_prepend_ptr));
 800c63a:	68e2      	ldr	r2, [r4, #12]
        status =  fx_file_write(&(server_ptr -> nx_http_server_file), next_packet_ptr -> nx_packet_prepend_ptr,
 800c63c:	4619      	mov	r1, r3
 800c63e:	1ad2      	subs	r2, r2, r3
 800c640:	f009 fc70 	bl	8015f24 <_fxe_file_write>
        if (status != NX_SUCCESS)
 800c644:	2800      	cmp	r0, #0
 800c646:	d0e6      	beq.n	800c616 <_nx_http_server_put_process+0x49e>
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c648:	2100      	movs	r1, #0
 800c64a:	241b      	movs	r4, #27
 800c64c:	4628      	mov	r0, r5
 800c64e:	4b28      	ldr	r3, [pc, #160]	; (800c6f0 <_nx_http_server_put_process+0x578>)
 800c650:	e760      	b.n	800c514 <_nx_http_server_put_process+0x39c>
        nx_packet_release(data_packet_ptr);
 800c652:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c654:	f7fa f9cc 	bl	80069f0 <_nx_packet_release>
    while (length)
 800c658:	9b07      	ldr	r3, [sp, #28]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f47f ae45 	bne.w	800c2ea <_nx_http_server_put_process+0x172>
    fx_file_close(&(server_ptr -> nx_http_server_file));
 800c660:	4630      	mov	r0, r6
 800c662:	f009 fb99 	bl	8015d98 <_fxe_file_close>
    status = _nx_http_server_generate_response_header(server_ptr, &data_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, 0, NX_NULL, 0, NX_NULL, 0);
 800c666:	2200      	movs	r2, #0
 800c668:	4639      	mov	r1, r7
 800c66a:	2306      	movs	r3, #6
 800c66c:	9204      	str	r2, [sp, #16]
 800c66e:	4628      	mov	r0, r5
 800c670:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800c674:	e9cd 2200 	strd	r2, r2, [sp]
 800c678:	4a1c      	ldr	r2, [pc, #112]	; (800c6ec <_nx_http_server_put_process+0x574>)
 800c67a:	f7ff f8d5 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status == NX_SUCCESS)
 800c67e:	2800      	cmp	r0, #0
 800c680:	f47f adbd 	bne.w	800c1fe <_nx_http_server_put_process+0x86>
 800c684:	e5b1      	b.n	800c1ea <_nx_http_server_put_process+0x72>
        _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c686:	231a      	movs	r3, #26
 800c688:	4628      	mov	r0, r5
 800c68a:	2219      	movs	r2, #25
 800c68c:	4915      	ldr	r1, [pc, #84]	; (800c6e4 <_nx_http_server_put_process+0x56c>)
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	4b18      	ldr	r3, [pc, #96]	; (800c6f4 <_nx_http_server_put_process+0x57c>)
 800c692:	e9cd 9901 	strd	r9, r9, [sp, #4]
 800c696:	f7ff fb15 	bl	800bcc4 <_nx_http_server_response_send>
        return;
 800c69a:	e5b0      	b.n	800c1fe <_nx_http_server_put_process+0x86>
        status =  fx_file_write(&(server_ptr -> nx_http_server_file), (packet_ptr -> nx_packet_prepend_ptr + offset),
 800c69c:	eba2 0208 	sub.w	r2, r2, r8
 800c6a0:	4441      	add	r1, r8
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f009 fc3e 	bl	8015f24 <_fxe_file_write>
        if (status != NX_SUCCESS)
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d1cd      	bne.n	800c648 <_nx_http_server_put_process+0x4d0>
        length =  length - ((ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) - offset);
 800c6ac:	9b07      	ldr	r3, [sp, #28]
 800c6ae:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800c6b2:	1a52      	subs	r2, r2, r1
        server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received + 
 800c6b4:	6e29      	ldr	r1, [r5, #96]	; 0x60
        length =  length - ((ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) - offset);
 800c6b6:	1a9b      	subs	r3, r3, r2
        server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received + 
 800c6b8:	440a      	add	r2, r1
        length =  length - ((ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) - offset);
 800c6ba:	4443      	add	r3, r8
        server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received + 
 800c6bc:	eba2 0208 	sub.w	r2, r2, r8
        length =  length - ((ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) - offset);
 800c6c0:	9307      	str	r3, [sp, #28]
        server_ptr -> nx_http_server_total_bytes_received =  server_ptr -> nx_http_server_total_bytes_received + 
 800c6c2:	662a      	str	r2, [r5, #96]	; 0x60
 800c6c4:	e7a1      	b.n	800c60a <_nx_http_server_put_process+0x492>
{
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	e5d5      	b.n	800c276 <_nx_http_server_put_process+0xfe>
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c6ca:	2400      	movs	r4, #0
 800c6cc:	2119      	movs	r1, #25
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	4b09      	ldr	r3, [pc, #36]	; (800c6f8 <_nx_http_server_put_process+0x580>)
 800c6d2:	e72e      	b.n	800c532 <_nx_http_server_put_process+0x3ba>
 800c6d4:	af13      	add	r7, sp, #76	; 0x4c
 800c6d6:	e7c3      	b.n	800c660 <_nx_http_server_put_process+0x4e8>
 800c6d8:	08025718 	.word	0x08025718
 800c6dc:	080256d0 	.word	0x080256d0
 800c6e0:	08025774 	.word	0x08025774
 800c6e4:	08025758 	.word	0x08025758
 800c6e8:	0802573c 	.word	0x0802573c
 800c6ec:	080255e4 	.word	0x080255e4
 800c6f0:	080257b0 	.word	0x080257b0
 800c6f4:	08025794 	.word	0x08025794
 800c6f8:	080257cc 	.word	0x080257cc

0800c6fc <_nx_http_server_delete_process>:
UINT        auth_request_present = NX_FALSE;
 800c6fc:	2300      	movs	r3, #0
{
 800c6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c702:	460d      	mov	r5, r1
    destination[0] =  (CHAR) 0;
 800c704:	7303      	strb	r3, [r0, #12]
{
 800c706:	b096      	sub	sp, #88	; 0x58
 800c708:	4604      	mov	r4, r0
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800c70a:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
UINT        name_length = 0;
 800c70e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800c712:	428a      	cmp	r2, r1
UINT        temp_realm_length = 0;
 800c714:	930f      	str	r3, [sp, #60]	; 0x3c
UINT        realm_length = 0;
 800c716:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
UINT        temp_password_length = 0;
 800c71a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800c71e:	d20c      	bcs.n	800c73a <_nx_http_server_delete_process+0x3e>
 800c720:	7813      	ldrb	r3, [r2, #0]
 800c722:	2b20      	cmp	r3, #32
 800c724:	d02f      	beq.n	800c786 <_nx_http_server_delete_process+0x8a>
 800c726:	1c53      	adds	r3, r2, #1
 800c728:	e002      	b.n	800c730 <_nx_http_server_delete_process+0x34>
 800c72a:	7810      	ldrb	r0, [r2, #0]
 800c72c:	2820      	cmp	r0, #32
 800c72e:	d02a      	beq.n	800c786 <_nx_http_server_delete_process+0x8a>
 800c730:	4299      	cmp	r1, r3
        buffer_ptr++;
 800c732:	461a      	mov	r2, r3
 800c734:	f103 0301 	add.w	r3, r3, #1
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800c738:	d1f7      	bne.n	800c72a <_nx_http_server_delete_process+0x2e>
    status = _nx_http_server_generate_response_header(server_ptr, &packet_ptr, status_code, status_code_length, length, NX_NULL, 0, NX_NULL, 0);
 800c73a:	2500      	movs	r5, #0
 800c73c:	2611      	movs	r6, #17
 800c73e:	230f      	movs	r3, #15
 800c740:	4aad      	ldr	r2, [pc, #692]	; (800c9f8 <_nx_http_server_delete_process+0x2fc>)
 800c742:	9504      	str	r5, [sp, #16]
 800c744:	a911      	add	r1, sp, #68	; 0x44
 800c746:	9503      	str	r5, [sp, #12]
 800c748:	4620      	mov	r0, r4
 800c74a:	9600      	str	r6, [sp, #0]
 800c74c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800c750:	f7ff f86a 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status != NX_SUCCESS)
 800c754:	b9a0      	cbnz	r0, 800c780 <_nx_http_server_delete_process+0x84>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800c756:	f04f 31ff 	mov.w	r1, #4294967295
 800c75a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c75c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c75e:	4632      	mov	r2, r6
 800c760:	9100      	str	r1, [sp, #0]
 800c762:	49a6      	ldr	r1, [pc, #664]	; (800c9fc <_nx_http_server_delete_process+0x300>)
 800c764:	f7f9 fff0 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800c768:	b938      	cbnz	r0, 800c77a <_nx_http_server_delete_process+0x7e>
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), response_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800c76a:	f504 7016 	add.w	r0, r4, #600	; 0x258
 800c76e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c772:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c774:	f7fb fc66 	bl	8008044 <_nx_tcp_socket_send>
        if (status != NX_SUCCESS)
 800c778:	b110      	cbz	r0, 800c780 <_nx_http_server_delete_process+0x84>
            nx_packet_release(response_ptr);
 800c77a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c77c:	f7fa f938 	bl	80069f0 <_nx_packet_release>
}
 800c780:	b016      	add	sp, #88	; 0x58
 800c782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((buffer_ptr + 7 < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800c786:	f102 0008 	add.w	r0, r2, #8
    buffer_ptr++;
 800c78a:	1c53      	adds	r3, r2, #1
    if ((buffer_ptr + 7 < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800c78c:	4288      	cmp	r0, r1
 800c78e:	d231      	bcs.n	800c7f4 <_nx_http_server_delete_process+0xf8>
 800c790:	7856      	ldrb	r6, [r2, #1]
 800c792:	2e2f      	cmp	r6, #47	; 0x2f
 800c794:	d02e      	beq.n	800c7f4 <_nx_http_server_delete_process+0xf8>
        if (((*buffer_ptr == 'h') || (*buffer_ptr == 'H')) &&
 800c796:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800c79a:	2e48      	cmp	r6, #72	; 0x48
 800c79c:	d12a      	bne.n	800c7f4 <_nx_http_server_delete_process+0xf8>
            ((*(buffer_ptr + 1) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800c79e:	7896      	ldrb	r6, [r2, #2]
        if (((*buffer_ptr == 'h') || (*buffer_ptr == 'H')) &&
 800c7a0:	f006 07df 	and.w	r7, r6, #223	; 0xdf
 800c7a4:	2f54      	cmp	r7, #84	; 0x54
 800c7a6:	d125      	bne.n	800c7f4 <_nx_http_server_delete_process+0xf8>
            ((*(buffer_ptr + 1) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800c7a8:	78d7      	ldrb	r7, [r2, #3]
            ((*(buffer_ptr + 2) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800c7aa:	2f74      	cmp	r7, #116	; 0x74
 800c7ac:	d001      	beq.n	800c7b2 <_nx_http_server_delete_process+0xb6>
 800c7ae:	2e54      	cmp	r6, #84	; 0x54
 800c7b0:	d120      	bne.n	800c7f4 <_nx_http_server_delete_process+0xf8>
            ((*(buffer_ptr + 3) == 'p') || (*(buffer_ptr + 1) == 'P')) &&
 800c7b2:	7916      	ldrb	r6, [r2, #4]
 800c7b4:	2e70      	cmp	r6, #112	; 0x70
 800c7b6:	d11d      	bne.n	800c7f4 <_nx_http_server_delete_process+0xf8>
 800c7b8:	7956      	ldrb	r6, [r2, #5]
 800c7ba:	2e3a      	cmp	r6, #58	; 0x3a
 800c7bc:	d11a      	bne.n	800c7f4 <_nx_http_server_delete_process+0xf8>
            (*(buffer_ptr + 4) == ':') &&
 800c7be:	7996      	ldrb	r6, [r2, #6]
 800c7c0:	2e2f      	cmp	r6, #47	; 0x2f
 800c7c2:	d117      	bne.n	800c7f4 <_nx_http_server_delete_process+0xf8>
            (*(buffer_ptr + 5) == '/') &&
 800c7c4:	79d6      	ldrb	r6, [r2, #7]
 800c7c6:	2e2f      	cmp	r6, #47	; 0x2f
 800c7c8:	d114      	bne.n	800c7f4 <_nx_http_server_delete_process+0xf8>
            while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != '/'))
 800c7ca:	7a13      	ldrb	r3, [r2, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f000 8146 	beq.w	800ca5e <_nx_http_server_delete_process+0x362>
 800c7d2:	2b2f      	cmp	r3, #47	; 0x2f
 800c7d4:	f000 8143 	beq.w	800ca5e <_nx_http_server_delete_process+0x362>
 800c7d8:	3209      	adds	r2, #9
 800c7da:	e007      	b.n	800c7ec <_nx_http_server_delete_process+0xf0>
 800c7dc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f000 813c 	beq.w	800ca5e <_nx_http_server_delete_process+0x362>
 800c7e6:	2b2f      	cmp	r3, #47	; 0x2f
 800c7e8:	f000 8139 	beq.w	800ca5e <_nx_http_server_delete_process+0x362>
 800c7ec:	428a      	cmp	r2, r1
                buffer_ptr++;
 800c7ee:	4610      	mov	r0, r2
            while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != '/'))
 800c7f0:	d3f4      	bcc.n	800c7dc <_nx_http_server_delete_process+0xe0>
 800c7f2:	e7a2      	b.n	800c73a <_nx_http_server_delete_process+0x3e>
    if ((buffer_ptr >= (CHAR *) packet_ptr -> nx_packet_append_ptr) || (*buffer_ptr != '/'))
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	d2a0      	bcs.n	800c73a <_nx_http_server_delete_process+0x3e>
 800c7f8:	781a      	ldrb	r2, [r3, #0]
 800c7fa:	2a2f      	cmp	r2, #47	; 0x2f
 800c7fc:	d19d      	bne.n	800c73a <_nx_http_server_delete_process+0x3e>
    status =  _nx_http_server_retrieve_resource(packet_ptr, server_ptr -> nx_http_server_request_resource, NX_HTTP_MAX_RESOURCE + 1);
 800c7fe:	f104 060c 	add.w	r6, r4, #12
 800c802:	2000      	movs	r0, #0
 800c804:	e006      	b.n	800c814 <_nx_http_server_delete_process+0x118>
            destination[i++] =  *buffer_ptr++;
 800c806:	3301      	adds	r3, #1
 800c808:	5432      	strb	r2, [r6, r0]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' ') && (*buffer_ptr != ';') && (*buffer_ptr != '?') && (i < (max_size-1)))
 800c80a:	68e9      	ldr	r1, [r5, #12]
 800c80c:	3001      	adds	r0, #1
 800c80e:	4299      	cmp	r1, r3
 800c810:	d949      	bls.n	800c8a6 <_nx_http_server_delete_process+0x1aa>
 800c812:	781a      	ldrb	r2, [r3, #0]
 800c814:	f002 07fb 	and.w	r7, r2, #251	; 0xfb
 800c818:	2f3b      	cmp	r7, #59	; 0x3b
 800c81a:	d047      	beq.n	800c8ac <_nx_http_server_delete_process+0x1b0>
 800c81c:	2a20      	cmp	r2, #32
 800c81e:	d045      	beq.n	800c8ac <_nx_http_server_delete_process+0x1b0>
 800c820:	2828      	cmp	r0, #40	; 0x28
 800c822:	d040      	beq.n	800c8a6 <_nx_http_server_delete_process+0x1aa>
        if(*buffer_ptr == '%')
 800c824:	2a25      	cmp	r2, #37	; 0x25
 800c826:	d1ee      	bne.n	800c806 <_nx_http_server_delete_process+0x10a>
            if((buffer_ptr + 2) < (CHAR *)packet_ptr -> nx_packet_append_ptr)
 800c828:	1c9a      	adds	r2, r3, #2
 800c82a:	4291      	cmp	r1, r2
 800c82c:	d93b      	bls.n	800c8a6 <_nx_http_server_delete_process+0x1aa>
                if((*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800c82e:	7859      	ldrb	r1, [r3, #1]
 800c830:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c834:	b2d2      	uxtb	r2, r2
 800c836:	2a09      	cmp	r2, #9
 800c838:	d80f      	bhi.n	800c85a <_nx_http_server_delete_process+0x15e>
 800c83a:	1837      	adds	r7, r6, r0
                    destination[i] = (CHAR)(*buffer_ptr - '0');
 800c83c:	5432      	strb	r2, [r6, r0]
                destination[i] = (CHAR)(destination[i] << 4);
 800c83e:	0112      	lsls	r2, r2, #4
 800c840:	b2d2      	uxtb	r2, r2
 800c842:	703a      	strb	r2, [r7, #0]
                if((*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800c844:	f893 c002 	ldrb.w	ip, [r3, #2]
 800c848:	f1ac 0130 	sub.w	r1, ip, #48	; 0x30
 800c84c:	b2c9      	uxtb	r1, r1
 800c84e:	2909      	cmp	r1, #9
 800c850:	d811      	bhi.n	800c876 <_nx_http_server_delete_process+0x17a>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - '0'));
 800c852:	440a      	add	r2, r1
 800c854:	703a      	strb	r2, [r7, #0]
                buffer_ptr++;
 800c856:	3303      	adds	r3, #3
 800c858:	e7d7      	b.n	800c80a <_nx_http_server_delete_process+0x10e>
                else if((*buffer_ptr >= 'a') && (*buffer_ptr <= 'f'))
 800c85a:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 800c85e:	2a05      	cmp	r2, #5
 800c860:	d916      	bls.n	800c890 <_nx_http_server_delete_process+0x194>
                else if((*buffer_ptr >= 'A') && (*buffer_ptr <= 'F'))
 800c862:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 800c866:	2a05      	cmp	r2, #5
 800c868:	d81d      	bhi.n	800c8a6 <_nx_http_server_delete_process+0x1aa>
                    destination[i] = (CHAR)(*buffer_ptr - 'A' + 10);
 800c86a:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 800c86e:	1837      	adds	r7, r6, r0
 800c870:	b2d2      	uxtb	r2, r2
 800c872:	5432      	strb	r2, [r6, r0]
 800c874:	e7e3      	b.n	800c83e <_nx_http_server_delete_process+0x142>
                else if((*buffer_ptr >= 'a') && (*buffer_ptr <= 'f'))
 800c876:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
 800c87a:	2905      	cmp	r1, #5
 800c87c:	d90e      	bls.n	800c89c <_nx_http_server_delete_process+0x1a0>
                else if((*buffer_ptr >= 'A') && (*buffer_ptr <= 'F'))
 800c87e:	f1ac 0141 	sub.w	r1, ip, #65	; 0x41
 800c882:	2905      	cmp	r1, #5
 800c884:	d80f      	bhi.n	800c8a6 <_nx_http_server_delete_process+0x1aa>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - 'A' + 10));
 800c886:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
 800c88a:	4462      	add	r2, ip
 800c88c:	703a      	strb	r2, [r7, #0]
 800c88e:	e7e2      	b.n	800c856 <_nx_http_server_delete_process+0x15a>
                    destination[i] = (CHAR)(*buffer_ptr - 'a' + 10);
 800c890:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
 800c894:	1837      	adds	r7, r6, r0
 800c896:	b2d2      	uxtb	r2, r2
 800c898:	5432      	strb	r2, [r6, r0]
 800c89a:	e7d0      	b.n	800c83e <_nx_http_server_delete_process+0x142>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - 'a' + 10));
 800c89c:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
 800c8a0:	4462      	add	r2, ip
 800c8a2:	703a      	strb	r2, [r7, #0]
 800c8a4:	e7d7      	b.n	800c856 <_nx_http_server_delete_process+0x15a>
                    destination[0] =  (CHAR) 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	7323      	strb	r3, [r4, #12]
 800c8aa:	e746      	b.n	800c73a <_nx_http_server_delete_process+0x3e>
    if ((destination[0] == (CHAR) 0) || (buffer_ptr >= (CHAR *)packet_ptr -> nx_packet_append_ptr) || ((*buffer_ptr != ' ') && (*buffer_ptr != '?') && (*buffer_ptr != ';')))
 800c8ac:	7b23      	ldrb	r3, [r4, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0f9      	beq.n	800c8a6 <_nx_http_server_delete_process+0x1aa>
    destination[i] =  (CHAR) 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	5433      	strb	r3, [r6, r0]
    if (server_ptr -> nx_http_server_authentication_check ||
 800c8b6:	f8d4 846c 	ldr.w	r8, [r4, #1132]	; 0x46c
 800c8ba:	f1b8 0f00 	cmp.w	r8, #0
 800c8be:	d034      	beq.n	800c92a <_nx_http_server_delete_process+0x22e>
        if (server_ptr -> nx_http_server_authentication_check_extended)
 800c8c0:	f8d4 7470 	ldr.w	r7, [r4, #1136]	; 0x470
 800c8c4:	2f00      	cmp	r7, #0
 800c8c6:	d04e      	beq.n	800c966 <_nx_http_server_delete_process+0x26a>
            status = (server_ptr -> nx_http_server_authentication_check_extended)(server_ptr, NX_HTTP_SERVER_DELETE_REQUEST, server_ptr -> nx_http_server_request_resource,
 800c8c8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c8cc:	ab08      	add	r3, sp, #32
 800c8ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8d0:	a907      	add	r1, sp, #28
 800c8d2:	a80a      	add	r0, sp, #40	; 0x28
 800c8d4:	9202      	str	r2, [sp, #8]
 800c8d6:	4632      	mov	r2, r6
 800c8d8:	9101      	str	r1, [sp, #4]
 800c8da:	2105      	movs	r1, #5
 800c8dc:	9000      	str	r0, [sp, #0]
 800c8de:	4620      	mov	r0, r4
 800c8e0:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 800c8e4:	ab06      	add	r3, sp, #24
 800c8e6:	47b8      	blx	r7
 800c8e8:	4607      	mov	r7, r0
        if (status == NX_HTTP_BASIC_AUTHENTICATE ||
 800c8ea:	f1a7 03e4 	sub.w	r3, r7, #228	; 0xe4
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d947      	bls.n	800c982 <_nx_http_server_delete_process+0x286>
        if ((status != NX_HTTP_DONT_AUTHENTICATE) && (status != NX_SUCCESS))
 800c8f2:	2fe3      	cmp	r7, #227	; 0xe3
 800c8f4:	d01d      	beq.n	800c932 <_nx_http_server_delete_process+0x236>
 800c8f6:	b1e7      	cbz	r7, 800c932 <_nx_http_server_delete_process+0x236>
            if (server_ptr -> nx_http_server_invalid_username_password_callback && auth_request_present)
 800c8f8:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f43f af3f 	beq.w	800c780 <_nx_http_server_delete_process+0x84>
 800c902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c904:	2b00      	cmp	r3, #0
 800c906:	f43f af3b 	beq.w	800c780 <_nx_http_server_delete_process+0x84>
                status =   nxd_tcp_socket_peer_info_get(&(server_ptr->nx_http_server_socket), &client_nxd_address , &client_port);
 800c90a:	aa10      	add	r2, sp, #64	; 0x40
 800c90c:	f504 7016 	add.w	r0, r4, #600	; 0x258
 800c910:	a911      	add	r1, sp, #68	; 0x44
 800c912:	f002 fabf 	bl	800ee94 <_nxd_tcp_socket_peer_info_get>
                if (status == NX_SUCCESS)
 800c916:	2800      	cmp	r0, #0
 800c918:	f47f af32 	bne.w	800c780 <_nx_http_server_delete_process+0x84>
                    (server_ptr -> nx_http_server_invalid_username_password_callback)(server_ptr -> nx_http_server_request_resource, &client_nxd_address, NX_HTTP_SERVER_DELETE_REQUEST);
 800c91c:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
 800c920:	a911      	add	r1, sp, #68	; 0x44
 800c922:	4630      	mov	r0, r6
 800c924:	2205      	movs	r2, #5
 800c926:	4798      	blx	r3
 800c928:	e72a      	b.n	800c780 <_nx_http_server_delete_process+0x84>
        server_ptr -> nx_http_server_authentication_check_extended)
 800c92a:	f8d4 7470 	ldr.w	r7, [r4, #1136]	; 0x470
    if (server_ptr -> nx_http_server_authentication_check ||
 800c92e:	2f00      	cmp	r7, #0
 800c930:	d1ca      	bne.n	800c8c8 <_nx_http_server_delete_process+0x1cc>
    if (server_ptr -> nx_http_server_request_notify)
 800c932:	f8d4 7474 	ldr.w	r7, [r4, #1140]	; 0x474
 800c936:	2f00      	cmp	r7, #0
 800c938:	d066      	beq.n	800ca08 <_nx_http_server_delete_process+0x30c>
        status =  (server_ptr -> nx_http_server_request_notify)(server_ptr, NX_HTTP_SERVER_DELETE_REQUEST, server_ptr -> nx_http_server_request_resource, packet_ptr);
 800c93a:	462b      	mov	r3, r5
 800c93c:	4632      	mov	r2, r6
 800c93e:	2105      	movs	r1, #5
 800c940:	4620      	mov	r0, r4
 800c942:	47b8      	blx	r7
        if (status != NX_SUCCESS)
 800c944:	2800      	cmp	r0, #0
 800c946:	d05f      	beq.n	800ca08 <_nx_http_server_delete_process+0x30c>
            if (status == NX_HTTP_CALLBACK_COMPLETED)
 800c948:	28e8      	cmp	r0, #232	; 0xe8
                _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, NX_NULL, 0, NX_NULL, 0);
 800c94a:	f04f 0500 	mov.w	r5, #0
            if (status == NX_HTTP_CALLBACK_COMPLETED)
 800c94e:	d07c      	beq.n	800ca4a <_nx_http_server_delete_process+0x34e>
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800c950:	2119      	movs	r1, #25
 800c952:	4620      	mov	r0, r4
 800c954:	4b2a      	ldr	r3, [pc, #168]	; (800ca00 <_nx_http_server_delete_process+0x304>)
 800c956:	460a      	mov	r2, r1
 800c958:	9502      	str	r5, [sp, #8]
 800c95a:	e9cd 1500 	strd	r1, r5, [sp]
 800c95e:	4929      	ldr	r1, [pc, #164]	; (800ca04 <_nx_http_server_delete_process+0x308>)
 800c960:	f7ff f9b0 	bl	800bcc4 <_nx_http_server_response_send>
            return;
 800c964:	e70c      	b.n	800c780 <_nx_http_server_delete_process+0x84>
            status = (server_ptr -> nx_http_server_authentication_check)(server_ptr, NX_HTTP_SERVER_DELETE_REQUEST, server_ptr -> nx_http_server_request_resource,
 800c966:	a908      	add	r1, sp, #32
 800c968:	a807      	add	r0, sp, #28
 800c96a:	ab06      	add	r3, sp, #24
 800c96c:	4632      	mov	r2, r6
 800c96e:	9101      	str	r1, [sp, #4]
 800c970:	2105      	movs	r1, #5
 800c972:	9000      	str	r0, [sp, #0]
 800c974:	4620      	mov	r0, r4
 800c976:	47c0      	blx	r8
 800c978:	4607      	mov	r7, r0
        if (status == NX_HTTP_BASIC_AUTHENTICATE ||
 800c97a:	f1a7 03e4 	sub.w	r3, r7, #228	; 0xe4
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d8b7      	bhi.n	800c8f2 <_nx_http_server_delete_process+0x1f6>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800c982:	2214      	movs	r2, #20
 800c984:	a90d      	add	r1, sp, #52	; 0x34
 800c986:	9806      	ldr	r0, [sp, #24]
 800c988:	f007 ff3a 	bl	8014800 <_nx_utility_string_length_check>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	f47f aef7 	bne.w	800c780 <_nx_http_server_delete_process+0x84>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800c992:	2214      	movs	r2, #20
 800c994:	a90e      	add	r1, sp, #56	; 0x38
 800c996:	9807      	ldr	r0, [sp, #28]
 800c998:	f007 ff32 	bl	8014800 <_nx_utility_string_length_check>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800c99c:	2800      	cmp	r0, #0
 800c99e:	f47f aeef 	bne.w	800c780 <_nx_http_server_delete_process+0x84>
                _nx_utility_string_length_check(realm_ptr, &temp_realm_length, NX_MAX_STRING_LENGTH))
 800c9a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c9a6:	a90f      	add	r1, sp, #60	; 0x3c
 800c9a8:	9808      	ldr	r0, [sp, #32]
 800c9aa:	f007 ff29 	bl	8014800 <_nx_utility_string_length_check>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f47f aee6 	bne.w	800c780 <_nx_http_server_delete_process+0x84>
            if (server_ptr -> nx_http_server_authentication_check_extended &&
 800c9b4:	f8d4 3470 	ldr.w	r3, [r4, #1136]	; 0x470
 800c9b8:	b173      	cbz	r3, 800c9d8 <_nx_http_server_delete_process+0x2dc>
 800c9ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	f47f aede 	bne.w	800c780 <_nx_http_server_delete_process+0x84>
                ((realm_length != temp_realm_length) ||
 800c9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	f47f aed9 	bne.w	800c780 <_nx_http_server_delete_process+0x84>
                 (name_length != temp_name_length) ||
 800c9ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	f47f aed4 	bne.w	800c780 <_nx_http_server_delete_process+0x84>
        if (status == NX_HTTP_BASIC_AUTHENTICATE)
 800c9d8:	2fe4      	cmp	r7, #228	; 0xe4
 800c9da:	d18d      	bne.n	800c8f8 <_nx_http_server_delete_process+0x1fc>
            status =  _nx_http_server_basic_authenticate(server_ptr, packet_ptr, name_ptr, password_ptr, realm_ptr, temp_realm_length, &auth_request_present);
 800c9dc:	af09      	add	r7, sp, #36	; 0x24
 800c9de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c9e0:	9b07      	ldr	r3, [sp, #28]
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	9702      	str	r7, [sp, #8]
 800c9e6:	9f08      	ldr	r7, [sp, #32]
 800c9e8:	9001      	str	r0, [sp, #4]
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	9700      	str	r7, [sp, #0]
 800c9ee:	9a06      	ldr	r2, [sp, #24]
 800c9f0:	f7fe fd50 	bl	800b494 <_nx_http_server_basic_authenticate>
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	e77c      	b.n	800c8f2 <_nx_http_server_delete_process+0x1f6>
 800c9f8:	080256d0 	.word	0x080256d0
 800c9fc:	080256e0 	.word	0x080256e0
 800ca00:	0802573c 	.word	0x0802573c
 800ca04:	08025758 	.word	0x08025758
    status =  fx_file_delete(server_ptr -> nx_http_server_media_ptr, server_ptr -> nx_http_server_request_resource);
 800ca08:	4631      	mov	r1, r6
 800ca0a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ca0c:	f009 f9f8 	bl	8015e00 <_fxe_file_delete>
    if (status != NX_SUCCESS)
 800ca10:	4602      	mov	r2, r0
 800ca12:	b158      	cbz	r0, 800ca2c <_nx_http_server_delete_process+0x330>
        _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800ca14:	2100      	movs	r1, #0
 800ca16:	251c      	movs	r5, #28
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4b12      	ldr	r3, [pc, #72]	; (800ca64 <_nx_http_server_delete_process+0x368>)
 800ca1c:	9102      	str	r1, [sp, #8]
 800ca1e:	2219      	movs	r2, #25
 800ca20:	e9cd 5100 	strd	r5, r1, [sp]
 800ca24:	4910      	ldr	r1, [pc, #64]	; (800ca68 <_nx_http_server_delete_process+0x36c>)
 800ca26:	f7ff f94d 	bl	800bcc4 <_nx_http_server_response_send>
        return;
 800ca2a:	e6a9      	b.n	800c780 <_nx_http_server_delete_process+0x84>
    status = _nx_http_server_generate_response_header(server_ptr, &response_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, 0, NX_NULL, 0, NX_NULL, 0);
 800ca2c:	9004      	str	r0, [sp, #16]
 800ca2e:	2306      	movs	r3, #6
 800ca30:	9003      	str	r0, [sp, #12]
 800ca32:	a911      	add	r1, sp, #68	; 0x44
 800ca34:	9002      	str	r0, [sp, #8]
 800ca36:	4620      	mov	r0, r4
 800ca38:	e9cd 2200 	strd	r2, r2, [sp]
 800ca3c:	4a0b      	ldr	r2, [pc, #44]	; (800ca6c <_nx_http_server_delete_process+0x370>)
 800ca3e:	f7fe fef3 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status == NX_SUCCESS)
 800ca42:	2800      	cmp	r0, #0
 800ca44:	f47f ae9c 	bne.w	800c780 <_nx_http_server_delete_process+0x84>
 800ca48:	e68f      	b.n	800c76a <_nx_http_server_delete_process+0x6e>
                _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, NX_NULL, 0, NX_NULL, 0);
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	2206      	movs	r2, #6
 800ca4e:	4907      	ldr	r1, [pc, #28]	; (800ca6c <_nx_http_server_delete_process+0x370>)
 800ca50:	462b      	mov	r3, r5
 800ca52:	9502      	str	r5, [sp, #8]
 800ca54:	e9cd 5500 	strd	r5, r5, [sp]
 800ca58:	f7ff f934 	bl	800bcc4 <_nx_http_server_response_send>
                return;
 800ca5c:	e690      	b.n	800c780 <_nx_http_server_delete_process+0x84>
{
 800ca5e:	4603      	mov	r3, r0
 800ca60:	e6ca      	b.n	800c7f8 <_nx_http_server_delete_process+0xfc>
 800ca62:	bf00      	nop
 800ca64:	080255c4 	.word	0x080255c4
 800ca68:	08025758 	.word	0x08025758
 800ca6c:	080255e4 	.word	0x080255e4

0800ca70 <_nx_http_server_get_process>:
{
 800ca70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
ULONG       length = 0;
 800ca74:	2300      	movs	r3, #0
{
 800ca76:	4615      	mov	r5, r2
 800ca78:	460e      	mov	r6, r1
 800ca7a:	b0a6      	sub	sp, #152	; 0x98
    destination[0] =  (CHAR) 0;
 800ca7c:	7303      	strb	r3, [r0, #12]
{
 800ca7e:	4604      	mov	r4, r0
    buffer_ptr =  (CHAR *) packet_ptr -> nx_packet_prepend_ptr;
 800ca80:	6892      	ldr	r2, [r2, #8]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800ca82:	68e9      	ldr	r1, [r5, #12]
ULONG       length = 0;
 800ca84:	9307      	str	r3, [sp, #28]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800ca86:	428a      	cmp	r2, r1
UINT        temp_realm_length = 0;
 800ca88:	9312      	str	r3, [sp, #72]	; 0x48
UINT        name_length = 0;
 800ca8a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
UINT        realm_length = 0;
 800ca8e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
UINT        temp_password_length = 0;
 800ca92:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800ca96:	d20c      	bcs.n	800cab2 <_nx_http_server_get_process+0x42>
 800ca98:	7813      	ldrb	r3, [r2, #0]
 800ca9a:	2b20      	cmp	r3, #32
 800ca9c:	d02f      	beq.n	800cafe <_nx_http_server_get_process+0x8e>
 800ca9e:	1c53      	adds	r3, r2, #1
 800caa0:	e002      	b.n	800caa8 <_nx_http_server_get_process+0x38>
 800caa2:	7810      	ldrb	r0, [r2, #0]
 800caa4:	2820      	cmp	r0, #32
 800caa6:	d02a      	beq.n	800cafe <_nx_http_server_get_process+0x8e>
 800caa8:	428b      	cmp	r3, r1
        buffer_ptr++;
 800caaa:	461a      	mov	r2, r3
 800caac:	f103 0301 	add.w	r3, r3, #1
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' '))
 800cab0:	d1f7      	bne.n	800caa2 <_nx_http_server_get_process+0x32>
    status = _nx_http_server_generate_response_header(server_ptr, &packet_ptr, status_code, status_code_length, length, NX_NULL, 0, NX_NULL, 0);
 800cab2:	2500      	movs	r5, #0
 800cab4:	2611      	movs	r6, #17
 800cab6:	230f      	movs	r3, #15
 800cab8:	4a98      	ldr	r2, [pc, #608]	; (800cd1c <_nx_http_server_get_process+0x2ac>)
 800caba:	9504      	str	r5, [sp, #16]
 800cabc:	a91e      	add	r1, sp, #120	; 0x78
 800cabe:	9503      	str	r5, [sp, #12]
 800cac0:	4620      	mov	r0, r4
 800cac2:	9600      	str	r6, [sp, #0]
 800cac4:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800cac8:	f7fe feae 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status != NX_SUCCESS)
 800cacc:	b9a0      	cbnz	r0, 800caf8 <_nx_http_server_get_process+0x88>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800cace:	f04f 31ff 	mov.w	r1, #4294967295
 800cad2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cad4:	981e      	ldr	r0, [sp, #120]	; 0x78
 800cad6:	4632      	mov	r2, r6
 800cad8:	9100      	str	r1, [sp, #0]
 800cada:	4991      	ldr	r1, [pc, #580]	; (800cd20 <_nx_http_server_get_process+0x2b0>)
 800cadc:	f7f9 fe34 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800cae0:	b938      	cbnz	r0, 800caf2 <_nx_http_server_get_process+0x82>
    status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800cae2:	f504 7016 	add.w	r0, r4, #600	; 0x258
 800cae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800caea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800caec:	f7fb faaa 	bl	8008044 <_nx_tcp_socket_send>
    if (status != NX_SUCCESS)
 800caf0:	b110      	cbz	r0, 800caf8 <_nx_http_server_get_process+0x88>
        nx_packet_release(packet_ptr);
 800caf2:	981e      	ldr	r0, [sp, #120]	; 0x78
 800caf4:	f7f9 ff7c 	bl	80069f0 <_nx_packet_release>
}
 800caf8:	b026      	add	sp, #152	; 0x98
 800cafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((buffer_ptr + 7 < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800cafe:	f102 0008 	add.w	r0, r2, #8
    buffer_ptr++;
 800cb02:	1c53      	adds	r3, r2, #1
    if ((buffer_ptr + 7 < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != '/'))
 800cb04:	4288      	cmp	r0, r1
 800cb06:	d234      	bcs.n	800cb72 <_nx_http_server_get_process+0x102>
 800cb08:	7857      	ldrb	r7, [r2, #1]
 800cb0a:	2f2f      	cmp	r7, #47	; 0x2f
 800cb0c:	d031      	beq.n	800cb72 <_nx_http_server_get_process+0x102>
        if (((*buffer_ptr == 'h') || (*buffer_ptr == 'H')) &&
 800cb0e:	f007 07df 	and.w	r7, r7, #223	; 0xdf
 800cb12:	2f48      	cmp	r7, #72	; 0x48
 800cb14:	d12d      	bne.n	800cb72 <_nx_http_server_get_process+0x102>
            ((*(buffer_ptr + 1) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800cb16:	7897      	ldrb	r7, [r2, #2]
        if (((*buffer_ptr == 'h') || (*buffer_ptr == 'H')) &&
 800cb18:	f007 0cdf 	and.w	ip, r7, #223	; 0xdf
 800cb1c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800cb20:	d127      	bne.n	800cb72 <_nx_http_server_get_process+0x102>
            ((*(buffer_ptr + 1) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800cb22:	f892 c003 	ldrb.w	ip, [r2, #3]
            ((*(buffer_ptr + 2) == 't') || (*(buffer_ptr + 1) == 'T')) &&
 800cb26:	f1bc 0f74 	cmp.w	ip, #116	; 0x74
 800cb2a:	d001      	beq.n	800cb30 <_nx_http_server_get_process+0xc0>
 800cb2c:	2f54      	cmp	r7, #84	; 0x54
 800cb2e:	d120      	bne.n	800cb72 <_nx_http_server_get_process+0x102>
            ((*(buffer_ptr + 3) == 'p') || (*(buffer_ptr + 1) == 'P')) &&
 800cb30:	7917      	ldrb	r7, [r2, #4]
 800cb32:	2f70      	cmp	r7, #112	; 0x70
 800cb34:	d11d      	bne.n	800cb72 <_nx_http_server_get_process+0x102>
 800cb36:	7957      	ldrb	r7, [r2, #5]
 800cb38:	2f3a      	cmp	r7, #58	; 0x3a
 800cb3a:	d11a      	bne.n	800cb72 <_nx_http_server_get_process+0x102>
            (*(buffer_ptr + 4) == ':') &&
 800cb3c:	7997      	ldrb	r7, [r2, #6]
 800cb3e:	2f2f      	cmp	r7, #47	; 0x2f
 800cb40:	d117      	bne.n	800cb72 <_nx_http_server_get_process+0x102>
            (*(buffer_ptr + 5) == '/') &&
 800cb42:	79d7      	ldrb	r7, [r2, #7]
 800cb44:	2f2f      	cmp	r7, #47	; 0x2f
 800cb46:	d114      	bne.n	800cb72 <_nx_http_server_get_process+0x102>
            while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != '/'))
 800cb48:	7a13      	ldrb	r3, [r2, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f000 84b2 	beq.w	800d4b4 <_nx_http_server_get_process+0xa44>
 800cb50:	2b2f      	cmp	r3, #47	; 0x2f
 800cb52:	f000 84af 	beq.w	800d4b4 <_nx_http_server_get_process+0xa44>
 800cb56:	3209      	adds	r2, #9
 800cb58:	e007      	b.n	800cb6a <_nx_http_server_get_process+0xfa>
 800cb5a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cb5e:	2b2f      	cmp	r3, #47	; 0x2f
 800cb60:	f000 84a8 	beq.w	800d4b4 <_nx_http_server_get_process+0xa44>
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f000 84a5 	beq.w	800d4b4 <_nx_http_server_get_process+0xa44>
 800cb6a:	428a      	cmp	r2, r1
                buffer_ptr++;
 800cb6c:	4610      	mov	r0, r2
            while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0) && (*buffer_ptr != '/'))
 800cb6e:	d3f4      	bcc.n	800cb5a <_nx_http_server_get_process+0xea>
 800cb70:	e79f      	b.n	800cab2 <_nx_http_server_get_process+0x42>
    if ((buffer_ptr >= (CHAR *) packet_ptr -> nx_packet_append_ptr) || (*buffer_ptr != '/'))
 800cb72:	428b      	cmp	r3, r1
 800cb74:	d29d      	bcs.n	800cab2 <_nx_http_server_get_process+0x42>
 800cb76:	781a      	ldrb	r2, [r3, #0]
 800cb78:	2a2f      	cmp	r2, #47	; 0x2f
 800cb7a:	d19a      	bne.n	800cab2 <_nx_http_server_get_process+0x42>
    status =  _nx_http_server_retrieve_resource(packet_ptr, server_ptr -> nx_http_server_request_resource, NX_HTTP_MAX_RESOURCE + 1);
 800cb7c:	f104 080c 	add.w	r8, r4, #12
 800cb80:	2000      	movs	r0, #0
 800cb82:	e007      	b.n	800cb94 <_nx_http_server_get_process+0x124>
            destination[i++] =  *buffer_ptr++;
 800cb84:	3301      	adds	r3, #1
 800cb86:	f808 2000 	strb.w	r2, [r8, r0]
    while ((buffer_ptr < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != ' ') && (*buffer_ptr != ';') && (*buffer_ptr != '?') && (i < (max_size-1)))
 800cb8a:	68e9      	ldr	r1, [r5, #12]
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	4299      	cmp	r1, r3
 800cb90:	d950      	bls.n	800cc34 <_nx_http_server_get_process+0x1c4>
 800cb92:	781a      	ldrb	r2, [r3, #0]
 800cb94:	f002 07fb 	and.w	r7, r2, #251	; 0xfb
 800cb98:	2f3b      	cmp	r7, #59	; 0x3b
 800cb9a:	d04e      	beq.n	800cc3a <_nx_http_server_get_process+0x1ca>
 800cb9c:	2a20      	cmp	r2, #32
 800cb9e:	d04c      	beq.n	800cc3a <_nx_http_server_get_process+0x1ca>
 800cba0:	2828      	cmp	r0, #40	; 0x28
 800cba2:	d047      	beq.n	800cc34 <_nx_http_server_get_process+0x1c4>
        if(*buffer_ptr == '%')
 800cba4:	2a25      	cmp	r2, #37	; 0x25
 800cba6:	d1ed      	bne.n	800cb84 <_nx_http_server_get_process+0x114>
            if((buffer_ptr + 2) < (CHAR *)packet_ptr -> nx_packet_append_ptr)
 800cba8:	1c9a      	adds	r2, r3, #2
 800cbaa:	4291      	cmp	r1, r2
 800cbac:	d942      	bls.n	800cc34 <_nx_http_server_get_process+0x1c4>
                if((*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800cbae:	7859      	ldrb	r1, [r3, #1]
 800cbb0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cbb4:	b2d2      	uxtb	r2, r2
 800cbb6:	2a09      	cmp	r2, #9
 800cbb8:	d812      	bhi.n	800cbe0 <_nx_http_server_get_process+0x170>
 800cbba:	eb08 0c00 	add.w	ip, r8, r0
                    destination[i] = (CHAR)(*buffer_ptr - '0');
 800cbbe:	f808 2000 	strb.w	r2, [r8, r0]
                destination[i] = (CHAR)(destination[i] << 4);
 800cbc2:	0112      	lsls	r2, r2, #4
 800cbc4:	b2d2      	uxtb	r2, r2
 800cbc6:	f88c 2000 	strb.w	r2, [ip]
                if((*buffer_ptr >= '0') && (*buffer_ptr <= '9'))
 800cbca:	789f      	ldrb	r7, [r3, #2]
 800cbcc:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
 800cbd0:	b2c9      	uxtb	r1, r1
 800cbd2:	2909      	cmp	r1, #9
 800cbd4:	d814      	bhi.n	800cc00 <_nx_http_server_get_process+0x190>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - '0'));
 800cbd6:	440a      	add	r2, r1
 800cbd8:	f88c 2000 	strb.w	r2, [ip]
                buffer_ptr++;
 800cbdc:	3303      	adds	r3, #3
 800cbde:	e7d4      	b.n	800cb8a <_nx_http_server_get_process+0x11a>
                else if((*buffer_ptr >= 'a') && (*buffer_ptr <= 'f'))
 800cbe0:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 800cbe4:	2a05      	cmp	r2, #5
 800cbe6:	d918      	bls.n	800cc1a <_nx_http_server_get_process+0x1aa>
                else if((*buffer_ptr >= 'A') && (*buffer_ptr <= 'F'))
 800cbe8:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 800cbec:	2a05      	cmp	r2, #5
 800cbee:	d821      	bhi.n	800cc34 <_nx_http_server_get_process+0x1c4>
                    destination[i] = (CHAR)(*buffer_ptr - 'A' + 10);
 800cbf0:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 800cbf4:	eb08 0c00 	add.w	ip, r8, r0
 800cbf8:	b2d2      	uxtb	r2, r2
 800cbfa:	f808 2000 	strb.w	r2, [r8, r0]
 800cbfe:	e7e0      	b.n	800cbc2 <_nx_http_server_get_process+0x152>
                else if((*buffer_ptr >= 'a') && (*buffer_ptr <= 'f'))
 800cc00:	f1a7 0161 	sub.w	r1, r7, #97	; 0x61
 800cc04:	2905      	cmp	r1, #5
 800cc06:	d910      	bls.n	800cc2a <_nx_http_server_get_process+0x1ba>
                else if((*buffer_ptr >= 'A') && (*buffer_ptr <= 'F'))
 800cc08:	f1a7 0141 	sub.w	r1, r7, #65	; 0x41
 800cc0c:	2905      	cmp	r1, #5
 800cc0e:	d811      	bhi.n	800cc34 <_nx_http_server_get_process+0x1c4>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - 'A' + 10));
 800cc10:	3f37      	subs	r7, #55	; 0x37
 800cc12:	4417      	add	r7, r2
 800cc14:	f88c 7000 	strb.w	r7, [ip]
 800cc18:	e7e0      	b.n	800cbdc <_nx_http_server_get_process+0x16c>
                    destination[i] = (CHAR)(*buffer_ptr - 'a' + 10);
 800cc1a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
 800cc1e:	eb08 0c00 	add.w	ip, r8, r0
 800cc22:	b2d2      	uxtb	r2, r2
 800cc24:	f808 2000 	strb.w	r2, [r8, r0]
 800cc28:	e7cb      	b.n	800cbc2 <_nx_http_server_get_process+0x152>
                    destination[i] = (CHAR)(destination[i] + (*buffer_ptr - 'a' + 10));
 800cc2a:	3f57      	subs	r7, #87	; 0x57
 800cc2c:	443a      	add	r2, r7
 800cc2e:	f88c 2000 	strb.w	r2, [ip]
 800cc32:	e7d3      	b.n	800cbdc <_nx_http_server_get_process+0x16c>
                    destination[0] =  (CHAR) 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	7323      	strb	r3, [r4, #12]
 800cc38:	e73b      	b.n	800cab2 <_nx_http_server_get_process+0x42>
    if ((destination[0] == (CHAR) 0) || (buffer_ptr >= (CHAR *)packet_ptr -> nx_packet_append_ptr) || ((*buffer_ptr != ' ') && (*buffer_ptr != '?') && (*buffer_ptr != ';')))
 800cc3a:	7b23      	ldrb	r3, [r4, #12]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0f9      	beq.n	800cc34 <_nx_http_server_get_process+0x1c4>
    destination[i] =  (CHAR) 0;
 800cc40:	2700      	movs	r7, #0
    if (request_type == NX_HTTP_SERVER_POST_REQUEST)
 800cc42:	2e02      	cmp	r6, #2
    destination[i] =  (CHAR) 0;
 800cc44:	f808 7000 	strb.w	r7, [r8, r0]
    if (request_type == NX_HTTP_SERVER_POST_REQUEST)
 800cc48:	f000 80e5 	beq.w	800ce16 <_nx_http_server_get_process+0x3a6>
    if (server_ptr -> nx_http_server_authentication_check ||
 800cc4c:	f8d4 946c 	ldr.w	r9, [r4, #1132]	; 0x46c
 800cc50:	f8d4 7470 	ldr.w	r7, [r4, #1136]	; 0x470
 800cc54:	f1b9 0f00 	cmp.w	r9, #0
 800cc58:	d032      	beq.n	800ccc0 <_nx_http_server_get_process+0x250>
        if (server_ptr -> nx_http_server_authentication_check_extended)
 800cc5a:	2f00      	cmp	r7, #0
 800cc5c:	d066      	beq.n	800cd2c <_nx_http_server_get_process+0x2bc>
            status = (server_ptr -> nx_http_server_authentication_check_extended)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource,
 800cc5e:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800cc62:	ab0a      	add	r3, sp, #40	; 0x28
 800cc64:	aa0e      	add	r2, sp, #56	; 0x38
 800cc66:	a909      	add	r1, sp, #36	; 0x24
 800cc68:	a80d      	add	r0, sp, #52	; 0x34
 800cc6a:	9202      	str	r2, [sp, #8]
 800cc6c:	4642      	mov	r2, r8
 800cc6e:	9101      	str	r1, [sp, #4]
 800cc70:	4631      	mov	r1, r6
 800cc72:	9000      	str	r0, [sp, #0]
 800cc74:	4620      	mov	r0, r4
 800cc76:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 800cc7a:	ab08      	add	r3, sp, #32
 800cc7c:	47b8      	blx	r7
 800cc7e:	4607      	mov	r7, r0
        if (status == NX_HTTP_BASIC_AUTHENTICATE ||
 800cc80:	f1a7 03e4 	sub.w	r3, r7, #228	; 0xe4
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d95f      	bls.n	800cd48 <_nx_http_server_get_process+0x2d8>
        if ((status != NX_HTTP_DONT_AUTHENTICATE) && (status != NX_SUCCESS))
 800cc88:	2fe3      	cmp	r7, #227	; 0xe3
 800cc8a:	d01b      	beq.n	800ccc4 <_nx_http_server_get_process+0x254>
 800cc8c:	b1d7      	cbz	r7, 800ccc4 <_nx_http_server_get_process+0x254>
            if (server_ptr -> nx_http_server_invalid_username_password_callback && auth_request_present)
 800cc8e:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f43f af30 	beq.w	800caf8 <_nx_http_server_get_process+0x88>
 800cc98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f43f af2c 	beq.w	800caf8 <_nx_http_server_get_process+0x88>
                status =   nxd_tcp_socket_peer_info_get(&(server_ptr->nx_http_server_socket), &client_nxd_address , &client_port);
 800cca0:	aa16      	add	r2, sp, #88	; 0x58
 800cca2:	f504 7016 	add.w	r0, r4, #600	; 0x258
 800cca6:	a91e      	add	r1, sp, #120	; 0x78
 800cca8:	f002 f8f4 	bl	800ee94 <_nxd_tcp_socket_peer_info_get>
                if (status == NX_SUCCESS)
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f47f af23 	bne.w	800caf8 <_nx_http_server_get_process+0x88>
                    (server_ptr -> nx_http_server_invalid_username_password_callback)(server_ptr -> nx_http_server_request_resource, &client_nxd_address, request_type);
 800ccb2:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
 800ccb6:	4632      	mov	r2, r6
 800ccb8:	a91e      	add	r1, sp, #120	; 0x78
 800ccba:	4640      	mov	r0, r8
 800ccbc:	4798      	blx	r3
 800ccbe:	e71b      	b.n	800caf8 <_nx_http_server_get_process+0x88>
    if (server_ptr -> nx_http_server_authentication_check ||
 800ccc0:	2f00      	cmp	r7, #0
 800ccc2:	d1cc      	bne.n	800cc5e <_nx_http_server_get_process+0x1ee>
    if((server_ptr -> nx_http_server_cache_info_get) && 
 800ccc4:	f8d4 7480 	ldr.w	r7, [r4, #1152]	; 0x480
 800ccc8:	b127      	cbz	r7, 800ccd4 <_nx_http_server_get_process+0x264>
 800ccca:	f8d4 3460 	ldr.w	r3, [r4, #1120]	; 0x460
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	f000 80c6 	beq.w	800ce60 <_nx_http_server_get_process+0x3f0>
    nx_tcp_socket_transmit_configure(&(server_ptr -> nx_http_server_socket), 
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	f504 7a16 	add.w	sl, r4, #600	; 0x258
 800ccda:	230a      	movs	r3, #10
 800ccdc:	22c8      	movs	r2, #200	; 0xc8
 800ccde:	9100      	str	r1, [sp, #0]
 800cce0:	4650      	mov	r0, sl
 800cce2:	2114      	movs	r1, #20
 800cce4:	f007 fc9a 	bl	801461c <_nx_tcp_socket_transmit_configure>
    if (server_ptr -> nx_http_server_request_notify)
 800cce8:	f8d4 7474 	ldr.w	r7, [r4, #1140]	; 0x474
 800ccec:	2f00      	cmp	r7, #0
 800ccee:	d067      	beq.n	800cdc0 <_nx_http_server_get_process+0x350>
        status =  (server_ptr -> nx_http_server_request_notify)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource, packet_ptr);
 800ccf0:	462b      	mov	r3, r5
 800ccf2:	4642      	mov	r2, r8
 800ccf4:	4631      	mov	r1, r6
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	47b8      	blx	r7
        if (status != NX_SUCCESS)
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	d060      	beq.n	800cdc0 <_nx_http_server_get_process+0x350>
            if (status == NX_HTTP_CALLBACK_COMPLETED)
 800ccfe:	28e8      	cmp	r0, #232	; 0xe8
 800cd00:	f43f aefa 	beq.w	800caf8 <_nx_http_server_get_process+0x88>
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800cd04:	2500      	movs	r5, #0
 800cd06:	2119      	movs	r1, #25
 800cd08:	4620      	mov	r0, r4
 800cd0a:	4b06      	ldr	r3, [pc, #24]	; (800cd24 <_nx_http_server_get_process+0x2b4>)
 800cd0c:	460a      	mov	r2, r1
 800cd0e:	9502      	str	r5, [sp, #8]
 800cd10:	e9cd 1500 	strd	r1, r5, [sp]
 800cd14:	4904      	ldr	r1, [pc, #16]	; (800cd28 <_nx_http_server_get_process+0x2b8>)
 800cd16:	f7fe ffd5 	bl	800bcc4 <_nx_http_server_response_send>
            return;
 800cd1a:	e6ed      	b.n	800caf8 <_nx_http_server_get_process+0x88>
 800cd1c:	080256d0 	.word	0x080256d0
 800cd20:	080256e0 	.word	0x080256e0
 800cd24:	0802573c 	.word	0x0802573c
 800cd28:	08025758 	.word	0x08025758
            status = (server_ptr -> nx_http_server_authentication_check)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource,
 800cd2c:	a90a      	add	r1, sp, #40	; 0x28
 800cd2e:	a809      	add	r0, sp, #36	; 0x24
 800cd30:	ab08      	add	r3, sp, #32
 800cd32:	4642      	mov	r2, r8
 800cd34:	9101      	str	r1, [sp, #4]
 800cd36:	4631      	mov	r1, r6
 800cd38:	9000      	str	r0, [sp, #0]
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	47c8      	blx	r9
 800cd3e:	4607      	mov	r7, r0
        if (status == NX_HTTP_BASIC_AUTHENTICATE ||
 800cd40:	f1a7 03e4 	sub.w	r3, r7, #228	; 0xe4
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d89f      	bhi.n	800cc88 <_nx_http_server_get_process+0x218>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800cd48:	2214      	movs	r2, #20
 800cd4a:	a910      	add	r1, sp, #64	; 0x40
 800cd4c:	9808      	ldr	r0, [sp, #32]
 800cd4e:	f007 fd57 	bl	8014800 <_nx_utility_string_length_check>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	f47f aed0 	bne.w	800caf8 <_nx_http_server_get_process+0x88>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800cd58:	2214      	movs	r2, #20
 800cd5a:	a911      	add	r1, sp, #68	; 0x44
 800cd5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd5e:	f007 fd4f 	bl	8014800 <_nx_utility_string_length_check>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f47f aec8 	bne.w	800caf8 <_nx_http_server_get_process+0x88>
                _nx_utility_string_length_check(realm_ptr, &temp_realm_length, NX_MAX_STRING_LENGTH))
 800cd68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd6c:	a912      	add	r1, sp, #72	; 0x48
 800cd6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd70:	f007 fd46 	bl	8014800 <_nx_utility_string_length_check>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f47f aebf 	bne.w	800caf8 <_nx_http_server_get_process+0x88>
            if (server_ptr -> nx_http_server_authentication_check_extended &&
 800cd7a:	f8d4 3470 	ldr.w	r3, [r4, #1136]	; 0x470
 800cd7e:	b173      	cbz	r3, 800cd9e <_nx_http_server_get_process+0x32e>
 800cd80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd84:	429a      	cmp	r2, r3
 800cd86:	f47f aeb7 	bne.w	800caf8 <_nx_http_server_get_process+0x88>
                ((realm_length != temp_realm_length) ||
 800cd8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	f47f aeb2 	bne.w	800caf8 <_nx_http_server_get_process+0x88>
                 (name_length != temp_name_length) ||
 800cd94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	f47f aead 	bne.w	800caf8 <_nx_http_server_get_process+0x88>
        if (status == NX_HTTP_BASIC_AUTHENTICATE)
 800cd9e:	2fe4      	cmp	r7, #228	; 0xe4
 800cda0:	f47f af75 	bne.w	800cc8e <_nx_http_server_get_process+0x21e>
            status =  _nx_http_server_basic_authenticate(server_ptr, packet_ptr, name_ptr, password_ptr, realm_ptr, temp_realm_length, &auth_request_present);
 800cda4:	af0c      	add	r7, sp, #48	; 0x30
 800cda6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdaa:	4629      	mov	r1, r5
 800cdac:	9702      	str	r7, [sp, #8]
 800cdae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800cdb0:	9001      	str	r0, [sp, #4]
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	9700      	str	r7, [sp, #0]
 800cdb6:	9a08      	ldr	r2, [sp, #32]
 800cdb8:	f7fe fb6c 	bl	800b494 <_nx_http_server_basic_authenticate>
 800cdbc:	4607      	mov	r7, r0
 800cdbe:	e763      	b.n	800cc88 <_nx_http_server_get_process+0x218>
    if ((request_type == NX_HTTP_SERVER_POST_REQUEST) && (length == 0))
 800cdc0:	2e02      	cmp	r6, #2
 800cdc2:	d103      	bne.n	800cdcc <_nx_http_server_get_process+0x35c>
 800cdc4:	9b07      	ldr	r3, [sp, #28]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f43f ae96 	beq.w	800caf8 <_nx_http_server_get_process+0x88>
    if (_nx_utility_string_length_check(server_ptr -> nx_http_server_request_resource,  &resource_length, 
 800cdcc:	2228      	movs	r2, #40	; 0x28
 800cdce:	a914      	add	r1, sp, #80	; 0x50
 800cdd0:	4640      	mov	r0, r8
 800cdd2:	f007 fd15 	bl	8014800 <_nx_utility_string_length_check>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	f47f ae8e 	bne.w	800caf8 <_nx_http_server_get_process+0x88>
    status =  fx_file_open(server_ptr -> nx_http_server_media_ptr, &(server_ptr -> nx_http_server_file), server_ptr -> nx_http_server_request_resource, FX_OPEN_FOR_READ);
 800cddc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cdde:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
 800cde2:	f104 0578 	add.w	r5, r4, #120	; 0x78
 800cde6:	4603      	mov	r3, r0
 800cde8:	9700      	str	r7, [sp, #0]
 800cdea:	4610      	mov	r0, r2
 800cdec:	4629      	mov	r1, r5
 800cdee:	4642      	mov	r2, r8
 800cdf0:	f009 f820 	bl	8015e34 <_fxe_file_open>
    if (status != NX_SUCCESS)
 800cdf4:	4607      	mov	r7, r0
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	f000 82aa 	beq.w	800d350 <_nx_http_server_get_process+0x8e0>
        _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_NOT_FOUND, sizeof(NX_HTTP_STATUS_NOT_FOUND) - 1, 
 800cdfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdfe:	2326      	movs	r3, #38	; 0x26
 800ce00:	f8cd 8004 	str.w	r8, [sp, #4]
 800ce04:	4620      	mov	r0, r4
 800ce06:	9202      	str	r2, [sp, #8]
 800ce08:	220d      	movs	r2, #13
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	49de      	ldr	r1, [pc, #888]	; (800d188 <_nx_http_server_get_process+0x718>)
 800ce0e:	4bdf      	ldr	r3, [pc, #892]	; (800d18c <_nx_http_server_get_process+0x71c>)
 800ce10:	f7fe ff58 	bl	800bcc4 <_nx_http_server_response_send>
        return;
 800ce14:	e670      	b.n	800caf8 <_nx_http_server_get_process+0x88>
        status = _nx_http_server_content_length_get_extended(packet_ptr, &length);
 800ce16:	a907      	add	r1, sp, #28
 800ce18:	4628      	mov	r0, r5
 800ce1a:	f7fd ff55 	bl	800acc8 <_nx_http_server_content_length_get_extended>
        if ( status != NX_SUCCESS)
 800ce1e:	b150      	cbz	r0, 800ce36 <_nx_http_server_get_process+0x3c6>
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_BAD_REQUEST, sizeof(NX_HTTP_STATUS_BAD_REQUEST) - 1, 
 800ce20:	2320      	movs	r3, #32
 800ce22:	4620      	mov	r0, r4
 800ce24:	220f      	movs	r2, #15
 800ce26:	49da      	ldr	r1, [pc, #872]	; (800d190 <_nx_http_server_get_process+0x720>)
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	4bda      	ldr	r3, [pc, #872]	; (800d194 <_nx_http_server_get_process+0x724>)
 800ce2c:	e9cd 7701 	strd	r7, r7, [sp, #4]
 800ce30:	f7fe ff48 	bl	800bcc4 <_nx_http_server_response_send>
            return;
 800ce34:	e660      	b.n	800caf8 <_nx_http_server_get_process+0x88>
    while (((buffer_ptr+3) < (CHAR *) packet_ptr -> nx_packet_append_ptr) && (*buffer_ptr != (CHAR) 0))
 800ce36:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 800ce3a:	1cda      	adds	r2, r3, #3
 800ce3c:	4291      	cmp	r1, r2
 800ce3e:	d903      	bls.n	800ce48 <_nx_http_server_get_process+0x3d8>
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f47f af02 	bne.w	800cc4c <_nx_http_server_get_process+0x1dc>
            _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_BAD_REQUEST, sizeof(NX_HTTP_STATUS_BAD_REQUEST) - 1, 
 800ce48:	2100      	movs	r1, #0
 800ce4a:	2520      	movs	r5, #32
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	4bd2      	ldr	r3, [pc, #840]	; (800d198 <_nx_http_server_get_process+0x728>)
 800ce50:	9102      	str	r1, [sp, #8]
 800ce52:	220f      	movs	r2, #15
 800ce54:	e9cd 5100 	strd	r5, r1, [sp]
 800ce58:	49cd      	ldr	r1, [pc, #820]	; (800d190 <_nx_http_server_get_process+0x720>)
 800ce5a:	f7fe ff33 	bl	800bcc4 <_nx_http_server_response_send>
            return;
 800ce5e:	e64b      	b.n	800caf8 <_nx_http_server_get_process+0x88>
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800ce60:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 800ce64:	f100 0311 	add.w	r3, r0, #17
 800ce68:	4299      	cmp	r1, r3
 800ce6a:	f240 8184 	bls.w	800d176 <_nx_http_server_get_process+0x706>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	f1a1 0c11 	sub.w	ip, r1, #17
 800ce74:	4618      	mov	r0, r3
        if((*src >= 'a') && (*src <= 'z'))
 800ce76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce7a:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800ce7e:	f1be 0f19 	cmp.w	lr, #25
 800ce82:	f240 81f3 	bls.w	800d26c <_nx_http_server_get_process+0x7fc>
        else if((*src >= 'A') && (*src <= 'Z'))
 800ce86:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800ce8a:	f1be 0f19 	cmp.w	lr, #25
 800ce8e:	f200 8229 	bhi.w	800d2e4 <_nx_http_server_get_process+0x874>
            ch = (UCHAR)(*src - 'A' + 'a');
 800ce92:	f102 0e20 	add.w	lr, r2, #32
 800ce96:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800ce9a:	2a69      	cmp	r2, #105	; 0x69
 800ce9c:	d003      	beq.n	800cea6 <_nx_http_server_get_process+0x436>
 800ce9e:	f1be 0f69 	cmp.w	lr, #105	; 0x69
 800cea2:	f040 81d7 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800cea6:	781a      	ldrb	r2, [r3, #0]
 800cea8:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800ceac:	f1be 0f19 	cmp.w	lr, #25
 800ceb0:	f240 81e1 	bls.w	800d276 <_nx_http_server_get_process+0x806>
        else if((*src >= 'A') && (*src <= 'Z'))
 800ceb4:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800ceb8:	f1be 0f19 	cmp.w	lr, #25
 800cebc:	f200 8219 	bhi.w	800d2f2 <_nx_http_server_get_process+0x882>
            ch = (UCHAR)(*src - 'A' + 'a');
 800cec0:	f102 0e20 	add.w	lr, r2, #32
 800cec4:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800cec8:	2a66      	cmp	r2, #102	; 0x66
 800ceca:	d003      	beq.n	800ced4 <_nx_http_server_get_process+0x464>
 800cecc:	f1be 0f66 	cmp.w	lr, #102	; 0x66
 800ced0:	f040 81c0 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800ced4:	785a      	ldrb	r2, [r3, #1]
 800ced6:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800ceda:	f1be 0f19 	cmp.w	lr, #25
 800cede:	f240 81b9 	bls.w	800d254 <_nx_http_server_get_process+0x7e4>
        else if((*src >= 'A') && (*src <= 'Z'))
 800cee2:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800cee6:	f1be 0f19 	cmp.w	lr, #25
 800ceea:	f200 8209 	bhi.w	800d300 <_nx_http_server_get_process+0x890>
            ch = (UCHAR)(*src - 'A' + 'a');
 800ceee:	f102 0e20 	add.w	lr, r2, #32
 800cef2:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800cef6:	2a2d      	cmp	r2, #45	; 0x2d
 800cef8:	d003      	beq.n	800cf02 <_nx_http_server_get_process+0x492>
 800cefa:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 800cefe:	f040 81a9 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800cf02:	789a      	ldrb	r2, [r3, #2]
 800cf04:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800cf08:	f1be 0f19 	cmp.w	lr, #25
 800cf0c:	f240 81b8 	bls.w	800d280 <_nx_http_server_get_process+0x810>
        else if((*src >= 'A') && (*src <= 'Z'))
 800cf10:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800cf14:	f1be 0f19 	cmp.w	lr, #25
 800cf18:	f200 81fe 	bhi.w	800d318 <_nx_http_server_get_process+0x8a8>
            ch = (UCHAR)(*src - 'A' + 'a');
 800cf1c:	f102 0e20 	add.w	lr, r2, #32
 800cf20:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800cf24:	2a6d      	cmp	r2, #109	; 0x6d
 800cf26:	d003      	beq.n	800cf30 <_nx_http_server_get_process+0x4c0>
 800cf28:	f1be 0f6d 	cmp.w	lr, #109	; 0x6d
 800cf2c:	f040 8192 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800cf30:	78da      	ldrb	r2, [r3, #3]
 800cf32:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800cf36:	f1be 0f19 	cmp.w	lr, #25
 800cf3a:	f240 81a6 	bls.w	800d28a <_nx_http_server_get_process+0x81a>
        else if((*src >= 'A') && (*src <= 'Z'))
 800cf3e:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800cf42:	f1be 0f19 	cmp.w	lr, #25
 800cf46:	f200 81e9 	bhi.w	800d31c <_nx_http_server_get_process+0x8ac>
            ch = (UCHAR)(*src - 'A' + 'a');
 800cf4a:	f102 0e20 	add.w	lr, r2, #32
 800cf4e:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800cf52:	2a6f      	cmp	r2, #111	; 0x6f
 800cf54:	d003      	beq.n	800cf5e <_nx_http_server_get_process+0x4ee>
 800cf56:	f1be 0f6f 	cmp.w	lr, #111	; 0x6f
 800cf5a:	f040 817b 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800cf5e:	791a      	ldrb	r2, [r3, #4]
 800cf60:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800cf64:	f1be 0f19 	cmp.w	lr, #25
 800cf68:	f240 8194 	bls.w	800d294 <_nx_http_server_get_process+0x824>
        else if((*src >= 'A') && (*src <= 'Z'))
 800cf6c:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800cf70:	f1be 0f19 	cmp.w	lr, #25
 800cf74:	f200 81d4 	bhi.w	800d320 <_nx_http_server_get_process+0x8b0>
            ch = (UCHAR)(*src - 'A' + 'a');
 800cf78:	f102 0e20 	add.w	lr, r2, #32
 800cf7c:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800cf80:	2a64      	cmp	r2, #100	; 0x64
 800cf82:	d003      	beq.n	800cf8c <_nx_http_server_get_process+0x51c>
 800cf84:	f1be 0f64 	cmp.w	lr, #100	; 0x64
 800cf88:	f040 8164 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800cf8c:	795a      	ldrb	r2, [r3, #5]
 800cf8e:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800cf92:	f1be 0f19 	cmp.w	lr, #25
 800cf96:	f240 8182 	bls.w	800d29e <_nx_http_server_get_process+0x82e>
        else if((*src >= 'A') && (*src <= 'Z'))
 800cf9a:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800cf9e:	f1be 0f19 	cmp.w	lr, #25
 800cfa2:	f200 81bf 	bhi.w	800d324 <_nx_http_server_get_process+0x8b4>
            ch = (UCHAR)(*src - 'A' + 'a');
 800cfa6:	f102 0e20 	add.w	lr, r2, #32
 800cfaa:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800cfae:	2a69      	cmp	r2, #105	; 0x69
 800cfb0:	d003      	beq.n	800cfba <_nx_http_server_get_process+0x54a>
 800cfb2:	f1be 0f69 	cmp.w	lr, #105	; 0x69
 800cfb6:	f040 814d 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800cfba:	799a      	ldrb	r2, [r3, #6]
 800cfbc:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800cfc0:	f1be 0f19 	cmp.w	lr, #25
 800cfc4:	f240 8170 	bls.w	800d2a8 <_nx_http_server_get_process+0x838>
        else if((*src >= 'A') && (*src <= 'Z'))
 800cfc8:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800cfcc:	f1be 0f19 	cmp.w	lr, #25
 800cfd0:	f200 81aa 	bhi.w	800d328 <_nx_http_server_get_process+0x8b8>
            ch = (UCHAR)(*src - 'A' + 'a');
 800cfd4:	f102 0e20 	add.w	lr, r2, #32
 800cfd8:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800cfdc:	f1be 0f66 	cmp.w	lr, #102	; 0x66
 800cfe0:	d002      	beq.n	800cfe8 <_nx_http_server_get_process+0x578>
 800cfe2:	2a66      	cmp	r2, #102	; 0x66
 800cfe4:	f040 8136 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800cfe8:	79da      	ldrb	r2, [r3, #7]
 800cfea:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800cfee:	f1be 0f19 	cmp.w	lr, #25
 800cff2:	f240 815e 	bls.w	800d2b2 <_nx_http_server_get_process+0x842>
        else if((*src >= 'A') && (*src <= 'Z'))
 800cff6:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800cffa:	f1be 0f19 	cmp.w	lr, #25
 800cffe:	f200 8195 	bhi.w	800d32c <_nx_http_server_get_process+0x8bc>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d002:	f102 0e20 	add.w	lr, r2, #32
 800d006:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d00a:	f1be 0f69 	cmp.w	lr, #105	; 0x69
 800d00e:	d002      	beq.n	800d016 <_nx_http_server_get_process+0x5a6>
 800d010:	2a69      	cmp	r2, #105	; 0x69
 800d012:	f040 811f 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800d016:	7a1a      	ldrb	r2, [r3, #8]
 800d018:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d01c:	f1be 0f19 	cmp.w	lr, #25
 800d020:	f240 814c 	bls.w	800d2bc <_nx_http_server_get_process+0x84c>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d024:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800d028:	f1be 0f19 	cmp.w	lr, #25
 800d02c:	f200 8180 	bhi.w	800d330 <_nx_http_server_get_process+0x8c0>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d030:	f102 0e20 	add.w	lr, r2, #32
 800d034:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d038:	f1be 0f65 	cmp.w	lr, #101	; 0x65
 800d03c:	d002      	beq.n	800d044 <_nx_http_server_get_process+0x5d4>
 800d03e:	2a65      	cmp	r2, #101	; 0x65
 800d040:	f040 8108 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800d044:	7a5a      	ldrb	r2, [r3, #9]
 800d046:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d04a:	f1be 0f19 	cmp.w	lr, #25
 800d04e:	f240 813a 	bls.w	800d2c6 <_nx_http_server_get_process+0x856>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d052:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800d056:	f1be 0f19 	cmp.w	lr, #25
 800d05a:	f200 816b 	bhi.w	800d334 <_nx_http_server_get_process+0x8c4>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d05e:	f102 0e20 	add.w	lr, r2, #32
 800d062:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d066:	f1be 0f64 	cmp.w	lr, #100	; 0x64
 800d06a:	d002      	beq.n	800d072 <_nx_http_server_get_process+0x602>
 800d06c:	2a64      	cmp	r2, #100	; 0x64
 800d06e:	f040 80f1 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800d072:	7a9a      	ldrb	r2, [r3, #10]
 800d074:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d078:	f1be 0f19 	cmp.w	lr, #25
 800d07c:	f240 80ea 	bls.w	800d254 <_nx_http_server_get_process+0x7e4>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d080:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800d084:	f1be 0f19 	cmp.w	lr, #25
 800d088:	f200 8156 	bhi.w	800d338 <_nx_http_server_get_process+0x8c8>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d08c:	f102 0e20 	add.w	lr, r2, #32
 800d090:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d094:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 800d098:	d002      	beq.n	800d0a0 <_nx_http_server_get_process+0x630>
 800d09a:	2a2d      	cmp	r2, #45	; 0x2d
 800d09c:	f040 80da 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800d0a0:	7ada      	ldrb	r2, [r3, #11]
 800d0a2:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d0a6:	f1be 0f19 	cmp.w	lr, #25
 800d0aa:	f240 8111 	bls.w	800d2d0 <_nx_http_server_get_process+0x860>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d0ae:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800d0b2:	f1be 0f19 	cmp.w	lr, #25
 800d0b6:	f200 8141 	bhi.w	800d33c <_nx_http_server_get_process+0x8cc>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d0ba:	f102 0e20 	add.w	lr, r2, #32
 800d0be:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d0c2:	f1be 0f73 	cmp.w	lr, #115	; 0x73
 800d0c6:	d002      	beq.n	800d0ce <_nx_http_server_get_process+0x65e>
 800d0c8:	2a73      	cmp	r2, #115	; 0x73
 800d0ca:	f040 80c3 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800d0ce:	7b1a      	ldrb	r2, [r3, #12]
 800d0d0:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d0d4:	f1be 0f19 	cmp.w	lr, #25
 800d0d8:	f240 80ff 	bls.w	800d2da <_nx_http_server_get_process+0x86a>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d0dc:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800d0e0:	f1be 0f19 	cmp.w	lr, #25
 800d0e4:	f200 812c 	bhi.w	800d340 <_nx_http_server_get_process+0x8d0>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d0e8:	f102 0e20 	add.w	lr, r2, #32
 800d0ec:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d0f0:	f1be 0f69 	cmp.w	lr, #105	; 0x69
 800d0f4:	d002      	beq.n	800d0fc <_nx_http_server_get_process+0x68c>
 800d0f6:	2a69      	cmp	r2, #105	; 0x69
 800d0f8:	f040 80ac 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800d0fc:	7b5a      	ldrb	r2, [r3, #13]
 800d0fe:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d102:	f1be 0f19 	cmp.w	lr, #25
 800d106:	f240 80ef 	bls.w	800d2e8 <_nx_http_server_get_process+0x878>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d10a:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800d10e:	f1be 0f19 	cmp.w	lr, #25
 800d112:	f200 8117 	bhi.w	800d344 <_nx_http_server_get_process+0x8d4>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d116:	f102 0e20 	add.w	lr, r2, #32
 800d11a:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d11e:	f1be 0f6e 	cmp.w	lr, #110	; 0x6e
 800d122:	d002      	beq.n	800d12a <_nx_http_server_get_process+0x6ba>
 800d124:	2a6e      	cmp	r2, #110	; 0x6e
 800d126:	f040 8095 	bne.w	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800d12a:	7b9a      	ldrb	r2, [r3, #14]
 800d12c:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d130:	f1be 0f19 	cmp.w	lr, #25
 800d134:	f240 80df 	bls.w	800d2f6 <_nx_http_server_get_process+0x886>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d138:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800d13c:	f1be 0f19 	cmp.w	lr, #25
 800d140:	f200 8102 	bhi.w	800d348 <_nx_http_server_get_process+0x8d8>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d144:	f102 0e20 	add.w	lr, r2, #32
 800d148:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d14c:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 800d150:	d001      	beq.n	800d156 <_nx_http_server_get_process+0x6e6>
 800d152:	2a63      	cmp	r2, #99	; 0x63
 800d154:	d17e      	bne.n	800d254 <_nx_http_server_get_process+0x7e4>
        if((*src >= 'a') && (*src <= 'z'))
 800d156:	7bda      	ldrb	r2, [r3, #15]
 800d158:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d15c:	f1be 0f19 	cmp.w	lr, #25
 800d160:	f200 80d0 	bhi.w	800d304 <_nx_http_server_get_process+0x894>
            ch = (UCHAR)(*src - 'a' + 'A');
 800d164:	f1a2 0e20 	sub.w	lr, r2, #32
 800d168:	fa5f fe8e 	uxtb.w	lr, lr
        if((*src != *dest) && (ch != *dest))
 800d16c:	2a65      	cmp	r2, #101	; 0x65
 800d16e:	d002      	beq.n	800d176 <_nx_http_server_get_process+0x706>
 800d170:	f1be 0f65 	cmp.w	lr, #101	; 0x65
 800d174:	d16e      	bne.n	800d254 <_nx_http_server_get_process+0x7e4>
    ch += name_length + 1;
 800d176:	f100 0312 	add.w	r3, r0, #18
    if(ch >= packet_ptr -> nx_packet_append_ptr)
 800d17a:	4299      	cmp	r1, r3
 800d17c:	f67f adaa 	bls.w	800ccd4 <_nx_http_server_get_process+0x264>
    while(*ch == ' ')
 800d180:	7c82      	ldrb	r2, [r0, #18]
 800d182:	2a20      	cmp	r2, #32
 800d184:	d00d      	beq.n	800d1a2 <_nx_http_server_get_process+0x732>
 800d186:	e010      	b.n	800d1aa <_nx_http_server_get_process+0x73a>
 800d188:	08025690 	.word	0x08025690
 800d18c:	08025668 	.word	0x08025668
 800d190:	080256d0 	.word	0x080256d0
 800d194:	080256f4 	.word	0x080256f4
 800d198:	08025718 	.word	0x08025718
        if(ch >= packet_ptr -> nx_packet_append_ptr)
 800d19c:	4299      	cmp	r1, r3
 800d19e:	f43f ad99 	beq.w	800ccd4 <_nx_http_server_get_process+0x264>
    while(*ch == ' ')
 800d1a2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800d1a6:	2a20      	cmp	r2, #32
 800d1a8:	d0f8      	beq.n	800d19c <_nx_http_server_get_process+0x72c>
 800d1aa:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    index = 0;
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	46cc      	mov	ip, r9
 800d1b2:	e005      	b.n	800d1c0 <_nx_http_server_get_process+0x750>
        field_value[index++] = *ch++;
 800d1b4:	3201      	adds	r2, #1
 800d1b6:	f80c 0b01 	strb.w	r0, [ip], #1
    while(index < field_value_size)
 800d1ba:	2a1e      	cmp	r2, #30
 800d1bc:	f43f ad8a 	beq.w	800ccd4 <_nx_http_server_get_process+0x264>
        if(ch + 2 > packet_ptr -> nx_packet_append_ptr)
 800d1c0:	1c98      	adds	r0, r3, #2
 800d1c2:	4281      	cmp	r1, r0
 800d1c4:	f4ff ad86 	bcc.w	800ccd4 <_nx_http_server_get_process+0x264>
        if((*ch == 13) && (*(ch + 1) == 10))
 800d1c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d1cc:	280d      	cmp	r0, #13
 800d1ce:	d1f1      	bne.n	800d1b4 <_nx_http_server_get_process+0x744>
 800d1d0:	f893 e000 	ldrb.w	lr, [r3]
 800d1d4:	f1be 0f0a 	cmp.w	lr, #10
 800d1d8:	d1ec      	bne.n	800d1b4 <_nx_http_server_get_process+0x744>
    while((index > 0) && (field_value[index - 1] == ' '))
 800d1da:	b192      	cbz	r2, 800d202 <_nx_http_server_get_process+0x792>
 800d1dc:	1e53      	subs	r3, r2, #1
 800d1de:	f819 0003 	ldrb.w	r0, [r9, r3]
 800d1e2:	eb09 0103 	add.w	r1, r9, r3
 800d1e6:	2820      	cmp	r0, #32
 800d1e8:	f040 816b 	bne.w	800d4c2 <_nx_http_server_get_process+0xa52>
 800d1ec:	460a      	mov	r2, r1
 800d1ee:	e005      	b.n	800d1fc <_nx_http_server_get_process+0x78c>
 800d1f0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 800d1f4:	2820      	cmp	r0, #32
 800d1f6:	f040 815b 	bne.w	800d4b0 <_nx_http_server_get_process+0xa40>
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	1e59      	subs	r1, r3, #1
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1f6      	bne.n	800d1f0 <_nx_http_server_get_process+0x780>
 800d202:	464b      	mov	r3, r9
    field_value[index] = 0;
 800d204:	f04f 0a00 	mov.w	sl, #0
            if(server_ptr -> nx_http_server_cache_info_get(server_ptr -> nx_http_server_request_resource, &max_age, &date) == NX_TRUE)
 800d208:	a913      	add	r1, sp, #76	; 0x4c
 800d20a:	4640      	mov	r0, r8
 800d20c:	aa14      	add	r2, sp, #80	; 0x50
    field_value[index] = 0;
 800d20e:	f883 a000 	strb.w	sl, [r3]
            if(server_ptr -> nx_http_server_cache_info_get(server_ptr -> nx_http_server_request_resource, &max_age, &date) == NX_TRUE)
 800d212:	47b8      	blx	r7
 800d214:	2801      	cmp	r0, #1
 800d216:	f47f ad5d 	bne.w	800ccd4 <_nx_http_server_get_process+0x264>
                temp = _nx_http_server_date_to_string(&date, date_string);
 800d21a:	a91e      	add	r1, sp, #120	; 0x78
 800d21c:	a814      	add	r0, sp, #80	; 0x50
 800d21e:	f7fe fa25 	bl	800b66c <_nx_http_server_date_to_string>
                date_string[temp] = 0;
 800d222:	aa26      	add	r2, sp, #152	; 0x98
                temp = _nx_http_server_date_to_string(&date, date_string);
 800d224:	4603      	mov	r3, r0
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800d226:	a91e      	add	r1, sp, #120	; 0x78
 800d228:	4648      	mov	r0, r9
                date_string[temp] = 0;
 800d22a:	18d7      	adds	r7, r2, r3
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800d22c:	1c5a      	adds	r2, r3, #1
                temp = _nx_http_server_date_to_string(&date, date_string);
 800d22e:	930b      	str	r3, [sp, #44]	; 0x2c
                date_string[temp] = 0;
 800d230:	f807 ac20 	strb.w	sl, [r7, #-32]
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800d234:	f011 f97e 	bl	801e534 <memcmp>
 800d238:	4602      	mov	r2, r0
 800d23a:	2800      	cmp	r0, #0
 800d23c:	f47f ad4a 	bne.w	800ccd4 <_nx_http_server_get_process+0x264>
                    _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED) - 1, NX_NULL, 0, NX_NULL, 0);
 800d240:	9002      	str	r0, [sp, #8]
 800d242:	4603      	mov	r3, r0
 800d244:	9001      	str	r0, [sp, #4]
 800d246:	4620      	mov	r0, r4
 800d248:	9200      	str	r2, [sp, #0]
 800d24a:	2210      	movs	r2, #16
 800d24c:	499e      	ldr	r1, [pc, #632]	; (800d4c8 <_nx_http_server_get_process+0xa58>)
 800d24e:	f7fe fd39 	bl	800bcc4 <_nx_http_server_response_send>
 800d252:	e451      	b.n	800caf8 <_nx_http_server_get_process+0x88>
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800d254:	4563      	cmp	r3, ip
        ch++;
 800d256:	4618      	mov	r0, r3
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800d258:	d08d      	beq.n	800d176 <_nx_http_server_get_process+0x706>
 800d25a:	4618      	mov	r0, r3
        if((*src >= 'a') && (*src <= 'z'))
 800d25c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d260:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800d264:	f1be 0f19 	cmp.w	lr, #25
 800d268:	f63f ae0d 	bhi.w	800ce86 <_nx_http_server_get_process+0x416>
            ch = (UCHAR)(*src - 'a' + 'A');
 800d26c:	f1a2 0e20 	sub.w	lr, r2, #32
 800d270:	fa5f fe8e 	uxtb.w	lr, lr
 800d274:	e611      	b.n	800ce9a <_nx_http_server_get_process+0x42a>
 800d276:	f1a2 0e20 	sub.w	lr, r2, #32
 800d27a:	fa5f fe8e 	uxtb.w	lr, lr
 800d27e:	e623      	b.n	800cec8 <_nx_http_server_get_process+0x458>
 800d280:	f1a2 0e20 	sub.w	lr, r2, #32
 800d284:	fa5f fe8e 	uxtb.w	lr, lr
 800d288:	e64c      	b.n	800cf24 <_nx_http_server_get_process+0x4b4>
 800d28a:	f1a2 0e20 	sub.w	lr, r2, #32
 800d28e:	fa5f fe8e 	uxtb.w	lr, lr
 800d292:	e65e      	b.n	800cf52 <_nx_http_server_get_process+0x4e2>
 800d294:	f1a2 0e20 	sub.w	lr, r2, #32
 800d298:	fa5f fe8e 	uxtb.w	lr, lr
 800d29c:	e670      	b.n	800cf80 <_nx_http_server_get_process+0x510>
 800d29e:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2a2:	fa5f fe8e 	uxtb.w	lr, lr
 800d2a6:	e682      	b.n	800cfae <_nx_http_server_get_process+0x53e>
 800d2a8:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2ac:	fa5f fe8e 	uxtb.w	lr, lr
 800d2b0:	e694      	b.n	800cfdc <_nx_http_server_get_process+0x56c>
 800d2b2:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2b6:	fa5f fe8e 	uxtb.w	lr, lr
 800d2ba:	e6a6      	b.n	800d00a <_nx_http_server_get_process+0x59a>
 800d2bc:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2c0:	fa5f fe8e 	uxtb.w	lr, lr
 800d2c4:	e6b8      	b.n	800d038 <_nx_http_server_get_process+0x5c8>
 800d2c6:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2ca:	fa5f fe8e 	uxtb.w	lr, lr
 800d2ce:	e6ca      	b.n	800d066 <_nx_http_server_get_process+0x5f6>
 800d2d0:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2d4:	fa5f fe8e 	uxtb.w	lr, lr
 800d2d8:	e6f3      	b.n	800d0c2 <_nx_http_server_get_process+0x652>
 800d2da:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2de:	fa5f fe8e 	uxtb.w	lr, lr
 800d2e2:	e705      	b.n	800d0f0 <_nx_http_server_get_process+0x680>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d2e4:	4696      	mov	lr, r2
 800d2e6:	e5d8      	b.n	800ce9a <_nx_http_server_get_process+0x42a>
            ch = (UCHAR)(*src - 'a' + 'A');
 800d2e8:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2ec:	fa5f fe8e 	uxtb.w	lr, lr
 800d2f0:	e715      	b.n	800d11e <_nx_http_server_get_process+0x6ae>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d2f2:	4696      	mov	lr, r2
 800d2f4:	e5e8      	b.n	800cec8 <_nx_http_server_get_process+0x458>
            ch = (UCHAR)(*src - 'a' + 'A');
 800d2f6:	f1a2 0e20 	sub.w	lr, r2, #32
 800d2fa:	fa5f fe8e 	uxtb.w	lr, lr
 800d2fe:	e725      	b.n	800d14c <_nx_http_server_get_process+0x6dc>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d300:	4696      	mov	lr, r2
 800d302:	e5f8      	b.n	800cef6 <_nx_http_server_get_process+0x486>
 800d304:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 800d308:	f1be 0f19 	cmp.w	lr, #25
 800d30c:	d81e      	bhi.n	800d34c <_nx_http_server_get_process+0x8dc>
            ch = (UCHAR)(*src - 'A' + 'a');
 800d30e:	f102 0e20 	add.w	lr, r2, #32
 800d312:	fa5f fe8e 	uxtb.w	lr, lr
 800d316:	e729      	b.n	800d16c <_nx_http_server_get_process+0x6fc>
        else if((*src >= 'A') && (*src <= 'Z'))
 800d318:	4696      	mov	lr, r2
 800d31a:	e603      	b.n	800cf24 <_nx_http_server_get_process+0x4b4>
 800d31c:	4696      	mov	lr, r2
 800d31e:	e618      	b.n	800cf52 <_nx_http_server_get_process+0x4e2>
 800d320:	4696      	mov	lr, r2
 800d322:	e62d      	b.n	800cf80 <_nx_http_server_get_process+0x510>
 800d324:	4696      	mov	lr, r2
 800d326:	e642      	b.n	800cfae <_nx_http_server_get_process+0x53e>
 800d328:	4696      	mov	lr, r2
 800d32a:	e657      	b.n	800cfdc <_nx_http_server_get_process+0x56c>
 800d32c:	4696      	mov	lr, r2
 800d32e:	e66c      	b.n	800d00a <_nx_http_server_get_process+0x59a>
 800d330:	4696      	mov	lr, r2
 800d332:	e681      	b.n	800d038 <_nx_http_server_get_process+0x5c8>
 800d334:	4696      	mov	lr, r2
 800d336:	e696      	b.n	800d066 <_nx_http_server_get_process+0x5f6>
 800d338:	4696      	mov	lr, r2
 800d33a:	e6ab      	b.n	800d094 <_nx_http_server_get_process+0x624>
 800d33c:	4696      	mov	lr, r2
 800d33e:	e6c0      	b.n	800d0c2 <_nx_http_server_get_process+0x652>
 800d340:	4696      	mov	lr, r2
 800d342:	e6d5      	b.n	800d0f0 <_nx_http_server_get_process+0x680>
 800d344:	4696      	mov	lr, r2
 800d346:	e6ea      	b.n	800d11e <_nx_http_server_get_process+0x6ae>
 800d348:	4696      	mov	lr, r2
 800d34a:	e6ff      	b.n	800d14c <_nx_http_server_get_process+0x6dc>
 800d34c:	4696      	mov	lr, r2
 800d34e:	e70d      	b.n	800d16c <_nx_http_server_get_process+0x6fc>
    length =  0;
 800d350:	ab26      	add	r3, sp, #152	; 0x98
    fx_directory_information_get(server_ptr -> nx_http_server_media_ptr, server_ptr -> nx_http_server_request_resource, FX_NULL, 
 800d352:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d354:	463a      	mov	r2, r7
 800d356:	9705      	str	r7, [sp, #20]
 800d358:	9700      	str	r7, [sp, #0]
 800d35a:	4641      	mov	r1, r8
 800d35c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800d360:	e9cd 7701 	strd	r7, r7, [sp, #4]
    length =  0;
 800d364:	f843 7d7c 	str.w	r7, [r3, #-124]!
    fx_directory_information_get(server_ptr -> nx_http_server_media_ptr, server_ptr -> nx_http_server_request_resource, FX_NULL, 
 800d368:	f008 fcd6 	bl	8015d18 <_fxe_directory_information_get>
    temp =  (ULONG) _nx_http_server_type_get_extended(server_ptr, server_ptr -> nx_http_server_request_resource, resource_length, temp_string, sizeof(temp_string));
 800d36c:	9f14      	ldr	r7, [sp, #80]	; 0x50
    if (_nx_utility_string_length_check(name, &temp_name_length, name_length))
 800d36e:	a91e      	add	r1, sp, #120	; 0x78
 800d370:	4640      	mov	r0, r8
 800d372:	463a      	mov	r2, r7
 800d374:	f007 fa44 	bl	8014800 <_nx_utility_string_length_check>
 800d378:	2800      	cmp	r0, #0
 800d37a:	d174      	bne.n	800d466 <_nx_http_server_get_process+0x9f6>
    if (name_length != temp_name_length)
 800d37c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d37e:	429f      	cmp	r7, r3
 800d380:	d171      	bne.n	800d466 <_nx_http_server_get_process+0x9f6>
 800d382:	201e      	movs	r0, #30
 800d384:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 800d388:	463a      	mov	r2, r7
 800d38a:	4641      	mov	r1, r8
 800d38c:	9000      	str	r0, [sp, #0]
 800d38e:	464b      	mov	r3, r9
 800d390:	4620      	mov	r0, r4
 800d392:	f7fd fbb5 	bl	800ab00 <_nx_http_server_type_get_extended.part.1>
 800d396:	4602      	mov	r2, r0
    temp_string[temp] = 0;
 800d398:	ab26      	add	r3, sp, #152	; 0x98
 800d39a:	2700      	movs	r7, #0
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800d39c:	9807      	ldr	r0, [sp, #28]
 800d39e:	a91e      	add	r1, sp, #120	; 0x78
    temp_string[temp] = 0;
 800d3a0:	eb03 0c02 	add.w	ip, r3, r2
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800d3a4:	9704      	str	r7, [sp, #16]
 800d3a6:	9000      	str	r0, [sp, #0]
 800d3a8:	2306      	movs	r3, #6
 800d3aa:	9703      	str	r7, [sp, #12]
 800d3ac:	4620      	mov	r0, r4
    temp =  (ULONG) _nx_http_server_type_get_extended(server_ptr, server_ptr -> nx_http_server_request_resource, resource_length, temp_string, sizeof(temp_string));
 800d3ae:	920b      	str	r2, [sp, #44]	; 0x2c
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800d3b0:	e9cd 9201 	strd	r9, r2, [sp, #4]
 800d3b4:	4a45      	ldr	r2, [pc, #276]	; (800d4cc <_nx_http_server_get_process+0xa5c>)
    temp_string[temp] = 0;
 800d3b6:	f80c 7c40 	strb.w	r7, [ip, #-64]
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800d3ba:	f7fe fa35 	bl	800b828 <_nx_http_server_generate_response_header>
    if(status)
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d164      	bne.n	800d48c <_nx_http_server_get_process+0xa1c>
 800d3c2:	1ef7      	subs	r7, r6, #3
    if ((!length) || (request_type == NX_HTTP_SERVER_HEAD_REQUEST))
 800d3c4:	9a07      	ldr	r2, [sp, #28]
 800d3c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d3c8:	bf18      	it	ne
 800d3ca:	2701      	movne	r7, #1
 800d3cc:	2a00      	cmp	r2, #0
 800d3ce:	d04e      	beq.n	800d46e <_nx_http_server_get_process+0x9fe>
 800d3d0:	2e03      	cmp	r6, #3
 800d3d2:	d04c      	beq.n	800d46e <_nx_http_server_get_process+0x9fe>
 800d3d4:	463a      	mov	r2, r7
    temp = new_packet_ptr -> nx_packet_length;
 800d3d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d3d8:	910b      	str	r1, [sp, #44]	; 0x2c
    while ((length) && (request_type != NX_HTTP_SERVER_HEAD_REQUEST))
 800d3da:	2a00      	cmp	r2, #0
 800d3dc:	d03e      	beq.n	800d45c <_nx_http_server_get_process+0x9ec>
        if (!temp)
 800d3de:	b351      	cbz	r1, 800d436 <_nx_http_server_get_process+0x9c6>
        temp =  ((ULONG) (new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_append_ptr)) - NX_PHYSICAL_TRAILER;
 800d3e0:	68d9      	ldr	r1, [r3, #12]
 800d3e2:	695a      	ldr	r2, [r3, #20]
        if (temp > server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_mss)
 800d3e4:	f8d4 3284 	ldr.w	r3, [r4, #644]	; 0x284
        temp =  ((ULONG) (new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_append_ptr)) - NX_PHYSICAL_TRAILER;
 800d3e8:	1a52      	subs	r2, r2, r1
 800d3ea:	3a04      	subs	r2, #4
        if (temp > server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_mss)
 800d3ec:	429a      	cmp	r2, r3
        temp =  ((ULONG) (new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_append_ptr)) - NX_PHYSICAL_TRAILER;
 800d3ee:	920b      	str	r2, [sp, #44]	; 0x2c
        if (temp > server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_mss)
 800d3f0:	d901      	bls.n	800d3f6 <_nx_http_server_get_process+0x986>
            temp =  server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_mss;
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	930b      	str	r3, [sp, #44]	; 0x2c
        status =  fx_file_read(&(server_ptr -> nx_http_server_file), new_packet_ptr -> nx_packet_append_ptr, 
 800d3f6:	ab0b      	add	r3, sp, #44	; 0x2c
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f008 fd6f 	bl	8015edc <_fxe_file_read>
        if (status != NX_SUCCESS)
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d152      	bne.n	800d4a8 <_nx_http_server_get_process+0xa38>
        new_packet_ptr -> nx_packet_length =  new_packet_ptr -> nx_packet_length + temp;
 800d402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800d404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
        new_packet_ptr -> nx_packet_length =  new_packet_ptr -> nx_packet_length + temp;
 800d408:	980b      	ldr	r0, [sp, #44]	; 0x2c
        new_packet_ptr -> nx_packet_append_ptr =  new_packet_ptr -> nx_packet_append_ptr + temp;
 800d40a:	68d9      	ldr	r1, [r3, #12]
        new_packet_ptr -> nx_packet_length =  new_packet_ptr -> nx_packet_length + temp;
 800d40c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800d40e:	4406      	add	r6, r0
        new_packet_ptr -> nx_packet_append_ptr =  new_packet_ptr -> nx_packet_append_ptr + temp;
 800d410:	4408      	add	r0, r1
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800d412:	4619      	mov	r1, r3
        new_packet_ptr -> nx_packet_append_ptr =  new_packet_ptr -> nx_packet_append_ptr + temp;
 800d414:	60d8      	str	r0, [r3, #12]
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800d416:	4650      	mov	r0, sl
        new_packet_ptr -> nx_packet_length =  new_packet_ptr -> nx_packet_length + temp;
 800d418:	625e      	str	r6, [r3, #36]	; 0x24
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800d41a:	f7fa fe13 	bl	8008044 <_nx_tcp_socket_send>
        if (status != NX_SUCCESS)
 800d41e:	2800      	cmp	r0, #0
 800d420:	d142      	bne.n	800d4a8 <_nx_http_server_get_process+0xa38>
        server_ptr -> nx_http_server_total_bytes_sent =  server_ptr -> nx_http_server_total_bytes_sent + temp;
 800d422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d424:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        length =  length - temp;
 800d426:	9b07      	ldr	r3, [sp, #28]
        server_ptr -> nx_http_server_total_bytes_sent =  server_ptr -> nx_http_server_total_bytes_sent + temp;
 800d428:	440a      	add	r2, r1
        temp = 0;
 800d42a:	900b      	str	r0, [sp, #44]	; 0x2c
        length =  length - temp;
 800d42c:	1a5b      	subs	r3, r3, r1
        server_ptr -> nx_http_server_total_bytes_sent =  server_ptr -> nx_http_server_total_bytes_sent + temp;
 800d42e:	65e2      	str	r2, [r4, #92]	; 0x5c
        length =  length - temp;
 800d430:	9307      	str	r3, [sp, #28]
    while ((length) && (request_type != NX_HTTP_SERVER_HEAD_REQUEST))
 800d432:	b19b      	cbz	r3, 800d45c <_nx_http_server_get_process+0x9ec>
 800d434:	b197      	cbz	r7, 800d45c <_nx_http_server_get_process+0x9ec>
            status =  nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &new_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800d436:	f04f 33ff 	mov.w	r3, #4294967295
 800d43a:	224c      	movs	r2, #76	; 0x4c
 800d43c:	a91e      	add	r1, sp, #120	; 0x78
 800d43e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d440:	f7f9 f924 	bl	800668c <_nx_packet_allocate>
            if (status != NX_SUCCESS)
 800d444:	2800      	cmp	r0, #0
 800d446:	d138      	bne.n	800d4ba <_nx_http_server_get_process+0xa4a>
 800d448:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d44a:	e7c9      	b.n	800d3e0 <_nx_http_server_get_process+0x970>
            nx_packet_release(new_packet_ptr);
 800d44c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800d44e:	f7f9 facf 	bl	80069f0 <_nx_packet_release>
    temp = new_packet_ptr -> nx_packet_length;
 800d452:	9b1e      	ldr	r3, [sp, #120]	; 0x78
            length = 0;
 800d454:	2200      	movs	r2, #0
    temp = new_packet_ptr -> nx_packet_length;
 800d456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            length = 0;
 800d458:	9207      	str	r2, [sp, #28]
    temp = new_packet_ptr -> nx_packet_length;
 800d45a:	930b      	str	r3, [sp, #44]	; 0x2c
    fx_file_close(&(server_ptr -> nx_http_server_file));
 800d45c:	4628      	mov	r0, r5
 800d45e:	f008 fc9b 	bl	8015d98 <_fxe_file_close>
 800d462:	f7ff bb49 	b.w	800caf8 <_nx_http_server_get_process+0x88>
        return(NX_HTTP_ERROR);
 800d466:	22e0      	movs	r2, #224	; 0xe0
 800d468:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 800d46c:	e794      	b.n	800d398 <_nx_http_server_get_process+0x928>
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800d46e:	4619      	mov	r1, r3
 800d470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d474:	4650      	mov	r0, sl
 800d476:	f7fa fde5 	bl	8008044 <_nx_tcp_socket_send>
        if (status != NX_SUCCESS)
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d1e6      	bne.n	800d44c <_nx_http_server_get_process+0x9dc>
 800d47e:	9a07      	ldr	r2, [sp, #28]
 800d480:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d482:	2a00      	cmp	r2, #0
 800d484:	bf14      	ite	ne
 800d486:	463a      	movne	r2, r7
 800d488:	2200      	moveq	r2, #0
 800d48a:	e7a4      	b.n	800d3d6 <_nx_http_server_get_process+0x966>
        _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800d48c:	2219      	movs	r2, #25
 800d48e:	4620      	mov	r0, r4
 800d490:	4b0f      	ldr	r3, [pc, #60]	; (800d4d0 <_nx_http_server_get_process+0xa60>)
 800d492:	9200      	str	r2, [sp, #0]
 800d494:	490f      	ldr	r1, [pc, #60]	; (800d4d4 <_nx_http_server_get_process+0xa64>)
 800d496:	e9cd 7701 	strd	r7, r7, [sp, #4]
 800d49a:	f7fe fc13 	bl	800bcc4 <_nx_http_server_response_send>
        fx_file_close(&(server_ptr -> nx_http_server_file));
 800d49e:	4628      	mov	r0, r5
 800d4a0:	f008 fc7a 	bl	8015d98 <_fxe_file_close>
        return;
 800d4a4:	f7ff bb28 	b.w	800caf8 <_nx_http_server_get_process+0x88>
            nx_packet_release(new_packet_ptr);
 800d4a8:	981e      	ldr	r0, [sp, #120]	; 0x78
 800d4aa:	f7f9 faa1 	bl	80069f0 <_nx_packet_release>
            break;
 800d4ae:	e7d5      	b.n	800d45c <_nx_http_server_get_process+0x9ec>
 800d4b0:	444b      	add	r3, r9
 800d4b2:	e6a7      	b.n	800d204 <_nx_http_server_get_process+0x794>
{
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	f7ff bb5e 	b.w	800cb76 <_nx_http_server_get_process+0x106>
                server_ptr -> nx_http_server_allocation_errors++;
 800d4ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4bc:	3301      	adds	r3, #1
 800d4be:	6663      	str	r3, [r4, #100]	; 0x64
                break;
 800d4c0:	e7cc      	b.n	800d45c <_nx_http_server_get_process+0x9ec>
 800d4c2:	eb09 0302 	add.w	r3, r9, r2
 800d4c6:	e69d      	b.n	800d204 <_nx_http_server_get_process+0x794>
 800d4c8:	080255ec 	.word	0x080255ec
 800d4cc:	080255e4 	.word	0x080255e4
 800d4d0:	0802573c 	.word	0x0802573c
 800d4d4:	08025758 	.word	0x08025758

0800d4d8 <_nx_http_server_thread_entry>:
{
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	f100 030c 	add.w	r3, r0, #12
 800d4e0:	b0ad      	sub	sp, #180	; 0xb4
 800d4e2:	f500 7866 	add.w	r8, r0, #920	; 0x398
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	9308      	str	r3, [sp, #32]
 800d4ea:	f100 0378 	add.w	r3, r0, #120	; 0x78
 800d4ee:	f500 7616 	add.w	r6, r0, #600	; 0x258
        tx_thread_preemption_change(&(server_ptr -> nx_http_server_thread), 0, &original_threshold);
 800d4f2:	f04f 0b00 	mov.w	fp, #0
 800d4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f8:	46c2      	mov	sl, r8
    while(loop_endlessly)
 800d4fa:	e011      	b.n	800d520 <_nx_http_server_thread_entry+0x48>
            if(status != NX_NO_PACKET)
 800d4fc:	2801      	cmp	r0, #1
 800d4fe:	d002      	beq.n	800d506 <_nx_http_server_thread_entry+0x2e>
                server_ptr -> nx_http_server_invalid_http_headers++;
 800d500:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d502:	3301      	adds	r3, #1
 800d504:	6723      	str	r3, [r4, #112]	; 0x70
        nx_tcp_socket_disconnect(&(server_ptr -> nx_http_server_socket), NX_HTTP_SERVER_TIMEOUT_DISCONNECT);
 800d506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7fa fa4e 	bl	80079ac <_nx_tcp_socket_disconnect>
        nx_tcp_server_socket_unaccept(&(server_ptr -> nx_http_server_socket));
 800d510:	4630      	mov	r0, r6
 800d512:	f7fa f863 	bl	80075dc <_nx_tcp_server_socket_unaccept>
        nx_tcp_server_socket_relisten(server_ptr -> nx_http_server_ip_ptr, NX_HTTP_SERVER_PORT,
 800d516:	4632      	mov	r2, r6
 800d518:	2150      	movs	r1, #80	; 0x50
 800d51a:	68a0      	ldr	r0, [r4, #8]
 800d51c:	f006 f80c 	bl	8013538 <_nx_tcp_server_socket_relisten>
        tx_thread_preemption_change(&(server_ptr -> nx_http_server_thread), 0, &original_threshold);
 800d520:	aa0c      	add	r2, sp, #48	; 0x30
 800d522:	2100      	movs	r1, #0
 800d524:	4650      	mov	r0, sl
 800d526:	f010 fc03 	bl	801dd30 <_txe_thread_preemption_change>
        if (server_ptr -> nx_http_connection_pending == NX_FALSE)
 800d52a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d52c:	b913      	cbnz	r3, 800d534 <_nx_http_server_thread_entry+0x5c>
            tx_thread_suspend(&(server_ptr -> nx_http_server_thread));
 800d52e:	4650      	mov	r0, sl
 800d530:	f010 fc30 	bl	801dd94 <_txe_thread_suspend>
        tx_thread_preemption_change(&(server_ptr -> nx_http_server_thread), original_threshold, &original_threshold);
 800d534:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d536:	aa0c      	add	r2, sp, #48	; 0x30
        server_ptr -> nx_http_connection_pending = NX_FALSE;
 800d538:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
        tx_thread_preemption_change(&(server_ptr -> nx_http_server_thread), original_threshold, &original_threshold);
 800d53c:	4650      	mov	r0, sl
 800d53e:	f010 fbf7 	bl	801dd30 <_txe_thread_preemption_change>
        status =  nx_tcp_server_socket_accept(&(server_ptr -> nx_http_server_socket), NX_HTTP_SERVER_TIMEOUT_ACCEPT);
 800d542:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d546:	4630      	mov	r0, r6
 800d548:	f7f9 ff5c 	bl	8007404 <_nx_tcp_server_socket_accept>
        if (status != NX_SUCCESS)
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f040 80c2 	bne.w	800d6d6 <_nx_http_server_thread_entry+0x1fe>
        server_ptr -> nx_http_server_connection_successes++;
 800d552:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        status =  _nx_http_server_get_client_request(server_ptr, &packet_ptr);
 800d554:	a90b      	add	r1, sp, #44	; 0x2c
 800d556:	4620      	mov	r0, r4
        server_ptr -> nx_http_server_connection_successes++;
 800d558:	3301      	adds	r3, #1
 800d55a:	66e3      	str	r3, [r4, #108]	; 0x6c
        status =  _nx_http_server_get_client_request(server_ptr, &packet_ptr);
 800d55c:	f7fd fd68 	bl	800b030 <_nx_http_server_get_client_request>
        if (status == NX_SUCCESS)
 800d560:	4605      	mov	r5, r0
 800d562:	2800      	cmp	r0, #0
 800d564:	d1ca      	bne.n	800d4fc <_nx_http_server_thread_entry+0x24>
            if (packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr < 7)
 800d566:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d56a:	e9d8 3202 	ldrd	r3, r2, [r8, #8]
 800d56e:	1ad2      	subs	r2, r2, r3
 800d570:	2a06      	cmp	r2, #6
 800d572:	f340 81c4 	ble.w	800d8fe <_nx_http_server_thread_entry+0x426>
        if ((buffer_ptr[0] == 'G') && (buffer_ptr[1] == 'E') && (buffer_ptr[2] == 'T') && (buffer_ptr[3] == ' '))
 800d576:	781a      	ldrb	r2, [r3, #0]
 800d578:	2a47      	cmp	r2, #71	; 0x47
 800d57a:	f000 80bb 	beq.w	800d6f4 <_nx_http_server_thread_entry+0x21c>
        else if ((buffer_ptr[0] == 'P') && (buffer_ptr[1] == 'U') && (buffer_ptr[2] == 'T') && (buffer_ptr[3] == ' '))
 800d57e:	2a50      	cmp	r2, #80	; 0x50
 800d580:	f040 8114 	bne.w	800d7ac <_nx_http_server_thread_entry+0x2d4>
 800d584:	785a      	ldrb	r2, [r3, #1]
 800d586:	2a55      	cmp	r2, #85	; 0x55
 800d588:	f000 81c3 	beq.w	800d912 <_nx_http_server_thread_entry+0x43a>
        else if ((buffer_ptr[0] == 'P') && (buffer_ptr[1] == 'O') && (buffer_ptr[2] == 'S') && 
 800d58c:	2a4f      	cmp	r2, #79	; 0x4f
 800d58e:	d103      	bne.n	800d598 <_nx_http_server_thread_entry+0xc0>
 800d590:	789a      	ldrb	r2, [r3, #2]
 800d592:	2a53      	cmp	r2, #83	; 0x53
 800d594:	f000 81d0 	beq.w	800d938 <_nx_http_server_thread_entry+0x460>
CHAR        crlf[2] = {13,10};
 800d598:	4b97      	ldr	r3, [pc, #604]	; (800d7f8 <_nx_http_server_thread_entry+0x320>)
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800d59a:	224c      	movs	r2, #76	; 0x4c
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_UNKNOWN_REQUEST;
 800d59c:	f8c4 b460 	str.w	fp, [r4, #1120]	; 0x460
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800d5a0:	a91a      	add	r1, sp, #104	; 0x68
CHAR        crlf[2] = {13,10};
 800d5a2:	881d      	ldrh	r5, [r3, #0]
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800d5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
CHAR        crlf[2] = {13,10};
 800d5aa:	f8ad 5064 	strh.w	r5, [sp, #100]	; 0x64
    status = nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, packet_pptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800d5ae:	f7f9 f86d 	bl	800668c <_nx_packet_allocate>
    if(status != NX_SUCCESS)
 800d5b2:	4680      	mov	r8, r0
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	f040 8093 	bne.w	800d6e0 <_nx_http_server_thread_entry+0x208>
        packet_ptr = *packet_pptr;
 800d5ba:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    status = nx_packet_data_append(packet_ptr, NX_HTTP_VERSION, sizeof(NX_HTTP_VERSION) - 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d5bc:	f04f 39ff 	mov.w	r9, #4294967295
 800d5c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d5c2:	2208      	movs	r2, #8
 800d5c4:	498d      	ldr	r1, [pc, #564]	; (800d7fc <_nx_http_server_thread_entry+0x324>)
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	f8cd 9000 	str.w	r9, [sp]
 800d5cc:	f7f9 f8bc 	bl	8006748 <_nx_packet_data_append>
 800d5d0:	4605      	mov	r5, r0
    status += nx_packet_data_append(packet_ptr, " ", 1,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d5d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	498a      	ldr	r1, [pc, #552]	; (800d800 <_nx_http_server_thread_entry+0x328>)
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f8cd 9000 	str.w	r9, [sp]
 800d5de:	f7f9 f8b3 	bl	8006748 <_nx_packet_data_append>
 800d5e2:	4405      	add	r5, r0
    status += nx_packet_data_append(packet_ptr, status_code, status_code_length,  server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d5e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d5e6:	2213      	movs	r2, #19
 800d5e8:	4986      	ldr	r1, [pc, #536]	; (800d804 <_nx_http_server_thread_entry+0x32c>)
 800d5ea:	4638      	mov	r0, r7
 800d5ec:	f8cd 9000 	str.w	r9, [sp]
 800d5f0:	f7f9 f8aa 	bl	8006748 <_nx_packet_data_append>
 800d5f4:	4405      	add	r5, r0
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d5f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d5f8:	2202      	movs	r2, #2
 800d5fa:	a919      	add	r1, sp, #100	; 0x64
 800d5fc:	f8cd 9000 	str.w	r9, [sp]
 800d600:	4638      	mov	r0, r7
 800d602:	f7f9 f8a1 	bl	8006748 <_nx_packet_data_append>
 800d606:	4405      	add	r5, r0
        status += nx_packet_data_append(packet_ptr, "Connection: Close", 17,
 800d608:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d60a:	2211      	movs	r2, #17
 800d60c:	497e      	ldr	r1, [pc, #504]	; (800d808 <_nx_http_server_thread_entry+0x330>)
 800d60e:	4638      	mov	r0, r7
 800d610:	f8cd 9000 	str.w	r9, [sp]
 800d614:	f7f9 f898 	bl	8006748 <_nx_packet_data_append>
 800d618:	4405      	add	r5, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d61a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d61c:	2202      	movs	r2, #2
 800d61e:	a919      	add	r1, sp, #100	; 0x64
 800d620:	f8cd 9000 	str.w	r9, [sp]
 800d624:	4638      	mov	r0, r7
 800d626:	f7f9 f88f 	bl	8006748 <_nx_packet_data_append>
 800d62a:	ab24      	add	r3, sp, #144	; 0x90
 800d62c:	182a      	adds	r2, r5, r0
    size =  0;
 800d62e:	4641      	mov	r1, r8
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d630:	f04f 0c21 	mov.w	ip, #33	; 0x21
 800d634:	4d75      	ldr	r5, [pc, #468]	; (800d80c <_nx_http_server_thread_entry+0x334>)
 800d636:	9207      	str	r2, [sp, #28]
 800d638:	fba5 200c 	umull	r2, r0, r5, ip
 800d63c:	f101 0e01 	add.w	lr, r1, #1
 800d640:	08c0      	lsrs	r0, r0, #3
 800d642:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800d646:	ebac 0242 	sub.w	r2, ip, r2, lsl #1
 800d64a:	4684      	mov	ip, r0
 800d64c:	3230      	adds	r2, #48	; 0x30
 800d64e:	b2d2      	uxtb	r2, r2
        for (j = size; j != 0; j--)
 800d650:	2900      	cmp	r1, #0
 800d652:	f000 80dd 	beq.w	800d810 <_nx_http_server_thread_entry+0x338>
            string[j] =  string[j-1];
 800d656:	f813 9c01 	ldrb.w	r9, [r3, #-1]
        for (j = size; j != 0; j--)
 800d65a:	2901      	cmp	r1, #1
            string[j] =  string[j-1];
 800d65c:	f883 9000 	strb.w	r9, [r3]
        for (j = size; j != 0; j--)
 800d660:	d02d      	beq.n	800d6be <_nx_http_server_thread_entry+0x1e6>
            string[j] =  string[j-1];
 800d662:	f813 9c02 	ldrb.w	r9, [r3, #-2]
        for (j = size; j != 0; j--)
 800d666:	2902      	cmp	r1, #2
            string[j] =  string[j-1];
 800d668:	f803 9c01 	strb.w	r9, [r3, #-1]
        for (j = size; j != 0; j--)
 800d66c:	d027      	beq.n	800d6be <_nx_http_server_thread_entry+0x1e6>
            string[j] =  string[j-1];
 800d66e:	f813 9c03 	ldrb.w	r9, [r3, #-3]
        for (j = size; j != 0; j--)
 800d672:	2903      	cmp	r1, #3
            string[j] =  string[j-1];
 800d674:	f803 9c02 	strb.w	r9, [r3, #-2]
        for (j = size; j != 0; j--)
 800d678:	d021      	beq.n	800d6be <_nx_http_server_thread_entry+0x1e6>
            string[j] =  string[j-1];
 800d67a:	f813 9c04 	ldrb.w	r9, [r3, #-4]
        for (j = size; j != 0; j--)
 800d67e:	2904      	cmp	r1, #4
            string[j] =  string[j-1];
 800d680:	f803 9c03 	strb.w	r9, [r3, #-3]
        for (j = size; j != 0; j--)
 800d684:	d01b      	beq.n	800d6be <_nx_http_server_thread_entry+0x1e6>
            string[j] =  string[j-1];
 800d686:	f813 9c05 	ldrb.w	r9, [r3, #-5]
        for (j = size; j != 0; j--)
 800d68a:	2905      	cmp	r1, #5
            string[j] =  string[j-1];
 800d68c:	f803 9c04 	strb.w	r9, [r3, #-4]
        for (j = size; j != 0; j--)
 800d690:	d015      	beq.n	800d6be <_nx_http_server_thread_entry+0x1e6>
            string[j] =  string[j-1];
 800d692:	f813 9c06 	ldrb.w	r9, [r3, #-6]
        for (j = size; j != 0; j--)
 800d696:	2906      	cmp	r1, #6
            string[j] =  string[j-1];
 800d698:	f803 9c05 	strb.w	r9, [r3, #-5]
        for (j = size; j != 0; j--)
 800d69c:	d00f      	beq.n	800d6be <_nx_http_server_thread_entry+0x1e6>
            string[j] =  string[j-1];
 800d69e:	f813 9c07 	ldrb.w	r9, [r3, #-7]
        for (j = size; j != 0; j--)
 800d6a2:	2907      	cmp	r1, #7
            string[j] =  string[j-1];
 800d6a4:	f803 9c06 	strb.w	r9, [r3, #-6]
        for (j = size; j != 0; j--)
 800d6a8:	d009      	beq.n	800d6be <_nx_http_server_thread_entry+0x1e6>
            string[j] =  string[j-1];
 800d6aa:	f813 9c08 	ldrb.w	r9, [r3, #-8]
        for (j = size; j != 0; j--)
 800d6ae:	2908      	cmp	r1, #8
            string[j] =  string[j-1];
 800d6b0:	f803 9c07 	strb.w	r9, [r3, #-7]
        for (j = size; j != 0; j--)
 800d6b4:	d003      	beq.n	800d6be <_nx_http_server_thread_entry+0x1e6>
            string[j] =  string[j-1];
 800d6b6:	f89d 1090 	ldrb.w	r1, [sp, #144]	; 0x90
 800d6ba:	f88d 1091 	strb.w	r1, [sp, #145]	; 0x91
        string[0] =  (CHAR) (digit + 0x30);
 800d6be:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
        if (number == 0)
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	f000 80ab 	beq.w	800d81e <_nx_http_server_thread_entry+0x346>
    while (size < 10)
 800d6c8:	f1be 0f0a 	cmp.w	lr, #10
 800d6cc:	f000 811b 	beq.w	800d906 <_nx_http_server_thread_entry+0x42e>
 800d6d0:	3301      	adds	r3, #1
        return(NX_HTTP_ERROR);
 800d6d2:	4671      	mov	r1, lr
 800d6d4:	e7b0      	b.n	800d638 <_nx_http_server_thread_entry+0x160>
            server_ptr -> nx_http_server_connection_failures++;
 800d6d6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
            nx_tcp_server_socket_unaccept(&(server_ptr -> nx_http_server_socket));
 800d6d8:	4630      	mov	r0, r6
            server_ptr -> nx_http_server_connection_failures++;
 800d6da:	3301      	adds	r3, #1
 800d6dc:	66a3      	str	r3, [r4, #104]	; 0x68
 800d6de:	e718      	b.n	800d512 <_nx_http_server_thread_entry+0x3a>
        server_ptr -> nx_http_server_allocation_errors++;
 800d6e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	6663      	str	r3, [r4, #100]	; 0x64
            server_ptr -> nx_http_server_unknown_requests++;
 800d6e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	65a3      	str	r3, [r4, #88]	; 0x58
        nx_packet_release(packet_ptr);
 800d6ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d6ee:	f7f9 f97f 	bl	80069f0 <_nx_packet_release>
 800d6f2:	e708      	b.n	800d506 <_nx_http_server_thread_entry+0x2e>
        if ((buffer_ptr[0] == 'G') && (buffer_ptr[1] == 'E') && (buffer_ptr[2] == 'T') && (buffer_ptr[3] == ' '))
 800d6f4:	785a      	ldrb	r2, [r3, #1]
 800d6f6:	2a45      	cmp	r2, #69	; 0x45
 800d6f8:	f47f af4e 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800d6fc:	789a      	ldrb	r2, [r3, #2]
 800d6fe:	2a54      	cmp	r2, #84	; 0x54
 800d700:	f47f af4a 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800d704:	78db      	ldrb	r3, [r3, #3]
 800d706:	2b20      	cmp	r3, #32
 800d708:	f47f af46 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
            server_ptr -> nx_http_server_get_requests++;
 800d70c:	6c63      	ldr	r3, [r4, #68]	; 0x44
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_GET_REQUEST;
 800d70e:	2201      	movs	r2, #1
ULONG       length = 0;
 800d710:	900d      	str	r0, [sp, #52]	; 0x34
    status =  _nx_http_server_retrieve_resource(packet_ptr, server_ptr -> nx_http_server_request_resource, NX_HTTP_MAX_RESOURCE + 1);
 800d712:	4640      	mov	r0, r8
            server_ptr -> nx_http_server_get_requests++;
 800d714:	4413      	add	r3, r2
    status =  _nx_http_server_retrieve_resource(packet_ptr, server_ptr -> nx_http_server_request_resource, NX_HTTP_MAX_RESOURCE + 1);
 800d716:	9908      	ldr	r1, [sp, #32]
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_GET_REQUEST;
 800d718:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
            server_ptr -> nx_http_server_get_requests++;
 800d71c:	6463      	str	r3, [r4, #68]	; 0x44
UINT        auth_request_present = NX_FALSE;
 800d71e:	9512      	str	r5, [sp, #72]	; 0x48
UINT        password_length = 0;
 800d720:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
UINT        temp_name_length = 0;
 800d724:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
UINT        temp_realm_length = 0;
 800d728:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
    status =  _nx_http_server_retrieve_resource(packet_ptr, server_ptr -> nx_http_server_request_resource, NX_HTTP_MAX_RESOURCE + 1);
 800d72c:	f7fd f93c 	bl	800a9a8 <_nx_http_server_retrieve_resource.constprop.6>
    if (status != NX_SUCCESS)
 800d730:	4681      	mov	r9, r0
 800d732:	2800      	cmp	r0, #0
 800d734:	f040 81c5 	bne.w	800dac2 <_nx_http_server_thread_entry+0x5ea>
    if (server_ptr -> nx_http_server_authentication_check ||
 800d738:	f8d4 746c 	ldr.w	r7, [r4, #1132]	; 0x46c
 800d73c:	f8d4 5470 	ldr.w	r5, [r4, #1136]	; 0x470
 800d740:	2f00      	cmp	r7, #0
 800d742:	f000 810c 	beq.w	800d95e <_nx_http_server_thread_entry+0x486>
        if (server_ptr -> nx_http_server_authentication_check_extended)
 800d746:	2d00      	cmp	r5, #0
 800d748:	f000 824d 	beq.w	800dbe6 <_nx_http_server_thread_entry+0x70e>
            status = (server_ptr -> nx_http_server_authentication_check_extended)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource,
 800d74c:	ab15      	add	r3, sp, #84	; 0x54
 800d74e:	aa10      	add	r2, sp, #64	; 0x40
 800d750:	a914      	add	r1, sp, #80	; 0x50
 800d752:	a80f      	add	r0, sp, #60	; 0x3c
 800d754:	af13      	add	r7, sp, #76	; 0x4c
 800d756:	9304      	str	r3, [sp, #16]
 800d758:	9203      	str	r2, [sp, #12]
 800d75a:	ab0e      	add	r3, sp, #56	; 0x38
 800d75c:	9102      	str	r1, [sp, #8]
 800d75e:	2101      	movs	r1, #1
 800d760:	9001      	str	r0, [sp, #4]
 800d762:	4620      	mov	r0, r4
 800d764:	9a08      	ldr	r2, [sp, #32]
 800d766:	9700      	str	r7, [sp, #0]
 800d768:	47a8      	blx	r5
 800d76a:	4605      	mov	r5, r0
        if (status == NX_HTTP_BASIC_AUTHENTICATE ||
 800d76c:	f1a5 03e4 	sub.w	r3, r5, #228	; 0xe4
 800d770:	2b01      	cmp	r3, #1
 800d772:	f240 81fc 	bls.w	800db6e <_nx_http_server_thread_entry+0x696>
        if ((status != NX_HTTP_DONT_AUTHENTICATE) && (status != NX_SUCCESS))
 800d776:	2de3      	cmp	r5, #227	; 0xe3
 800d778:	f000 80f4 	beq.w	800d964 <_nx_http_server_thread_entry+0x48c>
 800d77c:	2d00      	cmp	r5, #0
 800d77e:	f000 80f1 	beq.w	800d964 <_nx_http_server_thread_entry+0x48c>
            if (server_ptr -> nx_http_server_invalid_username_password_callback && auth_request_present)
 800d782:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
 800d786:	2b00      	cmp	r3, #0
 800d788:	d0b0      	beq.n	800d6ec <_nx_http_server_thread_entry+0x214>
 800d78a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d0ad      	beq.n	800d6ec <_nx_http_server_thread_entry+0x214>
                status =   nxd_tcp_socket_peer_info_get(&(server_ptr->nx_http_server_socket), &client_nxd_address , &client_port);
 800d790:	aa1c      	add	r2, sp, #112	; 0x70
 800d792:	a924      	add	r1, sp, #144	; 0x90
 800d794:	4630      	mov	r0, r6
 800d796:	f001 fb7d 	bl	800ee94 <_nxd_tcp_socket_peer_info_get>
                if (status == NX_SUCCESS)
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d1a6      	bne.n	800d6ec <_nx_http_server_thread_entry+0x214>
                    (server_ptr -> nx_http_server_invalid_username_password_callback)(server_ptr -> nx_http_server_request_resource, &client_nxd_address, request_type);
 800d79e:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	a924      	add	r1, sp, #144	; 0x90
 800d7a6:	9808      	ldr	r0, [sp, #32]
 800d7a8:	4798      	blx	r3
 800d7aa:	e79f      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
        else if ((buffer_ptr[0] == 'D') && (buffer_ptr[1] == 'E') && (buffer_ptr[2] == 'L') && (buffer_ptr[3] == 'E') && 
 800d7ac:	2a44      	cmp	r2, #68	; 0x44
 800d7ae:	f040 827b 	bne.w	800dca8 <_nx_http_server_thread_entry+0x7d0>
 800d7b2:	785a      	ldrb	r2, [r3, #1]
 800d7b4:	2a45      	cmp	r2, #69	; 0x45
 800d7b6:	f47f aeef 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800d7ba:	789a      	ldrb	r2, [r3, #2]
 800d7bc:	2a4c      	cmp	r2, #76	; 0x4c
 800d7be:	f47f aeeb 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800d7c2:	78da      	ldrb	r2, [r3, #3]
 800d7c4:	2a45      	cmp	r2, #69	; 0x45
 800d7c6:	f47f aee7 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800d7ca:	791a      	ldrb	r2, [r3, #4]
 800d7cc:	2a54      	cmp	r2, #84	; 0x54
 800d7ce:	f47f aee3 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
                 (buffer_ptr[4] == 'T') && (buffer_ptr[5] == 'E') && (buffer_ptr[6] == ' '))
 800d7d2:	795a      	ldrb	r2, [r3, #5]
 800d7d4:	2a45      	cmp	r2, #69	; 0x45
 800d7d6:	f47f aedf 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800d7da:	799b      	ldrb	r3, [r3, #6]
 800d7dc:	2b20      	cmp	r3, #32
 800d7de:	f47f aedb 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
            server_ptr -> nx_http_server_delete_requests++;
 800d7e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_DELETE_REQUEST;
 800d7e4:	2205      	movs	r2, #5
            _nx_http_server_delete_process(server_ptr, packet_ptr);
 800d7e6:	4641      	mov	r1, r8
 800d7e8:	4620      	mov	r0, r4
            server_ptr -> nx_http_server_delete_requests++;
 800d7ea:	3301      	adds	r3, #1
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_DELETE_REQUEST;
 800d7ec:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
            server_ptr -> nx_http_server_delete_requests++;
 800d7f0:	6523      	str	r3, [r4, #80]	; 0x50
            _nx_http_server_delete_process(server_ptr, packet_ptr);
 800d7f2:	f7fe ff83 	bl	800c6fc <_nx_http_server_delete_process>
 800d7f6:	e779      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
 800d7f8:	0801f940 	.word	0x0801f940
 800d7fc:	08025584 	.word	0x08025584
 800d800:	0802525c 	.word	0x0802525c
 800d804:	080257e8 	.word	0x080257e8
 800d808:	08025610 	.word	0x08025610
 800d80c:	cccccccd 	.word	0xcccccccd
        string[0] =  (CHAR) (digit + 0x30);
 800d810:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
        if (number == 0)
 800d814:	2800      	cmp	r0, #0
 800d816:	f47f af5b 	bne.w	800d6d0 <_nx_http_server_thread_entry+0x1f8>
 800d81a:	f04f 0e01 	mov.w	lr, #1
    string[size] =  (CHAR) NX_NULL;
 800d81e:	ab2c      	add	r3, sp, #176	; 0xb0
 800d820:	46f0      	mov	r8, lr
 800d822:	4473      	add	r3, lr
 800d824:	f803 bc20 	strb.w	fp, [r3, #-32]
            status += nx_packet_data_append(packet_ptr, "Content-Length: ", 16,
 800d828:	f04f 39ff 	mov.w	r9, #4294967295
 800d82c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d82e:	2210      	movs	r2, #16
 800d830:	49b7      	ldr	r1, [pc, #732]	; (800db10 <_nx_http_server_thread_entry+0x638>)
 800d832:	f8cd 9000 	str.w	r9, [sp]
 800d836:	4638      	mov	r0, r7
 800d838:	f7f8 ff86 	bl	8006748 <_nx_packet_data_append>
 800d83c:	9a07      	ldr	r2, [sp, #28]
            status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800d83e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d840:	a924      	add	r1, sp, #144	; 0x90
            status += nx_packet_data_append(packet_ptr, "Content-Length: ", 16,
 800d842:	4402      	add	r2, r0
            status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800d844:	f8cd 9000 	str.w	r9, [sp]
 800d848:	4638      	mov	r0, r7
            status += nx_packet_data_append(packet_ptr, "Content-Length: ", 16,
 800d84a:	4615      	mov	r5, r2
            status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800d84c:	4642      	mov	r2, r8
 800d84e:	f7f8 ff7b 	bl	8006748 <_nx_packet_data_append>
            status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d852:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            status += nx_packet_data_append(packet_ptr, temp_string, temp,
 800d854:	4405      	add	r5, r0
            status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d856:	f8cd 9000 	str.w	r9, [sp]
 800d85a:	2202      	movs	r2, #2
 800d85c:	a919      	add	r1, sp, #100	; 0x64
 800d85e:	4638      	mov	r0, r7
 800d860:	f7f8 ff72 	bl	8006748 <_nx_packet_data_append>
    if(server_ptr -> nx_http_server_gmt_get)
 800d864:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
            status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d868:	4405      	add	r5, r0
    if(server_ptr -> nx_http_server_gmt_get)
 800d86a:	b313      	cbz	r3, 800d8b2 <_nx_http_server_thread_entry+0x3da>
        server_ptr -> nx_http_server_gmt_get(&date);
 800d86c:	a81c      	add	r0, sp, #112	; 0x70
 800d86e:	4798      	blx	r3
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800d870:	a924      	add	r1, sp, #144	; 0x90
 800d872:	a81c      	add	r0, sp, #112	; 0x70
 800d874:	f7fd fefa 	bl	800b66c <_nx_http_server_date_to_string>
        status += nx_packet_data_append(packet_ptr, "Date: ", 6,
 800d878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        temp = _nx_http_server_date_to_string(&date, temp_string);
 800d87a:	9007      	str	r0, [sp, #28]
        status += nx_packet_data_append(packet_ptr, "Date: ", 6,
 800d87c:	2206      	movs	r2, #6
 800d87e:	49a5      	ldr	r1, [pc, #660]	; (800db14 <_nx_http_server_thread_entry+0x63c>)
 800d880:	4638      	mov	r0, r7
 800d882:	f8cd 9000 	str.w	r9, [sp]
 800d886:	f7f8 ff5f 	bl	8006748 <_nx_packet_data_append>
 800d88a:	4680      	mov	r8, r0
        status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d88c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d88e:	a924      	add	r1, sp, #144	; 0x90
 800d890:	9a07      	ldr	r2, [sp, #28]
 800d892:	4638      	mov	r0, r7
 800d894:	f8cd 9000 	str.w	r9, [sp]
 800d898:	f7f8 ff56 	bl	8006748 <_nx_packet_data_append>
 800d89c:	4440      	add	r0, r8
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d89e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d8a0:	2202      	movs	r2, #2
        status += nx_packet_data_append(packet_ptr, temp_string, temp, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d8a2:	4405      	add	r5, r0
        status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d8a4:	f8cd 9000 	str.w	r9, [sp]
 800d8a8:	a919      	add	r1, sp, #100	; 0x64
 800d8aa:	4638      	mov	r0, r7
 800d8ac:	f7f8 ff4c 	bl	8006748 <_nx_packet_data_append>
 800d8b0:	4405      	add	r5, r0
    status += nx_packet_data_append(packet_ptr, crlf, 2, server_ptr -> nx_http_server_packet_pool_ptr, NX_WAIT_FOREVER);
 800d8b2:	f04f 38ff 	mov.w	r8, #4294967295
 800d8b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	a919      	add	r1, sp, #100	; 0x64
 800d8bc:	f8cd 8000 	str.w	r8, [sp]
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	f7f8 ff41 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800d8c6:	42c5      	cmn	r5, r0
 800d8c8:	d115      	bne.n	800d8f6 <_nx_http_server_thread_entry+0x41e>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800d8ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d8cc:	2221      	movs	r2, #33	; 0x21
 800d8ce:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d8d0:	f8cd 8000 	str.w	r8, [sp]
 800d8d4:	4990      	ldr	r1, [pc, #576]	; (800db18 <_nx_http_server_thread_entry+0x640>)
 800d8d6:	f7f8 ff37 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800d8da:	b940      	cbnz	r0, 800d8ee <_nx_http_server_thread_entry+0x416>
    status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800d8dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f7fa fbae 	bl	8008044 <_nx_tcp_socket_send>
    if (status != NX_SUCCESS)
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	f43f aefc 	beq.w	800d6e6 <_nx_http_server_thread_entry+0x20e>
        nx_packet_release(packet_ptr);
 800d8ee:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d8f0:	f7f9 f87e 	bl	80069f0 <_nx_packet_release>
 800d8f4:	e6f7      	b.n	800d6e6 <_nx_http_server_thread_entry+0x20e>
        nx_packet_release(packet_ptr);
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	f7f9 f87a 	bl	80069f0 <_nx_packet_release>
 800d8fc:	e6f3      	b.n	800d6e6 <_nx_http_server_thread_entry+0x20e>
                nx_packet_release(packet_ptr);
 800d8fe:	4640      	mov	r0, r8
 800d900:	f7f9 f876 	bl	80069f0 <_nx_packet_release>
 800d904:	e5fc      	b.n	800d500 <_nx_http_server_thread_entry+0x28>
        string[0] = '0';
 800d906:	2330      	movs	r3, #48	; 0x30
    string[size] =  (CHAR) NX_NULL;
 800d908:	f88d b09a 	strb.w	fp, [sp, #154]	; 0x9a
        string[0] = '0';
 800d90c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800d910:	e78a      	b.n	800d828 <_nx_http_server_thread_entry+0x350>
        else if ((buffer_ptr[0] == 'P') && (buffer_ptr[1] == 'U') && (buffer_ptr[2] == 'T') && (buffer_ptr[3] == ' '))
 800d912:	789a      	ldrb	r2, [r3, #2]
 800d914:	2a54      	cmp	r2, #84	; 0x54
 800d916:	f47f ae3f 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800d91a:	78db      	ldrb	r3, [r3, #3]
 800d91c:	2b20      	cmp	r3, #32
 800d91e:	f47f ae3b 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
            server_ptr -> nx_http_server_put_requests++;
 800d922:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_PUT_REQUEST;
 800d924:	2204      	movs	r2, #4
            _nx_http_server_put_process(server_ptr, packet_ptr);
 800d926:	4641      	mov	r1, r8
 800d928:	4620      	mov	r0, r4
            server_ptr -> nx_http_server_put_requests++;
 800d92a:	3301      	adds	r3, #1
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_PUT_REQUEST;
 800d92c:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
            server_ptr -> nx_http_server_put_requests++;
 800d930:	64e3      	str	r3, [r4, #76]	; 0x4c
            _nx_http_server_put_process(server_ptr, packet_ptr);
 800d932:	f7fe fc21 	bl	800c178 <_nx_http_server_put_process>
 800d936:	e6d9      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
        else if ((buffer_ptr[0] == 'P') && (buffer_ptr[1] == 'O') && (buffer_ptr[2] == 'S') && 
 800d938:	78da      	ldrb	r2, [r3, #3]
 800d93a:	2a54      	cmp	r2, #84	; 0x54
 800d93c:	f47f ae2c 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
                 (buffer_ptr[3] == 'T') && (buffer_ptr[4] == ' '))
 800d940:	791b      	ldrb	r3, [r3, #4]
 800d942:	2b20      	cmp	r3, #32
 800d944:	f47f ae28 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
            server_ptr -> nx_http_server_post_requests++;
 800d948:	6d63      	ldr	r3, [r4, #84]	; 0x54
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_POST_REQUEST;
 800d94a:	2102      	movs	r1, #2
            _nx_http_server_get_process(server_ptr, NX_HTTP_SERVER_POST_REQUEST, packet_ptr);
 800d94c:	4642      	mov	r2, r8
 800d94e:	4620      	mov	r0, r4
            server_ptr -> nx_http_server_post_requests++;
 800d950:	3301      	adds	r3, #1
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_POST_REQUEST;
 800d952:	f8c4 1460 	str.w	r1, [r4, #1120]	; 0x460
            server_ptr -> nx_http_server_post_requests++;
 800d956:	6563      	str	r3, [r4, #84]	; 0x54
            _nx_http_server_get_process(server_ptr, NX_HTTP_SERVER_POST_REQUEST, packet_ptr);
 800d958:	f7ff f88a 	bl	800ca70 <_nx_http_server_get_process>
 800d95c:	e6c6      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
    if (server_ptr -> nx_http_server_authentication_check ||
 800d95e:	2d00      	cmp	r5, #0
 800d960:	f47f aef4 	bne.w	800d74c <_nx_http_server_thread_entry+0x274>
    if((server_ptr -> nx_http_server_cache_info_get) && 
 800d964:	f8d4 5480 	ldr.w	r5, [r4, #1152]	; 0x480
 800d968:	b125      	cbz	r5, 800d974 <_nx_http_server_thread_entry+0x49c>
 800d96a:	f8d4 3460 	ldr.w	r3, [r4, #1120]	; 0x460
 800d96e:	2b01      	cmp	r3, #1
 800d970:	f000 84ec 	beq.w	800e34c <_nx_http_server_thread_entry+0xe74>
    nx_tcp_socket_transmit_configure(&(server_ptr -> nx_http_server_socket), 
 800d974:	2701      	movs	r7, #1
 800d976:	230a      	movs	r3, #10
 800d978:	22c8      	movs	r2, #200	; 0xc8
 800d97a:	2114      	movs	r1, #20
 800d97c:	9700      	str	r7, [sp, #0]
 800d97e:	4630      	mov	r0, r6
 800d980:	f006 fe4c 	bl	801461c <_nx_tcp_socket_transmit_configure>
    if (server_ptr -> nx_http_server_request_notify)
 800d984:	f8d4 5474 	ldr.w	r5, [r4, #1140]	; 0x474
 800d988:	b13d      	cbz	r5, 800d99a <_nx_http_server_thread_entry+0x4c2>
        status =  (server_ptr -> nx_http_server_request_notify)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource, packet_ptr);
 800d98a:	4643      	mov	r3, r8
 800d98c:	4639      	mov	r1, r7
 800d98e:	9a08      	ldr	r2, [sp, #32]
 800d990:	4620      	mov	r0, r4
 800d992:	47a8      	blx	r5
        if (status != NX_SUCCESS)
 800d994:	2800      	cmp	r0, #0
 800d996:	f040 80c7 	bne.w	800db28 <_nx_http_server_thread_entry+0x650>
    if (_nx_utility_string_length_check(server_ptr -> nx_http_server_request_resource,  &resource_length, 
 800d99a:	2228      	movs	r2, #40	; 0x28
 800d99c:	a91a      	add	r1, sp, #104	; 0x68
 800d99e:	9808      	ldr	r0, [sp, #32]
 800d9a0:	f006 ff2e 	bl	8014800 <_nx_utility_string_length_check>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	f47f aea0 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
    status =  fx_file_open(server_ptr -> nx_http_server_media_ptr, &(server_ptr -> nx_http_server_file), server_ptr -> nx_http_server_request_resource, FX_OPEN_FOR_READ);
 800d9ac:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800d9b0:	9f08      	ldr	r7, [sp, #32]
 800d9b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d9b4:	463a      	mov	r2, r7
 800d9b6:	9100      	str	r1, [sp, #0]
 800d9b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9ba:	f008 fa3b 	bl	8015e34 <_fxe_file_open>
    if (status != NX_SUCCESS)
 800d9be:	4605      	mov	r5, r0
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	f040 8165 	bne.w	800dc90 <_nx_http_server_thread_entry+0x7b8>
    fx_directory_information_get(server_ptr -> nx_http_server_media_ptr, server_ptr -> nx_http_server_request_resource, FX_NULL, 
 800d9c6:	9f08      	ldr	r7, [sp, #32]
 800d9c8:	462a      	mov	r2, r5
 800d9ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d9cc:	ab0d      	add	r3, sp, #52	; 0x34
 800d9ce:	9505      	str	r5, [sp, #20]
 800d9d0:	4639      	mov	r1, r7
 800d9d2:	9500      	str	r5, [sp, #0]
    length =  0;
 800d9d4:	950d      	str	r5, [sp, #52]	; 0x34
    fx_directory_information_get(server_ptr -> nx_http_server_media_ptr, server_ptr -> nx_http_server_request_resource, FX_NULL, 
 800d9d6:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d9da:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800d9de:	f008 f99b 	bl	8015d18 <_fxe_directory_information_get>
    temp =  (ULONG) _nx_http_server_type_get_extended(server_ptr, server_ptr -> nx_http_server_request_resource, resource_length, temp_string, sizeof(temp_string));
 800d9e2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    if (_nx_utility_string_length_check(name, &temp_name_length, name_length))
 800d9e4:	a924      	add	r1, sp, #144	; 0x90
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	462a      	mov	r2, r5
 800d9ea:	f006 ff09 	bl	8014800 <_nx_utility_string_length_check>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f040 814c 	bne.w	800dc8c <_nx_http_server_thread_entry+0x7b4>
    if (name_length != temp_name_length)
 800d9f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d9f6:	429d      	cmp	r5, r3
 800d9f8:	f040 8148 	bne.w	800dc8c <_nx_http_server_thread_entry+0x7b4>
 800d9fc:	201e      	movs	r0, #30
 800d9fe:	462a      	mov	r2, r5
 800da00:	ab1c      	add	r3, sp, #112	; 0x70
 800da02:	4639      	mov	r1, r7
 800da04:	9000      	str	r0, [sp, #0]
 800da06:	4620      	mov	r0, r4
 800da08:	f7fd f87a 	bl	800ab00 <_nx_http_server_type_get_extended.part.1>
 800da0c:	4602      	mov	r2, r0
    temp_string[temp] = 0;
 800da0e:	ab2c      	add	r3, sp, #176	; 0xb0
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800da10:	980d      	ldr	r0, [sp, #52]	; 0x34
 800da12:	af1c      	add	r7, sp, #112	; 0x70
 800da14:	9202      	str	r2, [sp, #8]
    temp_string[temp] = 0;
 800da16:	189d      	adds	r5, r3, r2
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800da18:	f8cd b010 	str.w	fp, [sp, #16]
 800da1c:	f8cd b00c 	str.w	fp, [sp, #12]
 800da20:	2306      	movs	r3, #6
    temp =  (ULONG) _nx_http_server_type_get_extended(server_ptr, server_ptr -> nx_http_server_request_resource, resource_length, temp_string, sizeof(temp_string));
 800da22:	9211      	str	r2, [sp, #68]	; 0x44
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800da24:	a919      	add	r1, sp, #100	; 0x64
 800da26:	4a3d      	ldr	r2, [pc, #244]	; (800db1c <_nx_http_server_thread_entry+0x644>)
 800da28:	e9cd 0700 	strd	r0, r7, [sp]
 800da2c:	4620      	mov	r0, r4
    temp_string[temp] = 0;
 800da2e:	f805 bc40 	strb.w	fp, [r5, #-64]
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800da32:	f7fd fef9 	bl	800b828 <_nx_http_server_generate_response_header>
    if(status)
 800da36:	2800      	cmp	r0, #0
 800da38:	f040 8102 	bne.w	800dc40 <_nx_http_server_thread_entry+0x768>
    if ((!length) || (request_type == NX_HTTP_SERVER_HEAD_REQUEST))
 800da3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800da3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da40:	2d00      	cmp	r5, #0
 800da42:	f000 80db 	beq.w	800dbfc <_nx_http_server_thread_entry+0x724>
    temp = new_packet_ptr -> nx_packet_length;
 800da46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da48:	9211      	str	r2, [sp, #68]	; 0x44
        if (!temp)
 800da4a:	2a00      	cmp	r2, #0
 800da4c:	d02d      	beq.n	800daaa <_nx_http_server_thread_entry+0x5d2>
        temp =  ((ULONG) (new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_append_ptr)) - NX_PHYSICAL_TRAILER;
 800da4e:	68d9      	ldr	r1, [r3, #12]
 800da50:	695a      	ldr	r2, [r3, #20]
        if (temp > server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_mss)
 800da52:	f8d4 3284 	ldr.w	r3, [r4, #644]	; 0x284
        temp =  ((ULONG) (new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_append_ptr)) - NX_PHYSICAL_TRAILER;
 800da56:	1a52      	subs	r2, r2, r1
 800da58:	3a04      	subs	r2, #4
        if (temp > server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_mss)
 800da5a:	429a      	cmp	r2, r3
        temp =  ((ULONG) (new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_append_ptr)) - NX_PHYSICAL_TRAILER;
 800da5c:	9211      	str	r2, [sp, #68]	; 0x44
        if (temp > server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_mss)
 800da5e:	d901      	bls.n	800da64 <_nx_http_server_thread_entry+0x58c>
            temp =  server_ptr -> nx_http_server_socket.nx_tcp_socket_connect_mss;
 800da60:	461a      	mov	r2, r3
 800da62:	9311      	str	r3, [sp, #68]	; 0x44
        status =  fx_file_read(&(server_ptr -> nx_http_server_file), new_packet_ptr -> nx_packet_append_ptr, 
 800da64:	ab11      	add	r3, sp, #68	; 0x44
 800da66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da68:	f008 fa38 	bl	8015edc <_fxe_file_read>
        if (status != NX_SUCCESS)
 800da6c:	2800      	cmp	r0, #0
 800da6e:	f040 80e3 	bne.w	800dc38 <_nx_http_server_thread_entry+0x760>
        new_packet_ptr -> nx_packet_length =  new_packet_ptr -> nx_packet_length + temp;
 800da72:	9b19      	ldr	r3, [sp, #100]	; 0x64
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800da74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
        new_packet_ptr -> nx_packet_length =  new_packet_ptr -> nx_packet_length + temp;
 800da78:	9f11      	ldr	r7, [sp, #68]	; 0x44
        new_packet_ptr -> nx_packet_append_ptr =  new_packet_ptr -> nx_packet_append_ptr + temp;
 800da7a:	68d9      	ldr	r1, [r3, #12]
        new_packet_ptr -> nx_packet_length =  new_packet_ptr -> nx_packet_length + temp;
 800da7c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800da7e:	4438      	add	r0, r7
        new_packet_ptr -> nx_packet_append_ptr =  new_packet_ptr -> nx_packet_append_ptr + temp;
 800da80:	440f      	add	r7, r1
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800da82:	4619      	mov	r1, r3
        new_packet_ptr -> nx_packet_length =  new_packet_ptr -> nx_packet_length + temp;
 800da84:	6258      	str	r0, [r3, #36]	; 0x24
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800da86:	4630      	mov	r0, r6
        new_packet_ptr -> nx_packet_append_ptr =  new_packet_ptr -> nx_packet_append_ptr + temp;
 800da88:	60df      	str	r7, [r3, #12]
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800da8a:	f7fa fadb 	bl	8008044 <_nx_tcp_socket_send>
        if (status != NX_SUCCESS)
 800da8e:	2800      	cmp	r0, #0
 800da90:	f040 80d2 	bne.w	800dc38 <_nx_http_server_thread_entry+0x760>
        server_ptr -> nx_http_server_total_bytes_sent =  server_ptr -> nx_http_server_total_bytes_sent + temp;
 800da94:	9911      	ldr	r1, [sp, #68]	; 0x44
 800da96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        length =  length - temp;
 800da98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        server_ptr -> nx_http_server_total_bytes_sent =  server_ptr -> nx_http_server_total_bytes_sent + temp;
 800da9a:	440a      	add	r2, r1
        temp = 0;
 800da9c:	9011      	str	r0, [sp, #68]	; 0x44
        length =  length - temp;
 800da9e:	1a5b      	subs	r3, r3, r1
        server_ptr -> nx_http_server_total_bytes_sent =  server_ptr -> nx_http_server_total_bytes_sent + temp;
 800daa0:	65e2      	str	r2, [r4, #92]	; 0x5c
        length =  length - temp;
 800daa2:	930d      	str	r3, [sp, #52]	; 0x34
    while ((length) && (request_type != NX_HTTP_SERVER_HEAD_REQUEST))
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 80bb 	beq.w	800dc20 <_nx_http_server_thread_entry+0x748>
            status =  nx_packet_allocate(server_ptr -> nx_http_server_packet_pool_ptr, &new_packet_ptr, NX_TCP_PACKET, NX_WAIT_FOREVER);
 800daaa:	f04f 33ff 	mov.w	r3, #4294967295
 800daae:	224c      	movs	r2, #76	; 0x4c
 800dab0:	a919      	add	r1, sp, #100	; 0x64
 800dab2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800dab4:	f7f8 fdea 	bl	800668c <_nx_packet_allocate>
            if (status != NX_SUCCESS)
 800dab8:	2800      	cmp	r0, #0
 800daba:	f040 80ae 	bne.w	800dc1a <_nx_http_server_thread_entry+0x742>
 800dabe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dac0:	e7c5      	b.n	800da4e <_nx_http_server_thread_entry+0x576>
    status = _nx_http_server_generate_response_header(server_ptr, &packet_ptr, status_code, status_code_length, length, NX_NULL, 0, NX_NULL, 0);
 800dac2:	2711      	movs	r7, #17
 800dac4:	230f      	movs	r3, #15
 800dac6:	9502      	str	r5, [sp, #8]
 800dac8:	a924      	add	r1, sp, #144	; 0x90
 800daca:	9501      	str	r5, [sp, #4]
 800dacc:	4620      	mov	r0, r4
 800dace:	9700      	str	r7, [sp, #0]
 800dad0:	4a13      	ldr	r2, [pc, #76]	; (800db20 <_nx_http_server_thread_entry+0x648>)
 800dad2:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800dad6:	f7fd fea7 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status != NX_SUCCESS)
 800dada:	2800      	cmp	r0, #0
 800dadc:	f47f ae06 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800dae0:	f04f 31ff 	mov.w	r1, #4294967295
 800dae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dae6:	9824      	ldr	r0, [sp, #144]	; 0x90
 800dae8:	463a      	mov	r2, r7
 800daea:	9100      	str	r1, [sp, #0]
 800daec:	490d      	ldr	r1, [pc, #52]	; (800db24 <_nx_http_server_thread_entry+0x64c>)
 800daee:	f7f8 fe2b 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800daf2:	b940      	cbnz	r0, 800db06 <_nx_http_server_thread_entry+0x62e>
    status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800daf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800daf8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800dafa:	4630      	mov	r0, r6
 800dafc:	f7fa faa2 	bl	8008044 <_nx_tcp_socket_send>
    if (status != NX_SUCCESS)
 800db00:	2800      	cmp	r0, #0
 800db02:	f43f adf3 	beq.w	800d6ec <_nx_http_server_thread_entry+0x214>
        nx_packet_release(packet_ptr);
 800db06:	9824      	ldr	r0, [sp, #144]	; 0x90
 800db08:	f7f8 ff72 	bl	80069f0 <_nx_packet_release>
 800db0c:	e5ee      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
 800db0e:	bf00      	nop
 800db10:	08025624 	.word	0x08025624
 800db14:	08025638 	.word	0x08025638
 800db18:	080257fc 	.word	0x080257fc
 800db1c:	080255e4 	.word	0x080255e4
 800db20:	080256d0 	.word	0x080256d0
 800db24:	080256e0 	.word	0x080256e0
            if (status == NX_HTTP_CALLBACK_COMPLETED)
 800db28:	28e8      	cmp	r0, #232	; 0xe8
 800db2a:	f43f addf 	beq.w	800d6ec <_nx_http_server_thread_entry+0x214>
    status = _nx_http_server_generate_response_header(server_ptr, &packet_ptr, status_code, status_code_length, length, NX_NULL, 0, NX_NULL, 0);
 800db2e:	2519      	movs	r5, #25
 800db30:	a924      	add	r1, sp, #144	; 0x90
 800db32:	f8cd b008 	str.w	fp, [sp, #8]
 800db36:	4620      	mov	r0, r4
 800db38:	462b      	mov	r3, r5
 800db3a:	f8cd b004 	str.w	fp, [sp, #4]
 800db3e:	9500      	str	r5, [sp, #0]
 800db40:	4a9d      	ldr	r2, [pc, #628]	; (800ddb8 <_nx_http_server_thread_entry+0x8e0>)
 800db42:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800db46:	f7fd fe6f 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status != NX_SUCCESS)
 800db4a:	2800      	cmp	r0, #0
 800db4c:	f47f adce 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800db50:	f04f 31ff 	mov.w	r1, #4294967295
 800db54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db56:	9824      	ldr	r0, [sp, #144]	; 0x90
 800db58:	462a      	mov	r2, r5
 800db5a:	9100      	str	r1, [sp, #0]
 800db5c:	4997      	ldr	r1, [pc, #604]	; (800ddbc <_nx_http_server_thread_entry+0x8e4>)
 800db5e:	f7f8 fdf3 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800db62:	2800      	cmp	r0, #0
 800db64:	d0c6      	beq.n	800daf4 <_nx_http_server_thread_entry+0x61c>
        nx_packet_release(packet_ptr);
 800db66:	9824      	ldr	r0, [sp, #144]	; 0x90
 800db68:	f7f8 ff42 	bl	80069f0 <_nx_packet_release>
 800db6c:	e5be      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800db6e:	2214      	movs	r2, #20
 800db70:	a916      	add	r1, sp, #88	; 0x58
 800db72:	980e      	ldr	r0, [sp, #56]	; 0x38
 800db74:	f006 fe44 	bl	8014800 <_nx_utility_string_length_check>
 800db78:	2800      	cmp	r0, #0
 800db7a:	f47f adb7 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800db7e:	2214      	movs	r2, #20
 800db80:	a917      	add	r1, sp, #92	; 0x5c
 800db82:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800db84:	f006 fe3c 	bl	8014800 <_nx_utility_string_length_check>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800db88:	2800      	cmp	r0, #0
 800db8a:	f47f adaf 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                _nx_utility_string_length_check(realm_ptr, &temp_realm_length, NX_MAX_STRING_LENGTH))
 800db8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db92:	a918      	add	r1, sp, #96	; 0x60
 800db94:	9810      	ldr	r0, [sp, #64]	; 0x40
 800db96:	f006 fe33 	bl	8014800 <_nx_utility_string_length_check>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800db9a:	2800      	cmp	r0, #0
 800db9c:	f47f ada6 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
            if (server_ptr -> nx_http_server_authentication_check_extended &&
 800dba0:	f8d4 3470 	ldr.w	r3, [r4, #1136]	; 0x470
 800dba4:	b173      	cbz	r3, 800dbc4 <_nx_http_server_thread_entry+0x6ec>
 800dba6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dba8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	f47f ad9e 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                ((realm_length != temp_realm_length) ||
 800dbb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dbb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	f47f ad99 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                 (name_length != temp_name_length) ||
 800dbba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	f47f ad94 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
        if (status == NX_HTTP_BASIC_AUTHENTICATE)
 800dbc4:	2de4      	cmp	r5, #228	; 0xe4
 800dbc6:	f47f addc 	bne.w	800d782 <_nx_http_server_thread_entry+0x2aa>
            status =  _nx_http_server_basic_authenticate(server_ptr, packet_ptr, name_ptr, password_ptr, realm_ptr, temp_realm_length, &auth_request_present);
 800dbca:	ad12      	add	r5, sp, #72	; 0x48
 800dbcc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800dbce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbd0:	4641      	mov	r1, r8
 800dbd2:	9502      	str	r5, [sp, #8]
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800dbd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbda:	e9cd 7500 	strd	r7, r5, [sp]
 800dbde:	f7fd fc59 	bl	800b494 <_nx_http_server_basic_authenticate>
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	e5c7      	b.n	800d776 <_nx_http_server_thread_entry+0x29e>
            status = (server_ptr -> nx_http_server_authentication_check)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource,
 800dbe6:	ab10      	add	r3, sp, #64	; 0x40
 800dbe8:	aa0f      	add	r2, sp, #60	; 0x3c
 800dbea:	2101      	movs	r1, #1
 800dbec:	4620      	mov	r0, r4
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	ab0e      	add	r3, sp, #56	; 0x38
 800dbf2:	9200      	str	r2, [sp, #0]
 800dbf4:	9a08      	ldr	r2, [sp, #32]
 800dbf6:	47b8      	blx	r7
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	e5b7      	b.n	800d76c <_nx_http_server_thread_entry+0x294>
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc02:	4630      	mov	r0, r6
 800dc04:	f7fa fa1e 	bl	8008044 <_nx_tcp_socket_send>
        if (status != NX_SUCCESS)
 800dc08:	b970      	cbnz	r0, 800dc28 <_nx_http_server_thread_entry+0x750>
    temp = new_packet_ptr -> nx_packet_length;
 800dc0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dc0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc10:	9211      	str	r2, [sp, #68]	; 0x44
    while ((length) && (request_type != NX_HTTP_SERVER_HEAD_REQUEST))
 800dc12:	2900      	cmp	r1, #0
 800dc14:	f47f af19 	bne.w	800da4a <_nx_http_server_thread_entry+0x572>
 800dc18:	e002      	b.n	800dc20 <_nx_http_server_thread_entry+0x748>
                server_ptr -> nx_http_server_allocation_errors++;
 800dc1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	6663      	str	r3, [r4, #100]	; 0x64
    fx_file_close(&(server_ptr -> nx_http_server_file));
 800dc20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc22:	f008 f8b9 	bl	8015d98 <_fxe_file_close>
 800dc26:	e561      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
            nx_packet_release(new_packet_ptr);
 800dc28:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dc2a:	f7f8 fee1 	bl	80069f0 <_nx_packet_release>
    temp = new_packet_ptr -> nx_packet_length;
 800dc2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
            length = 0;
 800dc30:	950d      	str	r5, [sp, #52]	; 0x34
    temp = new_packet_ptr -> nx_packet_length;
 800dc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc34:	9311      	str	r3, [sp, #68]	; 0x44
 800dc36:	e7f3      	b.n	800dc20 <_nx_http_server_thread_entry+0x748>
            nx_packet_release(new_packet_ptr);
 800dc38:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dc3a:	f7f8 fed9 	bl	80069f0 <_nx_packet_release>
 800dc3e:	e7ef      	b.n	800dc20 <_nx_http_server_thread_entry+0x748>
    status = _nx_http_server_generate_response_header(server_ptr, &packet_ptr, status_code, status_code_length, length, NX_NULL, 0, NX_NULL, 0);
 800dc40:	2519      	movs	r5, #25
 800dc42:	a924      	add	r1, sp, #144	; 0x90
 800dc44:	f8cd b008 	str.w	fp, [sp, #8]
 800dc48:	4620      	mov	r0, r4
 800dc4a:	462b      	mov	r3, r5
 800dc4c:	f8cd b004 	str.w	fp, [sp, #4]
 800dc50:	9500      	str	r5, [sp, #0]
 800dc52:	4a59      	ldr	r2, [pc, #356]	; (800ddb8 <_nx_http_server_thread_entry+0x8e0>)
 800dc54:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800dc58:	f7fd fde6 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status != NX_SUCCESS)
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d1df      	bne.n	800dc20 <_nx_http_server_thread_entry+0x748>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800dc60:	f04f 31ff 	mov.w	r1, #4294967295
 800dc64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc66:	9824      	ldr	r0, [sp, #144]	; 0x90
 800dc68:	462a      	mov	r2, r5
 800dc6a:	9100      	str	r1, [sp, #0]
 800dc6c:	4953      	ldr	r1, [pc, #332]	; (800ddbc <_nx_http_server_thread_entry+0x8e4>)
 800dc6e:	f7f8 fd6b 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800dc72:	b938      	cbnz	r0, 800dc84 <_nx_http_server_thread_entry+0x7ac>
    status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800dc74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc78:	9924      	ldr	r1, [sp, #144]	; 0x90
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f7fa f9e2 	bl	8008044 <_nx_tcp_socket_send>
    if (status != NX_SUCCESS)
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d0cd      	beq.n	800dc20 <_nx_http_server_thread_entry+0x748>
        nx_packet_release(packet_ptr);
 800dc84:	9824      	ldr	r0, [sp, #144]	; 0x90
 800dc86:	f7f8 feb3 	bl	80069f0 <_nx_packet_release>
 800dc8a:	e7c9      	b.n	800dc20 <_nx_http_server_thread_entry+0x748>
        return(NX_HTTP_ERROR);
 800dc8c:	22e0      	movs	r2, #224	; 0xe0
 800dc8e:	e6be      	b.n	800da0e <_nx_http_server_thread_entry+0x536>
        _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_NOT_FOUND, sizeof(NX_HTTP_STATUS_NOT_FOUND) - 1, 
 800dc90:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dc92:	2326      	movs	r3, #38	; 0x26
 800dc94:	9701      	str	r7, [sp, #4]
 800dc96:	220d      	movs	r2, #13
 800dc98:	9102      	str	r1, [sp, #8]
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	4948      	ldr	r1, [pc, #288]	; (800ddc0 <_nx_http_server_thread_entry+0x8e8>)
 800dca0:	4b48      	ldr	r3, [pc, #288]	; (800ddc4 <_nx_http_server_thread_entry+0x8ec>)
 800dca2:	f7fe f80f 	bl	800bcc4 <_nx_http_server_response_send>
 800dca6:	e521      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
        else if ((buffer_ptr[0] == 'H') && (buffer_ptr[1] == 'E') && (buffer_ptr[2] == 'A') && 
 800dca8:	2a48      	cmp	r2, #72	; 0x48
 800dcaa:	f47f ac75 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800dcae:	785a      	ldrb	r2, [r3, #1]
 800dcb0:	2a45      	cmp	r2, #69	; 0x45
 800dcb2:	f47f ac71 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800dcb6:	789a      	ldrb	r2, [r3, #2]
 800dcb8:	2a41      	cmp	r2, #65	; 0x41
 800dcba:	f47f ac6d 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
 800dcbe:	78da      	ldrb	r2, [r3, #3]
 800dcc0:	2a44      	cmp	r2, #68	; 0x44
 800dcc2:	f47f ac69 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
                 (buffer_ptr[3] == 'D') && (buffer_ptr[4] == ' '))
 800dcc6:	791b      	ldrb	r3, [r3, #4]
 800dcc8:	2b20      	cmp	r3, #32
 800dcca:	f47f ac65 	bne.w	800d598 <_nx_http_server_thread_entry+0xc0>
            server_ptr -> nx_http_server_head_requests++;
 800dcce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_HEAD_REQUEST;
 800dcd0:	2203      	movs	r2, #3
    status =  _nx_http_server_retrieve_resource(packet_ptr, server_ptr -> nx_http_server_request_resource, NX_HTTP_MAX_RESOURCE + 1);
 800dcd2:	9908      	ldr	r1, [sp, #32]
 800dcd4:	4640      	mov	r0, r8
            server_ptr -> nx_http_server_head_requests++;
 800dcd6:	3301      	adds	r3, #1
            server_ptr -> nx_http_server_request_type = NX_HTTP_SERVER_HEAD_REQUEST;
 800dcd8:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
 800dcdc:	9207      	str	r2, [sp, #28]
            server_ptr -> nx_http_server_head_requests++;
 800dcde:	64a3      	str	r3, [r4, #72]	; 0x48
ULONG       length = 0;
 800dce0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
UINT        auth_request_present = NX_FALSE;
 800dce4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
UINT        password_length = 0;
 800dce8:	e9cd bb13 	strd	fp, fp, [sp, #76]	; 0x4c
UINT        temp_name_length = 0;
 800dcec:	e9cd bb15 	strd	fp, fp, [sp, #84]	; 0x54
UINT        temp_realm_length = 0;
 800dcf0:	e9cd bb17 	strd	fp, fp, [sp, #92]	; 0x5c
    status =  _nx_http_server_retrieve_resource(packet_ptr, server_ptr -> nx_http_server_request_resource, NX_HTTP_MAX_RESOURCE + 1);
 800dcf4:	f7fc fe58 	bl	800a9a8 <_nx_http_server_retrieve_resource.constprop.6>
    if (status != NX_SUCCESS)
 800dcf8:	9a07      	ldr	r2, [sp, #28]
 800dcfa:	4681      	mov	r9, r0
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d139      	bne.n	800dd74 <_nx_http_server_thread_entry+0x89c>
    if (server_ptr -> nx_http_server_authentication_check ||
 800dd00:	f8d4 746c 	ldr.w	r7, [r4, #1132]	; 0x46c
 800dd04:	f8d4 5470 	ldr.w	r5, [r4, #1136]	; 0x470
 800dd08:	2f00      	cmp	r7, #0
 800dd0a:	d061      	beq.n	800ddd0 <_nx_http_server_thread_entry+0x8f8>
        if (server_ptr -> nx_http_server_authentication_check_extended)
 800dd0c:	2d00      	cmp	r5, #0
 800dd0e:	f000 8116 	beq.w	800df3e <_nx_http_server_thread_entry+0xa66>
            status = (server_ptr -> nx_http_server_authentication_check_extended)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource,
 800dd12:	ab15      	add	r3, sp, #84	; 0x54
 800dd14:	aa11      	add	r2, sp, #68	; 0x44
 800dd16:	a914      	add	r1, sp, #80	; 0x50
 800dd18:	a810      	add	r0, sp, #64	; 0x40
 800dd1a:	af13      	add	r7, sp, #76	; 0x4c
 800dd1c:	9304      	str	r3, [sp, #16]
 800dd1e:	9203      	str	r2, [sp, #12]
 800dd20:	ab0f      	add	r3, sp, #60	; 0x3c
 800dd22:	9102      	str	r1, [sp, #8]
 800dd24:	2103      	movs	r1, #3
 800dd26:	9001      	str	r0, [sp, #4]
 800dd28:	4620      	mov	r0, r4
 800dd2a:	9a08      	ldr	r2, [sp, #32]
 800dd2c:	9700      	str	r7, [sp, #0]
 800dd2e:	47a8      	blx	r5
 800dd30:	4605      	mov	r5, r0
        if (status == NX_HTTP_BASIC_AUTHENTICATE ||
 800dd32:	f1a5 03e4 	sub.w	r3, r5, #228	; 0xe4
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	f240 80c5 	bls.w	800dec6 <_nx_http_server_thread_entry+0x9ee>
        if ((status != NX_HTTP_DONT_AUTHENTICATE) && (status != NX_SUCCESS))
 800dd3c:	2de3      	cmp	r5, #227	; 0xe3
 800dd3e:	d049      	beq.n	800ddd4 <_nx_http_server_thread_entry+0x8fc>
 800dd40:	2d00      	cmp	r5, #0
 800dd42:	d047      	beq.n	800ddd4 <_nx_http_server_thread_entry+0x8fc>
            if (server_ptr -> nx_http_server_invalid_username_password_callback && auth_request_present)
 800dd44:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f43f accf 	beq.w	800d6ec <_nx_http_server_thread_entry+0x214>
 800dd4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f43f accb 	beq.w	800d6ec <_nx_http_server_thread_entry+0x214>
                status =   nxd_tcp_socket_peer_info_get(&(server_ptr->nx_http_server_socket), &client_nxd_address , &client_port);
 800dd56:	aa1c      	add	r2, sp, #112	; 0x70
 800dd58:	a924      	add	r1, sp, #144	; 0x90
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f001 f89a 	bl	800ee94 <_nxd_tcp_socket_peer_info_get>
                if (status == NX_SUCCESS)
 800dd60:	2800      	cmp	r0, #0
 800dd62:	f47f acc3 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                    (server_ptr -> nx_http_server_invalid_username_password_callback)(server_ptr -> nx_http_server_request_resource, &client_nxd_address, request_type);
 800dd66:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
 800dd6a:	2203      	movs	r2, #3
 800dd6c:	a924      	add	r1, sp, #144	; 0x90
 800dd6e:	9808      	ldr	r0, [sp, #32]
 800dd70:	4798      	blx	r3
 800dd72:	e4bb      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
    status = _nx_http_server_generate_response_header(server_ptr, &packet_ptr, status_code, status_code_length, length, NX_NULL, 0, NX_NULL, 0);
 800dd74:	2511      	movs	r5, #17
 800dd76:	230f      	movs	r3, #15
 800dd78:	f8cd b008 	str.w	fp, [sp, #8]
 800dd7c:	a924      	add	r1, sp, #144	; 0x90
 800dd7e:	f8cd b004 	str.w	fp, [sp, #4]
 800dd82:	4620      	mov	r0, r4
 800dd84:	9500      	str	r5, [sp, #0]
 800dd86:	4a10      	ldr	r2, [pc, #64]	; (800ddc8 <_nx_http_server_thread_entry+0x8f0>)
 800dd88:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800dd8c:	f7fd fd4c 	bl	800b828 <_nx_http_server_generate_response_header>
    if (status != NX_SUCCESS)
 800dd90:	2800      	cmp	r0, #0
 800dd92:	f47f acab 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
        status = nx_packet_data_append(packet_ptr, information, information_length,
 800dd96:	f04f 31ff 	mov.w	r1, #4294967295
 800dd9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd9c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800dd9e:	462a      	mov	r2, r5
 800dda0:	9100      	str	r1, [sp, #0]
 800dda2:	490a      	ldr	r1, [pc, #40]	; (800ddcc <_nx_http_server_thread_entry+0x8f4>)
 800dda4:	f7f8 fcd0 	bl	8006748 <_nx_packet_data_append>
    if (status != NX_SUCCESS)
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	f43f aea3 	beq.w	800daf4 <_nx_http_server_thread_entry+0x61c>
        nx_packet_release(packet_ptr);
 800ddae:	9824      	ldr	r0, [sp, #144]	; 0x90
 800ddb0:	f7f8 fe1e 	bl	80069f0 <_nx_packet_release>
 800ddb4:	e49a      	b.n	800d6ec <_nx_http_server_thread_entry+0x214>
 800ddb6:	bf00      	nop
 800ddb8:	08025758 	.word	0x08025758
 800ddbc:	0802573c 	.word	0x0802573c
 800ddc0:	08025690 	.word	0x08025690
 800ddc4:	08025668 	.word	0x08025668
 800ddc8:	080256d0 	.word	0x080256d0
 800ddcc:	080256e0 	.word	0x080256e0
    if (server_ptr -> nx_http_server_authentication_check ||
 800ddd0:	2d00      	cmp	r5, #0
 800ddd2:	d19e      	bne.n	800dd12 <_nx_http_server_thread_entry+0x83a>
    if((server_ptr -> nx_http_server_cache_info_get) && 
 800ddd4:	f8d4 5480 	ldr.w	r5, [r4, #1152]	; 0x480
 800ddd8:	b125      	cbz	r5, 800dde4 <_nx_http_server_thread_entry+0x90c>
 800ddda:	f8d4 3460 	ldr.w	r3, [r4, #1120]	; 0x460
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	f000 80ba 	beq.w	800df58 <_nx_http_server_thread_entry+0xa80>
    nx_tcp_socket_transmit_configure(&(server_ptr -> nx_http_server_socket), 
 800dde4:	2001      	movs	r0, #1
 800dde6:	230a      	movs	r3, #10
 800dde8:	22c8      	movs	r2, #200	; 0xc8
 800ddea:	2114      	movs	r1, #20
 800ddec:	9000      	str	r0, [sp, #0]
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f006 fc14 	bl	801461c <_nx_tcp_socket_transmit_configure>
    if (server_ptr -> nx_http_server_request_notify)
 800ddf4:	f8d4 5474 	ldr.w	r5, [r4, #1140]	; 0x474
 800ddf8:	b13d      	cbz	r5, 800de0a <_nx_http_server_thread_entry+0x932>
        status =  (server_ptr -> nx_http_server_request_notify)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource, packet_ptr);
 800ddfa:	4643      	mov	r3, r8
 800ddfc:	9a08      	ldr	r2, [sp, #32]
 800ddfe:	2103      	movs	r1, #3
 800de00:	4620      	mov	r0, r4
 800de02:	47a8      	blx	r5
        if (status != NX_SUCCESS)
 800de04:	2800      	cmp	r0, #0
 800de06:	f47f ae8f 	bne.w	800db28 <_nx_http_server_thread_entry+0x650>
    if (_nx_utility_string_length_check(server_ptr -> nx_http_server_request_resource,  &resource_length, 
 800de0a:	2228      	movs	r2, #40	; 0x28
 800de0c:	a91a      	add	r1, sp, #104	; 0x68
 800de0e:	9808      	ldr	r0, [sp, #32]
 800de10:	f006 fcf6 	bl	8014800 <_nx_utility_string_length_check>
 800de14:	4603      	mov	r3, r0
 800de16:	2800      	cmp	r0, #0
 800de18:	f47f ac68 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
    status =  fx_file_open(server_ptr -> nx_http_server_media_ptr, &(server_ptr -> nx_http_server_file), server_ptr -> nx_http_server_request_resource, FX_OPEN_FOR_READ);
 800de1c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800de20:	9f08      	ldr	r7, [sp, #32]
 800de22:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800de24:	463a      	mov	r2, r7
 800de26:	9100      	str	r1, [sp, #0]
 800de28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de2a:	f008 f803 	bl	8015e34 <_fxe_file_open>
    if (status != NX_SUCCESS)
 800de2e:	4605      	mov	r5, r0
 800de30:	2800      	cmp	r0, #0
 800de32:	f47f af2d 	bne.w	800dc90 <_nx_http_server_thread_entry+0x7b8>
    fx_directory_information_get(server_ptr -> nx_http_server_media_ptr, server_ptr -> nx_http_server_request_resource, FX_NULL, 
 800de36:	9f08      	ldr	r7, [sp, #32]
 800de38:	462a      	mov	r2, r5
 800de3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800de3c:	ab0e      	add	r3, sp, #56	; 0x38
 800de3e:	9505      	str	r5, [sp, #20]
 800de40:	4639      	mov	r1, r7
 800de42:	9500      	str	r5, [sp, #0]
    length =  0;
 800de44:	950e      	str	r5, [sp, #56]	; 0x38
    fx_directory_information_get(server_ptr -> nx_http_server_media_ptr, server_ptr -> nx_http_server_request_resource, FX_NULL, 
 800de46:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800de4a:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800de4e:	f007 ff63 	bl	8015d18 <_fxe_directory_information_get>
    temp =  (ULONG) _nx_http_server_type_get_extended(server_ptr, server_ptr -> nx_http_server_request_resource, resource_length, temp_string, sizeof(temp_string));
 800de52:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    if (_nx_utility_string_length_check(name, &temp_name_length, name_length))
 800de54:	a924      	add	r1, sp, #144	; 0x90
 800de56:	4638      	mov	r0, r7
 800de58:	462a      	mov	r2, r5
 800de5a:	f006 fcd1 	bl	8014800 <_nx_utility_string_length_check>
 800de5e:	2800      	cmp	r0, #0
 800de60:	f040 8272 	bne.w	800e348 <_nx_http_server_thread_entry+0xe70>
    if (name_length != temp_name_length)
 800de64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800de66:	429d      	cmp	r5, r3
 800de68:	f040 826e 	bne.w	800e348 <_nx_http_server_thread_entry+0xe70>
 800de6c:	201e      	movs	r0, #30
 800de6e:	462a      	mov	r2, r5
 800de70:	ab1c      	add	r3, sp, #112	; 0x70
 800de72:	4639      	mov	r1, r7
 800de74:	9000      	str	r0, [sp, #0]
 800de76:	4620      	mov	r0, r4
 800de78:	f7fc fe42 	bl	800ab00 <_nx_http_server_type_get_extended.part.1>
    temp_string[temp] = 0;
 800de7c:	ab2c      	add	r3, sp, #176	; 0xb0
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800de7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de80:	af1c      	add	r7, sp, #112	; 0x70
 800de82:	9002      	str	r0, [sp, #8]
    temp_string[temp] = 0;
 800de84:	181d      	adds	r5, r3, r0
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800de86:	f8cd b010 	str.w	fp, [sp, #16]
 800de8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800de8e:	2306      	movs	r3, #6
 800de90:	a924      	add	r1, sp, #144	; 0x90
 800de92:	4620      	mov	r0, r4
 800de94:	e9cd 2700 	strd	r2, r7, [sp]
    temp_string[temp] = 0;
 800de98:	f805 bc40 	strb.w	fp, [r5, #-64]
    status = _nx_http_server_generate_response_header(server_ptr, &new_packet_ptr, NX_HTTP_STATUS_OK, sizeof(NX_HTTP_STATUS_OK) - 1, length, temp_string, temp, NX_NULL, 0);
 800de9c:	4a2d      	ldr	r2, [pc, #180]	; (800df54 <_nx_http_server_thread_entry+0xa7c>)
 800de9e:	f7fd fcc3 	bl	800b828 <_nx_http_server_generate_response_header>
    if(status)
 800dea2:	4605      	mov	r5, r0
 800dea4:	2800      	cmp	r0, #0
 800dea6:	f040 8241 	bne.w	800e32c <_nx_http_server_thread_entry+0xe54>
        status =  nx_tcp_socket_send(&(server_ptr -> nx_http_server_socket), new_packet_ptr, NX_HTTP_SERVER_TIMEOUT_SEND);
 800deaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800deae:	9924      	ldr	r1, [sp, #144]	; 0x90
 800deb0:	4630      	mov	r0, r6
 800deb2:	f7fa f8c7 	bl	8008044 <_nx_tcp_socket_send>
        if (status != NX_SUCCESS)
 800deb6:	2800      	cmp	r0, #0
 800deb8:	f43f aeb2 	beq.w	800dc20 <_nx_http_server_thread_entry+0x748>
            nx_packet_release(new_packet_ptr);
 800debc:	9824      	ldr	r0, [sp, #144]	; 0x90
 800debe:	f7f8 fd97 	bl	80069f0 <_nx_packet_release>
            length = 0;
 800dec2:	950e      	str	r5, [sp, #56]	; 0x38
 800dec4:	e6ac      	b.n	800dc20 <_nx_http_server_thread_entry+0x748>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800dec6:	2214      	movs	r2, #20
 800dec8:	a916      	add	r1, sp, #88	; 0x58
 800deca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800decc:	f006 fc98 	bl	8014800 <_nx_utility_string_length_check>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	f47f ac0b 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800ded6:	2214      	movs	r2, #20
 800ded8:	a917      	add	r1, sp, #92	; 0x5c
 800deda:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dedc:	f006 fc90 	bl	8014800 <_nx_utility_string_length_check>
            if (_nx_utility_string_length_check(name_ptr, &temp_name_length, NX_HTTP_MAX_NAME) ||
 800dee0:	2800      	cmp	r0, #0
 800dee2:	f47f ac03 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                _nx_utility_string_length_check(realm_ptr, &temp_realm_length, NX_MAX_STRING_LENGTH))
 800dee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800deea:	a918      	add	r1, sp, #96	; 0x60
 800deec:	9811      	ldr	r0, [sp, #68]	; 0x44
 800deee:	f006 fc87 	bl	8014800 <_nx_utility_string_length_check>
                _nx_utility_string_length_check(password_ptr, &temp_password_length, NX_HTTP_MAX_PASSWORD) ||
 800def2:	2800      	cmp	r0, #0
 800def4:	f47f abfa 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
            if (server_ptr -> nx_http_server_authentication_check_extended &&
 800def8:	f8d4 3470 	ldr.w	r3, [r4, #1136]	; 0x470
 800defc:	b173      	cbz	r3, 800df1c <_nx_http_server_thread_entry+0xa44>
 800defe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800df00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df02:	429a      	cmp	r2, r3
 800df04:	f47f abf2 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                ((realm_length != temp_realm_length) ||
 800df08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df0c:	429a      	cmp	r2, r3
 800df0e:	f47f abed 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
                 (name_length != temp_name_length) ||
 800df12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df16:	429a      	cmp	r2, r3
 800df18:	f47f abe8 	bne.w	800d6ec <_nx_http_server_thread_entry+0x214>
        if (status == NX_HTTP_BASIC_AUTHENTICATE)
 800df1c:	2de4      	cmp	r5, #228	; 0xe4
 800df1e:	f47f af11 	bne.w	800dd44 <_nx_http_server_thread_entry+0x86c>
            status =  _nx_http_server_basic_authenticate(server_ptr, packet_ptr, name_ptr, password_ptr, realm_ptr, temp_realm_length, &auth_request_present);
 800df22:	ad12      	add	r5, sp, #72	; 0x48
 800df24:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800df26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df28:	4641      	mov	r1, r8
 800df2a:	9502      	str	r5, [sp, #8]
 800df2c:	4620      	mov	r0, r4
 800df2e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800df30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df32:	e9cd 7500 	strd	r7, r5, [sp]
 800df36:	f7fd faad 	bl	800b494 <_nx_http_server_basic_authenticate>
 800df3a:	4605      	mov	r5, r0
 800df3c:	e6fe      	b.n	800dd3c <_nx_http_server_thread_entry+0x864>
            status = (server_ptr -> nx_http_server_authentication_check)(server_ptr, request_type, server_ptr -> nx_http_server_request_resource,
 800df3e:	ab11      	add	r3, sp, #68	; 0x44
 800df40:	4611      	mov	r1, r2
 800df42:	4620      	mov	r0, r4
 800df44:	9a08      	ldr	r2, [sp, #32]
 800df46:	9301      	str	r3, [sp, #4]
 800df48:	ab10      	add	r3, sp, #64	; 0x40
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	ab0f      	add	r3, sp, #60	; 0x3c
 800df4e:	47b8      	blx	r7
 800df50:	4605      	mov	r5, r0
 800df52:	e6ee      	b.n	800dd32 <_nx_http_server_thread_entry+0x85a>
 800df54:	080255e4 	.word	0x080255e4
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800df58:	e9d8 1002 	ldrd	r1, r0, [r8, #8]
 800df5c:	f101 0311 	add.w	r3, r1, #17
 800df60:	4298      	cmp	r0, r3
 800df62:	f240 813e 	bls.w	800e1e2 <_nx_http_server_thread_entry+0xd0a>
 800df66:	460b      	mov	r3, r1
 800df68:	f1a0 0c11 	sub.w	ip, r0, #17
 800df6c:	4619      	mov	r1, r3
        if((*src >= 'a') && (*src <= 'z'))
 800df6e:	f813 7b01 	ldrb.w	r7, [r3], #1
 800df72:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800df76:	2a19      	cmp	r2, #25
 800df78:	f240 81cd 	bls.w	800e316 <_nx_http_server_thread_entry+0xe3e>
        else if((*src >= 'A') && (*src <= 'Z'))
 800df7c:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800df80:	2a19      	cmp	r2, #25
 800df82:	f200 81cc 	bhi.w	800e31e <_nx_http_server_thread_entry+0xe46>
            ch = (UCHAR)(*src - 'A' + 'a');
 800df86:	f107 0220 	add.w	r2, r7, #32
 800df8a:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800df8c:	2a69      	cmp	r2, #105	; 0x69
 800df8e:	d002      	beq.n	800df96 <_nx_http_server_thread_entry+0xabe>
 800df90:	2f69      	cmp	r7, #105	; 0x69
 800df92:	f040 81c6 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800df96:	781f      	ldrb	r7, [r3, #0]
 800df98:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800df9c:	2a19      	cmp	r2, #25
 800df9e:	f240 81b6 	bls.w	800e30e <_nx_http_server_thread_entry+0xe36>
        else if((*src >= 'A') && (*src <= 'Z'))
 800dfa2:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800dfa6:	2a19      	cmp	r2, #25
 800dfa8:	f200 81af 	bhi.w	800e30a <_nx_http_server_thread_entry+0xe32>
            ch = (UCHAR)(*src - 'A' + 'a');
 800dfac:	f107 0220 	add.w	r2, r7, #32
 800dfb0:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800dfb2:	2a66      	cmp	r2, #102	; 0x66
 800dfb4:	d002      	beq.n	800dfbc <_nx_http_server_thread_entry+0xae4>
 800dfb6:	2f66      	cmp	r7, #102	; 0x66
 800dfb8:	f040 81b3 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800dfbc:	785a      	ldrb	r2, [r3, #1]
 800dfbe:	f1a2 0761 	sub.w	r7, r2, #97	; 0x61
 800dfc2:	2f19      	cmp	r7, #25
 800dfc4:	f240 81ad 	bls.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        else if((*src >= 'A') && (*src <= 'Z'))
 800dfc8:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
 800dfcc:	2f19      	cmp	r7, #25
 800dfce:	f200 819a 	bhi.w	800e306 <_nx_http_server_thread_entry+0xe2e>
            ch = (UCHAR)(*src - 'A' + 'a');
 800dfd2:	f102 0720 	add.w	r7, r2, #32
 800dfd6:	b2ff      	uxtb	r7, r7
        if((*src != *dest) && (ch != *dest))
 800dfd8:	2f2d      	cmp	r7, #45	; 0x2d
 800dfda:	d002      	beq.n	800dfe2 <_nx_http_server_thread_entry+0xb0a>
 800dfdc:	2a2d      	cmp	r2, #45	; 0x2d
 800dfde:	f040 81a0 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800dfe2:	789f      	ldrb	r7, [r3, #2]
 800dfe4:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800dfe8:	2a19      	cmp	r2, #25
 800dfea:	f240 8188 	bls.w	800e2fe <_nx_http_server_thread_entry+0xe26>
        else if((*src >= 'A') && (*src <= 'Z'))
 800dfee:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800dff2:	2a19      	cmp	r2, #25
 800dff4:	f200 8181 	bhi.w	800e2fa <_nx_http_server_thread_entry+0xe22>
            ch = (UCHAR)(*src - 'A' + 'a');
 800dff8:	f107 0220 	add.w	r2, r7, #32
 800dffc:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800dffe:	2a6d      	cmp	r2, #109	; 0x6d
 800e000:	d002      	beq.n	800e008 <_nx_http_server_thread_entry+0xb30>
 800e002:	2f6d      	cmp	r7, #109	; 0x6d
 800e004:	f040 818d 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e008:	78df      	ldrb	r7, [r3, #3]
 800e00a:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e00e:	2a19      	cmp	r2, #25
 800e010:	f240 816f 	bls.w	800e2f2 <_nx_http_server_thread_entry+0xe1a>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e014:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e018:	2a19      	cmp	r2, #25
 800e01a:	f200 8168 	bhi.w	800e2ee <_nx_http_server_thread_entry+0xe16>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e01e:	f107 0220 	add.w	r2, r7, #32
 800e022:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e024:	2a6f      	cmp	r2, #111	; 0x6f
 800e026:	d002      	beq.n	800e02e <_nx_http_server_thread_entry+0xb56>
 800e028:	2f6f      	cmp	r7, #111	; 0x6f
 800e02a:	f040 817a 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e02e:	791f      	ldrb	r7, [r3, #4]
 800e030:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e034:	2a19      	cmp	r2, #25
 800e036:	f240 8156 	bls.w	800e2e6 <_nx_http_server_thread_entry+0xe0e>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e03a:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e03e:	2a19      	cmp	r2, #25
 800e040:	f200 814f 	bhi.w	800e2e2 <_nx_http_server_thread_entry+0xe0a>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e044:	f107 0220 	add.w	r2, r7, #32
 800e048:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e04a:	2a64      	cmp	r2, #100	; 0x64
 800e04c:	d002      	beq.n	800e054 <_nx_http_server_thread_entry+0xb7c>
 800e04e:	2f64      	cmp	r7, #100	; 0x64
 800e050:	f040 8167 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e054:	795f      	ldrb	r7, [r3, #5]
 800e056:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e05a:	2a19      	cmp	r2, #25
 800e05c:	f240 813d 	bls.w	800e2da <_nx_http_server_thread_entry+0xe02>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e060:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e064:	2a19      	cmp	r2, #25
 800e066:	f200 8136 	bhi.w	800e2d6 <_nx_http_server_thread_entry+0xdfe>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e06a:	f107 0220 	add.w	r2, r7, #32
 800e06e:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e070:	2a69      	cmp	r2, #105	; 0x69
 800e072:	d002      	beq.n	800e07a <_nx_http_server_thread_entry+0xba2>
 800e074:	2f69      	cmp	r7, #105	; 0x69
 800e076:	f040 8154 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e07a:	799f      	ldrb	r7, [r3, #6]
 800e07c:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e080:	2a19      	cmp	r2, #25
 800e082:	f240 8124 	bls.w	800e2ce <_nx_http_server_thread_entry+0xdf6>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e086:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e08a:	2a19      	cmp	r2, #25
 800e08c:	f200 811d 	bhi.w	800e2ca <_nx_http_server_thread_entry+0xdf2>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e090:	f107 0220 	add.w	r2, r7, #32
 800e094:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e096:	2a66      	cmp	r2, #102	; 0x66
 800e098:	d002      	beq.n	800e0a0 <_nx_http_server_thread_entry+0xbc8>
 800e09a:	2f66      	cmp	r7, #102	; 0x66
 800e09c:	f040 8141 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e0a0:	79df      	ldrb	r7, [r3, #7]
 800e0a2:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e0a6:	2a19      	cmp	r2, #25
 800e0a8:	f240 810b 	bls.w	800e2c2 <_nx_http_server_thread_entry+0xdea>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e0ac:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e0b0:	2a19      	cmp	r2, #25
 800e0b2:	f200 8104 	bhi.w	800e2be <_nx_http_server_thread_entry+0xde6>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e0b6:	f107 0220 	add.w	r2, r7, #32
 800e0ba:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e0bc:	2a69      	cmp	r2, #105	; 0x69
 800e0be:	d002      	beq.n	800e0c6 <_nx_http_server_thread_entry+0xbee>
 800e0c0:	2f69      	cmp	r7, #105	; 0x69
 800e0c2:	f040 812e 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e0c6:	7a1f      	ldrb	r7, [r3, #8]
 800e0c8:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e0cc:	2a19      	cmp	r2, #25
 800e0ce:	f240 80f2 	bls.w	800e2b6 <_nx_http_server_thread_entry+0xdde>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e0d2:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e0d6:	2a19      	cmp	r2, #25
 800e0d8:	f200 80eb 	bhi.w	800e2b2 <_nx_http_server_thread_entry+0xdda>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e0dc:	f107 0220 	add.w	r2, r7, #32
 800e0e0:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e0e2:	2a65      	cmp	r2, #101	; 0x65
 800e0e4:	d002      	beq.n	800e0ec <_nx_http_server_thread_entry+0xc14>
 800e0e6:	2f65      	cmp	r7, #101	; 0x65
 800e0e8:	f040 811b 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e0ec:	7a5f      	ldrb	r7, [r3, #9]
 800e0ee:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e0f2:	2a19      	cmp	r2, #25
 800e0f4:	f240 80d9 	bls.w	800e2aa <_nx_http_server_thread_entry+0xdd2>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e0f8:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e0fc:	2a19      	cmp	r2, #25
 800e0fe:	f200 80d2 	bhi.w	800e2a6 <_nx_http_server_thread_entry+0xdce>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e102:	f107 0220 	add.w	r2, r7, #32
 800e106:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e108:	2a64      	cmp	r2, #100	; 0x64
 800e10a:	d002      	beq.n	800e112 <_nx_http_server_thread_entry+0xc3a>
 800e10c:	2f64      	cmp	r7, #100	; 0x64
 800e10e:	f040 8108 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e112:	7a9a      	ldrb	r2, [r3, #10]
 800e114:	f1a2 0761 	sub.w	r7, r2, #97	; 0x61
 800e118:	2f19      	cmp	r7, #25
 800e11a:	f240 8102 	bls.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e11e:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
 800e122:	2f19      	cmp	r7, #25
 800e124:	f200 80bd 	bhi.w	800e2a2 <_nx_http_server_thread_entry+0xdca>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e128:	f102 0720 	add.w	r7, r2, #32
 800e12c:	b2ff      	uxtb	r7, r7
        if((*src != *dest) && (ch != *dest))
 800e12e:	2f2d      	cmp	r7, #45	; 0x2d
 800e130:	d002      	beq.n	800e138 <_nx_http_server_thread_entry+0xc60>
 800e132:	2a2d      	cmp	r2, #45	; 0x2d
 800e134:	f040 80f5 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e138:	7adf      	ldrb	r7, [r3, #11]
 800e13a:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e13e:	2a19      	cmp	r2, #25
 800e140:	f240 80ab 	bls.w	800e29a <_nx_http_server_thread_entry+0xdc2>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e144:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e148:	2a19      	cmp	r2, #25
 800e14a:	f200 80a0 	bhi.w	800e28e <_nx_http_server_thread_entry+0xdb6>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e14e:	f107 0220 	add.w	r2, r7, #32
 800e152:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e154:	2a73      	cmp	r2, #115	; 0x73
 800e156:	d002      	beq.n	800e15e <_nx_http_server_thread_entry+0xc86>
 800e158:	2f73      	cmp	r7, #115	; 0x73
 800e15a:	f040 80e2 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e15e:	7b1f      	ldrb	r7, [r3, #12]
 800e160:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e164:	2a19      	cmp	r2, #25
 800e166:	f240 808e 	bls.w	800e286 <_nx_http_server_thread_entry+0xdae>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e16a:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e16e:	2a19      	cmp	r2, #25
 800e170:	f200 808f 	bhi.w	800e292 <_nx_http_server_thread_entry+0xdba>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e174:	f107 0220 	add.w	r2, r7, #32
 800e178:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e17a:	2a69      	cmp	r2, #105	; 0x69
 800e17c:	d002      	beq.n	800e184 <_nx_http_server_thread_entry+0xcac>
 800e17e:	2f69      	cmp	r7, #105	; 0x69
 800e180:	f040 80cf 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e184:	7b5f      	ldrb	r7, [r3, #13]
 800e186:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e18a:	2a19      	cmp	r2, #25
 800e18c:	d96f      	bls.n	800e26e <_nx_http_server_thread_entry+0xd96>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e18e:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e192:	2a19      	cmp	r2, #25
 800e194:	d873      	bhi.n	800e27e <_nx_http_server_thread_entry+0xda6>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e196:	f107 0220 	add.w	r2, r7, #32
 800e19a:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e19c:	2a6e      	cmp	r2, #110	; 0x6e
 800e19e:	d002      	beq.n	800e1a6 <_nx_http_server_thread_entry+0xcce>
 800e1a0:	2f6e      	cmp	r7, #110	; 0x6e
 800e1a2:	f040 80be 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e1a6:	7b9f      	ldrb	r7, [r3, #14]
 800e1a8:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e1ac:	2a19      	cmp	r2, #25
 800e1ae:	d962      	bls.n	800e276 <_nx_http_server_thread_entry+0xd9e>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e1b0:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e1b4:	2a19      	cmp	r2, #25
 800e1b6:	d864      	bhi.n	800e282 <_nx_http_server_thread_entry+0xdaa>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e1b8:	f107 0220 	add.w	r2, r7, #32
 800e1bc:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e1be:	2a63      	cmp	r2, #99	; 0x63
 800e1c0:	d002      	beq.n	800e1c8 <_nx_http_server_thread_entry+0xcf0>
 800e1c2:	2f63      	cmp	r7, #99	; 0x63
 800e1c4:	f040 80ad 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
        if((*src >= 'a') && (*src <= 'z'))
 800e1c8:	7bdf      	ldrb	r7, [r3, #15]
 800e1ca:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e1ce:	2a19      	cmp	r2, #25
 800e1d0:	d845      	bhi.n	800e25e <_nx_http_server_thread_entry+0xd86>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e1d2:	f1a7 0220 	sub.w	r2, r7, #32
 800e1d6:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e1d8:	2f65      	cmp	r7, #101	; 0x65
 800e1da:	d002      	beq.n	800e1e2 <_nx_http_server_thread_entry+0xd0a>
 800e1dc:	2a65      	cmp	r2, #101	; 0x65
 800e1de:	f040 80a0 	bne.w	800e322 <_nx_http_server_thread_entry+0xe4a>
    ch += name_length + 1;
 800e1e2:	f101 0312 	add.w	r3, r1, #18
    if(ch >= packet_ptr -> nx_packet_append_ptr)
 800e1e6:	4283      	cmp	r3, r0
 800e1e8:	f4bf adfc 	bcs.w	800dde4 <_nx_http_server_thread_entry+0x90c>
    while(*ch == ' ')
 800e1ec:	7c8a      	ldrb	r2, [r1, #18]
 800e1ee:	2a20      	cmp	r2, #32
 800e1f0:	d003      	beq.n	800e1fa <_nx_http_server_thread_entry+0xd22>
 800e1f2:	e006      	b.n	800e202 <_nx_http_server_thread_entry+0xd2a>
        if(ch >= packet_ptr -> nx_packet_append_ptr)
 800e1f4:	4283      	cmp	r3, r0
 800e1f6:	f43f adf5 	beq.w	800dde4 <_nx_http_server_thread_entry+0x90c>
    while(*ch == ' ')
 800e1fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e1fe:	2a20      	cmp	r2, #32
 800e200:	d0f8      	beq.n	800e1f4 <_nx_http_server_thread_entry+0xd1c>
 800e202:	aa1c      	add	r2, sp, #112	; 0x70
 800e204:	e009      	b.n	800e21a <_nx_http_server_thread_entry+0xd42>
        field_value[index++] = *ch++;
 800e206:	f109 0901 	add.w	r9, r9, #1
 800e20a:	f802 1b01 	strb.w	r1, [r2], #1
    while(index < field_value_size)
 800e20e:	f1b9 0f1e 	cmp.w	r9, #30
 800e212:	f43f ade7 	beq.w	800dde4 <_nx_http_server_thread_entry+0x90c>
 800e216:	f8d8 000c 	ldr.w	r0, [r8, #12]
        if(ch + 2 > packet_ptr -> nx_packet_append_ptr)
 800e21a:	1c99      	adds	r1, r3, #2
 800e21c:	4288      	cmp	r0, r1
 800e21e:	f4ff ade1 	bcc.w	800dde4 <_nx_http_server_thread_entry+0x90c>
        if((*ch == 13) && (*(ch + 1) == 10))
 800e222:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e226:	290d      	cmp	r1, #13
 800e228:	d1ed      	bne.n	800e206 <_nx_http_server_thread_entry+0xd2e>
 800e22a:	7818      	ldrb	r0, [r3, #0]
 800e22c:	280a      	cmp	r0, #10
 800e22e:	d1ea      	bne.n	800e206 <_nx_http_server_thread_entry+0xd2e>
    while((index > 0) && (field_value[index - 1] == ' '))
 800e230:	f1b9 0f00 	cmp.w	r9, #0
 800e234:	f000 82c4 	beq.w	800e7c0 <_nx_http_server_thread_entry+0x12e8>
 800e238:	f109 33ff 	add.w	r3, r9, #4294967295
 800e23c:	aa1c      	add	r2, sp, #112	; 0x70
 800e23e:	5cd1      	ldrb	r1, [r2, r3]
 800e240:	441a      	add	r2, r3
 800e242:	2920      	cmp	r1, #32
 800e244:	f040 829f 	bne.w	800e786 <_nx_http_server_thread_entry+0x12ae>
 800e248:	1e59      	subs	r1, r3, #1
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f000 82b8 	beq.w	800e7c0 <_nx_http_server_thread_entry+0x12e8>
 800e250:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 800e254:	2820      	cmp	r0, #32
 800e256:	f040 82b5 	bne.w	800e7c4 <_nx_http_server_thread_entry+0x12ec>
 800e25a:	460b      	mov	r3, r1
 800e25c:	e7f4      	b.n	800e248 <_nx_http_server_thread_entry+0xd70>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e25e:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e262:	2a19      	cmp	r2, #25
 800e264:	d817      	bhi.n	800e296 <_nx_http_server_thread_entry+0xdbe>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e266:	f107 0220 	add.w	r2, r7, #32
 800e26a:	b2d2      	uxtb	r2, r2
 800e26c:	e7b4      	b.n	800e1d8 <_nx_http_server_thread_entry+0xd00>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e26e:	f1a7 0220 	sub.w	r2, r7, #32
 800e272:	b2d2      	uxtb	r2, r2
 800e274:	e792      	b.n	800e19c <_nx_http_server_thread_entry+0xcc4>
 800e276:	f1a7 0220 	sub.w	r2, r7, #32
 800e27a:	b2d2      	uxtb	r2, r2
 800e27c:	e79f      	b.n	800e1be <_nx_http_server_thread_entry+0xce6>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e27e:	463a      	mov	r2, r7
 800e280:	e78c      	b.n	800e19c <_nx_http_server_thread_entry+0xcc4>
 800e282:	463a      	mov	r2, r7
 800e284:	e79b      	b.n	800e1be <_nx_http_server_thread_entry+0xce6>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e286:	f1a7 0220 	sub.w	r2, r7, #32
 800e28a:	b2d2      	uxtb	r2, r2
 800e28c:	e775      	b.n	800e17a <_nx_http_server_thread_entry+0xca2>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e28e:	463a      	mov	r2, r7
 800e290:	e760      	b.n	800e154 <_nx_http_server_thread_entry+0xc7c>
 800e292:	463a      	mov	r2, r7
 800e294:	e771      	b.n	800e17a <_nx_http_server_thread_entry+0xca2>
 800e296:	463a      	mov	r2, r7
 800e298:	e79e      	b.n	800e1d8 <_nx_http_server_thread_entry+0xd00>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e29a:	f1a7 0220 	sub.w	r2, r7, #32
 800e29e:	b2d2      	uxtb	r2, r2
 800e2a0:	e758      	b.n	800e154 <_nx_http_server_thread_entry+0xc7c>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e2a2:	4617      	mov	r7, r2
 800e2a4:	e743      	b.n	800e12e <_nx_http_server_thread_entry+0xc56>
 800e2a6:	463a      	mov	r2, r7
 800e2a8:	e72e      	b.n	800e108 <_nx_http_server_thread_entry+0xc30>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e2aa:	f1a7 0220 	sub.w	r2, r7, #32
 800e2ae:	b2d2      	uxtb	r2, r2
 800e2b0:	e72a      	b.n	800e108 <_nx_http_server_thread_entry+0xc30>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e2b2:	463a      	mov	r2, r7
 800e2b4:	e715      	b.n	800e0e2 <_nx_http_server_thread_entry+0xc0a>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e2b6:	f1a7 0220 	sub.w	r2, r7, #32
 800e2ba:	b2d2      	uxtb	r2, r2
 800e2bc:	e711      	b.n	800e0e2 <_nx_http_server_thread_entry+0xc0a>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e2be:	463a      	mov	r2, r7
 800e2c0:	e6fc      	b.n	800e0bc <_nx_http_server_thread_entry+0xbe4>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e2c2:	f1a7 0220 	sub.w	r2, r7, #32
 800e2c6:	b2d2      	uxtb	r2, r2
 800e2c8:	e6f8      	b.n	800e0bc <_nx_http_server_thread_entry+0xbe4>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e2ca:	463a      	mov	r2, r7
 800e2cc:	e6e3      	b.n	800e096 <_nx_http_server_thread_entry+0xbbe>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e2ce:	f1a7 0220 	sub.w	r2, r7, #32
 800e2d2:	b2d2      	uxtb	r2, r2
 800e2d4:	e6df      	b.n	800e096 <_nx_http_server_thread_entry+0xbbe>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e2d6:	463a      	mov	r2, r7
 800e2d8:	e6ca      	b.n	800e070 <_nx_http_server_thread_entry+0xb98>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e2da:	f1a7 0220 	sub.w	r2, r7, #32
 800e2de:	b2d2      	uxtb	r2, r2
 800e2e0:	e6c6      	b.n	800e070 <_nx_http_server_thread_entry+0xb98>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e2e2:	463a      	mov	r2, r7
 800e2e4:	e6b1      	b.n	800e04a <_nx_http_server_thread_entry+0xb72>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e2e6:	f1a7 0220 	sub.w	r2, r7, #32
 800e2ea:	b2d2      	uxtb	r2, r2
 800e2ec:	e6ad      	b.n	800e04a <_nx_http_server_thread_entry+0xb72>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e2ee:	463a      	mov	r2, r7
 800e2f0:	e698      	b.n	800e024 <_nx_http_server_thread_entry+0xb4c>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e2f2:	f1a7 0220 	sub.w	r2, r7, #32
 800e2f6:	b2d2      	uxtb	r2, r2
 800e2f8:	e694      	b.n	800e024 <_nx_http_server_thread_entry+0xb4c>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e2fa:	463a      	mov	r2, r7
 800e2fc:	e67f      	b.n	800dffe <_nx_http_server_thread_entry+0xb26>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e2fe:	f1a7 0220 	sub.w	r2, r7, #32
 800e302:	b2d2      	uxtb	r2, r2
 800e304:	e67b      	b.n	800dffe <_nx_http_server_thread_entry+0xb26>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e306:	4617      	mov	r7, r2
 800e308:	e666      	b.n	800dfd8 <_nx_http_server_thread_entry+0xb00>
 800e30a:	463a      	mov	r2, r7
 800e30c:	e651      	b.n	800dfb2 <_nx_http_server_thread_entry+0xada>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e30e:	f1a7 0220 	sub.w	r2, r7, #32
 800e312:	b2d2      	uxtb	r2, r2
 800e314:	e64d      	b.n	800dfb2 <_nx_http_server_thread_entry+0xada>
 800e316:	f1a7 0220 	sub.w	r2, r7, #32
 800e31a:	b2d2      	uxtb	r2, r2
 800e31c:	e636      	b.n	800df8c <_nx_http_server_thread_entry+0xab4>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e31e:	463a      	mov	r2, r7
 800e320:	e634      	b.n	800df8c <_nx_http_server_thread_entry+0xab4>
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800e322:	459c      	cmp	ip, r3
        ch++;
 800e324:	4619      	mov	r1, r3
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800e326:	f47f ae21 	bne.w	800df6c <_nx_http_server_thread_entry+0xa94>
 800e32a:	e75a      	b.n	800e1e2 <_nx_http_server_thread_entry+0xd0a>
        _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_INTERNAL_ERROR, sizeof(NX_HTTP_STATUS_INTERNAL_ERROR) - 1, 
 800e32c:	2219      	movs	r2, #25
 800e32e:	4620      	mov	r0, r4
 800e330:	4bd1      	ldr	r3, [pc, #836]	; (800e678 <_nx_http_server_thread_entry+0x11a0>)
 800e332:	9200      	str	r2, [sp, #0]
 800e334:	49d1      	ldr	r1, [pc, #836]	; (800e67c <_nx_http_server_thread_entry+0x11a4>)
 800e336:	e9cd bb01 	strd	fp, fp, [sp, #4]
 800e33a:	f7fd fcc3 	bl	800bcc4 <_nx_http_server_response_send>
        fx_file_close(&(server_ptr -> nx_http_server_file));
 800e33e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e340:	f007 fd2a 	bl	8015d98 <_fxe_file_close>
 800e344:	f7ff b9d2 	b.w	800d6ec <_nx_http_server_thread_entry+0x214>
        return(NX_HTTP_ERROR);
 800e348:	20e0      	movs	r0, #224	; 0xe0
 800e34a:	e597      	b.n	800de7c <_nx_http_server_thread_entry+0x9a4>
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800e34c:	e9d8 0102 	ldrd	r0, r1, [r8, #8]
 800e350:	f100 0311 	add.w	r3, r0, #17
 800e354:	4299      	cmp	r1, r3
 800e356:	f240 813b 	bls.w	800e5d0 <_nx_http_server_thread_entry+0x10f8>
 800e35a:	4603      	mov	r3, r0
 800e35c:	f1a1 0c11 	sub.w	ip, r1, #17
 800e360:	4618      	mov	r0, r3
        if((*src >= 'a') && (*src <= 'z'))
 800e362:	f813 7b01 	ldrb.w	r7, [r3], #1
 800e366:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e36a:	2a19      	cmp	r2, #25
 800e36c:	f240 8178 	bls.w	800e660 <_nx_http_server_thread_entry+0x1188>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e370:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e374:	2a19      	cmp	r2, #25
 800e376:	f200 81c7 	bhi.w	800e708 <_nx_http_server_thread_entry+0x1230>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e37a:	f107 0220 	add.w	r2, r7, #32
 800e37e:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e380:	2f69      	cmp	r7, #105	; 0x69
 800e382:	d002      	beq.n	800e38a <_nx_http_server_thread_entry+0xeb2>
 800e384:	2a69      	cmp	r2, #105	; 0x69
 800e386:	f040 8160 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e38a:	781f      	ldrb	r7, [r3, #0]
 800e38c:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e390:	2a19      	cmp	r2, #25
 800e392:	f240 81a1 	bls.w	800e6d8 <_nx_http_server_thread_entry+0x1200>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e396:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e39a:	2a19      	cmp	r2, #25
 800e39c:	f200 81c2 	bhi.w	800e724 <_nx_http_server_thread_entry+0x124c>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e3a0:	f107 0220 	add.w	r2, r7, #32
 800e3a4:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e3a6:	2f66      	cmp	r7, #102	; 0x66
 800e3a8:	d002      	beq.n	800e3b0 <_nx_http_server_thread_entry+0xed8>
 800e3aa:	2a66      	cmp	r2, #102	; 0x66
 800e3ac:	f040 814d 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e3b0:	785a      	ldrb	r2, [r3, #1]
 800e3b2:	f1a2 0761 	sub.w	r7, r2, #97	; 0x61
 800e3b6:	2f19      	cmp	r7, #25
 800e3b8:	f240 8147 	bls.w	800e64a <_nx_http_server_thread_entry+0x1172>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e3bc:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
 800e3c0:	2f19      	cmp	r7, #25
 800e3c2:	f200 81a3 	bhi.w	800e70c <_nx_http_server_thread_entry+0x1234>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e3c6:	f102 0720 	add.w	r7, r2, #32
 800e3ca:	b2ff      	uxtb	r7, r7
        if((*src != *dest) && (ch != *dest))
 800e3cc:	2a2d      	cmp	r2, #45	; 0x2d
 800e3ce:	d002      	beq.n	800e3d6 <_nx_http_server_thread_entry+0xefe>
 800e3d0:	2f2d      	cmp	r7, #45	; 0x2d
 800e3d2:	f040 813a 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e3d6:	789f      	ldrb	r7, [r3, #2]
 800e3d8:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e3dc:	2a19      	cmp	r2, #25
 800e3de:	f240 817f 	bls.w	800e6e0 <_nx_http_server_thread_entry+0x1208>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e3e2:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e3e6:	2a19      	cmp	r2, #25
 800e3e8:	f200 8192 	bhi.w	800e710 <_nx_http_server_thread_entry+0x1238>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e3ec:	f107 0220 	add.w	r2, r7, #32
 800e3f0:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e3f2:	2f6d      	cmp	r7, #109	; 0x6d
 800e3f4:	d002      	beq.n	800e3fc <_nx_http_server_thread_entry+0xf24>
 800e3f6:	2a6d      	cmp	r2, #109	; 0x6d
 800e3f8:	f040 8127 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e3fc:	78df      	ldrb	r7, [r3, #3]
 800e3fe:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e402:	2a19      	cmp	r2, #25
 800e404:	f240 8148 	bls.w	800e698 <_nx_http_server_thread_entry+0x11c0>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e408:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e40c:	2a19      	cmp	r2, #25
 800e40e:	f200 8187 	bhi.w	800e720 <_nx_http_server_thread_entry+0x1248>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e412:	f107 0220 	add.w	r2, r7, #32
 800e416:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e418:	2f6f      	cmp	r7, #111	; 0x6f
 800e41a:	d002      	beq.n	800e422 <_nx_http_server_thread_entry+0xf4a>
 800e41c:	2a6f      	cmp	r2, #111	; 0x6f
 800e41e:	f040 8114 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e422:	791f      	ldrb	r7, [r3, #4]
 800e424:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e428:	2a19      	cmp	r2, #25
 800e42a:	f240 8151 	bls.w	800e6d0 <_nx_http_server_thread_entry+0x11f8>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e42e:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e432:	2a19      	cmp	r2, #25
 800e434:	f200 8172 	bhi.w	800e71c <_nx_http_server_thread_entry+0x1244>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e438:	f107 0220 	add.w	r2, r7, #32
 800e43c:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e43e:	2f64      	cmp	r7, #100	; 0x64
 800e440:	d002      	beq.n	800e448 <_nx_http_server_thread_entry+0xf70>
 800e442:	2a64      	cmp	r2, #100	; 0x64
 800e444:	f040 8101 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e448:	795f      	ldrb	r7, [r3, #5]
 800e44a:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e44e:	2a19      	cmp	r2, #25
 800e450:	f240 813a 	bls.w	800e6c8 <_nx_http_server_thread_entry+0x11f0>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e454:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e458:	2a19      	cmp	r2, #25
 800e45a:	f200 815d 	bhi.w	800e718 <_nx_http_server_thread_entry+0x1240>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e45e:	f107 0220 	add.w	r2, r7, #32
 800e462:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e464:	2f69      	cmp	r7, #105	; 0x69
 800e466:	d002      	beq.n	800e46e <_nx_http_server_thread_entry+0xf96>
 800e468:	2a69      	cmp	r2, #105	; 0x69
 800e46a:	f040 80ee 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e46e:	799f      	ldrb	r7, [r3, #6]
 800e470:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e474:	2a19      	cmp	r2, #25
 800e476:	f240 8123 	bls.w	800e6c0 <_nx_http_server_thread_entry+0x11e8>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e47a:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e47e:	2a19      	cmp	r2, #25
 800e480:	f200 8140 	bhi.w	800e704 <_nx_http_server_thread_entry+0x122c>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e484:	f107 0220 	add.w	r2, r7, #32
 800e488:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e48a:	2f66      	cmp	r7, #102	; 0x66
 800e48c:	d002      	beq.n	800e494 <_nx_http_server_thread_entry+0xfbc>
 800e48e:	2a66      	cmp	r2, #102	; 0x66
 800e490:	f040 80db 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e494:	79df      	ldrb	r7, [r3, #7]
 800e496:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e49a:	2a19      	cmp	r2, #25
 800e49c:	f240 810c 	bls.w	800e6b8 <_nx_http_server_thread_entry+0x11e0>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e4a0:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e4a4:	2a19      	cmp	r2, #25
 800e4a6:	f200 812b 	bhi.w	800e700 <_nx_http_server_thread_entry+0x1228>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e4aa:	f107 0220 	add.w	r2, r7, #32
 800e4ae:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e4b0:	2f69      	cmp	r7, #105	; 0x69
 800e4b2:	d002      	beq.n	800e4ba <_nx_http_server_thread_entry+0xfe2>
 800e4b4:	2a69      	cmp	r2, #105	; 0x69
 800e4b6:	f040 80c8 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e4ba:	7a1f      	ldrb	r7, [r3, #8]
 800e4bc:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e4c0:	2a19      	cmp	r2, #25
 800e4c2:	f240 80f5 	bls.w	800e6b0 <_nx_http_server_thread_entry+0x11d8>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e4c6:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e4ca:	2a19      	cmp	r2, #25
 800e4cc:	f200 8116 	bhi.w	800e6fc <_nx_http_server_thread_entry+0x1224>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e4d0:	f107 0220 	add.w	r2, r7, #32
 800e4d4:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e4d6:	2a65      	cmp	r2, #101	; 0x65
 800e4d8:	d002      	beq.n	800e4e0 <_nx_http_server_thread_entry+0x1008>
 800e4da:	2f65      	cmp	r7, #101	; 0x65
 800e4dc:	f040 80b5 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e4e0:	7a5f      	ldrb	r7, [r3, #9]
 800e4e2:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e4e6:	2a19      	cmp	r2, #25
 800e4e8:	f240 80de 	bls.w	800e6a8 <_nx_http_server_thread_entry+0x11d0>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e4ec:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e4f0:	2a19      	cmp	r2, #25
 800e4f2:	f200 80ff 	bhi.w	800e6f4 <_nx_http_server_thread_entry+0x121c>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e4f6:	f107 0220 	add.w	r2, r7, #32
 800e4fa:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e4fc:	2a64      	cmp	r2, #100	; 0x64
 800e4fe:	d002      	beq.n	800e506 <_nx_http_server_thread_entry+0x102e>
 800e500:	2f64      	cmp	r7, #100	; 0x64
 800e502:	f040 80a2 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e506:	7a9a      	ldrb	r2, [r3, #10]
 800e508:	f1a2 0761 	sub.w	r7, r2, #97	; 0x61
 800e50c:	2f19      	cmp	r7, #25
 800e50e:	f240 809c 	bls.w	800e64a <_nx_http_server_thread_entry+0x1172>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e512:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
 800e516:	2f19      	cmp	r7, #25
 800e518:	f200 80ea 	bhi.w	800e6f0 <_nx_http_server_thread_entry+0x1218>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e51c:	f102 0720 	add.w	r7, r2, #32
 800e520:	b2ff      	uxtb	r7, r7
        if((*src != *dest) && (ch != *dest))
 800e522:	2f2d      	cmp	r7, #45	; 0x2d
 800e524:	d002      	beq.n	800e52c <_nx_http_server_thread_entry+0x1054>
 800e526:	2a2d      	cmp	r2, #45	; 0x2d
 800e528:	f040 808f 	bne.w	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e52c:	7adf      	ldrb	r7, [r3, #11]
 800e52e:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e532:	2a19      	cmp	r2, #25
 800e534:	f240 80b4 	bls.w	800e6a0 <_nx_http_server_thread_entry+0x11c8>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e538:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e53c:	2a19      	cmp	r2, #25
 800e53e:	f200 80db 	bhi.w	800e6f8 <_nx_http_server_thread_entry+0x1220>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e542:	f107 0220 	add.w	r2, r7, #32
 800e546:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e548:	2a73      	cmp	r2, #115	; 0x73
 800e54a:	d001      	beq.n	800e550 <_nx_http_server_thread_entry+0x1078>
 800e54c:	2f73      	cmp	r7, #115	; 0x73
 800e54e:	d17c      	bne.n	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e550:	7b1f      	ldrb	r7, [r3, #12]
 800e552:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e556:	2a19      	cmp	r2, #25
 800e558:	f240 8092 	bls.w	800e680 <_nx_http_server_thread_entry+0x11a8>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e55c:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e560:	2a19      	cmp	r2, #25
 800e562:	f200 80e1 	bhi.w	800e728 <_nx_http_server_thread_entry+0x1250>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e566:	f107 0220 	add.w	r2, r7, #32
 800e56a:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e56c:	2f69      	cmp	r7, #105	; 0x69
 800e56e:	d001      	beq.n	800e574 <_nx_http_server_thread_entry+0x109c>
 800e570:	2a69      	cmp	r2, #105	; 0x69
 800e572:	d16a      	bne.n	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e574:	7b5f      	ldrb	r7, [r3, #13]
 800e576:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e57a:	2a19      	cmp	r2, #25
 800e57c:	d978      	bls.n	800e670 <_nx_http_server_thread_entry+0x1198>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e57e:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e582:	2a19      	cmp	r2, #25
 800e584:	f200 80b2 	bhi.w	800e6ec <_nx_http_server_thread_entry+0x1214>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e588:	f107 0220 	add.w	r2, r7, #32
 800e58c:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e58e:	2a6e      	cmp	r2, #110	; 0x6e
 800e590:	d001      	beq.n	800e596 <_nx_http_server_thread_entry+0x10be>
 800e592:	2f6e      	cmp	r7, #110	; 0x6e
 800e594:	d159      	bne.n	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e596:	7b9f      	ldrb	r7, [r3, #14]
 800e598:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e59c:	2a19      	cmp	r2, #25
 800e59e:	d963      	bls.n	800e668 <_nx_http_server_thread_entry+0x1190>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e5a0:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e5a4:	2a19      	cmp	r2, #25
 800e5a6:	f200 809f 	bhi.w	800e6e8 <_nx_http_server_thread_entry+0x1210>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e5aa:	f107 0220 	add.w	r2, r7, #32
 800e5ae:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e5b0:	2a63      	cmp	r2, #99	; 0x63
 800e5b2:	d001      	beq.n	800e5b8 <_nx_http_server_thread_entry+0x10e0>
 800e5b4:	2f63      	cmp	r7, #99	; 0x63
 800e5b6:	d148      	bne.n	800e64a <_nx_http_server_thread_entry+0x1172>
        if((*src >= 'a') && (*src <= 'z'))
 800e5b8:	7bdf      	ldrb	r7, [r3, #15]
 800e5ba:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e5be:	2a19      	cmp	r2, #25
 800e5c0:	d862      	bhi.n	800e688 <_nx_http_server_thread_entry+0x11b0>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e5c2:	f1a7 0220 	sub.w	r2, r7, #32
 800e5c6:	b2d2      	uxtb	r2, r2
        if((*src != *dest) && (ch != *dest))
 800e5c8:	2a65      	cmp	r2, #101	; 0x65
 800e5ca:	d001      	beq.n	800e5d0 <_nx_http_server_thread_entry+0x10f8>
 800e5cc:	2f65      	cmp	r7, #101	; 0x65
 800e5ce:	d13c      	bne.n	800e64a <_nx_http_server_thread_entry+0x1172>
    ch += name_length + 1;
 800e5d0:	f100 0312 	add.w	r3, r0, #18
    if(ch >= packet_ptr -> nx_packet_append_ptr)
 800e5d4:	428b      	cmp	r3, r1
 800e5d6:	f4bf a9cd 	bcs.w	800d974 <_nx_http_server_thread_entry+0x49c>
    while(*ch == ' ')
 800e5da:	7c82      	ldrb	r2, [r0, #18]
 800e5dc:	2a20      	cmp	r2, #32
 800e5de:	d003      	beq.n	800e5e8 <_nx_http_server_thread_entry+0x1110>
 800e5e0:	e006      	b.n	800e5f0 <_nx_http_server_thread_entry+0x1118>
        if(ch >= packet_ptr -> nx_packet_append_ptr)
 800e5e2:	428b      	cmp	r3, r1
 800e5e4:	f43f a9c6 	beq.w	800d974 <_nx_http_server_thread_entry+0x49c>
    while(*ch == ' ')
 800e5e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e5ec:	2a20      	cmp	r2, #32
 800e5ee:	d0f8      	beq.n	800e5e2 <_nx_http_server_thread_entry+0x110a>
 800e5f0:	aa1c      	add	r2, sp, #112	; 0x70
 800e5f2:	e009      	b.n	800e608 <_nx_http_server_thread_entry+0x1130>
        field_value[index++] = *ch++;
 800e5f4:	f109 0901 	add.w	r9, r9, #1
 800e5f8:	f802 1b01 	strb.w	r1, [r2], #1
    while(index < field_value_size)
 800e5fc:	f1b9 0f1e 	cmp.w	r9, #30
 800e600:	f43f a9b8 	beq.w	800d974 <_nx_http_server_thread_entry+0x49c>
 800e604:	f8d8 100c 	ldr.w	r1, [r8, #12]
        if(ch + 2 > packet_ptr -> nx_packet_append_ptr)
 800e608:	1c98      	adds	r0, r3, #2
 800e60a:	4281      	cmp	r1, r0
 800e60c:	f4ff a9b2 	bcc.w	800d974 <_nx_http_server_thread_entry+0x49c>
        if((*ch == 13) && (*(ch + 1) == 10))
 800e610:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e614:	290d      	cmp	r1, #13
 800e616:	d1ed      	bne.n	800e5f4 <_nx_http_server_thread_entry+0x111c>
 800e618:	7818      	ldrb	r0, [r3, #0]
 800e61a:	280a      	cmp	r0, #10
 800e61c:	d1ea      	bne.n	800e5f4 <_nx_http_server_thread_entry+0x111c>
    while((index > 0) && (field_value[index - 1] == ' '))
 800e61e:	f1b9 0f00 	cmp.w	r9, #0
 800e622:	f000 80ae 	beq.w	800e782 <_nx_http_server_thread_entry+0x12aa>
 800e626:	f109 33ff 	add.w	r3, r9, #4294967295
 800e62a:	aa1c      	add	r2, sp, #112	; 0x70
 800e62c:	5cd1      	ldrb	r1, [r2, r3]
 800e62e:	441a      	add	r2, r3
 800e630:	2920      	cmp	r1, #32
 800e632:	f040 80a3 	bne.w	800e77c <_nx_http_server_thread_entry+0x12a4>
 800e636:	1e59      	subs	r1, r3, #1
 800e638:	2b00      	cmp	r3, #0
 800e63a:	f000 80a2 	beq.w	800e782 <_nx_http_server_thread_entry+0x12aa>
 800e63e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 800e642:	2820      	cmp	r0, #32
 800e644:	d172      	bne.n	800e72c <_nx_http_server_thread_entry+0x1254>
 800e646:	460b      	mov	r3, r1
 800e648:	e7f5      	b.n	800e636 <_nx_http_server_thread_entry+0x115e>
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800e64a:	459c      	cmp	ip, r3
        ch++;
 800e64c:	4618      	mov	r0, r3
    while(ch + name_length < packet_ptr -> nx_packet_append_ptr)
 800e64e:	d0bf      	beq.n	800e5d0 <_nx_http_server_thread_entry+0x10f8>
 800e650:	4618      	mov	r0, r3
        if((*src >= 'a') && (*src <= 'z'))
 800e652:	f813 7b01 	ldrb.w	r7, [r3], #1
 800e656:	f1a7 0261 	sub.w	r2, r7, #97	; 0x61
 800e65a:	2a19      	cmp	r2, #25
 800e65c:	f63f ae88 	bhi.w	800e370 <_nx_http_server_thread_entry+0xe98>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e660:	f1a7 0220 	sub.w	r2, r7, #32
 800e664:	b2d2      	uxtb	r2, r2
 800e666:	e68b      	b.n	800e380 <_nx_http_server_thread_entry+0xea8>
 800e668:	f1a7 0220 	sub.w	r2, r7, #32
 800e66c:	b2d2      	uxtb	r2, r2
 800e66e:	e79f      	b.n	800e5b0 <_nx_http_server_thread_entry+0x10d8>
 800e670:	f1a7 0220 	sub.w	r2, r7, #32
 800e674:	b2d2      	uxtb	r2, r2
 800e676:	e78a      	b.n	800e58e <_nx_http_server_thread_entry+0x10b6>
 800e678:	0802573c 	.word	0x0802573c
 800e67c:	08025758 	.word	0x08025758
 800e680:	f1a7 0220 	sub.w	r2, r7, #32
 800e684:	b2d2      	uxtb	r2, r2
 800e686:	e771      	b.n	800e56c <_nx_http_server_thread_entry+0x1094>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e688:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800e68c:	2a19      	cmp	r2, #25
 800e68e:	d841      	bhi.n	800e714 <_nx_http_server_thread_entry+0x123c>
            ch = (UCHAR)(*src - 'A' + 'a');
 800e690:	f107 0220 	add.w	r2, r7, #32
 800e694:	b2d2      	uxtb	r2, r2
 800e696:	e797      	b.n	800e5c8 <_nx_http_server_thread_entry+0x10f0>
            ch = (UCHAR)(*src - 'a' + 'A');
 800e698:	f1a7 0220 	sub.w	r2, r7, #32
 800e69c:	b2d2      	uxtb	r2, r2
 800e69e:	e6bb      	b.n	800e418 <_nx_http_server_thread_entry+0xf40>
 800e6a0:	f1a7 0220 	sub.w	r2, r7, #32
 800e6a4:	b2d2      	uxtb	r2, r2
 800e6a6:	e74f      	b.n	800e548 <_nx_http_server_thread_entry+0x1070>
 800e6a8:	f1a7 0220 	sub.w	r2, r7, #32
 800e6ac:	b2d2      	uxtb	r2, r2
 800e6ae:	e725      	b.n	800e4fc <_nx_http_server_thread_entry+0x1024>
 800e6b0:	f1a7 0220 	sub.w	r2, r7, #32
 800e6b4:	b2d2      	uxtb	r2, r2
 800e6b6:	e70e      	b.n	800e4d6 <_nx_http_server_thread_entry+0xffe>
 800e6b8:	f1a7 0220 	sub.w	r2, r7, #32
 800e6bc:	b2d2      	uxtb	r2, r2
 800e6be:	e6f7      	b.n	800e4b0 <_nx_http_server_thread_entry+0xfd8>
 800e6c0:	f1a7 0220 	sub.w	r2, r7, #32
 800e6c4:	b2d2      	uxtb	r2, r2
 800e6c6:	e6e0      	b.n	800e48a <_nx_http_server_thread_entry+0xfb2>
 800e6c8:	f1a7 0220 	sub.w	r2, r7, #32
 800e6cc:	b2d2      	uxtb	r2, r2
 800e6ce:	e6c9      	b.n	800e464 <_nx_http_server_thread_entry+0xf8c>
 800e6d0:	f1a7 0220 	sub.w	r2, r7, #32
 800e6d4:	b2d2      	uxtb	r2, r2
 800e6d6:	e6b2      	b.n	800e43e <_nx_http_server_thread_entry+0xf66>
 800e6d8:	f1a7 0220 	sub.w	r2, r7, #32
 800e6dc:	b2d2      	uxtb	r2, r2
 800e6de:	e662      	b.n	800e3a6 <_nx_http_server_thread_entry+0xece>
 800e6e0:	f1a7 0220 	sub.w	r2, r7, #32
 800e6e4:	b2d2      	uxtb	r2, r2
 800e6e6:	e684      	b.n	800e3f2 <_nx_http_server_thread_entry+0xf1a>
        else if((*src >= 'A') && (*src <= 'Z'))
 800e6e8:	463a      	mov	r2, r7
 800e6ea:	e761      	b.n	800e5b0 <_nx_http_server_thread_entry+0x10d8>
 800e6ec:	463a      	mov	r2, r7
 800e6ee:	e74e      	b.n	800e58e <_nx_http_server_thread_entry+0x10b6>
 800e6f0:	4617      	mov	r7, r2
 800e6f2:	e716      	b.n	800e522 <_nx_http_server_thread_entry+0x104a>
 800e6f4:	463a      	mov	r2, r7
 800e6f6:	e701      	b.n	800e4fc <_nx_http_server_thread_entry+0x1024>
 800e6f8:	463a      	mov	r2, r7
 800e6fa:	e725      	b.n	800e548 <_nx_http_server_thread_entry+0x1070>
 800e6fc:	463a      	mov	r2, r7
 800e6fe:	e6ea      	b.n	800e4d6 <_nx_http_server_thread_entry+0xffe>
 800e700:	463a      	mov	r2, r7
 800e702:	e6d5      	b.n	800e4b0 <_nx_http_server_thread_entry+0xfd8>
 800e704:	463a      	mov	r2, r7
 800e706:	e6c0      	b.n	800e48a <_nx_http_server_thread_entry+0xfb2>
 800e708:	463a      	mov	r2, r7
 800e70a:	e639      	b.n	800e380 <_nx_http_server_thread_entry+0xea8>
 800e70c:	4617      	mov	r7, r2
 800e70e:	e65d      	b.n	800e3cc <_nx_http_server_thread_entry+0xef4>
 800e710:	463a      	mov	r2, r7
 800e712:	e66e      	b.n	800e3f2 <_nx_http_server_thread_entry+0xf1a>
 800e714:	463a      	mov	r2, r7
 800e716:	e757      	b.n	800e5c8 <_nx_http_server_thread_entry+0x10f0>
 800e718:	463a      	mov	r2, r7
 800e71a:	e6a3      	b.n	800e464 <_nx_http_server_thread_entry+0xf8c>
 800e71c:	463a      	mov	r2, r7
 800e71e:	e68e      	b.n	800e43e <_nx_http_server_thread_entry+0xf66>
 800e720:	463a      	mov	r2, r7
 800e722:	e679      	b.n	800e418 <_nx_http_server_thread_entry+0xf40>
 800e724:	463a      	mov	r2, r7
 800e726:	e63e      	b.n	800e3a6 <_nx_http_server_thread_entry+0xece>
 800e728:	463a      	mov	r2, r7
 800e72a:	e71f      	b.n	800e56c <_nx_http_server_thread_entry+0x1094>
 800e72c:	aa1c      	add	r2, sp, #112	; 0x70
 800e72e:	4413      	add	r3, r2
    field_value[index] = 0;
 800e730:	f883 b000 	strb.w	fp, [r3]
            if(server_ptr -> nx_http_server_cache_info_get(server_ptr -> nx_http_server_request_resource, &max_age, &date) == NX_TRUE)
 800e734:	aa1a      	add	r2, sp, #104	; 0x68
 800e736:	a919      	add	r1, sp, #100	; 0x64
 800e738:	9808      	ldr	r0, [sp, #32]
 800e73a:	47a8      	blx	r5
 800e73c:	2801      	cmp	r0, #1
 800e73e:	f47f a919 	bne.w	800d974 <_nx_http_server_thread_entry+0x49c>
                temp = _nx_http_server_date_to_string(&date, date_string);
 800e742:	a924      	add	r1, sp, #144	; 0x90
 800e744:	a81a      	add	r0, sp, #104	; 0x68
 800e746:	f7fc ff91 	bl	800b66c <_nx_http_server_date_to_string>
                date_string[temp] = 0;
 800e74a:	ab2c      	add	r3, sp, #176	; 0xb0
                temp = _nx_http_server_date_to_string(&date, date_string);
 800e74c:	4602      	mov	r2, r0
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800e74e:	a924      	add	r1, sp, #144	; 0x90
 800e750:	a81c      	add	r0, sp, #112	; 0x70
                date_string[temp] = 0;
 800e752:	4413      	add	r3, r2
                temp = _nx_http_server_date_to_string(&date, date_string);
 800e754:	9211      	str	r2, [sp, #68]	; 0x44
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800e756:	3201      	adds	r2, #1
                date_string[temp] = 0;
 800e758:	f803 bc20 	strb.w	fp, [r3, #-32]
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800e75c:	f00f feea 	bl	801e534 <memcmp>
 800e760:	2800      	cmp	r0, #0
 800e762:	f47f a907 	bne.w	800d974 <_nx_http_server_thread_entry+0x49c>
                    _nx_http_server_response_send(server_ptr, NX_HTTP_STATUS_NOT_MODIFIED, sizeof(NX_HTTP_STATUS_NOT_MODIFIED) - 1, NX_NULL, 0, NX_NULL, 0);
 800e766:	9002      	str	r0, [sp, #8]
 800e768:	4603      	mov	r3, r0
 800e76a:	9001      	str	r0, [sp, #4]
 800e76c:	2210      	movs	r2, #16
 800e76e:	9000      	str	r0, [sp, #0]
 800e770:	4620      	mov	r0, r4
 800e772:	4916      	ldr	r1, [pc, #88]	; (800e7cc <_nx_http_server_thread_entry+0x12f4>)
 800e774:	f7fd faa6 	bl	800bcc4 <_nx_http_server_response_send>
 800e778:	f7fe bfb8 	b.w	800d6ec <_nx_http_server_thread_entry+0x214>
 800e77c:	ab1c      	add	r3, sp, #112	; 0x70
 800e77e:	444b      	add	r3, r9
 800e780:	e7d6      	b.n	800e730 <_nx_http_server_thread_entry+0x1258>
    while((index > 0) && (field_value[index - 1] == ' '))
 800e782:	ab1c      	add	r3, sp, #112	; 0x70
 800e784:	e7d4      	b.n	800e730 <_nx_http_server_thread_entry+0x1258>
 800e786:	ab1c      	add	r3, sp, #112	; 0x70
 800e788:	444b      	add	r3, r9
    field_value[index] = 0;
 800e78a:	f883 b000 	strb.w	fp, [r3]
            if(server_ptr -> nx_http_server_cache_info_get(server_ptr -> nx_http_server_request_resource, &max_age, &date) == NX_TRUE)
 800e78e:	aa1a      	add	r2, sp, #104	; 0x68
 800e790:	a919      	add	r1, sp, #100	; 0x64
 800e792:	9808      	ldr	r0, [sp, #32]
 800e794:	47a8      	blx	r5
 800e796:	2801      	cmp	r0, #1
 800e798:	f47f ab24 	bne.w	800dde4 <_nx_http_server_thread_entry+0x90c>
                temp = _nx_http_server_date_to_string(&date, date_string);
 800e79c:	a924      	add	r1, sp, #144	; 0x90
 800e79e:	a81a      	add	r0, sp, #104	; 0x68
 800e7a0:	f7fc ff64 	bl	800b66c <_nx_http_server_date_to_string>
                date_string[temp] = 0;
 800e7a4:	ab2c      	add	r3, sp, #176	; 0xb0
                temp = _nx_http_server_date_to_string(&date, date_string);
 800e7a6:	4602      	mov	r2, r0
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800e7a8:	a924      	add	r1, sp, #144	; 0x90
 800e7aa:	a81c      	add	r0, sp, #112	; 0x70
                date_string[temp] = 0;
 800e7ac:	4413      	add	r3, r2
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800e7ae:	3201      	adds	r2, #1
                date_string[temp] = 0;
 800e7b0:	f803 bc20 	strb.w	fp, [r3, #-32]
                if(memcmp(temp_string, date_string, temp + 1) == 0)
 800e7b4:	f00f febe 	bl	801e534 <memcmp>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	f47f ab13 	bne.w	800dde4 <_nx_http_server_thread_entry+0x90c>
 800e7be:	e7d2      	b.n	800e766 <_nx_http_server_thread_entry+0x128e>
    while((index > 0) && (field_value[index - 1] == ' '))
 800e7c0:	ab1c      	add	r3, sp, #112	; 0x70
 800e7c2:	e7e2      	b.n	800e78a <_nx_http_server_thread_entry+0x12b2>
 800e7c4:	aa1c      	add	r2, sp, #112	; 0x70
 800e7c6:	4413      	add	r3, r2
 800e7c8:	e7df      	b.n	800e78a <_nx_http_server_thread_entry+0x12b2>
 800e7ca:	bf00      	nop
 800e7cc:	080255ec 	.word	0x080255ec

0800e7d0 <_nxd_icmp_enable>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nxd_icmp_enable(NX_IP *ip_ptr)
{
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NXD_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e7d2:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 800e7d6:	4604      	mov	r4, r0
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e7d8:	f04f 31ff 	mov.w	r1, #4294967295
#ifndef NX_DISABLE_IPV4
    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;

    /* Start the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 800e7dc:	4f15      	ldr	r7, [pc, #84]	; (800e834 <_nxd_icmp_enable+0x64>)
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e7de:	4630      	mov	r0, r6

    /* Clear the destination table. */
    memset(&ip_ptr -> nx_ipv6_destination_table[0], 0, sizeof(NX_IPV6_DESTINATION_ENTRY) * NX_IPV6_DESTINATION_TABLE_SIZE);

    /* Set the initial size to zero. */
    ip_ptr -> nx_ipv6_destination_table_size = 0;
 800e7e0:	2500      	movs	r5, #0
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e7e2:	f00e f989 	bl	801caf8 <_tx_mutex_get>
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 800e7e6:	4b14      	ldr	r3, [pc, #80]	; (800e838 <_nxd_icmp_enable+0x68>)
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 800e7e8:	f8c4 7888 	str.w	r7, [r4, #2184]	; 0x888
    memset(&ip_ptr -> nx_ipv6_nd_cache[0], 0, sizeof(ND_CACHE_ENTRY) * NX_IPV6_NEIGHBOR_CACHE_SIZE);
 800e7ec:	4629      	mov	r1, r5
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 800e7ee:	f8c4 3884 	str.w	r3, [r4, #2180]	; 0x884
    memset(&ip_ptr -> nx_ipv6_nd_cache[0], 0, sizeof(ND_CACHE_ENTRY) * NX_IPV6_NEIGHBOR_CACHE_SIZE);
 800e7f2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    ip_ptr -> nx_ip_icmpv6_packet_process = _nx_icmpv6_packet_process;
 800e7f6:	4b11      	ldr	r3, [pc, #68]	; (800e83c <_nxd_icmp_enable+0x6c>)
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 800e7f8:	4a11      	ldr	r2, [pc, #68]	; (800e840 <_nxd_icmp_enable+0x70>)
    ip_ptr -> nx_ip_icmpv6_packet_process = _nx_icmpv6_packet_process;
 800e7fa:	f8c4 388c 	str.w	r3, [r4, #2188]	; 0x88c
    ip_ptr -> nx_nd_cache_fast_periodic_update = _nx_nd_cache_fast_periodic_update;
 800e7fe:	4f11      	ldr	r7, [pc, #68]	; (800e844 <_nxd_icmp_enable+0x74>)
    ip_ptr -> nx_nd_cache_slow_periodic_update = _nx_nd_cache_slow_periodic_update;
 800e800:	4b11      	ldr	r3, [pc, #68]	; (800e848 <_nxd_icmp_enable+0x78>)
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 800e802:	f8c4 2880 	str.w	r2, [r4, #2176]	; 0x880
    memset(&ip_ptr -> nx_ipv6_nd_cache[0], 0, sizeof(ND_CACHE_ENTRY) * NX_IPV6_NEIGHBOR_CACHE_SIZE);
 800e806:	f44f 7250 	mov.w	r2, #832	; 0x340
    ip_ptr -> nx_nd_cache_slow_periodic_update = _nx_nd_cache_slow_periodic_update;
 800e80a:	f8c4 3894 	str.w	r3, [r4, #2196]	; 0x894
    ip_ptr -> nx_nd_cache_fast_periodic_update = _nx_nd_cache_fast_periodic_update;
 800e80e:	f8c4 7890 	str.w	r7, [r4, #2192]	; 0x890
    memset(&ip_ptr -> nx_ipv6_nd_cache[0], 0, sizeof(ND_CACHE_ENTRY) * NX_IPV6_NEIGHBOR_CACHE_SIZE);
 800e812:	f00f fec2 	bl	801e59a <memset>
    memset(&ip_ptr -> nx_ipv6_destination_table[0], 0, sizeof(NX_IPV6_DESTINATION_ENTRY) * NX_IPV6_DESTINATION_TABLE_SIZE);
 800e816:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e81a:	4629      	mov	r1, r5
 800e81c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800e820:	f00f febb 	bl	801e59a <memset>
    ip_ptr -> nx_destination_table_periodic_update = _nx_icmpv6_destination_table_periodic_update;
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY  */

#endif /* FEATURE_NX_IPV6 */

    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e824:	4630      	mov	r0, r6
    ip_ptr -> nx_ipv6_destination_table_size = 0;
 800e826:	f8c4 5510 	str.w	r5, [r4, #1296]	; 0x510
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e82a:	f00e fa4f 	bl	801cccc <_tx_mutex_put>

    /* Return a successful status!  */
    return(NX_SUCCESS);
}
 800e82e:	4628      	mov	r0, r5
 800e830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e832:	bf00      	nop
 800e834:	08001d0d 	.word	0x08001d0d
 800e838:	08001cdd 	.word	0x08001cdd
 800e83c:	0800f77d 	.word	0x0800f77d
 800e840:	08001c8d 	.word	0x08001c8d
 800e844:	08012939 	.word	0x08012939
 800e848:	08012a11 	.word	0x08012a11

0800e84c <_nxd_ipv6_address_get>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_address_get(NX_IP *ip_ptr, UINT address_index, NXD_ADDRESS *ip_address,
                            ULONG *prefix_length, UINT *interface_index)
{
 800e84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}


    status = NX_SUCCESS;

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e850:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 800e854:	4605      	mov	r5, r0
 800e856:	460c      	mov	r4, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e858:	f04f 31ff 	mov.w	r1, #4294967295
 800e85c:	4630      	mov	r0, r6
{
 800e85e:	4690      	mov	r8, r2
 800e860:	461f      	mov	r7, r3
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e862:	f00e f949 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e866:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e86a:	b672      	cpsid	i

    /* Get the ip address.  */
    interface_ipv6_address_next = &ip_ptr -> nx_ipv6_address[address_index];

    /* Check if this is a valid IP address. */
    if (interface_ipv6_address_next -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800e86c:	0163      	lsls	r3, r4, #5
 800e86e:	f108 0104 	add.w	r1, r8, #4
 800e872:	18ec      	adds	r4, r5, r3
 800e874:	7ca2      	ldrb	r2, [r4, #18]
 800e876:	2a04      	cmp	r2, #4
 800e878:	d117      	bne.n	800e8aa <_nxd_ipv6_address_get+0x5e>
    }
    else
    {

        /* Record the interface index.  */
        *interface_index = (UINT)ip_ptr -> nx_ipv6_address[address_index].nxd_ipv6_address_attached -> nx_interface_index;
 800e87a:	6960      	ldr	r0, [r4, #20]

        /* We have a valid address. Mark with the IPv6 stamp. */
        ip_address -> nxd_ip_version = NX_IP_VERSION_V6;

        /* Copy interface IP address from the address entry in the IP address table into the return address structure. */
        COPY_IPV6_ADDRESS(interface_ipv6_address_next -> nxd_ipv6_address,
 800e87c:	3318      	adds	r3, #24
        ip_address -> nxd_ip_version = NX_IP_VERSION_V6;
 800e87e:	2206      	movs	r2, #6
        *interface_index = (UINT)ip_ptr -> nx_ipv6_address[address_index].nxd_ipv6_address_attached -> nx_interface_index;
 800e880:	f890 c007 	ldrb.w	ip, [r0, #7]
        COPY_IPV6_ADDRESS(interface_ipv6_address_next -> nxd_ipv6_address,
 800e884:	18e8      	adds	r0, r5, r3
        *interface_index = (UINT)ip_ptr -> nx_ipv6_address[address_index].nxd_ipv6_address_attached -> nx_interface_index;
 800e886:	9b08      	ldr	r3, [sp, #32]
    status = NX_SUCCESS;
 800e888:	2500      	movs	r5, #0
        *interface_index = (UINT)ip_ptr -> nx_ipv6_address[address_index].nxd_ipv6_address_attached -> nx_interface_index;
 800e88a:	f8c3 c000 	str.w	ip, [r3]
        ip_address -> nxd_ip_version = NX_IP_VERSION_V6;
 800e88e:	f8c8 2000 	str.w	r2, [r8]
        COPY_IPV6_ADDRESS(interface_ipv6_address_next -> nxd_ipv6_address,
 800e892:	f7f7 fe1b 	bl	80064cc <COPY_IPV6_ADDRESS>
                          ip_address -> nxd_ip_address.v6);

        /* Copy interface IP address prefix length from the address entry in the IP address table into the return prefix length. */
        *prefix_length = interface_ipv6_address_next -> nxd_ipv6_address_prefix_length;
 800e896:	7ce3      	ldrb	r3, [r4, #19]
 800e898:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e89a:	f389 8810 	msr	PRIMASK, r9

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e89e:	4630      	mov	r0, r6
 800e8a0:	f00e fa14 	bl	801cccc <_tx_mutex_put>
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *prefix_length = 0;
 800e8aa:	2300      	movs	r3, #0
        SET_UNSPECIFIED_ADDRESS(ip_address -> nxd_ip_address.v6);
 800e8ac:	4608      	mov	r0, r1
        status = NX_NO_INTERFACE_ADDRESS;
 800e8ae:	2550      	movs	r5, #80	; 0x50
        *prefix_length = 0;
 800e8b0:	603b      	str	r3, [r7, #0]
        SET_UNSPECIFIED_ADDRESS(ip_address -> nxd_ip_address.v6);
 800e8b2:	f7f7 fe05 	bl	80064c0 <SET_UNSPECIFIED_ADDRESS>
 800e8b6:	f389 8810 	msr	PRIMASK, r9
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f00e fa06 	bl	801cccc <_tx_mutex_put>
}
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8c6:	bf00      	nop

0800e8c8 <_nxd_ipv6_address_set>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_address_set(NX_IP *ip_ptr, UINT interface_index, NXD_ADDRESS *ip_address, ULONG prefix_length, UINT *address_index)
{
 800e8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
UINT              index = (UINT)0xFFFFFFFF;
UINT              i;
ULONG             multicast_address[4];

    /* Place protection while the IPv6 address is modified. */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e8cc:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 800e8d0:	b087      	sub	sp, #28
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	4615      	mov	r5, r2
 800e8d6:	460f      	mov	r7, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f04f 31ff 	mov.w	r1, #4294967295
{
 800e8de:	4698      	mov	r8, r3
 800e8e0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e8e4:	f00e f908 	bl	801caf8 <_tx_mutex_get>
    {

        /* Perform duplicate address detection.  */
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
        {
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 800e8e8:	7c21      	ldrb	r1, [r4, #16]
    if (ip_address)
 800e8ea:	b175      	cbz	r5, 800e90a <_nxd_ipv6_address_set+0x42>
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 800e8ec:	b119      	cbz	r1, 800e8f6 <_nxd_ipv6_address_set+0x2e>
 800e8ee:	69a2      	ldr	r2, [r4, #24]
 800e8f0:	686b      	ldr	r3, [r5, #4]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d03a      	beq.n	800e96c <_nxd_ipv6_address_set+0xa4>
 800e8f6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e8fa:	b11b      	cbz	r3, 800e904 <_nxd_ipv6_address_set+0x3c>
 800e8fc:	686a      	ldr	r2, [r5, #4]
 800e8fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e900:	429a      	cmp	r2, r3
 800e902:	d026      	beq.n	800e952 <_nxd_ipv6_address_set+0x8a>
 800e904:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800e908:	b993      	cbnz	r3, 800e930 <_nxd_ipv6_address_set+0x68>

    /* Find an avaiable IPv6 address structure. */
    for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
    {
        /* Look for invalid entries. */
        if (!ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid)
 800e90a:	2900      	cmp	r1, #0
 800e90c:	d03f      	beq.n	800e98e <_nxd_ipv6_address_set+0xc6>
 800e90e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 80ed 	beq.w	800eaf2 <_nxd_ipv6_address_set+0x22a>
 800e918:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 80ee 	beq.w	800eafe <_nxd_ipv6_address_set+0x236>
        }
    }

    if (index == (UINT)0xFFFFFFFF)
    {
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e922:	4630      	mov	r0, r6
 800e924:	f00e f9d2 	bl	801cccc <_tx_mutex_put>
        return(NX_NO_MORE_ENTRIES);
 800e928:	2017      	movs	r0, #23
    NX_PARAMETER_NOT_USED(address_index);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 800e92a:	b007      	add	sp, #28
 800e92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 800e930:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e932:	686b      	ldr	r3, [r5, #4]
 800e934:	429a      	cmp	r2, r3
 800e936:	d1e8      	bne.n	800e90a <_nxd_ipv6_address_set+0x42>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[0] == ip_address -> nxd_ip_address.v6[0]) &&
 800e938:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e93a:	68ab      	ldr	r3, [r5, #8]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d1e4      	bne.n	800e90a <_nxd_ipv6_address_set+0x42>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[1] == ip_address -> nxd_ip_address.v6[1]) &&
 800e940:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e942:	68eb      	ldr	r3, [r5, #12]
 800e944:	429a      	cmp	r2, r3
 800e946:	d1e0      	bne.n	800e90a <_nxd_ipv6_address_set+0x42>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[2] == ip_address -> nxd_ip_address.v6[2]) &&
 800e948:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e94a:	692b      	ldr	r3, [r5, #16]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d1dc      	bne.n	800e90a <_nxd_ipv6_address_set+0x42>
 800e950:	e018      	b.n	800e984 <_nxd_ipv6_address_set+0xbc>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[0] == ip_address -> nxd_ip_address.v6[0]) &&
 800e952:	68aa      	ldr	r2, [r5, #8]
 800e954:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e956:	429a      	cmp	r2, r3
 800e958:	d1d4      	bne.n	800e904 <_nxd_ipv6_address_set+0x3c>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[1] == ip_address -> nxd_ip_address.v6[1]) &&
 800e95a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e95c:	68eb      	ldr	r3, [r5, #12]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d1d0      	bne.n	800e904 <_nxd_ipv6_address_set+0x3c>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[2] == ip_address -> nxd_ip_address.v6[2]) &&
 800e962:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e964:	692b      	ldr	r3, [r5, #16]
 800e966:	429a      	cmp	r2, r3
 800e968:	d1cc      	bne.n	800e904 <_nxd_ipv6_address_set+0x3c>
 800e96a:	e00b      	b.n	800e984 <_nxd_ipv6_address_set+0xbc>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[0] == ip_address -> nxd_ip_address.v6[0]) &&
 800e96c:	69e2      	ldr	r2, [r4, #28]
 800e96e:	68ab      	ldr	r3, [r5, #8]
 800e970:	429a      	cmp	r2, r3
 800e972:	d1c0      	bne.n	800e8f6 <_nxd_ipv6_address_set+0x2e>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[1] == ip_address -> nxd_ip_address.v6[1]) &&
 800e974:	6a22      	ldr	r2, [r4, #32]
 800e976:	68eb      	ldr	r3, [r5, #12]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d1bc      	bne.n	800e8f6 <_nxd_ipv6_address_set+0x2e>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[2] == ip_address -> nxd_ip_address.v6[2]) &&
 800e97c:	692a      	ldr	r2, [r5, #16]
 800e97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e980:	429a      	cmp	r2, r3
 800e982:	d1b8      	bne.n	800e8f6 <_nxd_ipv6_address_set+0x2e>
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e984:	4630      	mov	r0, r6
 800e986:	f00e f9a1 	bl	801cccc <_tx_mutex_put>
                return(NX_DUPLICATED_ENTRY);
 800e98a:	2052      	movs	r0, #82	; 0x52
 800e98c:	e7cd      	b.n	800e92a <_nxd_ipv6_address_set+0x62>
        if (!ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid)
 800e98e:	468a      	mov	sl, r1
 800e990:	f04f 0c10 	mov.w	ip, #16
 800e994:	4608      	mov	r0, r1
    if (address_index)
 800e996:	f1b9 0f00 	cmp.w	r9, #0
 800e99a:	d001      	beq.n	800e9a0 <_nxd_ipv6_address_set+0xd8>
        *address_index = index;
 800e99c:	f8c9 0000 	str.w	r0, [r9]
    ipv6_addr = &(ip_ptr -> nx_ipv6_address[index]);
 800e9a0:	44a4      	add	ip, r4
    if ((!ip_address) && (prefix_length == 10))
 800e9a2:	2d00      	cmp	r5, #0
 800e9a4:	d143      	bne.n	800ea2e <_nxd_ipv6_address_set+0x166>
 800e9a6:	f1b8 0f0a 	cmp.w	r8, #10
 800e9aa:	d140      	bne.n	800ea2e <_nxd_ipv6_address_set+0x166>
            ((ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_lsw & 0xFF000000) >> 16) | 0xFF;
 800e9ac:	00b9      	lsls	r1, r7, #2
 800e9ae:	19ca      	adds	r2, r1, r7
 800e9b0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800e9b4:	f8d2 9c58 	ldr.w	r9, [r2, #3160]	; 0xc58
        word2 = ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_msw << 16 |
 800e9b8:	f8d2 5c54 	ldr.w	r5, [r2, #3156]	; 0xc54
            ((ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_lsw & 0xFF000000) >> 16) | 0xFF;
 800e9bc:	ea4f 4319 	mov.w	r3, r9, lsr #16
        interface_ipv6_address = ip_ptr -> nx_ip_interface[interface_index].nxd_interface_ipv6_address_list_head;
 800e9c0:	f8d2 ec68 	ldr.w	lr, [r2, #3176]	; 0xc68
        word3 = (ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_lsw & 0x00FFFFFF) | 0xFE000000;
 800e9c4:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
            ((ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_lsw & 0xFF000000) >> 16) | 0xFF;
 800e9c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        word3 = (ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_lsw & 0x00FFFFFF) | 0xFE000000;
 800e9cc:	f049 497e 	orr.w	r9, r9, #4261412864	; 0xfe000000
        word2 = ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_msw << 16 |
 800e9d0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
        word2 = (word2 & 0xFDFFFFFF) | (~(word2 | 0xFDFFFFFF));
 800e9d4:	f023 7500 	bic.w	r5, r3, #33554432	; 0x2000000
 800e9d8:	f063 7300 	orn	r3, r3, #33554432	; 0x2000000
 800e9dc:	f045 05ff 	orr.w	r5, r5, #255	; 0xff
 800e9e0:	ea65 0503 	orn	r5, r5, r3
        while (interface_ipv6_address)
 800e9e4:	f1be 0f00 	cmp.w	lr, #0
 800e9e8:	d013      	beq.n	800ea12 <_nxd_ipv6_address_set+0x14a>
 800e9ea:	4673      	mov	r3, lr
 800e9ec:	e001      	b.n	800e9f2 <_nxd_ipv6_address_set+0x12a>
            interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 800e9ee:	699b      	ldr	r3, [r3, #24]
        while (interface_ipv6_address)
 800e9f0:	b17b      	cbz	r3, 800ea12 <_nxd_ipv6_address_set+0x14a>
            if ((interface_ipv6_address -> nxd_ipv6_address[0] == 0xFE800000) &&
 800e9f2:	689a      	ldr	r2, [r3, #8]
 800e9f4:	f112 7fc0 	cmn.w	r2, #25165824	; 0x1800000
 800e9f8:	d1f9      	bne.n	800e9ee <_nxd_ipv6_address_set+0x126>
 800e9fa:	68da      	ldr	r2, [r3, #12]
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	d1f6      	bne.n	800e9ee <_nxd_ipv6_address_set+0x126>
                (interface_ipv6_address -> nxd_ipv6_address[1] == 0x00000000) &&
 800ea00:	691a      	ldr	r2, [r3, #16]
 800ea02:	42aa      	cmp	r2, r5
 800ea04:	d1f3      	bne.n	800e9ee <_nxd_ipv6_address_set+0x126>
                (interface_ipv6_address -> nxd_ipv6_address[2] == word2) &&
 800ea06:	695a      	ldr	r2, [r3, #20]
 800ea08:	454a      	cmp	r2, r9
 800ea0a:	d0bb      	beq.n	800e984 <_nxd_ipv6_address_set+0xbc>
            interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 800ea0c:	699b      	ldr	r3, [r3, #24]
        while (interface_ipv6_address)
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1ef      	bne.n	800e9f2 <_nxd_ipv6_address_set+0x12a>
        ipv6_addr -> nxd_ipv6_address[0] = 0xFE800000;
 800ea12:	0143      	lsls	r3, r0, #5
        ipv6_addr -> nxd_ipv6_address[1] = 0x00000000;
 800ea14:	f04f 0b00 	mov.w	fp, #0
        ipv6_addr -> nxd_ipv6_address[2] = word2;
 800ea18:	eb04 1040 	add.w	r0, r4, r0, lsl #5
        ipv6_addr -> nxd_ipv6_address[0] = 0xFE800000;
 800ea1c:	4602      	mov	r2, r0
        ipv6_addr -> nxd_ipv6_address[2] = word2;
 800ea1e:	9001      	str	r0, [sp, #4]
        ipv6_addr -> nxd_ipv6_address[0] = 0xFE800000;
 800ea20:	483d      	ldr	r0, [pc, #244]	; (800eb18 <_nxd_ipv6_address_set+0x250>)
        ipv6_addr -> nxd_ipv6_address[2] = word2;
 800ea22:	6215      	str	r5, [r2, #32]
        ipv6_addr -> nxd_ipv6_address[3] = word3;
 800ea24:	f8c2 9024 	str.w	r9, [r2, #36]	; 0x24
        ipv6_addr -> nxd_ipv6_address[1] = 0x00000000;
 800ea28:	e9c2 0b06 	strd	r0, fp, [r2, #24]
 800ea2c:	e014      	b.n	800ea58 <_nxd_ipv6_address_set+0x190>
    else if (ip_address != NX_NULL)
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	d06d      	beq.n	800eb0e <_nxd_ipv6_address_set+0x246>
 800ea32:	00b9      	lsls	r1, r7, #2
        ipv6_addr -> nxd_ipv6_address[1] = ip_address -> nxd_ip_address.v6[1];
 800ea34:	f8d5 9008 	ldr.w	r9, [r5, #8]
        ipv6_addr -> nxd_ipv6_address[0] = ip_address -> nxd_ip_address.v6[0];
 800ea38:	686a      	ldr	r2, [r5, #4]
 800ea3a:	0143      	lsls	r3, r0, #5
 800ea3c:	eb01 0e07 	add.w	lr, r1, r7
        ipv6_addr -> nxd_ipv6_address[2] = ip_address -> nxd_ip_address.v6[2];
 800ea40:	eb04 1040 	add.w	r0, r4, r0, lsl #5
 800ea44:	eb04 1e0e 	add.w	lr, r4, lr, lsl #4
        ipv6_addr -> nxd_ipv6_address[1] = ip_address -> nxd_ip_address.v6[1];
 800ea48:	e9c0 2906 	strd	r2, r9, [r0, #24]
        ipv6_addr -> nxd_ipv6_address[3] = ip_address -> nxd_ip_address.v6[3];
 800ea4c:	e9d5 2503 	ldrd	r2, r5, [r5, #12]
        ipv6_addr -> nxd_ipv6_address[2] = ip_address -> nxd_ip_address.v6[2];
 800ea50:	6202      	str	r2, [r0, #32]
        ipv6_addr -> nxd_ipv6_address[3] = ip_address -> nxd_ip_address.v6[3];
 800ea52:	6245      	str	r5, [r0, #36]	; 0x24
 800ea54:	f8de ec68 	ldr.w	lr, [lr, #3176]	; 0xc68
    ipv6_addr -> nxd_ipv6_address_attached = &ip_ptr -> nx_ip_interface[interface_index];
 800ea58:	440f      	add	r7, r1
    ipv6_addr -> nxd_ipv6_address_valid = NX_TRUE;
 800ea5a:	18e2      	adds	r2, r4, r3
 800ea5c:	f240 6101 	movw	r1, #1537	; 0x601
    ipv6_addr -> nxd_ipv6_address_next = NX_NULL;
 800ea60:	2000      	movs	r0, #0
    ipv6_addr -> nxd_ipv6_address_attached = &ip_ptr -> nx_ip_interface[interface_index];
 800ea62:	013f      	lsls	r7, r7, #4
    ipv6_addr -> nxd_ipv6_address_prefix_length = (UCHAR)(prefix_length & 0xFF);
 800ea64:	f882 8013 	strb.w	r8, [r2, #19]
    ipv6_addr -> nxd_ipv6_address_valid = NX_TRUE;
 800ea68:	8211      	strh	r1, [r2, #16]
    ipv6_addr -> nxd_ipv6_address_attached = &ip_ptr -> nx_ip_interface[interface_index];
 800ea6a:	f607 4148 	addw	r1, r7, #3144	; 0xc48
    ipv6_addr -> nxd_ipv6_address_next = NX_NULL;
 800ea6e:	6290      	str	r0, [r2, #40]	; 0x28
    ipv6_addr -> nxd_ipv6_address_attached = &ip_ptr -> nx_ip_interface[interface_index];
 800ea70:	4421      	add	r1, r4
 800ea72:	6151      	str	r1, [r2, #20]
    while (interface_ipv6_address)
 800ea74:	f1be 0f00 	cmp.w	lr, #0
 800ea78:	d037      	beq.n	800eaea <_nxd_ipv6_address_set+0x222>
        if (interface_ipv6_address -> nxd_ipv6_address_next)
 800ea7a:	f8de 1018 	ldr.w	r1, [lr, #24]
 800ea7e:	b909      	cbnz	r1, 800ea84 <_nxd_ipv6_address_set+0x1bc>
 800ea80:	e043      	b.n	800eb0a <_nxd_ipv6_address_set+0x242>
 800ea82:	4611      	mov	r1, r2
 800ea84:	698a      	ldr	r2, [r1, #24]
 800ea86:	2a00      	cmp	r2, #0
 800ea88:	d1fb      	bne.n	800ea82 <_nxd_ipv6_address_set+0x1ba>
            interface_ipv6_address -> nxd_ipv6_address_next = ipv6_addr;
 800ea8a:	f8c1 c018 	str.w	ip, [r1, #24]
    ipv6_addr -> nxd_ipv6_address_ConfigurationMethod = NX_IPV6_ADDRESS_MANUAL_CONFIG;
 800ea8e:	18e5      	adds	r5, r4, r3
 800ea90:	2301      	movs	r3, #1
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ea92:	4630      	mov	r0, r6
    ipv6_addr -> nxd_ipv6_address_ConfigurationMethod = NX_IPV6_ADDRESS_MANUAL_CONFIG;
 800ea94:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ea98:	f00e f918 	bl	801cccc <_tx_mutex_put>
    SET_SOLICITED_NODE_MULTICAST_ADDRESS(multicast_address, ipv6_addr -> nxd_ipv6_address);
 800ea9c:	f10a 0118 	add.w	r1, sl, #24
 800eaa0:	a802      	add	r0, sp, #8
 800eaa2:	4421      	add	r1, r4
 800eaa4:	f7f7 fd1c 	bl	80064e0 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
    _nx_ipv6_multicast_join(ip_ptr, &multicast_address[0], ipv6_addr -> nxd_ipv6_address_attached);
 800eaa8:	a902      	add	r1, sp, #8
 800eaaa:	696a      	ldr	r2, [r5, #20]
 800eaac:	4620      	mov	r0, r4
 800eaae:	f7f7 fca7 	bl	8006400 <_nx_ipv6_multicast_join>
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800eab2:	f04f 31ff 	mov.w	r1, #4294967295
 800eab6:	4630      	mov	r0, r6
 800eab8:	f00e f81e 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eabc:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eac0:	b672      	cpsid	i
    if (ip_ptr -> nx_ip_icmpv6_packet_process)
 800eac2:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
        ipv6_addr -> nxd_ipv6_address_DupAddrDetectTransmit = NX_IPV6_DAD_TRANSMITS;
 800eac6:	2a00      	cmp	r2, #0
 800eac8:	bf0b      	itete	eq
 800eaca:	2100      	moveq	r1, #0
 800eacc:	2103      	movne	r1, #3
 800eace:	2204      	moveq	r2, #4
 800ead0:	2201      	movne	r2, #1
 800ead2:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
 800ead6:	74aa      	strb	r2, [r5, #18]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ead8:	f383 8810 	msr	PRIMASK, r3
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800eadc:	4630      	mov	r0, r6
 800eade:	f00e f8f5 	bl	801cccc <_tx_mutex_put>
    return(NX_SUCCESS);
 800eae2:	2000      	movs	r0, #0
}
 800eae4:	b007      	add	sp, #28
 800eae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_ptr -> nx_ip_interface[interface_index].nxd_interface_ipv6_address_list_head = ipv6_addr;
 800eaea:	4427      	add	r7, r4
 800eaec:	f8c7 cc68 	str.w	ip, [r7, #3176]	; 0xc68
 800eaf0:	e7cd      	b.n	800ea8e <_nxd_ipv6_address_set+0x1c6>
        if (!ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid)
 800eaf2:	f04f 0a20 	mov.w	sl, #32
 800eaf6:	f04f 0c30 	mov.w	ip, #48	; 0x30
    for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 800eafa:	2001      	movs	r0, #1
 800eafc:	e74b      	b.n	800e996 <_nxd_ipv6_address_set+0xce>
        if (!ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid)
 800eafe:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800eb02:	f04f 0c50 	mov.w	ip, #80	; 0x50
    for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 800eb06:	2002      	movs	r0, #2
 800eb08:	e745      	b.n	800e996 <_nxd_ipv6_address_set+0xce>
        if (interface_ipv6_address -> nxd_ipv6_address_next)
 800eb0a:	4671      	mov	r1, lr
 800eb0c:	e7bd      	b.n	800ea8a <_nxd_ipv6_address_set+0x1c2>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800eb0e:	4630      	mov	r0, r6
 800eb10:	f00e f8dc 	bl	801cccc <_tx_mutex_put>
        return(NX_IP_ADDRESS_ERROR);
 800eb14:	2021      	movs	r0, #33	; 0x21
 800eb16:	e708      	b.n	800e92a <_nxd_ipv6_address_set+0x62>
 800eb18:	fe800000 	.word	0xfe800000

0800eb1c <_nxd_ipv6_enable>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_enable(NX_IP *ip_ptr)
{
 800eb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
ULONG address[4];
#endif /* NX_DISABLE_ICMPV6_ROUTER_SOLICITATION */


    /* Make sure IPv6 is not already enabled. */
    if (ip_ptr -> nx_ipv6_packet_receive)
 800eb1e:	f8d0 5edc 	ldr.w	r5, [r0, #3804]	; 0xedc
{
 800eb22:	b085      	sub	sp, #20
    if (ip_ptr -> nx_ipv6_packet_receive)
 800eb24:	b115      	cbz	r5, 800eb2c <_nxd_ipv6_enable+0x10>
    {
        return(NX_ALREADY_ENABLED);
 800eb26:	2015      	movs	r0, #21
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 800eb28:	b005      	add	sp, #20
 800eb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800eb2c:	f200 663c 	addw	r6, r0, #1596	; 0x63c
 800eb30:	4604      	mov	r4, r0
 800eb32:	f04f 31ff 	mov.w	r1, #4294967295
 800eb36:	4630      	mov	r0, r6
 800eb38:	f00d ffde 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eb3c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eb40:	b672      	cpsid	i
    ip_ptr -> nx_ipv6_packet_receive = _nx_ipv6_packet_receive;
 800eb42:	4a28      	ldr	r2, [pc, #160]	; (800ebe4 <_nxd_ipv6_enable+0xc8>)
 800eb44:	f8c4 2edc 	str.w	r2, [r4, #3804]	; 0xedc
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eb48:	f383 8810 	msr	PRIMASK, r3
    _nxd_ipv6_default_router_table_init(ip_ptr);
 800eb4c:	4620      	mov	r0, r4
    ip_ptr -> nx_ipv6_retrans_timer_ticks = (NX_RETRANS_TIMER * NX_IP_FAST_TIMER_RATE) / 1000;
 800eb4e:	270a      	movs	r7, #10
    _nxd_ipv6_default_router_table_init(ip_ptr);
 800eb50:	f006 f882 	bl	8014c58 <_nxd_ipv6_default_router_table_init>
        ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_index = (UCHAR)i;
 800eb54:	2102      	movs	r1, #2
 800eb56:	2201      	movs	r2, #1
    ip_ptr -> nx_ipv6_hop_limit = 0xFF;
 800eb58:	20ff      	movs	r0, #255	; 0xff
        ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_index = (UCHAR)i;
 800eb5a:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
    ip_ptr -> nx_ipv6_reachable_timer = NX_REACHABLE_TIME;
 800eb5e:	f04f 0c1e 	mov.w	ip, #30
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_TRUE)
 800eb62:	f894 1c4c 	ldrb.w	r1, [r4, #3148]	; 0xc4c
        ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_index = (UCHAR)i;
 800eb66:	2303      	movs	r3, #3
    ip_ptr -> nx_ipv6_hop_limit = 0xFF;
 800eb68:	f8c4 0ee8 	str.w	r0, [r4, #3816]	; 0xee8
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_TRUE)
 800eb6c:	4291      	cmp	r1, r2
    address[0] = 0xFF020000;
 800eb6e:	481e      	ldr	r0, [pc, #120]	; (800ebe8 <_nxd_ipv6_enable+0xcc>)
        ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_index = (UCHAR)i;
 800eb70:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    address[1] = 0;
 800eb74:	9501      	str	r5, [sp, #4]
    address[2] = 0;
 800eb76:	9502      	str	r5, [sp, #8]
    ip_ptr -> nx_ipv6_reachable_timer = NX_REACHABLE_TIME;
 800eb78:	f8c4 cee4 	str.w	ip, [r4, #3812]	; 0xee4
    ip_ptr -> nx_ipv6_retrans_timer_ticks = (NX_RETRANS_TIMER * NX_IP_FAST_TIMER_RATE) / 1000;
 800eb7c:	f8c4 7ee0 	str.w	r7, [r4, #3808]	; 0xee0
    address[0] = 0xFF020000;
 800eb80:	9000      	str	r0, [sp, #0]
        ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_index = (UCHAR)i;
 800eb82:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
    address[3] = 1;
 800eb86:	9203      	str	r2, [sp, #12]
        ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_index = (UCHAR)i;
 800eb88:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_TRUE)
 800eb8c:	d10e      	bne.n	800ebac <_nxd_ipv6_enable+0x90>
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_interval = NX_ICMPV6_RTR_SOLICITATION_INTERVAL;
 800eb8e:	2004      	movs	r0, #4
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer = NX_ICMPV6_RTR_SOLICITATION_DELAY;
 800eb90:	f8c4 1c7c 	str.w	r1, [r4, #3196]	; 0xc7c
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_max = NX_ICMPV6_MAX_RTR_SOLICITATIONS;
 800eb94:	f8c4 3c70 	str.w	r3, [r4, #3184]	; 0xc70
            _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 800eb98:	f604 4248 	addw	r2, r4, #3144	; 0xc48
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_interval = NX_ICMPV6_RTR_SOLICITATION_INTERVAL;
 800eb9c:	f8c4 0c78 	str.w	r0, [r4, #3192]	; 0xc78
            _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 800eba0:	4669      	mov	r1, sp
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count = ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_max;
 800eba2:	f8c4 3c74 	str.w	r3, [r4, #3188]	; 0xc74
            _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 800eba6:	4620      	mov	r0, r4
 800eba8:	f7f7 fc2a 	bl	8006400 <_nx_ipv6_multicast_join>
    _nx_ip_fast_periodic_timer_create(ip_ptr);
 800ebac:	4620      	mov	r0, r4
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[0] = 0x0;
 800ebae:	2500      	movs	r5, #0
    _nx_ip_fast_periodic_timer_create(ip_ptr);
 800ebb0:	f002 fb96 	bl	80112e0 <_nx_ip_fast_periodic_timer_create>
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_attached = &ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE];
 800ebb4:	f604 4798 	addw	r7, r4, #3224	; 0xc98
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[3] = 0x1;
 800ebb8:	2201      	movs	r2, #1
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_valid = NX_TRUE;
 800ebba:	4623      	mov	r3, r4
 800ebbc:	490b      	ldr	r1, [pc, #44]	; (800ebec <_nxd_ipv6_enable+0xd0>)
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ebbe:	4630      	mov	r0, r6
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[2] = 0x0;
 800ebc0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_ConfigurationMethod = NX_IPV6_ADDRESS_MANUAL_CONFIG;
 800ebc4:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_attached = &ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE];
 800ebc8:	6767      	str	r7, [r4, #116]	; 0x74
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[1] = 0x0;
 800ebca:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[3] = 0x1;
 800ebce:	e9c4 2521 	strd	r2, r5, [r4, #132]	; 0x84
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_valid = NX_TRUE;
 800ebd2:	f843 1f70 	str.w	r1, [r3, #112]!
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nxd_interface_ipv6_address_list_head = &ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX];
 800ebd6:	f8c4 3cb8 	str.w	r3, [r4, #3256]	; 0xcb8
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ebda:	f00e f877 	bl	801cccc <_tx_mutex_put>
    return(NX_SUCCESS);
 800ebde:	4628      	mov	r0, r5
}
 800ebe0:	b005      	add	sp, #20
 800ebe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebe4:	08011fb5 	.word	0x08011fb5
 800ebe8:	ff020000 	.word	0xff020000
 800ebec:	80040601 	.word	0x80040601

0800ebf0 <_nxd_ipv6_prefix_router_timer_tick>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nxd_ipv6_prefix_router_timer_tick(NX_IP *ip_ptr)
{
 800ebf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
NX_IPV6_PREFIX_ENTRY         *tmp, *prefix_entry;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;


    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_default_router_table_size;
 800ebf4:	f8b0 6cec 	ldrh.w	r6, [r0, #3308]	; 0xcec
{
 800ebf8:	4607      	mov	r7, r0

    /* Check each entry in the default router table. */
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 800ebfa:	b386      	cbz	r6, 800ec5e <_nxd_ipv6_prefix_router_timer_tick+0x6e>
 800ebfc:	2500      	movs	r5, #0
 800ebfe:	f600 44f4 	addw	r4, r0, #3316	; 0xcf4
            ip_ptr -> nx_ipv6_default_router_table_size--;
        }
        else
        {
            /* Is this a static router (infinite timeout)? */
            if (rt_entry -> nx_ipv6_default_router_entry_life_time != 0xFFFF)
 800ec02:	f64f 78ff 	movw	r8, #65535	; 0xffff
            rt_entry -> nx_ipv6_default_router_entry_flag = 0;
 800ec06:	46a9      	mov	r9, r5
 800ec08:	e012      	b.n	800ec30 <_nxd_ipv6_prefix_router_timer_tick+0x40>
            if (rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr)
 800ec0a:	6962      	ldr	r2, [r4, #20]
 800ec0c:	b102      	cbz	r2, 800ec10 <_nxd_ipv6_prefix_router_timer_tick+0x20>
                rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr -> nx_nd_cache_is_router = NX_NULL;
 800ec0e:	6253      	str	r3, [r2, #36]	; 0x24
            _nx_invalidate_destination_entry(ip_ptr, rt_entry -> nx_ipv6_default_router_entry_router_address);
 800ec10:	f002 f828 	bl	8010c64 <_nx_invalidate_destination_entry>
            rt_entry -> nx_ipv6_default_router_entry_flag = 0;
 800ec14:	f804 9c04 	strb.w	r9, [r4, #-4]
            rt_entry -> nx_ipv6_default_router_entry_interface_ptr = NX_NULL;
 800ec18:	f8c4 9010 	str.w	r9, [r4, #16]
            ip_ptr -> nx_ipv6_default_router_table_size--;
 800ec1c:	f8b7 3cec 	ldrh.w	r3, [r7, #3308]	; 0xcec
 800ec20:	3b01      	subs	r3, #1
 800ec22:	f8a7 3cec 	strh.w	r3, [r7, #3308]	; 0xcec
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 800ec26:	3501      	adds	r5, #1
 800ec28:	341c      	adds	r4, #28
 800ec2a:	b1c6      	cbz	r6, 800ec5e <_nxd_ipv6_prefix_router_timer_tick+0x6e>
 800ec2c:	2d07      	cmp	r5, #7
 800ec2e:	d816      	bhi.n	800ec5e <_nxd_ipv6_prefix_router_timer_tick+0x6e>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) == 0)
 800ec30:	f914 3c04 	ldrsb.w	r3, [r4, #-4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	daf6      	bge.n	800ec26 <_nxd_ipv6_prefix_router_timer_tick+0x36>
        if (rt_entry -> nx_ipv6_default_router_entry_life_time == 0)
 800ec38:	f834 3c02 	ldrh.w	r3, [r4, #-2]
            _nx_invalidate_destination_entry(ip_ptr, rt_entry -> nx_ipv6_default_router_entry_router_address);
 800ec3c:	4621      	mov	r1, r4
 800ec3e:	4638      	mov	r0, r7
        table_size--;
 800ec40:	3e01      	subs	r6, #1
        if (rt_entry -> nx_ipv6_default_router_entry_life_time == 0)
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d0e1      	beq.n	800ec0a <_nxd_ipv6_prefix_router_timer_tick+0x1a>
            if (rt_entry -> nx_ipv6_default_router_entry_life_time != 0xFFFF)
 800ec46:	4543      	cmp	r3, r8
            {

                /* No, so decrement the lifetime by one tick.*/
                rt_entry -> nx_ipv6_default_router_entry_life_time--;
 800ec48:	f103 33ff 	add.w	r3, r3, #4294967295
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 800ec4c:	f105 0501 	add.w	r5, r5, #1
 800ec50:	f104 041c 	add.w	r4, r4, #28
                rt_entry -> nx_ipv6_default_router_entry_life_time--;
 800ec54:	bf18      	it	ne
 800ec56:	f824 3c1e 	strhne.w	r3, [r4, #-30]
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 800ec5a:	2e00      	cmp	r6, #0
 800ec5c:	d1e6      	bne.n	800ec2c <_nxd_ipv6_prefix_router_timer_tick+0x3c>
            }
        }
    }

    /* Set a pointer to the first prefix entry in the IP prefix list. */
    prefix_entry = ip_ptr -> nx_ipv6_prefix_list_ptr;
 800ec5e:	f8d7 1ed4 	ldr.w	r1, [r7, #3796]	; 0xed4

    /* Loop through the entire list. */
    while (prefix_entry)
 800ec62:	b919      	cbnz	r1, 800ec6c <_nxd_ipv6_prefix_router_timer_tick+0x7c>
 800ec64:	e010      	b.n	800ec88 <_nxd_ipv6_prefix_router_timer_tick+0x98>
            }
            else
            {

                /* Just decrement the time remaining. */
                tmp -> nx_ipv6_prefix_entry_valid_lifetime--;
 800ec66:	614a      	str	r2, [r1, #20]
    while (prefix_entry)
 800ec68:	4621      	mov	r1, r4
 800ec6a:	b16c      	cbz	r4, 800ec88 <_nxd_ipv6_prefix_router_timer_tick+0x98>
        if (tmp -> nx_ipv6_prefix_entry_valid_lifetime != (UINT)0xFFFFFFFF)
 800ec6c:	694b      	ldr	r3, [r1, #20]
        prefix_entry = prefix_entry -> nx_ipv6_prefix_entry_next;
 800ec6e:	69cc      	ldr	r4, [r1, #28]
        if (tmp -> nx_ipv6_prefix_entry_valid_lifetime != (UINT)0xFFFFFFFF)
 800ec70:	1c5a      	adds	r2, r3, #1
                tmp -> nx_ipv6_prefix_entry_valid_lifetime--;
 800ec72:	f103 32ff 	add.w	r2, r3, #4294967295
        if (tmp -> nx_ipv6_prefix_entry_valid_lifetime != (UINT)0xFFFFFFFF)
 800ec76:	d0f7      	beq.n	800ec68 <_nxd_ipv6_prefix_router_timer_tick+0x78>
            if (tmp -> nx_ipv6_prefix_entry_valid_lifetime == 0)
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1f4      	bne.n	800ec66 <_nxd_ipv6_prefix_router_timer_tick+0x76>
                _nx_ipv6_prefix_list_delete_entry(ip_ptr, tmp);
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	f003 fbe5 	bl	801244c <_nx_ipv6_prefix_list_delete_entry>
    while (prefix_entry)
 800ec82:	4621      	mov	r1, r4
 800ec84:	2c00      	cmp	r4, #0
 800ec86:	d1f1      	bne.n	800ec6c <_nxd_ipv6_prefix_router_timer_tick+0x7c>
            }
        }
    }

    return;
}
 800ec88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ec8c <_nxd_ipv6_router_solicitation_check>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
void _nxd_ipv6_router_solicitation_check(NX_IP *ip_ptr)
{
 800ec8c:	b538      	push	{r3, r4, r5, lr}
UINT i;

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_TRUE)
 800ec8e:	f890 5c4c 	ldrb.w	r5, [r0, #3148]	; 0xc4c
 800ec92:	2d01      	cmp	r5, #1
 800ec94:	d103      	bne.n	800ec9e <_nxd_ipv6_router_solicitation_check+0x12>
        {

            /* Check if max number of router solicitation messages have been sent. */
            if (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count != 0)
 800ec96:	f8d0 2c74 	ldr.w	r2, [r0, #3188]	; 0xc74
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	b902      	cbnz	r2, 800eca0 <_nxd_ipv6_router_solicitation_check+0x14>
                    }
                }
            }
        }
    }
}
 800ec9e:	bd38      	pop	{r3, r4, r5, pc}
                ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer--;
 800eca0:	f8d0 1c7c 	ldr.w	r1, [r0, #3196]	; 0xc7c
 800eca4:	3901      	subs	r1, #1
 800eca6:	f8c0 1c7c 	str.w	r1, [r0, #3196]	; 0xc7c
                if (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer == 0)
 800ecaa:	2900      	cmp	r1, #0
 800ecac:	d1f7      	bne.n	800ec9e <_nxd_ipv6_router_solicitation_check+0x12>
                    if (_nx_icmpv6_send_rs(ip_ptr, i) &&
 800ecae:	f001 fe69 	bl	8010984 <_nx_icmpv6_send_rs>
 800ecb2:	b948      	cbnz	r0, 800ecc8 <_nxd_ipv6_router_solicitation_check+0x3c>
 800ecb4:	f8d4 3c74 	ldr.w	r3, [r4, #3188]	; 0xc74
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count--;
 800ecb8:	3b01      	subs	r3, #1
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer = ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_interval;
 800ecba:	f8d4 5c78 	ldr.w	r5, [r4, #3192]	; 0xc78
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count--;
 800ecbe:	f8c4 3c74 	str.w	r3, [r4, #3188]	; 0xc74
 800ecc2:	f8c4 5c7c 	str.w	r5, [r4, #3196]	; 0xc7c
}
 800ecc6:	bd38      	pop	{r3, r4, r5, pc}
                        (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count ==
 800ecc8:	f8d4 3c74 	ldr.w	r3, [r4, #3188]	; 0xc74
                    if (_nx_icmpv6_send_rs(ip_ptr, i) &&
 800eccc:	f8d4 2c70 	ldr.w	r2, [r4, #3184]	; 0xc70
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d1f1      	bne.n	800ecb8 <_nxd_ipv6_router_solicitation_check+0x2c>
 800ecd4:	e7f5      	b.n	800ecc2 <_nxd_ipv6_router_solicitation_check+0x36>
 800ecd6:	bf00      	nop

0800ecd8 <_nxd_tcp_client_socket_connect>:
/**************************************************************************/
UINT  _nxd_tcp_client_socket_connect(NX_TCP_SOCKET *socket_ptr,
                                     NXD_ADDRESS *server_ip,
                                     UINT server_port,
                                     ULONG wait_option)
{
 800ecd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecdc:	460d      	mov	r5, r1
 800ecde:	4691      	mov	r9, r2
 800ece0:	b085      	sub	sp, #20

UINT          ip_header_size = 0;
NX_IP        *ip_ptr;
NX_INTERFACE *outgoing_interface = NX_NULL;
 800ece2:	2100      	movs	r1, #0
    /* Setup IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;

    /* Make sure the server IP address is accesible. */
#ifndef NX_DISABLE_IPV4
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V4)
 800ece4:	682a      	ldr	r2, [r5, #0]
{
 800ece6:	4604      	mov	r4, r0
 800ece8:	4698      	mov	r8, r3
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800ecea:	f8d0 70ac 	ldr.w	r7, [r0, #172]	; 0xac
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V4)
 800ecee:	2a04      	cmp	r2, #4
NX_INTERFACE *outgoing_interface = NX_NULL;
 800ecf0:	9103      	str	r1, [sp, #12]
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V4)
 800ecf2:	f000 8096 	beq.w	800ee22 <_nxd_tcp_client_socket_connect+0x14a>
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    /* For IPv6 connections, find a suitable outgoing interface, based on the TCP peer address. */
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V6)
 800ecf6:	2a06      	cmp	r2, #6
 800ecf8:	f000 8085 	beq.w	800ee06 <_nxd_tcp_client_socket_connect+0x12e>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_CLIENT_SOCKET_CONNECT, ip_ptr, socket_ptr, ip_address_log, server_port, NX_TRACE_TCP_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Obtain the IP mutex so we initiate the connect.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ecfc:	f207 663c 	addw	r6, r7, #1596	; 0x63c
 800ed00:	f04f 31ff 	mov.w	r1, #4294967295
 800ed04:	4630      	mov	r0, r6
 800ed06:	f00d fef7 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if (!socket_ptr -> nx_tcp_socket_bound_next)
 800ed0a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f000 80b4 	beq.w	800ee7c <_nxd_tcp_client_socket_connect+0x1a4>
        /* Return a not bound error code.  */
        return(NX_NOT_BOUND);
    }

    /* Determine if the socket is in a pre-connection state.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_TIMED_WAIT))
 800ed14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d008      	beq.n	800ed2c <_nxd_tcp_client_socket_connect+0x54>
 800ed1a:	2b0a      	cmp	r3, #10
 800ed1c:	d006      	beq.n	800ed2c <_nxd_tcp_client_socket_connect+0x54>
    {

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f00d ffd4 	bl	801cccc <_tx_mutex_put>

        /* Return a not closed error code.  */
        return(NX_NOT_CLOSED);
 800ed24:	2035      	movs	r0, #53	; 0x35
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));

        /* Return in-progress completion status.  */
        return(NX_IN_PROGRESS);
    }
}
 800ed26:	b005      	add	sp, #20
 800ed28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version       = server_ip -> nxd_ip_version;
 800ed2c:	682b      	ldr	r3, [r5, #0]
    socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_SENT;
 800ed2e:	2203      	movs	r2, #3
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version       = server_ip -> nxd_ip_version;
 800ed30:	6163      	str	r3, [r4, #20]
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V4)
 800ed32:	682b      	ldr	r3, [r5, #0]
    socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_SENT;
 800ed34:	6462      	str	r2, [r4, #68]	; 0x44
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V4)
 800ed36:	2b04      	cmp	r3, #4
 800ed38:	d061      	beq.n	800edfe <_nxd_tcp_client_socket_connect+0x126>
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V6)
 800ed3a:	2b06      	cmp	r3, #6
 800ed3c:	d07b      	beq.n	800ee36 <_nxd_tcp_client_socket_connect+0x15e>
 800ed3e:	221c      	movs	r2, #28
    NX_ASSERT(outgoing_interface != NX_NULL);
 800ed40:	9b03      	ldr	r3, [sp, #12]
    socket_ptr -> nx_tcp_socket_connect_port = server_port;
 800ed42:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    NX_ASSERT(outgoing_interface != NX_NULL);
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d050      	beq.n	800edec <_nxd_tcp_client_socket_connect+0x114>
    if (outgoing_interface -> nx_interface_ip_mtu_size < (ip_header_size + NX_TCP_SYN_SIZE))
 800ed4a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ed4c:	4291      	cmp	r1, r2
 800ed4e:	f0c0 8086 	bcc.w	800ee5e <_nxd_tcp_client_socket_connect+0x186>
    if (socket_ptr -> nx_tcp_socket_tx_sequence == 0)
 800ed52:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    socket_ptr -> nx_tcp_socket_connect_interface = outgoing_interface;
 800ed54:	6363      	str	r3, [r4, #52]	; 0x34
    if (socket_ptr -> nx_tcp_socket_tx_sequence == 0)
 800ed56:	2d00      	cmp	r5, #0
 800ed58:	d174      	bne.n	800ee44 <_nxd_tcp_client_socket_connect+0x16c>
        socket_ptr -> nx_tcp_socket_tx_sequence =  (((ULONG)NX_RAND()) << NX_SHIFT_BY_16) & 0xFFFFFFFF;
 800ed5a:	f00f fca3 	bl	801e6a4 <rand>
 800ed5e:	0400      	lsls	r0, r0, #16
 800ed60:	64a0      	str	r0, [r4, #72]	; 0x48
        socket_ptr -> nx_tcp_socket_tx_sequence |= (ULONG)NX_RAND();
 800ed62:	f00f fc9f 	bl	801e6a4 <rand>
 800ed66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ed68:	4301      	orrs	r1, r0
    socket_ptr -> nx_tcp_socket_fin_received =  NX_FALSE;
 800ed6a:	2300      	movs	r3, #0
    socket_ptr -> nx_tcp_socket_tx_sequence++;
 800ed6c:	3101      	adds	r1, #1
    socket_ptr -> nx_tcp_socket_rx_window_current =    socket_ptr -> nx_tcp_socket_rx_window_default;
 800ed6e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800ed70:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    socket_ptr -> nx_tcp_socket_fin_received =  NX_FALSE;
 800ed74:	65e3      	str	r3, [r4, #92]	; 0x5c
    socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800ed76:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800ed7a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    socket_ptr -> nx_tcp_socket_tx_sequence++;
 800ed7e:	64a1      	str	r1, [r4, #72]	; 0x48
    socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800ed80:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_default;
 800ed84:	e9c4 2220 	strd	r2, r2, [r4, #128]	; 0x80
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800ed88:	b11b      	cbz	r3, 800ed92 <_nxd_tcp_client_socket_connect+0xba>
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f7f8 ff98 	bl	8007cc0 <_nx_tcp_socket_receive_queue_flush>
 800ed90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    socket_ptr -> nx_tcp_socket_tx_window_congestion = 0;
 800ed92:	2300      	movs	r3, #0
    _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800ed94:	3901      	subs	r1, #1
 800ed96:	4620      	mov	r0, r4
    socket_ptr -> nx_tcp_socket_transmit_sent_count  = 0;
 800ed98:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    socket_ptr -> nx_tcp_socket_receive_queue_tail   = NX_NULL;
 800ed9c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800eda0:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    socket_ptr -> nx_tcp_socket_bytes_sent           = 0;
 800eda4:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    socket_ptr -> nx_tcp_socket_bytes_received       = 0;
 800eda8:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
    socket_ptr -> nx_tcp_socket_checksum_errors      = 0;
 800edac:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
    socket_ptr -> nx_tcp_socket_transmit_sent_tail   = NX_NULL;
 800edb0:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
    socket_ptr -> nx_tcp_socket_receive_queue_head   = NX_NULL;
 800edb4:	e9c4 332f 	strd	r3, r3, [r4, #188]	; 0xbc
    _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800edb8:	f7f8 fab2 	bl	8007320 <_nx_tcp_packet_send_syn>
    if ((wait_option) && (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 800edbc:	f1b8 0f00 	cmp.w	r8, #0
 800edc0:	d046      	beq.n	800ee50 <_nxd_tcp_client_socket_connect+0x178>
 800edc2:	4d32      	ldr	r5, [pc, #200]	; (800ee8c <_nxd_tcp_client_socket_connect+0x1b4>)
 800edc4:	f507 67d3 	add.w	r7, r7, #1688	; 0x698
 800edc8:	682b      	ldr	r3, [r5, #0]
 800edca:	42bb      	cmp	r3, r7
 800edcc:	d040      	beq.n	800ee50 <_nxd_tcp_client_socket_connect+0x178>
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), _nx_tcp_connect_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 800edce:	4633      	mov	r3, r6
 800edd0:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800edd4:	f8cd 8000 	str.w	r8, [sp]
 800edd8:	4622      	mov	r2, r4
 800edda:	492d      	ldr	r1, [pc, #180]	; (800ee90 <_nxd_tcp_client_socket_connect+0x1b8>)
 800eddc:	f7f9 fc76 	bl	80086cc <_nx_tcp_socket_thread_suspend>
        return(_tx_thread_current_ptr -> tx_thread_suspend_status);
 800ede0:	682b      	ldr	r3, [r5, #0]
 800ede2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
}
 800ede6:	b005      	add	sp, #20
 800ede8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NX_ASSERT(outgoing_interface != NX_NULL);
 800edec:	f04f 30ff 	mov.w	r0, #4294967295
 800edf0:	f00e fa0a 	bl	801d208 <_tx_thread_sleep>
 800edf4:	f04f 30ff 	mov.w	r0, #4294967295
 800edf8:	f00e fa06 	bl	801d208 <_tx_thread_sleep>
 800edfc:	e7f6      	b.n	800edec <_nxd_tcp_client_socket_connect+0x114>
        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = server_ip -> nxd_ip_address.v4;
 800edfe:	686b      	ldr	r3, [r5, #4]
 800ee00:	2230      	movs	r2, #48	; 0x30
 800ee02:	61a3      	str	r3, [r4, #24]
 800ee04:	e79c      	b.n	800ed40 <_nxd_tcp_client_socket_connect+0x68>
        status = _nxd_ipv6_interface_find(ip_ptr, server_ip -> nxd_ip_address.v6,
 800ee06:	2300      	movs	r3, #0
 800ee08:	f504 729c 	add.w	r2, r4, #312	; 0x138
 800ee0c:	1d29      	adds	r1, r5, #4
 800ee0e:	4638      	mov	r0, r7
 800ee10:	f006 f8da 	bl	8014fc8 <_nxd_ipv6_interface_find>
        if (status != NX_SUCCESS)
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d1e6      	bne.n	800ede6 <_nxd_tcp_client_socket_connect+0x10e>
        outgoing_interface = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address_attached;
 800ee18:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	9303      	str	r3, [sp, #12]
 800ee20:	e76c      	b.n	800ecfc <_nxd_tcp_client_socket_connect+0x24>
        if (_nx_ip_route_find(ip_ptr, server_ip -> nxd_ip_address.v4, &outgoing_interface, &socket_ptr -> nx_tcp_socket_next_hop_address) != NX_SUCCESS)
 800ee22:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800ee26:	aa03      	add	r2, sp, #12
 800ee28:	6869      	ldr	r1, [r5, #4]
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	f7f3 fa44 	bl	80022b8 <_nx_ip_route_find>
 800ee30:	bb48      	cbnz	r0, 800ee86 <_nxd_tcp_client_socket_connect+0x1ae>
 800ee32:	682a      	ldr	r2, [r5, #0]
 800ee34:	e75f      	b.n	800ecf6 <_nxd_tcp_client_socket_connect+0x1e>
        COPY_IPV6_ADDRESS(server_ip -> nxd_ip_address.v6,
 800ee36:	1d28      	adds	r0, r5, #4
 800ee38:	f104 0118 	add.w	r1, r4, #24
 800ee3c:	f7f7 fb46 	bl	80064cc <COPY_IPV6_ADDRESS>
 800ee40:	2244      	movs	r2, #68	; 0x44
 800ee42:	e77d      	b.n	800ed40 <_nxd_tcp_client_socket_connect+0x68>
        socket_ptr -> nx_tcp_socket_tx_sequence =  socket_ptr -> nx_tcp_socket_tx_sequence + ((ULONG)(((ULONG)0x10000))) + ((ULONG)NX_RAND());
 800ee44:	f00f fc2e 	bl	801e6a4 <rand>
 800ee48:	f505 3180 	add.w	r1, r5, #65536	; 0x10000
 800ee4c:	4401      	add	r1, r0
 800ee4e:	e78c      	b.n	800ed6a <_nxd_tcp_client_socket_connect+0x92>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ee50:	4630      	mov	r0, r6
 800ee52:	f00d ff3b 	bl	801cccc <_tx_mutex_put>
        return(NX_IN_PROGRESS);
 800ee56:	2037      	movs	r0, #55	; 0x37
}
 800ee58:	b005      	add	sp, #20
 800ee5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset(&socket_ptr -> nx_tcp_socket_connect_ip, 0, sizeof(NXD_ADDRESS));
 800ee5e:	2300      	movs	r3, #0
        socket_ptr -> nx_tcp_socket_state = NX_TCP_CLOSED;
 800ee60:	2101      	movs	r1, #1
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ee62:	4630      	mov	r0, r6
        socket_ptr -> nx_tcp_socket_state = NX_TCP_CLOSED;
 800ee64:	6461      	str	r1, [r4, #68]	; 0x44
        memset(&socket_ptr -> nx_tcp_socket_connect_ip, 0, sizeof(NXD_ADDRESS));
 800ee66:	6163      	str	r3, [r4, #20]
 800ee68:	61a3      	str	r3, [r4, #24]
 800ee6a:	61e3      	str	r3, [r4, #28]
 800ee6c:	6223      	str	r3, [r4, #32]
 800ee6e:	6263      	str	r3, [r4, #36]	; 0x24
        socket_ptr -> nx_tcp_socket_connect_port = 0;
 800ee70:	62a3      	str	r3, [r4, #40]	; 0x28
        socket_ptr -> nx_tcp_socket_next_hop_address = 0;
 800ee72:	63a3      	str	r3, [r4, #56]	; 0x38
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ee74:	f00d ff2a 	bl	801cccc <_tx_mutex_put>
        return(NX_INVALID_INTERFACE);
 800ee78:	204c      	movs	r0, #76	; 0x4c
 800ee7a:	e7b4      	b.n	800ede6 <_nxd_tcp_client_socket_connect+0x10e>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	f00d ff25 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_BOUND);
 800ee82:	2024      	movs	r0, #36	; 0x24
 800ee84:	e7af      	b.n	800ede6 <_nxd_tcp_client_socket_connect+0x10e>
            return(NX_IP_ADDRESS_ERROR);
 800ee86:	2021      	movs	r0, #33	; 0x21
 800ee88:	e7ad      	b.n	800ede6 <_nxd_tcp_client_socket_connect+0x10e>
 800ee8a:	bf00      	nop
 800ee8c:	20007a80 	.word	0x20007a80
 800ee90:	08012d25 	.word	0x08012d25

0800ee94 <_nxd_tcp_socket_peer_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _nxd_tcp_socket_peer_info_get(NX_TCP_SOCKET *socket_ptr,
                                    NXD_ADDRESS *peer_ip_address,
                                    ULONG *peer_port)
{
 800ee94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Setup IP pointer. */
    ip_ptr = socket_ptr -> nx_tcp_socket_ip_ptr;

    /* Obtain the IP mutex so we can examine the bound port.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ee96:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
{
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ee9e:	f04f 31ff 	mov.w	r1, #4294967295
 800eea2:	f205 653c 	addw	r5, r5, #1596	; 0x63c
{
 800eea6:	4617      	mov	r7, r2
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f00d fe25 	bl	801caf8 <_tx_mutex_get>

    /* Make sure the TCP connection has been established. */
    if ((socket_ptr -> nx_tcp_socket_state <= NX_TCP_LISTEN_STATE) ||
 800eeae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eeb0:	3b03      	subs	r3, #3
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d816      	bhi.n	800eee4 <_nxd_tcp_socket_peer_info_get+0x50>
    }

    /* Determine the peer IP address */

    /* Assign the IP address type (IPv4 or IPv6) */
    peer_ip_address -> nxd_ip_version = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version;
 800eeb6:	6963      	ldr	r3, [r4, #20]
 800eeb8:	6033      	str	r3, [r6, #0]

    /* If address type is IPv4, just copy one word. */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800eeba:	6963      	ldr	r3, [r4, #20]
 800eebc:	2b04      	cmp	r3, #4
 800eebe:	d008      	beq.n	800eed2 <_nxd_tcp_socket_peer_info_get+0x3e>
        peer_ip_address -> nxd_ip_address.v4 = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 800eec0:	2b06      	cmp	r3, #6
 800eec2:	d009      	beq.n	800eed8 <_nxd_tcp_socket_peer_info_get+0x44>
    }
#endif /* FEATURE_NX_IPV6 */

    /* Determine the peer port number and return the port number of the peer
       connected to the TCP socket. */
    *peer_port = socket_ptr -> nx_tcp_socket_connect_port;
 800eec4:	6aa3      	ldr	r3, [r4, #40]	; 0x28

    /* Release protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800eec6:	4628      	mov	r0, r5
    *peer_port = socket_ptr -> nx_tcp_socket_connect_port;
 800eec8:	603b      	str	r3, [r7, #0]
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800eeca:	f00d feff 	bl	801cccc <_tx_mutex_put>
    NX_TRACE_IN_LINE_INSERT(NXD_TRACE_TCP_SOCKET_PEER_INFO_GET, socket_ptr, ip_address_lsw, *peer_port, 0, NX_TRACE_TCP_EVENTS, 0, 0);

#endif /* TX_ENABLE_EVENT_TRACE */

    /* Return successful completion status.  */
    return(NX_SUCCESS);
 800eece:	2000      	movs	r0, #0
}
 800eed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        peer_ip_address -> nxd_ip_address.v4 = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800eed2:	69a3      	ldr	r3, [r4, #24]
 800eed4:	6073      	str	r3, [r6, #4]
 800eed6:	e7f5      	b.n	800eec4 <_nxd_tcp_socket_peer_info_get+0x30>
        COPY_IPV6_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6,
 800eed8:	1d31      	adds	r1, r6, #4
 800eeda:	f104 0018 	add.w	r0, r4, #24
 800eede:	f7f7 faf5 	bl	80064cc <COPY_IPV6_ADDRESS>
 800eee2:	e7ef      	b.n	800eec4 <_nxd_tcp_socket_peer_info_get+0x30>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800eee4:	4628      	mov	r0, r5
 800eee6:	f00d fef1 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_CONNECTED);
 800eeea:	2038      	movs	r0, #56	; 0x38
}
 800eeec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeee:	bf00      	nop

0800eef0 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800eef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800eef4:	f04f 0e00 	mov.w	lr, #0
{
 800eef8:	b087      	sub	sp, #28
ULONG          next_hop_address = 0;
 800eefa:	f8cd e014 	str.w	lr, [sp, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eefe:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ef02:	b672      	cpsid	i

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800ef04:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800ef06:	2d00      	cmp	r5, #0
 800ef08:	f000 8093 	beq.w	800f032 <_nxd_udp_socket_send+0x142>
 800ef0c:	469b      	mov	fp, r3
 800ef0e:	4616      	mov	r6, r2
 800ef10:	460c      	mov	r4, r1
 800ef12:	4605      	mov	r5, r0
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800ef14:	68c7      	ldr	r7, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ef16:	f38c 8810 	msr	PRIMASK, ip

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800ef1a:	f8d2 c000 	ldr.w	ip, [r2]
 800ef1e:	f1bc 0f04 	cmp.w	ip, #4
 800ef22:	d072      	beq.n	800f00a <_nxd_udp_socket_send+0x11a>
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
    }
#endif /* NX_DISABLE_IPV4 */

#ifdef FEATURE_NX_IPV6
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800ef24:	f1bc 0f06 	cmp.w	ip, #6
 800ef28:	d044      	beq.n	800efb4 <_nxd_udp_socket_send+0xc4>
NX_INTERFACE  *interface_ptr = NX_NULL;
 800ef2a:	4673      	mov	r3, lr
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800ef2c:	46f0      	mov	r8, lr
 800ef2e:	46f1      	mov	r9, lr
    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800ef30:	6a62      	ldr	r2, [r4, #36]	; 0x24
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800ef32:	f884 c030 	strb.w	ip, [r4, #48]	; 0x30
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800ef36:	3208      	adds	r2, #8
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800ef38:	68a8      	ldr	r0, [r5, #8]
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800ef3a:	f8d4 a008 	ldr.w	sl, [r4, #8]
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800ef3e:	ea4b 4b00 	orr.w	fp, fp, r0, lsl #16
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800ef42:	6262      	str	r2, [r4, #36]	; 0x24

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800ef44:	ea4f 4e02 	mov.w	lr, r2, lsl #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ef48:	ea8b 403b 	eor.w	r0, fp, fp, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ef4c:	ea4e 413e 	orr.w	r1, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ef50:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ef52:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ef54:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ef58:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ef5c:	ea80 203b 	eor.w	r0, r0, fp, ror #8
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800ef60:	f1aa 0b08 	sub.w	fp, sl, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ef64:	ea81 213e 	eor.w	r1, r1, lr, ror #8
       Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
       driver is able to compute UDP checksum in hardware, let the driver handle the checksum
       computation.
     */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800ef68:	f8d5 e038 	ldr.w	lr, [r5, #56]	; 0x38
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800ef6c:	f8c4 b008 	str.w	fp, [r4, #8]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ef70:	e94a 0102 	strd	r0, r1, [sl, #-8]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800ef74:	f1be 0f00 	cmp.w	lr, #0
 800ef78:	d002      	beq.n	800ef80 <_nxd_udp_socket_send+0x90>
 800ef7a:	f1bc 0f06 	cmp.w	ip, #6
 800ef7e:	d106      	bne.n	800ef8e <_nxd_udp_socket_send+0x9e>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800ef80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef82:	06db      	lsls	r3, r3, #27
 800ef84:	d51f      	bpl.n	800efc6 <_nxd_udp_socket_send+0xd6>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 800ef86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ef88:	f043 0310 	orr.w	r3, r3, #16
 800ef8c:	63e3      	str	r3, [r4, #60]	; 0x3c
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ef8e:	f207 6a3c 	addw	sl, r7, #1596	; 0x63c
 800ef92:	f04f 31ff 	mov.w	r1, #4294967295
 800ef96:	4650      	mov	r0, sl
 800ef98:	f00d fdae 	bl	801caf8 <_tx_mutex_get>

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800ef9c:	6833      	ldr	r3, [r6, #0]
 800ef9e:	2b04      	cmp	r3, #4
 800efa0:	d05b      	beq.n	800f05a <_nxd_udp_socket_send+0x16a>
                           next_hop_address);
    }
#endif /* NX_DISABLE_IPV4 */

#ifdef FEATURE_NX_IPV6
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800efa2:	2b06      	cmp	r3, #6
 800efa4:	d04b      	beq.n	800f03e <_nxd_udp_socket_send+0x14e>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800efa6:	4650      	mov	r0, sl
 800efa8:	f00d fe90 	bl	801cccc <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800efac:	2000      	movs	r0, #0
}
 800efae:	b007      	add	sp, #28
 800efb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr == NX_NULL)
 800efb4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800efb6:	f102 0804 	add.w	r8, r2, #4
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d05e      	beq.n	800f07c <_nxd_udp_socket_send+0x18c>
        ip_src_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address;
 800efbe:	f103 0908 	add.w	r9, r3, #8
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	e7b4      	b.n	800ef30 <_nxd_udp_socket_send+0x40>
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800efc6:	464b      	mov	r3, r9
 800efc8:	2111      	movs	r1, #17
 800efca:	f8cd 8000 	str.w	r8, [sp]
 800efce:	4620      	mov	r0, r4
 800efd0:	f7f2 ff88 	bl	8001ee4 <_nx_ip_checksum_compute>
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800efd4:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 800efd8:	43c3      	mvns	r3, r0
            if (checksum == 0)
 800efda:	f64f 71ff 	movw	r1, #65535	; 0xffff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800efde:	ea82 4032 	eor.w	r0, r2, r2, ror #16
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	0a00      	lsrs	r0, r0, #8
            if (checksum == 0)
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	bf08      	it	eq
 800efea:	460b      	moveq	r3, r1
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800efec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800eff0:	ea80 2032 	eor.w	r0, r0, r2, ror #8
            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800eff4:	4318      	orrs	r0, r3
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800eff6:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 800effa:	0a1b      	lsrs	r3, r3, #8
 800effc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800f000:	ea83 2030 	eor.w	r0, r3, r0, ror #8
 800f004:	f84a 0c04 	str.w	r0, [sl, #-4]
 800f008:	e7c1      	b.n	800ef8e <_nxd_udp_socket_send+0x9e>
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800f00a:	ab05      	add	r3, sp, #20
 800f00c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f010:	4638      	mov	r0, r7
 800f012:	6871      	ldr	r1, [r6, #4]
 800f014:	f7f3 f950 	bl	80022b8 <_nx_ip_route_find>
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800f018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d03a      	beq.n	800f094 <_nxd_udp_socket_send+0x1a4>
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800f01e:	f8d6 c000 	ldr.w	ip, [r6]
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800f022:	f106 0804 	add.w	r8, r6, #4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800f026:	f1bc 0f06 	cmp.w	ip, #6
 800f02a:	d0c8      	beq.n	800efbe <_nxd_udp_socket_send+0xce>
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800f02c:	f103 0914 	add.w	r9, r3, #20
 800f030:	e77e      	b.n	800ef30 <_nxd_udp_socket_send+0x40>
 800f032:	f38c 8810 	msr	PRIMASK, ip
        return(NX_NOT_BOUND);
 800f036:	2024      	movs	r0, #36	; 0x24
}
 800f038:	b007      	add	sp, #28
 800f03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_UDP,
 800f03e:	f8cd 8008 	str.w	r8, [sp, #8]
 800f042:	4638      	mov	r0, r7
 800f044:	f8cd 9004 	str.w	r9, [sp, #4]
 800f048:	4621      	mov	r1, r4
 800f04a:	f8d7 5ee8 	ldr.w	r5, [r7, #3816]	; 0xee8
 800f04e:	2211      	movs	r2, #17
 800f050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f052:	9500      	str	r5, [sp, #0]
 800f054:	f003 f832 	bl	80120bc <_nx_ipv6_packet_send>
 800f058:	e7a5      	b.n	800efa6 <_nxd_udp_socket_send+0xb6>
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800f05a:	f44f 1088 	mov.w	r0, #1114112	; 0x110000
 800f05e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f060:	6872      	ldr	r2, [r6, #4]
 800f062:	9905      	ldr	r1, [sp, #20]
 800f064:	9001      	str	r0, [sp, #4]
 800f066:	e9d5 500c 	ldrd	r5, r0, [r5, #48]	; 0x30
 800f06a:	9103      	str	r1, [sp, #12]
 800f06c:	4621      	mov	r1, r4
 800f06e:	9002      	str	r0, [sp, #8]
 800f070:	4638      	mov	r0, r7
 800f072:	9500      	str	r5, [sp, #0]
 800f074:	f7f3 f8e0 	bl	8002238 <_nx_ip_packet_send>
 800f078:	6833      	ldr	r3, [r6, #0]
 800f07a:	e792      	b.n	800efa2 <_nxd_udp_socket_send+0xb2>
            status = _nxd_ipv6_interface_find(ip_ptr, ip_address -> nxd_ip_address.v6,
 800f07c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f080:	4638      	mov	r0, r7
 800f082:	4641      	mov	r1, r8
 800f084:	f005 ffa0 	bl	8014fc8 <_nxd_ipv6_interface_find>
            if (status != NX_SUCCESS)
 800f088:	2800      	cmp	r0, #0
 800f08a:	d190      	bne.n	800efae <_nxd_udp_socket_send+0xbe>
 800f08c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f08e:	f8d6 c000 	ldr.w	ip, [r6]
 800f092:	e794      	b.n	800efbe <_nxd_udp_socket_send+0xce>
            return(NX_IP_ADDRESS_ERROR);
 800f094:	2021      	movs	r0, #33	; 0x21
 800f096:	e78a      	b.n	800efae <_nxd_udp_socket_send+0xbe>

0800f098 <_nxd_udp_source_extract>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_source_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address, UINT *port)
{
 800f098:	b508      	push	{r3, lr}
    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;

    /* Pickup the source port from the UDP header.  */
    *port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 800f09a:	6883      	ldr	r3, [r0, #8]
 800f09c:	f833 3c06 	ldrh.w	r3, [r3, #-6]
 800f0a0:	6013      	str	r3, [r2, #0]

    /* Determine IPv4 or IPv6 connectivity. */
    ip_address -> nxd_ip_version = packet_ptr -> nx_packet_ip_version;
 800f0a2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800f0a6:	2b04      	cmp	r3, #4
    ip_address -> nxd_ip_version = packet_ptr -> nx_packet_ip_version;
 800f0a8:	600b      	str	r3, [r1, #0]
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800f0aa:	d00a      	beq.n	800f0c2 <_nxd_udp_source_extract+0x2a>
        ip_address_word3 = ip_address -> nxd_ip_address.v4;
#endif /* TX_ENABLE_EVENT_TRACE */
    }
#endif /* NX_DISABLE_IPV4 */
#ifdef FEATURE_NX_IPV6
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800f0ac:	2b06      	cmp	r3, #6
 800f0ae:	d001      	beq.n	800f0b4 <_nxd_udp_source_extract+0x1c>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NXD_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, ip_version, ip_address_word3, *port, NX_TRACE_UDP_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE */

    return(NX_SUCCESS);
}
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	bd08      	pop	{r3, pc}
        COPY_IPV6_ADDRESS(ipv6_header -> nx_ip_header_source_ip,
 800f0b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f0b6:	3104      	adds	r1, #4
 800f0b8:	3008      	adds	r0, #8
 800f0ba:	f7f7 fa07 	bl	80064cc <COPY_IPV6_ADDRESS>
}
 800f0be:	2000      	movs	r0, #0
 800f0c0:	bd08      	pop	{r3, pc}
        ip_address -> nxd_ip_address.v4 =  ipv4_header -> nx_ip_header_source_ip;
 800f0c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 800f0c4:	2000      	movs	r0, #0
        ip_address -> nxd_ip_address.v4 =  ipv4_header -> nx_ip_header_source_ip;
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	604b      	str	r3, [r1, #4]
}
 800f0ca:	bd08      	pop	{r3, pc}

0800f0cc <_nx_arp_dynamic_entry_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 800f0cc:	b538      	push	{r3, r4, r5, lr}
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 800f0ce:	69cb      	ldr	r3, [r1, #28]
 800f0d0:	b30b      	cbz	r3, 800f116 <_nx_arp_dynamic_entry_delete+0x4a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f0d2:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f0d6:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 800f0d8:	694b      	ldr	r3, [r1, #20]
 800f0da:	428b      	cmp	r3, r1
 800f0dc:	d01d      	beq.n	800f11a <_nx_arp_dynamic_entry_delete+0x4e>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 800f0de:	69ca      	ldr	r2, [r1, #28]
 800f0e0:	6815      	ldr	r5, [r2, #0]
 800f0e2:	428d      	cmp	r5, r1
 800f0e4:	d01d      	beq.n	800f122 <_nx_arp_dynamic_entry_delete+0x56>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 800f0e6:	698a      	ldr	r2, [r1, #24]
 800f0e8:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 800f0ea:	698a      	ldr	r2, [r1, #24]
 800f0ec:	6153      	str	r3, [r2, #20]

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800f0ee:	f8d0 2c00 	ldr.w	r2, [r0, #3072]	; 0xc00
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 800f0f2:	2500      	movs	r5, #0

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 800f0f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800f0f6:	3a01      	subs	r2, #1
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 800f0f8:	61cd      	str	r5, [r1, #28]
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800f0fa:	f8c0 2c00 	str.w	r2, [r0, #3072]	; 0xc00

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 800f0fe:	630d      	str	r5, [r1, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f100:	f384 8810 	msr	PRIMASK, r4

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 800f104:	b13b      	cbz	r3, 800f116 <_nx_arp_dynamic_entry_delete+0x4a>

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 800f106:	69dc      	ldr	r4, [r3, #28]
            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 800f108:	4618      	mov	r0, r3
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800f10a:	61dd      	str	r5, [r3, #28]
            _nx_packet_transmit_release(packet_ptr);
 800f10c:	f7f7 fcd6 	bl	8006abc <_nx_packet_transmit_release>
        while (next_packet_ptr)
 800f110:	4623      	mov	r3, r4
 800f112:	2c00      	cmp	r4, #0
 800f114:	d1f7      	bne.n	800f106 <_nx_arp_dynamic_entry_delete+0x3a>
        }
    }

    return(NX_SUCCESS);
}
 800f116:	2000      	movs	r0, #0
 800f118:	bd38      	pop	{r3, r4, r5, pc}
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 800f11a:	69cb      	ldr	r3, [r1, #28]
 800f11c:	2200      	movs	r2, #0
 800f11e:	601a      	str	r2, [r3, #0]
 800f120:	e7e5      	b.n	800f0ee <_nx_arp_dynamic_entry_delete+0x22>
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 800f122:	6013      	str	r3, [r2, #0]
 800f124:	694b      	ldr	r3, [r1, #20]
 800f126:	e7de      	b.n	800f0e6 <_nx_arp_dynamic_entry_delete+0x1a>

0800f128 <_nx_arp_packet_deferred_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f128:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f12a:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f12e:	b672      	cpsid	i

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 800f130:	f8d0 3c14 	ldr.w	r3, [r0, #3092]	; 0xc14
 800f134:	b1e3      	cbz	r3, 800f170 <_nx_arp_packet_deferred_receive+0x48>
        /* Return to caller.  */
        return;
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800f136:	f8d0 2c04 	ldr.w	r2, [r0, #3076]	; 0xc04
 800f13a:	b15a      	cbz	r2, 800f154 <_nx_arp_packet_deferred_receive+0x2c>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800f13c:	f8d0 2c08 	ldr.w	r2, [r0, #3080]	; 0xc08
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800f140:	2300      	movs	r3, #0
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800f142:	61d1      	str	r1, [r2, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800f144:	61cb      	str	r3, [r1, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 800f146:	f8c0 1c08 	str.w	r1, [r0, #3080]	; 0xc08
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f14a:	f384 8810 	msr	PRIMASK, r4
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
    }
}
 800f14e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f152:	4770      	bx	lr
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 800f154:	f8c0 1c04 	str.w	r1, [r0, #3076]	; 0xc04
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 800f158:	f8c0 1c08 	str.w	r1, [r0, #3080]	; 0xc08
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 800f15c:	61ca      	str	r2, [r1, #28]
 800f15e:	f384 8810 	msr	PRIMASK, r4
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 800f162:	2110      	movs	r1, #16
 800f164:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
}
 800f168:	f85d 4b04 	ldr.w	r4, [sp], #4
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 800f16c:	f00d badc 	b.w	801c728 <_tx_event_flags_set>
 800f170:	f384 8810 	msr	PRIMASK, r4
        _nx_packet_release(packet_ptr);
 800f174:	4608      	mov	r0, r1
}
 800f176:	f85d 4b04 	ldr.w	r4, [sp], #4
        _nx_packet_release(packet_ptr);
 800f17a:	f7f7 bc39 	b.w	80069f0 <_nx_packet_release>
 800f17e:	bf00      	nop

0800f180 <_nx_arp_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	460e      	mov	r6, r1
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800f186:	6889      	ldr	r1, [r1, #8]
{
 800f188:	4680      	mov	r8, r0
 800f18a:	b08d      	sub	sp, #52	; 0x34

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f18c:	684b      	ldr	r3, [r1, #4]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f18e:	f8d1 b014 	ldr.w	fp, [r1, #20]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f192:	ea83 4033 	eor.w	r0, r3, r3, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f196:	f8d1 e010 	ldr.w	lr, [r1, #16]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f19a:	ea8b 4c3b 	eor.w	ip, fp, fp, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f19e:	698f      	ldr	r7, [r1, #24]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f1a0:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f1a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f1a6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f1aa:	ea87 4237 	eor.w	r2, r7, r7, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f1ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f1b2:	ea80 2033 	eor.w	r0, r0, r3, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f1b6:	ea8e 433e 	eor.w	r3, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f1ba:	ea8c 2b3b 	eor.w	fp, ip, fp, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f1be:	6048      	str	r0, [r1, #4]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f1c0:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f1c2:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f1c4:	f8c1 b014 	str.w	fp, [r1, #20]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 800f1c8:	fa1f fc80 	uxth.w	ip, r0
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f1cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f1d0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f1d4:	ea83 233e 	eor.w	r3, r3, lr, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f1d8:	ea82 2237 	eor.w	r2, r2, r7, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f1dc:	e9d1 a902 	ldrd	sl, r9, [r1, #8]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f1e0:	618a      	str	r2, [r1, #24]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f1e2:	ea8a 453a 	eor.w	r5, sl, sl, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f1e6:	ea89 4439 	eor.w	r4, r9, r9, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f1ea:	0a2d      	lsrs	r5, r5, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f1ec:	0a24      	lsrs	r4, r4, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f1ee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f1f2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f1f6:	ea85 253a 	eor.w	r5, r5, sl, ror #8

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 800f1fa:	f10c 3aff 	add.w	sl, ip, #4294967295
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f1fe:	ea84 2439 	eor.w	r4, r4, r9, ror #8
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 800f202:	f1ba 0f01 	cmp.w	sl, #1
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f206:	608d      	str	r5, [r1, #8]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f208:	e9c1 4303 	strd	r4, r3, [r1, #12]
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 800f20c:	d86d      	bhi.n	800f2ea <_nx_arp_packet_receive+0x16a>
        return;
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 800f20e:	ea4f 4914 	mov.w	r9, r4, lsr #16
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
    target_ip_address =    *(message_ptr + 6);

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800f212:	6b77      	ldr	r7, [r6, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 800f214:	0c1b      	lsrs	r3, r3, #16
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 800f216:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 800f21a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 800f21e:	0c2d      	lsrs	r5, r5, #16
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800f220:	2f00      	cmp	r7, #0
 800f222:	f000 80dd 	beq.w	800f3e0 <_nx_arp_packet_receive+0x260>

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	b953      	cbnz	r3, 800f240 <_nx_arp_packet_receive+0xc0>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 800f22a:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 800f22e:	f1be 0f00 	cmp.w	lr, #0
 800f232:	d060      	beq.n	800f2f6 <_nx_arp_packet_receive+0x176>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 800f234:	45a6      	cmp	lr, r4
 800f236:	d049      	beq.n	800f2cc <_nx_arp_packet_receive+0x14c>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 800f238:	4596      	cmp	lr, r2
 800f23a:	d101      	bne.n	800f240 <_nx_arp_packet_receive+0xc0>
 800f23c:	2c00      	cmp	r4, #0
 800f23e:	d045      	beq.n	800f2cc <_nx_arp_packet_receive+0x14c>

        return;
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 800f240:	2c00      	cmp	r4, #0
 800f242:	d05a      	beq.n	800f2fa <_nx_arp_packet_receive+0x17a>
 800f244:	42a3      	cmp	r3, r4
 800f246:	f000 80e2 	beq.w	800f40e <_nx_arp_packet_receive+0x28e>
 800f24a:	eb04 2a14 	add.w	sl, r4, r4, lsr #8
        return;
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 800f24e:	f1bc 0f01 	cmp.w	ip, #1
 800f252:	f00a 0a1f 	and.w	sl, sl, #31
 800f256:	f000 810b 	beq.w	800f470 <_nx_arp_packet_receive+0x2f0>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800f25a:	f20a 2bde 	addw	fp, sl, #734	; 0x2de
 800f25e:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 800f262:	2900      	cmp	r1, #0
 800f264:	f000 810a 	beq.w	800f47c <_nx_arp_packet_receive+0x2fc>
UCHAR         consumed = NX_FALSE;
 800f268:	f04f 0b00 	mov.w	fp, #0
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 800f26c:	6a0b      	ldr	r3, [r1, #32]
 800f26e:	429c      	cmp	r4, r3
 800f270:	f000 80c6 	beq.w	800f400 <_nx_arp_packet_receive+0x280>
            /* Yes, we found a match.  Get out of the loop!  */
            break;
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 800f274:	694b      	ldr	r3, [r1, #20]

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 800f276:	4299      	cmp	r1, r3
 800f278:	d007      	beq.n	800f28a <_nx_arp_packet_receive+0x10a>
    while (arp_ptr)
 800f27a:	b133      	cbz	r3, 800f28a <_nx_arp_packet_receive+0x10a>
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 800f27c:	6a1a      	ldr	r2, [r3, #32]
 800f27e:	42a2      	cmp	r2, r4
 800f280:	f000 80bf 	beq.w	800f402 <_nx_arp_packet_receive+0x282>
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 800f284:	695b      	ldr	r3, [r3, #20]
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 800f286:	428b      	cmp	r3, r1
 800f288:	d1f7      	bne.n	800f27a <_nx_arp_packet_receive+0xfa>
            break;
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 800f28a:	f1bb 0f00 	cmp.w	fp, #0
 800f28e:	f000 80f5 	beq.w	800f47c <_nx_arp_packet_receive+0x2fc>
 800f292:	f04f 0b01 	mov.w	fp, #1
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 800f296:	b35c      	cbz	r4, 800f2f0 <_nx_arp_packet_receive+0x170>
 800f298:	f1bb 0f00 	cmp.w	fp, #0
 800f29c:	d028      	beq.n	800f2f0 <_nx_arp_packet_receive+0x170>
 800f29e:	f20a 2bde 	addw	fp, sl, #734	; 0x2de
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 800f2a2:	f8d8 3c0c 	ldr.w	r3, [r8, #3084]	; 0xc0c
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	eb08 018b 	add.w	r1, r8, fp, lsl #2
 800f2ac:	4640      	mov	r0, r8
 800f2ae:	4798      	blx	r3
 800f2b0:	b9f0      	cbnz	r0, 800f2f0 <_nx_arp_packet_receive+0x170>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800f2b2:	f858 302b 	ldr.w	r3, [r8, fp, lsl #2]
 800f2b6:	699b      	ldr	r3, [r3, #24]

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 800f2b8:	e9c3 4508 	strd	r4, r5, [r3, #32]
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 800f2bc:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
            arp_ptr -> nx_arp_retries =               0;
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 800f2c0:	62df      	str	r7, [r3, #44]	; 0x2c
            arp_ptr -> nx_arp_retries =               0;
 800f2c2:	e9c3 0001 	strd	r0, r0, [r3, #4]
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 800f2c6:	b00d      	add	sp, #52	; 0x34
 800f2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	42ab      	cmp	r3, r5
 800f2d0:	d102      	bne.n	800f2d8 <_nx_arp_packet_receive+0x158>
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	454b      	cmp	r3, r9
 800f2d6:	d008      	beq.n	800f2ea <_nx_arp_packet_receive+0x16a>
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 800f2d8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800f2da:	b134      	cbz	r4, 800f2ea <_nx_arp_packet_receive+0x16a>
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 800f2dc:	79f9      	ldrb	r1, [r7, #7]
 800f2de:	462b      	mov	r3, r5
 800f2e0:	f8cd 9000 	str.w	r9, [sp]
 800f2e4:	4672      	mov	r2, lr
 800f2e6:	4640      	mov	r0, r8
 800f2e8:	47a0      	blx	r4
        _nx_packet_release(packet_ptr);
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f7f7 fb80 	bl	80069f0 <_nx_packet_release>
}
 800f2f0:	b00d      	add	sp, #52	; 0x34
 800f2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 800f2f6:	2c00      	cmp	r4, #0
 800f2f8:	d1a7      	bne.n	800f24a <_nx_arp_packet_receive+0xca>
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 800f2fa:	f1bc 0f01 	cmp.w	ip, #1
 800f2fe:	d177      	bne.n	800f3f0 <_nx_arp_packet_receive+0x270>
 800f300:	4293      	cmp	r3, r2
 800f302:	f04f 0a00 	mov.w	sl, #0
 800f306:	f040 80b9 	bne.w	800f47c <_nx_arp_packet_receive+0x2fc>
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 800f30a:	4a5e      	ldr	r2, [pc, #376]	; (800f484 <_nx_arp_packet_receive+0x304>)
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f30c:	ea89 4339 	eor.w	r3, r9, r9, ror #16
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 800f310:	4002      	ands	r2, r0
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f312:	0a18      	lsrs	r0, r3, #8
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 800f314:	f042 0202 	orr.w	r2, r2, #2
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f318:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 800f31c:	604a      	str	r2, [r1, #4]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f31e:	ea82 4b32 	eor.w	fp, r2, r2, ror #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 800f322:	68fb      	ldr	r3, [r7, #12]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f324:	ea80 2039 	eor.w	r0, r0, r9, ror #8
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 800f328:	f8b7 c012 	ldrh.w	ip, [r7, #18]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f32c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 800f330:	ea4c 4e03 	orr.w	lr, ip, r3, lsl #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f334:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 800f338:	f8c1 e008 	str.w	lr, [r1, #8]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f33c:	ea8b 2b32 	eor.w	fp, fp, r2, ror #8
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 800f340:	693b      	ldr	r3, [r7, #16]
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 800f342:	f8b7 c016 	ldrh.w	ip, [r7, #22]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 800f346:	ea4c 4203 	orr.w	r2, ip, r3, lsl #16
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 800f34a:	f101 031c 	add.w	r3, r1, #28
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 800f34e:	60ca      	str	r2, [r1, #12]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 800f350:	9303      	str	r3, [sp, #12]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 800f352:	697b      	ldr	r3, [r7, #20]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800f354:	f8c1 b004 	str.w	fp, [r1, #4]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f358:	ea82 4b32 	eor.w	fp, r2, r2, ror #16
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 800f35c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800f360:	6148      	str	r0, [r1, #20]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f362:	ea8e 403e 	eor.w	r0, lr, lr, ror #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f366:	ea83 4c33 	eor.w	ip, r3, r3, ror #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f36a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f36e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f372:	0a00      	lsrs	r0, r0, #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f374:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f378:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f37c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800f380:	ea8b 2232 	eor.w	r2, fp, r2, ror #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f384:	ea8c 2c33 	eor.w	ip, ip, r3, ror #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f388:	ea84 4334 	eor.w	r3, r4, r4, ror #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800f38c:	f8c1 c010 	str.w	ip, [r1, #16]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f390:	ea80 203e 	eor.w	r0, r0, lr, ror #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f394:	0a1b      	lsrs	r3, r3, #8
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 800f396:	f04f 0c1c 	mov.w	ip, #28
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 800f39a:	f04f 0e06 	mov.w	lr, #6
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f39e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 800f3a2:	f8cd e010 	str.w	lr, [sp, #16]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800f3a6:	ea83 2334 	eor.w	r3, r3, r4, ror #8
 800f3aa:	618b      	str	r3, [r1, #24]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 800f3ac:	9b03      	ldr	r3, [sp, #12]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800f3ae:	e9c1 0202 	strd	r0, r2, [r1, #8]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 800f3b2:	60f3      	str	r3, [r6, #12]
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800f3b4:	a804      	add	r0, sp, #16
        driver_request.nx_ip_driver_packet =   packet_ptr;
 800f3b6:	9608      	str	r6, [sp, #32]
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 800f3b8:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800f3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 800f3be:	e9cd 5906 	strd	r5, r9, [sp, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800f3c2:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800f3c6:	4798      	blx	r3
    if (sender_ip_address != 0)
 800f3c8:	2c00      	cmp	r4, #0
 800f3ca:	d091      	beq.n	800f2f0 <_nx_arp_packet_receive+0x170>
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800f3cc:	f20a 2bde 	addw	fp, sl, #734	; 0x2de
 800f3d0:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
    while (arp_ptr)
 800f3d4:	2900      	cmp	r1, #0
 800f3d6:	f43f af64 	beq.w	800f2a2 <_nx_arp_packet_receive+0x122>
        consumed = NX_TRUE;
 800f3da:	f04f 0b01 	mov.w	fp, #1
 800f3de:	e745      	b.n	800f26c <_nx_arp_packet_receive+0xec>
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 800f3e0:	f608 4748 	addw	r7, r8, #3144	; 0xc48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 800f3e4:	697b      	ldr	r3, [r7, #20]
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 800f3e6:	6377      	str	r7, [r6, #52]	; 0x34
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	f47f af29 	bne.w	800f240 <_nx_arp_packet_receive+0xc0>
 800f3ee:	e71c      	b.n	800f22a <_nx_arp_packet_receive+0xaa>
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 800f3f0:	f04f 0b01 	mov.w	fp, #1
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 800f3f4:	f04f 0a00 	mov.w	sl, #0
        _nx_packet_release(packet_ptr);
 800f3f8:	4630      	mov	r0, r6
 800f3fa:	f7f7 faf9 	bl	80069f0 <_nx_packet_release>
 800f3fe:	e74a      	b.n	800f296 <_nx_arp_packet_receive+0x116>
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 800f400:	460b      	mov	r3, r1
            if (arp_ptr -> nx_arp_route_static)
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	b1d2      	cbz	r2, 800f43c <_nx_arp_packet_receive+0x2bc>
    if (consumed == NX_FALSE)
 800f406:	f1bb 0f00 	cmp.w	fp, #0
 800f40a:	d0f5      	beq.n	800f3f8 <_nx_arp_packet_receive+0x278>
 800f40c:	e770      	b.n	800f2f0 <_nx_arp_packet_receive+0x170>
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	42ab      	cmp	r3, r5
 800f412:	d029      	beq.n	800f468 <_nx_arp_packet_receive+0x2e8>
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 800f414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f416:	b1fb      	cbz	r3, 800f458 <_nx_arp_packet_receive+0x2d8>
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 800f418:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800f41a:	b134      	cbz	r4, 800f42a <_nx_arp_packet_receive+0x2aa>
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 800f41c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f41e:	462b      	mov	r3, r5
 800f420:	79f9      	ldrb	r1, [r7, #7]
 800f422:	4640      	mov	r0, r8
 800f424:	f8cd 9000 	str.w	r9, [sp]
 800f428:	47a0      	blx	r4
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 800f42a:	f8d8 3c1c 	ldr.w	r3, [r8, #3100]	; 0xc1c
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f43f af5b 	beq.w	800f2ea <_nx_arp_packet_receive+0x16a>
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 800f434:	4631      	mov	r1, r6
 800f436:	4640      	mov	r0, r8
 800f438:	4798      	blx	r3
                return;
 800f43a:	e759      	b.n	800f2f0 <_nx_arp_packet_receive+0x170>
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 800f43c:	625d      	str	r5, [r3, #36]	; 0x24
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 800f43e:	4619      	mov	r1, r3
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 800f440:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 800f444:	4640      	mov	r0, r8
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 800f446:	62df      	str	r7, [r3, #44]	; 0x2c
            arp_ptr -> nx_arp_retries =  0;
 800f448:	e9c3 2201 	strd	r2, r2, [r3, #4]
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 800f44c:	f000 f81c 	bl	800f488 <_nx_arp_queue_send>
    if (consumed == NX_FALSE)
 800f450:	f1bb 0f00 	cmp.w	fp, #0
 800f454:	d0d0      	beq.n	800f3f8 <_nx_arp_packet_receive+0x278>
 800f456:	e74b      	b.n	800f2f0 <_nx_arp_packet_receive+0x170>
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 800f458:	230a      	movs	r3, #10
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800f45a:	4621      	mov	r1, r4
 800f45c:	463a      	mov	r2, r7
 800f45e:	4640      	mov	r0, r8
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 800f460:	647b      	str	r3, [r7, #68]	; 0x44
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800f462:	f7f1 fe95 	bl	8001190 <_nx_arp_packet_send>
 800f466:	e7d7      	b.n	800f418 <_nx_arp_packet_receive+0x298>
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	454b      	cmp	r3, r9
 800f46c:	d1d2      	bne.n	800f414 <_nx_arp_packet_receive+0x294>
 800f46e:	e73c      	b.n	800f2ea <_nx_arp_packet_receive+0x16a>
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 800f470:	4293      	cmp	r3, r2
 800f472:	f43f af4a 	beq.w	800f30a <_nx_arp_packet_receive+0x18a>
    if (sender_ip_address != 0)
 800f476:	2c00      	cmp	r4, #0
 800f478:	f47f aeef 	bne.w	800f25a <_nx_arp_packet_receive+0xda>
 800f47c:	f04f 0b01 	mov.w	fp, #1
 800f480:	e7ba      	b.n	800f3f8 <_nx_arp_packet_receive+0x278>
 800f482:	bf00      	nop
 800f484:	ffff0000 	.word	0xffff0000

0800f488 <_nx_arp_queue_send>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 800f488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48c:	b088      	sub	sp, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f48e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f492:	b672      	cpsid	i

    /* Disable interrupts before checking.  */
    TX_DISABLE

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 800f494:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800f496:	b10b      	cbz	r3, 800f49c <_nx_arp_queue_send+0x14>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 800f498:	2400      	movs	r4, #0
 800f49a:	630c      	str	r4, [r1, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f49c:	f382 8810 	msr	PRIMASK, r2

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 800f4a0:	b1cb      	cbz	r3, 800f4d6 <_nx_arp_queue_send+0x4e>
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	4680      	mov	r8, r0

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800f4a6:	2500      	movs	r5, #0

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 800f4a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800f4aa:	4668      	mov	r0, sp
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 800f4ac:	6a67      	ldr	r7, [r4, #36]	; 0x24
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800f4ae:	6a51      	ldr	r1, [r2, #36]	; 0x24
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 800f4b0:	9702      	str	r7, [sp, #8]
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800f4b2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800f4b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800f4b6:	428f      	cmp	r7, r1
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 800f4b8:	f8cd 8018 	str.w	r8, [sp, #24]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800f4bc:	9603      	str	r6, [sp, #12]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 800f4be:	9500      	str	r5, [sp, #0]
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 800f4c0:	69de      	ldr	r6, [r3, #28]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 800f4c2:	9304      	str	r3, [sp, #16]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800f4c4:	61dd      	str	r5, [r3, #28]
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 800f4c6:	635a      	str	r2, [r3, #52]	; 0x34
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800f4c8:	9207      	str	r2, [sp, #28]
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800f4ca:	d807      	bhi.n	800f4dc <_nx_arp_queue_send+0x54>
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800f4cc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f4ce:	4798      	blx	r3
    while (queued_list_head)
 800f4d0:	4633      	mov	r3, r6
 800f4d2:	2e00      	cmp	r6, #0
 800f4d4:	d1e8      	bne.n	800f4a8 <_nx_arp_queue_send+0x20>
        }
    }
}
 800f4d6:	b008      	add	sp, #32
 800f4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ip_ptr -> nx_ip_fragment_processing)
 800f4dc:	f8d8 27b4 	ldr.w	r2, [r8, #1972]	; 0x7b4
 800f4e0:	b10a      	cbz	r2, 800f4e6 <_nx_arp_queue_send+0x5e>
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 800f4e2:	4790      	blx	r2
 800f4e4:	e7f4      	b.n	800f4d0 <_nx_arp_queue_send+0x48>
                _nx_packet_transmit_release(packet_ptr);
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7f7 fae8 	bl	8006abc <_nx_packet_transmit_release>
 800f4ec:	e7f0      	b.n	800f4d0 <_nx_arp_queue_send+0x48>
 800f4ee:	bf00      	nop

0800f4f0 <_nx_icmp_packet_process>:

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 800f4f0:	f8d0 3888 	ldr.w	r3, [r0, #2184]	; 0x888
 800f4f4:	b103      	cbz	r3, 800f4f8 <_nx_icmp_packet_process+0x8>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 800f4f6:	4718      	bx	r3

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 800f4f8:	4608      	mov	r0, r1
 800f4fa:	f7f7 ba79 	b.w	80069f0 <_nx_packet_release>
 800f4fe:	bf00      	nop

0800f500 <_nx_icmp_ping>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_ping(NX_IP *ip_ptr, ULONG ip_address,
                    CHAR *data_ptr, ULONG data_size,
                    NX_PACKET **response_ptr, ULONG wait_option)
{
 800f500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f504:	b087      	sub	sp, #28

#ifndef NX_DISABLE_IPV4
ULONG         next_hop_address;
NX_INTERFACE *interface_ptr = NX_NULL;
 800f506:	2400      	movs	r4, #0
{
 800f508:	4616      	mov	r6, r2
 800f50a:	461f      	mov	r7, r3


    /* Find a suitable interface for sending the ping packet. */
    if (_nx_ip_route_find(ip_ptr, ip_address, &interface_ptr, &next_hop_address) != NX_SUCCESS)
 800f50c:	aa05      	add	r2, sp, #20
 800f50e:	ab04      	add	r3, sp, #16
NX_INTERFACE *interface_ptr = NX_NULL;
 800f510:	9405      	str	r4, [sp, #20]
{
 800f512:	4680      	mov	r8, r0
 800f514:	4689      	mov	r9, r1
 800f516:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if (_nx_ip_route_find(ip_ptr, ip_address, &interface_ptr, &next_hop_address) != NX_SUCCESS)
 800f518:	f7f2 fece 	bl	80022b8 <_nx_ip_route_find>
 800f51c:	b968      	cbnz	r0, 800f53a <_nx_icmp_ping+0x3a>
        return(NX_IP_ADDRESS_ERROR);
    }

    /* Call interface ping service. */
    /*lint -e{644} suppress variable might not be initialized, since "interface_ptr" and "next_hop_address" were initialized in _nx_ip_route_find. */
    return(_nx_icmp_interface_ping(ip_ptr, ip_address, interface_ptr, next_hop_address,
 800f51e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f520:	4649      	mov	r1, r9
 800f522:	9b04      	ldr	r3, [sp, #16]
 800f524:	4640      	mov	r0, r8
 800f526:	9203      	str	r2, [sp, #12]
 800f528:	9a05      	ldr	r2, [sp, #20]
 800f52a:	9502      	str	r5, [sp, #8]
 800f52c:	e9cd 6700 	strd	r6, r7, [sp]
 800f530:	f006 f8c2 	bl	80156b8 <_nx_icmp_interface_ping>
    NX_PARAMETER_NOT_USED(response_ptr);
    NX_PARAMETER_NOT_USED(wait_option);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800f534:	b007      	add	sp, #28
 800f536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(NX_IP_ADDRESS_ERROR);
 800f53a:	2021      	movs	r0, #33	; 0x21
        *response_ptr =  NX_NULL;
 800f53c:	602c      	str	r4, [r5, #0]
}
 800f53e:	b007      	add	sp, #28
 800f540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f544 <_nx_icmpv4_send_error_message>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 800f544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 800f548:	2500      	movs	r5, #0
{
 800f54a:	b089      	sub	sp, #36	; 0x24

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 800f54c:	f8d0 4888 	ldr.w	r4, [r0, #2184]	; 0x888
ULONG            next_hop_address = NX_NULL;
 800f550:	9507      	str	r5, [sp, #28]
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 800f552:	2c00      	cmp	r4, #0
 800f554:	f000 80fa 	beq.w	800f74c <_nx_icmpv4_send_error_message+0x208>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 800f558:	6b8d      	ldr	r5, [r1, #56]	; 0x38

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800f55a:	692c      	ldr	r4, [r5, #16]
 800f55c:	1c66      	adds	r6, r4, #1
 800f55e:	f000 80f5 	beq.w	800f74c <_nx_icmpv4_send_error_message+0x208>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800f562:	f004 4670 	and.w	r6, r4, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800f566:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 800f56a:	f000 80ef 	beq.w	800f74c <_nx_icmpv4_send_error_message+0x208>
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800f56e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800f570:	e9d7 6706 	ldrd	r6, r7, [r7, #24]
 800f574:	ea04 0c06 	and.w	ip, r4, r6
 800f578:	45bc      	cmp	ip, r7
 800f57a:	f000 80ea 	beq.w	800f752 <_nx_icmpv4_send_error_message+0x20e>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 800f57e:	686c      	ldr	r4, [r5, #4]
 800f580:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800f584:	2c00      	cmp	r4, #0
 800f586:	f040 80e1 	bne.w	800f74c <_nx_icmpv4_send_error_message+0x208>
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 800f58a:	68ec      	ldr	r4, [r5, #12]
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 800f58c:	fab4 f684 	clz	r6, r4
 800f590:	f104 4701 	add.w	r7, r4, #2164260864	; 0x81000000
 800f594:	0976      	lsrs	r6, r6, #5
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 800f596:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 800f59a:	bf38      	it	cc
 800f59c:	f046 0601 	orrcc.w	r6, r6, #1
 800f5a0:	2e00      	cmp	r6, #0
 800f5a2:	f040 80d3 	bne.w	800f74c <_nx_icmpv4_send_error_message+0x208>
 800f5a6:	f1a4 3cff 	sub.w	ip, r4, #4294967295
 800f5aa:	fabc fc8c 	clz	ip, ip
 800f5ae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f5b2:	f1bc 0f00 	cmp.w	ip, #0
 800f5b6:	f040 80c9 	bne.w	800f74c <_nx_icmpv4_send_error_message+0x208>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800f5ba:	f004 4670 	and.w	r6, r4, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800f5be:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 800f5c2:	f000 80c3 	beq.w	800f74c <_nx_icmpv4_send_error_message+0x208>
 800f5c6:	461e      	mov	r6, r3
 800f5c8:	4617      	mov	r7, r2
 800f5ca:	468b      	mov	fp, r1
 800f5cc:	4680      	mov	r8, r0
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 800f5ce:	4663      	mov	r3, ip
 800f5d0:	2224      	movs	r2, #36	; 0x24
 800f5d2:	a906      	add	r1, sp, #24
 800f5d4:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 800f5d8:	f7f7 f858 	bl	800668c <_nx_packet_allocate>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	f040 80b5 	bne.w	800f74c <_nx_icmpv4_send_error_message+0x208>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800f5e2:	9a06      	ldr	r2, [sp, #24]

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 800f5e4:	ea4f 6c17 	mov.w	ip, r7, lsr #24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 800f5e8:	0c39      	lsrs	r1, r7, #16
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800f5ea:	2304      	movs	r3, #4
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 800f5ec:	6897      	ldr	r7, [r2, #8]
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800f5ee:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 800f5f2:	0633      	lsls	r3, r6, #24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 800f5f4:	f887 c000 	strb.w	ip, [r7]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 800f5f8:	7079      	strb	r1, [r7, #1]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 800f5fa:	ea43 4633 	orr.w	r6, r3, r3, ror #16

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 800f5fe:	78ed      	ldrb	r5, [r5, #3]
 800f600:	1d39      	adds	r1, r7, #4
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 800f602:	0a36      	lsrs	r6, r6, #8
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 800f604:	8078      	strh	r0, [r7, #2]
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 800f606:	f005 050f 	and.w	r5, r5, #15
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800f60a:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 800f60e:	ea86 2633 	eor.w	r6, r6, r3, ror #8
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 800f612:	3502      	adds	r5, #2
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800f614:	9004      	str	r0, [sp, #16]
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 800f616:	607e      	str	r6, [r7, #4]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 800f618:	00ad      	lsls	r5, r5, #2
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 800f61a:	f105 0608 	add.w	r6, r5, #8
 800f61e:	6256      	str	r6, [r2, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800f620:	eb07 0c06 	add.w	ip, r7, r6
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800f624:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800f628:	68c3      	ldr	r3, [r0, #12]
 800f62a:	e9d0 6a00 	ldrd	r6, sl, [r0]
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800f62e:	f8c2 c00c 	str.w	ip, [r2, #12]
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800f632:	ea86 4e36 	eor.w	lr, r6, r6, ror #16
 800f636:	ea8a 4c3a 	eor.w	ip, sl, sl, ror #16
 800f63a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 800f63e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800f642:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 800f646:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 800f64a:	ea8e 2e36 	eor.w	lr, lr, r6, ror #8
 800f64e:	ea89 4639 	eor.w	r6, r9, r9, ror #16
 800f652:	ea8c 2c3a 	eor.w	ip, ip, sl, ror #8
 800f656:	f8c0 e000 	str.w	lr, [r0]
 800f65a:	0a36      	lsrs	r6, r6, #8
 800f65c:	ea83 4e33 	eor.w	lr, r3, r3, ror #16
 800f660:	6903      	ldr	r3, [r0, #16]
 800f662:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 800f666:	f8c0 c004 	str.w	ip, [r0, #4]
 800f66a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 800f66e:	ea86 2639 	eor.w	r6, r6, r9, ror #8
 800f672:	ea83 4c33 	eor.w	ip, r3, r3, ror #16
 800f676:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 800f67a:	68c3      	ldr	r3, [r0, #12]
 800f67c:	6086      	str	r6, [r0, #8]
 800f67e:	ea4f 261c 	mov.w	r6, ip, lsr #8
 800f682:	ea8e 2e33 	eor.w	lr, lr, r3, ror #8
 800f686:	6903      	ldr	r3, [r0, #16]
 800f688:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 800f68c:	f8c0 e00c 	str.w	lr, [r0, #12]
 800f690:	ea86 2633 	eor.w	r6, r6, r3, ror #8
 800f694:	4603      	mov	r3, r0
 800f696:	6106      	str	r6, [r0, #16]

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
    {

        *dest_packet++ = *src_packet++;
 800f698:	f853 6b04 	ldr.w	r6, [r3], #4
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800f69c:	3d04      	subs	r5, #4
        *dest_packet++ = *src_packet++;
 800f69e:	f841 6f04 	str.w	r6, [r1, #4]!
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800f6a2:	d1f9      	bne.n	800f698 <_nx_icmpv4_send_error_message+0x154>
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800f6a4:	6803      	ldr	r3, [r0, #0]
 800f6a6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800f6aa:	ea83 4633 	eor.w	r6, r3, r3, ror #16
        src_packet++;
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800f6ae:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800f6b2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800f6b6:	0a36      	lsrs	r6, r6, #8
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800f6b8:	9304      	str	r3, [sp, #16]
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800f6ba:	e9d0 a901 	ldrd	sl, r9, [r0, #4]
 800f6be:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 800f6c2:	ea8a 413a 	eor.w	r1, sl, sl, ror #16
 800f6c6:	ea89 4339 	eor.w	r3, r9, r9, ror #16
 800f6ca:	0a09      	lsrs	r1, r1, #8
 800f6cc:	0a1b      	lsrs	r3, r3, #8
 800f6ce:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800f6d2:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 800f6d6:	9105      	str	r1, [sp, #20]
 800f6d8:	6801      	ldr	r1, [r0, #0]
 800f6da:	ea8b 2939 	eor.w	r9, fp, r9, ror #8
 800f6de:	9b05      	ldr	r3, [sp, #20]
 800f6e0:	ea86 2631 	eor.w	r6, r6, r1, ror #8
 800f6e4:	f8c0 9008 	str.w	r9, [r0, #8]
 800f6e8:	ea83 213a 	eor.w	r1, r3, sl, ror #8
 800f6ec:	6006      	str	r6, [r0, #0]
 800f6ee:	ea8c 463c 	eor.w	r6, ip, ip, ror #16
 800f6f2:	ea8e 433e 	eor.w	r3, lr, lr, ror #16
 800f6f6:	6041      	str	r1, [r0, #4]
 800f6f8:	0a36      	lsrs	r6, r6, #8

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
 800f6fa:	4621      	mov	r1, r4
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800f6fc:	0a1b      	lsrs	r3, r3, #8
 800f6fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 800f702:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800f706:	ea86 263c 	eor.w	r6, r6, ip, ror #8
 800f70a:	ea83 233e 	eor.w	r3, r3, lr, ror #8
 800f70e:	6106      	str	r6, [r0, #16]
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800f710:	9e04      	ldr	r6, [sp, #16]
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800f712:	60c3      	str	r3, [r0, #12]
    _nx_ip_route_find(ip_ptr, src_ip,
 800f714:	ab07      	add	r3, sp, #28
 800f716:	4640      	mov	r0, r8
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800f718:	f842 6f34 	str.w	r6, [r2, #52]!
    _nx_ip_route_find(ip_ptr, src_ip,
 800f71c:	f7f2 fdcc 	bl	80022b8 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800f720:	9906      	ldr	r1, [sp, #24]
 800f722:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f726:	065b      	lsls	r3, r3, #25
 800f728:	d51a      	bpl.n	800f760 <_nx_icmpv4_send_error_message+0x21c>
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 800f72a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800f72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f730:	63cb      	str	r3, [r1, #60]	; 0x3c
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 800f732:	9d07      	ldr	r5, [sp, #28]
 800f734:	2300      	movs	r3, #0
 800f736:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800f73a:	26ff      	movs	r6, #255	; 0xff
 800f73c:	4622      	mov	r2, r4
 800f73e:	4640      	mov	r0, r8
 800f740:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800f744:	e9cd 6700 	strd	r6, r7, [sp]
 800f748:	f7f2 fd76 	bl	8002238 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
}
 800f74c:	b009      	add	sp, #36	; 0x24
 800f74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800f752:	ea6f 0c06 	mvn.w	ip, r6
         if_ptr -> nx_interface_ip_network) &&
 800f756:	ea3c 0404 	bics.w	r4, ip, r4
 800f75a:	f47f af10 	bne.w	800f57e <_nx_icmpv4_send_error_message+0x3a>
 800f75e:	e7f5      	b.n	800f74c <_nx_icmpv4_send_error_message+0x208>
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 800f760:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800f762:	462b      	mov	r3, r5
 800f764:	4608      	mov	r0, r1
 800f766:	9500      	str	r5, [sp, #0]
 800f768:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800f76c:	f7f2 fbba 	bl	8001ee4 <_nx_ip_checksum_compute>
        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 800f770:	43c3      	mvns	r3, r0
 800f772:	9906      	ldr	r1, [sp, #24]
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 800f774:	ba5b      	rev16	r3, r3
 800f776:	807b      	strh	r3, [r7, #2]
 800f778:	e7db      	b.n	800f732 <_nx_icmpv4_send_error_message+0x1ee>
 800f77a:	bf00      	nop

0800f77c <_nx_icmpv6_packet_process>:
#ifdef NX_DISABLE_ICMPV6_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV6_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_RX_CHECKSUM)
 800f77c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f782:	05db      	lsls	r3, r3, #23
{
 800f784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f786:	460c      	mov	r4, r1
 800f788:	b083      	sub	sp, #12
 800f78a:	4606      	mov	r6, r0
    header_ptr =  (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800f78c:	688d      	ldr	r5, [r1, #8]
    if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_RX_CHECKSUM)
 800f78e:	d512      	bpl.n	800f7b6 <_nx_icmpv6_packet_process+0x3a>
            return;
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_ECHO_REPLY_TYPE)
 800f790:	782b      	ldrb	r3, [r5, #0]
 800f792:	2b81      	cmp	r3, #129	; 0x81
 800f794:	d020      	beq.n	800f7d8 <_nx_icmpv6_packet_process+0x5c>
    {
        _nx_icmpv6_process_echo_reply(ip_ptr, packet_ptr);
    }
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_ECHO_REQUEST_TYPE)
 800f796:	2b80      	cmp	r3, #128	; 0x80
 800f798:	d02c      	beq.n	800f7f4 <_nx_icmpv6_packet_process+0x78>
    {
        _nx_icmpv6_process_echo_request(ip_ptr, packet_ptr);
    }
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE)
 800f79a:	2b87      	cmp	r3, #135	; 0x87
 800f79c:	d023      	beq.n	800f7e6 <_nx_icmpv6_packet_process+0x6a>

        _nx_icmpv6_process_ns(ip_ptr, packet_ptr);
    }

#ifndef NX_DISABLE_ICMPV6_ROUTER_ADVERTISEMENT_PROCESS
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_ROUTER_ADVERTISEMENT_TYPE)
 800f79e:	2b86      	cmp	r3, #134	; 0x86
 800f7a0:	d036      	beq.n	800f810 <_nx_icmpv6_packet_process+0x94>
    {

        _nx_icmpv6_process_ra(ip_ptr, packet_ptr);
    }
#endif
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_NEIGHBOR_ADVERTISEMENT_TYPE)
 800f7a2:	2b88      	cmp	r3, #136	; 0x88
 800f7a4:	d03b      	beq.n	800f81e <_nx_icmpv6_packet_process+0xa2>
    {

        _nx_icmpv6_process_na(ip_ptr, packet_ptr);
    }
#ifndef NX_DISABLE_ICMPV6_REDIRECT_PROCESS
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_REDIRECT_MESSAGE_TYPE)
 800f7a6:	2b89      	cmp	r3, #137	; 0x89
 800f7a8:	d02b      	beq.n	800f802 <_nx_icmpv6_packet_process+0x86>
            _nx_packet_release(packet_ptr);
 800f7aa:	4620      	mov	r0, r4
#endif

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
    }
}
 800f7ac:	b003      	add	sp, #12
 800f7ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            _nx_packet_release(packet_ptr);
 800f7b2:	f7f7 b91d 	b.w	80069f0 <_nx_packet_release>
        ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800f7b6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f7bc:	213a      	movs	r1, #58	; 0x3a
                                            (ipv6_header -> nx_ip_header_destination_ip));
 800f7be:	f103 0718 	add.w	r7, r3, #24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
 800f7c2:	3308      	adds	r3, #8
 800f7c4:	9700      	str	r7, [sp, #0]
 800f7c6:	f7f2 fb8d 	bl	8001ee4 <_nx_ip_checksum_compute>
        if (checksum)
 800f7ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7ce:	4298      	cmp	r0, r3
 800f7d0:	d1eb      	bne.n	800f7aa <_nx_icmpv6_packet_process+0x2e>
    if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_ECHO_REPLY_TYPE)
 800f7d2:	782b      	ldrb	r3, [r5, #0]
 800f7d4:	2b81      	cmp	r3, #129	; 0x81
 800f7d6:	d1de      	bne.n	800f796 <_nx_icmpv6_packet_process+0x1a>
        _nx_icmpv6_process_echo_reply(ip_ptr, packet_ptr);
 800f7d8:	4621      	mov	r1, r4
 800f7da:	4630      	mov	r0, r6
}
 800f7dc:	b003      	add	sp, #12
 800f7de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        _nx_icmpv6_process_echo_reply(ip_ptr, packet_ptr);
 800f7e2:	f000 b84d 	b.w	800f880 <_nx_icmpv6_process_echo_reply>
        _nx_icmpv6_process_ns(ip_ptr, packet_ptr);
 800f7e6:	4621      	mov	r1, r4
 800f7e8:	4630      	mov	r0, r6
}
 800f7ea:	b003      	add	sp, #12
 800f7ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        _nx_icmpv6_process_ns(ip_ptr, packet_ptr);
 800f7f0:	f000 ba4a 	b.w	800fc88 <_nx_icmpv6_process_ns>
        _nx_icmpv6_process_echo_request(ip_ptr, packet_ptr);
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	4630      	mov	r0, r6
}
 800f7f8:	b003      	add	sp, #12
 800f7fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        _nx_icmpv6_process_echo_request(ip_ptr, packet_ptr);
 800f7fe:	f000 b8ad 	b.w	800f95c <_nx_icmpv6_process_echo_request>
        _nx_icmpv6_process_redirect(ip_ptr, packet_ptr);
 800f802:	4621      	mov	r1, r4
 800f804:	4630      	mov	r0, r6
}
 800f806:	b003      	add	sp, #12
 800f808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        _nx_icmpv6_process_redirect(ip_ptr, packet_ptr);
 800f80c:	f000 bcfa 	b.w	8010204 <_nx_icmpv6_process_redirect>
        _nx_icmpv6_process_ra(ip_ptr, packet_ptr);
 800f810:	4621      	mov	r1, r4
 800f812:	4630      	mov	r0, r6
}
 800f814:	b003      	add	sp, #12
 800f816:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        _nx_icmpv6_process_ra(ip_ptr, packet_ptr);
 800f81a:	f000 bb73 	b.w	800ff04 <_nx_icmpv6_process_ra>
        _nx_icmpv6_process_na(ip_ptr, packet_ptr);
 800f81e:	4621      	mov	r1, r4
 800f820:	4630      	mov	r0, r6
}
 800f822:	b003      	add	sp, #12
 800f824:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        _nx_icmpv6_process_na(ip_ptr, packet_ptr);
 800f828:	f000 b924 	b.w	800fa74 <_nx_icmpv6_process_na>

0800f82c <_nx_icmpv6_perform_DAD>:
/**************************************************************************/

#ifndef NX_DISABLE_IPV6_DAD

VOID _nx_icmpv6_perform_DAD(NX_IP *ip_ptr)
{
 800f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Go through all addresses bound to the IP instance. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {

        /* Check if this interface valid. */
        if (!ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head)
 800f830:	f8d0 4c68 	ldr.w	r4, [r0, #3176]	; 0xc68
{
 800f834:	b082      	sub	sp, #8
        if (!ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head)
 800f836:	b1d4      	cbz	r4, 800f86e <_nx_icmpv6_perform_DAD+0x42>
 800f838:	4606      	mov	r6, r0
                {

                    /* So far we didn't get any conflict addresses back.
                       So promote the address to VALID */

                    nx_ipv6_address_next -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_VALID;
 800f83a:	f04f 0804 	mov.w	r8, #4
                    _nx_icmpv6_send_ns(ip_ptr,
 800f83e:	2700      	movs	r7, #0
 800f840:	e001      	b.n	800f846 <_nx_icmpv6_perform_DAD+0x1a>
             nx_ipv6_address_next = nx_ipv6_address_next -> nxd_ipv6_address_next)
 800f842:	69a4      	ldr	r4, [r4, #24]
        for (nx_ipv6_address_next = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 800f844:	b19c      	cbz	r4, 800f86e <_nx_icmpv6_perform_DAD+0x42>
            if (nx_ipv6_address_next -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_TENTATIVE)
 800f846:	78a3      	ldrb	r3, [r4, #2]
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d1fa      	bne.n	800f842 <_nx_icmpv6_perform_DAD+0x16>
                if (nx_ipv6_address_next -> nxd_ipv6_address_DupAddrDetectTransmit)
 800f84c:	7f25      	ldrb	r5, [r4, #28]
                    _nx_icmpv6_send_ns(ip_ptr,
 800f84e:	4623      	mov	r3, r4
 800f850:	2200      	movs	r2, #0
 800f852:	4630      	mov	r0, r6
 800f854:	f104 0108 	add.w	r1, r4, #8
                if (nx_ipv6_address_next -> nxd_ipv6_address_DupAddrDetectTransmit)
 800f858:	b165      	cbz	r5, 800f874 <_nx_icmpv6_perform_DAD+0x48>
                    _nx_icmpv6_send_ns(ip_ptr,
 800f85a:	e9cd 7700 	strd	r7, r7, [sp]
 800f85e:	f000 ff7d 	bl	801075c <_nx_icmpv6_send_ns>
                    nx_ipv6_address_next -> nxd_ipv6_address_DupAddrDetectTransmit--;
 800f862:	7f23      	ldrb	r3, [r4, #28]
 800f864:	3b01      	subs	r3, #1
 800f866:	7723      	strb	r3, [r4, #28]
             nx_ipv6_address_next = nx_ipv6_address_next -> nxd_ipv6_address_next)
 800f868:	69a4      	ldr	r4, [r4, #24]
        for (nx_ipv6_address_next = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 800f86a:	2c00      	cmp	r4, #0
 800f86c:	d1eb      	bne.n	800f846 <_nx_icmpv6_perform_DAD+0x1a>
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */
                }
            }
        }
    }
}
 800f86e:	b002      	add	sp, #8
 800f870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    nx_ipv6_address_next -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_VALID;
 800f874:	f884 8002 	strb.w	r8, [r4, #2]
                    _nx_icmpv6_DAD_clear_NDCache_entry(ip_ptr,
 800f878:	f006 f800 	bl	801587c <_nx_icmpv6_DAD_clear_NDCache_entry>
 800f87c:	e7e1      	b.n	800f842 <_nx_icmpv6_perform_DAD+0x16>
 800f87e:	bf00      	nop

0800f880 <_nx_icmpv6_process_echo_reply>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/

VOID _nx_icmpv6_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f882:	4605      	mov	r5, r0
    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
#endif

    /* Discard the packet if source address is unspecified (::). */
    if (CHECK_UNSPECIFIED_ADDRESS(ipv6_header -> nx_ip_header_source_ip))
 800f884:	6b88      	ldr	r0, [r1, #56]	; 0x38
{
 800f886:	460c      	mov	r4, r1
    echo_ptr = (NX_ICMPV6_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 800f888:	688e      	ldr	r6, [r1, #8]
    if (CHECK_UNSPECIFIED_ADDRESS(ipv6_header -> nx_ip_header_source_ip))
 800f88a:	3008      	adds	r0, #8
 800f88c:	f7f6 fe0a 	bl	80064a4 <CHECK_UNSPECIFIED_ADDRESS>
 800f890:	2800      	cmp	r0, #0
 800f892:	d149      	bne.n	800f928 <_nx_icmpv6_process_echo_reply+0xa8>
        return;
    }

    /* For IPv6, if the interface IP address is not valid yet,
       do not respond to ping. */
    if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800f894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f896:	789b      	ldrb	r3, [r3, #2]
 800f898:	2b04      	cmp	r3, #4
 800f89a:	d145      	bne.n	800f928 <_nx_icmpv6_process_echo_reply+0xa8>

        return;
    }

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv6_echo_sequence_num;
 800f89c:	88f3      	ldrh	r3, [r6, #6]

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 800f89e:	0219      	lsls	r1, r3, #8
 800f8a0:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
 800f8a4:	b289      	uxth	r1, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f8a6:	f3ef 8710 	mrs	r7, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f8aa:	b672      	cpsid	i
    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f8ac:	4e2a      	ldr	r6, [pc, #168]	; (800f958 <_nx_icmpv6_process_echo_reply+0xd8>)
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 800f8ae:	f8d5 38a0 	ldr.w	r3, [r5, #2208]	; 0x8a0
    _tx_thread_preempt_disable++;
 800f8b2:	6832      	ldr	r2, [r6, #0]
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 800f8b4:	f8d5 08a4 	ldr.w	r0, [r5, #2212]	; 0x8a4
    _tx_thread_preempt_disable++;
 800f8b8:	3201      	adds	r2, #1
 800f8ba:	6032      	str	r2, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f8bc:	f387 8810 	msr	PRIMASK, r7
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 800f8c0:	1e42      	subs	r2, r0, #1
 800f8c2:	b920      	cbnz	r0, 800f8ce <_nx_icmpv6_process_echo_reply+0x4e>
 800f8c4:	e035      	b.n	800f932 <_nx_icmpv6_process_echo_reply+0xb2>
 800f8c6:	3a01      	subs	r2, #1
            break;
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    while (suspended--)
 800f8ca:	1c50      	adds	r0, r2, #1
 800f8cc:	d031      	beq.n	800f932 <_nx_icmpv6_process_echo_reply+0xb2>
        if (thread_ptr -> tx_thread_suspend_info == sequence_num)
 800f8ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f8d0:	4288      	cmp	r0, r1
 800f8d2:	d1f8      	bne.n	800f8c6 <_nx_icmpv6_process_echo_reply+0x46>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f8d4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f8d8:	b672      	cpsid	i
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f8da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d037      	beq.n	800f950 <_nx_icmpv6_process_echo_reply+0xd0>
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 800f8e0:	f8d5 18a0 	ldr.w	r1, [r5, #2208]	; 0x8a0
 800f8e4:	4299      	cmp	r1, r3
                    thread_ptr -> tx_thread_suspended_previous;
 800f8e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800f8e8:	bf08      	it	eq
 800f8ea:	f8c5 28a0 	streq.w	r2, [r5, #2208]	; 0x8a0
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f8ee:	6751      	str	r1, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f8f0:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800f8f2:	670a      	str	r2, [r1, #112]	; 0x70
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 800f8f4:	f8d5 18a4 	ldr.w	r1, [r5, #2212]	; 0x8a4
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f8f8:	2700      	movs	r7, #0
            _tx_thread_preempt_disable++;
 800f8fa:	6832      	ldr	r2, [r6, #0]
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 800f8fc:	3901      	subs	r1, #1
            _tx_thread_preempt_disable++;
 800f8fe:	3201      	adds	r2, #1
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 800f900:	f8c5 18a4 	str.w	r1, [r5, #2212]	; 0x8a4
            _tx_thread_preempt_disable++;
 800f904:	6032      	str	r2, [r6, #0]
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f906:	669f      	str	r7, [r3, #104]	; 0x68
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f908:	f380 8810 	msr	PRIMASK, r0
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV6_ECHO);
 800f90c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            _tx_thread_system_resume(thread_ptr);
 800f90e:	4618      	mov	r0, r3
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV6_ECHO);
 800f910:	68a2      	ldr	r2, [r4, #8]
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) = packet_ptr;
 800f912:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV6_ECHO);
 800f914:	3908      	subs	r1, #8
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV6_ECHO);
 800f916:	3208      	adds	r2, #8
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV6_ECHO);
 800f918:	6261      	str	r1, [r4, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV6_ECHO);
 800f91a:	60a2      	str	r2, [r4, #8]
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) = packet_ptr;
 800f91c:	602c      	str	r4, [r5, #0]
            thread_ptr -> tx_thread_suspend_status = NX_SUCCESS;
 800f91e:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
            _tx_thread_system_resume(thread_ptr);
 800f922:	f00d fcc5 	bl	801d2b0 <_tx_thread_system_resume>
 800f926:	e007      	b.n	800f938 <_nx_icmpv6_process_echo_reply+0xb8>
        _nx_packet_release(packet_ptr);
 800f928:	4620      	mov	r0, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
}
 800f92a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        _nx_packet_release(packet_ptr);
 800f92e:	f7f7 b85f 	b.w	80069f0 <_nx_packet_release>
        _nx_packet_release(packet_ptr);
 800f932:	4620      	mov	r0, r4
 800f934:	f7f7 f85c 	bl	80069f0 <_nx_packet_release>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f938:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f93c:	b672      	cpsid	i
    _tx_thread_preempt_disable--;
 800f93e:	6833      	ldr	r3, [r6, #0]
 800f940:	3b01      	subs	r3, #1
 800f942:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f944:	f382 8810 	msr	PRIMASK, r2
}
 800f948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _tx_thread_system_preempt_check();
 800f94c:	f00d bc92 	b.w	801d274 <_tx_thread_system_preempt_check>
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 800f950:	2200      	movs	r2, #0
 800f952:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
 800f956:	e7cd      	b.n	800f8f4 <_nx_icmpv6_process_echo_reply+0x74>
 800f958:	20007a7c 	.word	0x20007a7c

0800f95c <_nx_icmpv6_process_echo_request>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/

VOID _nx_icmpv6_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr  = (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;

    /* Points to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800f960:	6b8d      	ldr	r5, [r1, #56]	; 0x38
{
 800f962:	b08b      	sub	sp, #44	; 0x2c
 800f964:	4680      	mov	r8, r0
 800f966:	460c      	mov	r4, r1

    /* Check if the destination address is multicast address.  */
    if (IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) & IPV6_ADDRESS_MULTICAST)
 800f968:	f105 0618 	add.w	r6, r5, #24
    header_ptr  = (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800f96c:	688f      	ldr	r7, [r1, #8]
    if (IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) & IPV6_ADDRESS_MULTICAST)
 800f96e:	4630      	mov	r0, r6
 800f970:	f7f6 fdf8 	bl	8006564 <IPv6_Address_Type>
 800f974:	0040      	lsls	r0, r0, #1
 800f976:	d449      	bmi.n	800fa0c <_nx_icmpv6_process_echo_request+0xb0>
    }
    else
    {

        /* Make sure the interface IP address has been validated. */
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800f978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f97a:	789b      	ldrb	r3, [r3, #2]
 800f97c:	2b04      	cmp	r3, #4
 800f97e:	d151      	bne.n	800fa24 <_nx_icmpv6_process_echo_request+0xc8>
 800f980:	f105 0908 	add.w	r9, r5, #8
            return;
        }
    }

    /* Discard the packet if source address is unspecified (::). */
    if (CHECK_UNSPECIFIED_ADDRESS(ipv6_header -> nx_ip_header_source_ip))
 800f984:	4648      	mov	r0, r9
 800f986:	f7f6 fd8d 	bl	80064a4 <CHECK_UNSPECIFIED_ADDRESS>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d14a      	bne.n	800fa24 <_nx_icmpv6_process_echo_request+0xc8>
#endif

    /* Respond to echo request packet.  */

    /* Set up the destination address. */
    dest_addr.nxd_ip_version = NX_IP_VERSION_V6;
 800f98e:	2206      	movs	r2, #6
    dest_addr.nxd_ip_address.v6[0] = ipv6_header -> nx_ip_header_source_ip[0];
    dest_addr.nxd_ip_address.v6[1] = ipv6_header -> nx_ip_header_source_ip[1];
 800f990:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800f994:	9307      	str	r3, [sp, #28]
    }
#endif /* NX_IPSEC_ENABLE */


    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv6_header_type = NX_ICMPV6_ECHO_REPLY_TYPE;
 800f996:	2381      	movs	r3, #129	; 0x81
    dest_addr.nxd_ip_address.v6[0] = ipv6_header -> nx_ip_header_source_ip[0];
 800f998:	e9cd 2105 	strd	r2, r1, [sp, #20]
    dest_addr.nxd_ip_address.v6[3] = ipv6_header -> nx_ip_header_source_ip[3];
 800f99c:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
 800f9a0:	e9cd 1208 	strd	r1, r2, [sp, #32]
    header_ptr -> nx_icmpv6_header_type = NX_ICMPV6_ECHO_REPLY_TYPE;
 800f9a4:	703b      	strb	r3, [r7, #0]
#ifdef NX_DISABLE_ICMPV6_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV6_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 800f9a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ac:	0599      	lsls	r1, r3, #22
 800f9ae:	d452      	bmi.n	800fa56 <_nx_icmpv6_process_echo_request+0xfa>
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Take a short cut to fix the checksum. */
        checksum = header_ptr -> nx_icmpv6_header_checksum;
 800f9b0:	887b      	ldrh	r3, [r7, #2]

        /* Change to host byte order. */
        NX_CHANGE_USHORT_ENDIAN(checksum);
 800f9b2:	021d      	lsls	r5, r3, #8
 800f9b4:	ea45 2513 	orr.w	r5, r5, r3, lsr #8

        tmp = ((USHORT)(~checksum) & 0xFFFF);
 800f9b8:	43ed      	mvns	r5, r5
 800f9ba:	b2ad      	uxth	r5, r5

        /* The original ICMP type is ECHO_REQUEST. */
        tmp -= (NX_ICMPV6_ECHO_REQUEST_TYPE << 8);
 800f9bc:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
        if (tmp > (ULONG)0x80000000)
 800f9c0:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800f9c4:	d901      	bls.n	800f9ca <_nx_icmpv6_process_echo_request+0x6e>
        {
            tmp = (tmp & 0xFFFF) - 1;
 800f9c6:	b2ad      	uxth	r5, r5
 800f9c8:	3d01      	subs	r5, #1

        tmp += (ULONG)(header_ptr -> nx_icmpv6_header_type << 8);

        /* Compute the checksum differently depending if the echo request sends to
           a multicast or unicast address.   */
        if ((IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) &
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f7f6 fdca 	bl	8006564 <IPv6_Address_Type>
 800f9d0:	0043      	lsls	r3, r0, #1
 800f9d2:	d42d      	bmi.n	800fa30 <_nx_icmpv6_process_echo_request+0xd4>
        tmp += (ULONG)(header_ptr -> nx_icmpv6_header_type << 8);
 800f9d4:	f505 4501 	add.w	r5, r5, #33024	; 0x8100
            hop_limit = 255;
        }
        else
        {
            /* Compute the checksum for a unicast address. */
            hop_limit = ip_ptr -> nx_ipv6_hop_limit;
 800f9d8:	f8d8 1ee8 	ldr.w	r1, [r8, #3816]	; 0xee8

            tmp = (tmp >> 16) + (tmp & 0xFFFF);
 800f9dc:	b2ab      	uxth	r3, r5
 800f9de:	eb03 4515 	add.w	r5, r3, r5, lsr #16

            /* Do it again in case of carrying */
            tmp = (tmp >> 16) + (tmp & 0xFFFF);
 800f9e2:	b2ab      	uxth	r3, r5
 800f9e4:	eb03 4315 	add.w	r3, r3, r5, lsr #16
            header_ptr -> nx_icmpv6_header_checksum = (USHORT)(~tmp);
 800f9e8:	43db      	mvns	r3, r3
            NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv6_header_checksum);
 800f9ea:	ba5b      	rev16	r3, r3
 800f9ec:	807b      	strh	r3, [r7, #2]
#endif

    /* Send the ICMP packet to the IP component.  */
    _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_ICMPV6,
                         packet_ptr -> nx_packet_length, hop_limit,
                         packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800f9ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
    _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_ICMPV6,
 800f9f0:	ad06      	add	r5, sp, #24
 800f9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9f4:	4640      	mov	r0, r8
                         packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800f9f6:	3208      	adds	r2, #8
    _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_ICMPV6,
 800f9f8:	9100      	str	r1, [sp, #0]
 800f9fa:	4621      	mov	r1, r4
 800f9fc:	9502      	str	r5, [sp, #8]
 800f9fe:	9201      	str	r2, [sp, #4]
 800fa00:	223a      	movs	r2, #58	; 0x3a
 800fa02:	f002 fb5b 	bl	80120bc <_nx_ipv6_packet_send>
                         dest_addr.nxd_ip_address.v6);
}
 800fa06:	b00b      	add	sp, #44	; 0x2c
 800fa08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800fa0c:	4622      	mov	r2, r4
        status = _nxd_ipv6_interface_find(ip_ptr, ipv6_header -> nx_ip_header_source_ip,
 800fa0e:	f105 0908 	add.w	r9, r5, #8
 800fa12:	4640      	mov	r0, r8
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800fa14:	f852 3f34 	ldr.w	r3, [r2, #52]!
        status = _nxd_ipv6_interface_find(ip_ptr, ipv6_header -> nx_ip_header_source_ip,
 800fa18:	4649      	mov	r1, r9
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	f005 fad4 	bl	8014fc8 <_nxd_ipv6_interface_find>
        if (status != NX_SUCCESS)
 800fa20:	2800      	cmp	r0, #0
 800fa22:	d0af      	beq.n	800f984 <_nx_icmpv6_process_echo_request+0x28>
            _nx_packet_release(packet_ptr);
 800fa24:	4620      	mov	r0, r4
 800fa26:	f7f6 ffe3 	bl	80069f0 <_nx_packet_release>
}
 800fa2a:	b00b      	add	sp, #44	; 0x2c
 800fa2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                                          packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800fa30:	6b63      	ldr	r3, [r4, #52]	; 0x34
            header_ptr -> nx_icmpv6_header_checksum = 0;
 800fa32:	2000      	movs	r0, #0
            tmp = _nx_ip_checksum_compute(packet_ptr,
 800fa34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fa36:	213a      	movs	r1, #58	; 0x3a
            header_ptr -> nx_icmpv6_header_checksum = 0;
 800fa38:	8078      	strh	r0, [r7, #2]
            tmp = _nx_ip_checksum_compute(packet_ptr,
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	f8cd 9000 	str.w	r9, [sp]
 800fa40:	4620      	mov	r0, r4
 800fa42:	f7f2 fa4f 	bl	8001ee4 <_nx_ip_checksum_compute>
            tmp = ~tmp;
 800fa46:	43c0      	mvns	r0, r0
            hop_limit = 255;
 800fa48:	21ff      	movs	r1, #255	; 0xff
            NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv6_header_checksum);
 800fa4a:	b280      	uxth	r0, r0
 800fa4c:	0203      	lsls	r3, r0, #8
 800fa4e:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 800fa52:	8078      	strh	r0, [r7, #2]
 800fa54:	e7cb      	b.n	800f9ee <_nx_icmpv6_process_echo_request+0x92>
        header_ptr -> nx_icmpv6_header_checksum = 0;
 800fa56:	8078      	strh	r0, [r7, #2]
        if ((IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) &
 800fa58:	4630      	mov	r0, r6
 800fa5a:	f7f6 fd83 	bl	8006564 <IPv6_Address_Type>
 800fa5e:	0042      	lsls	r2, r0, #1
 800fa60:	d505      	bpl.n	800fa6e <_nx_icmpv6_process_echo_request+0x112>
            hop_limit = 255;
 800fa62:	21ff      	movs	r1, #255	; 0xff
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
 800fa64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fa66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa6a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fa6c:	e7bf      	b.n	800f9ee <_nx_icmpv6_process_echo_request+0x92>
            hop_limit = ip_ptr -> nx_ipv6_hop_limit;
 800fa6e:	f8d8 1ee8 	ldr.w	r1, [r8, #3816]	; 0xee8
 800fa72:	e7f7      	b.n	800fa64 <_nx_icmpv6_process_echo_request+0x108>

0800fa74 <_nx_icmpv6_process_na>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_process_na(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800fa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

ND_CACHE_ENTRY   *nd_entry = NX_NULL;

/*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
NX_ICMPV6_ND     *nd_ptr = (NX_ICMPV6_ND *)(packet_ptr -> nx_packet_prepend_ptr);
 800fa78:	688d      	ldr	r5, [r1, #8]
{
 800fa7a:	b08d      	sub	sp, #52	; 0x34
ND_CACHE_ENTRY   *nd_entry = NX_NULL;
 800fa7c:	2300      	movs	r3, #0
{
 800fa7e:	4680      	mov	r8, r0

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Take care of endian-ness. */
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800fa80:	f105 0708 	add.w	r7, r5, #8
{
 800fa84:	460e      	mov	r6, r1
ND_CACHE_ENTRY   *nd_entry = NX_NULL;
 800fa86:	9306      	str	r3, [sp, #24]
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f7f6 fdd5 	bl	8006638 <_nx_ipv6_address_change_endian>
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800fa8e:	686a      	ldr	r2, [r5, #4]

    /* Validate the neighbor advertisement message. */
    if (_nx_icmpv6_validate_neighbor_message(packet_ptr) != NX_SUCCESS)
 800fa90:	4630      	mov	r0, r6
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800fa92:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 800fa96:	0a1b      	lsrs	r3, r3, #8
 800fa98:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800fa9c:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 800faa0:	606b      	str	r3, [r5, #4]
    if (_nx_icmpv6_validate_neighbor_message(packet_ptr) != NX_SUCCESS)
 800faa2:	f000 ffff 	bl	8010aa4 <_nx_icmpv6_validate_neighbor_message>
 800faa6:	2800      	cmp	r0, #0
 800faa8:	d136      	bne.n	800fb18 <_nx_icmpv6_process_na+0xa4>
        ipv6_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;

        /* Find the option field. */
        /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
        option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(nd_ptr, sizeof(NX_ICMPV6_ND));
        option_length = (UINT)packet_ptr -> nx_packet_length - (UINT)sizeof(NX_ICMPV6_ND);
 800faaa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800faac:	4682      	mov	sl, r0
        option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(nd_ptr, sizeof(NX_ICMPV6_ND));
 800faae:	f105 0418 	add.w	r4, r5, #24
        ipv6_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800fab2:	6bb1      	ldr	r1, [r6, #56]	; 0x38

        /* Find the TLLA option */
        while (option_length > 0)
 800fab4:	3a18      	subs	r2, #24
 800fab6:	d00b      	beq.n	800fad0 <_nx_icmpv6_process_na+0x5c>
        {
            /* Check if this is a Target LLA option. */
            if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_TRG_LINK_ADDR)
 800fab8:	7e2b      	ldrb	r3, [r5, #24]
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d103      	bne.n	800fac6 <_nx_icmpv6_process_na+0x52>
 800fabe:	e0ad      	b.n	800fc1c <_nx_icmpv6_process_na+0x1a8>
 800fac0:	7823      	ldrb	r3, [r4, #0]
 800fac2:	2b02      	cmp	r3, #2
 800fac4:	d02e      	beq.n	800fb24 <_nx_icmpv6_process_na+0xb0>
            {
                break;
            }

            /* Get the next option. */
            option_length -= ((UINT)(option_ptr -> nx_icmpv6_option_length) << 3);
 800fac6:	7863      	ldrb	r3, [r4, #1]
 800fac8:	00db      	lsls	r3, r3, #3
        while (option_length > 0)
 800faca:	1ad2      	subs	r2, r2, r3

            /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
            option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800facc:	441c      	add	r4, r3
        while (option_length > 0)
 800face:	d1f7      	bne.n	800fac0 <_nx_icmpv6_process_na+0x4c>
            option_ptr = NX_NULL;
        }

        /* Determine the NA packet destination type. */
        /* Is the destination a multicast address? */
        if ((ipv6_header_ptr -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800fad0:	6988      	ldr	r0, [r1, #24]
            option_ptr = NX_NULL;
 800fad2:	2400      	movs	r4, #0
        if ((ipv6_header_ptr -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800fad4:	f000 497f 	and.w	r9, r0, #4278190080	; 0xff000000
 800fad8:	f1a9 437f 	sub.w	r3, r9, #4278190080	; 0xff000000
 800fadc:	fab3 f383 	clz	r3, r3
 800fae0:	095b      	lsrs	r3, r3, #5
 800fae2:	9305      	str	r3, [sp, #20]
 800fae4:	f108 0918 	add.w	r9, r8, #24
        /* Find the same address as target address in IPv6 address structure.
           Assume target address is 4-byte aligned.*/
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
        {

            if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address,
 800fae8:	4648      	mov	r0, r9
 800faea:	4639      	mov	r1, r7
 800faec:	ea4f 1b4a 	mov.w	fp, sl, lsl #5
 800faf0:	f109 0920 	add.w	r9, r9, #32
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 800faf4:	f10a 0a01 	add.w	sl, sl, #1
            if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address,
 800faf8:	f7f6 fcbe 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d155      	bne.n	800fbac <_nx_icmpv6_process_na+0x138>
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 800fb00:	f1ba 0f03 	cmp.w	sl, #3
 800fb04:	d1f0      	bne.n	800fae8 <_nx_icmpv6_process_na+0x74>
            }
        }
#endif /* NX_DISABLE_IPV6_DAD */

        /* Find the ND entry */
        if (_nx_nd_cache_find_entry(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress, &nd_entry) != NX_SUCCESS)
 800fb06:	4639      	mov	r1, r7
 800fb08:	4640      	mov	r0, r8
 800fb0a:	aa06      	add	r2, sp, #24
 800fb0c:	f002 ff48 	bl	80129a0 <_nx_nd_cache_find_entry>
            error = 1;
        }
    }

    /* Do not process the NA any further if any errors detected. */
    if (error)
 800fb10:	9b05      	ldr	r3, [sp, #20]
 800fb12:	ea50 0903 	orrs.w	r9, r0, r3
 800fb16:	d008      	beq.n	800fb2a <_nx_icmpv6_process_na+0xb6>
        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
#endif /* NX_DISABLE_ICMP_INFO */

        /* Release the packet and we are done. */
        _nx_packet_release(packet_ptr);
 800fb18:	4630      	mov	r0, r6
 800fb1a:	f7f6 ff69 	bl	80069f0 <_nx_packet_release>
        }
    }

    _nx_packet_release(packet_ptr);
    return;
}
 800fb1e:	b00d      	add	sp, #52	; 0x34
 800fb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
INT               error = 0;
 800fb24:	2300      	movs	r3, #0
 800fb26:	9305      	str	r3, [sp, #20]
 800fb28:	e7dc      	b.n	800fae4 <_nx_icmpv6_process_na+0x70>
 800fb2a:	9b06      	ldr	r3, [sp, #24]
    if (option_ptr)
 800fb2c:	2c00      	cmp	r4, #0
 800fb2e:	f000 8081 	beq.w	800fc34 <_nx_icmpv6_process_na+0x1c0>
        if ((new_lla[0] == lla[0]) && (new_lla[1] == lla[1]) && (new_lla[2] == lla[2]))
 800fb32:	8861      	ldrh	r1, [r4, #2]
 800fb34:	8a1a      	ldrh	r2, [r3, #16]
 800fb36:	4291      	cmp	r1, r2
 800fb38:	f000 8097 	beq.w	800fc6a <_nx_icmpv6_process_na+0x1f6>
    if (nd_ptr -> nx_icmpv6_nd_flag & 0x80000000)
 800fb3c:	6869      	ldr	r1, [r5, #4]
 800fb3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb40:	2900      	cmp	r1, #0
 800fb42:	db5f      	blt.n	800fc04 <_nx_icmpv6_process_na+0x190>
        if (nd_entry -> nx_nd_cache_is_router)
 800fb44:	b12a      	cbz	r2, 800fb52 <_nx_icmpv6_process_na+0xde>
            if (option_ptr && !lla_same)
 800fb46:	b1dc      	cbz	r4, 800fb80 <_nx_icmpv6_process_na+0x10c>
 800fb48:	f1b9 0f00 	cmp.w	r9, #0
 800fb4c:	d118      	bne.n	800fb80 <_nx_icmpv6_process_na+0x10c>
                if ((nd_ptr -> nx_icmpv6_nd_flag & 0x20000000) == 0)
 800fb4e:	0089      	lsls	r1, r1, #2
 800fb50:	d416      	bmi.n	800fb80 <_nx_icmpv6_process_na+0x10c>
    if ((nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_INCOMPLETE) ||
 800fb52:	7e59      	ldrb	r1, [r3, #25]
 800fb54:	2901      	cmp	r1, #1
 800fb56:	d038      	beq.n	800fbca <_nx_icmpv6_process_na+0x156>
 800fb58:	2906      	cmp	r1, #6
 800fb5a:	d036      	beq.n	800fbca <_nx_icmpv6_process_na+0x156>
 800fb5c:	f089 0901 	eor.w	r9, r9, #1
    if ((nd_ptr -> nx_icmpv6_nd_flag & 0x20000000) == 0 && option_ptr && (!lla_same))
 800fb60:	6868      	ldr	r0, [r5, #4]
 800fb62:	2c00      	cmp	r4, #0
 800fb64:	bf14      	ite	ne
 800fb66:	464a      	movne	r2, r9
 800fb68:	2200      	moveq	r2, #0
 800fb6a:	f010 5500 	ands.w	r5, r0, #536870912	; 0x20000000
 800fb6e:	d163      	bne.n	800fc38 <_nx_icmpv6_process_na+0x1c4>
 800fb70:	2a00      	cmp	r2, #0
 800fb72:	d06f      	beq.n	800fc54 <_nx_icmpv6_process_na+0x1e0>
        if (nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 800fb74:	2902      	cmp	r1, #2
 800fb76:	d1cf      	bne.n	800fb18 <_nx_icmpv6_process_na+0xa4>
            nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800fb78:	2203      	movs	r2, #3
            nd_entry -> nx_nd_cache_timer_tick = 0;
 800fb7a:	61dd      	str	r5, [r3, #28]
            nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800fb7c:	765a      	strb	r2, [r3, #25]
 800fb7e:	e7cb      	b.n	800fb18 <_nx_icmpv6_process_na+0xa4>
                router_address.nxd_ip_address.v6[0] = nd_ptr -> nx_icmpv6_nd_targetAddress[0];
 800fb80:	68ab      	ldr	r3, [r5, #8]
                nd_entry -> nx_nd_cache_is_router -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 800fb82:	f04f 0a00 	mov.w	sl, #0
                router_address.nxd_ip_version = NX_IP_VERSION_V6;
 800fb86:	2006      	movs	r0, #6
                _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
 800fb88:	a907      	add	r1, sp, #28
                nd_entry -> nx_nd_cache_is_router -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 800fb8a:	f8c2 a018 	str.w	sl, [r2, #24]
                router_address.nxd_ip_address.v6[0] = nd_ptr -> nx_icmpv6_nd_targetAddress[0];
 800fb8e:	9308      	str	r3, [sp, #32]
                router_address.nxd_ip_version = NX_IP_VERSION_V6;
 800fb90:	9007      	str	r0, [sp, #28]
                _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
 800fb92:	4640      	mov	r0, r8
                router_address.nxd_ip_address.v6[2] = nd_ptr -> nx_icmpv6_nd_targetAddress[2];
 800fb94:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
 800fb98:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
                router_address.nxd_ip_address.v6[3] = nd_ptr -> nx_icmpv6_nd_targetAddress[3];
 800fb9c:	696b      	ldr	r3, [r5, #20]
 800fb9e:	930b      	str	r3, [sp, #44]	; 0x2c
                _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
 800fba0:	f004 ffa6 	bl	8014af0 <_nxd_ipv6_default_router_delete>
                nd_entry -> nx_nd_cache_is_router = NX_NULL;
 800fba4:	9b06      	ldr	r3, [sp, #24]
 800fba6:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
 800fbaa:	e7d2      	b.n	800fb52 <_nx_icmpv6_process_na+0xde>
                if (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_TENTATIVE)
 800fbac:	eb08 030b 	add.w	r3, r8, fp
 800fbb0:	7c9b      	ldrb	r3, [r3, #18]
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d1a7      	bne.n	800fb06 <_nx_icmpv6_process_na+0x92>
                    _nx_icmpv6_DAD_failure(ip_ptr, &ip_ptr -> nx_ipv6_address[i]);
 800fbb6:	f10b 0110 	add.w	r1, fp, #16
 800fbba:	4640      	mov	r0, r8
 800fbbc:	4441      	add	r1, r8
 800fbbe:	f005 fe69 	bl	8015894 <_nx_icmpv6_DAD_failure>
                    _nx_packet_release(packet_ptr);
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7f6 ff14 	bl	80069f0 <_nx_packet_release>
                    return;
 800fbc8:	e7a9      	b.n	800fb1e <_nx_icmpv6_process_na+0xaa>
        if (option_ptr)
 800fbca:	2c00      	cmp	r4, #0
 800fbcc:	d0a4      	beq.n	800fb18 <_nx_icmpv6_process_na+0xa4>
                             nd_ptr -> nx_icmpv6_nd_flag & 0x40000000 ? ND_CACHE_STATE_REACHABLE : ND_CACHE_STATE_STALE,
 800fbce:	686a      	ldr	r2, [r5, #4]
            _nx_nd_cache_add(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress,
 800fbd0:	1ca3      	adds	r3, r4, #2
                             packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached,
 800fbd2:	6b70      	ldr	r0, [r6, #52]	; 0x34
            _nx_nd_cache_add(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress,
 800fbd4:	2400      	movs	r4, #0
 800fbd6:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 800fbda:	4639      	mov	r1, r7
                             packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached,
 800fbdc:	6842      	ldr	r2, [r0, #4]
            _nx_nd_cache_add(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress,
 800fbde:	bf0c      	ite	eq
 800fbe0:	2503      	moveq	r5, #3
 800fbe2:	2502      	movne	r5, #2
 800fbe4:	9002      	str	r0, [sp, #8]
 800fbe6:	a806      	add	r0, sp, #24
 800fbe8:	9501      	str	r5, [sp, #4]
 800fbea:	9003      	str	r0, [sp, #12]
 800fbec:	4640      	mov	r0, r8
 800fbee:	9400      	str	r4, [sp, #0]
 800fbf0:	f002 fd2c 	bl	801264c <_nx_nd_cache_add>
            if (nd_entry -> nx_nd_cache_packet_waiting_head)
 800fbf4:	9906      	ldr	r1, [sp, #24]
 800fbf6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d08d      	beq.n	800fb18 <_nx_icmpv6_process_na+0xa4>
                _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 800fbfc:	4640      	mov	r0, r8
 800fbfe:	f000 fe75 	bl	80108ec <_nx_icmpv6_send_queued_packets>
 800fc02:	e789      	b.n	800fb18 <_nx_icmpv6_process_na+0xa4>
        if (nd_entry -> nx_nd_cache_is_router == NX_NULL)
 800fc04:	2a00      	cmp	r2, #0
 800fc06:	d1a4      	bne.n	800fb52 <_nx_icmpv6_process_na+0xde>
            rt_entry =
 800fc08:	4639      	mov	r1, r7
 800fc0a:	4640      	mov	r0, r8
 800fc0c:	f005 f916 	bl	8014e3c <_nxd_ipv6_find_default_router_from_address>
                nd_entry -> nx_nd_cache_is_router = rt_entry;
 800fc10:	9b06      	ldr	r3, [sp, #24]
            if (rt_entry)
 800fc12:	2800      	cmp	r0, #0
 800fc14:	d09d      	beq.n	800fb52 <_nx_icmpv6_process_na+0xde>
                nd_entry -> nx_nd_cache_is_router = rt_entry;
 800fc16:	6258      	str	r0, [r3, #36]	; 0x24
                rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr = (VOID *)nd_entry;
 800fc18:	6183      	str	r3, [r0, #24]
 800fc1a:	e79a      	b.n	800fb52 <_nx_icmpv6_process_na+0xde>
        if ((ipv6_header_ptr -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800fc1c:	698b      	ldr	r3, [r1, #24]
 800fc1e:	f003 497f 	and.w	r9, r3, #4278190080	; 0xff000000
INT               error = 0;
 800fc22:	f1b9 4f7f 	cmp.w	r9, #4278190080	; 0xff000000
 800fc26:	bf08      	it	eq
 800fc28:	2c00      	cmpeq	r4, #0
 800fc2a:	bf0c      	ite	eq
 800fc2c:	2301      	moveq	r3, #1
 800fc2e:	2300      	movne	r3, #0
 800fc30:	9305      	str	r3, [sp, #20]
 800fc32:	e757      	b.n	800fae4 <_nx_icmpv6_process_na+0x70>
INT               lla_same = 0;
 800fc34:	46a1      	mov	r9, r4
 800fc36:	e781      	b.n	800fb3c <_nx_icmpv6_process_na+0xc8>
 800fc38:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
        if (option_ptr && !lla_same)
 800fc3c:	b162      	cbz	r2, 800fc58 <_nx_icmpv6_process_na+0x1e4>
            lla[0] = new_lla[0];
 800fc3e:	8862      	ldrh	r2, [r4, #2]
 800fc40:	821a      	strh	r2, [r3, #16]
            lla[1] = new_lla[1];
 800fc42:	88a2      	ldrh	r2, [r4, #4]
 800fc44:	825a      	strh	r2, [r3, #18]
            lla[2] = new_lla[2];
 800fc46:	88e2      	ldrh	r2, [r4, #6]
 800fc48:	829a      	strh	r2, [r3, #20]
        if (nd_ptr -> nx_icmpv6_nd_flag & 0x40000000) /* S bit is set, force cache entry to REACHABLE */
 800fc4a:	b940      	cbnz	r0, 800fc5e <_nx_icmpv6_process_na+0x1ea>
            nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800fc4c:	2203      	movs	r2, #3
            nd_entry -> nx_nd_cache_timer_tick = 0;
 800fc4e:	61d8      	str	r0, [r3, #28]
            nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800fc50:	765a      	strb	r2, [r3, #25]
 800fc52:	e761      	b.n	800fb18 <_nx_icmpv6_process_na+0xa4>
 800fc54:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
        if (nd_ptr -> nx_icmpv6_nd_flag & 0x40000000) /* S bit is set, force cache entry to REACHABLE */
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	f43f af5d 	beq.w	800fb18 <_nx_icmpv6_process_na+0xa4>
            nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_REACHABLE;
 800fc5e:	2202      	movs	r2, #2
 800fc60:	765a      	strb	r2, [r3, #25]
            nd_entry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_reachable_timer;
 800fc62:	f8d8 2ee4 	ldr.w	r2, [r8, #3812]	; 0xee4
 800fc66:	61da      	str	r2, [r3, #28]
 800fc68:	e756      	b.n	800fb18 <_nx_icmpv6_process_na+0xa4>
        if ((new_lla[0] == lla[0]) && (new_lla[1] == lla[1]) && (new_lla[2] == lla[2]))
 800fc6a:	88a1      	ldrh	r1, [r4, #4]
 800fc6c:	8a5a      	ldrh	r2, [r3, #18]
 800fc6e:	4291      	cmp	r1, r2
 800fc70:	f47f af64 	bne.w	800fb3c <_nx_icmpv6_process_na+0xc8>
 800fc74:	f8b4 9006 	ldrh.w	r9, [r4, #6]
 800fc78:	8a9a      	ldrh	r2, [r3, #20]
 800fc7a:	eba9 0902 	sub.w	r9, r9, r2
 800fc7e:	fab9 f989 	clz	r9, r9
 800fc82:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800fc86:	e759      	b.n	800fb3c <_nx_icmpv6_process_na+0xc8>

0800fc88 <_nx_icmpv6_process_ns>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_process_ns(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800fc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Assume there is no error. */
    error = 0;

    /* Get a pointer to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800fc8c:	f8d1 8008 	ldr.w	r8, [r1, #8]
{
 800fc90:	b08f      	sub	sp, #60	; 0x3c

    /* Get a pointer to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800fc92:	6b8b      	ldr	r3, [r1, #56]	; 0x38
{
 800fc94:	460f      	mov	r7, r1
    /* Get a pointer to the Neighbor Discovery message. */
    /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
    nd_ptr = (NX_ICMPV6_ND *)header_ptr;

    /* Convert target address to host byte order. */
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800fc96:	f108 0b08 	add.w	fp, r8, #8
{
 800fc9a:	9005      	str	r0, [sp, #20]
 800fc9c:	3308      	adds	r3, #8
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800fc9e:	4658      	mov	r0, fp
 800fca0:	9304      	str	r3, [sp, #16]
 800fca2:	f7f6 fcc9 	bl	8006638 <_nx_ipv6_address_change_endian>

    /* Convert flag field to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800fca6:	f8d8 2004 	ldr.w	r2, [r8, #4]


    /* Validate the packet. */
    if (_nx_icmpv6_validate_neighbor_message(packet_ptr) != NX_SUCCESS)
 800fcaa:	4638      	mov	r0, r7
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800fcac:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 800fcb0:	0a1b      	lsrs	r3, r3, #8
 800fcb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800fcb6:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 800fcba:	f8c8 3004 	str.w	r3, [r8, #4]
    if (_nx_icmpv6_validate_neighbor_message(packet_ptr) != NX_SUCCESS)
 800fcbe:	f000 fef1 	bl	8010aa4 <_nx_icmpv6_validate_neighbor_message>
 800fcc2:	9007      	str	r0, [sp, #28]
 800fcc4:	b140      	cbz	r0, 800fcd8 <_nx_icmpv6_process_ns+0x50>
        error = 1;
    }

    /* Find whether or not sender is unspecified.  If sender is unspecified,
       the sender is performing DAD process. */
    if (CHECK_UNSPECIFIED_ADDRESS(ipv6_header -> nx_ip_header_source_ip))
 800fcc6:	9804      	ldr	r0, [sp, #16]
 800fcc8:	f7f6 fbec 	bl	80064a4 <CHECK_UNSPECIFIED_ADDRESS>

            /* Our interface address is in tentative state.  Therefore interface
               address is also invalid.  */
            _nx_icmpv6_DAD_failure(ip_ptr, interface_addr);

            _nx_packet_release(packet_ptr);
 800fccc:	4638      	mov	r0, r7
 800fcce:	f7f6 fe8f 	bl	80069f0 <_nx_packet_release>
                         interface_addr -> nxd_ipv6_address,
                         dest_address);

    /* (Let the driver release the packet.) */
    return;
}
 800fcd2:	b00f      	add	sp, #60	; 0x3c
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (CHECK_UNSPECIFIED_ADDRESS(ipv6_header -> nx_ip_header_source_ip))
 800fcd8:	9804      	ldr	r0, [sp, #16]
 800fcda:	f7f6 fbe3 	bl	80064a4 <CHECK_UNSPECIFIED_ADDRESS>
 800fcde:	2800      	cmp	r0, #0
 800fce0:	f000 80a6 	beq.w	800fe30 <_nx_icmpv6_process_ns+0x1a8>
        source_unspecified = NX_TRUE;
 800fce4:	2301      	movs	r3, #1
    interface_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800fce6:	6b7d      	ldr	r5, [r7, #52]	; 0x34
        source_unspecified = NX_TRUE;
 800fce8:	9308      	str	r3, [sp, #32]
        while (interface_addr != NX_NULL)
 800fcea:	b91d      	cbnz	r5, 800fcf4 <_nx_icmpv6_process_ns+0x6c>
 800fcec:	e7ee      	b.n	800fccc <_nx_icmpv6_process_ns+0x44>
            interface_addr = interface_addr -> nxd_ipv6_address_next;
 800fcee:	69ad      	ldr	r5, [r5, #24]
        while (interface_addr != NX_NULL)
 800fcf0:	2d00      	cmp	r5, #0
 800fcf2:	d0eb      	beq.n	800fccc <_nx_icmpv6_process_ns+0x44>
            if ((CHECK_IPV6_ADDRESSES_SAME(interface_addr -> nxd_ipv6_address,
 800fcf4:	f105 0908 	add.w	r9, r5, #8
 800fcf8:	4659      	mov	r1, fp
 800fcfa:	4648      	mov	r0, r9
 800fcfc:	f7f6 fbbc 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d0f4      	beq.n	800fcee <_nx_icmpv6_process_ns+0x66>
    if (source_unspecified == NX_TRUE)
 800fd04:	9b08      	ldr	r3, [sp, #32]
    packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = interface_addr;
 800fd06:	637d      	str	r5, [r7, #52]	; 0x34
    if (source_unspecified == NX_TRUE)
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f040 80b8 	bne.w	800fe7e <_nx_icmpv6_process_ns+0x1f6>
    option_length = (UINT)packet_ptr -> nx_packet_length - (UINT)sizeof(NX_ICMPV6_ND);
 800fd0e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800fd10:	ab0a      	add	r3, sp, #40	; 0x28
    option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(header_ptr, sizeof(NX_ICMPV6_ND));
 800fd12:	f108 0418 	add.w	r4, r8, #24
    while (option_length > 0)
 800fd16:	3e18      	subs	r6, #24
 800fd18:	9306      	str	r3, [sp, #24]
 800fd1a:	f000 80ec 	beq.w	800fef6 <_nx_icmpv6_process_ns+0x26e>
 800fd1e:	9709      	str	r7, [sp, #36]	; 0x24
 800fd20:	e004      	b.n	800fd2c <_nx_icmpv6_process_ns+0xa4>
        option_length -= ((UINT)(option_ptr -> nx_icmpv6_option_length) << 3);
 800fd22:	7863      	ldrb	r3, [r4, #1]
 800fd24:	00db      	lsls	r3, r3, #3
    while (option_length > 0)
 800fd26:	1af6      	subs	r6, r6, r3
        option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800fd28:	441c      	add	r4, r3
    while (option_length > 0)
 800fd2a:	d032      	beq.n	800fd92 <_nx_icmpv6_process_ns+0x10a>
        if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_SRC_LINK_ADDR)
 800fd2c:	f894 a000 	ldrb.w	sl, [r4]
 800fd30:	f1ba 0f01 	cmp.w	sl, #1
 800fd34:	d1f5      	bne.n	800fd22 <_nx_icmpv6_process_ns+0x9a>
            status = _nx_nd_cache_find_entry(ip_ptr, ipv6_header -> nx_ip_header_source_ip, &nd_entry);
 800fd36:	9a06      	ldr	r2, [sp, #24]
 800fd38:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 800fd3c:	f002 fe30 	bl	80129a0 <_nx_nd_cache_find_entry>
 800fd40:	1ca3      	adds	r3, r4, #2
            if (status != NX_SUCCESS)
 800fd42:	2800      	cmp	r0, #0
 800fd44:	f040 808c 	bne.w	800fe60 <_nx_icmpv6_process_ns+0x1d8>
                mac_msw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[0]) << 8) | (nd_entry -> nx_nd_cache_mac_addr[1]);
 800fd48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                if ((mac_msw != new_msw) || (mac_lsw != new_lsw)) /* If the new MAC is different from what we have in the table. */
 800fd4a:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 800fd4e:	8a1a      	ldrh	r2, [r3, #16]
                    _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 800fd50:	4619      	mov	r1, r3
                if ((mac_msw != new_msw) || (mac_lsw != new_lsw)) /* If the new MAC is different from what we have in the table. */
 800fd52:	fa9c fc9c 	rev16.w	ip, ip
 800fd56:	f8d3 a012 	ldr.w	sl, [r3, #18]
 800fd5a:	ba52      	rev16	r2, r2
 800fd5c:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800fd60:	fa1f fc8c 	uxth.w	ip, ip
                    _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 800fd64:	9805      	ldr	r0, [sp, #20]
                if ((mac_msw != new_msw) || (mac_lsw != new_lsw)) /* If the new MAC is different from what we have in the table. */
 800fd66:	b292      	uxth	r2, r2
 800fd68:	fa9a fa8a 	rev.w	sl, sl
 800fd6c:	fa9e fe8e 	rev.w	lr, lr
                new_msw = ((ULONG)(new_mac[0]) << 8) | (new_mac[1]);
 800fd70:	78a7      	ldrb	r7, [r4, #2]
                if ((mac_msw != new_msw) || (mac_lsw != new_lsw)) /* If the new MAC is different from what we have in the table. */
 800fd72:	4594      	cmp	ip, r2
 800fd74:	f040 809a 	bne.w	800feac <_nx_icmpv6_process_ns+0x224>
 800fd78:	45f2      	cmp	sl, lr
 800fd7a:	f040 8097 	bne.w	800feac <_nx_icmpv6_process_ns+0x224>
                if (nd_entry -> nx_nd_cache_packet_waiting_head) /* There are packets waiting to be transmitted */
 800fd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d0ce      	beq.n	800fd22 <_nx_icmpv6_process_ns+0x9a>
                    _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 800fd84:	f000 fdb2 	bl	80108ec <_nx_icmpv6_send_queued_packets>
        option_length -= ((UINT)(option_ptr -> nx_icmpv6_option_length) << 3);
 800fd88:	7863      	ldrb	r3, [r4, #1]
 800fd8a:	00db      	lsls	r3, r3, #3
    while (option_length > 0)
 800fd8c:	1af6      	subs	r6, r6, r3
        option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800fd8e:	441c      	add	r4, r3
    while (option_length > 0)
 800fd90:	d1cc      	bne.n	800fd2c <_nx_icmpv6_process_ns+0xa4>
    if (SLLA_changed == NX_FALSE)
 800fd92:	9b07      	ldr	r3, [sp, #28]
 800fd94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f000 809b 	beq.w	800fed2 <_nx_icmpv6_process_ns+0x24a>
    packet_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND) + 8;
 800fd9c:	2220      	movs	r2, #32
        packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV6_ND) + 8;
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	4413      	add	r3, r2
    packet_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND) + 8;
 800fda2:	627a      	str	r2, [r7, #36]	; 0x24
    packet_ptr -> nx_packet_append_ptr =
 800fda4:	60fb      	str	r3, [r7, #12]
    if (source_unspecified == NX_TRUE)
 800fda6:	9b08      	ldr	r3, [sp, #32]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d145      	bne.n	800fe38 <_nx_icmpv6_process_ns+0x1b0>
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800fdac:	2360      	movs	r3, #96	; 0x60
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800fdae:	4658      	mov	r0, fp
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800fdb0:	f8c8 3004 	str.w	r3, [r8, #4]
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800fdb4:	f7f6 fc40 	bl	8006638 <_nx_ipv6_address_change_endian>
    header_ptr -> nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_ADVERTISEMENT_TYPE;
 800fdb8:	2288      	movs	r2, #136	; 0x88
    header_ptr -> nx_icmpv6_header_code = 0;
 800fdba:	2300      	movs	r3, #0
        COPY_IPV6_ADDRESS(ipv6_header -> nx_ip_header_source_ip,
 800fdbc:	9804      	ldr	r0, [sp, #16]
    header_ptr -> nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_ADVERTISEMENT_TYPE;
 800fdbe:	f8a8 2000 	strh.w	r2, [r8]
        COPY_IPV6_ADDRESS(ipv6_header -> nx_ip_header_source_ip,
 800fdc2:	9906      	ldr	r1, [sp, #24]
    header_ptr -> nx_icmpv6_header_code = 0;
 800fdc4:	f8a8 3002 	strh.w	r3, [r8, #2]
        COPY_IPV6_ADDRESS(ipv6_header -> nx_ip_header_source_ip,
 800fdc8:	f7f6 fb80 	bl	80064cc <COPY_IPV6_ADDRESS>
    option_ptr -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_TRG_LINK_ADDR;
 800fdcc:	f44f 7381 	mov.w	r3, #258	; 0x102
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800fdd0:	4c4a      	ldr	r4, [pc, #296]	; (800fefc <_nx_icmpv6_process_ns+0x274>)
    option_ptr -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_TRG_LINK_ADDR;
 800fdd2:	f8a8 3018 	strh.w	r3, [r8, #24]
    mac_addr[0] = (USHORT)(interface_addr -> nxd_ipv6_address_attached -> nx_interface_physical_address_msw);
 800fdd6:	686a      	ldr	r2, [r5, #4]
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    mac_addr[1] = (USHORT)((interface_addr -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 800fdda:	e9d2 0103 	ldrd	r0, r1, [r2, #12]
    if (interface_addr -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 800fdde:	6c12      	ldr	r2, [r2, #64]	; 0x40
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800fde0:	ea04 2500 	and.w	r5, r4, r0, lsl #8
 800fde4:	f3c0 2007 	ubfx	r0, r0, #8, #8
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 800fde8:	ea04 2401 	and.w	r4, r4, r1, lsl #8
    if (interface_addr -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 800fdec:	0592      	lsls	r2, r2, #22
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800fdee:	ea40 0005 	orr.w	r0, r0, r5
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 800fdf2:	f3c1 2507 	ubfx	r5, r1, #8, #8
    mac_addr[1] = (USHORT)((interface_addr -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 800fdf6:	ea4f 4111 	mov.w	r1, r1, lsr #16
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 800fdfa:	ea44 0405 	orr.w	r4, r4, r5
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800fdfe:	f8a8 001a 	strh.w	r0, [r8, #26]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 800fe02:	ba49      	rev16	r1, r1
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 800fe04:	f8a8 401e 	strh.w	r4, [r8, #30]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 800fe08:	f8a8 101c 	strh.w	r1, [r8, #28]
    if (interface_addr -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 800fe0c:	d540      	bpl.n	800fe90 <_nx_icmpv6_process_ns+0x208>
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
 800fe0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe14:	63fa      	str	r2, [r7, #60]	; 0x3c
    _nx_ipv6_packet_send(ip_ptr, packet_ptr,
 800fe16:	9906      	ldr	r1, [sp, #24]
 800fe18:	22ff      	movs	r2, #255	; 0xff
 800fe1a:	9805      	ldr	r0, [sp, #20]
 800fe1c:	9200      	str	r2, [sp, #0]
 800fe1e:	223a      	movs	r2, #58	; 0x3a
 800fe20:	e9cd 9101 	strd	r9, r1, [sp, #4]
 800fe24:	4639      	mov	r1, r7
 800fe26:	f002 f949 	bl	80120bc <_nx_ipv6_packet_send>
}
 800fe2a:	b00f      	add	sp, #60	; 0x3c
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    source_unspecified = NX_FALSE;
 800fe30:	9b07      	ldr	r3, [sp, #28]
    interface_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800fe32:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    source_unspecified = NX_FALSE;
 800fe34:	9308      	str	r3, [sp, #32]
 800fe36:	e758      	b.n	800fcea <_nx_icmpv6_process_ns+0x62>
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800fe38:	f8c8 2004 	str.w	r2, [r8, #4]
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800fe3c:	4658      	mov	r0, fp
 800fe3e:	f7f6 fbfb 	bl	8006638 <_nx_ipv6_address_change_endian>
    header_ptr -> nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_ADVERTISEMENT_TYPE;
 800fe42:	2388      	movs	r3, #136	; 0x88
    header_ptr -> nx_icmpv6_header_code = 0;
 800fe44:	2400      	movs	r4, #0
        dest_address[0] = 0xFF020000;
 800fe46:	482e      	ldr	r0, [pc, #184]	; (800ff00 <_nx_icmpv6_process_ns+0x278>)
    header_ptr -> nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_ADVERTISEMENT_TYPE;
 800fe48:	f8a8 3000 	strh.w	r3, [r8]
        dest_address[0] = 0xFF020000;
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2301      	movs	r3, #1
    header_ptr -> nx_icmpv6_header_code = 0;
 800fe52:	f8a8 4002 	strh.w	r4, [r8, #2]
        dest_address[0] = 0xFF020000;
 800fe56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fe5a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fe5e:	e7b5      	b.n	800fdcc <_nx_icmpv6_process_ns+0x144>
                _nx_nd_cache_add(ip_ptr, ipv6_header -> nx_ip_header_source_ip,
 800fe60:	9906      	ldr	r1, [sp, #24]
 800fe62:	2003      	movs	r0, #3
 800fe64:	2700      	movs	r7, #0
 800fe66:	686a      	ldr	r2, [r5, #4]
 800fe68:	9103      	str	r1, [sp, #12]
 800fe6a:	9001      	str	r0, [sp, #4]
 800fe6c:	9904      	ldr	r1, [sp, #16]
 800fe6e:	9502      	str	r5, [sp, #8]
 800fe70:	9805      	ldr	r0, [sp, #20]
 800fe72:	9700      	str	r7, [sp, #0]
                SLLA_changed = NX_TRUE;
 800fe74:	f8cd a01c 	str.w	sl, [sp, #28]
                _nx_nd_cache_add(ip_ptr, ipv6_header -> nx_ip_header_source_ip,
 800fe78:	f002 fbe8 	bl	801264c <_nx_nd_cache_add>
 800fe7c:	e751      	b.n	800fd22 <_nx_icmpv6_process_ns+0x9a>
        if (interface_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_TENTATIVE)
 800fe7e:	78ab      	ldrb	r3, [r5, #2]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	f47f af44 	bne.w	800fd0e <_nx_icmpv6_process_ns+0x86>
            _nx_icmpv6_DAD_failure(ip_ptr, interface_addr);
 800fe86:	4629      	mov	r1, r5
 800fe88:	9805      	ldr	r0, [sp, #20]
 800fe8a:	f005 fd03 	bl	8015894 <_nx_icmpv6_DAD_failure>
 800fe8e:	e71d      	b.n	800fccc <_nx_icmpv6_process_ns+0x44>
            _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
 800fe90:	9a06      	ldr	r2, [sp, #24]
 800fe92:	213a      	movs	r1, #58	; 0x3a
 800fe94:	4638      	mov	r0, r7
 800fe96:	9200      	str	r2, [sp, #0]
 800fe98:	461a      	mov	r2, r3
 800fe9a:	464b      	mov	r3, r9
 800fe9c:	f7f2 f822 	bl	8001ee4 <_nx_ip_checksum_compute>
        header_ptr -> nx_icmpv6_header_checksum = (USHORT)(~(header_ptr -> nx_icmpv6_header_checksum));
 800fea0:	43c0      	mvns	r0, r0
 800fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv6_header_checksum);
 800fea4:	ba40      	rev16	r0, r0
 800fea6:	f8a8 0002 	strh.w	r0, [r8, #2]
 800feaa:	e7b4      	b.n	800fe16 <_nx_icmpv6_process_ns+0x18e>
                    SLLA_changed = NX_TRUE;
 800feac:	2201      	movs	r2, #1
                        nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 800feae:	741f      	strb	r7, [r3, #16]
                    nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800feb0:	f04f 0703 	mov.w	r7, #3
                    SLLA_changed = NX_TRUE;
 800feb4:	9207      	str	r2, [sp, #28]
                        nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 800feb6:	78e2      	ldrb	r2, [r4, #3]
 800feb8:	745a      	strb	r2, [r3, #17]
 800feba:	7922      	ldrb	r2, [r4, #4]
 800febc:	749a      	strb	r2, [r3, #18]
 800febe:	7962      	ldrb	r2, [r4, #5]
 800fec0:	74da      	strb	r2, [r3, #19]
 800fec2:	79a2      	ldrb	r2, [r4, #6]
 800fec4:	751a      	strb	r2, [r3, #20]
 800fec6:	79e2      	ldrb	r2, [r4, #7]
                    nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800fec8:	765f      	strb	r7, [r3, #25]
                        nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 800feca:	755a      	strb	r2, [r3, #21]
                    nd_entry -> nx_nd_cache_interface_ptr = interface_addr -> nxd_ipv6_address_attached;
 800fecc:	686a      	ldr	r2, [r5, #4]
 800fece:	621a      	str	r2, [r3, #32]
 800fed0:	e755      	b.n	800fd7e <_nx_icmpv6_process_ns+0xf6>
 800fed2:	9a06      	ldr	r2, [sp, #24]
        if (_nx_nd_cache_find_entry(ip_ptr, ipv6_header -> nx_ip_header_source_ip, &nd_entry) == NX_SUCCESS)
 800fed4:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 800fed8:	f002 fd62 	bl	80129a0 <_nx_nd_cache_find_entry>
 800fedc:	2800      	cmp	r0, #0
 800fede:	f47f af5d 	bne.w	800fd9c <_nx_icmpv6_process_ns+0x114>
            if (nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 800fee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fee4:	7e5a      	ldrb	r2, [r3, #25]
 800fee6:	2a02      	cmp	r2, #2
 800fee8:	f47f af58 	bne.w	800fd9c <_nx_icmpv6_process_ns+0x114>
                nd_entry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_reachable_timer;
 800feec:	9a05      	ldr	r2, [sp, #20]
 800feee:	f8d2 2ee4 	ldr.w	r2, [r2, #3812]	; 0xee4
 800fef2:	61da      	str	r2, [r3, #28]
 800fef4:	e752      	b.n	800fd9c <_nx_icmpv6_process_ns+0x114>
 800fef6:	461a      	mov	r2, r3
 800fef8:	e7ec      	b.n	800fed4 <_nx_icmpv6_process_ns+0x24c>
 800fefa:	bf00      	nop
 800fefc:	00ffff00 	.word	0x00ffff00
 800ff00:	ff020000 	.word	0xff020000

0800ff04 <_nx_icmpv6_process_ra>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_process_ra(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800ff04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the ND cache table entry to NULL */
    nd_entry = NX_NULL;
 800ff08:	2300      	movs	r3, #0
{
 800ff0a:	b091      	sub	sp, #68	; 0x44
 800ff0c:	4680      	mov	r8, r0
    /* Get a pointer to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;

    /* If the RA message is invalid, we simply return. */
    if (_nx_icmpv6_validate_ra(packet_ptr) != NX_SUCCESS)
 800ff0e:	4608      	mov	r0, r1
{
 800ff10:	460e      	mov	r6, r1
    header_ptr =  (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800ff12:	688f      	ldr	r7, [r1, #8]
    nd_entry = NX_NULL;
 800ff14:	930a      	str	r3, [sp, #40]	; 0x28
    if (_nx_icmpv6_validate_ra(packet_ptr) != NX_SUCCESS)
 800ff16:	f000 fe21 	bl	8010b5c <_nx_icmpv6_validate_ra>
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	f040 80f0 	bne.w	8010100 <_nx_icmpv6_process_ra+0x1fc>
    /* Get a pointer to the router advertisement packet structure. */
    /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
    ra_ptr = (NX_ICMPV6_RA *)header_ptr;

    /* If router advertisement flag callback is set, invoke the callback function. */
    if (ip_ptr -> nx_icmpv6_ra_flag_callback)
 800ff20:	f8d8 3898 	ldr.w	r3, [r8, #2200]	; 0x898
 800ff24:	b113      	cbz	r3, 800ff2c <_nx_icmpv6_process_ra+0x28>
    {
        ip_ptr -> nx_icmpv6_ra_flag_callback(ip_ptr, (UINT)ra_ptr -> nx_icmpv6_ra_flag);
 800ff26:	7979      	ldrb	r1, [r7, #5]
 800ff28:	4640      	mov	r0, r8
 800ff2a:	4798      	blx	r3
    /* Set a pointer to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;

    /* Obtain the pointer to the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800ff2c:	6b72      	ldr	r2, [r6, #52]	; 0x34
    /* (1) Determine if this message comes from a periodic refresh
       or this is in response to a router solicitation.
       This is a periodic refresh if the destination address is an all-router multicast address.
     */

    if (ra_ptr -> nx_icmpv6_ra_router_lifetime == 0)
 800ff2e:	88fb      	ldrh	r3, [r7, #6]
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800ff30:	f8d2 a004 	ldr.w	sl, [r2, #4]
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800ff34:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
    if (ra_ptr -> nx_icmpv6_ra_router_lifetime == 0)
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f000 80c0 	beq.w	80100be <_nx_icmpv6_process_ra+0x1ba>
        /* Delete it from our default router table.*/
        _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
    }

    /* Does the RA packet have a valid retrans_timer? */
    if (ra_ptr -> nx_icmpv6_ra_retrans_time)
 800ff3e:	68f9      	ldr	r1, [r7, #12]
 800ff40:	b189      	cbz	r1, 800ff66 <_nx_icmpv6_process_ra+0x62>
    {
        /* Pickup the retrans_time value.*/
        time_val = ra_ptr -> nx_icmpv6_ra_retrans_time;

        /* Byte swapping. */
        NX_CHANGE_ULONG_ENDIAN(time_val);
 800ff42:	ea81 4231 	eor.w	r2, r1, r1, ror #16

        /* Yes; Reset our re-trans timer. */
        /* Conver timer ticks (in ms) into IP fast timeout value. */
        ip_ptr -> nx_ipv6_retrans_timer_ticks = time_val * NX_IP_FAST_TIMER_RATE / 1000;
 800ff46:	48ae      	ldr	r0, [pc, #696]	; (8010200 <_nx_icmpv6_process_ra+0x2fc>)
        NX_CHANGE_ULONG_ENDIAN(time_val);
 800ff48:	0a12      	lsrs	r2, r2, #8
 800ff4a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800ff4e:	ea82 2231 	eor.w	r2, r2, r1, ror #8
        ip_ptr -> nx_ipv6_retrans_timer_ticks = time_val * NX_IP_FAST_TIMER_RATE / 1000;
 800ff52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ff56:	0053      	lsls	r3, r2, #1
 800ff58:	fba0 2303 	umull	r2, r3, r0, r3

        /* If the retrans_timer is smaller than tick resolution, set it to 1.  */
        if (ip_ptr -> nx_ipv6_retrans_timer_ticks == 0)
 800ff5c:	099b      	lsrs	r3, r3, #6
        {
            ip_ptr -> nx_ipv6_retrans_timer_ticks = 1;
 800ff5e:	bf08      	it	eq
 800ff60:	2301      	moveq	r3, #1
 800ff62:	f8c8 3ee0 	str.w	r3, [r8, #3808]	; 0xee0
        }
    }

    /* Does the router advertisement have a valid reachable time? */
    if (ra_ptr -> nx_icmpv6_ra_reachable_time)
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	2a00      	cmp	r2, #0
 800ff6a:	d17d      	bne.n	8010068 <_nx_icmpv6_process_ra+0x164>
        {
            ip_ptr -> nx_ipv6_reachable_timer = 1;
        }
    }

    if (IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) & IPV6_ALL_NODE_MCAST)
 800ff6c:	f109 0018 	add.w	r0, r9, #24

    /* (2) Process option field */
    packet_length = (INT)packet_ptr -> nx_packet_length - (INT)sizeof(NX_ICMPV6_RA);

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(ra_ptr, sizeof(NX_ICMPV6_RA));
 800ff70:	f107 0410 	add.w	r4, r7, #16
    if (IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) & IPV6_ALL_NODE_MCAST)
 800ff74:	f7f6 faf6 	bl	8006564 <IPv6_Address_Type>
    packet_length = (INT)packet_ptr -> nx_packet_length - (INT)sizeof(NX_ICMPV6_RA);
 800ff78:	6a75      	ldr	r5, [r6, #36]	; 0x24
        router_type = NX_IPV6_ROUTE_TYPE_UNSOLICITATED;
 800ff7a:	f010 0f10 	tst.w	r0, #16
    packet_length = (INT)packet_ptr -> nx_packet_length - (INT)sizeof(NX_ICMPV6_RA);
 800ff7e:	f1a5 0510 	sub.w	r5, r5, #16
        router_type = NX_IPV6_ROUTE_TYPE_UNSOLICITATED;
 800ff82:	bf0c      	ite	eq
 800ff84:	2301      	moveq	r3, #1
 800ff86:	2302      	movne	r3, #2

    /* Going through the rest of the packet options. */
    while (packet_length > 0)
 800ff88:	2d00      	cmp	r5, #0
        router_type = NX_IPV6_ROUTE_TYPE_UNSOLICITATED;
 800ff8a:	9305      	str	r3, [sp, #20]
    while (packet_length > 0)
 800ff8c:	dd3e      	ble.n	801000c <_nx_icmpv6_process_ra+0x108>
            }
        }
        else if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_SRC_LINK_ADDR)
        {

            status = _nx_nd_cache_find_entry(ip_ptr, ipv6_header -> nx_ip_header_source_ip, &nd_entry);
 800ff8e:	f109 0308 	add.w	r3, r9, #8
 800ff92:	9304      	str	r3, [sp, #16]
 800ff94:	e007      	b.n	800ffa6 <_nx_icmpv6_process_ra+0xa2>
        else if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_SRC_LINK_ADDR)
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d044      	beq.n	8010024 <_nx_icmpv6_process_ra+0x120>
                                      packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
        }
#endif

        /* Update the amount of packet option data remaining. */
        packet_length -= (option_ptr -> nx_icmpv6_option_length << 3);
 800ff9a:	7863      	ldrb	r3, [r4, #1]
 800ff9c:	00db      	lsls	r3, r3, #3
 800ff9e:	1aed      	subs	r5, r5, r3

        /* Get a pointer to the next option. */
        /*lint -e{923} suppress cast between pointer and ULONG , since it is necessary  */
        option_ptr  = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800ffa0:	441c      	add	r4, r3
    while (packet_length > 0)
 800ffa2:	2d00      	cmp	r5, #0
 800ffa4:	dd32      	ble.n	801000c <_nx_icmpv6_process_ra+0x108>
        if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_PREFIX_INFO)
 800ffa6:	7823      	ldrb	r3, [r4, #0]
 800ffa8:	2b03      	cmp	r3, #3
 800ffaa:	d1f4      	bne.n	800ff96 <_nx_icmpv6_process_ra+0x92>
            NX_IPV6_ADDRESS_CHANGE_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix);
 800ffac:	f104 0b10 	add.w	fp, r4, #16
 800ffb0:	4658      	mov	r0, fp
 800ffb2:	f7f6 fb41 	bl	8006638 <_nx_ipv6_address_change_endian>
            if ((prefix_ptr -> nx_icmpv6_option_prefix[0] & (ULONG)0xFFC00000) == (ULONG)0xFE800000)
 800ffb6:	6923      	ldr	r3, [r4, #16]
 800ffb8:	0d9b      	lsrs	r3, r3, #22
 800ffba:	059b      	lsls	r3, r3, #22
 800ffbc:	f113 7fc0 	cmn.w	r3, #25165824	; 0x1800000
 800ffc0:	d0eb      	beq.n	800ff9a <_nx_icmpv6_process_ra+0x96>
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime);
 800ffc2:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime);
 800ffc6:	ea80 4c30 	eor.w	ip, r0, r0, ror #16
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime);
 800ffca:	ea81 4231 	eor.w	r2, r1, r1, ror #16
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime);
 800ffce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime);
 800ffd2:	0a12      	lsrs	r2, r2, #8
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime);
 800ffd4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 800ffd8:	ea4f 2030 	mov.w	r0, r0, ror #8
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime);
 800ffdc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime);
 800ffe0:	ea8c 0300 	eor.w	r3, ip, r0
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime);
 800ffe4:	ea82 2231 	eor.w	r2, r2, r1, ror #8
            if (prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime > prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime)
 800ffe8:	4293      	cmp	r3, r2
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime);
 800ffea:	e9c4 3201 	strd	r3, r2, [r4, #4]
            if (prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime > prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime)
 800ffee:	d3d4      	bcc.n	800ff9a <_nx_icmpv6_process_ra+0x96>
            if (prefix_ptr -> nx_icmpv6_option_prefix_flag & 0x80)
 800fff0:	f994 2003 	ldrsb.w	r2, [r4, #3]
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	dad0      	bge.n	800ff9a <_nx_icmpv6_process_ra+0x96>
                prefix_length = prefix_ptr -> nx_icmpv6_option_prefix_length;
 800fff8:	78a2      	ldrb	r2, [r4, #2]
                if (prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime == 0)
 800fffa:	4584      	cmp	ip, r0
                    _nx_ipv6_prefix_list_delete(ip_ptr, prefix_ptr -> nx_icmpv6_option_prefix, prefix_length);
 800fffc:	4659      	mov	r1, fp
 800fffe:	4640      	mov	r0, r8
                prefix_length = prefix_ptr -> nx_icmpv6_option_prefix_length;
 8010000:	9206      	str	r2, [sp, #24]
                if (prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime == 0)
 8010002:	f040 8094 	bne.w	801012e <_nx_icmpv6_process_ra+0x22a>
                    _nx_ipv6_prefix_list_delete(ip_ptr, prefix_ptr -> nx_icmpv6_option_prefix, prefix_length);
 8010006:	f002 fa07 	bl	8012418 <_nx_ipv6_prefix_list_delete>
 801000a:	e7c6      	b.n	800ff9a <_nx_icmpv6_process_ra+0x96>
    }

    /* All options are processed.  No errors encountered.  */

    /* (3) Add this entry to the routing table. */
    if (ra_ptr -> nx_icmpv6_ra_router_lifetime)
 801000c:	88fb      	ldrh	r3, [r7, #6]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d13a      	bne.n	8010088 <_nx_icmpv6_process_ra+0x184>
    }

#ifndef NX_DISABLE_ICMPV6_ROUTER_SOLICITATION

    /* Received a valid RS... Stop RA if it is still running. */
    if_ptr -> nx_ipv6_rtr_solicitation_count = 0;
 8010012:	2300      	movs	r3, #0

#endif

    /* release packet and return. */
    _nx_packet_release(packet_ptr);
 8010014:	4630      	mov	r0, r6
    if_ptr -> nx_ipv6_rtr_solicitation_count = 0;
 8010016:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
    _nx_packet_release(packet_ptr);
 801001a:	f7f6 fce9 	bl	80069f0 <_nx_packet_release>
}
 801001e:	b011      	add	sp, #68	; 0x44
 8010020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            status = _nx_nd_cache_find_entry(ip_ptr, ipv6_header -> nx_ip_header_source_ip, &nd_entry);
 8010024:	aa0a      	add	r2, sp, #40	; 0x28
 8010026:	9904      	ldr	r1, [sp, #16]
 8010028:	4640      	mov	r0, r8
 801002a:	f002 fcb9 	bl	80129a0 <_nx_nd_cache_find_entry>
 801002e:	1ca3      	adds	r3, r4, #2
            if (status != NX_SUCCESS)
 8010030:	2800      	cmp	r0, #0
 8010032:	d157      	bne.n	80100e4 <_nx_icmpv6_process_ra+0x1e0>
                mac_msw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[0]) << 8) | (nd_entry -> nx_nd_cache_mac_addr[1]);
 8010034:	990a      	ldr	r1, [sp, #40]	; 0x28
                if ((mac_msw != new_msw) || (mac_lsw != new_lsw))
 8010036:	8863      	ldrh	r3, [r4, #2]
 8010038:	8a08      	ldrh	r0, [r1, #16]
 801003a:	ba5b      	rev16	r3, r3
 801003c:	f8d1 c012 	ldr.w	ip, [r1, #18]
 8010040:	ba40      	rev16	r0, r0
 8010042:	6862      	ldr	r2, [r4, #4]
 8010044:	b29b      	uxth	r3, r3
 8010046:	fa9c fc8c 	rev.w	ip, ip
 801004a:	b280      	uxth	r0, r0
 801004c:	ba12      	rev	r2, r2
                new_msw = ((ULONG)(new_mac[0]) << 8) | (new_mac[1]);
 801004e:	f894 e002 	ldrb.w	lr, [r4, #2]
                if ((mac_msw != new_msw) || (mac_lsw != new_lsw))
 8010052:	4283      	cmp	r3, r0
 8010054:	d15a      	bne.n	801010c <_nx_icmpv6_process_ra+0x208>
 8010056:	4594      	cmp	ip, r2
 8010058:	d158      	bne.n	801010c <_nx_icmpv6_process_ra+0x208>
                if (nd_entry -> nx_nd_cache_packet_waiting_head) /* There are packets waiting to be transmitted */
 801005a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801005c:	2b00      	cmp	r3, #0
 801005e:	d09c      	beq.n	800ff9a <_nx_icmpv6_process_ra+0x96>
                    _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 8010060:	4640      	mov	r0, r8
 8010062:	f000 fc43 	bl	80108ec <_nx_icmpv6_send_queued_packets>
 8010066:	e798      	b.n	800ff9a <_nx_icmpv6_process_ra+0x96>
        NX_CHANGE_ULONG_ENDIAN(time_val);
 8010068:	ea82 4332 	eor.w	r3, r2, r2, ror #16
        ip_ptr -> nx_ipv6_reachable_timer = time_val / 1000;
 801006c:	4964      	ldr	r1, [pc, #400]	; (8010200 <_nx_icmpv6_process_ra+0x2fc>)
        NX_CHANGE_ULONG_ENDIAN(time_val);
 801006e:	0a1b      	lsrs	r3, r3, #8
 8010070:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8010074:	ea83 2332 	eor.w	r3, r3, r2, ror #8
        ip_ptr -> nx_ipv6_reachable_timer = time_val / 1000;
 8010078:	fba1 2303 	umull	r2, r3, r1, r3
        if (ip_ptr -> nx_ipv6_reachable_timer == 0)
 801007c:	099b      	lsrs	r3, r3, #6
            ip_ptr -> nx_ipv6_reachable_timer = 1;
 801007e:	bf08      	it	eq
 8010080:	2301      	moveq	r3, #1
 8010082:	f8c8 3ee4 	str.w	r3, [r8, #3812]	; 0xee4
 8010086:	e771      	b.n	800ff6c <_nx_icmpv6_process_ra+0x68>
        NX_CHANGE_USHORT_ENDIAN(ra_ptr -> nx_icmpv6_ra_router_lifetime);
 8010088:	021a      	lsls	r2, r3, #8
        _nxd_ipv6_default_router_add_internal(ip_ptr, ipv6_header -> nx_ip_header_source_ip,     /* Next Hop address */
 801008a:	9d05      	ldr	r5, [sp, #20]
 801008c:	ac0b      	add	r4, sp, #44	; 0x2c
 801008e:	f109 0108 	add.w	r1, r9, #8
        NX_CHANGE_USHORT_ENDIAN(ra_ptr -> nx_icmpv6_ra_router_lifetime);
 8010092:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
        _nxd_ipv6_default_router_add_internal(ip_ptr, ipv6_header -> nx_ip_header_source_ip,     /* Next Hop address */
 8010096:	4640      	mov	r0, r8
 8010098:	4653      	mov	r3, sl
        NX_CHANGE_USHORT_ENDIAN(ra_ptr -> nx_icmpv6_ra_router_lifetime);
 801009a:	b292      	uxth	r2, r2
 801009c:	80fa      	strh	r2, [r7, #6]
        _nxd_ipv6_default_router_add_internal(ip_ptr, ipv6_header -> nx_ip_header_source_ip,     /* Next Hop address */
 801009e:	e9cd 5400 	strd	r5, r4, [sp]
 80100a2:	f004 fbd1 	bl	8014848 <_nxd_ipv6_default_router_add_internal>
        if (rt_entry && nd_entry)
 80100a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100a8:	b11b      	cbz	r3, 80100b2 <_nx_icmpv6_process_ra+0x1ae>
 80100aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100ac:	b10a      	cbz	r2, 80100b2 <_nx_icmpv6_process_ra+0x1ae>
            rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr = (void *)nd_entry;
 80100ae:	619a      	str	r2, [r3, #24]
            nd_entry -> nx_nd_cache_is_router = rt_entry;
 80100b0:	6253      	str	r3, [r2, #36]	; 0x24
        if (ra_ptr -> nx_icmpv6_ra_hop_limit)
 80100b2:	793b      	ldrb	r3, [r7, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d0ac      	beq.n	8010012 <_nx_icmpv6_process_ra+0x10e>
            ip_ptr -> nx_ipv6_hop_limit = ra_ptr -> nx_icmpv6_ra_hop_limit;
 80100b8:	f8c8 3ee8 	str.w	r3, [r8, #3816]	; 0xee8
 80100bc:	e7a9      	b.n	8010012 <_nx_icmpv6_process_ra+0x10e>
        router_address.nxd_ip_address.v6[1] = ipv6_header -> nx_ip_header_source_ip[1];
 80100be:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
        router_address.nxd_ip_version = NX_IP_VERSION_V6;
 80100c2:	2006      	movs	r0, #6
        _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
 80100c4:	a90b      	add	r1, sp, #44	; 0x2c
        router_address.nxd_ip_address.v6[1] = ipv6_header -> nx_ip_header_source_ip[1];
 80100c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        router_address.nxd_ip_address.v6[3] = ipv6_header -> nx_ip_header_source_ip[3];
 80100ca:	e9d9 2304 	ldrd	r2, r3, [r9, #16]
        router_address.nxd_ip_version = NX_IP_VERSION_V6;
 80100ce:	900b      	str	r0, [sp, #44]	; 0x2c
        _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
 80100d0:	4640      	mov	r0, r8
        router_address.nxd_ip_address.v6[3] = ipv6_header -> nx_ip_header_source_ip[3];
 80100d2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
        _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
 80100d6:	f004 fd0b 	bl	8014af0 <_nxd_ipv6_default_router_delete>
    if (ra_ptr -> nx_icmpv6_ra_retrans_time)
 80100da:	68f9      	ldr	r1, [r7, #12]
 80100dc:	2900      	cmp	r1, #0
 80100de:	f43f af42 	beq.w	800ff66 <_nx_icmpv6_process_ra+0x62>
 80100e2:	e72e      	b.n	800ff42 <_nx_icmpv6_process_ra+0x3e>
                _nx_nd_cache_add(ip_ptr, ipv6_header -> nx_ip_header_source_ip, if_ptr,
 80100e4:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80100e6:	2003      	movs	r0, #3
 80100e8:	2100      	movs	r1, #0
 80100ea:	9202      	str	r2, [sp, #8]
 80100ec:	aa0a      	add	r2, sp, #40	; 0x28
 80100ee:	9001      	str	r0, [sp, #4]
 80100f0:	4640      	mov	r0, r8
 80100f2:	9203      	str	r2, [sp, #12]
 80100f4:	4652      	mov	r2, sl
 80100f6:	9100      	str	r1, [sp, #0]
 80100f8:	9904      	ldr	r1, [sp, #16]
 80100fa:	f002 faa7 	bl	801264c <_nx_nd_cache_add>
 80100fe:	e74c      	b.n	800ff9a <_nx_icmpv6_process_ra+0x96>
        _nx_packet_release(packet_ptr);
 8010100:	4630      	mov	r0, r6
 8010102:	f7f6 fc75 	bl	80069f0 <_nx_packet_release>
}
 8010106:	b011      	add	sp, #68	; 0x44
 8010108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 801010c:	f881 e010 	strb.w	lr, [r1, #16]
                    nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 8010110:	2303      	movs	r3, #3
                        nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 8010112:	78e2      	ldrb	r2, [r4, #3]
 8010114:	744a      	strb	r2, [r1, #17]
 8010116:	7922      	ldrb	r2, [r4, #4]
 8010118:	748a      	strb	r2, [r1, #18]
 801011a:	7962      	ldrb	r2, [r4, #5]
 801011c:	74ca      	strb	r2, [r1, #19]
 801011e:	79a2      	ldrb	r2, [r4, #6]
 8010120:	750a      	strb	r2, [r1, #20]
 8010122:	79e2      	ldrb	r2, [r4, #7]
                    nd_entry -> nx_nd_cache_interface_ptr = if_ptr;
 8010124:	f8c1 a020 	str.w	sl, [r1, #32]
                        nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 8010128:	754a      	strb	r2, [r1, #21]
                    nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 801012a:	764b      	strb	r3, [r1, #25]
 801012c:	e795      	b.n	801005a <_nx_icmpv6_process_ra+0x156>
                    status = _nx_ipv6_prefix_list_add_entry(ip_ptr, prefix_ptr -> nx_icmpv6_option_prefix,
 801012e:	f002 f8e3 	bl	80122f8 <_nx_ipv6_prefix_list_add_entry>
                    if ((prefix_ptr -> nx_icmpv6_option_prefix_flag & 0x40) &&
 8010132:	78e3      	ldrb	r3, [r4, #3]
 8010134:	065b      	lsls	r3, r3, #25
 8010136:	f57f af30 	bpl.w	800ff9a <_nx_icmpv6_process_ra+0x96>
 801013a:	78a3      	ldrb	r3, [r4, #2]
                        (prefix_ptr -> nx_icmpv6_option_prefix_length == (128 - NX_IPV6_HOST_ID_LENGTH)) &&
 801013c:	2b40      	cmp	r3, #64	; 0x40
 801013e:	f47f af2c 	bne.w	800ff9a <_nx_icmpv6_process_ra+0x96>
 8010142:	2800      	cmp	r0, #0
 8010144:	f47f af29 	bne.w	800ff9a <_nx_icmpv6_process_ra+0x96>
                            if (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid == NX_FALSE)
 8010148:	f898 3010 	ldrb.w	r3, [r8, #16]
 801014c:	b14b      	cbz	r3, 8010162 <_nx_icmpv6_process_ra+0x25e>
 801014e:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8010152:	2b00      	cmp	r3, #0
 8010154:	d051      	beq.n	80101fa <_nx_icmpv6_process_ra+0x2f6>
 8010156:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
 801015a:	2b00      	cmp	r3, #0
 801015c:	f47f af1d 	bne.w	800ff9a <_nx_icmpv6_process_ra+0x96>
                        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 8010160:	2302      	movs	r3, #2
                                ((if_ptr -> nx_interface_physical_address_lsw & 0xFF000000) >> 16) | 0xFF;
 8010162:	f8da c010 	ldr.w	ip, [sl, #16]
 8010166:	0159      	lsls	r1, r3, #5
                            word2 = if_ptr -> nx_interface_physical_address_msw << 16 |
 8010168:	f8da 000c 	ldr.w	r0, [sl, #12]
                            ipv6_address -> nxd_ipv6_address[2] = word2;
 801016c:	eb08 1343 	add.w	r3, r8, r3, lsl #5
                                ((if_ptr -> nx_interface_physical_address_lsw & 0xFF000000) >> 16) | 0xFF;
 8010170:	ea4f 421c 	mov.w	r2, ip, lsr #16
                            word3 = (if_ptr -> nx_interface_physical_address_lsw & 0x00FFFFFF) | 0xFE000000;
 8010174:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
                            word2 = if_ptr -> nx_interface_physical_address_msw << 16 |
 8010178:	9007      	str	r0, [sp, #28]
                            ipv6_address = &ip_ptr -> nx_ipv6_address[first_unused];
 801017a:	f101 0e10 	add.w	lr, r1, #16
                            word3 = (if_ptr -> nx_interface_physical_address_lsw & 0x00FFFFFF) | 0xFE000000;
 801017e:	f04c 407e 	orr.w	r0, ip, #4261412864	; 0xfe000000
                                ((if_ptr -> nx_interface_physical_address_lsw & 0xFF000000) >> 16) | 0xFF;
 8010182:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
                            ipv6_address -> nxd_ipv6_address_valid = NX_TRUE;
 8010186:	f240 6c01 	movw	ip, #1537	; 0x601
                            ipv6_address = &ip_ptr -> nx_ipv6_address[first_unused];
 801018a:	44c6      	add	lr, r8
                            word3 = (if_ptr -> nx_interface_physical_address_lsw & 0x00FFFFFF) | 0xFE000000;
 801018c:	9009      	str	r0, [sp, #36]	; 0x24
                            SET_SOLICITED_NODE_MULTICAST_ADDRESS(address, ipv6_address -> nxd_ipv6_address);
 801018e:	3118      	adds	r1, #24
                            word2 = if_ptr -> nx_interface_physical_address_msw << 16 |
 8010190:	9807      	ldr	r0, [sp, #28]
                            ipv6_address -> nxd_ipv6_address_valid = NX_TRUE;
 8010192:	f8a3 c010 	strh.w	ip, [r3, #16]
                            ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_TENTATIVE;
 8010196:	f04f 0c01 	mov.w	ip, #1
                            word2 = if_ptr -> nx_interface_physical_address_msw << 16 |
 801019a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
                            ipv6_address -> nxd_ipv6_address_attached = if_ptr;
 801019e:	f8c3 a014 	str.w	sl, [r3, #20]
                            SET_SOLICITED_NODE_MULTICAST_ADDRESS(address, ipv6_address -> nxd_ipv6_address);
 80101a2:	4441      	add	r1, r8
                            ipv6_address -> nxd_ipv6_address[2] = word2;
 80101a4:	9308      	str	r3, [sp, #32]
                            word2 = (word2 & 0xFDFFFFFF) | (~(word2 | 0xFDFFFFFF));
 80101a6:	f020 7200 	bic.w	r2, r0, #33554432	; 0x2000000
 80101aa:	f060 7000 	orn	r0, r0, #33554432	; 0x2000000
 80101ae:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80101b2:	ea62 0000 	orn	r0, r2, r0
                            ipv6_address -> nxd_ipv6_address[1] = prefix_ptr -> nx_icmpv6_option_prefix[1];
 80101b6:	6962      	ldr	r2, [r4, #20]
 80101b8:	61da      	str	r2, [r3, #28]
                            ipv6_address -> nxd_ipv6_address[0] = prefix_ptr -> nx_icmpv6_option_prefix[0];
 80101ba:	6922      	ldr	r2, [r4, #16]
                            ipv6_address -> nxd_ipv6_address[2] = word2;
 80101bc:	6218      	str	r0, [r3, #32]
                            SET_SOLICITED_NODE_MULTICAST_ADDRESS(address, ipv6_address -> nxd_ipv6_address);
 80101be:	a80b      	add	r0, sp, #44	; 0x2c
                            ipv6_address -> nxd_ipv6_address[0] = prefix_ptr -> nx_icmpv6_option_prefix[0];
 80101c0:	619a      	str	r2, [r3, #24]
                            ipv6_address -> nxd_ipv6_address[3] = word3;
 80101c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101c4:	625a      	str	r2, [r3, #36]	; 0x24
                            ipv6_address -> nxd_ipv6_address_next = if_ptr -> nxd_interface_ipv6_address_list_head;
 80101c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80101ca:	9207      	str	r2, [sp, #28]
 80101cc:	f8da 2020 	ldr.w	r2, [sl, #32]
 80101d0:	629a      	str	r2, [r3, #40]	; 0x28
                            if_ptr -> nxd_interface_ipv6_address_list_head = ipv6_address;
 80101d2:	f8ca e020 	str.w	lr, [sl, #32]
                            ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_TENTATIVE;
 80101d6:	f883 c012 	strb.w	ip, [r3, #18]
                            SET_SOLICITED_NODE_MULTICAST_ADDRESS(address, ipv6_address -> nxd_ipv6_address);
 80101da:	f7f6 f981 	bl	80064e0 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
                            _nx_ipv6_multicast_join(ip_ptr, address, ipv6_address -> nxd_ipv6_address_attached);
 80101de:	9b08      	ldr	r3, [sp, #32]
 80101e0:	a90b      	add	r1, sp, #44	; 0x2c
 80101e2:	4640      	mov	r0, r8
 80101e4:	695a      	ldr	r2, [r3, #20]
 80101e6:	f7f6 f90b 	bl	8006400 <_nx_ipv6_multicast_join>
                            ipv6_address -> nxd_ipv6_address_prefix_length = (UCHAR)prefix_length;
 80101ea:	9b08      	ldr	r3, [sp, #32]
 80101ec:	9906      	ldr	r1, [sp, #24]
                            ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit = NX_IPV6_DAD_TRANSMITS - 1;
 80101ee:	f240 4202 	movw	r2, #1026	; 0x402
                            ipv6_address -> nxd_ipv6_address_prefix_length = (UCHAR)prefix_length;
 80101f2:	74d9      	strb	r1, [r3, #19]
                            ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit = NX_IPV6_DAD_TRANSMITS - 1;
 80101f4:	9b07      	ldr	r3, [sp, #28]
 80101f6:	809a      	strh	r2, [r3, #4]
 80101f8:	e6cf      	b.n	800ff9a <_nx_icmpv6_process_ra+0x96>
                        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 80101fa:	2301      	movs	r3, #1
 80101fc:	e7b1      	b.n	8010162 <_nx_icmpv6_process_ra+0x25e>
 80101fe:	bf00      	nop
 8010200:	10624dd3 	.word	0x10624dd3

08010204 <_nx_icmpv6_process_redirect>:
        return;
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING */

    /* Get interface pointer. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8010204:	6b4a      	ldr	r2, [r1, #52]	; 0x34
ND_CACHE_ENTRY               *nd_entry = NX_NULL;
 8010206:	2300      	movs	r3, #0
{
 8010208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header = (NX_IPV6_HEADER *)(packet_ptr -> nx_packet_ip_header);

    /* Locate the redirect message. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    redirect_ptr = (NX_ICMPV6_REDIRECT_MESSAGE *)(packet_ptr -> nx_packet_prepend_ptr);
 801020c:	688e      	ldr	r6, [r1, #8]
{
 801020e:	b08f      	sub	sp, #60	; 0x3c
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8010210:	f8d2 a004 	ldr.w	sl, [r2, #4]
{
 8010214:	4681      	mov	r9, r0
    ip_header = (NX_IPV6_HEADER *)(packet_ptr -> nx_packet_ip_header);
 8010216:	6b8d      	ldr	r5, [r1, #56]	; 0x38

    /* RFC 2461 4.5 the IPv6 and ICMPv6 header fields. */

    /* Convert the destination and target address to host byte order. */
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(redirect_ptr -> nx_icmpv6_redirect_target_address);
 8010218:	f106 0b08 	add.w	fp, r6, #8
    mtu = interface_ptr -> nx_interface_ip_mtu_size;
 801021c:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(redirect_ptr -> nx_icmpv6_redirect_destination_address);
 8010220:	f106 0718 	add.w	r7, r6, #24
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(redirect_ptr -> nx_icmpv6_redirect_target_address);
 8010224:	4658      	mov	r0, fp

    /* Verify that sender address is link-local address. */
    source_address_type = IPv6_Address_Type(ip_header -> nx_ip_header_source_ip);
 8010226:	f105 0808 	add.w	r8, r5, #8
{
 801022a:	460c      	mov	r4, r1
    mtu = interface_ptr -> nx_interface_ip_mtu_size;
 801022c:	9204      	str	r2, [sp, #16]
ND_CACHE_ENTRY               *NDCacheEntry = NX_NULL;
 801022e:	e9cd 3306 	strd	r3, r3, [sp, #24]
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(redirect_ptr -> nx_icmpv6_redirect_target_address);
 8010232:	f7f6 fa01 	bl	8006638 <_nx_ipv6_address_change_endian>
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(redirect_ptr -> nx_icmpv6_redirect_destination_address);
 8010236:	4638      	mov	r0, r7
 8010238:	f7f6 f9fe 	bl	8006638 <_nx_ipv6_address_change_endian>
    source_address_type = IPv6_Address_Type(ip_header -> nx_ip_header_source_ip);
 801023c:	4640      	mov	r0, r8
 801023e:	f7f6 f991 	bl	8006564 <IPv6_Address_Type>
    if ((source_address_type & 0xFF) != IPV6_ADDRESS_LINKLOCAL)
 8010242:	b2c0      	uxtb	r0, r0
 8010244:	2801      	cmp	r0, #1
 8010246:	d025      	beq.n	8010294 <_nx_icmpv6_process_redirect+0x90>
    {
        error = 1;
 8010248:	2501      	movs	r5, #1

    /* The IP source address of the redirect is the same as the current first-hop
       router for the specified ICMP destination address. */

    /* First look for redirect in the destination table. */
    if (_nxd_ipv6_destination_table_find_next_hop(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_destination_address,
 801024a:	4639      	mov	r1, r7
 801024c:	4648      	mov	r0, r9
 801024e:	aa0a      	add	r2, sp, #40	; 0x28
 8010250:	f004 fd6e 	bl	8014d30 <_nxd_ipv6_destination_table_find_next_hop>
 8010254:	b9a0      	cbnz	r0, 8010280 <_nx_icmpv6_process_redirect+0x7c>
                                                  router_address) == NX_SUCCESS)
    {

        /* Make sure the source is the current 1st hop router. */
        if (!CHECK_IPV6_ADDRESSES_SAME(router_address, ip_header -> nx_ip_header_source_ip))
 8010256:	4641      	mov	r1, r8
 8010258:	a80a      	add	r0, sp, #40	; 0x28
 801025a:	f7f6 f90d 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 801025e:	b1b8      	cbz	r0, 8010290 <_nx_icmpv6_process_redirect+0x8c>
        /* No default router. */
        error = 1;
    }

    /* Make sure the source is the current 1st hop router. */
    if (!CHECK_IPV6_ADDRESSES_SAME(ip_header -> nx_ip_header_source_ip, router_address))
 8010260:	a90a      	add	r1, sp, #40	; 0x28
 8010262:	4640      	mov	r0, r8
 8010264:	f7f6 f908 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010268:	b120      	cbz	r0, 8010274 <_nx_icmpv6_process_redirect+0x70>
    {
        error = 1;
    }
    /* The destination address field may not be multicast. */
    else if (IPv6_Address_Type(redirect_ptr -> nx_icmpv6_redirect_destination_address) & IPV6_ADDRESS_MULTICAST)
 801026a:	4638      	mov	r0, r7
 801026c:	f7f6 f97a 	bl	8006564 <IPv6_Address_Type>
 8010270:	0042      	lsls	r2, r0, #1
 8010272:	d514      	bpl.n	801029e <_nx_icmpv6_process_redirect+0x9a>

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
#endif /* NX_DISABLE_ICMP_INFO */

        _nx_packet_release(packet_ptr);
 8010274:	4620      	mov	r0, r4
 8010276:	f7f6 fbbb 	bl	80069f0 <_nx_packet_release>
    /*lint -e{644} suppress variable might not be initialized, since "dest_entry_ptr" was initialized _nx_icmpv6_dest_table_find or _nx_icmpv6_dest_table_add. */
    dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry = nd_entry;

    /* Release the packet. */
    _nx_packet_release(packet_ptr);
}
 801027a:	b00f      	add	sp, #60	; 0x3c
 801027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (_nxd_ipv6_router_lookup(ip_ptr, interface_ptr, router_address, /*lint -e{929}*/ (void **)&NDCacheEntry))
 8010280:	ab07      	add	r3, sp, #28
 8010282:	aa0a      	add	r2, sp, #40	; 0x28
 8010284:	4651      	mov	r1, sl
 8010286:	4648      	mov	r0, r9
 8010288:	f004 ff9c 	bl	80151c4 <_nxd_ipv6_router_lookup>
 801028c:	2800      	cmp	r0, #0
 801028e:	d0e7      	beq.n	8010260 <_nx_icmpv6_process_redirect+0x5c>
            error = 1;
 8010290:	2501      	movs	r5, #1
 8010292:	e7e5      	b.n	8010260 <_nx_icmpv6_process_redirect+0x5c>
    else if ((ip_header -> nx_ip_header_word_1 & 0xFF) != 0xFF)
 8010294:	792b      	ldrb	r3, [r5, #4]
 8010296:	2bff      	cmp	r3, #255	; 0xff
 8010298:	d02a      	beq.n	80102f0 <_nx_icmpv6_process_redirect+0xec>
        error = 1;
 801029a:	4605      	mov	r5, r0
 801029c:	e7d5      	b.n	801024a <_nx_icmpv6_process_redirect+0x46>
    else if (!(CHECK_IPV6_ADDRESSES_SAME(redirect_ptr -> nx_icmpv6_redirect_destination_address,
 801029e:	4659      	mov	r1, fp
 80102a0:	4638      	mov	r0, r7
 80102a2:	f7f6 f8e9 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 80102a6:	b1e8      	cbz	r0, 80102e4 <_nx_icmpv6_process_redirect+0xe0>
    if (error)
 80102a8:	2d00      	cmp	r5, #0
 80102aa:	d1e3      	bne.n	8010274 <_nx_icmpv6_process_redirect+0x70>
    if (packet_ptr -> nx_packet_length - sizeof(NX_ICMPV6_REDIRECT_MESSAGE))
 80102ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102ae:	2b28      	cmp	r3, #40	; 0x28
 80102b0:	d123      	bne.n	80102fa <_nx_icmpv6_process_redirect+0xf6>
    if (nd_entry == NX_NULL)
 80102b2:	9b06      	ldr	r3, [sp, #24]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d055      	beq.n	8010364 <_nx_icmpv6_process_redirect+0x160>
    status = _nx_icmpv6_dest_table_add(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_destination_address,
 80102b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80102ba:	f04f 35ff 	mov.w	r5, #4294967295
 80102be:	9b04      	ldr	r3, [sp, #16]
 80102c0:	4639      	mov	r1, r7
 80102c2:	9202      	str	r2, [sp, #8]
 80102c4:	4648      	mov	r0, r9
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	aa09      	add	r2, sp, #36	; 0x24
 80102ca:	465b      	mov	r3, fp
 80102cc:	9501      	str	r5, [sp, #4]
 80102ce:	f005 fafd 	bl	80158cc <_nx_icmpv6_dest_table_add>
    if (status)
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d1ce      	bne.n	8010274 <_nx_icmpv6_process_redirect+0x70>
    dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry = nd_entry;
 80102d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    _nx_packet_release(packet_ptr);
 80102d8:	4620      	mov	r0, r4
    dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry = nd_entry;
 80102da:	9a06      	ldr	r2, [sp, #24]
 80102dc:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_packet_release(packet_ptr);
 80102de:	f7f6 fb87 	bl	80069f0 <_nx_packet_release>
 80102e2:	e7ca      	b.n	801027a <_nx_icmpv6_process_redirect+0x76>
        if ((IPv6_Address_Type(redirect_ptr -> nx_icmpv6_redirect_target_address) & IPV6_ADDRESS_LINKLOCAL) == 0)
 80102e4:	4658      	mov	r0, fp
 80102e6:	f7f6 f93d 	bl	8006564 <IPv6_Address_Type>
 80102ea:	07c3      	lsls	r3, r0, #31
 80102ec:	d4dc      	bmi.n	80102a8 <_nx_icmpv6_process_redirect+0xa4>
 80102ee:	e7c1      	b.n	8010274 <_nx_icmpv6_process_redirect+0x70>
    else if (redirect_ptr -> nx_icmpv6_redirect_icmpv6_header.nx_icmpv6_header_code != 0)
 80102f0:	7875      	ldrb	r5, [r6, #1]
 80102f2:	3500      	adds	r5, #0
 80102f4:	bf18      	it	ne
 80102f6:	2501      	movne	r5, #1
 80102f8:	e7a7      	b.n	801024a <_nx_icmpv6_process_redirect+0x46>
        packet_length = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV6_REDIRECT_MESSAGE);
 80102fa:	f1a3 0828 	sub.w	r8, r3, #40	; 0x28
        option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(redirect_ptr, sizeof(NX_ICMPV6_REDIRECT_MESSAGE));
 80102fe:	3628      	adds	r6, #40	; 0x28
        if (_nx_icmpv6_validate_options(option_ptr, (INT)packet_length, 0) == NX_NOT_SUCCESSFUL)
 8010300:	462a      	mov	r2, r5
 8010302:	4641      	mov	r1, r8
 8010304:	4630      	mov	r0, r6
 8010306:	f000 fc09 	bl	8010b1c <_nx_icmpv6_validate_options>
 801030a:	2843      	cmp	r0, #67	; 0x43
 801030c:	d0b2      	beq.n	8010274 <_nx_icmpv6_process_redirect+0x70>
                    if (_nx_nd_cache_add(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address,
 801030e:	9505      	str	r5, [sp, #20]
 8010310:	e005      	b.n	801031e <_nx_icmpv6_process_redirect+0x11a>
            option_length = (UINT)(option_ptr -> nx_icmpv6_option_length << 3);
 8010312:	7873      	ldrb	r3, [r6, #1]
 8010314:	00db      	lsls	r3, r3, #3
        while (packet_length)
 8010316:	ebb8 0803 	subs.w	r8, r8, r3
            option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, option_length);
 801031a:	441e      	add	r6, r3
        while (packet_length)
 801031c:	d0c9      	beq.n	80102b2 <_nx_icmpv6_process_redirect+0xae>
            if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_TRG_LINK_ADDR)
 801031e:	7835      	ldrb	r5, [r6, #0]
 8010320:	2d02      	cmp	r5, #2
 8010322:	d1f6      	bne.n	8010312 <_nx_icmpv6_process_redirect+0x10e>
                status = _nx_nd_cache_find_entry(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address, &nd_entry);
 8010324:	aa06      	add	r2, sp, #24
 8010326:	4659      	mov	r1, fp
 8010328:	4648      	mov	r0, r9
 801032a:	f002 fb39 	bl	80129a0 <_nx_nd_cache_find_entry>
 801032e:	1cb3      	adds	r3, r6, #2
                if (status != NX_SUCCESS)
 8010330:	bb40      	cbnz	r0, 8010384 <_nx_icmpv6_process_redirect+0x180>
                    mac_msw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[0]) << 8) | (nd_entry -> nx_nd_cache_mac_addr[1]);
 8010332:	9906      	ldr	r1, [sp, #24]
                    if ((mac_msw != new_msw) || (mac_lsw != new_lsw)) /* If the new MAC is different. */
 8010334:	8872      	ldrh	r2, [r6, #2]
 8010336:	8a0b      	ldrh	r3, [r1, #16]
 8010338:	ba52      	rev16	r2, r2
 801033a:	f8d1 5012 	ldr.w	r5, [r1, #18]
 801033e:	ba5b      	rev16	r3, r3
 8010340:	6870      	ldr	r0, [r6, #4]
 8010342:	b292      	uxth	r2, r2
 8010344:	ba2d      	rev	r5, r5
 8010346:	b29b      	uxth	r3, r3
 8010348:	ba00      	rev	r0, r0
                    new_msw = ((ULONG)(new_mac[0]) << 8) | (new_mac[1]);
 801034a:	f896 c002 	ldrb.w	ip, [r6, #2]
                    if ((mac_msw != new_msw) || (mac_lsw != new_lsw)) /* If the new MAC is different. */
 801034e:	429a      	cmp	r2, r3
 8010350:	d13a      	bne.n	80103c8 <_nx_icmpv6_process_redirect+0x1c4>
 8010352:	4285      	cmp	r5, r0
 8010354:	d138      	bne.n	80103c8 <_nx_icmpv6_process_redirect+0x1c4>
                    if (nd_entry -> nx_nd_cache_packet_waiting_head) /* There are packets waiting to be transmitted */
 8010356:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8010358:	2b00      	cmp	r3, #0
 801035a:	d0da      	beq.n	8010312 <_nx_icmpv6_process_redirect+0x10e>
                        _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 801035c:	4648      	mov	r0, r9
 801035e:	f000 fac5 	bl	80108ec <_nx_icmpv6_send_queued_packets>
 8010362:	e7d6      	b.n	8010312 <_nx_icmpv6_process_redirect+0x10e>
        status = _nx_nd_cache_find_entry(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address, &nd_entry);
 8010364:	4659      	mov	r1, fp
 8010366:	4648      	mov	r0, r9
 8010368:	aa06      	add	r2, sp, #24
 801036a:	f002 fb19 	bl	80129a0 <_nx_nd_cache_find_entry>
        if (status != NX_SUCCESS)
 801036e:	2800      	cmp	r0, #0
 8010370:	d0a2      	beq.n	80102b8 <_nx_icmpv6_process_redirect+0xb4>
            if (_nx_nd_cache_add_entry(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address,
 8010372:	ab06      	add	r3, sp, #24
 8010374:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010376:	4659      	mov	r1, fp
 8010378:	4648      	mov	r0, r9
 801037a:	f002 f9b1 	bl	80126e0 <_nx_nd_cache_add_entry>
 801037e:	2800      	cmp	r0, #0
 8010380:	d09a      	beq.n	80102b8 <_nx_icmpv6_process_redirect+0xb4>
 8010382:	e777      	b.n	8010274 <_nx_icmpv6_process_redirect+0x70>
                    if (_nx_nd_cache_add(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address,
 8010384:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010386:	2103      	movs	r1, #3
 8010388:	9805      	ldr	r0, [sp, #20]
 801038a:	9202      	str	r2, [sp, #8]
 801038c:	aa06      	add	r2, sp, #24
 801038e:	9101      	str	r1, [sp, #4]
 8010390:	4659      	mov	r1, fp
 8010392:	9203      	str	r2, [sp, #12]
 8010394:	4652      	mov	r2, sl
 8010396:	9000      	str	r0, [sp, #0]
 8010398:	4648      	mov	r0, r9
 801039a:	f002 f957 	bl	801264c <_nx_nd_cache_add>
 801039e:	2800      	cmp	r0, #0
 80103a0:	d1b7      	bne.n	8010312 <_nx_icmpv6_process_redirect+0x10e>
                        if (!CHECK_IPV6_ADDRESSES_SAME(redirect_ptr -> nx_icmpv6_redirect_target_address,
 80103a2:	4639      	mov	r1, r7
 80103a4:	4658      	mov	r0, fp
 80103a6:	f7f6 f867 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 80103aa:	2800      	cmp	r0, #0
 80103ac:	d1b1      	bne.n	8010312 <_nx_icmpv6_process_redirect+0x10e>
                            _nxd_ipv6_default_router_add_internal(ip_ptr,
 80103ae:	a908      	add	r1, sp, #32
 80103b0:	4602      	mov	r2, r0
 80103b2:	4653      	mov	r3, sl
 80103b4:	9500      	str	r5, [sp, #0]
 80103b6:	9101      	str	r1, [sp, #4]
 80103b8:	4648      	mov	r0, r9
 80103ba:	4659      	mov	r1, fp
 80103bc:	f004 fa44 	bl	8014848 <_nxd_ipv6_default_router_add_internal>
                            nd_entry -> nx_nd_cache_is_router = rt_entry;
 80103c0:	9b06      	ldr	r3, [sp, #24]
 80103c2:	9a08      	ldr	r2, [sp, #32]
 80103c4:	625a      	str	r2, [r3, #36]	; 0x24
 80103c6:	e7a4      	b.n	8010312 <_nx_icmpv6_process_redirect+0x10e>
                            nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 80103c8:	f881 c010 	strb.w	ip, [r1, #16]
                        nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 80103cc:	f04f 0203 	mov.w	r2, #3
                            nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 80103d0:	78f3      	ldrb	r3, [r6, #3]
 80103d2:	744b      	strb	r3, [r1, #17]
 80103d4:	7933      	ldrb	r3, [r6, #4]
 80103d6:	748b      	strb	r3, [r1, #18]
 80103d8:	7973      	ldrb	r3, [r6, #5]
 80103da:	74cb      	strb	r3, [r1, #19]
 80103dc:	79b3      	ldrb	r3, [r6, #6]
 80103de:	750b      	strb	r3, [r1, #20]
 80103e0:	79f3      	ldrb	r3, [r6, #7]
                        nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 80103e2:	764a      	strb	r2, [r1, #25]
                            nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 80103e4:	754b      	strb	r3, [r1, #21]
                        nd_entry -> nx_nd_cache_interface_ptr = interface_ptr;
 80103e6:	f8c1 a020 	str.w	sl, [r1, #32]
 80103ea:	e7b4      	b.n	8010356 <_nx_icmpv6_process_redirect+0x152>

080103ec <_nx_icmpv6_send_error_message>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 80103ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv6 error message if ICMPv6 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 80103f0:	f8d0 488c 	ldr.w	r4, [r0, #2188]	; 0x88c
{
 80103f4:	b091      	sub	sp, #68	; 0x44
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 80103f6:	b154      	cbz	r4, 801040e <_nx_icmpv6_send_error_message+0x22>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_source_ip);
 80103f8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80103fa:	4698      	mov	r8, r3
 80103fc:	9005      	str	r0, [sp, #20]
 80103fe:	4691      	mov	r9, r2
 8010400:	f106 0708 	add.w	r7, r6, #8
 8010404:	460d      	mov	r5, r1

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    dest_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_destination_ip);

    if (CHECK_UNSPECIFIED_ADDRESS(src_ip))
 8010406:	4638      	mov	r0, r7
 8010408:	f7f6 f84c 	bl	80064a4 <CHECK_UNSPECIFIED_ADDRESS>
 801040c:	b110      	cbz	r0, 8010414 <_nx_icmpv6_send_error_message+0x28>
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
                         pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
                         src_ip);

    return;
}
 801040e:	b011      	add	sp, #68	; 0x44
 8010410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
 8010414:	4603      	mov	r3, r0
 8010416:	9805      	ldr	r0, [sp, #20]
 8010418:	2238      	movs	r2, #56	; 0x38
 801041a:	a90f      	add	r1, sp, #60	; 0x3c
 801041c:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 8010420:	f7f6 f934 	bl	800668c <_nx_packet_allocate>
 8010424:	2800      	cmp	r0, #0
 8010426:	d1f2      	bne.n	801040e <_nx_icmpv6_send_error_message+0x22>
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < sizeof(NX_ICMPV6_ERROR))
 8010428:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 801042c:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8010430:	461a      	mov	r2, r3
 8010432:	930a      	str	r3, [sp, #40]	; 0x28
 8010434:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8010438:	1a9b      	subs	r3, r3, r2
 801043a:	2b07      	cmp	r3, #7
 801043c:	f240 816c 	bls.w	8010718 <_nx_icmpv6_send_error_message+0x32c>
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8010440:	2306      	movs	r3, #6
 8010442:	4611      	mov	r1, r2
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8010444:	ea4f 6219 	mov.w	r2, r9, lsr #24
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8010448:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 801044c:	ea4f 4919 	mov.w	r9, r9, lsr #16
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 8010450:	ea88 4338 	eor.w	r3, r8, r8, ror #16
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8010454:	700a      	strb	r2, [r1, #0]
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8010456:	f881 9001 	strb.w	r9, [r1, #1]
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 801045a:	0a1b      	lsrs	r3, r3, #8
    bytes_to_copy = (UINT)(offending_packet -> nx_packet_append_ptr - offending_packet -> nx_packet_ip_header);
 801045c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 801045e:	68e9      	ldr	r1, [r5, #12]
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 8010460:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    payload = pkt_ptr -> nx_packet_pool_owner -> nx_packet_pool_payload_size;
 8010464:	f8dc 4000 	ldr.w	r4, [ip]
    bytes_to_copy = (UINT)(offending_packet -> nx_packet_append_ptr - offending_packet -> nx_packet_ip_header);
 8010468:	1a89      	subs	r1, r1, r2
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 801046a:	ea83 2338 	eor.w	r3, r3, r8, ror #8
    payload = pkt_ptr -> nx_packet_pool_owner -> nx_packet_pool_payload_size;
 801046e:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
    if ((bytes_to_copy + sizeof(NX_ICMPV6_ERROR) + sizeof(NX_IPV6_HEADER)) >= NX_MINIMUM_IPV6_PATH_MTU)
 8010472:	f101 0830 	add.w	r8, r1, #48	; 0x30
 8010476:	910c      	str	r1, [sp, #48]	; 0x30
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum = 0;
 8010478:	990a      	ldr	r1, [sp, #40]	; 0x28
        bytes_to_copy = (UINT)(NX_MINIMUM_IPV6_PATH_MTU - (sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR)));
 801047a:	f5b8 6fa0 	cmp.w	r8, #1280	; 0x500
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum = 0;
 801047e:	8048      	strh	r0, [r1, #2]
    if (((INT)(bytes_to_copy + sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR) + NX_PHYSICAL_HEADER) - (INT)payload) > 0)
 8010480:	f1ce 0040 	rsb	r0, lr, #64	; 0x40
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 8010484:	604b      	str	r3, [r1, #4]
        bytes_to_copy = (UINT)(NX_MINIMUM_IPV6_PATH_MTU - (sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR)));
 8010486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010488:	bf28      	it	cs
 801048a:	f44f 639a 	movcs.w	r3, #1232	; 0x4d0
 801048e:	930c      	str	r3, [sp, #48]	; 0x30
    if (((INT)(bytes_to_copy + sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR) + NX_PHYSICAL_HEADER) - (INT)payload) > 0)
 8010490:	18c3      	adds	r3, r0, r3
 8010492:	2b00      	cmp	r3, #0
 8010494:	dd02      	ble.n	801049c <_nx_icmpv6_send_error_message+0xb0>
        bytes_to_copy = (UINT)(payload - (sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR) + NX_PHYSICAL_HEADER));
 8010496:	f1ae 0340 	sub.w	r3, lr, #64	; 0x40
 801049a:	930c      	str	r3, [sp, #48]	; 0x30
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV6_ERROR);
 801049c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801049e:	f100 0308 	add.w	r3, r0, #8
 80104a2:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80104a6:	18cb      	adds	r3, r1, r3
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80104a8:	68d0      	ldr	r0, [r2, #12]
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80104aa:	f8cc 300c 	str.w	r3, [ip, #12]
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80104ae:	6893      	ldr	r3, [r2, #8]
 80104b0:	9006      	str	r0, [sp, #24]
 80104b2:	4619      	mov	r1, r3
 80104b4:	6910      	ldr	r0, [r2, #16]
 80104b6:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80104ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80104bc:	ea81 4831 	eor.w	r8, r1, r1, ror #16
 80104c0:	6951      	ldr	r1, [r2, #20]
 80104c2:	9007      	str	r0, [sp, #28]
 80104c4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80104c8:	9108      	str	r1, [sp, #32]
 80104ca:	6991      	ldr	r1, [r2, #24]
 80104cc:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80104d0:	9806      	ldr	r0, [sp, #24]
 80104d2:	9109      	str	r1, [sp, #36]	; 0x24
 80104d4:	ea80 4e30 	eor.w	lr, r0, r0, ror #16
 80104d8:	6a10      	ldr	r0, [r2, #32]
 80104da:	e9d2 a400 	ldrd	sl, r4, [r2]
 80104de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80104e2:	ea8a 433a 	eor.w	r3, sl, sl, ror #16
 80104e6:	ea84 4934 	eor.w	r9, r4, r4, ror #16
 80104ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80104ee:	0a1b      	lsrs	r3, r3, #8
 80104f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80104f4:	4619      	mov	r1, r3
 80104f6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80104f8:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 80104fc:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8010500:	9907      	ldr	r1, [sp, #28]
 8010502:	ea89 2934 	eor.w	r9, r9, r4, ror #8
 8010506:	9c08      	ldr	r4, [sp, #32]
 8010508:	ea8c 2a3a 	eor.w	sl, ip, sl, ror #8
 801050c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8010510:	ea81 4c31 	eor.w	ip, r1, r1, ror #16
 8010514:	4649      	mov	r1, r9
 8010516:	ea84 4934 	eor.w	r9, r4, r4, ror #16
 801051a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801051c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8010520:	6051      	str	r1, [r2, #4]
 8010522:	ea88 2834 	eor.w	r8, r8, r4, ror #8
 8010526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010528:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801052c:	f8c2 a000 	str.w	sl, [r2]
 8010530:	4644      	mov	r4, r8
 8010532:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8010536:	ea4f 2819 	mov.w	r8, r9, lsr #8
 801053a:	6094      	str	r4, [r2, #8]
 801053c:	ea81 4931 	eor.w	r9, r1, r1, ror #16
 8010540:	9c06      	ldr	r4, [sp, #24]
 8010542:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8010546:	9907      	ldr	r1, [sp, #28]
 8010548:	ea8e 2e34 	eor.w	lr, lr, r4, ror #8
 801054c:	ea8c 2c31 	eor.w	ip, ip, r1, ror #8
 8010550:	4674      	mov	r4, lr
 8010552:	f8cd e018 	str.w	lr, [sp, #24]
 8010556:	ea4f 2e19 	mov.w	lr, r9, lsr #8
 801055a:	60d4      	str	r4, [r2, #12]
 801055c:	4664      	mov	r4, ip
 801055e:	f8cd c01c 	str.w	ip, [sp, #28]
 8010562:	ea80 4c30 	eor.w	ip, r0, r0, ror #16
 8010566:	6114      	str	r4, [r2, #16]
 8010568:	ea8b 493b 	eor.w	r9, fp, fp, ror #16
 801056c:	9c08      	ldr	r4, [sp, #32]
 801056e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8010572:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010574:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8010578:	ea88 2434 	eor.w	r4, r8, r4, ror #8
 801057c:	ea4f 281c 	mov.w	r8, ip, lsr #8
 8010580:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8010584:	ea83 4c33 	eor.w	ip, r3, r3, ror #16
 8010588:	9408      	str	r4, [sp, #32]
 801058a:	6154      	str	r4, [r2, #20]
 801058c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8010590:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8010594:	ea8e 2431 	eor.w	r4, lr, r1, ror #8
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 8010598:	990c      	ldr	r1, [sp, #48]	; 0x30
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 801059a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801059e:	ea89 2b3b 	eor.w	fp, r9, fp, ror #8
 80105a2:	ea88 2030 	eor.w	r0, r8, r0, ror #8
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 80105a6:	2900      	cmp	r1, #0
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80105a8:	ea8c 2333 	eor.w	r3, ip, r3, ror #8
 80105ac:	9409      	str	r4, [sp, #36]	; 0x24
 80105ae:	6194      	str	r4, [r2, #24]
 80105b0:	f8c2 b01c 	str.w	fp, [r2, #28]
 80105b4:	e9c2 0308 	strd	r0, r3, [r2, #32]
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 80105b8:	dd20      	ble.n	80105fc <_nx_icmpv6_send_error_message+0x210>
 80105ba:	1e4b      	subs	r3, r1, #1
 80105bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80105be:	9c05      	ldr	r4, [sp, #20]
 80105c0:	f023 0303 	bic.w	r3, r3, #3
 80105c4:	1d08      	adds	r0, r1, #4
 80105c6:	4611      	mov	r1, r2
 80105c8:	3304      	adds	r3, #4
 80105ca:	4413      	add	r3, r2
 80105cc:	469c      	mov	ip, r3
        *dest_packet++ = *src_packet++;
 80105ce:	f851 3b04 	ldr.w	r3, [r1], #4
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 80105d2:	458c      	cmp	ip, r1
        *dest_packet++ = *src_packet++;
 80105d4:	f840 3f04 	str.w	r3, [r0, #4]!
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 80105d8:	d1f9      	bne.n	80105ce <_nx_icmpv6_send_error_message+0x1e2>
 80105da:	9405      	str	r4, [sp, #20]
 80105dc:	e9d2 a300 	ldrd	sl, r3, [r2]
 80105e0:	e9d2 b007 	ldrd	fp, r0, [r2, #28]
 80105e4:	930d      	str	r3, [sp, #52]	; 0x34
 80105e6:	6893      	ldr	r3, [r2, #8]
 80105e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80105ea:	68d3      	ldr	r3, [r2, #12]
 80105ec:	9306      	str	r3, [sp, #24]
 80105ee:	6913      	ldr	r3, [r2, #16]
 80105f0:	9307      	str	r3, [sp, #28]
 80105f2:	6953      	ldr	r3, [r2, #20]
 80105f4:	9308      	str	r3, [sp, #32]
 80105f6:	6993      	ldr	r3, [r2, #24]
 80105f8:	9309      	str	r3, [sp, #36]	; 0x24
 80105fa:	6a53      	ldr	r3, [r2, #36]	; 0x24
    dest_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_destination_ip);
 80105fc:	f106 0418 	add.w	r4, r6, #24
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8010600:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010602:	ea8a 4c3a 	eor.w	ip, sl, sl, ror #16
    dest_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_destination_ip);
 8010606:	940c      	str	r4, [sp, #48]	; 0x30
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8010608:	ea81 4631 	eor.w	r6, r1, r1, ror #16
 801060c:	9c06      	ldr	r4, [sp, #24]
 801060e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8010612:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010614:	0a36      	lsrs	r6, r6, #8
 8010616:	ea84 4e34 	eor.w	lr, r4, r4, ror #16
 801061a:	9c07      	ldr	r4, [sp, #28]
 801061c:	ea81 4131 	eor.w	r1, r1, r1, ror #16
 8010620:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8010624:	ea84 4934 	eor.w	r9, r4, r4, ror #16
 8010628:	9c08      	ldr	r4, [sp, #32]
 801062a:	ea8c 2c3a 	eor.w	ip, ip, sl, ror #8
 801062e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8010632:	ea84 4834 	eor.w	r8, r4, r4, ror #16
 8010636:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010638:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 801063c:	f8c2 c000 	str.w	ip, [r2]
 8010640:	ea84 4e34 	eor.w	lr, r4, r4, ror #16
 8010644:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8010646:	0a09      	lsrs	r1, r1, #8
 8010648:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 801064c:	ea86 2634 	eor.w	r6, r6, r4, ror #8
 8010650:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010652:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8010656:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801065a:	6056      	str	r6, [r2, #4]
 801065c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8010660:	ea81 2134 	eor.w	r1, r1, r4, ror #8
 8010664:	9c06      	ldr	r4, [sp, #24]
 8010666:	ea80 4630 	eor.w	r6, r0, r0, ror #16
 801066a:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 801066e:	6091      	str	r1, [r2, #8]
 8010670:	ea8a 2a34 	eor.w	sl, sl, r4, ror #8
 8010674:	ea83 4133 	eor.w	r1, r3, r3, ror #16
 8010678:	9c07      	ldr	r4, [sp, #28]
 801067a:	ea8b 4c3b 	eor.w	ip, fp, fp, ror #16
 801067e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8010682:	ea89 2934 	eor.w	r9, r9, r4, ror #8
 8010686:	9c08      	ldr	r4, [sp, #32]
 8010688:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801068c:	f8c2 a00c 	str.w	sl, [r2, #12]
 8010690:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8010694:	f8c2 9010 	str.w	r9, [r2, #16]
 8010698:	0a36      	lsrs	r6, r6, #8
 801069a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801069e:	0a09      	lsrs	r1, r1, #8
 80106a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80106a4:	ea88 2834 	eor.w	r8, r8, r4, ror #8
 80106a8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80106ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80106ae:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80106b2:	ea8c 2c3b 	eor.w	ip, ip, fp, ror #8
 80106b6:	f8c2 8014 	str.w	r8, [r2, #20]
 80106ba:	ea8e 2e34 	eor.w	lr, lr, r4, ror #8
 80106be:	ea86 2630 	eor.w	r6, r6, r0, ror #8
    if (IPv6_Address_Type(dest_ip) & IPV6_ADDRESS_MULTICAST)
 80106c2:	980c      	ldr	r0, [sp, #48]	; 0x30
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80106c4:	ea81 2133 	eor.w	r1, r1, r3, ror #8
 80106c8:	f8c2 e018 	str.w	lr, [r2, #24]
 80106cc:	e9c2 c607 	strd	ip, r6, [r2, #28]
 80106d0:	6251      	str	r1, [r2, #36]	; 0x24
    if (IPv6_Address_Type(dest_ip) & IPV6_ADDRESS_MULTICAST)
 80106d2:	f7f5 ff47 	bl	8006564 <IPv6_Address_Type>
 80106d6:	0044      	lsls	r4, r0, #1
 80106d8:	d422      	bmi.n	8010720 <_nx_icmpv6_send_error_message+0x334>
        pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = offending_packet -> nx_packet_address.nx_packet_ipv6_address_ptr;
 80106da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80106dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80106de:	634b      	str	r3, [r1, #52]	; 0x34
    if ((pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr == NX_NULL) ||
 80106e0:	b113      	cbz	r3, 80106e8 <_nx_icmpv6_send_error_message+0x2fc>
 80106e2:	789a      	ldrb	r2, [r3, #2]
 80106e4:	2a04      	cmp	r2, #4
 80106e6:	d003      	beq.n	80106f0 <_nx_icmpv6_send_error_message+0x304>
        _nx_packet_release(pkt_ptr);
 80106e8:	4608      	mov	r0, r1
 80106ea:	f7f6 f981 	bl	80069f0 <_nx_packet_release>
        return;
 80106ee:	e68e      	b.n	801040e <_nx_icmpv6_send_error_message+0x22>
    if (pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 80106f0:	6858      	ldr	r0, [r3, #4]
 80106f2:	3308      	adds	r3, #8
 80106f4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80106f6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80106f8:	0580      	lsls	r0, r0, #22
 80106fa:	d520      	bpl.n	801073e <_nx_icmpv6_send_error_message+0x352>
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
 80106fc:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 80106fe:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8010702:	63c8      	str	r0, [r1, #60]	; 0x3c
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
 8010704:	25ff      	movs	r5, #255	; 0xff
 8010706:	9805      	ldr	r0, [sp, #20]
 8010708:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801070c:	9500      	str	r5, [sp, #0]
 801070e:	4613      	mov	r3, r2
 8010710:	223a      	movs	r2, #58	; 0x3a
 8010712:	f001 fcd3 	bl	80120bc <_nx_ipv6_packet_send>
    return;
 8010716:	e67a      	b.n	801040e <_nx_icmpv6_send_error_message+0x22>
        _nx_packet_release(pkt_ptr);
 8010718:	4660      	mov	r0, ip
 801071a:	f7f6 f969 	bl	80069f0 <_nx_packet_release>
        return;
 801071e:	e676      	b.n	801040e <_nx_icmpv6_send_error_message+0x22>
                                     &pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr,
 8010720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        if (_nxd_ipv6_interface_find(ip_ptr, dest_ip,
 8010722:	2300      	movs	r3, #0
 8010724:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010726:	9805      	ldr	r0, [sp, #20]
 8010728:	3234      	adds	r2, #52	; 0x34
 801072a:	f004 fc4d 	bl	8014fc8 <_nxd_ipv6_interface_find>
 801072e:	b910      	cbnz	r0, 8010736 <_nx_icmpv6_send_error_message+0x34a>
 8010730:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010732:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010734:	e7d4      	b.n	80106e0 <_nx_icmpv6_send_error_message+0x2f4>
            _nx_packet_release(pkt_ptr);
 8010736:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010738:	f7f6 f95a 	bl	80069f0 <_nx_packet_release>
            return;
 801073c:	e667      	b.n	801040e <_nx_icmpv6_send_error_message+0x22>
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6,
 801073e:	4608      	mov	r0, r1
 8010740:	9700      	str	r7, [sp, #0]
 8010742:	213a      	movs	r1, #58	; 0x3a
 8010744:	f7f1 fbce 	bl	8001ee4 <_nx_ip_checksum_compute>
 8010748:	990f      	ldr	r1, [sp, #60]	; 0x3c
        icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum = (USHORT)(~checksum);
 801074a:	43c0      	mvns	r0, r0
        NX_CHANGE_USHORT_ENDIAN(icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum);
 801074c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801074e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010750:	ba40      	rev16	r0, r0
 8010752:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8010754:	3308      	adds	r3, #8
 8010756:	8060      	strh	r0, [r4, #2]
 8010758:	e7d4      	b.n	8010704 <_nx_icmpv6_send_error_message+0x318>
 801075a:	bf00      	nop

0801075c <_nx_icmpv6_send_ns>:
                        ULONG                 *neighbor_IP_address,
                        INT                    send_slla,
                        NXD_IPV6_ADDRESS      *outgoing_address,
                        INT                    sendUnicast,
                        ND_CACHE_ENTRY        *NDCacheEntry)
{
 801075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010760:	b093      	sub	sp, #76	; 0x4c
 8010762:	4606      	mov	r6, r0
 8010764:	460f      	mov	r7, r1
 8010766:	4692      	mov	sl, r2
 8010768:	461d      	mov	r5, r3
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
 801076a:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 801076e:	a905      	add	r1, sp, #20
 8010770:	2300      	movs	r3, #0
 8010772:	2238      	movs	r2, #56	; 0x38
{
 8010774:	e9dd 981c 	ldrd	r9, r8, [sp, #112]	; 0x70
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
 8010778:	f7f5 ff88 	bl	800668c <_nx_packet_allocate>
 801077c:	b978      	cbnz	r0, 801079e <_nx_icmpv6_send_ns+0x42>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv6 packet. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 801077e:	9805      	ldr	r0, [sp, #20]
 8010780:	2306      	movs	r3, #6
 8010782:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30

    /* Setup the size of the ICMPv6 NS message */
    pkt_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND);

    /* Add 8 more bytes if sending source link layer address. */
    if (send_slla)
 8010786:	f1ba 0f00 	cmp.w	sl, #0
 801078a:	d10b      	bne.n	80107a4 <_nx_icmpv6_send_ns+0x48>
    {
        pkt_ptr -> nx_packet_length += 8;
    }

    /* Check to see if the packet has enough room to fill with NS.  */
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 801078c:	6884      	ldr	r4, [r0, #8]
    pkt_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND);
 801078e:	2318      	movs	r3, #24
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 8010790:	6942      	ldr	r2, [r0, #20]
    pkt_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND);
 8010792:	6243      	str	r3, [r0, #36]	; 0x24
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 8010794:	1b12      	subs	r2, r2, r4
 8010796:	429a      	cmp	r2, r3
 8010798:	d20c      	bcs.n	80107b4 <_nx_icmpv6_send_ns+0x58>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(pkt_ptr);
 801079a:	f7f6 f929 	bl	80069f0 <_nx_packet_release>
    /* Driver entry must not be NULL. */
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry != NX_NULL);

    /* Send the IP packet out on the network via the attached driver.  */
    (outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
}
 801079e:	b013      	add	sp, #76	; 0x4c
 80107a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pkt_ptr -> nx_packet_length += 8;
 80107a4:	2220      	movs	r2, #32
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 80107a6:	6884      	ldr	r4, [r0, #8]
        pkt_ptr -> nx_packet_length += 8;
 80107a8:	4613      	mov	r3, r2
 80107aa:	6242      	str	r2, [r0, #36]	; 0x24
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 80107ac:	6942      	ldr	r2, [r0, #20]
 80107ae:	1b12      	subs	r2, r2, r4
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d3f2      	bcc.n	801079a <_nx_icmpv6_send_ns+0x3e>
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80107b4:	4423      	add	r3, r4
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_checksum = 0;
 80107b6:	2200      	movs	r2, #0
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 80107b8:	f104 0b08 	add.w	fp, r4, #8
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE;
 80107bc:	2187      	movs	r1, #135	; 0x87
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80107be:	60c3      	str	r3, [r0, #12]
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 80107c0:	4638      	mov	r0, r7
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE;
 80107c2:	6021      	str	r1, [r4, #0]
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 80107c4:	4659      	mov	r1, fp
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_checksum = 0;
 80107c6:	6062      	str	r2, [r4, #4]
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 80107c8:	f7f5 fe80 	bl	80064cc <COPY_IPV6_ADDRESS>
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 80107cc:	4658      	mov	r0, fp
 80107ce:	f7f5 ff33 	bl	8006638 <_nx_ipv6_address_change_endian>
        COPY_IPV6_ADDRESS(neighbor_IP_address, dest_address);
 80107d2:	f10d 0b18 	add.w	fp, sp, #24
    if (sendUnicast)
 80107d6:	f1b9 0f00 	cmp.w	r9, #0
 80107da:	d064      	beq.n	80108a6 <_nx_icmpv6_send_ns+0x14a>
        COPY_IPV6_ADDRESS(neighbor_IP_address, dest_address);
 80107dc:	4638      	mov	r0, r7
 80107de:	4659      	mov	r1, fp
 80107e0:	f7f5 fe74 	bl	80064cc <COPY_IPV6_ADDRESS>
    if (outgoing_address -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)
 80107e4:	78ab      	ldrb	r3, [r5, #2]
    pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = outgoing_address;
 80107e6:	9805      	ldr	r0, [sp, #20]
    if (outgoing_address -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)
 80107e8:	2b04      	cmp	r3, #4
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached != NX_NULL);
 80107ea:	f8d5 c004 	ldr.w	ip, [r5, #4]
    pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = outgoing_address;
 80107ee:	6345      	str	r5, [r0, #52]	; 0x34
        src_address = outgoing_address -> nxd_ipv6_address;
 80107f0:	bf0c      	ite	eq
 80107f2:	f105 0708 	addeq.w	r7, r5, #8
        src_address = (ULONG *)_nx_ipv6_unspecified_address;
 80107f6:	4f3b      	ldrne	r7, [pc, #236]	; (80108e4 <_nx_icmpv6_send_ns+0x188>)
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached != NX_NULL);
 80107f8:	f1bc 0f00 	cmp.w	ip, #0
 80107fc:	d04a      	beq.n	8010894 <_nx_icmpv6_send_ns+0x138>
    if (send_slla)  /* Need to send SLLA option */
 80107fe:	f1ba 0f00 	cmp.w	sl, #0
 8010802:	d017      	beq.n	8010834 <_nx_icmpv6_send_ns+0xd8>
        nd_options -> nx_icmpv6_option_type = 1;
 8010804:	f240 1301 	movw	r3, #257	; 0x101
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8010808:	4937      	ldr	r1, [pc, #220]	; (80108e8 <_nx_icmpv6_send_ns+0x18c>)
        nd_options -> nx_icmpv6_option_type = 1;
 801080a:	8323      	strh	r3, [r4, #24]
        mac_addr[1] = (USHORT)((outgoing_address -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 801080c:	e9dc 3203 	ldrd	r3, r2, [ip, #12]
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8010810:	ea01 2e03 	and.w	lr, r1, r3, lsl #8
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8010814:	f3c2 2a07 	ubfx	sl, r2, #8, #8
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8010818:	f3c3 2307 	ubfx	r3, r3, #8, #8
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 801081c:	ea01 2102 	and.w	r1, r1, r2, lsl #8
        mac_addr[1] = (USHORT)((outgoing_address -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 8010820:	0c12      	lsrs	r2, r2, #16
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8010822:	ea4e 0e03 	orr.w	lr, lr, r3
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8010826:	ea41 010a 	orr.w	r1, r1, sl
        NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 801082a:	ba53      	rev16	r3, r2
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 801082c:	f8a4 e01a 	strh.w	lr, [r4, #26]
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8010830:	83e1      	strh	r1, [r4, #30]
        NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 8010832:	83a3      	strh	r3, [r4, #28]
    if (outgoing_address -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 8010834:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
 8010838:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801083a:	0592      	lsls	r2, r2, #22
 801083c:	d541      	bpl.n	80108c2 <_nx_icmpv6_send_ns+0x166>
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
 801083e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010844:	63c2      	str	r2, [r0, #60]	; 0x3c
    if (_nx_ipv6_header_add(ip_ptr, &pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length,
 8010846:	2200      	movs	r2, #0
 8010848:	20ff      	movs	r0, #255	; 0xff
 801084a:	f8cd b008 	str.w	fp, [sp, #8]
 801084e:	a905      	add	r1, sp, #20
 8010850:	9203      	str	r2, [sp, #12]
 8010852:	223a      	movs	r2, #58	; 0x3a
 8010854:	9000      	str	r0, [sp, #0]
 8010856:	4630      	mov	r0, r6
 8010858:	9701      	str	r7, [sp, #4]
 801085a:	f001 fa6f 	bl	8011d3c <_nx_ipv6_header_add>
 801085e:	2800      	cmp	r0, #0
 8010860:	d19d      	bne.n	801079e <_nx_icmpv6_send_ns+0x42>
    driver_request.nx_ip_driver_interface            = outgoing_address -> nxd_ipv6_address_attached;
 8010862:	6869      	ldr	r1, [r5, #4]
    driver_request.nx_ip_driver_packet               = pkt_ptr;
 8010864:	9b05      	ldr	r3, [sp, #20]
    driver_request.nx_ip_driver_command              = NX_LINK_PACKET_SEND;
 8010866:	900a      	str	r0, [sp, #40]	; 0x28
    driver_request.nx_ip_driver_packet               = pkt_ptr;
 8010868:	930e      	str	r3, [sp, #56]	; 0x38
    driver_request.nx_ip_driver_ptr                  = ip_ptr;
 801086a:	e9cd 6110 	strd	r6, r1, [sp, #64]	; 0x40
    if (sendUnicast)
 801086e:	f1b9 0f00 	cmp.w	r9, #0
 8010872:	d033      	beq.n	80108dc <_nx_icmpv6_send_ns+0x180>
 8010874:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 8010878:	f8d8 2012 	ldr.w	r2, [r8, #18]
 801087c:	ba5b      	rev16	r3, r3
 801087e:	ba12      	rev	r2, r2
 8010880:	b29b      	uxth	r3, r3
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry != NX_NULL);
 8010882:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8010884:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8010888:	b191      	cbz	r1, 80108b0 <_nx_icmpv6_send_ns+0x154>
    (outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 801088a:	a80a      	add	r0, sp, #40	; 0x28
 801088c:	4788      	blx	r1
}
 801088e:	b013      	add	sp, #76	; 0x4c
 8010890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached != NX_NULL);
 8010894:	f04f 30ff 	mov.w	r0, #4294967295
 8010898:	f00c fcb6 	bl	801d208 <_tx_thread_sleep>
 801089c:	f04f 30ff 	mov.w	r0, #4294967295
 80108a0:	f00c fcb2 	bl	801d208 <_tx_thread_sleep>
 80108a4:	e7f6      	b.n	8010894 <_nx_icmpv6_send_ns+0x138>
        SET_SOLICITED_NODE_MULTICAST_ADDRESS(dest_address, neighbor_IP_address);
 80108a6:	4639      	mov	r1, r7
 80108a8:	4658      	mov	r0, fp
 80108aa:	f7f5 fe19 	bl	80064e0 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
 80108ae:	e799      	b.n	80107e4 <_nx_icmpv6_send_ns+0x88>
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry != NX_NULL);
 80108b0:	f04f 30ff 	mov.w	r0, #4294967295
 80108b4:	f00c fca8 	bl	801d208 <_tx_thread_sleep>
 80108b8:	f04f 30ff 	mov.w	r0, #4294967295
 80108bc:	f00c fca4 	bl	801d208 <_tx_thread_sleep>
 80108c0:	e7f6      	b.n	80108b0 <_nx_icmpv6_send_ns+0x154>
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6, (UINT)pkt_ptr -> nx_packet_length, src_address, dest_address);
 80108c2:	461a      	mov	r2, r3
 80108c4:	f8cd b000 	str.w	fp, [sp]
 80108c8:	463b      	mov	r3, r7
 80108ca:	213a      	movs	r1, #58	; 0x3a
 80108cc:	f7f1 fb0a 	bl	8001ee4 <_nx_ip_checksum_compute>
        checksum = (USHORT)(~checksum);
 80108d0:	43c2      	mvns	r2, r0
 80108d2:	9b05      	ldr	r3, [sp, #20]
        nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_checksum = checksum;
 80108d4:	ba52      	rev16	r2, r2
 80108d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d8:	8062      	strh	r2, [r4, #2]
 80108da:	e7b4      	b.n	8010846 <_nx_icmpv6_send_ns+0xea>
        driver_request.nx_ip_driver_physical_address_lsw = dest_address[3];
 80108dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
        driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 80108de:	f243 3333 	movw	r3, #13107	; 0x3333
 80108e2:	e7ce      	b.n	8010882 <_nx_icmpv6_send_ns+0x126>
 80108e4:	080258d8 	.word	0x080258d8
 80108e8:	00ffff00 	.word	0x00ffff00

080108ec <_nx_icmpv6_send_queued_packets>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_send_queued_packets(NX_IP *ip_ptr, ND_CACHE_ENTRY *nd_entry)
{
 80108ec:	b570      	push	{r4, r5, r6, lr}
 80108ee:	b088      	sub	sp, #32
#endif  /* NX_DISABLE_FRAGMENTATION */

TX_INTERRUPT_SAVE_AREA

    /* nd_entry must not be NX_NULL. */
    NX_ASSERT(nd_entry != NX_NULL);
 80108f0:	b309      	cbz	r1, 8010936 <_nx_icmpv6_send_queued_packets+0x4a>

    /* The packet waiting head must not be NX_NULL. */
    NX_ASSERT(nd_entry -> nx_nd_cache_packet_waiting_head != NX_NULL);
 80108f2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80108f4:	460c      	mov	r4, r1
 80108f6:	b33b      	cbz	r3, 8010948 <_nx_icmpv6_send_queued_packets+0x5c>
    queued_list_head = nd_entry -> nx_nd_cache_packet_waiting_head;

    mac_addr = nd_entry -> nx_nd_cache_mac_addr;

    /* Build the driver request packet.  */
    driver_request.nx_ip_driver_physical_address_msw =  ((ULONG)(mac_addr[0]) << 8)  | mac_addr[1];
 80108f8:	8a0a      	ldrh	r2, [r1, #16]
    driver_request.nx_ip_driver_physical_address_lsw =  ((ULONG)(mac_addr[2]) << 24) | ((ULONG)(mac_addr[3]) << 16) | ((ULONG)(mac_addr[4]) << 8) | mac_addr[5];
    driver_request.nx_ip_driver_ptr                  =  ip_ptr;
    driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 80108fa:	2500      	movs	r5, #0
 80108fc:	f8d1 1012 	ldr.w	r1, [r1, #18]
    driver_request.nx_ip_driver_physical_address_msw =  ((ULONG)(mac_addr[0]) << 8)  | mac_addr[1];
 8010900:	ba52      	rev16	r2, r2
    driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8010902:	9006      	str	r0, [sp, #24]
        /* Set a pointer to the start of the queue. */
        ip_packet_ptr = queued_list_head;
        queued_list_head = queued_list_head -> nx_packet_queue_next;

        /* Clear the packet's queue next pointer */
        ip_packet_ptr -> nx_packet_queue_next = NX_NULL;
 8010904:	462e      	mov	r6, r5
 8010906:	ba08      	rev	r0, r1
    driver_request.nx_ip_driver_physical_address_msw =  ((ULONG)(mac_addr[0]) << 8)  | mac_addr[1];
 8010908:	b292      	uxth	r2, r2
    driver_request.nx_ip_driver_interface            =  nd_entry -> nx_nd_cache_interface_ptr;
 801090a:	6a21      	ldr	r1, [r4, #32]
    driver_request.nx_ip_driver_physical_address_msw =  ((ULONG)(mac_addr[0]) << 8)  | mac_addr[1];
 801090c:	e9cd 2002 	strd	r2, r0, [sp, #8]
    driver_request.nx_ip_driver_status               =  NX_SUCCESS;
 8010910:	e9cd 5500 	strd	r5, r5, [sp]
    driver_request.nx_ip_driver_interface            =  nd_entry -> nx_nd_cache_interface_ptr;
 8010914:	9107      	str	r1, [sp, #28]

        /* Add this packet to the driver request (to send). */
        driver_request.nx_ip_driver_packet = ip_packet_ptr;

        /* Set the next hop MTU.  */
        next_hop_mtu = driver_request.nx_ip_driver_interface -> nx_interface_ip_mtu_size;
 8010916:	6a49      	ldr	r1, [r1, #36]	; 0x24

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, ip_packet_ptr);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (ip_packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 8010918:	4668      	mov	r0, sp
        if (ip_packet_ptr -> nx_packet_length > next_hop_mtu)
 801091a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        queued_list_head = queued_list_head -> nx_packet_queue_next;
 801091c:	69dd      	ldr	r5, [r3, #28]
        if (ip_packet_ptr -> nx_packet_length > next_hop_mtu)
 801091e:	428a      	cmp	r2, r1
        driver_request.nx_ip_driver_packet = ip_packet_ptr;
 8010920:	9304      	str	r3, [sp, #16]
        ip_packet_ptr -> nx_packet_queue_next = NX_NULL;
 8010922:	61de      	str	r6, [r3, #28]
        if (ip_packet_ptr -> nx_packet_length > next_hop_mtu)
 8010924:	d82b      	bhi.n	801097e <_nx_icmpv6_send_queued_packets+0x92>
            (ip_packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 8010926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801092c:	4798      	blx	r3
    while (queued_list_head)
 801092e:	b1a5      	cbz	r5, 801095a <_nx_icmpv6_send_queued_packets+0x6e>
 8010930:	462b      	mov	r3, r5
 8010932:	9907      	ldr	r1, [sp, #28]
 8010934:	e7ef      	b.n	8010916 <_nx_icmpv6_send_queued_packets+0x2a>
    NX_ASSERT(nd_entry != NX_NULL);
 8010936:	f04f 30ff 	mov.w	r0, #4294967295
 801093a:	f00c fc65 	bl	801d208 <_tx_thread_sleep>
 801093e:	f04f 30ff 	mov.w	r0, #4294967295
 8010942:	f00c fc61 	bl	801d208 <_tx_thread_sleep>
 8010946:	e7f6      	b.n	8010936 <_nx_icmpv6_send_queued_packets+0x4a>
    NX_ASSERT(nd_entry -> nx_nd_cache_packet_waiting_head != NX_NULL);
 8010948:	f04f 30ff 	mov.w	r0, #4294967295
 801094c:	f00c fc5c 	bl	801d208 <_tx_thread_sleep>
 8010950:	f04f 30ff 	mov.w	r0, #4294967295
 8010954:	f00c fc58 	bl	801d208 <_tx_thread_sleep>
 8010958:	e7f6      	b.n	8010948 <_nx_icmpv6_send_queued_packets+0x5c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801095a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801095e:	b672      	cpsid	i
       This situation happens when we receive the LLA (link local address) through
       unsoliciated RA (router advertisement message. In this situation,
       the entry is in STALE state, and a packet has been transmitted,
       so the entry needs to be in DELAY state.
     */
    if (nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 8010960:	7e62      	ldrb	r2, [r4, #25]
 8010962:	2a03      	cmp	r2, #3
 8010964:	d103      	bne.n	801096e <_nx_icmpv6_send_queued_packets+0x82>
    {

        nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_DELAY;
 8010966:	2104      	movs	r1, #4

        /* Start the Delay first probe timer */
        nd_entry -> nx_nd_cache_timer_tick = NX_DELAY_FIRST_PROBE_TIME;
 8010968:	2205      	movs	r2, #5
        nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_DELAY;
 801096a:	7661      	strb	r1, [r4, #25]
        nd_entry -> nx_nd_cache_timer_tick = NX_DELAY_FIRST_PROBE_TIME;
 801096c:	61e2      	str	r2, [r4, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801096e:	f383 8810 	msr	PRIMASK, r3
    }
    TX_RESTORE

    /* Clean up the nd_entry */
    nd_entry -> nx_nd_cache_packet_waiting_head = NX_NULL;
 8010972:	2300      	movs	r3, #0
    nd_entry -> nx_nd_cache_packet_waiting_tail = NX_NULL;
 8010974:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28

    /* Clean up the queue length variable. */
    nd_entry -> nx_nd_cache_packet_waiting_queue_length = 0;
 8010978:	76a3      	strb	r3, [r4, #26]
}
 801097a:	b008      	add	sp, #32
 801097c:	bd70      	pop	{r4, r5, r6, pc}
            _nx_ipv6_fragment_process(&driver_request, next_hop_mtu);
 801097e:	f001 f8d3 	bl	8011b28 <_nx_ipv6_fragment_process>
 8010982:	e7d4      	b.n	801092e <_nx_icmpv6_send_queued_packets+0x42>

08010984 <_nx_icmpv6_send_rs>:
NX_ICMPV6_RS     *rs_ptr;
NX_ICMPV6_OPTION *rs_options;


    /* Do not send RS packet if ICMPv6 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 8010984:	f8d0 388c 	ldr.w	r3, [r0, #2188]	; 0x88c
{
 8010988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801098c:	b087      	sub	sp, #28
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 801098e:	2b00      	cmp	r3, #0
 8010990:	d069      	beq.n	8010a66 <_nx_icmpv6_send_rs+0xe2>
 8010992:	460c      	mov	r4, r1
 8010994:	4605      	mov	r5, r0
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &pkt_ptr, (NX_ICMP_PACKET + sizeof(NX_ICMPV6_RS) + 8), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 8010996:	2300      	movs	r3, #0
 8010998:	2248      	movs	r2, #72	; 0x48
 801099a:	a905      	add	r1, sp, #20
 801099c:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 80109a0:	f7f5 fe74 	bl	800668c <_nx_packet_allocate>
 80109a4:	2800      	cmp	r0, #0
 80109a6:	d15e      	bne.n	8010a66 <_nx_icmpv6_send_rs+0xe2>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Find a valid IPv6 address. */
    if (_nxd_ipv6_interface_find(ip_ptr, (ULONG *)_nx_ipv6_all_router_address,
 80109a8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
                                 &pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr,
 80109ac:	9a05      	ldr	r2, [sp, #20]
    if (_nxd_ipv6_interface_find(ip_ptr, (ULONG *)_nx_ipv6_all_router_address,
 80109ae:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8010a9c <_nx_icmpv6_send_rs+0x118>
 80109b2:	4628      	mov	r0, r5
 80109b4:	0124      	lsls	r4, r4, #4
 80109b6:	3234      	adds	r2, #52	; 0x34
 80109b8:	4641      	mov	r1, r8
 80109ba:	f604 4348 	addw	r3, r4, #3144	; 0xc48
 80109be:	442b      	add	r3, r5
 80109c0:	f004 fb02 	bl	8014fc8 <_nxd_ipv6_interface_find>
 80109c4:	4607      	mov	r7, r0
 80109c6:	2800      	cmp	r0, #0
 80109c8:	d162      	bne.n	8010a90 <_nx_icmpv6_send_rs+0x10c>
        _nx_packet_release(pkt_ptr);
        return(NX_NOT_SUCCESSFUL);
    }

    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 80109ca:	9905      	ldr	r1, [sp, #20]
    rs_options -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_SRC_LINK_ADDR;
    rs_options -> nx_icmpv6_option_length = 1;

    /* Fill in the source mac address. */
    mac_addr = &rs_options -> nx_icmpv6_option_data;
    mac_addr[0] = (USHORT)(ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_msw);
 80109cc:	442c      	add	r4, r5
    rs_options -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_SRC_LINK_ADDR;
 80109ce:	2301      	movs	r3, #1
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 80109d0:	f04f 0c06 	mov.w	ip, #6
    pkt_ptr -> nx_packet_prepend_ptr -= pkt_ptr -> nx_packet_length;
 80109d4:	688e      	ldr	r6, [r1, #8]
    pkt_ptr -> nx_packet_length = (sizeof(NX_ICMPV6_RS) + 8);
 80109d6:	2210      	movs	r2, #16
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_type = NX_ICMPV6_ROUTER_SOLICITATION_TYPE;
 80109d8:	2085      	movs	r0, #133	; 0x85
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 80109da:	f881 c030 	strb.w	ip, [r1, #48]	; 0x30
    pkt_ptr -> nx_packet_prepend_ptr -= pkt_ptr -> nx_packet_length;
 80109de:	f1a6 0e10 	sub.w	lr, r6, #16
    pkt_ptr -> nx_packet_length = (sizeof(NX_ICMPV6_RS) + 8);
 80109e2:	624a      	str	r2, [r1, #36]	; 0x24
    mac_addr[1] = (USHORT)((ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
    mac_addr[2] = (USHORT)(ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0x0000FFFF);

    /* Byte swapping. */
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 80109e4:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8010aa0 <_nx_icmpv6_send_rs+0x11c>
    pkt_ptr -> nx_packet_prepend_ptr -= pkt_ptr -> nx_packet_length;
 80109e8:	f8c1 e008 	str.w	lr, [r1, #8]
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_code = 0;
 80109ec:	f806 7c0f 	strb.w	r7, [r6, #-15]
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_type = NX_ICMPV6_ROUTER_SOLICITATION_TYPE;
 80109f0:	f806 0c10 	strb.w	r0, [r6, #-16]
    rs_options -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_SRC_LINK_ADDR;
 80109f4:	f806 3c08 	strb.w	r3, [r6, #-8]
    rs_options -> nx_icmpv6_option_length = 1;
 80109f8:	f806 3c07 	strb.w	r3, [r6, #-7]
    mac_addr[0] = (USHORT)(ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_msw);
 80109fc:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
    mac_addr[1] = (USHORT)((ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 8010a00:	f8d4 0c58 	ldr.w	r0, [r4, #3160]	; 0xc58
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8010a04:	ea0c 2e03 	and.w	lr, ip, r3, lsl #8
 8010a08:	f3c3 2307 	ubfx	r3, r3, #8, #8
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8010a0c:	ea0c 2c00 	and.w	ip, ip, r0, lsl #8
 8010a10:	f3c0 2907 	ubfx	r9, r0, #8, #8
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8010a14:	ea4e 0303 	orr.w	r3, lr, r3
    mac_addr[1] = (USHORT)((ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 8010a18:	40d0      	lsrs	r0, r2
#ifdef NX_DISABLE_ICMPV6_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV6_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (ip_ptr -> nx_ip_interface[if_index].nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 8010a1a:	f8d4 ec88 	ldr.w	lr, [r4, #3208]	; 0xc88
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8010a1e:	ea4c 0c09 	orr.w	ip, ip, r9
 8010a22:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 8010a24:	ba40      	rev16	r0, r0
    if (ip_ptr -> nx_ip_interface[if_index].nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 8010a26:	f41e 7f00 	tst.w	lr, #512	; 0x200
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_checksum = 0;
 8010a2a:	f826 7c0e 	strh.w	r7, [r6, #-14]
    rs_ptr -> nx_icmpv6_rs_reserved = 0;
 8010a2e:	f846 7c0c 	str.w	r7, [r6, #-12]
 8010a32:	f104 0408 	add.w	r4, r4, #8
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8010a36:	f826 3c06 	strh.w	r3, [r6, #-6]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8010a3a:	f826 cc02 	strh.w	ip, [r6, #-2]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 8010a3e:	f826 0c04 	strh.w	r0, [r6, #-4]
    if (ip_ptr -> nx_ip_interface[if_index].nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 8010a42:	d015      	beq.n	8010a70 <_nx_icmpv6_send_rs+0xec>
        rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_checksum = checksum;
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
 8010a44:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 8010a46:	4613      	mov	r3, r2
 8010a48:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8010a4c:	63c8      	str	r0, [r1, #60]	; 0x3c
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
 8010a4e:	22ff      	movs	r2, #255	; 0xff
 8010a50:	4628      	mov	r0, r5
 8010a52:	9200      	str	r2, [sp, #0]
 8010a54:	223a      	movs	r2, #58	; 0x3a
 8010a56:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8010a5a:	f001 fb2f 	bl	80120bc <_nx_ipv6_packet_send>
                         pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
                         (ULONG *)_nx_ipv6_all_router_address);

    return(NX_SUCCESS);
}
 8010a5e:	4638      	mov	r0, r7
 8010a60:	b007      	add	sp, #28
 8010a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(NX_NOT_SUCCESSFUL);
 8010a66:	2743      	movs	r7, #67	; 0x43
}
 8010a68:	4638      	mov	r0, r7
 8010a6a:	b007      	add	sp, #28
 8010a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6,
 8010a70:	4623      	mov	r3, r4
 8010a72:	4608      	mov	r0, r1
 8010a74:	f8cd 8000 	str.w	r8, [sp]
 8010a78:	213a      	movs	r1, #58	; 0x3a
 8010a7a:	f7f1 fa33 	bl	8001ee4 <_nx_ip_checksum_compute>
 8010a7e:	9905      	ldr	r1, [sp, #20]
        checksum = (USHORT)(~checksum);
 8010a80:	43c0      	mvns	r0, r0
 8010a82:	6b4c      	ldr	r4, [r1, #52]	; 0x34
        rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_checksum = checksum;
 8010a84:	ba40      	rev16	r0, r0
 8010a86:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8010a88:	3408      	adds	r4, #8
 8010a8a:	f826 0c0e 	strh.w	r0, [r6, #-14]
 8010a8e:	e7de      	b.n	8010a4e <_nx_icmpv6_send_rs+0xca>
        _nx_packet_release(pkt_ptr);
 8010a90:	9805      	ldr	r0, [sp, #20]
        return(NX_NOT_SUCCESSFUL);
 8010a92:	2743      	movs	r7, #67	; 0x43
        _nx_packet_release(pkt_ptr);
 8010a94:	f7f5 ffac 	bl	80069f0 <_nx_packet_release>
        return(NX_NOT_SUCCESSFUL);
 8010a98:	e7e6      	b.n	8010a68 <_nx_icmpv6_send_rs+0xe4>
 8010a9a:	bf00      	nop
 8010a9c:	080258e8 	.word	0x080258e8
 8010aa0:	00ffff00 	.word	0x00ffff00

08010aa4 <_nx_icmpv6_validate_neighbor_message>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_icmpv6_validate_neighbor_message(NX_PACKET *packet_ptr)
{
 8010aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
ULONG             dest_address_type;


    /* Points to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8010aa6:	6b85      	ldr	r5, [r0, #56]	; 0x38
     * 7.1.1: Validation of Neighbor Solicitations
     * 7.1.2: Validation of Neighbor Advertisements
     */

    /* Hop limit must be 255, I.e., the packet could not possibly have been forwarded by a router. */
    if ((ipv6_header -> nx_ip_header_word_1 & 0xFF) != 0xFF)
 8010aa8:	792b      	ldrb	r3, [r5, #4]
 8010aaa:	2bff      	cmp	r3, #255	; 0xff
 8010aac:	d128      	bne.n	8010b00 <_nx_icmpv6_validate_neighbor_message+0x5c>
        return(NX_NOT_SUCCESSFUL);
    }

    /* Points to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    nd_header_ptr = (NX_ICMPV6_ND *)packet_ptr -> nx_packet_prepend_ptr;
 8010aae:	6886      	ldr	r6, [r0, #8]

    /* ICMP code must be 0 */
    if (nd_header_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_code != 0)
 8010ab0:	7873      	ldrb	r3, [r6, #1]
 8010ab2:	bb2b      	cbnz	r3, 8010b00 <_nx_icmpv6_validate_neighbor_message+0x5c>
    {
        return(NX_NOT_SUCCESSFUL);
    }

    /* ICMP length (derived from the IP Length) is 24 or more. */
    if (packet_ptr -> nx_packet_length < 24)
 8010ab4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010ab6:	2b17      	cmp	r3, #23
 8010ab8:	d922      	bls.n	8010b00 <_nx_icmpv6_validate_neighbor_message+0x5c>
    {
        return(NX_NOT_SUCCESSFUL);
    }

    /* Target Address must not be a multicast address. */
    if ((nd_header_ptr -> nx_icmpv6_nd_targetAddress[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 8010aba:	68b3      	ldr	r3, [r6, #8]
 8010abc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010ac0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8010ac4:	d01c      	beq.n	8010b00 <_nx_icmpv6_validate_neighbor_message+0x5c>
 8010ac6:	4604      	mov	r4, r0
    {
        return(NX_NOT_SUCCESSFUL);
    }

    /* Find out the destination IP address type.  */
    dest_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip);
 8010ac8:	f105 0018 	add.w	r0, r5, #24
 8010acc:	f7f5 fd4a 	bl	8006564 <IPv6_Address_Type>

    option_check = 0;

    if (nd_header_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_type == NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE)
 8010ad0:	7833      	ldrb	r3, [r6, #0]
    dest_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip);
 8010ad2:	4607      	mov	r7, r0
    if (nd_header_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_type == NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE)
 8010ad4:	2b87      	cmp	r3, #135	; 0x87
 8010ad6:	d015      	beq.n	8010b04 <_nx_icmpv6_validate_neighbor_message+0x60>
    else
    {

        /* If the IP Destination Address is a multicast address, the
           Solicted flag must be zero. */
        if (((ipv6_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000) &&
 8010ad8:	69ab      	ldr	r3, [r5, #24]
 8010ada:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010ade:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8010ae2:	d00a      	beq.n	8010afa <_nx_icmpv6_validate_neighbor_message+0x56>
 8010ae4:	2200      	movs	r2, #0
    }

    /* Locate the option field. */
    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    option_ptr    = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(nd_header_ptr, sizeof(NX_ICMPV6_ND));
    option_length = (UINT)(packet_ptr -> nx_packet_length - sizeof(NX_ICMPV6_ND));
 8010ae6:	6a60      	ldr	r0, [r4, #36]	; 0x24

    /* Validate option fields if there are any. */
    if (option_length)
 8010ae8:	3818      	subs	r0, #24
 8010aea:	d00a      	beq.n	8010b02 <_nx_icmpv6_validate_neighbor_message+0x5e>
    {
        return(_nx_icmpv6_validate_options(option_ptr, (INT)option_length, (INT)option_check));
 8010aec:	4601      	mov	r1, r0
 8010aee:	f106 0018 	add.w	r0, r6, #24
    }

    return(NX_SUCCESS);
}
 8010af2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return(_nx_icmpv6_validate_options(option_ptr, (INT)option_length, (INT)option_check));
 8010af6:	f000 b811 	b.w	8010b1c <_nx_icmpv6_validate_options>
            nd_header_ptr -> nx_icmpv6_nd_flag & 0x40000000)
 8010afa:	6873      	ldr	r3, [r6, #4]
        if (((ipv6_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000) &&
 8010afc:	005b      	lsls	r3, r3, #1
 8010afe:	d5f1      	bpl.n	8010ae4 <_nx_icmpv6_validate_neighbor_message+0x40>
        return(NX_NOT_SUCCESSFUL);
 8010b00:	2043      	movs	r0, #67	; 0x43
}
 8010b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        source_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_source_ip);
 8010b04:	f105 0008 	add.w	r0, r5, #8
 8010b08:	f7f5 fd2c 	bl	8006564 <IPv6_Address_Type>
        if (source_address_type == IPV6_ADDRESS_UNSPECIFIED)
 8010b0c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8010b10:	d1e8      	bne.n	8010ae4 <_nx_icmpv6_validate_neighbor_message+0x40>
            if ((dest_address_type & IPV6_SOLICITED_NODE_MCAST) != IPV6_SOLICITED_NODE_MCAST)
 8010b12:	067a      	lsls	r2, r7, #25
 8010b14:	d5f4      	bpl.n	8010b00 <_nx_icmpv6_validate_neighbor_message+0x5c>
 8010b16:	2201      	movs	r2, #1
 8010b18:	e7e5      	b.n	8010ae6 <_nx_icmpv6_validate_neighbor_message+0x42>
 8010b1a:	bf00      	nop

08010b1c <_nx_icmpv6_validate_options>:
{

UINT option_len;

    /* Parse all option headers from the ICMPv6 header. */
    while (length > 0)
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	dd0b      	ble.n	8010b38 <_nx_icmpv6_validate_options+0x1c>
    {
        /* Verify that the option length is not zero. */
        if (option -> nx_icmpv6_option_length == 0)
 8010b20:	7843      	ldrb	r3, [r0, #1]
 8010b22:	b1cb      	cbz	r3, 8010b58 <_nx_icmpv6_validate_options+0x3c>
 8010b24:	2a01      	cmp	r2, #1
 8010b26:	d102      	bne.n	8010b2e <_nx_icmpv6_validate_options+0x12>
 8010b28:	e00f      	b.n	8010b4a <_nx_icmpv6_validate_options+0x2e>
 8010b2a:	7843      	ldrb	r3, [r0, #1]
 8010b2c:	b1a3      	cbz	r3, 8010b58 <_nx_icmpv6_validate_options+0x3c>

            return(NX_NOT_SUCCESSFUL);
        }

        /* Get the next option. */
        option_len = ((UINT)option -> nx_icmpv6_option_length) << 3;
 8010b2e:	00db      	lsls	r3, r3, #3
        length -= (INT)option_len;
 8010b30:	1ac9      	subs	r1, r1, r3

        /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
        option = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option, option_len);
 8010b32:	4418      	add	r0, r3
    while (length > 0)
 8010b34:	2900      	cmp	r1, #0
 8010b36:	dcf8      	bgt.n	8010b2a <_nx_icmpv6_validate_options+0xe>

        /* Invalid packet length. */
        return(NX_NOT_SUCCESSFUL);
    }

    return(NX_SUCCESS);
 8010b38:	2900      	cmp	r1, #0
 8010b3a:	bf14      	ite	ne
 8010b3c:	2043      	movne	r0, #67	; 0x43
 8010b3e:	2000      	moveq	r0, #0
 8010b40:	4770      	bx	lr
    while (length > 0)
 8010b42:	2900      	cmp	r1, #0
 8010b44:	ddf8      	ble.n	8010b38 <_nx_icmpv6_validate_options+0x1c>
        if (option -> nx_icmpv6_option_length == 0)
 8010b46:	7843      	ldrb	r3, [r0, #1]
 8010b48:	b133      	cbz	r3, 8010b58 <_nx_icmpv6_validate_options+0x3c>
        if ((additional_check == NX_NO_SLLA) &&
 8010b4a:	7802      	ldrb	r2, [r0, #0]
        option_len = ((UINT)option -> nx_icmpv6_option_length) << 3;
 8010b4c:	00db      	lsls	r3, r3, #3
        if ((additional_check == NX_NO_SLLA) &&
 8010b4e:	2a01      	cmp	r2, #1
        length -= (INT)option_len;
 8010b50:	eba1 0103 	sub.w	r1, r1, r3
        option = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option, option_len);
 8010b54:	4418      	add	r0, r3
        if ((additional_check == NX_NO_SLLA) &&
 8010b56:	d1f4      	bne.n	8010b42 <_nx_icmpv6_validate_options+0x26>
            return(NX_NOT_SUCCESSFUL);
 8010b58:	2043      	movs	r0, #67	; 0x43
}
 8010b5a:	4770      	bx	lr

08010b5c <_nx_icmpv6_validate_ra>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_icmpv6_validate_ra(NX_PACKET *packet_ptr)
{
 8010b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV6_RA *)packet_ptr -> nx_packet_prepend_ptr;

    /* Set a pointer to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8010b5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 8010b60:	4605      	mov	r5, r0
    header_ptr =  (NX_ICMPV6_RA *)packet_ptr -> nx_packet_prepend_ptr;
 8010b62:	6887      	ldr	r7, [r0, #8]

    source_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_source_ip);
 8010b64:	f104 0008 	add.w	r0, r4, #8
 8010b68:	f7f5 fcfc 	bl	8006564 <IPv6_Address_Type>
 8010b6c:	4606      	mov	r6, r0
    dest_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip);
 8010b6e:	f104 0018 	add.w	r0, r4, #24
 8010b72:	f7f5 fcf7 	bl	8006564 <IPv6_Address_Type>

    /* Validate the IP header information. */

    /*  The source address must be the link local router address. RFC2461 4.2 */
    if ((source_address_type & IPV6_ADDRESS_LINKLOCAL) != IPV6_ADDRESS_LINKLOCAL)
 8010b76:	07f3      	lsls	r3, r6, #31
 8010b78:	d50f      	bpl.n	8010b9a <_nx_icmpv6_validate_ra+0x3e>

        return(NX_NOT_SUCCESSFUL);
    }

    /* IP destination address must be multicast address or solicited sender link local address. */
    if ((dest_address_type  != (ULONG)(IPV6_ADDRESS_LINKLOCAL | IPV6_ADDRESS_UNICAST)) &&
 8010b7a:	4b0c      	ldr	r3, [pc, #48]	; (8010bac <_nx_icmpv6_validate_ra+0x50>)
 8010b7c:	4298      	cmp	r0, r3
 8010b7e:	d002      	beq.n	8010b86 <_nx_icmpv6_validate_ra+0x2a>
        (dest_address_type  != (ULONG)(IPV6_ALL_NODE_MCAST | IPV6_ADDRESS_MULTICAST)))
 8010b80:	4b0b      	ldr	r3, [pc, #44]	; (8010bb0 <_nx_icmpv6_validate_ra+0x54>)
    if ((dest_address_type  != (ULONG)(IPV6_ADDRESS_LINKLOCAL | IPV6_ADDRESS_UNICAST)) &&
 8010b82:	4298      	cmp	r0, r3
 8010b84:	d109      	bne.n	8010b9a <_nx_icmpv6_validate_ra+0x3e>

        return(NX_NOT_SUCCESSFUL);
    }

    /*  The IP header hop limit must be 255 */
    if ((ipv6_header -> nx_ip_header_word_1 & 0xFF) != 0xFF)
 8010b86:	7923      	ldrb	r3, [r4, #4]
 8010b88:	2bff      	cmp	r3, #255	; 0xff
 8010b8a:	d106      	bne.n	8010b9a <_nx_icmpv6_validate_ra+0x3e>

        return(NX_NOT_SUCCESSFUL);
    }

    /* Validate ICMP fields */
    if (header_ptr -> nx_icmpv6_ra_icmpv6_header.nx_icmpv6_header_code != 0)
 8010b8c:	787a      	ldrb	r2, [r7, #1]
 8010b8e:	b922      	cbnz	r2, 8010b9a <_nx_icmpv6_validate_ra+0x3e>
    }

    /* Locate the option field. */
    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(header_ptr, sizeof(NX_ICMPV6_RA));
    option_length = (INT)(packet_ptr -> nx_packet_length - sizeof(NX_ICMPV6_RA));
 8010b90:	6a69      	ldr	r1, [r5, #36]	; 0x24

    /* Check for options (if there is a non zero option length ICMPv6 header field). */
    if (option_length)
 8010b92:	3910      	subs	r1, #16
 8010b94:	d103      	bne.n	8010b9e <_nx_icmpv6_validate_ra+0x42>

        /* Validate option field(s). */
        return(_nx_icmpv6_validate_options(option_ptr, option_length, NX_NULL));
    }

    return(NX_SUCCESS);
 8010b96:	4608      	mov	r0, r1
}
 8010b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(NX_NOT_SUCCESSFUL);
 8010b9a:	2043      	movs	r0, #67	; 0x43
}
 8010b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(_nx_icmpv6_validate_options(option_ptr, option_length, NX_NULL));
 8010b9e:	f107 0010 	add.w	r0, r7, #16
}
 8010ba2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return(_nx_icmpv6_validate_options(option_ptr, option_length, NX_NULL));
 8010ba6:	f7ff bfb9 	b.w	8010b1c <_nx_icmpv6_validate_options>
 8010baa:	bf00      	nop
 8010bac:	80000001 	.word	0x80000001
 8010bb0:	40000010 	.word	0x40000010

08010bb4 <_nx_igmp_multicast_check>:

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8010bb4:	4b2a      	ldr	r3, [pc, #168]	; (8010c60 <_nx_igmp_multicast_check+0xac>)
 8010bb6:	4299      	cmp	r1, r3
 8010bb8:	d021      	beq.n	8010bfe <_nx_igmp_multicast_check+0x4a>

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8010bba:	f8d0 37dc 	ldr.w	r3, [r0, #2012]	; 0x7dc
 8010bbe:	4299      	cmp	r1, r3
 8010bc0:	d019      	beq.n	8010bf6 <_nx_igmp_multicast_check+0x42>
 8010bc2:	f8d0 37f0 	ldr.w	r3, [r0, #2032]	; 0x7f0
 8010bc6:	4299      	cmp	r1, r3
 8010bc8:	d01b      	beq.n	8010c02 <_nx_igmp_multicast_check+0x4e>
 8010bca:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8010bce:	4299      	cmp	r1, r3
 8010bd0:	d01f      	beq.n	8010c12 <_nx_igmp_multicast_check+0x5e>
 8010bd2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8010bd6:	4299      	cmp	r1, r3
 8010bd8:	d023      	beq.n	8010c22 <_nx_igmp_multicast_check+0x6e>
 8010bda:	f8d0 382c 	ldr.w	r3, [r0, #2092]	; 0x82c
 8010bde:	4299      	cmp	r1, r3
 8010be0:	d027      	beq.n	8010c32 <_nx_igmp_multicast_check+0x7e>
 8010be2:	f8d0 3840 	ldr.w	r3, [r0, #2112]	; 0x840
 8010be6:	4299      	cmp	r1, r3
 8010be8:	d02b      	beq.n	8010c42 <_nx_igmp_multicast_check+0x8e>
 8010bea:	f8d0 3854 	ldr.w	r3, [r0, #2132]	; 0x854
 8010bee:	428b      	cmp	r3, r1
 8010bf0:	d02f      	beq.n	8010c52 <_nx_igmp_multicast_check+0x9e>
            return(NX_TRUE);
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 8010bf2:	2000      	movs	r0, #0
}
 8010bf4:	4770      	bx	lr
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8010bf6:	f8d0 37e0 	ldr.w	r3, [r0, #2016]	; 0x7e0
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d1e1      	bne.n	8010bc2 <_nx_igmp_multicast_check+0xe>
        return(NX_TRUE);
 8010bfe:	2001      	movs	r0, #1
 8010c00:	4770      	bx	lr
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8010c02:	f8d0 37f4 	ldr.w	r3, [r0, #2036]	; 0x7f4
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d0f9      	beq.n	8010bfe <_nx_igmp_multicast_check+0x4a>
 8010c0a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8010c0e:	4299      	cmp	r1, r3
 8010c10:	d1df      	bne.n	8010bd2 <_nx_igmp_multicast_check+0x1e>
 8010c12:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d0f1      	beq.n	8010bfe <_nx_igmp_multicast_check+0x4a>
 8010c1a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8010c1e:	4299      	cmp	r1, r3
 8010c20:	d1db      	bne.n	8010bda <_nx_igmp_multicast_check+0x26>
 8010c22:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d0e9      	beq.n	8010bfe <_nx_igmp_multicast_check+0x4a>
 8010c2a:	f8d0 382c 	ldr.w	r3, [r0, #2092]	; 0x82c
 8010c2e:	4299      	cmp	r1, r3
 8010c30:	d1d7      	bne.n	8010be2 <_nx_igmp_multicast_check+0x2e>
 8010c32:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d0e1      	beq.n	8010bfe <_nx_igmp_multicast_check+0x4a>
 8010c3a:	f8d0 3840 	ldr.w	r3, [r0, #2112]	; 0x840
 8010c3e:	4299      	cmp	r1, r3
 8010c40:	d1d3      	bne.n	8010bea <_nx_igmp_multicast_check+0x36>
 8010c42:	f8d0 3844 	ldr.w	r3, [r0, #2116]	; 0x844
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d0d9      	beq.n	8010bfe <_nx_igmp_multicast_check+0x4a>
 8010c4a:	f8d0 3854 	ldr.w	r3, [r0, #2132]	; 0x854
 8010c4e:	428b      	cmp	r3, r1
 8010c50:	d1cf      	bne.n	8010bf2 <_nx_igmp_multicast_check+0x3e>
 8010c52:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    return(NX_FALSE);
 8010c56:	1a80      	subs	r0, r0, r2
 8010c58:	fab0 f080 	clz	r0, r0
 8010c5c:	0940      	lsrs	r0, r0, #5
 8010c5e:	4770      	bx	lr
 8010c60:	e0000001 	.word	0xe0000001

08010c64 <_nx_invalidate_destination_entry>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_invalidate_destination_entry(NX_IP *ip_ptr, ULONG *next_hop_ip)
{
 8010c64:	b570      	push	{r4, r5, r6, lr}

UINT i, table_size;

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 8010c66:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510

    /* Check if there have been any destinations in the table. */
    if (table_size == 0)
 8010c6a:	2d00      	cmp	r5, #0
 8010c6c:	f000 808d 	beq.w	8010d8a <_nx_invalidate_destination_entry+0x126>
    /* Loop through the whole table to match the IP address. */
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
    {

        /* Skip over empty slots. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8010c70:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8010c74:	460e      	mov	r6, r1
 8010c76:	4604      	mov	r4, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	f040 8087 	bne.w	8010d8c <_nx_invalidate_destination_entry+0x128>
 8010c7e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8010c82:	b183      	cbz	r3, 8010ca6 <_nx_invalidate_destination_entry+0x42>

        /* Keep track of valid entries we have checked. */
        table_size--;

        /* Match the supplied next hop with the table entry next hop. */
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010c84:	4631      	mov	r1, r6
 8010c86:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
        table_size--;
 8010c8a:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010c8c:	f7f5 fbf4 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010c90:	b138      	cbz	r0, 8010ca2 <_nx_invalidate_destination_entry+0x3e>

            /* A matching entry is found.  Mark the entry as invalid. */
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;

            /* Decrease the count of available destinations. */
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010c92:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010c96:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010c98:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010c9a:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010c9e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8010ca2:	2d00      	cmp	r5, #0
 8010ca4:	d071      	beq.n	8010d8a <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8010ca6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8010caa:	b183      	cbz	r3, 8010cce <_nx_invalidate_destination_entry+0x6a>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010cac:	4631      	mov	r1, r6
 8010cae:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
        table_size--;
 8010cb2:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010cb4:	f7f5 fbe0 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010cb8:	b138      	cbz	r0, 8010cca <_nx_invalidate_destination_entry+0x66>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010cba:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010cbe:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010cc0:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010cc2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010cc6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8010cca:	2d00      	cmp	r5, #0
 8010ccc:	d05d      	beq.n	8010d8a <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8010cce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8010cd2:	b183      	cbz	r3, 8010cf6 <_nx_invalidate_destination_entry+0x92>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	f504 708e 	add.w	r0, r4, #284	; 0x11c
        table_size--;
 8010cda:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010cdc:	f7f5 fbcc 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010ce0:	b138      	cbz	r0, 8010cf2 <_nx_invalidate_destination_entry+0x8e>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010ce2:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010ce6:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010ce8:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010cea:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010cee:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8010cf2:	2d00      	cmp	r5, #0
 8010cf4:	d049      	beq.n	8010d8a <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8010cf6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8010cfa:	b17b      	cbz	r3, 8010d1c <_nx_invalidate_destination_entry+0xb8>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010cfc:	4631      	mov	r1, r6
 8010cfe:	f504 70a2 	add.w	r0, r4, #324	; 0x144
        table_size--;
 8010d02:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010d04:	f7f5 fbb8 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010d08:	b138      	cbz	r0, 8010d1a <_nx_invalidate_destination_entry+0xb6>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d0a:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d0e:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d10:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d12:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d16:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8010d1a:	b3b5      	cbz	r5, 8010d8a <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8010d1c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8010d20:	b17b      	cbz	r3, 8010d42 <_nx_invalidate_destination_entry+0xde>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010d22:	4631      	mov	r1, r6
 8010d24:	f504 70b6 	add.w	r0, r4, #364	; 0x16c
        table_size--;
 8010d28:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010d2a:	f7f5 fba5 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010d2e:	b138      	cbz	r0, 8010d40 <_nx_invalidate_destination_entry+0xdc>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d30:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d34:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d36:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d38:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d3c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8010d40:	b31d      	cbz	r5, 8010d8a <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8010d42:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010d46:	b17b      	cbz	r3, 8010d68 <_nx_invalidate_destination_entry+0x104>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010d48:	4631      	mov	r1, r6
 8010d4a:	f504 70ca 	add.w	r0, r4, #404	; 0x194
 8010d4e:	f7f5 fb93 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010d52:	b138      	cbz	r0, 8010d64 <_nx_invalidate_destination_entry+0x100>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d54:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d58:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d5a:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d5c:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d60:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8010d64:	2d01      	cmp	r5, #1
 8010d66:	d010      	beq.n	8010d8a <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8010d68:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 8010d6c:	b16b      	cbz	r3, 8010d8a <_nx_invalidate_destination_entry+0x126>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010d6e:	4631      	mov	r1, r6
 8010d70:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
 8010d74:	f7f5 fb80 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010d78:	b138      	cbz	r0, 8010d8a <_nx_invalidate_destination_entry+0x126>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d7a:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d7e:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d80:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d82:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d86:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        }
    }

    return;
}
 8010d8a:	bd70      	pop	{r4, r5, r6, pc}
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010d8c:	30a4      	adds	r0, #164	; 0xa4
        table_size--;
 8010d8e:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8010d90:	f7f5 fb72 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8010d94:	b138      	cbz	r0, 8010da6 <_nx_invalidate_destination_entry+0x142>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d96:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d9a:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010d9c:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8010d9e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
            ip_ptr -> nx_ipv6_destination_table_size--;
 8010da2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8010da6:	2d00      	cmp	r5, #0
 8010da8:	f47f af69 	bne.w	8010c7e <_nx_invalidate_destination_entry+0x1a>
}
 8010dac:	bd70      	pop	{r4, r5, r6, pc}
 8010dae:	bf00      	nop

08010db0 <_nx_ip_deferred_link_status_process>:

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 8010db0:	f8d0 3eec 	ldr.w	r3, [r0, #3820]	; 0xeec
 8010db4:	b30b      	cbz	r3, 8010dfa <_nx_ip_deferred_link_status_process+0x4a>
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8010db6:	f890 3c4c 	ldrb.w	r3, [r0, #3148]	; 0xc4c
 8010dba:	b11b      	cbz	r3, 8010dc4 <_nx_ip_deferred_link_status_process+0x14>
 8010dbc:	f890 3c50 	ldrb.w	r3, [r0, #3152]	; 0xc50
 8010dc0:	b90b      	cbnz	r3, 8010dc6 <_nx_ip_deferred_link_status_process+0x16>
 8010dc2:	4770      	bx	lr
 8010dc4:	4770      	bx	lr
{
 8010dc6:	b530      	push	{r4, r5, lr}
 8010dc8:	b08b      	sub	sp, #44	; 0x2c
 8010dca:	4604      	mov	r4, r0
            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;

            driver_request.nx_ip_driver_ptr       = ip_ptr;
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8010dcc:	f600 4248 	addw	r2, r0, #3144	; 0xc48
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8010dd0:	2500      	movs	r5, #0
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8010dd2:	210a      	movs	r1, #10
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8010dd4:	ab01      	add	r3, sp, #4
            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8010dd6:	9008      	str	r0, [sp, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8010dd8:	a802      	add	r0, sp, #8
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8010dda:	9102      	str	r1, [sp, #8]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8010ddc:	9209      	str	r2, [sp, #36]	; 0x24
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8010dde:	9307      	str	r3, [sp, #28]
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8010de0:	f884 5c50 	strb.w	r5, [r4, #3152]	; 0xc50
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8010de4:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
 8010de8:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 8010dea:	4629      	mov	r1, r5
 8010dec:	f8d4 3eec 	ldr.w	r3, [r4, #3820]	; 0xeec
 8010df0:	4620      	mov	r0, r4
 8010df2:	9a01      	ldr	r2, [sp, #4]
 8010df4:	4798      	blx	r3
        }
    }
}
 8010df6:	b00b      	add	sp, #44	; 0x2c
 8010df8:	bd30      	pop	{r4, r5, pc}
 8010dfa:	4770      	bx	lr

08010dfc <_nx_ip_dispatch_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 8010dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e00:	460c      	mov	r4, r1
 8010e02:	4606      	mov	r6, r0


    /* Initialize local variables. */
    drop_packet = 0;
#ifdef FEATURE_NX_IPV6
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
 8010e04:	2728      	movs	r7, #40	; 0x28
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8010e06:	f8d1 a034 	ldr.w	sl, [r1, #52]	; 0x34

                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_1;
                }
                else
                {
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 8010e0a:	f04f 0905 	mov.w	r9, #5
 8010e0e:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_1;
 8010e10:	f04f 0802 	mov.w	r8, #2
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 8010e14:	462b      	mov	r3, r5
        switch (protocol)
 8010e16:	2a3c      	cmp	r2, #60	; 0x3c
 8010e18:	f200 808e 	bhi.w	8010f38 <_nx_ip_dispatch_process+0x13c>
 8010e1c:	e8df f002 	tbb	[pc, r2]
 8010e20:	8c8c8c4b 	.word	0x8c8c8c4b
 8010e24:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e28:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e2c:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e30:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e34:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e38:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e3c:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e40:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e44:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e48:	668c8c8c 	.word	0x668c8c8c
 8010e4c:	8c8c8c79 	.word	0x8c8c8c79
 8010e50:	48488c8c 	.word	0x48488c8c
 8010e54:	8c8c8c8c 	.word	0x8c8c8c8c
 8010e58:	488c8c8c 	.word	0x488c8c8c
 8010e5c:	1f          	.byte	0x1f
 8010e5d:	00          	.byte	0x00
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 8010e5e:	f240 2505 	movw	r5, #517	; 0x205
            if (packet_ptr -> nx_packet_destination_header == 1)
 8010e62:	f894 b02d 	ldrb.w	fp, [r4, #45]	; 0x2d
 8010e66:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010e6a:	f10b 0201 	add.w	r2, fp, #1
 8010e6e:	f1bb 0f01 	cmp.w	fp, #1
 8010e72:	b2d2      	uxtb	r2, r2
 8010e74:	f000 8097 	beq.w	8010fa6 <_nx_ip_dispatch_process+0x1aa>
                if (packet_ptr -> nx_packet_option_state < (UCHAR)ROUTING_HEADER)
 8010e78:	2902      	cmp	r1, #2
                }
            }

            packet_ptr -> nx_packet_destination_header++;
 8010e7a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_1;
 8010e7e:	bf94      	ite	ls
 8010e80:	f884 802c 	strbls.w	r8, [r4, #44]	; 0x2c
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 8010e84:	f884 902c 	strbhi.w	r9, [r4, #44]	; 0x2c

            if (!drop_packet)
            {
                /* Proceed with hop by hop handling if there are no errors. */
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8010e88:	4621      	mov	r1, r4
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	f001 fb92 	bl	80125b4 <_nx_ipv6_process_hop_by_hop_option>
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 8010e90:	b978      	cbnz	r0, 8010eb2 <_nx_ip_dispatch_process+0xb6>
                continue;
            }
#endif  /* NX_IPSEC_ENABLE */

#ifdef FEATURE_NX_IPV6
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8010e92:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010e96:	2b06      	cmp	r3, #6
 8010e98:	f040 80a3 	bne.w	8010fe2 <_nx_ip_dispatch_process+0x1e6>
            {

                /* Find the option we just processed. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                option = (NX_IPV6_HEADER_OPTION *)packet_ptr -> nx_packet_prepend_ptr;
 8010e9c:	68a1      	ldr	r1, [r4, #8]
                else
                {

                    /* Compute the current option length. */
                    /* For other IPv6 optional headers, hdr_ext_len is expressed in 64-bit words. */
                    option_hdr_len = (ULONG)((option -> nx_ipv6_header_option_ext_length + 1) << 3);
 8010e9e:	784b      	ldrb	r3, [r1, #1]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	00db      	lsls	r3, r3, #3
                }

                /* Obtain the next option header type. */
                protocol = option -> nx_ipv6_header_option_next_header;

                if (((ALIGN_TYPE)(packet_ptr -> nx_packet_prepend_ptr) + option_hdr_len) <
 8010ea4:	18c8      	adds	r0, r1, r3
 8010ea6:	68e2      	ldr	r2, [r4, #12]
 8010ea8:	b2bd      	uxth	r5, r7
 8010eaa:	4282      	cmp	r2, r0
 8010eac:	d861      	bhi.n	8010f72 <_nx_ip_dispatch_process+0x176>
                /*
                   Advance the nx_packet_option_offset as well.
                   Option Offset is used when constructing ICMPv6 parameter problem message.
                 */

                packet_ptr -> nx_packet_option_offset = (USHORT)next_option_offset;
 8010eae:	85e5      	strh	r5, [r4, #46]	; 0x2e
                    drop_packet = 1;
 8010eb0:	2001      	movs	r0, #1
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
}
 8010eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 8010eb6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
                packet_ptr -> nx_packet_option_state = (UCHAR)HOP_BY_HOP_HEADER;
 8010eba:	2501      	movs	r5, #1
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8010ebc:	4621      	mov	r1, r4
 8010ebe:	4630      	mov	r0, r6
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 8010ec0:	b982      	cbnz	r2, 8010ee4 <_nx_ip_dispatch_process+0xe8>
                packet_ptr -> nx_packet_option_state = (UCHAR)HOP_BY_HOP_HEADER;
 8010ec2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8010ec6:	f001 fb75 	bl	80125b4 <_nx_ipv6_process_hop_by_hop_option>
        if (!drop_packet)
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	d1f1      	bne.n	8010eb2 <_nx_ip_dispatch_process+0xb6>
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8010ece:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010ed2:	2b06      	cmp	r3, #6
 8010ed4:	d0e2      	beq.n	8010e9c <_nx_ip_dispatch_process+0xa0>
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 8010ed6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8010eda:	4621      	mov	r1, r4
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 8010edc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8010ede:	4630      	mov	r0, r6
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 8010ee0:	2a00      	cmp	r2, #0
 8010ee2:	d0ee      	beq.n	8010ec2 <_nx_ip_dispatch_process+0xc6>
                    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 8010ee4:	4a54      	ldr	r2, [pc, #336]	; (8011038 <_nx_ip_dispatch_process+0x23c>)
 8010ee6:	f7ff fa81 	bl	80103ec <_nx_icmpv6_send_error_message>
 8010eea:	e7e1      	b.n	8010eb0 <_nx_ip_dispatch_process+0xb4>
                packet_ptr -> nx_packet_option_state = (UCHAR)ROUTING_HEADER;
 8010eec:	2503      	movs	r5, #3
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)ROUTING_HEADER)
 8010eee:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_routing_option(ip_ptr, packet_ptr);
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	4630      	mov	r0, r6
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)ROUTING_HEADER)
 8010ef6:	2a02      	cmp	r2, #2
 8010ef8:	d8f4      	bhi.n	8010ee4 <_nx_ip_dispatch_process+0xe8>
                packet_ptr -> nx_packet_option_state = (UCHAR)ROUTING_HEADER;
 8010efa:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_routing_option(ip_ptr, packet_ptr);
 8010efe:	f001 fb95 	bl	801262c <_nx_ipv6_process_routing_option>
        if (!drop_packet)
 8010f02:	2800      	cmp	r0, #0
 8010f04:	d1d5      	bne.n	8010eb2 <_nx_ip_dispatch_process+0xb6>
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8010f06:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010f0a:	2b06      	cmp	r3, #6
 8010f0c:	d0c6      	beq.n	8010e9c <_nx_ip_dispatch_process+0xa0>
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 8010f0e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8010f10:	e7ed      	b.n	8010eee <_nx_ip_dispatch_process+0xf2>
                packet_ptr -> nx_packet_option_state = (UCHAR)FRAGMENT_HEADER;
 8010f12:	2504      	movs	r5, #4
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)FRAGMENT_HEADER)
 8010f14:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
                    drop_packet = _nx_ipv6_process_fragment_option(ip_ptr, packet_ptr);
 8010f18:	4621      	mov	r1, r4
 8010f1a:	4630      	mov	r0, r6
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)FRAGMENT_HEADER)
 8010f1c:	2a03      	cmp	r2, #3
 8010f1e:	d8e1      	bhi.n	8010ee4 <_nx_ip_dispatch_process+0xe8>
                packet_ptr -> nx_packet_option_state = (UCHAR)FRAGMENT_HEADER;
 8010f20:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                    drop_packet = _nx_ipv6_process_fragment_option(ip_ptr, packet_ptr);
 8010f24:	f001 fae2 	bl	80124ec <_nx_ipv6_process_fragment_option>
                if (drop_packet != NX_CONTINUE)
 8010f28:	2855      	cmp	r0, #85	; 0x55
 8010f2a:	d1c2      	bne.n	8010eb2 <_nx_ip_dispatch_process+0xb6>
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8010f2c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010f30:	2b06      	cmp	r3, #6
 8010f32:	d06b      	beq.n	801100c <_nx_ip_dispatch_process+0x210>
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 8010f34:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8010f36:	e7ed      	b.n	8010f14 <_nx_ip_dispatch_process+0x118>
            if (protocol == NX_PROTOCOL_TCP)
 8010f38:	2a06      	cmp	r2, #6
 8010f3a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010f3e:	d021      	beq.n	8010f84 <_nx_ip_dispatch_process+0x188>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 8010f40:	2b06      	cmp	r3, #6
 8010f42:	d03f      	beq.n	8010fc4 <_nx_ip_dispatch_process+0x1c8>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8010f44:	2b04      	cmp	r3, #4
 8010f46:	d04e      	beq.n	8010fe6 <_nx_ip_dispatch_process+0x1ea>
            else if (protocol == NX_PROTOCOL_UDP)
 8010f48:	2a11      	cmp	r2, #17
 8010f4a:	d0b1      	beq.n	8010eb0 <_nx_ip_dispatch_process+0xb4>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 8010f4c:	f8d6 767c 	ldr.w	r7, [r6, #1660]	; 0x67c
 8010f50:	b14f      	cbz	r7, 8010f66 <_nx_ip_dispatch_process+0x16a>
                    if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 8010f52:	0411      	lsls	r1, r2, #16
 8010f54:	4630      	mov	r0, r6
 8010f56:	4622      	mov	r2, r4
 8010f58:	47b8      	blx	r7
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d0a9      	beq.n	8010eb2 <_nx_ip_dispatch_process+0xb6>
 8010f5e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8010f62:	2b04      	cmp	r3, #4
 8010f64:	d049      	beq.n	8010ffa <_nx_ip_dispatch_process+0x1fe>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8010f66:	2b06      	cmp	r3, #6
 8010f68:	d1a2      	bne.n	8010eb0 <_nx_ip_dispatch_process+0xb4>
                    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 8010f6a:	462b      	mov	r3, r5
 8010f6c:	4621      	mov	r1, r4
 8010f6e:	4630      	mov	r0, r6
 8010f70:	e7b8      	b.n	8010ee4 <_nx_ip_dispatch_process+0xe8>
                    packet_ptr -> nx_packet_length      -= option_hdr_len;
 8010f72:	6a62      	ldr	r2, [r4, #36]	; 0x24
                next_option_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 8010f74:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                    packet_ptr -> nx_packet_length      -= option_hdr_len;
 8010f76:	1ad3      	subs	r3, r2, r3
                protocol = option -> nx_ipv6_header_option_next_header;
 8010f78:	780a      	ldrb	r2, [r1, #0]
                next_option_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 8010f7a:	1bc7      	subs	r7, r0, r7
                    packet_ptr -> nx_packet_prepend_ptr += option_hdr_len;
 8010f7c:	60a0      	str	r0, [r4, #8]
                packet_ptr -> nx_packet_option_offset = (USHORT)next_option_offset;
 8010f7e:	85e5      	strh	r5, [r4, #46]	; 0x2e
                    packet_ptr -> nx_packet_length      -= option_hdr_len;
 8010f80:	6263      	str	r3, [r4, #36]	; 0x24
 8010f82:	e747      	b.n	8010e14 <_nx_ip_dispatch_process+0x18>
                if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) ||
 8010f84:	2b04      	cmp	r3, #4
 8010f86:	d005      	beq.n	8010f94 <_nx_ip_dispatch_process+0x198>
 8010f88:	2b06      	cmp	r3, #6
 8010f8a:	d191      	bne.n	8010eb0 <_nx_ip_dispatch_process+0xb4>
                    ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 8010f8c:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8010f90:	2b04      	cmp	r3, #4
 8010f92:	d18d      	bne.n	8010eb0 <_nx_ip_dispatch_process+0xb4>
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8010f94:	f8d6 39bc 	ldr.w	r3, [r6, #2492]	; 0x9bc
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d089      	beq.n	8010eb0 <_nx_ip_dispatch_process+0xb4>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	4798      	blx	r3
                        return(0);
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	e785      	b.n	8010eb2 <_nx_ip_dispatch_process+0xb6>
                if (packet_ptr -> nx_packet_option_state < (UCHAR)DESTINATION_HEADER_1)
 8010fa6:	2901      	cmp	r1, #1
 8010fa8:	d901      	bls.n	8010fae <_nx_ip_dispatch_process+0x1b2>
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 8010faa:	85a5      	strh	r5, [r4, #44]	; 0x2c
 8010fac:	e76c      	b.n	8010e88 <_nx_ip_dispatch_process+0x8c>
            packet_ptr -> nx_packet_destination_header++;
 8010fae:	2202      	movs	r2, #2
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	4621      	mov	r1, r4
            packet_ptr -> nx_packet_destination_header++;
 8010fb4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 8010fb8:	4a1f      	ldr	r2, [pc, #124]	; (8011038 <_nx_ip_dispatch_process+0x23c>)
 8010fba:	f7ff fa17 	bl	80103ec <_nx_icmpv6_send_error_message>
 8010fbe:	4658      	mov	r0, fp
}
 8010fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 8010fc4:	2a3a      	cmp	r2, #58	; 0x3a
 8010fc6:	d024      	beq.n	8011012 <_nx_ip_dispatch_process+0x216>
            else if (protocol == NX_PROTOCOL_UDP)
 8010fc8:	2a11      	cmp	r2, #17
 8010fca:	d1bf      	bne.n	8010f4c <_nx_ip_dispatch_process+0x150>
                    ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 8010fcc:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8010fd0:	2b04      	cmp	r3, #4
 8010fd2:	f47f af6d 	bne.w	8010eb0 <_nx_ip_dispatch_process+0xb4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 8010fd6:	f8d6 3930 	ldr.w	r3, [r6, #2352]	; 0x930
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f43f af68 	beq.w	8010eb0 <_nx_ip_dispatch_process+0xb4>
 8010fe0:	e7dc      	b.n	8010f9c <_nx_ip_dispatch_process+0x1a0>
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 8010fe2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8010fe4:	e73d      	b.n	8010e62 <_nx_ip_dispatch_process+0x66>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8010fe6:	2a01      	cmp	r2, #1
 8010fe8:	d019      	beq.n	801101e <_nx_ip_dispatch_process+0x222>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8010fea:	2a02      	cmp	r2, #2
 8010fec:	d01d      	beq.n	801102a <_nx_ip_dispatch_process+0x22e>
            else if (protocol == NX_PROTOCOL_UDP)
 8010fee:	2a11      	cmp	r2, #17
 8010ff0:	d0f1      	beq.n	8010fd6 <_nx_ip_dispatch_process+0x1da>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 8010ff2:	f8d6 767c 	ldr.w	r7, [r6, #1660]	; 0x67c
 8010ff6:	2f00      	cmp	r7, #0
 8010ff8:	d1ab      	bne.n	8010f52 <_nx_ip_dispatch_process+0x156>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	4a0f      	ldr	r2, [pc, #60]	; (801103c <_nx_ip_dispatch_process+0x240>)
 8010ffe:	4621      	mov	r1, r4
 8011000:	4630      	mov	r0, r6
 8011002:	f7fe fa9f 	bl	800f544 <_nx_icmpv4_send_error_message>
 8011006:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801100a:	e7ac      	b.n	8010f66 <_nx_ip_dispatch_process+0x16a>
                option = (NX_IPV6_HEADER_OPTION *)packet_ptr -> nx_packet_prepend_ptr;
 801100c:	68a1      	ldr	r1, [r4, #8]
                    option_hdr_len = sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 801100e:	2308      	movs	r3, #8
 8011010:	e748      	b.n	8010ea4 <_nx_ip_dispatch_process+0xa8>
                if (ip_ptr -> nx_ip_icmpv6_packet_process != NX_NULL)
 8011012:	f8d6 388c 	ldr.w	r3, [r6, #2188]	; 0x88c
 8011016:	2b00      	cmp	r3, #0
 8011018:	f43f af4a 	beq.w	8010eb0 <_nx_ip_dispatch_process+0xb4>
 801101c:	e7be      	b.n	8010f9c <_nx_ip_dispatch_process+0x1a0>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 801101e:	f8d6 3880 	ldr.w	r3, [r6, #2176]	; 0x880
 8011022:	2b00      	cmp	r3, #0
 8011024:	f43f af44 	beq.w	8010eb0 <_nx_ip_dispatch_process+0xb4>
 8011028:	e7b8      	b.n	8010f9c <_nx_ip_dispatch_process+0x1a0>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 801102a:	f8d6 386c 	ldr.w	r3, [r6, #2156]	; 0x86c
 801102e:	2b00      	cmp	r3, #0
 8011030:	f43f af3e 	beq.w	8010eb0 <_nx_ip_dispatch_process+0xb4>
 8011034:	e7b2      	b.n	8010f9c <_nx_ip_dispatch_process+0x1a0>
 8011036:	bf00      	nop
 8011038:	04010000 	.word	0x04010000
 801103c:	03020000 	.word	0x03020000

08011040 <_nx_ip_driver_packet_send>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 8011040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011044:	460d      	mov	r5, r1
 8011046:	b08a      	sub	sp, #40	; 0x28
 8011048:	4604      	mov	r4, r0
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
    driver_request.nx_ip_driver_packet =                packet_ptr;
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 801104a:	6b49      	ldr	r1, [r1, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 801104c:	2000      	movs	r0, #0
{
 801104e:	461e      	mov	r6, r3
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8011050:	9506      	str	r5, [sp, #24]
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 8011052:	9002      	str	r0, [sp, #8]
{
 8011054:	9f10      	ldr	r7, [sp, #64]	; 0x40
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8011056:	e9cd 4108 	strd	r4, r1, [sp, #32]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 801105a:	794b      	ldrb	r3, [r1, #5]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d05a      	beq.n	8011116 <_nx_ip_driver_packet_send+0xd6>
        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8011060:	1c53      	adds	r3, r2, #1
 8011062:	f000 8098 	beq.w	8011196 <_nx_ip_driver_packet_send+0x156>
 8011066:	e9d1 3006 	ldrd	r3, r0, [r1, #24]
            (((destination_ip & network_mask) == network) &&
 801106a:	ea02 0c03 	and.w	ip, r2, r3
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 801106e:	4584      	cmp	ip, r0
 8011070:	f000 808d 	beq.w	801118e <_nx_ip_driver_packet_send+0x14e>
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 8011074:	694b      	ldr	r3, [r1, #20]
 8011076:	4293      	cmp	r3, r2
 8011078:	d052      	beq.n	8011120 <_nx_ip_driver_packet_send+0xe0>
        {
            loopback = NX_TRUE;
            driver_request.nx_ip_driver_interface = NX_NULL;
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 801107a:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
 801107e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8011082:	f000 80a4 	beq.w	80111ce <_nx_ip_driver_packet_send+0x18e>

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8011086:	eb07 2017 	add.w	r0, r7, r7, lsr #8
 801108a:	f000 001f 	and.w	r0, r0, #31
 801108e:	eb04 0880 	add.w	r8, r4, r0, lsl #2

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8011092:	f8d8 3b78 	ldr.w	r3, [r8, #2936]	; 0xb78

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 8011096:	b193      	cbz	r3, 80110be <_nx_ip_driver_packet_send+0x7e>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8011098:	6a1a      	ldr	r2, [r3, #32]
 801109a:	4297      	cmp	r7, r2
 801109c:	f000 8084 	beq.w	80111a8 <_nx_ip_driver_packet_send+0x168>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 80110a0:	f8d3 c014 	ldr.w	ip, [r3, #20]

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 80110a4:	4563      	cmp	r3, ip
 80110a6:	d00a      	beq.n	80110be <_nx_ip_driver_packet_send+0x7e>
            while (arp_ptr)
 80110a8:	f1bc 0f00 	cmp.w	ip, #0
 80110ac:	d007      	beq.n	80110be <_nx_ip_driver_packet_send+0x7e>
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 80110ae:	f8dc 2020 	ldr.w	r2, [ip, #32]
 80110b2:	42ba      	cmp	r2, r7
 80110b4:	d079      	beq.n	80111aa <_nx_ip_driver_packet_send+0x16a>
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 80110b6:	f8dc c014 	ldr.w	ip, [ip, #20]
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 80110ba:	4563      	cmp	r3, ip
 80110bc:	d1f4      	bne.n	80110a8 <_nx_ip_driver_packet_send+0x68>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80110be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80110c0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d905      	bls.n	80110d2 <_nx_ip_driver_packet_send+0x92>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 80110c6:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d079      	beq.n	80111c2 <_nx_ip_driver_packet_send+0x182>
 80110ce:	2e00      	cmp	r6, #0
 80110d0:	d177      	bne.n	80111c2 <_nx_ip_driver_packet_send+0x182>

                    /* No ARP entry was found.  We need to allocate a new ARP entry, populate it, and
                       initiate an ARP request to get the specific physical mapping.  */

                    /* Allocate a new ARP entry.  */
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80110d2:	f8d4 3c0c 	ldr.w	r3, [r4, #3084]	; 0xc0c
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d073      	beq.n	80111c2 <_nx_ip_driver_packet_send+0x182>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 80110da:	f200 21de 	addw	r1, r0, #734	; 0x2de
 80110de:	2200      	movs	r2, #0
 80110e0:	4620      	mov	r0, r4
 80110e2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80110e6:	4798      	blx	r3
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80110e8:	4606      	mov	r6, r0
 80110ea:	2800      	cmp	r0, #0
 80110ec:	d169      	bne.n	80111c2 <_nx_ip_driver_packet_send+0x182>
                        /* Just return!  */
                        return;
                    }

                    /* Otherwise, setup a pointer to the new ARP entry.  */
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 80110ee:	f8d8 3b78 	ldr.w	r3, [r8, #2936]	; 0xb78

                    /* Setup the IP address and clear the physical mapping.  */
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
                    arp_ptr -> nx_arp_physical_address_msw =  0;
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 80110f2:	220a      	movs	r2, #10
                    arp_ptr -> nx_arp_retries =               0;
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80110f4:	6b68      	ldr	r0, [r5, #52]	; 0x34

                    /* Queue the packet for output.  */
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;

                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 80110f6:	4639      	mov	r1, r7
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 80110f8:	699b      	ldr	r3, [r3, #24]
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 80110fa:	e9c3 2601 	strd	r2, r6, [r3, #4]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80110fe:	62d8      	str	r0, [r3, #44]	; 0x2c
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8011100:	4602      	mov	r2, r0
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 8011102:	629e      	str	r6, [r3, #40]	; 0x28
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8011104:	4620      	mov	r0, r4
 8011106:	f8d4 4c18 	ldr.w	r4, [r4, #3096]	; 0xc18
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 801110a:	e9c3 7608 	strd	r7, r6, [r3, #32]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 801110e:	61ee      	str	r6, [r5, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8011110:	631d      	str	r5, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8011112:	47a0      	blx	r4
 8011114:	e025      	b.n	8011162 <_nx_ip_driver_packet_send+0x122>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8011116:	f102 4301 	add.w	r3, r2, #2164260864	; 0x81000000
 801111a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801111e:	d223      	bcs.n	8011168 <_nx_ip_driver_packet_send+0x128>
            driver_request.nx_ip_driver_interface = NX_NULL;
 8011120:	2300      	movs	r3, #0
 8011122:	9309      	str	r3, [sp, #36]	; 0x24
    if (loopback == NX_TRUE)
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 8011124:	2300      	movs	r3, #0
 8011126:	f8d4 2638 	ldr.w	r2, [r4, #1592]	; 0x638
 801112a:	a901      	add	r1, sp, #4
 801112c:	4628      	mov	r0, r5
 801112e:	f001 fc9d 	bl	8012a6c <_nx_packet_copy>
 8011132:	b930      	cbnz	r0, 8011142 <_nx_ip_driver_packet_send+0x102>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 8011134:	9901      	ldr	r1, [sp, #4]
 8011136:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8011138:	2b00      	cmp	r3, #0
 801113a:	d16d      	bne.n	8011218 <_nx_ip_driver_packet_send+0x1d8>
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 801113c:	4620      	mov	r0, r4
 801113e:	f7f1 f85b 	bl	80021f8 <_nx_ip_packet_deferred_receive>
 8011142:	9b09      	ldr	r3, [sp, #36]	; 0x24
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 8011144:	2b00      	cmp	r3, #0
 8011146:	d03c      	beq.n	80111c2 <_nx_ip_driver_packet_send+0x182>
 8011148:	6b69      	ldr	r1, [r5, #52]	; 0x34
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 801114a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801114c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801114e:	429a      	cmp	r2, r3
 8011150:	d911      	bls.n	8011176 <_nx_ip_driver_packet_send+0x136>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 8011152:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 8011156:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
 801115a:	d032      	beq.n	80111c2 <_nx_ip_driver_packet_send+0x182>
 801115c:	b38b      	cbz	r3, 80111c2 <_nx_ip_driver_packet_send+0x182>

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 801115e:	a802      	add	r0, sp, #8
 8011160:	4798      	blx	r3
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
    }
}
 8011162:	b00a      	add	sp, #40	; 0x28
 8011164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8011168:	694b      	ldr	r3, [r1, #20]
 801116a:	4293      	cmp	r3, r2
 801116c:	d0d8      	beq.n	8011120 <_nx_ip_driver_packet_send+0xe0>
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 801116e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011170:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011172:	429a      	cmp	r2, r3
 8011174:	d8ed      	bhi.n	8011152 <_nx_ip_driver_packet_send+0x112>
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8011176:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1f0      	bne.n	801115e <_nx_ip_driver_packet_send+0x11e>
 801117c:	f04f 30ff 	mov.w	r0, #4294967295
 8011180:	f00c f842 	bl	801d208 <_tx_thread_sleep>
 8011184:	f04f 30ff 	mov.w	r0, #4294967295
 8011188:	f00c f83e 	bl	801d208 <_tx_thread_sleep>
 801118c:	e7f6      	b.n	801117c <_nx_ip_driver_packet_send+0x13c>
             ((destination_ip & ~network_mask) == ~network_mask)))
 801118e:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 8011190:	4393      	bics	r3, r2
 8011192:	f47f af6f 	bne.w	8011074 <_nx_ip_driver_packet_send+0x34>
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8011196:	2004      	movs	r0, #4
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8011198:	f64f 72ff 	movw	r2, #65535	; 0xffff
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 801119c:	f04f 33ff 	mov.w	r3, #4294967295
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80111a0:	9002      	str	r0, [sp, #8]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80111a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80111a6:	e7d0      	b.n	801114a <_nx_ip_driver_packet_send+0x10a>
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 80111a8:	469c      	mov	ip, r3
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 80111aa:	e9dc 2309 	ldrd	r2, r3, [ip, #36]	; 0x24
 80111ae:	4313      	orrs	r3, r2
 80111b0:	d14e      	bne.n	8011250 <_nx_ip_driver_packet_send+0x210>
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80111b2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80111b4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d933      	bls.n	8011222 <_nx_ip_driver_packet_send+0x1e2>
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 80111ba:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
 80111be:	b103      	cbz	r3, 80111c2 <_nx_ip_driver_packet_send+0x182>
 80111c0:	b37e      	cbz	r6, 8011222 <_nx_ip_driver_packet_send+0x1e2>
                        _nx_packet_transmit_release(packet_ptr);
 80111c2:	4628      	mov	r0, r5
 80111c4:	f7f5 fc7a 	bl	8006abc <_nx_packet_transmit_release>
}
 80111c8:	b00a      	add	sp, #40	; 0x28
 80111ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 80111ce:	f8d4 37dc 	ldr.w	r3, [r4, #2012]	; 0x7dc
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d079      	beq.n	80112ca <_nx_ip_driver_packet_send+0x28a>
 80111d6:	f8d4 37f0 	ldr.w	r3, [r4, #2032]	; 0x7f0
 80111da:	429a      	cmp	r2, r3
 80111dc:	d073      	beq.n	80112c6 <_nx_ip_driver_packet_send+0x286>
 80111de:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d06d      	beq.n	80112c2 <_nx_ip_driver_packet_send+0x282>
 80111e6:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d067      	beq.n	80112be <_nx_ip_driver_packet_send+0x27e>
 80111ee:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d061      	beq.n	80112ba <_nx_ip_driver_packet_send+0x27a>
 80111f6:	f8d4 3840 	ldr.w	r3, [r4, #2112]	; 0x840
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d05b      	beq.n	80112b6 <_nx_ip_driver_packet_send+0x276>
 80111fe:	f8d4 3854 	ldr.w	r3, [r4, #2132]	; 0x854
 8011202:	4293      	cmp	r3, r2
 8011204:	d041      	beq.n	801128a <_nx_ip_driver_packet_send+0x24a>
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 8011206:	f3c2 0316 	ubfx	r3, r2, #0, #23
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 801120a:	f44f 7280 	mov.w	r2, #256	; 0x100
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 801120e:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8011212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011216:	e798      	b.n	801114a <_nx_ip_driver_packet_send+0x10a>
                _nx_ip_packet_checksum_compute(packet_copy);
 8011218:	4608      	mov	r0, r1
 801121a:	f000 fa9b 	bl	8011754 <_nx_ip_packet_checksum_compute>
 801121e:	9901      	ldr	r1, [sp, #4]
 8011220:	e78c      	b.n	801113c <_nx_ip_driver_packet_send+0xfc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011222:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011226:	b672      	cpsid	i
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8011228:	2300      	movs	r3, #0
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 801122a:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 801122e:	61eb      	str	r3, [r5, #28]
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 8011230:	b1d8      	cbz	r0, 801126a <_nx_ip_driver_packet_send+0x22a>
                        while (last_packet -> nx_packet_queue_next)
 8011232:	69c3      	ldr	r3, [r0, #28]
 8011234:	b1f3      	cbz	r3, 8011274 <_nx_ip_driver_packet_send+0x234>
                        queued_count = 1;
 8011236:	2401      	movs	r4, #1
 8011238:	e000      	b.n	801123c <_nx_ip_driver_packet_send+0x1fc>
 801123a:	460b      	mov	r3, r1
                        while (last_packet -> nx_packet_queue_next)
 801123c:	69d9      	ldr	r1, [r3, #28]
                            queued_count++;
 801123e:	3401      	adds	r4, #1
                        while (last_packet -> nx_packet_queue_next)
 8011240:	2900      	cmp	r1, #0
 8011242:	d1fa      	bne.n	801123a <_nx_ip_driver_packet_send+0x1fa>
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8011244:	2c03      	cmp	r4, #3
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 8011246:	61dd      	str	r5, [r3, #28]
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8011248:	d816      	bhi.n	8011278 <_nx_ip_driver_packet_send+0x238>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801124a:	f382 8810 	msr	PRIMASK, r2
 801124e:	e788      	b.n	8011162 <_nx_ip_driver_packet_send+0x122>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011250:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011254:	b672      	cpsid	i
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8011256:	e9dc 1209 	ldrd	r1, r2, [ip, #36]	; 0x24
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 801125a:	f8c8 cb78 	str.w	ip, [r8, #2936]	; 0xb78
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 801125e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011262:	f383 8810 	msr	PRIMASK, r3
 8011266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011268:	e76c      	b.n	8011144 <_nx_ip_driver_packet_send+0x104>
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 801126a:	f8cc 5030 	str.w	r5, [ip, #48]	; 0x30
 801126e:	f382 8810 	msr	PRIMASK, r2
 8011272:	e776      	b.n	8011162 <_nx_ip_driver_packet_send+0x122>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 8011274:	61c5      	str	r5, [r0, #28]
 8011276:	e7e8      	b.n	801124a <_nx_ip_driver_packet_send+0x20a>
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 8011278:	69c3      	ldr	r3, [r0, #28]
 801127a:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 801127e:	61c1      	str	r1, [r0, #28]
 8011280:	f382 8810 	msr	PRIMASK, r2
                            _nx_packet_transmit_release(remove_packet);
 8011284:	f7f5 fc1a 	bl	8006abc <_nx_packet_transmit_release>
 8011288:	e76b      	b.n	8011162 <_nx_ip_driver_packet_send+0x122>
                index++;
 801128a:	2306      	movs	r3, #6
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 801128c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8011290:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8011294:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8011298:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 801129c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 80112a0:	b922      	cbnz	r2, 80112ac <_nx_ip_driver_packet_send+0x26c>
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 80112a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80112aa:	e74e      	b.n	801114a <_nx_ip_driver_packet_send+0x10a>
 80112ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80112b4:	e736      	b.n	8011124 <_nx_ip_driver_packet_send+0xe4>
                index++;
 80112b6:	2305      	movs	r3, #5
 80112b8:	e7e8      	b.n	801128c <_nx_ip_driver_packet_send+0x24c>
 80112ba:	2304      	movs	r3, #4
 80112bc:	e7e6      	b.n	801128c <_nx_ip_driver_packet_send+0x24c>
 80112be:	2303      	movs	r3, #3
 80112c0:	e7e4      	b.n	801128c <_nx_ip_driver_packet_send+0x24c>
 80112c2:	2302      	movs	r3, #2
 80112c4:	e7e2      	b.n	801128c <_nx_ip_driver_packet_send+0x24c>
 80112c6:	2301      	movs	r3, #1
 80112c8:	e7e0      	b.n	801128c <_nx_ip_driver_packet_send+0x24c>
            index =  0;
 80112ca:	2300      	movs	r3, #0
 80112cc:	e7de      	b.n	801128c <_nx_ip_driver_packet_send+0x24c>
 80112ce:	bf00      	nop

080112d0 <_nx_ip_fast_periodic_timer_entry>:

    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_FAST_EVENT, TX_OR);
 80112d0:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 80112d4:	2200      	movs	r2, #0
 80112d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80112da:	f00b ba25 	b.w	801c728 <_tx_event_flags_set>
 80112de:	bf00      	nop

080112e0 <_nx_ip_fast_periodic_timer_create>:
VOID _nx_ip_fast_periodic_timer_create(NX_IP *ip_ptr)
{

ULONG _nx_ip_fast_timer_rate;

    if (ip_ptr -> nx_ip_fast_periodic_timer_created)
 80112e0:	f8d0 3b48 	ldr.w	r3, [r0, #2888]	; 0xb48
 80112e4:	b103      	cbz	r3, 80112e8 <_nx_ip_fast_periodic_timer_create+0x8>
 80112e6:	4770      	bx	lr
{
 80112e8:	b530      	push	{r4, r5, lr}

    _nx_ip_fast_timer_rate =  (NX_IP_PERIODIC_RATE + (NX_IP_FAST_TIMER_RATE - 1)) / NX_IP_FAST_TIMER_RATE;

    /* Create the fast TCP timer.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 80112ea:	220a      	movs	r2, #10
{
 80112ec:	b085      	sub	sp, #20
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 80112ee:	2501      	movs	r5, #1
 80112f0:	6841      	ldr	r1, [r0, #4]
 80112f2:	4604      	mov	r4, r0
 80112f4:	4603      	mov	r3, r0
 80112f6:	9200      	str	r2, [sp, #0]
 80112f8:	f600 304c 	addw	r0, r0, #2892	; 0xb4c
 80112fc:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8011300:	4a03      	ldr	r2, [pc, #12]	; (8011310 <_nx_ip_fast_periodic_timer_create+0x30>)
 8011302:	f00c f949 	bl	801d598 <_tx_timer_create>
                    _nx_ip_fast_timer_rate, _nx_ip_fast_timer_rate, TX_AUTO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr)

    /* Set the flag to indicate that the fast timer has been created. */
    ip_ptr -> nx_ip_fast_periodic_timer_created = 1;
 8011306:	f8c4 5b48 	str.w	r5, [r4, #2888]	; 0xb48
}
 801130a:	b005      	add	sp, #20
 801130c:	bd30      	pop	{r4, r5, pc}
 801130e:	bf00      	nop
 8011310:	080112d1 	.word	0x080112d1

08011314 <_nx_ip_gateway_address_clear>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_clear(NX_IP *ip_ptr)
{
 8011314:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be cleared.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8011316:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 801131a:	4605      	mov	r5, r0
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801131c:	f04f 31ff 	mov.w	r1, #4294967295
 8011320:	4630      	mov	r0, r6
 8011322:	f00b fbe9 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011326:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801132a:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Clear the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  0;
 801132c:	2400      	movs	r4, #0

    ip_ptr -> nx_ip_gateway_interface = NX_NULL;
 801132e:	e9c5 4402 	strd	r4, r4, [r5, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011332:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011336:	4630      	mov	r0, r6
 8011338:	f00b fcc8 	bl	801cccc <_tx_mutex_put>
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 801133c:	4620      	mov	r0, r4
 801133e:	bd70      	pop	{r4, r5, r6, pc}

08011340 <_nx_ip_gateway_address_get>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_get(NX_IP *ip_ptr, ULONG *ip_address)
{
 8011340:	b570      	push	{r4, r5, r6, lr}
    /* Initialize the return value to be NX_NOT_FOUND.  If the gateway address
       is set, the return value changes to NX_SUCCESS. */
    status = NX_NOT_FOUND;

    /* Obtain the IP internal mutex to get the Gateway IP address.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8011342:	f200 643c 	addw	r4, r0, #1596	; 0x63c
{
 8011346:	4605      	mov	r5, r0
 8011348:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801134a:	f04f 31ff 	mov.w	r1, #4294967295
 801134e:	4620      	mov	r0, r4
 8011350:	f00b fbd2 	bl	801caf8 <_tx_mutex_get>

    if (ip_ptr -> nx_ip_gateway_address)
 8011354:	68ab      	ldr	r3, [r5, #8]
 8011356:	b133      	cbz	r3, 8011366 <_nx_ip_gateway_address_get+0x26>
    {

        /* Setup the Gateway IP address.  */
        *ip_address = ip_ptr -> nx_ip_gateway_address;

        status = NX_SUCCESS;
 8011358:	2500      	movs	r5, #0
        *ip_address = ip_ptr -> nx_ip_gateway_address;
 801135a:	6033      	str	r3, [r6, #0]
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801135c:	4620      	mov	r0, r4
 801135e:	f00b fcb5 	bl	801cccc <_tx_mutex_put>
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8011362:	4628      	mov	r0, r5
 8011364:	bd70      	pop	{r4, r5, r6, pc}
    status = NX_NOT_FOUND;
 8011366:	254e      	movs	r5, #78	; 0x4e
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011368:	4620      	mov	r0, r4
 801136a:	f00b fcaf 	bl	801cccc <_tx_mutex_put>
}
 801136e:	4628      	mov	r0, r5
 8011370:	bd70      	pop	{r4, r5, r6, pc}
 8011372:	bf00      	nop

08011374 <_nx_ip_gateway_address_set>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_set(NX_IP *ip_ptr, ULONG ip_address)
{
 8011374:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, ip_address, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be setup.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8011376:	f200 643c 	addw	r4, r0, #1596	; 0x63c
{
 801137a:	4605      	mov	r5, r0
 801137c:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801137e:	f04f 31ff 	mov.w	r1, #4294967295
 8011382:	4620      	mov	r0, r4
 8011384:	f00b fbb8 	bl	801caf8 <_tx_mutex_get>
    /* Loop through all the interfaces to find the one for the input gateway address. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {

        /* Must be a valid interface. Match the network subnet of the interface and input address. */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8011388:	f895 3c4c 	ldrb.w	r3, [r5, #3148]	; 0xc4c
 801138c:	b923      	cbnz	r3, 8011398 <_nx_ip_gateway_address_set+0x24>
    /* Check if we found an interface. */
    if (ip_interface_ptr == NX_NULL)
    {

        /* None found. Unlock the mutex, and return the error status. */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801138e:	4620      	mov	r0, r4
 8011390:	f00b fc9c 	bl	801cccc <_tx_mutex_put>

        return(NX_IP_ADDRESS_ERROR);
 8011394:	2021      	movs	r0, #33	; 0x21
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8011396:	bd70      	pop	{r4, r5, r6, pc}
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 8011398:	f8d5 3c60 	ldr.w	r3, [r5, #3168]	; 0xc60
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 801139c:	f8d5 2c64 	ldr.w	r2, [r5, #3172]	; 0xc64
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 80113a0:	4033      	ands	r3, r6
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d1f3      	bne.n	801138e <_nx_ip_gateway_address_set+0x1a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80113a6:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80113aa:	b672      	cpsid	i
            ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80113ac:	f605 4248 	addw	r2, r5, #3144	; 0xc48
    ip_ptr -> nx_ip_gateway_interface = ip_interface_ptr;
 80113b0:	e9c5 6202 	strd	r6, r2, [r5, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80113b4:	f383 8810 	msr	PRIMASK, r3
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80113b8:	4620      	mov	r0, r4
 80113ba:	f00b fc87 	bl	801cccc <_tx_mutex_put>
    return(NX_SUCCESS);
 80113be:	2000      	movs	r0, #0
}
 80113c0:	bd70      	pop	{r4, r5, r6, pc}
 80113c2:	bf00      	nop

080113c4 <_nx_ip_header_add>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 80113c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113c8:	b085      	sub	sp, #20
        router_alert = 4;
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 80113ca:	688c      	ldr	r4, [r1, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 80113cc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 80113ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 80113d0:	f1a4 0714 	sub.w	r7, r4, #20
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 80113d4:	3514      	adds	r5, #20
{
 80113d6:	9603      	str	r6, [sp, #12]

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 80113d8:	690e      	ldr	r6, [r1, #16]
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 80113da:	608f      	str	r7, [r1, #8]
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 80113dc:	42b7      	cmp	r7, r6
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 80113de:	624d      	str	r5, [r1, #36]	; 0x24
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 80113e0:	d35a      	bcc.n	8011498 <_nx_ip_header_add+0xd4>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80113e2:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
                                                       sizeof(NX_IPV4_HEADER) + router_alert);

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 80113e6:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80113ea:	f10c 0c14 	add.w	ip, ip, #20
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 80113ee:	638f      	str	r7, [r1, #56]	; 0x38
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 80113f0:	f1be 0f01 	cmp.w	lr, #1
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80113f4:	f881 c032 	strb.w	ip, [r1, #50]	; 0x32
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 80113f8:	d04a      	beq.n	8011490 <_nx_ip_header_add+0xcc>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 80113fa:	b2ad      	uxth	r5, r5
 80113fc:	f043 438a 	orr.w	r3, r3, #1157627904	; 0x45000000

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8011400:	9f03      	ldr	r7, [sp, #12]
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8011402:	432b      	orrs	r3, r5
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8011404:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8011406:	f8d0 c634 	ldr.w	ip, [r0, #1588]	; 0x634
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 801140a:	ea83 4933 	eor.w	r9, r3, r3, ror #16
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 801140e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8011410:	ea47 6606 	orr.w	r6, r7, r6, lsl #24
    ip_header_ptr -> nx_ip_header_source_ip =  packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address;
 8011414:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8011416:	ea4f 2919 	mov.w	r9, r9, lsr #8
    ip_header_ptr -> nx_ip_header_source_ip =  packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address;
 801141a:	f8d7 e014 	ldr.w	lr, [r7, #20]
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 801141e:	ea45 480c 	orr.w	r8, r5, ip, lsl #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8011422:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8011426:	f10c 0501 	add.w	r5, ip, #1

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 801142a:	6c3f      	ldr	r7, [r7, #64]	; 0x40
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 801142c:	ea88 4c38 	eor.w	ip, r8, r8, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8011430:	ea89 2933 	eor.w	r9, r9, r3, ror #8
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8011434:	f8c0 5634 	str.w	r5, [r0, #1588]	; 0x634
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8011438:	ea82 4332 	eor.w	r3, r2, r2, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 801143c:	ea8e 453e 	eor.w	r5, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8011440:	f844 9c14 	str.w	r9, [r4, #-20]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8011444:	ea86 4036 	eor.w	r0, r6, r6, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8011448:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 801144a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 801144e:	0a2d      	lsrs	r5, r5, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8011450:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8011454:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8011456:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 801145a:	ea83 2332 	eor.w	r3, r3, r2, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 801145e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8011462:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8011466:	ea8c 2c38 	eor.w	ip, ip, r8, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 801146a:	ea85 253e 	eor.w	r5, r5, lr, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 801146e:	f844 3c04 	str.w	r3, [r4, #-4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8011472:	ea80 2036 	eor.w	r0, r0, r6, ror #8
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8011476:	f017 0301 	ands.w	r3, r7, #1
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 801147a:	f844 cc10 	str.w	ip, [r4, #-16]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 801147e:	f844 5c08 	str.w	r5, [r4, #-8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8011482:	f844 0c0c 	str.w	r0, [r4, #-12]
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8011486:	d010      	beq.n	80114aa <_nx_ip_header_add+0xe6>
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 8011488:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801148a:	f043 0301 	orr.w	r3, r3, #1
 801148e:	63cb      	str	r3, [r1, #60]	; 0x3c
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
}
 8011490:	2000      	movs	r0, #0
 8011492:	b005      	add	sp, #20
 8011494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8011498:	f04f 30ff 	mov.w	r0, #4294967295
 801149c:	f00b feb4 	bl	801d208 <_tx_thread_sleep>
 80114a0:	f04f 30ff 	mov.w	r0, #4294967295
 80114a4:	f00b feb0 	bl	801d208 <_tx_thread_sleep>
 80114a8:	e7f6      	b.n	8011498 <_nx_ip_header_add+0xd4>
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	4608      	mov	r0, r1
 80114ae:	2214      	movs	r2, #20
 80114b0:	2104      	movs	r1, #4
 80114b2:	f7f0 fd17 	bl	8001ee4 <_nx_ip_checksum_compute>
        val = val & NX_LOWER_16_MASK;
 80114b6:	43c2      	mvns	r2, r0
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 80114b8:	f854 1c0c 	ldr.w	r1, [r4, #-12]
        val = val & NX_LOWER_16_MASK;
 80114bc:	b292      	uxth	r2, r2
        NX_CHANGE_ULONG_ENDIAN(val);
 80114be:	ea42 4332 	orr.w	r3, r2, r2, ror #16
 80114c2:	0a1b      	lsrs	r3, r3, #8
 80114c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80114c8:	ea83 2332 	eor.w	r3, r3, r2, ror #8
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 80114cc:	430b      	orrs	r3, r1
 80114ce:	f844 3c0c 	str.w	r3, [r4, #-12]
 80114d2:	e7dd      	b.n	8011490 <_nx_ip_header_add+0xcc>

080114d4 <_nx_ip_interface_address_get>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_get(NX_IP *ip_ptr, UINT interface_index, ULONG *ip_address, ULONG *network_mask)
{
 80114d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                            ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);



    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80114d8:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 80114dc:	4604      	mov	r4, r0
 80114de:	460d      	mov	r5, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80114e0:	f04f 31ff 	mov.w	r1, #4294967295
 80114e4:	4630      	mov	r0, r6
{
 80114e6:	4690      	mov	r8, r2
 80114e8:	461f      	mov	r7, r3
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80114ea:	f00b fb05 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80114ee:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80114f2:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE


    /* Pickup the IP address and the network mask. */
    *ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 80114f4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80114f8:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80114fc:	f8d4 3c5c 	ldr.w	r3, [r4, #3164]	; 0xc5c
 8011500:	f8c8 3000 	str.w	r3, [r8]
    *network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 8011504:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
 8011508:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801150a:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801150e:	4630      	mov	r0, r6
 8011510:	f00b fbdc 	bl	801cccc <_tx_mutex_put>
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8011514:	2000      	movs	r0, #0
 8011516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801151a:	bf00      	nop

0801151c <_nx_ip_interface_address_set>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_set(NX_IP *ip_ptr, UINT interface_index, ULONG ip_address, ULONG network_mask)
{
 801151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_SET, ip_ptr, ip_address, network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8011520:	f200 6a3c 	addw	sl, r0, #1596	; 0x63c
{
 8011524:	b083      	sub	sp, #12
 8011526:	4604      	mov	r4, r0
 8011528:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801152a:	4650      	mov	r0, sl
 801152c:	f04f 31ff 	mov.w	r1, #4294967295
{
 8011530:	4617      	mov	r7, r2
 8011532:	4698      	mov	r8, r3
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8011534:	f00b fae0 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011538:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801153c:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Save previous IP address and network mask.  */
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 801153e:	00b5      	lsls	r5, r6, #2
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;

    /* Setup the IP address and the network mask. */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 8011540:	ea07 0308 	and.w	r3, r7, r8
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 8011544:	f8d4 27d8 	ldr.w	r2, [r4, #2008]	; 0x7d8

    /* Ensure the RARP function is disabled.  */
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 8011548:	2000      	movs	r0, #0
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 801154a:	19a9      	adds	r1, r5, r6
    address_change_notify =  ip_ptr -> nx_ip_address_change_notify;
 801154c:	f8d4 b7d4 	ldr.w	fp, [r4, #2004]	; 0x7d4
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 8011550:	9200      	str	r2, [sp, #0]
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8011552:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 8011556:	f8c1 3c64 	str.w	r3, [r1, #3172]	; 0xc64
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 801155a:	f8d1 3c60 	ldr.w	r3, [r1, #3168]	; 0xc60
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 801155e:	f8d1 9c5c 	ldr.w	r9, [r1, #3164]	; 0xc5c
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
 8011562:	f8c1 8c60 	str.w	r8, [r1, #3168]	; 0xc60
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
 8011566:	f8c1 7c5c 	str.w	r7, [r1, #3164]	; 0xc5c
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 801156a:	9301      	str	r3, [sp, #4]
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 801156c:	f8c4 0c28 	str.w	r0, [r4, #3112]	; 0xc28
    ip_ptr -> nx_ip_rarp_queue_process =    NX_NULL;
 8011570:	f8c4 0c2c 	str.w	r0, [r4, #3116]	; 0xc2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011574:	f38c 8810 	msr	PRIMASK, ip

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011578:	4650      	mov	r0, sl
 801157a:	f00b fba7 	bl	801cccc <_tx_mutex_put>

    /* Determine if the application should be notified of the IP address and/or
       network mask change.  */
    if ((address_change_notify) &&
 801157e:	f1bb 0f00 	cmp.w	fp, #0
 8011582:	d007      	beq.n	8011594 <_nx_ip_interface_address_set+0x78>
 8011584:	45b9      	cmp	r9, r7
 8011586:	d102      	bne.n	801158e <_nx_ip_interface_address_set+0x72>
 8011588:	9b01      	ldr	r3, [sp, #4]
 801158a:	4543      	cmp	r3, r8
 801158c:	d002      	beq.n	8011594 <_nx_ip_interface_address_set+0x78>
        ((ip_address != previous_ip_address) || (network_mask != previous_network_mask)))
    {

        /* Yes, call the application's IP address change notify function.  */
        (address_change_notify)(ip_ptr, additional_info);
 801158e:	9900      	ldr	r1, [sp, #0]
 8011590:	4620      	mov	r0, r4
 8011592:	47d8      	blx	fp
    }

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 8011594:	2300      	movs	r3, #0
 8011596:	4435      	add	r5, r6
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8011598:	4618      	mov	r0, r3
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 801159a:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 801159e:	f8c4 3c8c 	str.w	r3, [r4, #3212]	; 0xc8c
}
 80115a2:	b003      	add	sp, #12
 80115a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115a8 <_nx_ip_interface_status_check>:

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
            driver_request.nx_ip_driver_return_ptr =  &return_value;
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80115a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
{
 80115ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80115b0:	010e      	lsls	r6, r1, #4
{
 80115b2:	b095      	sub	sp, #84	; 0x54
 80115b4:	4617      	mov	r7, r2
        if (needed_status & NX_IP_INITIALIZE_DONE)
 80115b6:	f002 0801 	and.w	r8, r2, #1
{
 80115ba:	9309      	str	r3, [sp, #36]	; 0x24
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80115bc:	f606 4348 	addw	r3, r6, #3144	; 0xc48
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 80115c0:	f002 0b02 	and.w	fp, r2, #2
        if (needed_status & NX_IP_ARP_ENABLED)
 80115c4:	f002 0a08 	and.w	sl, r2, #8
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80115c8:	18c3      	adds	r3, r0, r3
        if (needed_status & NX_IP_RARP_COMPLETE)
 80115ca:	f002 0280 	and.w	r2, r2, #128	; 0x80
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_TCP_ENABLED;
            }
        }

        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 80115ce:	4644      	mov	r4, r8
{
 80115d0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80115d2:	9307      	str	r3, [sp, #28]
        if (needed_status & NX_IP_IGMP_ENABLED)
 80115d4:	f007 0340 	and.w	r3, r7, #64	; 0x40
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 80115d8:	4406      	add	r6, r0
        if (needed_status & NX_IP_RARP_COMPLETE)
 80115da:	9201      	str	r2, [sp, #4]
        if (needed_status & NX_IP_IGMP_ENABLED)
 80115dc:	9302      	str	r3, [sp, #8]
        if (needed_status & NX_IP_LINK_ENABLED)
 80115de:	f007 0304 	and.w	r3, r7, #4
        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 80115e2:	4680      	mov	r8, r0
        if (needed_status & NX_IP_LINK_ENABLED)
 80115e4:	9303      	str	r3, [sp, #12]
        if (needed_status &  NX_IP_UDP_ENABLED)
 80115e6:	f007 0310 	and.w	r3, r7, #16
 80115ea:	9304      	str	r3, [sp, #16]
        if (needed_status & NX_IP_TCP_ENABLED)
 80115ec:	f007 0320 	and.w	r3, r7, #32
 80115f0:	9305      	str	r3, [sp, #20]
        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 80115f2:	f407 7380 	and.w	r3, r7, #256	; 0x100
 80115f6:	9306      	str	r3, [sp, #24]
 80115f8:	463b      	mov	r3, r7
 80115fa:	465f      	mov	r7, fp
 80115fc:	469b      	mov	fp, r3
        if (needed_status & NX_IP_INITIALIZE_DONE)
 80115fe:	2c00      	cmp	r4, #0
 8011600:	d043      	beq.n	801168a <_nx_ip_interface_status_check+0xe2>
            if (ip_ptr -> nx_ip_initialize_done)
 8011602:	f8d8 2670 	ldr.w	r2, [r8, #1648]	; 0x670
 8011606:	f112 0900 	adds.w	r9, r2, #0
 801160a:	bf18      	it	ne
 801160c:	f04f 0901 	movne.w	r9, #1
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 8011610:	b127      	cbz	r7, 801161c <_nx_ip_interface_status_check+0x74>
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8011612:	f8d6 2c5c 	ldr.w	r2, [r6, #3164]	; 0xc5c
 8011616:	b10a      	cbz	r2, 801161c <_nx_ip_interface_status_check+0x74>
                current_status =  current_status | NX_IP_ADDRESS_RESOLVED;
 8011618:	f049 0902 	orr.w	r9, r9, #2
        if (needed_status & NX_IP_ARP_ENABLED)
 801161c:	f1ba 0f00 	cmp.w	sl, #0
 8011620:	d004      	beq.n	801162c <_nx_ip_interface_status_check+0x84>
            if (ip_ptr -> nx_ip_arp_periodic_update)
 8011622:	f8d8 2c10 	ldr.w	r2, [r8, #3088]	; 0xc10
 8011626:	b10a      	cbz	r2, 801162c <_nx_ip_interface_status_check+0x84>
                current_status =  current_status | NX_IP_ARP_ENABLED;
 8011628:	f049 0908 	orr.w	r9, r9, #8
        if (needed_status & NX_IP_RARP_COMPLETE)
 801162c:	9b01      	ldr	r3, [sp, #4]
 801162e:	b123      	cbz	r3, 801163a <_nx_ip_interface_status_check+0x92>
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8011630:	f8d6 2c5c 	ldr.w	r2, [r6, #3164]	; 0xc5c
 8011634:	b10a      	cbz	r2, 801163a <_nx_ip_interface_status_check+0x92>
                current_status =  current_status | NX_IP_RARP_COMPLETE;
 8011636:	f049 0980 	orr.w	r9, r9, #128	; 0x80
        if (needed_status & NX_IP_IGMP_ENABLED)
 801163a:	9b02      	ldr	r3, [sp, #8]
 801163c:	b123      	cbz	r3, 8011648 <_nx_ip_interface_status_check+0xa0>
            if (ip_ptr -> nx_ip_igmp_packet_receive)
 801163e:	f8d8 286c 	ldr.w	r2, [r8, #2156]	; 0x86c
 8011642:	b10a      	cbz	r2, 8011648 <_nx_ip_interface_status_check+0xa0>
                current_status =  current_status | NX_IP_IGMP_ENABLED;
 8011644:	f049 0940 	orr.w	r9, r9, #64	; 0x40
        if (needed_status & NX_IP_LINK_ENABLED)
 8011648:	9b03      	ldr	r3, [sp, #12]
 801164a:	bb03      	cbnz	r3, 801168e <_nx_ip_interface_status_check+0xe6>
        if (needed_status &  NX_IP_UDP_ENABLED)
 801164c:	9b04      	ldr	r3, [sp, #16]
 801164e:	b123      	cbz	r3, 801165a <_nx_ip_interface_status_check+0xb2>
            if (ip_ptr -> nx_ip_udp_packet_receive)
 8011650:	f8d8 2930 	ldr.w	r2, [r8, #2352]	; 0x930
 8011654:	b10a      	cbz	r2, 801165a <_nx_ip_interface_status_check+0xb2>
                current_status =  current_status | NX_IP_UDP_ENABLED;
 8011656:	f049 0910 	orr.w	r9, r9, #16
        if (needed_status & NX_IP_TCP_ENABLED)
 801165a:	9b05      	ldr	r3, [sp, #20]
 801165c:	b123      	cbz	r3, 8011668 <_nx_ip_interface_status_check+0xc0>
            if (ip_ptr -> nx_ip_tcp_packet_receive)
 801165e:	f8d8 29bc 	ldr.w	r2, [r8, #2492]	; 0x9bc
 8011662:	b10a      	cbz	r2, 8011668 <_nx_ip_interface_status_check+0xc0>
                current_status =  current_status | NX_IP_TCP_ENABLED;
 8011664:	f049 0920 	orr.w	r9, r9, #32
        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8011668:	9b06      	ldr	r3, [sp, #24]
 801166a:	bb6b      	cbnz	r3, 80116c8 <_nx_ip_interface_status_check+0x120>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
        }

        /* Determine if current status is the same.  If so, break out
           of this polling loop.  */
        if (current_status == needed_status)
 801166c:	45d9      	cmp	r9, fp
 801166e:	d049      	beq.n	8011704 <_nx_ip_interface_status_check+0x15c>
        {
            break;
        }

        /* Check for suspension request.  */
        if (wait_option)
 8011670:	2d00      	cmp	r5, #0
 8011672:	d05a      	beq.n	801172a <_nx_ip_interface_status_check+0x182>
        {

            /* Decrease the wait time and sleep.  */
            if (wait_option > NX_IP_STATUS_CHECK_WAIT_TIME)
 8011674:	2d01      	cmp	r5, #1
            {
                wait_option = 0;
            }

            /* Sleep for a tick and check again.  */
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 8011676:	f04f 0001 	mov.w	r0, #1
                wait_option -= NX_IP_STATUS_CHECK_WAIT_TIME;
 801167a:	bf8c      	ite	hi
 801167c:	f105 35ff 	addhi.w	r5, r5, #4294967295
                wait_option = 0;
 8011680:	2500      	movls	r5, #0
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 8011682:	f00b fdc1 	bl	801d208 <_tx_thread_sleep>
        if (needed_status & NX_IP_INITIALIZE_DONE)
 8011686:	2c00      	cmp	r4, #0
 8011688:	d1bb      	bne.n	8011602 <_nx_ip_interface_status_check+0x5a>
        current_status =  0;
 801168a:	46a1      	mov	r9, r4
 801168c:	e7c0      	b.n	8011610 <_nx_ip_interface_status_check+0x68>
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801168e:	f208 623c 	addw	r2, r8, #1596	; 0x63c
 8011692:	f04f 31ff 	mov.w	r1, #4294967295
 8011696:	4610      	mov	r0, r2
 8011698:	9208      	str	r2, [sp, #32]
 801169a:	f00b fa2d 	bl	801caf8 <_tx_mutex_get>
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 801169e:	9a07      	ldr	r2, [sp, #28]
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 80116a0:	230a      	movs	r3, #10
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 80116a2:	a90b      	add	r1, sp, #44	; 0x2c
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80116a4:	9213      	str	r2, [sp, #76]	; 0x4c
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80116a6:	a80c      	add	r0, sp, #48	; 0x30
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 80116a8:	9111      	str	r1, [sp, #68]	; 0x44
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 80116aa:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80116ae:	f8d6 1c84 	ldr.w	r1, [r6, #3204]	; 0xc84
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 80116b2:	930c      	str	r3, [sp, #48]	; 0x30
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80116b4:	4788      	blx	r1
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 80116b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80116b8:	9a08      	ldr	r2, [sp, #32]
 80116ba:	b351      	cbz	r1, 8011712 <_nx_ip_interface_status_check+0x16a>
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 80116bc:	2944      	cmp	r1, #68	; 0x44
 80116be:	d042      	beq.n	8011746 <_nx_ip_interface_status_check+0x19e>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80116c0:	4610      	mov	r0, r2
 80116c2:	f00b fb03 	bl	801cccc <_tx_mutex_put>
 80116c6:	e7c1      	b.n	801164c <_nx_ip_interface_status_check+0xa4>
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80116c8:	f208 623c 	addw	r2, r8, #1596	; 0x63c
 80116cc:	f04f 31ff 	mov.w	r1, #4294967295
 80116d0:	4610      	mov	r0, r2
 80116d2:	9208      	str	r2, [sp, #32]
 80116d4:	f00b fa10 	bl	801caf8 <_tx_mutex_get>
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80116d8:	9a07      	ldr	r2, [sp, #28]
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 80116da:	230a      	movs	r3, #10
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 80116dc:	a90b      	add	r1, sp, #44	; 0x2c
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80116de:	9213      	str	r2, [sp, #76]	; 0x4c
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80116e0:	a80c      	add	r0, sp, #48	; 0x30
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 80116e2:	9111      	str	r1, [sp, #68]	; 0x44
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 80116e4:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80116e8:	f8d6 1c84 	ldr.w	r1, [r6, #3204]	; 0xc84
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 80116ec:	930c      	str	r3, [sp, #48]	; 0x30
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80116ee:	4788      	blx	r1
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 80116f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80116f2:	9a08      	ldr	r2, [sp, #32]
 80116f4:	b199      	cbz	r1, 801171e <_nx_ip_interface_status_check+0x176>
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 80116f6:	2944      	cmp	r1, #68	; 0x44
 80116f8:	d01e      	beq.n	8011738 <_nx_ip_interface_status_check+0x190>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80116fa:	4610      	mov	r0, r2
 80116fc:	f00b fae6 	bl	801cccc <_tx_mutex_put>
        if (current_status == needed_status)
 8011700:	45d9      	cmp	r9, fp
 8011702:	d1b5      	bne.n	8011670 <_nx_ip_interface_status_check+0xc8>
    /* Determine what status to return.  */
    if (needed_status == current_status)
    {

        /* Return a success.  */
        return(NX_SUCCESS);
 8011704:	2000      	movs	r0, #0
    *actual_status =  current_status;
 8011706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011708:	f8c3 9000 	str.w	r9, [r3]
    {

        /* Return an error.  */
        return(NX_NOT_SUCCESSFUL);
    }
}
 801170c:	b015      	add	sp, #84	; 0x54
 801170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (return_value == NX_TRUE)
 8011712:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011714:	2901      	cmp	r1, #1
 8011716:	d1d3      	bne.n	80116c0 <_nx_ip_interface_status_check+0x118>
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 8011718:	f049 0904 	orr.w	r9, r9, #4
 801171c:	e7d0      	b.n	80116c0 <_nx_ip_interface_status_check+0x118>
                if (return_value == NX_TRUE)
 801171e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011720:	2901      	cmp	r1, #1
 8011722:	d1ea      	bne.n	80116fa <_nx_ip_interface_status_check+0x152>
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8011724:	f449 7980 	orr.w	r9, r9, #256	; 0x100
 8011728:	e7e7      	b.n	80116fa <_nx_ip_interface_status_check+0x152>
    *actual_status =  current_status;
 801172a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        return(NX_NOT_SUCCESSFUL);
 801172c:	2043      	movs	r0, #67	; 0x43
    *actual_status =  current_status;
 801172e:	f8c3 9000 	str.w	r9, [r3]
}
 8011732:	b015      	add	sp, #84	; 0x54
 8011734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8011738:	f896 1c4e 	ldrb.w	r1, [r6, #3150]	; 0xc4e
 801173c:	2900      	cmp	r1, #0
 801173e:	d0dc      	beq.n	80116fa <_nx_ip_interface_status_check+0x152>
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8011740:	f449 7980 	orr.w	r9, r9, #256	; 0x100
 8011744:	e7d9      	b.n	80116fa <_nx_ip_interface_status_check+0x152>
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8011746:	f896 1c4e 	ldrb.w	r1, [r6, #3150]	; 0xc4e
 801174a:	2900      	cmp	r1, #0
 801174c:	d0b8      	beq.n	80116c0 <_nx_ip_interface_status_check+0x118>
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 801174e:	f049 0904 	orr.w	r9, r9, #4
 8011752:	e7b5      	b.n	80116c0 <_nx_ip_interface_status_check+0x118>

08011754 <_nx_ip_packet_checksum_compute>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 8011754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
NX_IPV6_HEADER   *ipv6_header_ptr;
#endif

    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011758:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
ULONG             data_length = 0;
 801175c:	2200      	movs	r2, #0
{
 801175e:	b08a      	sub	sp, #40	; 0x28
 8011760:	4604      	mov	r4, r0
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 8011762:	2b04      	cmp	r3, #4

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8011764:	4615      	mov	r5, r2
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 8011766:	6886      	ldr	r6, [r0, #8]
        next_protocol = NX_PROTOCOL_IPV4;
 8011768:	bf14      	ite	ne
 801176a:	2329      	movne	r3, #41	; 0x29
 801176c:	2304      	moveq	r3, #4
        switch (next_protocol)
 801176e:	3b01      	subs	r3, #1
 8011770:	2b39      	cmp	r3, #57	; 0x39
 8011772:	d83f      	bhi.n	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
 8011774:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011778:	00d600b3 	.word	0x00d600b3
 801177c:	0081003e 	.word	0x0081003e
 8011780:	010f003e 	.word	0x010f003e
 8011784:	003e003e 	.word	0x003e003e
 8011788:	003e003e 	.word	0x003e003e
 801178c:	003e003e 	.word	0x003e003e
 8011790:	003e003e 	.word	0x003e003e
 8011794:	003e003e 	.word	0x003e003e
 8011798:	003e005b 	.word	0x003e005b
 801179c:	003e003e 	.word	0x003e003e
 80117a0:	003e003e 	.word	0x003e003e
 80117a4:	003e003e 	.word	0x003e003e
 80117a8:	003e003e 	.word	0x003e003e
 80117ac:	003e003e 	.word	0x003e003e
 80117b0:	003e003e 	.word	0x003e003e
 80117b4:	003e003e 	.word	0x003e003e
 80117b8:	003e003e 	.word	0x003e003e
 80117bc:	003e003e 	.word	0x003e003e
 80117c0:	003e003e 	.word	0x003e003e
 80117c4:	003e003e 	.word	0x003e003e
 80117c8:	003e0042 	.word	0x003e0042
 80117cc:	003e003e 	.word	0x003e003e
 80117d0:	003e003e 	.word	0x003e003e
 80117d4:	003e003e 	.word	0x003e003e
 80117d8:	003e003e 	.word	0x003e003e
 80117dc:	003e003e 	.word	0x003e003e
 80117e0:	003e003e 	.word	0x003e003e
 80117e4:	003e003e 	.word	0x003e003e
 80117e8:	003a003e 	.word	0x003a003e
#ifdef FEATURE_NX_IPV6
        case NX_PROTOCOL_ICMPV6:
        {

            /* Check if ICMPv6 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 80117ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80117ee:	059b      	lsls	r3, r3, #22
 80117f0:	f100 80f5 	bmi.w	80119de <_nx_ip_packet_checksum_compute+0x28a>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 80117f4:	60a6      	str	r6, [r4, #8]
    return;
}
 80117f6:	b00a      	add	sp, #40	; 0x28
 80117f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ipv6_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80117fc:	68a7      	ldr	r7, [r4, #8]
            COPY_IPV6_ADDRESS(ipv6_header_ptr -> nx_ip_header_source_ip, ip_src_addr);
 80117fe:	a902      	add	r1, sp, #8
 8011800:	f107 0008 	add.w	r0, r7, #8
 8011804:	f7f4 fe62 	bl	80064cc <COPY_IPV6_ADDRESS>
            COPY_IPV6_ADDRESS(ipv6_header_ptr -> nx_ip_header_destination_ip, ip_dst_addr);
 8011808:	a906      	add	r1, sp, #24
 801180a:	f107 0018 	add.w	r0, r7, #24
 801180e:	f7f4 fe5d 	bl	80064cc <COPY_IPV6_ADDRESS>
            NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_src_addr);
 8011812:	a802      	add	r0, sp, #8
 8011814:	f7f4 ff10 	bl	8006638 <_nx_ipv6_address_change_endian>
            NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_dst_addr);
 8011818:	a806      	add	r0, sp, #24
 801181a:	f7f4 ff0d 	bl	8006638 <_nx_ipv6_address_change_endian>
            packet_ptr -> nx_packet_prepend_ptr += (ULONG)sizeof(NX_IPV6_HEADER);
 801181e:	68a3      	ldr	r3, [r4, #8]
            data_length = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER);
 8011820:	6a62      	ldr	r2, [r4, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr += (ULONG)sizeof(NX_IPV6_HEADER);
 8011822:	f103 0128 	add.w	r1, r3, #40	; 0x28
            next_protocol = (val >> 8) & 0xFF;
 8011826:	79bb      	ldrb	r3, [r7, #6]
            data_length = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER);
 8011828:	3a28      	subs	r2, #40	; 0x28
            packet_ptr -> nx_packet_prepend_ptr += (ULONG)sizeof(NX_IPV6_HEADER);
 801182a:	60a1      	str	r1, [r4, #8]
 801182c:	e79f      	b.n	801176e <_nx_ip_packet_checksum_compute+0x1a>
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 801182e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011830:	06d8      	lsls	r0, r3, #27
 8011832:	d5df      	bpl.n	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 8011834:	a806      	add	r0, sp, #24
 8011836:	ab02      	add	r3, sp, #8
 8011838:	2111      	movs	r1, #17
 801183a:	9000      	str	r0, [sp, #0]
 801183c:	4620      	mov	r0, r4
 801183e:	f7f0 fb51 	bl	8001ee4 <_nx_ip_checksum_compute>
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8011842:	68a1      	ldr	r1, [r4, #8]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8011844:	43c3      	mvns	r3, r0
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8011846:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8011848:	684d      	ldr	r5, [r1, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 801184a:	b29b      	uxth	r3, r3
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 801184c:	f020 0010 	bic.w	r0, r0, #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8011850:	ea85 4235 	eor.w	r2, r5, r5, ror #16
 8011854:	0a12      	lsrs	r2, r2, #8
 8011856:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801185a:	ea82 2235 	eor.w	r2, r2, r5, ror #8
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 801185e:	431a      	orrs	r2, r3
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8011860:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 8011864:	0a1b      	lsrs	r3, r3, #8
 8011866:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801186a:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 801186e:	604b      	str	r3, [r1, #4]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8011870:	63e0      	str	r0, [r4, #60]	; 0x3c
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 8011872:	60a6      	str	r6, [r4, #8]
}
 8011874:	b00a      	add	sp, #40	; 0x28
 8011876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 801187a:	f8d4 8008 	ldr.w	r8, [r4, #8]
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 801187e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8011880:	f898 2000 	ldrb.w	r2, [r8]
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8011884:	4641      	mov	r1, r8
 8011886:	07db      	lsls	r3, r3, #31
 8011888:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801188c:	f002 073c 	and.w	r7, r2, #60	; 0x3c
 8011890:	f100 80b5 	bmi.w	80119fe <_nx_ip_packet_checksum_compute+0x2aa>
 8011894:	f8d8 0008 	ldr.w	r0, [r8, #8]
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 8011898:	f8d8 e00c 	ldr.w	lr, [r8, #12]
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 801189c:	19ca      	adds	r2, r1, r7
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 801189e:	f8d8 c010 	ldr.w	ip, [r8, #16]
            NX_CHANGE_ULONG_ENDIAN(val);
 80118a2:	ea80 4330 	eor.w	r3, r0, r0, ror #16
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 80118a6:	ea8e 483e 	eor.w	r8, lr, lr, ror #16
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 80118aa:	60a2      	str	r2, [r4, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 80118ac:	ea8c 413c 	eor.w	r1, ip, ip, ror #16
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 80118b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 80118b2:	ea4f 2818 	mov.w	r8, r8, lsr #8
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 80118b6:	0a09      	lsrs	r1, r1, #8
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 80118b8:	1bd2      	subs	r2, r2, r7
            NX_CHANGE_ULONG_ENDIAN(val);
 80118ba:	0a1b      	lsrs	r3, r3, #8
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 80118bc:	f008 17ff 	and.w	r7, r8, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 80118c0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(val);
 80118c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 80118c8:	ea87 273e 	eor.w	r7, r7, lr, ror #8
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 80118cc:	ea81 213c 	eor.w	r1, r1, ip, ror #8
            NX_CHANGE_ULONG_ENDIAN(val);
 80118d0:	ea83 2330 	eor.w	r3, r3, r0, ror #8
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 80118d4:	9702      	str	r7, [sp, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 80118d6:	9106      	str	r1, [sp, #24]
            next_protocol = (val >> 16) & 0xFF;
 80118d8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80118dc:	e747      	b.n	801176e <_nx_ip_packet_checksum_compute+0x1a>
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 80118de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80118e0:	0659      	lsls	r1, r3, #25
 80118e2:	d587      	bpl.n	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 80118e4:	2300      	movs	r3, #0
 80118e6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80118ea:	4620      	mov	r0, r4
 80118ec:	9300      	str	r3, [sp, #0]
 80118ee:	f7f0 faf9 	bl	8001ee4 <_nx_ip_checksum_compute>
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80118f2:	68a1      	ldr	r1, [r4, #8]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 80118f4:	43c3      	mvns	r3, r0
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 80118f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 80118f8:	680d      	ldr	r5, [r1, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 80118fa:	b29b      	uxth	r3, r3
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 80118fc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8011900:	ea85 4235 	eor.w	r2, r5, r5, ror #16
 8011904:	0a12      	lsrs	r2, r2, #8
 8011906:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801190a:	ea82 2235 	eor.w	r2, r2, r5, ror #8
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 801190e:	431a      	orrs	r2, r3
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8011910:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 8011914:	0a1b      	lsrs	r3, r3, #8
 8011916:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801191a:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 801191e:	600b      	str	r3, [r1, #0]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 8011920:	63e0      	str	r0, [r4, #60]	; 0x3c
 8011922:	e767      	b.n	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 8011924:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011926:	0542      	lsls	r2, r0, #21
 8011928:	f57f af64 	bpl.w	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 801192c:	68a5      	ldr	r5, [r4, #8]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 801192e:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8011932:	e9d5 1700 	ldrd	r1, r7, [r5]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8011936:	ea81 4331 	eor.w	r3, r1, r1, ror #16
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 801193a:	ea87 4237 	eor.w	r2, r7, r7, ror #16
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 801193e:	0a1b      	lsrs	r3, r3, #8
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8011940:	0a12      	lsrs	r2, r2, #8
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8011942:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8011946:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 801194a:	ea83 2131 	eor.w	r1, r3, r1, ror #8
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 801194e:	ea82 2237 	eor.w	r2, r2, r7, ror #8
                checksum += (val & NX_LOWER_16_MASK);
 8011952:	b28b      	uxth	r3, r1
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8011954:	ea82 4732 	eor.w	r7, r2, r2, ror #16
                checksum += (val & NX_LOWER_16_MASK);
 8011958:	eb03 4311 	add.w	r3, r3, r1, lsr #16
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 801195c:	0a3f      	lsrs	r7, r7, #8
                checksum += (val >> NX_SHIFT_BY_16);
 801195e:	eb03 4312 	add.w	r3, r3, r2, lsr #16
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8011962:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
                checksum += (val & NX_LOWER_16_MASK);
 8011966:	fa13 f382 	uxtah	r3, r3, r2
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 801196a:	ea87 2232 	eor.w	r2, r7, r2, ror #8
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 801196e:	b29f      	uxth	r7, r3
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8011970:	606a      	str	r2, [r5, #4]
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8011972:	eb07 4213 	add.w	r2, r7, r3, lsr #16
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8011976:	b293      	uxth	r3, r2
 8011978:	eb03 4312 	add.w	r3, r3, r2, lsr #16
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 801197c:	43db      	mvns	r3, r3
 801197e:	b29b      	uxth	r3, r3
 8011980:	430b      	orrs	r3, r1
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8011982:	ea83 4233 	eor.w	r2, r3, r3, ror #16
 8011986:	0a12      	lsrs	r2, r2, #8
 8011988:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801198c:	ea82 2333 	eor.w	r3, r2, r3, ror #8
 8011990:	602b      	str	r3, [r5, #0]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 8011992:	63e0      	str	r0, [r4, #60]	; 0x3c
 8011994:	e72e      	b.n	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8011996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011998:	075d      	lsls	r5, r3, #29
 801199a:	f57f af2b 	bpl.w	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 801199e:	a806      	add	r0, sp, #24
 80119a0:	ab02      	add	r3, sp, #8
 80119a2:	2106      	movs	r1, #6
 80119a4:	9000      	str	r0, [sp, #0]
 80119a6:	4620      	mov	r0, r4
 80119a8:	f7f0 fa9c 	bl	8001ee4 <_nx_ip_checksum_compute>
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80119ac:	68a1      	ldr	r1, [r4, #8]
                checksum = ~checksum & NX_LOWER_16_MASK;
 80119ae:	43c5      	mvns	r5, r0
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 80119b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 80119b2:	6908      	ldr	r0, [r1, #16]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 80119b4:	f022 0204 	bic.w	r2, r2, #4
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 80119b8:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 80119bc:	0a1b      	lsrs	r3, r3, #8
 80119be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80119c2:	ea83 2330 	eor.w	r3, r3, r0, ror #8
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 80119c6:	ea43 4005 	orr.w	r0, r3, r5, lsl #16
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 80119ca:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 80119ce:	0a1b      	lsrs	r3, r3, #8
 80119d0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80119d4:	ea83 2030 	eor.w	r0, r3, r0, ror #8
 80119d8:	6108      	str	r0, [r1, #16]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 80119da:	63e2      	str	r2, [r4, #60]	; 0x3c
 80119dc:	e70a      	b.n	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
 80119de:	a806      	add	r0, sp, #24
 80119e0:	ab02      	add	r3, sp, #8
 80119e2:	213a      	movs	r1, #58	; 0x3a
 80119e4:	9000      	str	r0, [sp, #0]
 80119e6:	4620      	mov	r0, r4
 80119e8:	f7f0 fa7c 	bl	8001ee4 <_nx_ip_checksum_compute>
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM);
 80119ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                short_val = (USHORT) ~checksum;
 80119ee:	43c0      	mvns	r0, r0
                icmpv6_header_ptr -> nx_icmpv6_header_checksum = short_val;
 80119f0:	68a2      	ldr	r2, [r4, #8]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM);
 80119f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
                icmpv6_header_ptr -> nx_icmpv6_header_checksum = short_val;
 80119f6:	ba40      	rev16	r0, r0
 80119f8:	8050      	strh	r0, [r2, #2]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM);
 80119fa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80119fc:	e6fa      	b.n	80117f4 <_nx_ip_packet_checksum_compute+0xa0>
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 80119fe:	2300      	movs	r3, #0
 8011a00:	463a      	mov	r2, r7
 8011a02:	2104      	movs	r1, #4
 8011a04:	9500      	str	r5, [sp, #0]
 8011a06:	4620      	mov	r0, r4
 8011a08:	f7f0 fa6c 	bl	8001ee4 <_nx_ip_checksum_compute>
                val = val & NX_LOWER_16_MASK;
 8011a0c:	43c0      	mvns	r0, r0
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8011a0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                val = val & NX_LOWER_16_MASK;
 8011a10:	b280      	uxth	r0, r0
 8011a12:	68a1      	ldr	r1, [r4, #8]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8011a14:	f022 0201 	bic.w	r2, r2, #1
                NX_CHANGE_ULONG_ENDIAN(val);
 8011a18:	ea40 4330 	orr.w	r3, r0, r0, ror #16
 8011a1c:	0a1b      	lsrs	r3, r3, #8
 8011a1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8011a22:	ea83 2330 	eor.w	r3, r3, r0, ror #8
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8011a26:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011a2a:	4318      	orrs	r0, r3
 8011a2c:	f8c8 0008 	str.w	r0, [r8, #8]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8011a30:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011a32:	e731      	b.n	8011898 <_nx_ip_packet_checksum_compute+0x144>

08011a34 <_nx_ip_packet_receive>:
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8011a34:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011a36:	b1a3      	cbz	r3, 8011a62 <_nx_ip_packet_receive+0x2e>
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 8011a38:	688a      	ldr	r2, [r1, #8]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 8011a3a:	7813      	ldrb	r3, [r2, #0]

    packet_ptr -> nx_packet_ip_version = ip_version;

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8011a3c:	638a      	str	r2, [r1, #56]	; 0x38
    ip_version = (version_byte >> 4);
 8011a3e:	091b      	lsrs	r3, r3, #4
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8011a40:	2b04      	cmp	r3, #4
    packet_ptr -> nx_packet_ip_version = ip_version;
 8011a42:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8011a46:	d005      	beq.n	8011a54 <_nx_ip_packet_receive+0x20>
        return;
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (ip_version == NX_IP_VERSION_V6 && ip_ptr -> nx_ipv6_packet_receive)
 8011a48:	2b06      	cmp	r3, #6
 8011a4a:	d107      	bne.n	8011a5c <_nx_ip_packet_receive+0x28>
 8011a4c:	f8d0 3edc 	ldr.w	r3, [r0, #3804]	; 0xedc
 8011a50:	b123      	cbz	r3, 8011a5c <_nx_ip_packet_receive+0x28>
    {

        /* Call the IPv6 packet handler. */
        (ip_ptr -> nx_ipv6_packet_receive)(ip_ptr, packet_ptr);
 8011a52:	4718      	bx	r3
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8011a54:	f8d0 3ce8 	ldr.w	r3, [r0, #3304]	; 0xce8
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1fa      	bne.n	8011a52 <_nx_ip_packet_receive+0x1e>

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
#endif

    _nx_packet_release(packet_ptr);
 8011a5c:	4608      	mov	r0, r1
 8011a5e:	f7f4 bfc7 	b.w	80069f0 <_nx_packet_release>
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 8011a62:	f600 4348 	addw	r3, r0, #3144	; 0xc48
 8011a66:	634b      	str	r3, [r1, #52]	; 0x34
 8011a68:	e7e6      	b.n	8011a38 <_nx_ip_packet_receive+0x4>
 8011a6a:	bf00      	nop

08011a6c <_nx_ipv4_option_process>:
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8011a6c:	688a      	ldr	r2, [r1, #8]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 8011a6e:	78d3      	ldrb	r3, [r2, #3]
 8011a70:	f003 030f 	and.w	r3, r3, #15
 8011a74:	3b05      	subs	r3, #5
 8011a76:	b2db      	uxtb	r3, r3
{
 8011a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 8011a7c:	b37b      	cbz	r3, 8011ade <_nx_ipv4_option_process+0x72>
UINT            op_timestamp_counter = 0;
 8011a7e:	2500      	movs	r5, #0
 8011a80:	009e      	lsls	r6, r3, #2
 8011a82:	3214      	adds	r2, #20
UINT            index = 0;
 8011a84:	462b      	mov	r3, r5

        /* Get the option type.  */
        op_type = *option_ptr;

        /* Process the option type. */
        switch (op_type)
 8011a86:	7814      	ldrb	r4, [r2, #0]
 8011a88:	2c01      	cmp	r4, #1
 8011a8a:	d031      	beq.n	8011af0 <_nx_ipv4_option_process+0x84>
 8011a8c:	d327      	bcc.n	8011ade <_nx_ipv4_option_process+0x72>
 8011a8e:	2c44      	cmp	r4, #68	; 0x44
 8011a90:	d129      	bne.n	8011ae6 <_nx_ipv4_option_process+0x7a>

            /* Update the counter;  */
            op_timestamp_counter++;

            /* Check the counter.  */
            if (op_timestamp_counter > 1)
 8011a92:	2d00      	cmp	r5, #0
 8011a94:	d141      	bne.n	8011b1a <_nx_ipv4_option_process+0xae>
                /* Return NX_FALSE.  */
                return(NX_FALSE);
            }

            /* Get the option length.  */
            op_length = *(option_ptr + 1);
 8011a96:	7854      	ldrb	r4, [r2, #1]

            /* Get the option offset.  */
            op_timestamp_offset = *(option_ptr + 2);

            /* Get the option overflow and flag.  */
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 8011a98:	78d7      	ldrb	r7, [r2, #3]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;

            /* Only check the option errors.  */

            /* Check the option length error.  */
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8011a9a:	f1a4 0e08 	sub.w	lr, r4, #8
            op_timestamp_offset = *(option_ptr + 2);
 8011a9e:	f892 c002 	ldrb.w	ip, [r2, #2]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 8011aa2:	ea4f 1817 	mov.w	r8, r7, lsr #4
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 8011aa6:	f007 070f 	and.w	r7, r7, #15
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8011aaa:	f1be 0f20 	cmp.w	lr, #32
 8011aae:	d828      	bhi.n	8011b02 <_nx_ipv4_option_process+0x96>
 8011ab0:	f014 0f03 	tst.w	r4, #3
 8011ab4:	d125      	bne.n	8011b02 <_nx_ipv4_option_process+0x96>
                /* Return NX_FALSE.  */
                return(NX_FALSE);
            }

            /* Check the option offset error, offset must be greater than 5, and offset must be an odd number.  */
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 8011ab6:	f1bc 0f04 	cmp.w	ip, #4
 8011aba:	d928      	bls.n	8011b0e <_nx_ipv4_option_process+0xa2>
 8011abc:	f01c 0f01 	tst.w	ip, #1
 8011ac0:	d025      	beq.n	8011b0e <_nx_ipv4_option_process+0xa2>
                /* Return NX_FALSE.  */
                return(NX_FALSE);
            }

            /* Check the option overflow error.  */
            if (op_timestamp_overflow == 15)
 8011ac2:	f1b8 0f0f 	cmp.w	r8, #15
 8011ac6:	d016      	beq.n	8011af6 <_nx_ipv4_option_process+0x8a>
                /* Return NX_FALSE.  */
                return(NX_FALSE);
            }

            /* Check the option flags error.  */
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 8011ac8:	2f01      	cmp	r7, #1
 8011aca:	d901      	bls.n	8011ad0 <_nx_ipv4_option_process+0x64>
 8011acc:	2f03      	cmp	r7, #3
 8011ace:	d112      	bne.n	8011af6 <_nx_ipv4_option_process+0x8a>
 8011ad0:	2501      	movs	r5, #1
        op_length = *(option_ptr + 1);

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 8011ad2:	4423      	add	r3, r4
 8011ad4:	42b3      	cmp	r3, r6
 8011ad6:	d809      	bhi.n	8011aec <_nx_ipv4_option_process+0x80>
        {
            return(NX_FALSE);
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 8011ad8:	4422      	add	r2, r4
    while (index < ip_option_length)
 8011ada:	42b3      	cmp	r3, r6
 8011adc:	d3d3      	bcc.n	8011a86 <_nx_ipv4_option_process+0x1a>
            return(NX_TRUE);
 8011ade:	2501      	movs	r5, #1
        index += op_length;
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
}
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae6:	7854      	ldrb	r4, [r2, #1]
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 8011ae8:	2c01      	cmp	r4, #1
 8011aea:	d8f2      	bhi.n	8011ad2 <_nx_ipv4_option_process+0x66>
            return(NX_FALSE);
 8011aec:	2500      	movs	r5, #0
 8011aee:	e7f7      	b.n	8011ae0 <_nx_ipv4_option_process+0x74>
            option_ptr++;
 8011af0:	3201      	adds	r2, #1
            index++;
 8011af2:	3301      	adds	r3, #1
            continue;
 8011af4:	e7f1      	b.n	8011ada <_nx_ipv4_option_process+0x6e>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 8011af6:	3318      	adds	r3, #24
 8011af8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8011afc:	f7fd fd22 	bl	800f544 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8011b00:	e7ee      	b.n	8011ae0 <_nx_ipv4_option_process+0x74>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 8011b02:	3316      	adds	r3, #22
 8011b04:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8011b08:	f7fd fd1c 	bl	800f544 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8011b0c:	e7e8      	b.n	8011ae0 <_nx_ipv4_option_process+0x74>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 8011b0e:	3317      	adds	r3, #23
 8011b10:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8011b14:	f7fd fd16 	bl	800f544 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8011b18:	e7e2      	b.n	8011ae0 <_nx_ipv4_option_process+0x74>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 8011b1a:	3316      	adds	r3, #22
 8011b1c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8011b20:	f7fd fd10 	bl	800f544 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8011b24:	2500      	movs	r5, #0
 8011b26:	e7db      	b.n	8011ae0 <_nx_ipv4_option_process+0x74>

08011b28 <_nx_ipv6_fragment_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_fragment_process(struct NX_IP_DRIVER_STRUCT *driver_req_ptr, UINT mtu)
{
 8011b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       fragment.  There will be a unique packet pointer for each request, but
       otherwise all the other fields will remain constant.  */
    driver_request = *driver_req_ptr;

    /* Setup the IP pointer. */
    ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8011b2c:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
 8011b30:	b095      	sub	sp, #84	; 0x54
    driver_request = *driver_req_ptr;
 8011b32:	4605      	mov	r5, r0

    /* Byte swap packet_id */
    NX_CHANGE_ULONG_ENDIAN(packet_id);

    /* Pickup the source packet pointer.  */
    source_packet = driver_req_ptr -> nx_ip_driver_packet;
 8011b34:	6907      	ldr	r7, [r0, #16]
    packet_id = ip_ptr -> nx_ip_packet_id++;
 8011b36:	f8d8 9634 	ldr.w	r9, [r8, #1588]	; 0x634
{
 8011b3a:	460c      	mov	r4, r1
    driver_request = *driver_req_ptr;
 8011b3c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    source_packet -> nx_packet_last = source_packet;
    source_packet -> nx_packet_ip_header = source_packet -> nx_packet_prepend_ptr;
 8011b40:	68be      	ldr	r6, [r7, #8]
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 8011b42:	ea89 4e39 	eor.w	lr, r9, r9, ror #16
    packet_id = ip_ptr -> nx_ip_packet_id++;
 8011b46:	f109 0a01 	add.w	sl, r9, #1
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 8011b4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    driver_request = *driver_req_ptr;
 8011b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 8011b50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
    driver_request = *driver_req_ptr;
 8011b54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 8011b5c:	ea8e 2539 	eor.w	r5, lr, r9, ror #8
    packet_id = ip_ptr -> nx_ip_packet_id++;
 8011b60:	f8c8 a634 	str.w	sl, [r8, #1588]	; 0x634
    pool_ptr = source_packet -> nx_packet_pool_owner;
 8011b64:	f8d7 8000 	ldr.w	r8, [r7]
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 8011b68:	9509      	str	r5, [sp, #36]	; 0x24
    NX_PACKET_DEBUG(__FILE__, __LINE__, source_packet);

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Compute checksum for upper layer protocol. */
    if (source_packet -> nx_packet_interface_capability_flag)
 8011b6a:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
    driver_request = *driver_req_ptr;
 8011b6c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    source_packet -> nx_packet_last = source_packet;
 8011b70:	61bf      	str	r7, [r7, #24]
    source_packet -> nx_packet_ip_header = source_packet -> nx_packet_prepend_ptr;
 8011b72:	63be      	str	r6, [r7, #56]	; 0x38
    if (source_packet -> nx_packet_interface_capability_flag)
 8011b74:	2d00      	cmp	r5, #0
 8011b76:	f040 80d1 	bne.w	8011d1c <_nx_ipv6_fragment_process+0x1f4>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Find out the unfragmentable part. */
    fragmentable_ptr = source_packet -> nx_packet_prepend_ptr + sizeof(NX_IPV6_HEADER);
    last_header_location  = (source_packet -> nx_packet_prepend_ptr + 6);
    next_header = *last_header_location;
 8011b7a:	79b3      	ldrb	r3, [r6, #6]
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	9306      	str	r3, [sp, #24]
    fragmentable_ptr = source_packet -> nx_packet_prepend_ptr + sizeof(NX_IPV6_HEADER);
 8011b80:	f106 0328 	add.w	r3, r6, #40	; 0x28

#endif

    /* Fragment Option header appears after Hop-by-hop and routing headers.  So we need
       to skip these headers if they are present. */
    while ((next_header == NX_PROTOCOL_NEXT_HEADER_HOP_BY_HOP) ||
 8011b84:	b112      	cbz	r2, 8011b8c <_nx_ipv6_fragment_process+0x64>
 8011b86:	2a2b      	cmp	r2, #43	; 0x2b
 8011b88:	f040 80d4 	bne.w	8011d34 <_nx_ipv6_fragment_process+0x20c>
        last_header_location = fragmentable_ptr;

        next_header = *fragmentable_ptr;

        /*lint -e{923} suppress cast between pointer and UINT.  */
        fragmentable_ptr = NX_UCHAR_POINTER_ADD(fragmentable_ptr, ((hdr_ext_len + 1) << 3));
 8011b8c:	785a      	ldrb	r2, [r3, #1]
        next_header = *fragmentable_ptr;
 8011b8e:	7819      	ldrb	r1, [r3, #0]
        fragmentable_ptr = NX_UCHAR_POINTER_ADD(fragmentable_ptr, ((hdr_ext_len + 1) << 3));
 8011b90:	3201      	adds	r2, #1
 8011b92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    while ((next_header == NX_PROTOCOL_NEXT_HEADER_HOP_BY_HOP) ||
 8011b96:	b109      	cbz	r1, 8011b9c <_nx_ipv6_fragment_process+0x74>
 8011b98:	292b      	cmp	r1, #43	; 0x2b
 8011b9a:	d101      	bne.n	8011ba0 <_nx_ipv6_fragment_process+0x78>
        fragmentable_ptr = NX_UCHAR_POINTER_ADD(fragmentable_ptr, ((hdr_ext_len + 1) << 3));
 8011b9c:	4613      	mov	r3, r2
 8011b9e:	e7f5      	b.n	8011b8c <_nx_ipv6_fragment_process+0x64>
 8011ba0:	9106      	str	r1, [sp, #24]
 8011ba2:	4611      	mov	r1, r2
 8011ba4:	9203      	str	r2, [sp, #12]
    }

    /* If hdr_ext_len == 0, there are no optional headers in the unfragmentable region. */
    *last_header_location = NX_PROTOCOL_NEXT_HEADER_FRAGMENT;
 8011ba6:	222c      	movs	r2, #44	; 0x2c
 8011ba8:	701a      	strb	r2, [r3, #0]

    /* Change the very last "next_header" to
       compute the unfragmentable size which includes MAC header, IPv6 header,
       and any unfragmentable header, but not the fragment header option. */
    /*lint -e{923} suppress cast between pointer and UINT.  */
    unfragmentable_size = (UINT)((ALIGN_TYPE)fragmentable_ptr - (ALIGN_TYPE)source_packet -> nx_packet_prepend_ptr);
 8011baa:	68ba      	ldr	r2, [r7, #8]

    /* Compute the fragmentable size. */
    packet_length = (UINT)(source_packet -> nx_packet_length - unfragmentable_size);
 8011bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    unfragmentable_size = (UINT)((ALIGN_TYPE)fragmentable_ptr - (ALIGN_TYPE)source_packet -> nx_packet_prepend_ptr);
 8011bae:	1a8a      	subs	r2, r1, r2

    /* Now fragmentable_ptr points to the begining of fragmentable part of 'remaining_pkt' */
    /* Also packet_prepend_ptr points to the data (fragmentable) area.  */

    /* The fragmentable pointer starts from the first packet.*/
    while (packet_length)
 8011bb0:	ebb3 0902 	subs.w	r9, r3, r2
    unfragmentable_size = (UINT)((ALIGN_TYPE)fragmentable_ptr - (ALIGN_TYPE)source_packet -> nx_packet_prepend_ptr);
 8011bb4:	9202      	str	r2, [sp, #8]
    while (packet_length)
 8011bb6:	f000 809d 	beq.w	8011cf4 <_nx_ipv6_fragment_process+0x1cc>
 8011bba:	1aa3      	subs	r3, r4, r2
 8011bbc:	f64f 72f8 	movw	r2, #65528	; 0xfff8
INT                             last_fragment = 0;
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	f104 0010 	add.w	r0, r4, #16
 8011bc6:	4013      	ands	r3, r2

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, new_packet);

            /*lint -e{644} suppress variable might not be initialized, since "new_packet" was initialized in _nx_packet_allocate. */
            new_packet -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8011bc8:	f04f 0b06 	mov.w	fp, #6
INT                             last_fragment = 0;
 8011bcc:	9105      	str	r1, [sp, #20]
 8011bce:	3b08      	subs	r3, #8
 8011bd0:	9007      	str	r0, [sp, #28]
UINT                            fragment_offset = 0;
 8011bd2:	9101      	str	r1, [sp, #4]
 8011bd4:	9308      	str	r3, [sp, #32]
        if (fragment_size >= packet_length)
 8011bd6:	9b08      	ldr	r3, [sp, #32]
 8011bd8:	4599      	cmp	r9, r3
 8011bda:	f240 8091 	bls.w	8011d00 <_nx_ipv6_fragment_process+0x1d8>
 8011bde:	eba9 0203 	sub.w	r2, r9, r3
 8011be2:	4699      	mov	r9, r3
 8011be4:	9204      	str	r2, [sp, #16]
        nx_packet_size = (UINT)((pool_ptr -> nx_packet_pool_payload_size) & 0xFFFC);
 8011be6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8011bea:	f64f 75fc 	movw	r5, #65532	; 0xfffc
        remaining_bytes = fragment_size + unfragmentable_size + (UINT)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION) + NX_PHYSICAL_HEADER;
 8011bee:	9a02      	ldr	r2, [sp, #8]
        nx_packet_size = (UINT)((pool_ptr -> nx_packet_pool_payload_size) & 0xFFFC);
 8011bf0:	2400      	movs	r4, #0
 8011bf2:	401d      	ands	r5, r3
 8011bf4:	9b07      	ldr	r3, [sp, #28]
        remaining_bytes = fragment_size + unfragmentable_size + (UINT)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION) + NX_PHYSICAL_HEADER;
 8011bf6:	eb09 0a02 	add.w	sl, r9, r2
 8011bfa:	429d      	cmp	r5, r3
 8011bfc:	f10a 0618 	add.w	r6, sl, #24
 8011c00:	bf28      	it	cs
 8011c02:	461d      	movcs	r5, r3
 8011c04:	e007      	b.n	8011c16 <_nx_ipv6_fragment_process+0xee>
                /* first_fragment -> nx_packet_length = fragment_size + unfragmentable_size. */
                /* May need to configure additional header information. */
            }
            else
            {
                first_fragment -> nx_packet_last -> nx_packet_next = new_packet;
 8011c06:	69a2      	ldr	r2, [r4, #24]
            /* Establish the "usable" size of the packet.
               The actual copy routine uses this information to figure out how many
               bytes to transer to the fragmented packets.*/

            /* The true packet size is set in the first packet. */
            if (nx_packet_size > remaining_bytes)
 8011c08:	42ae      	cmp	r6, r5
                first_fragment -> nx_packet_last -> nx_packet_next = new_packet;
 8011c0a:	6053      	str	r3, [r2, #4]
                first_fragment -> nx_packet_last = new_packet;
 8011c0c:	61a3      	str	r3, [r4, #24]
            if (nx_packet_size > remaining_bytes)
 8011c0e:	d313      	bcc.n	8011c38 <_nx_ipv6_fragment_process+0x110>
            else
            {
                new_packet -> nx_packet_length = nx_packet_size;
                remaining_bytes -= nx_packet_size;
            }
        } while (remaining_bytes);
 8011c10:	1b76      	subs	r6, r6, r5
                new_packet -> nx_packet_length = nx_packet_size;
 8011c12:	625d      	str	r5, [r3, #36]	; 0x24
        } while (remaining_bytes);
 8011c14:	d011      	beq.n	8011c3a <_nx_ipv6_fragment_process+0x112>
            if (_nx_packet_allocate(pool_ptr, &new_packet,
 8011c16:	2300      	movs	r3, #0
 8011c18:	a90b      	add	r1, sp, #44	; 0x2c
 8011c1a:	4640      	mov	r0, r8
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	f7f4 fd35 	bl	800668c <_nx_packet_allocate>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d17e      	bne.n	8011d24 <_nx_ipv6_fragment_process+0x1fc>
            new_packet -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8011c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c28:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
            if (first_fragment == NX_NULL)
 8011c2c:	2c00      	cmp	r4, #0
 8011c2e:	d1ea      	bne.n	8011c06 <_nx_ipv6_fragment_process+0xde>
            if (nx_packet_size > remaining_bytes)
 8011c30:	42ae      	cmp	r6, r5
                first_fragment -> nx_packet_last = new_packet;
 8011c32:	619b      	str	r3, [r3, #24]
 8011c34:	461c      	mov	r4, r3
            if (nx_packet_size > remaining_bytes)
 8011c36:	d2eb      	bcs.n	8011c10 <_nx_ipv6_fragment_process+0xe8>
                new_packet -> nx_packet_length = remaining_bytes;
 8011c38:	625e      	str	r6, [r3, #36]	; 0x24
        /* First step:  copy the unfragmentable part. */
        /* Save the state from last iteration. */
        previous_packet = source_packet -> nx_packet_last;

        source_packet -> nx_packet_last = source_packet;
        source_packet -> nx_packet_prepend_ptr = source_packet -> nx_packet_ip_header;
 8011c3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38

        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;

        /* For the first packet, the prepend pointer is already at the begining of the IP header. */
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 8011c3c:	4621      	mov	r1, r4
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;
 8011c3e:	68e3      	ldr	r3, [r4, #12]
        source_packet -> nx_packet_prepend_ptr = source_packet -> nx_packet_ip_header;
 8011c40:	60b8      	str	r0, [r7, #8]
        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
 8011c42:	68a0      	ldr	r0, [r4, #8]
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;
 8011c44:	3310      	adds	r3, #16
        previous_packet = source_packet -> nx_packet_last;
 8011c46:	69bd      	ldr	r5, [r7, #24]
        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
 8011c48:	3010      	adds	r0, #16
        source_packet -> nx_packet_last = source_packet;
 8011c4a:	61bf      	str	r7, [r7, #24]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 8011c4c:	9a02      	ldr	r2, [sp, #8]
        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
 8011c4e:	60a0      	str	r0, [r4, #8]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 8011c50:	4638      	mov	r0, r7
        first_fragment -> nx_packet_last = first_fragment;
 8011c52:	61a4      	str	r4, [r4, #24]
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;
 8011c54:	60e3      	str	r3, [r4, #12]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 8011c56:	f000 f8c3 	bl	8011de0 <_nx_ipv6_packet_copy>
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	d155      	bne.n	8011d0a <_nx_ipv6_fragment_process+0x1e2>
        /* Fill in the fragment header area.  Be careful here: we assume the unfragmentable part does not
           span over multiple packets. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)first_fragment -> nx_packet_last -> nx_packet_append_ptr;
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 8011c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 8011c60:	68e2      	ldr	r2, [r4, #12]
        fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)first_fragment -> nx_packet_last -> nx_packet_append_ptr;
 8011c62:	69a1      	ldr	r1, [r4, #24]
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 8011c64:	3308      	adds	r3, #8
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 8011c66:	3208      	adds	r2, #8
 8011c68:	f8bd 6004 	ldrh.w	r6, [sp, #4]
        fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)first_fragment -> nx_packet_last -> nx_packet_append_ptr;
 8011c6c:	68c9      	ldr	r1, [r1, #12]
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 8011c6e:	6263      	str	r3, [r4, #36]	; 0x24

        fragment_option -> nx_ipv6_header_fragment_option_reserved = 0;
        fragment_option -> nx_ipv6_header_fragment_option_next_header = next_header;
 8011c70:	9b06      	ldr	r3, [sp, #24]
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 8011c72:	60e2      	str	r2, [r4, #12]
        fragment_option -> nx_ipv6_header_fragment_option_next_header = next_header;
 8011c74:	700b      	strb	r3, [r1, #0]

        if (!last_fragment)
 8011c76:	9b05      	ldr	r3, [sp, #20]
        fragment_option -> nx_ipv6_header_fragment_option_reserved = 0;
 8011c78:	7048      	strb	r0, [r1, #1]
        if (!last_fragment)
 8011c7a:	b90b      	cbnz	r3, 8011c80 <_nx_ipv6_fragment_process+0x158>
        {
            fragment_option -> nx_ipv6_header_fragment_option_offset_flag = (USHORT)(fragment_offset + 1);
 8011c7c:	3601      	adds	r6, #1
 8011c7e:	b2b6      	uxth	r6, r6
        }

        /* Convert to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);

        fragment_option -> nx_ipv6_header_fragment_option_packet_id = packet_id;
 8011c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 8011c82:	ba76      	rev16	r6, r6
        /* Restore the nx_packet_last and the prepend pointer within the last packet. */
        source_packet -> nx_packet_last = previous_packet;
        source_packet -> nx_packet_last -> nx_packet_prepend_ptr = fragmentable_ptr;

        /* Copy the rest of the frame. */
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, fragment_size))
 8011c84:	464a      	mov	r2, r9
 8011c86:	4638      	mov	r0, r7
        fragment_option -> nx_ipv6_header_fragment_option_packet_id = packet_id;
 8011c88:	604b      	str	r3, [r1, #4]
        source_packet -> nx_packet_last -> nx_packet_prepend_ptr = fragmentable_ptr;
 8011c8a:	9b03      	ldr	r3, [sp, #12]
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 8011c8c:	804e      	strh	r6, [r1, #2]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, fragment_size))
 8011c8e:	4621      	mov	r1, r4
        source_packet -> nx_packet_last = previous_packet;
 8011c90:	61bd      	str	r5, [r7, #24]
        source_packet -> nx_packet_last -> nx_packet_prepend_ptr = fragmentable_ptr;
 8011c92:	60ab      	str	r3, [r5, #8]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, fragment_size))
 8011c94:	f000 f8a4 	bl	8011de0 <_nx_ipv6_packet_copy>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d136      	bne.n	8011d0a <_nx_ipv6_fragment_process+0x1e2>
        /*
           Set up the IP frame length.  first_fragment -> nx_packet_prepend_ptr points to the
           beginning of the IPv6 header.
         */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header = (NX_IPV6_HEADER *)first_fragment -> nx_packet_prepend_ptr;
 8011c9c:	68a5      	ldr	r5, [r4, #8]
        /* Convert to host byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);

        val = val & 0x0000FFFF;

        word_1 = (ULONG)(((fragment_size + unfragmentable_size - sizeof(NX_IPV6_HEADER)) + sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION)) << 16);
 8011c9e:	f1aa 0120 	sub.w	r1, sl, #32

        ipv6_header -> nx_ip_header_word_1 = word_1;

        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;

        fragment_offset += fragment_size;
 8011ca2:	9b01      	ldr	r3, [sp, #4]

        /* This fragment is ready to be transmitted. */
        /* Send the packet to the associated driver for output.  */
        first_fragment -> nx_packet_length = unfragmentable_size + fragment_size;
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 8011ca4:	f10a 0608 	add.w	r6, sl, #8
        val = ipv6_header -> nx_ip_header_word_1;
 8011ca8:	686a      	ldr	r2, [r5, #4]
#endif /* !NX_DISABLE_IP_INFO */

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, source_packet);

        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 8011caa:	a80c      	add	r0, sp, #48	; 0x30
        fragment_offset += fragment_size;
 8011cac:	444b      	add	r3, r9
    while (packet_length)
 8011cae:	f8dd 9010 	ldr.w	r9, [sp, #16]
        fragment_offset += fragment_size;
 8011cb2:	9301      	str	r3, [sp, #4]
        NX_CHANGE_ULONG_ENDIAN(val);
 8011cb4:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 8011cb8:	0a1b      	lsrs	r3, r3, #8
 8011cba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8011cbe:	ea83 2332 	eor.w	r3, r3, r2, ror #8
        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 8011cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        val = val & 0x0000FFFF;
 8011cc4:	b29b      	uxth	r3, r3
        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 8011cc6:	6852      	ldr	r2, [r2, #4]
        word_1 = val | word_1;
 8011cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;
 8011ccc:	69b9      	ldr	r1, [r7, #24]
        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 8011cce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
        NX_CHANGE_ULONG_ENDIAN(word_1);
 8011cd0:	ea83 4c33 	eor.w	ip, r3, r3, ror #16
        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;
 8011cd4:	6889      	ldr	r1, [r1, #8]
        NX_CHANGE_ULONG_ENDIAN(word_1);
 8011cd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;
 8011cda:	9103      	str	r1, [sp, #12]
        NX_CHANGE_ULONG_ENDIAN(word_1);
 8011cdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8011ce0:	ea8c 2333 	eor.w	r3, ip, r3, ror #8
        ipv6_header -> nx_ip_header_word_1 = word_1;
 8011ce4:	606b      	str	r3, [r5, #4]
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 8011ce6:	6266      	str	r6, [r4, #36]	; 0x24
        driver_request.nx_ip_driver_packet =   first_fragment;
 8011ce8:	9410      	str	r4, [sp, #64]	; 0x40
        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 8011cea:	4790      	blx	r2
    while (packet_length)
 8011cec:	f1b9 0f00 	cmp.w	r9, #0
 8011cf0:	f47f af71 	bne.w	8011bd6 <_nx_ipv6_fragment_process+0xae>

        first_fragment = NX_NULL;
    }

    /* Release the original packet. */
    _nx_packet_transmit_release(source_packet);
 8011cf4:	4638      	mov	r0, r7
 8011cf6:	f7f4 fee1 	bl	8006abc <_nx_packet_transmit_release>
    {
        _nx_packet_release(first_fragment);
    }

    return;
}
 8011cfa:	b015      	add	sp, #84	; 0x54
 8011cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            last_fragment = 1;
 8011d00:	2200      	movs	r2, #0
 8011d02:	2301      	movs	r3, #1
 8011d04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011d08:	e76d      	b.n	8011be6 <_nx_ipv6_fragment_process+0xbe>
    _nx_packet_transmit_release(source_packet);
 8011d0a:	4638      	mov	r0, r7
 8011d0c:	f7f4 fed6 	bl	8006abc <_nx_packet_transmit_release>
        _nx_packet_release(first_fragment);
 8011d10:	4620      	mov	r0, r4
 8011d12:	f7f4 fe6d 	bl	80069f0 <_nx_packet_release>
}
 8011d16:	b015      	add	sp, #84	; 0x54
 8011d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_ip_packet_checksum_compute(source_packet);
 8011d1c:	f7ff fd1a 	bl	8011754 <_nx_ip_packet_checksum_compute>
 8011d20:	68be      	ldr	r6, [r7, #8]
 8011d22:	e72a      	b.n	8011b7a <_nx_ipv6_fragment_process+0x52>
    _nx_packet_transmit_release(source_packet);
 8011d24:	4638      	mov	r0, r7
 8011d26:	f7f4 fec9 	bl	8006abc <_nx_packet_transmit_release>
    if (first_fragment)
 8011d2a:	2c00      	cmp	r4, #0
 8011d2c:	d1f0      	bne.n	8011d10 <_nx_ipv6_fragment_process+0x1e8>
}
 8011d2e:	b015      	add	sp, #84	; 0x54
 8011d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragmentable_ptr = source_packet -> nx_packet_prepend_ptr + sizeof(NX_IPV6_HEADER);
 8011d34:	9303      	str	r3, [sp, #12]
    last_header_location  = (source_packet -> nx_packet_prepend_ptr + 6);
 8011d36:	1db3      	adds	r3, r6, #6
 8011d38:	9903      	ldr	r1, [sp, #12]
 8011d3a:	e734      	b.n	8011ba6 <_nx_ipv6_fragment_process+0x7e>

08011d3c <_nx_ipv6_header_add>:
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_header_add(NX_IP *ip_ptr, NX_PACKET **packet_pptr,
                         ULONG protocol, ULONG payload_size, ULONG hop_limit,
                         ULONG *src_address, ULONG *dest_address, ULONG *fragment)
{
 8011d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d3e:	9c09      	ldr	r4, [sp, #36]	; 0x24

NX_IPV6_HEADER            *ip_header_ptr;
NX_PACKET                 *packet_ptr = *packet_pptr;
 8011d40:	6808      	ldr	r0, [r1, #0]
{
 8011d42:	9906      	ldr	r1, [sp, #24]
#endif

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    if (fragment)
 8011d44:	b10c      	cbz	r4, 8011d4a <_nx_ipv6_header_add+0xe>
    {
#ifndef NX_DISABLE_FRAGMENTATION
        /* By default, it is fragmentable. */
        *fragment = NX_TRUE;
 8011d46:	2501      	movs	r5, #1
 8011d48:	6025      	str	r5, [r4, #0]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);

        /* Increase header length. */
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8011d4a:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);
 8011d4e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8011d50:	6884      	ldr	r4, [r0, #8]
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8011d52:	3528      	adds	r5, #40	; 0x28
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);
 8011d54:	3728      	adds	r7, #40	; 0x28
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV6_HEADER);
 8011d56:	f1a4 0628 	sub.w	r6, r4, #40	; 0x28
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8011d5a:	b2ed      	uxtb	r5, r5
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);
 8011d5c:	6247      	str	r7, [r0, #36]	; 0x24
                                                           sizeof(NX_IPV6_HEADER));


        /* If the interface IP address is not valid (in DAD state), only ICMP is allowed */
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8011d5e:	6b47      	ldr	r7, [r0, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8011d60:	6384      	str	r4, [r0, #56]	; 0x38
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8011d62:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV6_HEADER);
 8011d66:	6086      	str	r6, [r0, #8]
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8011d68:	78bf      	ldrb	r7, [r7, #2]
 8011d6a:	2f04      	cmp	r7, #4
 8011d6c:	d006      	beq.n	8011d7c <_nx_ipv6_header_add+0x40>
               check whether the interface address is in tentative state and the protocol
               is ICMPv6-DAD. */

            /* This check is needed only if DAD is not disabled.
               If DAD is disabled, we drop the packet. */
            if (!((protocol == NX_PROTOCOL_ICMPV6) &&
 8011d6e:	2f01      	cmp	r7, #1
 8011d70:	d10c      	bne.n	8011d8c <_nx_ipv6_header_add+0x50>
 8011d72:	2a3a      	cmp	r2, #58	; 0x3a
 8011d74:	d10a      	bne.n	8011d8c <_nx_ipv6_header_add+0x50>
 8011d76:	5d75      	ldrb	r5, [r6, r5]
 8011d78:	2d87      	cmp	r5, #135	; 0x87
 8011d7a:	d107      	bne.n	8011d8c <_nx_ipv6_header_add+0x50>
            }
        }

        /* If the IP header won't fit, return an error.  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8011d7c:	6905      	ldr	r5, [r0, #16]
 8011d7e:	42ae      	cmp	r6, r5
 8011d80:	d208      	bcs.n	8011d94 <_nx_ipv6_header_add+0x58>
 8011d82:	f04f 30ff 	mov.w	r0, #4294967295
 8011d86:	f00b fa3f 	bl	801d208 <_tx_thread_sleep>
 8011d8a:	e7fa      	b.n	8011d82 <_nx_ipv6_header_add+0x46>
                _nx_packet_transmit_release(packet_ptr);
 8011d8c:	f7f4 fe96 	bl	8006abc <_nx_packet_transmit_release>
                return(NX_NO_INTERFACE_ADDRESS);
 8011d90:	2050      	movs	r0, #80	; 0x50
    }

#endif /* NX_IPSEC_ENABLE */

    return(NX_SUCCESS);
}
 8011d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ip_header_ptr -> nx_ip_header_word_1 = (payload_size << 16) | (protocol << 8) | (hop_limit);
 8011d94:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 8011d98:	f1a4 0520 	sub.w	r5, r4, #32
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8011d9c:	2160      	movs	r1, #96	; 0x60
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8011d9e:	6386      	str	r6, [r0, #56]	; 0x38
        ip_header_ptr -> nx_ip_header_word_1 = (payload_size << 16) | (protocol << 8) | (hop_limit);
 8011da0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        COPY_IPV6_ADDRESS(dest_address, ip_header_ptr -> nx_ip_header_destination_ip);
 8011da4:	f1a4 0610 	sub.w	r6, r4, #16
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8011da8:	f844 1c28 	str.w	r1, [r4, #-40]
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 8011dac:	4629      	mov	r1, r5
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8011dae:	ea82 4332 	eor.w	r3, r2, r2, ror #16
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 8011db2:	9807      	ldr	r0, [sp, #28]
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8011db4:	0a1b      	lsrs	r3, r3, #8
 8011db6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8011dba:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 8011dbe:	f844 3c24 	str.w	r3, [r4, #-36]
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 8011dc2:	f7f4 fb83 	bl	80064cc <COPY_IPV6_ADDRESS>
        COPY_IPV6_ADDRESS(dest_address, ip_header_ptr -> nx_ip_header_destination_ip);
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	9808      	ldr	r0, [sp, #32]
 8011dca:	f7f4 fb7f 	bl	80064cc <COPY_IPV6_ADDRESS>
        NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8011dce:	4630      	mov	r0, r6
 8011dd0:	f7f4 fc32 	bl	8006638 <_nx_ipv6_address_change_endian>
        NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	f7f4 fc2f 	bl	8006638 <_nx_ipv6_address_change_endian>
    return(NX_SUCCESS);
 8011dda:	2000      	movs	r0, #0
}
 8011ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dde:	bf00      	nop

08011de0 <_nx_ipv6_packet_copy>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_packet_copy(NX_PACKET *source_pkt_head, NX_PACKET *dest_pkt_head, UINT size)
{
 8011de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de4:	b083      	sub	sp, #12

    /* Number of bytes to be copied. */
    bytes_remaining = size;

    /* Obtain points to the source and destination packets. */
    source_pkt = source_pkt_head -> nx_packet_last;
 8011de6:	f8d0 8018 	ldr.w	r8, [r0, #24]
    dest_pkt = dest_pkt_head -> nx_packet_last;
 8011dea:	f8d1 e018 	ldr.w	lr, [r1, #24]
{
 8011dee:	e9cd 0100 	strd	r0, r1, [sp]

    while (bytes_remaining > 0)
 8011df2:	2a00      	cmp	r2, #0
 8011df4:	f000 80d6 	beq.w	8011fa4 <_nx_ipv6_packet_copy+0x1c4>
    {

        /* Make sure source or destination packets are valid. */
        if ((source_pkt == NX_NULL) || (dest_pkt == NX_NULL))
 8011df8:	f1be 0f00 	cmp.w	lr, #0
 8011dfc:	d07e      	beq.n	8011efc <_nx_ipv6_packet_copy+0x11c>
 8011dfe:	f1b8 0f00 	cmp.w	r8, #0
 8011e02:	d07b      	beq.n	8011efc <_nx_ipv6_packet_copy+0x11c>

        flag = PACKET_COPY_DONE;

        /* Check if the source packet is running out of data. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (bytes_to_copy > (UINT)(source_pkt -> nx_packet_append_ptr - source_pkt -> nx_packet_prepend_ptr))
 8011e04:	e9d8 1602 	ldrd	r1, r6, [r8, #8]
 8011e08:	1a76      	subs	r6, r6, r1
 8011e0a:	4296      	cmp	r6, r2
 8011e0c:	f0c0 80c5 	bcc.w	8011f9a <_nx_ipv6_packet_copy+0x1ba>
 8011e10:	4616      	mov	r6, r2
 8011e12:	f04f 0904 	mov.w	r9, #4
 8011e16:	f04f 0a00 	mov.w	sl, #0
            flag = PACKET_MORE_TO_COPY;
        }

        /* Check if the destination packet is running ouf of space.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (bytes_to_copy > (UINT)(dest_pkt -> nx_packet_data_end - dest_pkt -> nx_packet_append_ptr))
 8011e1a:	f8de 5014 	ldr.w	r5, [lr, #20]
 8011e1e:	f8de 300c 	ldr.w	r3, [lr, #12]

        /* Adjust packet pointers. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        dest_ptr = (ULONG *)dest_pkt -> nx_packet_append_ptr;
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 8011e22:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
        if (bytes_to_copy > (UINT)(dest_pkt -> nx_packet_data_end - dest_pkt -> nx_packet_append_ptr))
 8011e26:	1aec      	subs	r4, r5, r3
 8011e28:	42b4      	cmp	r4, r6
 8011e2a:	f0c0 80a6 	bcc.w	8011f7a <_nx_ipv6_packet_copy+0x19a>
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
 8011e2e:	199d      	adds	r5, r3, r6

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        source_ptr = (ULONG *)source_pkt -> nx_packet_prepend_ptr;
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 8011e30:	198c      	adds	r4, r1, r6
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 8011e32:	1b80      	subs	r0, r0, r6
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
 8011e34:	f8ce 500c 	str.w	r5, [lr, #12]
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 8011e38:	f8ce 0024 	str.w	r0, [lr, #36]	; 0x24
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 8011e3c:	f8c8 4008 	str.w	r4, [r8, #8]

        while (bytes_to_copy)
 8011e40:	2e00      	cmp	r6, #0
 8011e42:	f000 80b5 	beq.w	8011fb0 <_nx_ipv6_packet_copy+0x1d0>
 8011e46:	f04f 0b00 	mov.w	fp, #0
        {
            /* Loop unrolling: copy 32 bytes in one iteration. */
            switch (bytes_to_copy >> 2)
 8011e4a:	08b7      	lsrs	r7, r6, #2
 8011e4c:	1d08      	adds	r0, r1, #4
 8011e4e:	1d1c      	adds	r4, r3, #4
 8011e50:	680d      	ldr	r5, [r1, #0]
 8011e52:	3f01      	subs	r7, #1
 8011e54:	2f06      	cmp	r7, #6
 8011e56:	d805      	bhi.n	8011e64 <_nx_ipv6_packet_copy+0x84>
 8011e58:	e8df f007 	tbb	[pc, r7]
 8011e5c:	1c546072 	.word	0x1c546072
 8011e60:	1459      	.short	0x1459
 8011e62:	0e          	.byte	0x0e
 8011e63:	00          	.byte	0x00
            {
            default:
                *dest_ptr++ = *source_ptr++;
 8011e64:	461f      	mov	r7, r3
 8011e66:	f101 0c08 	add.w	ip, r1, #8
 8011e6a:	4623      	mov	r3, r4
 8011e6c:	f847 5b08 	str.w	r5, [r7], #8
 8011e70:	463c      	mov	r4, r7
 8011e72:	684d      	ldr	r5, [r1, #4]
 8011e74:	4601      	mov	r1, r0
 8011e76:	4660      	mov	r0, ip
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 7:
                *dest_ptr++ = *source_ptr++;
 8011e78:	601d      	str	r5, [r3, #0]
 8011e7a:	4623      	mov	r3, r4
 8011e7c:	684d      	ldr	r5, [r1, #4]
 8011e7e:	3404      	adds	r4, #4
 8011e80:	4601      	mov	r1, r0
 8011e82:	3004      	adds	r0, #4
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 6:
                *dest_ptr++ = *source_ptr++;
 8011e84:	601d      	str	r5, [r3, #0]
 8011e86:	1d23      	adds	r3, r4, #4
 8011e88:	684d      	ldr	r5, [r1, #4]
 8011e8a:	1d01      	adds	r1, r0, #4
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 5:
                *dest_ptr++ = *source_ptr++;
 8011e8c:	6025      	str	r5, [r4, #0]
 8011e8e:	1d1c      	adds	r4, r3, #4
 8011e90:	6845      	ldr	r5, [r0, #4]
 8011e92:	1d08      	adds	r0, r1, #4
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 4:
                *dest_ptr++ = *source_ptr++;
 8011e94:	601d      	str	r5, [r3, #0]
 8011e96:	1d27      	adds	r7, r4, #4
 8011e98:	f100 0c04 	add.w	ip, r0, #4
 8011e9c:	684d      	ldr	r5, [r1, #4]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 3:
                *dest_ptr++ = *source_ptr++;
 8011e9e:	6025      	str	r5, [r4, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 2:
                *dest_ptr++ = *source_ptr++;
 8011ea0:	463b      	mov	r3, r7
 8011ea2:	6840      	ldr	r0, [r0, #4]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 1:
                *dest_ptr++ = *source_ptr++;
            }
            if (bytes_to_copy >= 32)
 8011ea4:	2e1f      	cmp	r6, #31
                *dest_ptr++ = *source_ptr++;
 8011ea6:	f10c 0108 	add.w	r1, ip, #8
 8011eaa:	f107 0404 	add.w	r4, r7, #4
                *dest_ptr++ = *source_ptr++;
 8011eae:	f843 0b08 	str.w	r0, [r3], #8
 8011eb2:	f10c 0004 	add.w	r0, ip, #4
                *dest_ptr++ = *source_ptr++;
 8011eb6:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8011eba:	607d      	str	r5, [r7, #4]
            if (bytes_to_copy >= 32)
 8011ebc:	d936      	bls.n	8011f2c <_nx_ipv6_packet_copy+0x14c>
        while (bytes_to_copy)
 8011ebe:	3e20      	subs	r6, #32
            {
                bytes_to_copy -= 32;
                bytes_remaining -= 32;
 8011ec0:	f1a2 0220 	sub.w	r2, r2, #32
        while (bytes_to_copy)
 8011ec4:	d1c1      	bne.n	8011e4a <_nx_ipv6_packet_copy+0x6a>
                bytes_to_copy = 0;
            }
        }

        /* Check if the flag has been set to more data to copy. */
        if (flag & PACKET_MORE_TO_COPY)
 8011ec6:	f1ba 0f00 	cmp.w	sl, #0
 8011eca:	d004      	beq.n	8011ed6 <_nx_ipv6_packet_copy+0xf6>
        {
            source_pkt_head -> nx_packet_last = source_pkt -> nx_packet_next;
 8011ecc:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8011ed0:	9b00      	ldr	r3, [sp, #0]
 8011ed2:	f8c3 8018 	str.w	r8, [r3, #24]
            source_pkt = source_pkt_head -> nx_packet_last;
        }

        /* Check if we need to chain another buffer to the packet chain for more data copy. */
        if (flag & PACKET_ADD_BUFFER)
 8011ed6:	f1bb 0f00 	cmp.w	fp, #0
 8011eda:	d004      	beq.n	8011ee6 <_nx_ipv6_packet_copy+0x106>
        {
            dest_pkt_head -> nx_packet_last = dest_pkt -> nx_packet_next;
 8011edc:	f8de e004 	ldr.w	lr, [lr, #4]
 8011ee0:	9b01      	ldr	r3, [sp, #4]
 8011ee2:	f8c3 e018 	str.w	lr, [r3, #24]
            dest_pkt = dest_pkt -> nx_packet_next;
        }

        /* Check if we are done. */
        if (flag & PACKET_COPY_DONE)
 8011ee6:	f1b9 0f00 	cmp.w	r9, #0
 8011eea:	d15b      	bne.n	8011fa4 <_nx_ipv6_packet_copy+0x1c4>
    while (bytes_remaining > 0)
 8011eec:	2a00      	cmp	r2, #0
 8011eee:	d059      	beq.n	8011fa4 <_nx_ipv6_packet_copy+0x1c4>
        if ((source_pkt == NX_NULL) || (dest_pkt == NX_NULL))
 8011ef0:	f1b8 0f00 	cmp.w	r8, #0
 8011ef4:	d002      	beq.n	8011efc <_nx_ipv6_packet_copy+0x11c>
 8011ef6:	f1be 0f00 	cmp.w	lr, #0
 8011efa:	d183      	bne.n	8011e04 <_nx_ipv6_packet_copy+0x24>
            return(NX_NOT_SUCCESSFUL);
 8011efc:	2043      	movs	r0, #67	; 0x43
            break;
        }
    }

    return(NX_SUCCESS);
}
 8011efe:	b003      	add	sp, #12
 8011f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            switch (bytes_to_copy >> 2)
 8011f04:	4627      	mov	r7, r4
 8011f06:	4684      	mov	ip, r0
 8011f08:	461c      	mov	r4, r3
 8011f0a:	4608      	mov	r0, r1
 8011f0c:	e7c7      	b.n	8011e9e <_nx_ipv6_packet_copy+0xbe>
 8011f0e:	46a4      	mov	ip, r4
 8011f10:	4607      	mov	r7, r0
 8011f12:	461c      	mov	r4, r3
 8011f14:	4608      	mov	r0, r1
 8011f16:	4663      	mov	r3, ip
 8011f18:	4639      	mov	r1, r7
 8011f1a:	e7b7      	b.n	8011e8c <_nx_ipv6_packet_copy+0xac>
                *dest_ptr++ = *source_ptr++;
 8011f1c:	461f      	mov	r7, r3
                *dest_ptr++ = *source_ptr++;
 8011f1e:	3108      	adds	r1, #8
                *dest_ptr++ = *source_ptr++;
 8011f20:	f847 5b08 	str.w	r5, [r7], #8
                *dest_ptr++ = *source_ptr++;
 8011f24:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8011f28:	605d      	str	r5, [r3, #4]
 8011f2a:	463b      	mov	r3, r7
                switch (bytes_to_copy & 3)
 8011f2c:	f006 0503 	and.w	r5, r6, #3
 8011f30:	2d02      	cmp	r5, #2
 8011f32:	d010      	beq.n	8011f56 <_nx_ipv6_packet_copy+0x176>
 8011f34:	2d03      	cmp	r5, #3
 8011f36:	d016      	beq.n	8011f66 <_nx_ipv6_packet_copy+0x186>
 8011f38:	2d01      	cmp	r5, #1
 8011f3a:	d011      	beq.n	8011f60 <_nx_ipv6_packet_copy+0x180>
                bytes_remaining -= bytes_to_copy;
 8011f3c:	1b92      	subs	r2, r2, r6
 8011f3e:	e7c2      	b.n	8011ec6 <_nx_ipv6_packet_copy+0xe6>
                *dest_ptr++ = *source_ptr++;
 8011f40:	601d      	str	r5, [r3, #0]
                switch (bytes_to_copy & 3)
 8011f42:	f006 0503 	and.w	r5, r6, #3
                *dest_ptr++ = *source_ptr++;
 8011f46:	46a4      	mov	ip, r4
 8011f48:	4607      	mov	r7, r0
                switch (bytes_to_copy & 3)
 8011f4a:	2d02      	cmp	r5, #2
                *dest_ptr++ = *source_ptr++;
 8011f4c:	461c      	mov	r4, r3
 8011f4e:	4608      	mov	r0, r1
 8011f50:	4663      	mov	r3, ip
 8011f52:	4639      	mov	r1, r7
                switch (bytes_to_copy & 3)
 8011f54:	d1ee      	bne.n	8011f34 <_nx_ipv6_packet_copy+0x154>
                    *dest_byte++ = *source_byte++;
 8011f56:	7808      	ldrb	r0, [r1, #0]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	3101      	adds	r1, #1
 8011f5c:	f803 0c01 	strb.w	r0, [r3, #-1]
                    *dest_byte++ = *source_byte++;
 8011f60:	7809      	ldrb	r1, [r1, #0]
 8011f62:	7019      	strb	r1, [r3, #0]
                    break;
 8011f64:	e7ea      	b.n	8011f3c <_nx_ipv6_packet_copy+0x15c>
                    *dest_byte++ = *source_byte++;
 8011f66:	7905      	ldrb	r5, [r0, #4]
 8011f68:	1d41      	adds	r1, r0, #5
 8011f6a:	1d63      	adds	r3, r4, #5
 8011f6c:	7125      	strb	r5, [r4, #4]
                    *dest_byte++ = *source_byte++;
 8011f6e:	3101      	adds	r1, #1
 8011f70:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8011f74:	7018      	strb	r0, [r3, #0]
 8011f76:	3301      	adds	r3, #1
 8011f78:	e7f2      	b.n	8011f60 <_nx_ipv6_packet_copy+0x180>
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 8011f7a:	190e      	adds	r6, r1, r4
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 8011f7c:	1b00      	subs	r0, r0, r4
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
 8011f7e:	f8ce 500c 	str.w	r5, [lr, #12]
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 8011f82:	f8ce 0024 	str.w	r0, [lr, #36]	; 0x24
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 8011f86:	f8c8 6008 	str.w	r6, [r8, #8]
        while (bytes_to_copy)
 8011f8a:	b17c      	cbz	r4, 8011fac <_nx_ipv6_packet_copy+0x1cc>
 8011f8c:	f04f 0900 	mov.w	r9, #0
 8011f90:	4626      	mov	r6, r4
 8011f92:	f04f 0b02 	mov.w	fp, #2
 8011f96:	46ca      	mov	sl, r9
 8011f98:	e757      	b.n	8011e4a <_nx_ipv6_packet_copy+0x6a>
 8011f9a:	f04f 0900 	mov.w	r9, #0
 8011f9e:	f04f 0a01 	mov.w	sl, #1
 8011fa2:	e73a      	b.n	8011e1a <_nx_ipv6_packet_copy+0x3a>
    return(NX_SUCCESS);
 8011fa4:	2000      	movs	r0, #0
}
 8011fa6:	b003      	add	sp, #12
 8011fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (bytes_to_copy)
 8011fac:	46a1      	mov	r9, r4
 8011fae:	e795      	b.n	8011edc <_nx_ipv6_packet_copy+0xfc>
 8011fb0:	46b3      	mov	fp, r6
 8011fb2:	e788      	b.n	8011ec6 <_nx_ipv6_packet_copy+0xe6>

08011fb4 <_nx_ipv6_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv6_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8011fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Points to the base of IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8011fb8:	688e      	ldr	r6, [r1, #8]
{
 8011fba:	460d      	mov	r5, r1
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);

    pkt_length = (UINT)((ip_header_ptr -> nx_ip_header_word_1 >> 16) + sizeof(NX_IPV6_HEADER));

    /* Make sure the packet length field matches the payload length field in the IPv6 header. */
    if (packet_ptr -> nx_packet_length != (ULONG)pkt_length)
 8011fbc:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 8011fbe:	4607      	mov	r7, r0
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8011fc0:	6872      	ldr	r2, [r6, #4]
 8011fc2:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 8011fc6:	0a1b      	lsrs	r3, r3, #8
 8011fc8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8011fcc:	ea83 2332 	eor.w	r3, r3, r2, ror #8
    pkt_length = (UINT)((ip_header_ptr -> nx_ip_header_word_1 >> 16) + sizeof(NX_IPV6_HEADER));
 8011fd0:	0c1c      	lsrs	r4, r3, #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8011fd2:	6073      	str	r3, [r6, #4]
    pkt_length = (UINT)((ip_header_ptr -> nx_ip_header_word_1 >> 16) + sizeof(NX_IPV6_HEADER));
 8011fd4:	3428      	adds	r4, #40	; 0x28
    if (packet_ptr -> nx_packet_length != (ULONG)pkt_length)
 8011fd6:	42a1      	cmp	r1, r4
 8011fd8:	d027      	beq.n	801202a <_nx_ipv6_packet_receive+0x76>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < (ULONG)pkt_length)
 8011fda:	d365      	bcc.n	80120a8 <_nx_ipv6_packet_receive+0xf4>

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 8011fdc:	626c      	str	r4, [r5, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 8011fde:	1b0c      	subs	r4, r1, r4
 8011fe0:	d023      	beq.n	801202a <_nx_ipv6_packet_receive+0x76>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 8011fe2:	69a8      	ldr	r0, [r5, #24]
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d064      	beq.n	80120b2 <_nx_ipv6_packet_receive+0xfe>
            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 8011fe8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011fec:	1ad3      	subs	r3, r2, r3
 8011fee:	429c      	cmp	r4, r3
 8011ff0:	d319      	bcc.n	8012026 <_nx_ipv6_packet_receive+0x72>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 8011ff2:	f04f 0800 	mov.w	r8, #0
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 8011ff6:	1ae4      	subs	r4, r4, r3
                while (before_last_packet -> nx_packet_next != last_packet)
 8011ff8:	462a      	mov	r2, r5
 8011ffa:	e000      	b.n	8011ffe <_nx_ipv6_packet_receive+0x4a>
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	6853      	ldr	r3, [r2, #4]
 8012000:	4283      	cmp	r3, r0
 8012002:	d1fb      	bne.n	8011ffc <_nx_ipv6_packet_receive+0x48>
                before_last_packet -> nx_packet_next =  NX_NULL;
 8012004:	f8c2 8004 	str.w	r8, [r2, #4]
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 8012008:	42aa      	cmp	r2, r5
 801200a:	bf08      	it	eq
 801200c:	2200      	moveq	r2, #0
 801200e:	61aa      	str	r2, [r5, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 8012010:	f7f4 fcee 	bl	80069f0 <_nx_packet_release>
        while (delta)
 8012014:	b14c      	cbz	r4, 801202a <_nx_ipv6_packet_receive+0x76>
            if (packet_ptr -> nx_packet_last == NX_NULL)
 8012016:	69a8      	ldr	r0, [r5, #24]
 8012018:	2800      	cmp	r0, #0
 801201a:	d04a      	beq.n	80120b2 <_nx_ipv6_packet_receive+0xfe>
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 801201c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8012020:	1ad3      	subs	r3, r2, r3
 8012022:	42a3      	cmp	r3, r4
 8012024:	d9e7      	bls.n	8011ff6 <_nx_ipv6_packet_receive+0x42>
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 8012026:	1b12      	subs	r2, r2, r4
 8012028:	60c2      	str	r2, [r0, #12]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Byte swap the rest of the IPv6 header fields. */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 801202a:	6832      	ldr	r2, [r6, #0]
 801202c:	46b1      	mov	r9, r6
 801202e:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 8012032:	0a1b      	lsrs	r3, r3, #8
 8012034:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8012038:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 801203c:	f849 3b18 	str.w	r3, [r9], #24
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8012040:	4648      	mov	r0, r9
 8012042:	f7f4 faf9 	bl	8006638 <_nx_ipv6_address_change_endian>
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8012046:	f106 0008 	add.w	r0, r6, #8
 801204a:	f7f4 faf5 	bl	8006638 <_nx_ipv6_address_change_endian>

    /* Get a pointer to the first address in the address list for this interface (e.g.
       the interface the packet was received on). */
    interface_ipv6_address_next = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nxd_interface_ipv6_address_list_head;
 801204e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012050:	6a1c      	ldr	r4, [r3, #32]

    /* Check if this packet is intended for this host by looping through all the addresses in the IP interface table for a match. */
    while (interface_ipv6_address_next)
 8012052:	b914      	cbnz	r4, 801205a <_nx_ipv6_packet_receive+0xa6>
 8012054:	e028      	b.n	80120a8 <_nx_ipv6_packet_receive+0xf4>
                break;
            }
        }

        /* No match yet, get the next address. */
        interface_ipv6_address_next = interface_ipv6_address_next -> nxd_ipv6_address_next;
 8012056:	69a4      	ldr	r4, [r4, #24]
    while (interface_ipv6_address_next)
 8012058:	b334      	cbz	r4, 80120a8 <_nx_ipv6_packet_receive+0xf4>
        if (interface_ipv6_address_next -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_UNKNOWN)
 801205a:	78a3      	ldrb	r3, [r4, #2]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d0fa      	beq.n	8012056 <_nx_ipv6_packet_receive+0xa2>
                                          interface_ipv6_address_next -> nxd_ipv6_address))
 8012060:	f104 0808 	add.w	r8, r4, #8
            if (CHECK_IPV6_ADDRESSES_SAME(ip_header_ptr -> nx_ip_header_destination_ip,
 8012064:	4648      	mov	r0, r9
 8012066:	4641      	mov	r1, r8
 8012068:	f7f4 fa06 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
            else if (CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS(ip_header_ptr -> nx_ip_header_destination_ip,
 801206c:	4641      	mov	r1, r8
            if (CHECK_IPV6_ADDRESSES_SAME(ip_header_ptr -> nx_ip_header_destination_ip,
 801206e:	b920      	cbnz	r0, 801207a <_nx_ipv6_packet_receive+0xc6>
            else if (CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS(ip_header_ptr -> nx_ip_header_destination_ip,
 8012070:	4648      	mov	r0, r9
 8012072:	f7f4 fa45 	bl	8006500 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS>
 8012076:	2800      	cmp	r0, #0
 8012078:	d0ed      	beq.n	8012056 <_nx_ipv6_packet_receive+0xa2>
       Update the IP header pointer, packet length and packet prepend pointer
       to point to the next header (either IP option header or
       upper layer protocol header.
     */

    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_IPV6_HEADER);
 801207a:	68a9      	ldr	r1, [r5, #8]
    packet_ptr -> nx_packet_length -= (ULONG)sizeof(NX_IPV6_HEADER);

    packet_ptr -> nx_packet_option_offset = 6;
 801207c:	f04f 0c06 	mov.w	ip, #6
    packet_ptr -> nx_packet_length -= (ULONG)sizeof(NX_IPV6_HEADER);
 8012080:	6a6b      	ldr	r3, [r5, #36]	; 0x24

    /* Increment the IP packet bytes received (not including the header).  */
    ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
#endif

    error = _nx_ip_dispatch_process(ip_ptr, packet_ptr, next_header_type);
 8012082:	4638      	mov	r0, r7
    next_header_type = (UCHAR)((ip_header_ptr -> nx_ip_header_word_1 >> 8) & 0xFF);
 8012084:	6872      	ldr	r2, [r6, #4]
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_IPV6_HEADER);
 8012086:	3128      	adds	r1, #40	; 0x28
    packet_ptr -> nx_packet_length -= (ULONG)sizeof(NX_IPV6_HEADER);
 8012088:	3b28      	subs	r3, #40	; 0x28
    packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = incoming_address;
 801208a:	636c      	str	r4, [r5, #52]	; 0x34
    packet_ptr -> nx_packet_option_state = (UCHAR)IPV6_BASE_HEADER;
 801208c:	2400      	movs	r4, #0
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_IPV6_HEADER);
 801208e:	60a9      	str	r1, [r5, #8]
    error = _nx_ip_dispatch_process(ip_ptr, packet_ptr, next_header_type);
 8012090:	f3c2 2207 	ubfx	r2, r2, #8, #8
    packet_ptr -> nx_packet_length -= (ULONG)sizeof(NX_IPV6_HEADER);
 8012094:	626b      	str	r3, [r5, #36]	; 0x24
    packet_ptr -> nx_packet_option_offset = 6;
 8012096:	f8a5 c02e 	strh.w	ip, [r5, #46]	; 0x2e
    error = _nx_ip_dispatch_process(ip_ptr, packet_ptr, next_header_type);
 801209a:	4629      	mov	r1, r5
    packet_ptr -> nx_packet_option_state = (UCHAR)IPV6_BASE_HEADER;
 801209c:	85ac      	strh	r4, [r5, #44]	; 0x2c
    error = _nx_ip_dispatch_process(ip_ptr, packet_ptr, next_header_type);
 801209e:	f7fe fead 	bl	8010dfc <_nx_ip_dispatch_process>

    if (error)
 80120a2:	b908      	cbnz	r0, 80120a8 <_nx_ipv6_packet_receive+0xf4>
    {
        _nx_packet_release(packet_ptr);
    }

    return;
}
 80120a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            _nx_packet_release(packet_ptr);
 80120a8:	4628      	mov	r0, r5
}
 80120aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            _nx_packet_release(packet_ptr);
 80120ae:	f7f4 bc9f 	b.w	80069f0 <_nx_packet_release>
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 80120b2:	68eb      	ldr	r3, [r5, #12]
 80120b4:	1b1b      	subs	r3, r3, r4
 80120b6:	60eb      	str	r3, [r5, #12]
                break;
 80120b8:	e7b7      	b.n	801202a <_nx_ipv6_packet_receive+0x76>
 80120ba:	bf00      	nop

080120bc <_nx_ipv6_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                          ULONG protocol, ULONG payload_size, ULONG hop_limit,
                          ULONG *src_address, ULONG *dest_address)
{
 80120bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UINT                       same_address;
NX_INTERFACE              *if_ptr;
NX_IPV6_DESTINATION_ENTRY *dest_entry_ptr;

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 80120c0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
{
 80120c2:	b096      	sub	sp, #88	; 0x58
ULONG                      fragment = NX_TRUE;
 80120c4:	2601      	movs	r6, #1
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 80120c6:	6864      	ldr	r4, [r4, #4]
ULONG                      fragment = NX_TRUE;
 80120c8:	9607      	str	r6, [sp, #28]
{
 80120ca:	9105      	str	r1, [sp, #20]
 80120cc:	e9dd 861d 	ldrd	r8, r6, [sp, #116]	; 0x74

    /* Interface can not be NULL. */
    NX_ASSERT(if_ptr != NX_NULL);
 80120d0:	b174      	cbz	r4, 80120f0 <_nx_ipv6_packet_send+0x34>

    /* Add IPv6 header. */
    if (_nx_ipv6_header_add(ip_ptr, &packet_ptr, protocol, payload_size,
 80120d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80120d4:	af07      	add	r7, sp, #28
 80120d6:	4605      	mov	r5, r0
 80120d8:	9100      	str	r1, [sp, #0]
 80120da:	a905      	add	r1, sp, #20
 80120dc:	9703      	str	r7, [sp, #12]
 80120de:	e9cd 8601 	strd	r8, r6, [sp, #4]
 80120e2:	f7ff fe2b 	bl	8011d3c <_nx_ipv6_header_add>
 80120e6:	4607      	mov	r7, r0
 80120e8:	b158      	cbz	r0, 8012102 <_nx_ipv6_packet_send+0x46>
    /* Driver entry must not be NULL. */
    NX_ASSERT(if_ptr -> nx_interface_link_driver_entry != NX_NULL);

    /* Send the IP packet out on the network via the attached driver.  */
    (if_ptr -> nx_interface_link_driver_entry)(&driver_request);
}
 80120ea:	b016      	add	sp, #88	; 0x58
 80120ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NX_ASSERT(if_ptr != NX_NULL);
 80120f0:	f04f 30ff 	mov.w	r0, #4294967295
 80120f4:	f00b f888 	bl	801d208 <_tx_thread_sleep>
 80120f8:	f04f 30ff 	mov.w	r0, #4294967295
 80120fc:	f00b f884 	bl	801d208 <_tx_thread_sleep>
 8012100:	e7f6      	b.n	80120f0 <_nx_ipv6_packet_send+0x34>
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8012102:	9a05      	ldr	r2, [sp, #20]
    same_address = (UINT)CHECK_IPV6_ADDRESSES_SAME(dest_address, src_address);
 8012104:	4641      	mov	r1, r8
 8012106:	4630      	mov	r0, r6
    next_hop_mtu = if_ptr -> nx_interface_ip_mtu_size;
 8012108:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 801210c:	6893      	ldr	r3, [r2, #8]
 801210e:	6393      	str	r3, [r2, #56]	; 0x38
    same_address = (UINT)CHECK_IPV6_ADDRESSES_SAME(dest_address, src_address);
 8012110:	f7f4 f9b2 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
    if (same_address == 1)
 8012114:	2801      	cmp	r0, #1
 8012116:	d073      	beq.n	8012200 <_nx_ipv6_packet_send+0x144>
        address_type = IPv6_Address_Type(dest_address);
 8012118:	4630      	mov	r0, r6
 801211a:	f7f4 fa23 	bl	8006564 <IPv6_Address_Type>
    if (address_type == IPV6_ADDRESS_LOOPBACK)
 801211e:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8012122:	d06d      	beq.n	8012200 <_nx_ipv6_packet_send+0x144>
    driver_request.nx_ip_driver_packet               = packet_ptr;
 8012124:	9905      	ldr	r1, [sp, #20]
    driver_request.nx_ip_driver_ptr                  = ip_ptr;
 8012126:	9514      	str	r5, [sp, #80]	; 0x50
    driver_request.nx_ip_driver_command              = NX_LINK_PACKET_SEND;
 8012128:	970e      	str	r7, [sp, #56]	; 0x38
    driver_request.nx_ip_driver_interface            = NX_NULL;
 801212a:	9715      	str	r7, [sp, #84]	; 0x54
    driver_request.nx_ip_driver_packet               = packet_ptr;
 801212c:	9112      	str	r1, [sp, #72]	; 0x48
    if (if_ptr -> nx_interface_address_mapping_needed)
 801212e:	7963      	ldrb	r3, [r4, #5]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d061      	beq.n	80121f8 <_nx_ipv6_packet_send+0x13c>
        if ((dest_address[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 8012134:	6833      	ldr	r3, [r6, #0]
 8012136:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801213a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801213e:	d11b      	bne.n	8012178 <_nx_ipv6_packet_send+0xbc>
            driver_request.nx_ip_driver_physical_address_lsw = dest_address[3];
 8012140:	68f2      	ldr	r2, [r6, #12]
            driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 8012142:	f243 3333 	movw	r3, #13107	; 0x3333
            driver_request.nx_ip_driver_interface            = if_ptr;
 8012146:	9415      	str	r4, [sp, #84]	; 0x54
            driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 8012148:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    if (packet_ptr -> nx_packet_length > next_hop_mtu)
 801214c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801214e:	4543      	cmp	r3, r8
 8012150:	d80d      	bhi.n	801216e <_nx_ipv6_packet_send+0xb2>
    NX_ASSERT(if_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8012152:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012154:	b113      	cbz	r3, 801215c <_nx_ipv6_packet_send+0xa0>
    (if_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8012156:	a80e      	add	r0, sp, #56	; 0x38
 8012158:	4798      	blx	r3
 801215a:	e7c6      	b.n	80120ea <_nx_ipv6_packet_send+0x2e>
    NX_ASSERT(if_ptr -> nx_interface_link_driver_entry != NX_NULL);
 801215c:	f04f 30ff 	mov.w	r0, #4294967295
 8012160:	f00b f852 	bl	801d208 <_tx_thread_sleep>
 8012164:	f04f 30ff 	mov.w	r0, #4294967295
 8012168:	f00b f84e 	bl	801d208 <_tx_thread_sleep>
 801216c:	e7f6      	b.n	801215c <_nx_ipv6_packet_send+0xa0>
            _nx_ipv6_fragment_process(&driver_request, next_hop_mtu);
 801216e:	4641      	mov	r1, r8
 8012170:	a80e      	add	r0, sp, #56	; 0x38
 8012172:	f7ff fcd9 	bl	8011b28 <_nx_ipv6_fragment_process>
        return;
 8012176:	e7b8      	b.n	80120ea <_nx_ipv6_packet_send+0x2e>
            SET_UNSPECIFIED_ADDRESS(next_hop_address);
 8012178:	a80a      	add	r0, sp, #40	; 0x28
        ND_CACHE_ENTRY *NDCacheEntry = NX_NULL;
 801217a:	9709      	str	r7, [sp, #36]	; 0x24
            SET_UNSPECIFIED_ADDRESS(next_hop_address);
 801217c:	f7f4 f9a0 	bl	80064c0 <SET_UNSPECIFIED_ADDRESS>
            status = _nx_icmpv6_dest_table_find(ip_ptr, dest_address, &dest_entry_ptr, 0, 0);
 8012180:	9700      	str	r7, [sp, #0]
 8012182:	463b      	mov	r3, r7
 8012184:	aa08      	add	r2, sp, #32
 8012186:	4631      	mov	r1, r6
 8012188:	4628      	mov	r0, r5
 801218a:	f003 fc39 	bl	8015a00 <_nx_icmpv6_dest_table_find>
            if (status != NX_SUCCESS)
 801218e:	2800      	cmp	r0, #0
 8012190:	f000 8082 	beq.w	8012298 <_nx_ipv6_packet_send+0x1dc>
                if (_nxd_ipv6_search_onlink(ip_ptr, dest_address))
 8012194:	4631      	mov	r1, r6
 8012196:	4628      	mov	r0, r5
 8012198:	f003 fa08 	bl	80155ac <_nxd_ipv6_search_onlink>
 801219c:	2800      	cmp	r0, #0
 801219e:	d05f      	beq.n	8012260 <_nx_ipv6_packet_send+0x1a4>
                    COPY_IPV6_ADDRESS(dest_address, next_hop_address);
 80121a0:	4630      	mov	r0, r6
 80121a2:	a90a      	add	r1, sp, #40	; 0x28
 80121a4:	f7f4 f992 	bl	80064cc <COPY_IPV6_ADDRESS>
                                                       NX_WAIT_FOREVER, packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
 80121a8:	9905      	ldr	r1, [sp, #20]
                    status = _nx_icmpv6_dest_table_add(ip_ptr, dest_address, &dest_entry_ptr,
 80121aa:	f04f 33ff 	mov.w	r3, #4294967295
 80121ae:	aa08      	add	r2, sp, #32
 80121b0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80121b2:	4631      	mov	r1, r6
 80121b4:	9301      	str	r3, [sp, #4]
 80121b6:	ab0a      	add	r3, sp, #40	; 0x28
 80121b8:	9002      	str	r0, [sp, #8]
 80121ba:	4628      	mov	r0, r5
 80121bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80121be:	9600      	str	r6, [sp, #0]
 80121c0:	f003 fb84 	bl	80158cc <_nx_icmpv6_dest_table_add>
                    if (status == NX_SUCCESS)
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d132      	bne.n	801222e <_nx_ipv6_packet_send+0x172>
                        NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 80121c8:	9b08      	ldr	r3, [sp, #32]
 80121ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121cc:	9209      	str	r2, [sp, #36]	; 0x24
            if ((NDCacheEntry -> nx_nd_cache_nd_status >= ND_CACHE_STATE_REACHABLE) &&
 80121ce:	7e56      	ldrb	r6, [r2, #25]
 80121d0:	9905      	ldr	r1, [sp, #20]
 80121d2:	1eb3      	subs	r3, r6, #2
 80121d4:	2b03      	cmp	r3, #3
 80121d6:	d82e      	bhi.n	8012236 <_nx_ipv6_packet_send+0x17a>
                driver_request.nx_ip_driver_physical_address_msw = ((ULONG)mac_addr[0] << 8) | mac_addr[1];
 80121d8:	8a13      	ldrh	r3, [r2, #16]
                if (NDCacheEntry -> nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 80121da:	2e03      	cmp	r6, #3
                driver_request.nx_ip_driver_physical_address_msw = ((ULONG)mac_addr[0] << 8) | mac_addr[1];
 80121dc:	ba5b      	rev16	r3, r3
 80121de:	b29b      	uxth	r3, r3
 80121e0:	9310      	str	r3, [sp, #64]	; 0x40
 80121e2:	f8d2 3012 	ldr.w	r3, [r2, #18]
                driver_request.nx_ip_driver_interface            = if_ptr;
 80121e6:	9415      	str	r4, [sp, #84]	; 0x54
 80121e8:	ba1b      	rev	r3, r3
                driver_request.nx_ip_driver_physical_address_lsw =
 80121ea:	9311      	str	r3, [sp, #68]	; 0x44
                if (NDCacheEntry -> nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 80121ec:	d1ae      	bne.n	801214c <_nx_ipv6_packet_send+0x90>
                    NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_DELAY;
 80121ee:	2004      	movs	r0, #4
                    NDCacheEntry -> nx_nd_cache_timer_tick = NX_DELAY_FIRST_PROBE_TIME;
 80121f0:	2305      	movs	r3, #5
                    NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_DELAY;
 80121f2:	7650      	strb	r0, [r2, #25]
                    NDCacheEntry -> nx_nd_cache_timer_tick = NX_DELAY_FIRST_PROBE_TIME;
 80121f4:	61d3      	str	r3, [r2, #28]
 80121f6:	e7a9      	b.n	801214c <_nx_ipv6_packet_send+0x90>
        driver_request.nx_ip_driver_physical_address_lsw = 0;
 80121f8:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
        driver_request.nx_ip_driver_interface            = if_ptr;
 80121fc:	9415      	str	r4, [sp, #84]	; 0x54
 80121fe:	e7a5      	b.n	801214c <_nx_ipv6_packet_send+0x90>
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 8012200:	2300      	movs	r3, #0
 8012202:	f8d5 2638 	ldr.w	r2, [r5, #1592]	; 0x638
 8012206:	a90e      	add	r1, sp, #56	; 0x38
 8012208:	9805      	ldr	r0, [sp, #20]
 801220a:	f000 fc2f 	bl	8012a6c <_nx_packet_copy>
 801220e:	b970      	cbnz	r0, 801222e <_nx_ipv6_packet_send+0x172>
            if (packet_copy -> nx_packet_interface_capability_flag)
 8012210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012214:	b11a      	cbz	r2, 801221e <_nx_ipv6_packet_send+0x162>
                _nx_ip_packet_checksum_compute(packet_copy);
 8012216:	4618      	mov	r0, r3
 8012218:	f7ff fa9c 	bl	8011754 <_nx_ip_packet_checksum_compute>
 801221c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            packet_copy -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 801221e:	9a05      	ldr	r2, [sp, #20]
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 8012220:	4628      	mov	r0, r5
 8012222:	4619      	mov	r1, r3
            packet_copy -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8012224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012226:	6852      	ldr	r2, [r2, #4]
 8012228:	635a      	str	r2, [r3, #52]	; 0x34
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 801222a:	f7ef ffe5 	bl	80021f8 <_nx_ip_packet_deferred_receive>
                    _nx_packet_transmit_release(packet_ptr);
 801222e:	9805      	ldr	r0, [sp, #20]
 8012230:	f7f4 fc44 	bl	8006abc <_nx_packet_transmit_release>
                    return;
 8012234:	e759      	b.n	80120ea <_nx_ipv6_packet_send+0x2e>
                packet_ptr -> nx_packet_queue_next = NX_NULL;
 8012236:	2300      	movs	r3, #0
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_head == NX_NULL)
 8012238:	6a90      	ldr	r0, [r2, #40]	; 0x28
                packet_ptr -> nx_packet_queue_next = NX_NULL;
 801223a:	61cb      	str	r3, [r1, #28]
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_head == NX_NULL)
 801223c:	2800      	cmp	r0, #0
 801223e:	d03b      	beq.n	80122b8 <_nx_ipv6_packet_send+0x1fc>
                NDCacheEntry -> nx_nd_cache_packet_waiting_tail -> nx_packet_queue_next = packet_ptr;
 8012240:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8012242:	61d9      	str	r1, [r3, #28]
                NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length++;
 8012244:	7e94      	ldrb	r4, [r2, #26]
                NDCacheEntry -> nx_nd_cache_packet_waiting_tail = packet_ptr;
 8012246:	62d1      	str	r1, [r2, #44]	; 0x2c
                NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length++;
 8012248:	1c63      	adds	r3, r4, #1
 801224a:	b2db      	uxtb	r3, r3
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length > NX_ND_MAX_QUEUE_DEPTH)
 801224c:	2b04      	cmp	r3, #4
                NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length++;
 801224e:	7693      	strb	r3, [r2, #26]
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length > NX_ND_MAX_QUEUE_DEPTH)
 8012250:	f67f af4b 	bls.w	80120ea <_nx_ipv6_packet_send+0x2e>
                    NDCacheEntry -> nx_nd_cache_packet_waiting_head = remove_packet -> nx_packet_queue_next;
 8012254:	69c3      	ldr	r3, [r0, #28]
                    NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length--;
 8012256:	7694      	strb	r4, [r2, #26]
                    NDCacheEntry -> nx_nd_cache_packet_waiting_head = remove_packet -> nx_packet_queue_next;
 8012258:	6293      	str	r3, [r2, #40]	; 0x28
                    _nx_packet_transmit_release(remove_packet);
 801225a:	f7f4 fc2f 	bl	8006abc <_nx_packet_transmit_release>
 801225e:	e744      	b.n	80120ea <_nx_ipv6_packet_send+0x2e>
                else if (_nxd_ipv6_router_lookup(ip_ptr, if_ptr, next_hop_address, /*lint -e{929}*/ (void **)&NDCacheEntry) == NX_SUCCESS)
 8012260:	ab09      	add	r3, sp, #36	; 0x24
 8012262:	aa0a      	add	r2, sp, #40	; 0x28
 8012264:	4621      	mov	r1, r4
 8012266:	4628      	mov	r0, r5
 8012268:	f002 ffac 	bl	80151c4 <_nxd_ipv6_router_lookup>
 801226c:	2800      	cmp	r0, #0
 801226e:	d1de      	bne.n	801222e <_nx_ipv6_packet_send+0x172>
                                                       NX_WAIT_FOREVER, packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
 8012270:	9b05      	ldr	r3, [sp, #20]
                    status = _nx_icmpv6_dest_table_add(ip_ptr, dest_address, &dest_entry_ptr,
 8012272:	f04f 30ff 	mov.w	r0, #4294967295
 8012276:	4631      	mov	r1, r6
 8012278:	aa08      	add	r2, sp, #32
 801227a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801227c:	ab0a      	add	r3, sp, #40	; 0x28
 801227e:	9001      	str	r0, [sp, #4]
 8012280:	4628      	mov	r0, r5
 8012282:	9602      	str	r6, [sp, #8]
 8012284:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012286:	9600      	str	r6, [sp, #0]
 8012288:	f003 fb20 	bl	80158cc <_nx_icmpv6_dest_table_add>
                    if ((status == NX_SUCCESS) && !NDCacheEntry)
 801228c:	2800      	cmp	r0, #0
 801228e:	d1ce      	bne.n	801222e <_nx_ipv6_packet_send+0x172>
 8012290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012292:	2a00      	cmp	r2, #0
 8012294:	d19b      	bne.n	80121ce <_nx_ipv6_packet_send+0x112>
 8012296:	e797      	b.n	80121c8 <_nx_ipv6_packet_send+0x10c>
                NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 8012298:	9808      	ldr	r0, [sp, #32]
                COPY_IPV6_ADDRESS(dest_entry_ptr -> nx_ipv6_destination_entry_next_hop, next_hop_address);
 801229a:	a90a      	add	r1, sp, #40	; 0x28
                NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 801229c:	6a43      	ldr	r3, [r0, #36]	; 0x24
                COPY_IPV6_ADDRESS(dest_entry_ptr -> nx_ipv6_destination_entry_next_hop, next_hop_address);
 801229e:	3014      	adds	r0, #20
                NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 80122a0:	9309      	str	r3, [sp, #36]	; 0x24
                COPY_IPV6_ADDRESS(dest_entry_ptr -> nx_ipv6_destination_entry_next_hop, next_hop_address);
 80122a2:	f7f4 f913 	bl	80064cc <COPY_IPV6_ADDRESS>
                NX_ASSERT(NDCacheEntry -> nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID);
 80122a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122a8:	7e53      	ldrb	r3, [r2, #25]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d18f      	bne.n	80121ce <_nx_ipv6_packet_send+0x112>
 80122ae:	f04f 30ff 	mov.w	r0, #4294967295
 80122b2:	f00a ffa9 	bl	801d208 <_tx_thread_sleep>
 80122b6:	e7fa      	b.n	80122ae <_nx_ipv6_packet_send+0x1f2>
                    if (ip_ptr -> nx_ip_icmpv6_packet_process)
 80122b8:	f8d5 388c 	ldr.w	r3, [r5, #2188]	; 0x88c
 80122bc:	b1c3      	cbz	r3, 80122f0 <_nx_ipv6_packet_send+0x234>
                        NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length = 1;
 80122be:	2001      	movs	r0, #1
                        if (NDCacheEntry -> nx_nd_cache_nd_status == ND_CACHE_STATE_CREATED)
 80122c0:	2e06      	cmp	r6, #6
                        NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length = 1;
 80122c2:	7690      	strb	r0, [r2, #26]
                        NDCacheEntry -> nx_nd_cache_outgoing_address = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 80122c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
                            NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INCOMPLETE;
 80122c6:	bf08      	it	eq
 80122c8:	7650      	strbeq	r0, [r2, #25]
                        _nx_icmpv6_send_ns(ip_ptr, next_hop_address,
 80122ca:	2000      	movs	r0, #0
                        NDCacheEntry -> nx_nd_cache_outgoing_address = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 80122cc:	6313      	str	r3, [r2, #48]	; 0x30
                        NDCacheEntry -> nx_nd_cache_interface_ptr = if_ptr;
 80122ce:	6214      	str	r4, [r2, #32]
                        NDCacheEntry -> nx_nd_cache_packet_waiting_tail = packet_ptr;
 80122d0:	e9c2 110a 	strd	r1, r1, [r2, #40]	; 0x28
                        _nx_icmpv6_send_ns(ip_ptr, next_hop_address,
 80122d4:	9201      	str	r2, [sp, #4]
 80122d6:	a90a      	add	r1, sp, #40	; 0x28
 80122d8:	9000      	str	r0, [sp, #0]
 80122da:	2201      	movs	r2, #1
 80122dc:	4628      	mov	r0, r5
 80122de:	f7fe fa3d 	bl	801075c <_nx_icmpv6_send_ns>
                        NDCacheEntry -> nx_nd_cache_num_solicit = NX_MAX_MULTICAST_SOLICIT - 1;
 80122e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122e4:	2202      	movs	r2, #2
 80122e6:	761a      	strb	r2, [r3, #24]
                        NDCacheEntry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_retrans_timer_ticks;
 80122e8:	f8d5 2ee0 	ldr.w	r2, [r5, #3808]	; 0xee0
 80122ec:	61da      	str	r2, [r3, #28]
 80122ee:	e6fc      	b.n	80120ea <_nx_ipv6_packet_send+0x2e>
                        _nx_packet_transmit_release(packet_ptr);
 80122f0:	4608      	mov	r0, r1
 80122f2:	f7f4 fbe3 	bl	8006abc <_nx_packet_transmit_release>
 80122f6:	e6f8      	b.n	80120ea <_nx_ipv6_packet_send+0x2e>

080122f8 <_nx_ipv6_prefix_list_add_entry>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv6_prefix_list_add_entry(NX_IP *ip_ptr, ULONG *prefix,
                                     ULONG prefix_length, ULONG valid_lifetime)
{
 80122f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
       Insert the entry based on the prefix_length.
       Maintain longest-match-first.
     */

    /* Start with the head of the list. */
    current = ip_ptr -> nx_ipv6_prefix_list_ptr;
 80122fc:	f8d0 5ed4 	ldr.w	r5, [r0, #3796]	; 0xed4
{
 8012300:	4680      	mov	r8, r0
 8012302:	468a      	mov	sl, r1
 8012304:	4616      	mov	r6, r2
 8012306:	4699      	mov	r9, r3

    /* Find where we should insert the new element. */
    while (current)
 8012308:	2d00      	cmp	r5, #0
 801230a:	d07d      	beq.n	8012408 <_nx_ipv6_prefix_list_add_entry+0x110>
    {

        /* Search for the right location based on longest-prefix-match. */
        if (prefix_length > current -> nx_ipv6_prefix_entry_prefix_length)
 801230c:	692b      	ldr	r3, [r5, #16]
 801230e:	429a      	cmp	r2, r3
 8012310:	d906      	bls.n	8012320 <_nx_ipv6_prefix_list_add_entry+0x28>
 8012312:	e01b      	b.n	801234c <_nx_ipv6_prefix_list_add_entry+0x54>
            }
        }

        /* Move to next entry. */
        prev = current;
        current = current -> nx_ipv6_prefix_entry_next;
 8012314:	69ec      	ldr	r4, [r5, #28]
    while (current)
 8012316:	b1dc      	cbz	r4, 8012350 <_nx_ipv6_prefix_list_add_entry+0x58>
        if (prefix_length > current -> nx_ipv6_prefix_entry_prefix_length)
 8012318:	6923      	ldr	r3, [r4, #16]
 801231a:	42b3      	cmp	r3, r6
 801231c:	d318      	bcc.n	8012350 <_nx_ipv6_prefix_list_add_entry+0x58>
 801231e:	4625      	mov	r5, r4
        if (prefix_length == current -> nx_ipv6_prefix_entry_prefix_length)
 8012320:	42b3      	cmp	r3, r6
 8012322:	d1f7      	bne.n	8012314 <_nx_ipv6_prefix_list_add_entry+0x1c>
            if (CHECK_IPV6_ADDRESSES_SAME(prefix, current -> nx_ipv6_prefix_entry_network_address))
 8012324:	4629      	mov	r1, r5
 8012326:	4650      	mov	r0, sl
 8012328:	f7f4 f8a6 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 801232c:	2800      	cmp	r0, #0
 801232e:	d0f1      	beq.n	8012314 <_nx_ipv6_prefix_list_add_entry+0x1c>
                if ((valid_lifetime > 2 * 60 * 60) || /* if received lifetime is greater than 2 hours */
 8012330:	f5b9 5fe1 	cmp.w	r9, #7200	; 0x1c20
 8012334:	d86a      	bhi.n	801240c <_nx_ipv6_prefix_list_add_entry+0x114>
                    (valid_lifetime > current -> nx_ipv6_prefix_entry_valid_lifetime))
 8012336:	696b      	ldr	r3, [r5, #20]
                if ((valid_lifetime > 2 * 60 * 60) || /* if received lifetime is greater than 2 hours */
 8012338:	454b      	cmp	r3, r9
 801233a:	d367      	bcc.n	801240c <_nx_ipv6_prefix_list_add_entry+0x114>
                else if (current -> nx_ipv6_prefix_entry_valid_lifetime <= 2 * 60 * 60)
 801233c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8012340:	d968      	bls.n	8012414 <_nx_ipv6_prefix_list_add_entry+0x11c>
                    current -> nx_ipv6_prefix_entry_valid_lifetime = 2 * 60 * 60;
 8012342:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
                return(NX_DUPLICATED_ENTRY);
 8012346:	2052      	movs	r0, #82	; 0x52
                    current -> nx_ipv6_prefix_entry_valid_lifetime = 2 * 60 * 60;
 8012348:	616b      	str	r3, [r5, #20]
 801234a:	e048      	b.n	80123de <_nx_ipv6_prefix_list_add_entry+0xe6>
        if (prefix_length > current -> nx_ipv6_prefix_entry_prefix_length)
 801234c:	462c      	mov	r4, r5
NX_IPV6_PREFIX_ENTRY *prev = NX_NULL; /* Pointer to the location where the
 801234e:	2500      	movs	r5, #0
    /* We fall into this case if prefix length is greater than
       the prefix length of the current entry.  So we
       need to insert it in front of it. */

    /* Make sure the list is not full. */
    if (ip_ptr -> nx_ipv6_prefix_entry_free_list == NX_NULL)
 8012350:	f8d8 7ed8 	ldr.w	r7, [r8, #3800]	; 0xed8
 8012354:	2f00      	cmp	r7, #0
 8012356:	d054      	beq.n	8012402 <_nx_ipv6_prefix_list_add_entry+0x10a>

    /* Get a new entry from the free list. */
    new_entry = ip_ptr -> nx_ipv6_prefix_entry_free_list;

    /* Move free list to the next element. */
    ip_ptr -> nx_ipv6_prefix_entry_free_list = new_entry -> nx_ipv6_prefix_entry_next;
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	f8c8 3ed8 	str.w	r3, [r8, #3800]	; 0xed8

    if (ip_ptr -> nx_ipv6_prefix_entry_free_list)
 801235e:	b10b      	cbz	r3, 8012364 <_nx_ipv6_prefix_list_add_entry+0x6c>
    {
        ip_ptr -> nx_ipv6_prefix_entry_free_list -> nx_ipv6_prefix_entry_prev = NX_NULL;
 8012360:	2200      	movs	r2, #0
 8012362:	619a      	str	r2, [r3, #24]
    }

    /* Fill information into the new entry */
    COPY_IPV6_ADDRESS(prefix, new_entry -> nx_ipv6_prefix_entry_network_address);
 8012364:	4650      	mov	r0, sl
 8012366:	4639      	mov	r1, r7
 8012368:	f7f4 f8b0 	bl	80064cc <COPY_IPV6_ADDRESS>
    new_entry -> nx_ipv6_prefix_entry_prefix_length = prefix_length;
    new_entry -> nx_ipv6_prefix_entry_valid_lifetime = valid_lifetime;

    /* Zero out the bits in the prefix after the prefix length */
    invalid_bits = (INT)(128 - prefix_length);
 801236c:	f1c6 0380 	rsb	r3, r6, #128	; 0x80
    for (i = 3; i >= 0; i--)
    {

        if (invalid_bits <= 0)
 8012370:	2b00      	cmp	r3, #0
    new_entry -> nx_ipv6_prefix_entry_valid_lifetime = valid_lifetime;
 8012372:	e9c7 6904 	strd	r6, r9, [r7, #16]
        if (invalid_bits <= 0)
 8012376:	dd2b      	ble.n	80123d0 <_nx_ipv6_prefix_list_add_entry+0xd8>
        {
            break;
        }
        if (invalid_bits < 32)
 8012378:	2b1f      	cmp	r3, #31
 801237a:	dd32      	ble.n	80123e2 <_nx_ipv6_prefix_list_add_entry+0xea>
        {
            invalid_mask = (ULONG)(~(((ULONG)1 << invalid_bits) - 1));
        }
        else
        {
            invalid_mask = 0;
 801237c:	2000      	movs	r0, #0
        }

        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 801237e:	68fa      	ldr	r2, [r7, #12]

        invalid_bits -= 32;
 8012380:	f1a3 0120 	sub.w	r1, r3, #32
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 8012384:	4002      	ands	r2, r0
        if (invalid_bits <= 0)
 8012386:	2900      	cmp	r1, #0
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 8012388:	60fa      	str	r2, [r7, #12]
        if (invalid_bits <= 0)
 801238a:	dd21      	ble.n	80123d0 <_nx_ipv6_prefix_list_add_entry+0xd8>
        if (invalid_bits < 32)
 801238c:	291f      	cmp	r1, #31
 801238e:	dc2d      	bgt.n	80123ec <_nx_ipv6_prefix_list_add_entry+0xf4>
            invalid_mask = (ULONG)(~(((ULONG)1 << invalid_bits) - 1));
 8012390:	f04f 32ff 	mov.w	r2, #4294967295
 8012394:	fa02 f101 	lsl.w	r1, r2, r1
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 8012398:	68ba      	ldr	r2, [r7, #8]
        invalid_bits -= 32;
 801239a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 801239e:	400a      	ands	r2, r1
        if (invalid_bits <= 0)
 80123a0:	2800      	cmp	r0, #0
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 80123a2:	60ba      	str	r2, [r7, #8]
        if (invalid_bits <= 0)
 80123a4:	dd14      	ble.n	80123d0 <_nx_ipv6_prefix_list_add_entry+0xd8>
        if (invalid_bits < 32)
 80123a6:	281f      	cmp	r0, #31
 80123a8:	dc22      	bgt.n	80123f0 <_nx_ipv6_prefix_list_add_entry+0xf8>
            invalid_mask = (ULONG)(~(((ULONG)1 << invalid_bits) - 1));
 80123aa:	f04f 32ff 	mov.w	r2, #4294967295
 80123ae:	fa02 f000 	lsl.w	r0, r2, r0
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 80123b2:	687a      	ldr	r2, [r7, #4]
        invalid_bits -= 32;
 80123b4:	3b60      	subs	r3, #96	; 0x60
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 80123b6:	4002      	ands	r2, r0
        if (invalid_bits <= 0)
 80123b8:	2b00      	cmp	r3, #0
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 80123ba:	607a      	str	r2, [r7, #4]
        if (invalid_bits <= 0)
 80123bc:	dd08      	ble.n	80123d0 <_nx_ipv6_prefix_list_add_entry+0xd8>
        if (invalid_bits < 32)
 80123be:	2b1f      	cmp	r3, #31
 80123c0:	dc18      	bgt.n	80123f4 <_nx_ipv6_prefix_list_add_entry+0xfc>
            invalid_mask = (ULONG)(~(((ULONG)1 << invalid_bits) - 1));
 80123c2:	f04f 32ff 	mov.w	r2, #4294967295
 80123c6:	fa02 f303 	lsl.w	r3, r2, r3
        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 80123ca:	683a      	ldr	r2, [r7, #0]
 80123cc:	401a      	ands	r2, r3
 80123ce:	603a      	str	r2, [r7, #0]
    }

    /* Insert the new entry between prev and current. */
    new_entry -> nx_ipv6_prefix_entry_prev = prev;
    new_entry -> nx_ipv6_prefix_entry_next = current;
 80123d0:	e9c7 5406 	strd	r5, r4, [r7, #24]
    if (current)
 80123d4:	b104      	cbz	r4, 80123d8 <_nx_ipv6_prefix_list_add_entry+0xe0>
    {
        current -> nx_ipv6_prefix_entry_prev = new_entry;
 80123d6:	61a7      	str	r7, [r4, #24]
    }
    if (prev)
 80123d8:	b175      	cbz	r5, 80123f8 <_nx_ipv6_prefix_list_add_entry+0x100>
    {
        ip_ptr -> nx_ipv6_prefix_list_ptr = new_entry;
    }

    /* All done. */
    return(NX_SUCCESS);
 80123da:	2000      	movs	r0, #0
        prev -> nx_ipv6_prefix_entry_next = new_entry;
 80123dc:	61ef      	str	r7, [r5, #28]
}
 80123de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            invalid_mask = (ULONG)(~(((ULONG)1 << invalid_bits) - 1));
 80123e2:	f04f 32ff 	mov.w	r2, #4294967295
 80123e6:	fa02 f003 	lsl.w	r0, r2, r3
 80123ea:	e7c8      	b.n	801237e <_nx_ipv6_prefix_list_add_entry+0x86>
            invalid_mask = 0;
 80123ec:	2100      	movs	r1, #0
 80123ee:	e7d3      	b.n	8012398 <_nx_ipv6_prefix_list_add_entry+0xa0>
 80123f0:	2000      	movs	r0, #0
 80123f2:	e7de      	b.n	80123b2 <_nx_ipv6_prefix_list_add_entry+0xba>
 80123f4:	2300      	movs	r3, #0
 80123f6:	e7e8      	b.n	80123ca <_nx_ipv6_prefix_list_add_entry+0xd2>
        ip_ptr -> nx_ipv6_prefix_list_ptr = new_entry;
 80123f8:	f8c8 7ed4 	str.w	r7, [r8, #3796]	; 0xed4
    return(NX_SUCCESS);
 80123fc:	4628      	mov	r0, r5
}
 80123fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return(NX_OVERFLOW);
 8012402:	2003      	movs	r0, #3
}
 8012404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (current)
 8012408:	462c      	mov	r4, r5
 801240a:	e7a1      	b.n	8012350 <_nx_ipv6_prefix_list_add_entry+0x58>
                    current -> nx_ipv6_prefix_entry_valid_lifetime = valid_lifetime;
 801240c:	f8c5 9014 	str.w	r9, [r5, #20]
                return(NX_DUPLICATED_ENTRY);
 8012410:	2052      	movs	r0, #82	; 0x52
                    current -> nx_ipv6_prefix_entry_valid_lifetime = valid_lifetime;
 8012412:	e7e4      	b.n	80123de <_nx_ipv6_prefix_list_add_entry+0xe6>
                return(NX_DUPLICATED_ENTRY);
 8012414:	2052      	movs	r0, #82	; 0x52
 8012416:	e7e2      	b.n	80123de <_nx_ipv6_prefix_list_add_entry+0xe6>

08012418 <_nx_ipv6_prefix_list_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_prefix_list_delete(NX_IP *ip_ptr, ULONG *prefix, INT prefix_length)
{
 8012418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

NX_IPV6_PREFIX_ENTRY *current;


    /* Quick reference to the head of the prefix list. */
    current = ip_ptr -> nx_ipv6_prefix_list_ptr;
 801241a:	f8d0 4ed4 	ldr.w	r4, [r0, #3796]	; 0xed4

    /* Go through all the entries. */
    while (current)
 801241e:	b1a4      	cbz	r4, 801244a <_nx_ipv6_prefix_list_delete+0x32>
 8012420:	4607      	mov	r7, r0
 8012422:	460e      	mov	r6, r1
 8012424:	4615      	mov	r5, r2
 8012426:	e001      	b.n	801242c <_nx_ipv6_prefix_list_delete+0x14>

            /* All done. return */
            return;
        }
        /* Move to the next entry. */
        current = current -> nx_ipv6_prefix_entry_next;
 8012428:	69e4      	ldr	r4, [r4, #28]
    while (current)
 801242a:	b174      	cbz	r4, 801244a <_nx_ipv6_prefix_list_delete+0x32>
        if ((current -> nx_ipv6_prefix_entry_prefix_length == (ULONG)prefix_length) &&
 801242c:	6923      	ldr	r3, [r4, #16]
 801242e:	42ab      	cmp	r3, r5
 8012430:	d1fa      	bne.n	8012428 <_nx_ipv6_prefix_list_delete+0x10>
            CHECK_IPV6_ADDRESSES_SAME(prefix, current -> nx_ipv6_prefix_entry_network_address))
 8012432:	4621      	mov	r1, r4
 8012434:	4630      	mov	r0, r6
 8012436:	f7f4 f81f 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
        if ((current -> nx_ipv6_prefix_entry_prefix_length == (ULONG)prefix_length) &&
 801243a:	2800      	cmp	r0, #0
 801243c:	d0f4      	beq.n	8012428 <_nx_ipv6_prefix_list_delete+0x10>
            _nx_ipv6_prefix_list_delete_entry(ip_ptr, current);
 801243e:	4621      	mov	r1, r4
 8012440:	4638      	mov	r0, r7
    }

    /* No match was found. */
    return;
}
 8012442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            _nx_ipv6_prefix_list_delete_entry(ip_ptr, current);
 8012446:	f000 b801 	b.w	801244c <_nx_ipv6_prefix_list_delete_entry>
}
 801244a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801244c <_nx_ipv6_prefix_list_delete_entry>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_prefix_list_delete_entry(NX_IP *ip_ptr, NX_IPV6_PREFIX_ENTRY *entry)
{
 801244c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Search through each physical interface for a match. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {

        /* Get a pointer to the first address in the interface list. */
        interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8012450:	f8d0 4c68 	ldr.w	r4, [r0, #3176]	; 0xc68
{
 8012454:	b088      	sub	sp, #32
 8012456:	4680      	mov	r8, r0
 8012458:	460e      	mov	r6, r1
        interface_ipv6_address_prev = NX_NULL;

        /* Search the address list for a match. */
        while (interface_ipv6_address)
 801245a:	b364      	cbz	r4, 80124b6 <_nx_ipv6_prefix_list_delete_entry+0x6a>
        interface_ipv6_address_prev = NX_NULL;
 801245c:	2500      	movs	r5, #0
            {

                /* Yes.  Extract the prefix to match on. The prefix length is 64 bits. */
                address_prefix[0] = interface_ipv6_address -> nxd_ipv6_address[0];
                address_prefix[1] = interface_ipv6_address -> nxd_ipv6_address[1];
                address_prefix[2] = 0;
 801245e:	462f      	mov	r7, r5
 8012460:	e003      	b.n	801246a <_nx_ipv6_prefix_list_delete_entry+0x1e>

            /* Set the previous address. */
            interface_ipv6_address_prev = interface_ipv6_address;

            /* Get the next address. */
            interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 8012462:	69a3      	ldr	r3, [r4, #24]
 8012464:	4625      	mov	r5, r4
 8012466:	461c      	mov	r4, r3
        while (interface_ipv6_address)
 8012468:	b32b      	cbz	r3, 80124b6 <_nx_ipv6_prefix_list_delete_entry+0x6a>
            if (interface_ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_UNKNOWN &&
 801246a:	78a3      	ldrb	r3, [r4, #2]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d0f8      	beq.n	8012462 <_nx_ipv6_prefix_list_delete_entry+0x16>
 8012470:	7f63      	ldrb	r3, [r4, #29]
 8012472:	2b04      	cmp	r3, #4
 8012474:	d1f5      	bne.n	8012462 <_nx_ipv6_prefix_list_delete_entry+0x16>
                address_prefix[0] = interface_ipv6_address -> nxd_ipv6_address[0];
 8012476:	68a2      	ldr	r2, [r4, #8]
                if (CHECK_IPV6_ADDRESSES_SAME(address_prefix, entry -> nx_ipv6_prefix_entry_network_address))
 8012478:	4631      	mov	r1, r6
                address_prefix[1] = interface_ipv6_address -> nxd_ipv6_address[1];
 801247a:	68e3      	ldr	r3, [r4, #12]
                if (CHECK_IPV6_ADDRESSES_SAME(address_prefix, entry -> nx_ipv6_prefix_entry_network_address))
 801247c:	4668      	mov	r0, sp
                address_prefix[1] = interface_ipv6_address -> nxd_ipv6_address[1];
 801247e:	e9cd 2300 	strd	r2, r3, [sp]
                address_prefix[3] = 0;
 8012482:	e9cd 7702 	strd	r7, r7, [sp, #8]
                if (CHECK_IPV6_ADDRESSES_SAME(address_prefix, entry -> nx_ipv6_prefix_entry_network_address))
 8012486:	f7f3 fff7 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 801248a:	2800      	cmp	r0, #0
 801248c:	d0e9      	beq.n	8012462 <_nx_ipv6_prefix_list_delete_entry+0x16>
                    interface_ipv6_address -> nxd_ipv6_address_valid = NX_FALSE;
 801248e:	7027      	strb	r7, [r4, #0]
                    interface_ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_UNKNOWN;
 8012490:	70a7      	strb	r7, [r4, #2]
                    interface_ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit = 0;
 8012492:	83a7      	strh	r7, [r4, #28]
 8012494:	69a3      	ldr	r3, [r4, #24]
                    if (interface_ipv6_address_prev == NX_NULL)
 8012496:	b315      	cbz	r5, 80124de <_nx_ipv6_prefix_list_delete_entry+0x92>
                        interface_ipv6_address_prev -> nxd_ipv6_address_next = interface_ipv6_address -> nxd_ipv6_address_next;
 8012498:	61ab      	str	r3, [r5, #24]
                    SET_SOLICITED_NODE_MULTICAST_ADDRESS(multicast_address, interface_ipv6_address -> nxd_ipv6_address);
 801249a:	f104 0508 	add.w	r5, r4, #8
 801249e:	a804      	add	r0, sp, #16
 80124a0:	4629      	mov	r1, r5
 80124a2:	f7f4 f81d 	bl	80064e0 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
                    _nx_ipv6_multicast_leave(ip_ptr, &multicast_address[0], interface_ipv6_address -> nxd_ipv6_address_attached);
 80124a6:	a904      	add	r1, sp, #16
 80124a8:	6862      	ldr	r2, [r4, #4]
 80124aa:	4640      	mov	r0, r8
 80124ac:	f003 fb36 	bl	8015b1c <_nx_ipv6_multicast_leave>
                    SET_UNSPECIFIED_ADDRESS(interface_ipv6_address -> nxd_ipv6_address);
 80124b0:	4628      	mov	r0, r5
 80124b2:	f7f4 f805 	bl	80064c0 <SET_UNSPECIFIED_ADDRESS>
 80124b6:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
        } /* while (interface_ipv6_address) */
    } /* for(i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++) */

    /* Unlink the previous node, if it exists. */
    if (entry -> nx_ipv6_prefix_entry_prev == NX_NULL)
 80124ba:	b19a      	cbz	r2, 80124e4 <_nx_ipv6_prefix_list_delete_entry+0x98>
    {
        ip_ptr -> nx_ipv6_prefix_list_ptr = entry -> nx_ipv6_prefix_entry_next;
    }
    else
    {
        entry -> nx_ipv6_prefix_entry_prev -> nx_ipv6_prefix_entry_next = entry -> nx_ipv6_prefix_entry_next;
 80124bc:	61d3      	str	r3, [r2, #28]
 80124be:	69f3      	ldr	r3, [r6, #28]
    }

    /* Unlink the next node if it exists. */
    if (entry -> nx_ipv6_prefix_entry_next)
 80124c0:	b103      	cbz	r3, 80124c4 <_nx_ipv6_prefix_list_delete_entry+0x78>
    {
        entry -> nx_ipv6_prefix_entry_next -> nx_ipv6_prefix_entry_prev = entry -> nx_ipv6_prefix_entry_prev;
 80124c2:	619a      	str	r2, [r3, #24]
    }

    /* Clean up this entry. */
    entry -> nx_ipv6_prefix_entry_next = NX_NULL;
 80124c4:	2200      	movs	r2, #0
    entry -> nx_ipv6_prefix_entry_prev = NX_NULL;

    /* Put entry onto the free list.*/
    if (ip_ptr -> nx_ipv6_prefix_entry_free_list == NX_NULL)
 80124c6:	f8d8 3ed8 	ldr.w	r3, [r8, #3800]	; 0xed8
    entry -> nx_ipv6_prefix_entry_prev = NX_NULL;
 80124ca:	e9c6 2206 	strd	r2, r2, [r6, #24]
    if (ip_ptr -> nx_ipv6_prefix_entry_free_list == NX_NULL)
 80124ce:	b10b      	cbz	r3, 80124d4 <_nx_ipv6_prefix_list_delete_entry+0x88>
    }
    else
    {

        /* Free list is not empty.  Insert the entry to the head of the list. */
        ip_ptr -> nx_ipv6_prefix_entry_free_list -> nx_ipv6_prefix_entry_prev = entry;
 80124d0:	619e      	str	r6, [r3, #24]
        entry -> nx_ipv6_prefix_entry_next = ip_ptr -> nx_ipv6_prefix_entry_free_list;
 80124d2:	61f3      	str	r3, [r6, #28]
        ip_ptr -> nx_ipv6_prefix_entry_free_list = entry;
 80124d4:	f8c8 6ed8 	str.w	r6, [r8, #3800]	; 0xed8
    }

    /* All done. Return. */
    return;
}
 80124d8:	b008      	add	sp, #32
 80124da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head = interface_ipv6_address -> nxd_ipv6_address_next;
 80124de:	f8c8 3c68 	str.w	r3, [r8, #3176]	; 0xc68
 80124e2:	e7da      	b.n	801249a <_nx_ipv6_prefix_list_delete_entry+0x4e>
        ip_ptr -> nx_ipv6_prefix_list_ptr = entry -> nx_ipv6_prefix_entry_next;
 80124e4:	f8c8 3ed4 	str.w	r3, [r8, #3796]	; 0xed4
 80124e8:	e7ea      	b.n	80124c0 <_nx_ipv6_prefix_list_delete_entry+0x74>
 80124ea:	bf00      	nop

080124ec <_nx_ipv6_process_fragment_option>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_process_fragment_option(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80124ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ip_ptr -> nx_ip_total_fragments_received++;

#endif /* NX_DISABLE_IP_INFO */

    /* If fragmentation is not enabled, we drop this packet. */
    if (!ip_ptr -> nx_ip_fragment_assembly)
 80124ee:	f8d0 37b8 	ldr.w	r3, [r0, #1976]	; 0x7b8
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d048      	beq.n	8012588 <_nx_ipv6_process_fragment_option+0x9c>
        return(NX_OPTION_HEADER_ERROR);
    }

    /* Set a pointer to the starting of the fragment option. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)packet_ptr -> nx_packet_prepend_ptr;
 80124f6:	688e      	ldr	r6, [r1, #8]
 80124f8:	4605      	mov	r5, r0
 80124fa:	460c      	mov	r4, r1

    /* Byte swap the offset_flag.  The identification field is only used for checking matches.
       The absolute value of the Id is not used in arithmatic operations.  Therefore there is
       need to byte-swap this field. */
    NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80124fc:	8873      	ldrh	r3, [r6, #2]
 80124fe:	021a      	lsls	r2, r3, #8
 8012500:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
 8012504:	b292      	uxth	r2, r2

    /* Check whether or not the payload size is not multiple of 8 bytes if the
       M bit is set. */
    if (fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0x0001) /* M bit is set */
 8012506:	07d7      	lsls	r7, r2, #31
    NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 8012508:	8072      	strh	r2, [r6, #2]
    if (fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0x0001) /* M bit is set */
 801250a:	d421      	bmi.n	8012550 <_nx_ipv6_process_fragment_option+0x64>
 801250c:	f022 0307 	bic.w	r3, r2, #7
 8012510:	b299      	uxth	r1, r3
#endif
            return(NX_OPTION_HEADER_ERROR);
        }
    }
    /* M bit is clear: This is the last (tail) packet fragment. */
    else if ((fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0xFFF8) == 0)
 8012512:	2900      	cmp	r1, #0
 8012514:	d040      	beq.n	8012598 <_nx_ipv6_process_fragment_option+0xac>
        /* Continue processing. */
        return(NX_CONTINUE);
    }

    /* Payload size cannot exceeding 65535. */
    if (((fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0xFFF8) + packet_ptr -> nx_packet_length -
 8012516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012518:	3b08      	subs	r3, #8
 801251a:	440b      	add	r3, r1
 801251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012520:	d223      	bcs.n	801256a <_nx_ipv6_process_fragment_option+0x7e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012522:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012526:	b672      	cpsid	i
    TX_DISABLE

    /* In IPv6 IP fragmentation is required. */

    /* Determine if the queue is empty.  */
    if (ip_ptr -> nx_ip_received_fragment_head)
 8012528:	f8d5 37c4 	ldr.w	r3, [r5, #1988]	; 0x7c4
 801252c:	b373      	cbz	r3, 801258c <_nx_ipv6_process_fragment_option+0xa0>
    {

        /* Raw receive queue is not empty, add this packet to the end of the queue.  */
        (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 801252e:	f8d5 17c8 	ldr.w	r1, [r5, #1992]	; 0x7c8
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8012532:	2300      	movs	r3, #0
        (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 8012534:	61cc      	str	r4, [r1, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8012536:	61e3      	str	r3, [r4, #28]
        ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8012538:	f8c5 47c8 	str.w	r4, [r5, #1992]	; 0x7c8
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801253c:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
    /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 8012540:	2200      	movs	r2, #0
 8012542:	f505 60ec 	add.w	r0, r5, #1888	; 0x760
 8012546:	2102      	movs	r1, #2
 8012548:	f00a f8ee 	bl	801c728 <_tx_event_flags_set>
#else
    /* Process the IP fragment reassemble.  */
    (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
#endif /* NX_FRAGMENT_IMMEDIATE_ASSEMBLY */

    return(NX_SUCCESS);
 801254c:	2000      	movs	r0, #0
}
 801254e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        payload_length = ip_header -> nx_ip_header_word_1 >> 16;
 8012550:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8012552:	88db      	ldrh	r3, [r3, #6]
        if ((payload_length & 0xFFF8) != payload_length)
 8012554:	075b      	lsls	r3, r3, #29
 8012556:	d121      	bne.n	801259c <_nx_ipv6_process_fragment_option+0xb0>
 8012558:	f022 0307 	bic.w	r3, r2, #7
 801255c:	b299      	uxth	r1, r3
    if (((fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0xFFF8) + packet_ptr -> nx_packet_length -
 801255e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012560:	3b08      	subs	r3, #8
 8012562:	440b      	add	r3, r1
 8012564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012568:	d3db      	bcc.n	8012522 <_nx_ipv6_process_fragment_option+0x36>
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 801256a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 801256c:	0217      	lsls	r7, r2, #8
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 801256e:	4621      	mov	r1, r4
 8012570:	4628      	mov	r0, r5
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 8012572:	ea47 2412 	orr.w	r4, r7, r2, lsr #8
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 8012576:	1af3      	subs	r3, r6, r3
 8012578:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 801257c:	8074      	strh	r4, [r6, #2]
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 801257e:	3302      	adds	r3, #2
 8012580:	f7fd ff34 	bl	80103ec <_nx_icmpv6_send_error_message>
        return(NX_OPTION_HEADER_ERROR);
 8012584:	2054      	movs	r0, #84	; 0x54
}
 8012586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(NX_OPTION_HEADER_ERROR);
 8012588:	2054      	movs	r0, #84	; 0x54
}
 801258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 801258c:	f8c5 47c4 	str.w	r4, [r5, #1988]	; 0x7c4
        ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8012590:	f8c5 47c8 	str.w	r4, [r5, #1992]	; 0x7c8
        packet_ptr -> nx_packet_queue_next     =  NX_NULL;
 8012594:	61e3      	str	r3, [r4, #28]
 8012596:	e7d1      	b.n	801253c <_nx_ipv6_process_fragment_option+0x50>
        return(NX_CONTINUE);
 8012598:	2055      	movs	r0, #85	; 0x55
}
 801259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 801259c:	0214      	lsls	r4, r2, #8
            NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, 4);
 801259e:	2304      	movs	r3, #4
            NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80125a0:	ea44 2412 	orr.w	r4, r4, r2, lsr #8
            NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, 4);
 80125a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
            NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80125a8:	8074      	strh	r4, [r6, #2]
            NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, 4);
 80125aa:	f7fd ff1f 	bl	80103ec <_nx_icmpv6_send_error_message>
            return(NX_OPTION_HEADER_ERROR);
 80125ae:	2054      	movs	r0, #84	; 0x54
}
 80125b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125b2:	bf00      	nop

080125b4 <_nx_ipv6_process_hop_by_hop_option>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_process_hop_by_hop_option(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80125b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Read the Hdr Ext Len field. */
    header_length = *(packet_ptr -> nx_packet_prepend_ptr + 1);
 80125b8:	688d      	ldr	r5, [r1, #8]
    offset_base = (UINT)((ULONG)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header) - (ULONG)sizeof(NX_IPV6_HEADER));
    header_length = header_length - (INT)offset;

    /* Sanity check; does the header length data go past the end of the end of the packet buffer? */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) <
 80125ba:	68cc      	ldr	r4, [r1, #12]
    header_length = *(packet_ptr -> nx_packet_prepend_ptr + 1);
 80125bc:	786a      	ldrb	r2, [r5, #1]
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) <
 80125be:	1b64      	subs	r4, r4, r5
    offset_base = (UINT)((ULONG)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header) - (ULONG)sizeof(NX_IPV6_HEADER));
 80125c0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    header_length = (header_length + 1) << 3;
 80125c2:	3201      	adds	r2, #1
    offset_base = (UINT)((ULONG)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header) - (ULONG)sizeof(NX_IPV6_HEADER));
 80125c4:	1aeb      	subs	r3, r5, r3
    header_length = (header_length + 1) << 3;
 80125c6:	00d2      	lsls	r2, r2, #3
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) <
 80125c8:	4294      	cmp	r4, r2
 80125ca:	d328      	bcc.n	801261e <_nx_ipv6_process_hop_by_hop_option+0x6a>
 80125cc:	460f      	mov	r7, r1
 80125ce:	4681      	mov	r9, r0
 80125d0:	f1a3 0828 	sub.w	r8, r3, #40	; 0x28
 80125d4:	1e96      	subs	r6, r2, #2
    offset = 2;
 80125d6:	2402      	movs	r4, #2
 80125d8:	e006      	b.n	80125e8 <_nx_ipv6_process_hop_by_hop_option+0x34>
            break;

        case 1:

            /* PadN option. Skip N+2 bytes. */
            offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 80125da:	786c      	ldrb	r4, [r5, #1]
            header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 80125dc:	1ca2      	adds	r2, r4, #2
            offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 80125de:	441c      	add	r4, r3
            header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 80125e0:	1ab6      	subs	r6, r6, r2
    while (header_length > 0)
 80125e2:	2e00      	cmp	r6, #0
 80125e4:	dd15      	ble.n	8012612 <_nx_ipv6_process_hop_by_hop_option+0x5e>
 80125e6:	68bd      	ldr	r5, [r7, #8]
        switch (option -> nx_ipv6_hop_by_hop_option_type)
 80125e8:	5d2a      	ldrb	r2, [r5, r4]
        option = (NX_IPV6_HOP_BY_HOP_OPTION *)(packet_ptr -> nx_packet_prepend_ptr + offset);
 80125ea:	4425      	add	r5, r4
        switch (option -> nx_ipv6_hop_by_hop_option_type)
 80125ec:	b1a2      	cbz	r2, 8012618 <_nx_ipv6_process_hop_by_hop_option+0x64>
 80125ee:	2a01      	cmp	r2, #1
 80125f0:	f104 0302 	add.w	r3, r4, #2
 80125f4:	d0f1      	beq.n	80125da <_nx_ipv6_process_hop_by_hop_option+0x26>
#endif /* NX_ENABLE_THREAD  */

        default:

            /* Unknown option.  */
            rv = _nx_ipv6_option_error(ip_ptr, packet_ptr, option -> nx_ipv6_hop_by_hop_option_type, offset_base + offset);
 80125f6:	eb08 0304 	add.w	r3, r8, r4
 80125fa:	4639      	mov	r1, r7
 80125fc:	4648      	mov	r0, r9
 80125fe:	3402      	adds	r4, #2
 8012600:	f003 faa8 	bl	8015b54 <_nx_ipv6_option_error>

            /* If no errors, just skip this option and move onto the next option.*/
            if (rv == NX_SUCCESS)
 8012604:	b930      	cbnz	r0, 8012614 <_nx_ipv6_process_hop_by_hop_option+0x60>
            {

                /* Skip this option and continue processing the rest of the header. */
                offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8012606:	786b      	ldrb	r3, [r5, #1]
                header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8012608:	1c9a      	adds	r2, r3, #2
                offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 801260a:	441c      	add	r4, r3
                header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 801260c:	1ab6      	subs	r6, r6, r2
    while (header_length > 0)
 801260e:	2e00      	cmp	r6, #0
 8012610:	dce9      	bgt.n	80125e6 <_nx_ipv6_process_hop_by_hop_option+0x32>
            }
        }
    }

    /* Successful processing of option header. */
    return(NX_SUCCESS);
 8012612:	2000      	movs	r0, #0
}
 8012614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            offset++;
 8012618:	3401      	adds	r4, #1
            header_length--;
 801261a:	3e01      	subs	r6, #1
            break;
 801261c:	e7e1      	b.n	80125e2 <_nx_ipv6_process_hop_by_hop_option+0x2e>
        _nx_ipv6_option_error(ip_ptr, packet_ptr, option -> nx_ipv6_hop_by_hop_option_type, offset_base + offset);
 801261e:	3b26      	subs	r3, #38	; 0x26
 8012620:	78aa      	ldrb	r2, [r5, #2]
 8012622:	f003 fa97 	bl	8015b54 <_nx_ipv6_option_error>
        return(NX_OPTION_HEADER_ERROR);
 8012626:	2054      	movs	r0, #84	; 0x54
}
 8012628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801262c <_nx_ipv6_process_routing_option>:
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Set a pointer to the routing header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    option = (NX_IPV6_HEADER_ROUTING_OPTION *)(packet_ptr -> nx_packet_prepend_ptr);
 801262c:	688b      	ldr	r3, [r1, #8]

    if (option -> nx_ipv6_header_routing_option_segments_left == 0)
 801262e:	78da      	ldrb	r2, [r3, #3]
 8012630:	b90a      	cbnz	r2, 8012636 <_nx_ipv6_process_routing_option+0xa>
    {
        /* Skip the rest of the routing header and continue processing this packet. */
        return(NX_SUCCESS);
 8012632:	4610      	mov	r0, r2
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif

    /* Return error status, so the caller knows to free the packet. */
    return(NX_OPTION_HEADER_ERROR);
}
 8012634:	4770      	bx	lr
{
 8012636:	b510      	push	{r4, lr}
    base_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 8012638:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, base_offset + 2);
 801263a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    base_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 801263e:	1b1b      	subs	r3, r3, r4
    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, base_offset + 2);
 8012640:	3302      	adds	r3, #2
 8012642:	f7fd fed3 	bl	80103ec <_nx_icmpv6_send_error_message>
    return(NX_OPTION_HEADER_ERROR);
 8012646:	2054      	movs	r0, #84	; 0x54
}
 8012648:	bd10      	pop	{r4, pc}
 801264a:	bf00      	nop

0801264c <_nx_nd_cache_add>:
/*                                                                        */
/**************************************************************************/
UINT _nx_nd_cache_add(NX_IP *ip_ptr, ULONG *dest_ip, NX_INTERFACE *if_ptr, CHAR *mac, INT IsStatic,
                      INT status, NXD_IPV6_ADDRESS *iface_address,
                      ND_CACHE_ENTRY **nd_cache_entry)
{
 801264c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012650:	b083      	sub	sp, #12
USHORT         *copy_from, *copy_to;
ND_CACHE_ENTRY *entry;


    /* Initialize the return value. */
    *nd_cache_entry = NX_NULL;
 8012652:	2400      	movs	r4, #0
{
 8012654:	4690      	mov	r8, r2
 8012656:	4607      	mov	r7, r0
 8012658:	9d0d      	ldr	r5, [sp, #52]	; 0x34

    /* First find if there has a exit entry. */
    if (_nx_nd_cache_find_entry(ip_ptr, dest_ip, &entry) != NX_SUCCESS)
 801265a:	aa01      	add	r2, sp, #4
{
 801265c:	4689      	mov	r9, r1
 801265e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    *nd_cache_entry = NX_NULL;
 8012660:	602c      	str	r4, [r5, #0]
{
 8012662:	461c      	mov	r4, r3
    if (_nx_nd_cache_find_entry(ip_ptr, dest_ip, &entry) != NX_SUCCESS)
 8012664:	f000 f99c 	bl	80129a0 <_nx_nd_cache_find_entry>
 8012668:	bb08      	cbnz	r0, 80126ae <_nx_nd_cache_add+0x62>

    /* At this point we know the entry is in the ND cache.
       Finish up updating the rest of the information. */

    /*lint -e{644} suppress variable might not be initialized, since "entry" was initialized in _nx_nd_cache_find_entry or _nx_nd_cache_add_entry. */
    entry -> nx_nd_cache_is_static = IsStatic ? (UCHAR)1 : (UCHAR)0;
 801266a:	1c32      	adds	r2, r6, #0
 801266c:	9b01      	ldr	r3, [sp, #4]
 801266e:	bf18      	it	ne
 8012670:	2201      	movne	r2, #1

    entry -> nx_nd_cache_interface_ptr = if_ptr;
 8012672:	f8c3 8020 	str.w	r8, [r3, #32]
    entry -> nx_nd_cache_is_static = IsStatic ? (UCHAR)1 : (UCHAR)0;
 8012676:	76da      	strb	r2, [r3, #27]

    /*lint -e{927} suppress cast of pointer to pointer, since it is necessary  */
    copy_to = (USHORT *)(entry -> nx_nd_cache_mac_addr);

    /* Set the return value. */
    *nd_cache_entry = entry;
 8012678:	602b      	str	r3, [r5, #0]

    if (entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 801267a:	7e59      	ldrb	r1, [r3, #25]
 801267c:	8820      	ldrh	r0, [r4, #0]
 801267e:	2902      	cmp	r1, #2
 8012680:	d021      	beq.n	80126c6 <_nx_nd_cache_add+0x7a>
 8012682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012684:	b2d2      	uxtb	r2, r2
            return(NX_SUCCESS);
        }
    }

    /* Is this a static entry? */
    if (IsStatic)
 8012686:	b14e      	cbz	r6, 801269c <_nx_nd_cache_add+0x50>
    {

        /* Just set the status, no need to update the cache entry timeout. */
        entry -> nx_nd_cache_nd_status = (UCHAR)status;
 8012688:	765a      	strb	r2, [r3, #25]
            entry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_reachable_timer;
        }
    }

    /* Copy the MAC address. */
    *copy_to = *copy_from;
 801268a:	8218      	strh	r0, [r3, #16]
    copy_to++; copy_from++;
    *copy_to = *copy_from;
    copy_to++; copy_from++;
    *copy_to = *copy_from;

    return(NX_SUCCESS);
 801268c:	2000      	movs	r0, #0
    *copy_to = *copy_from;
 801268e:	8862      	ldrh	r2, [r4, #2]
 8012690:	825a      	strh	r2, [r3, #18]
    *copy_to = *copy_from;
 8012692:	88a2      	ldrh	r2, [r4, #4]
 8012694:	829a      	strh	r2, [r3, #20]
}
 8012696:	b003      	add	sp, #12
 8012698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (entry -> nx_nd_cache_nd_status != (UCHAR)status)
 801269c:	4291      	cmp	r1, r2
 801269e:	d0f4      	beq.n	801268a <_nx_nd_cache_add+0x3e>
        if (entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE) /* New entry */
 80126a0:	2a02      	cmp	r2, #2
        entry -> nx_nd_cache_nd_status = (UCHAR)status;
 80126a2:	765a      	strb	r2, [r3, #25]
        if (entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE) /* New entry */
 80126a4:	d1f1      	bne.n	801268a <_nx_nd_cache_add+0x3e>
            entry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_reachable_timer;
 80126a6:	f8d7 2ee4 	ldr.w	r2, [r7, #3812]	; 0xee4
 80126aa:	61da      	str	r2, [r3, #28]
 80126ac:	e7ed      	b.n	801268a <_nx_nd_cache_add+0x3e>
        if (_nx_nd_cache_add_entry(ip_ptr, dest_ip, iface_address, &entry) != NX_SUCCESS)
 80126ae:	ab01      	add	r3, sp, #4
 80126b0:	4649      	mov	r1, r9
 80126b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126b4:	4638      	mov	r0, r7
 80126b6:	f000 f813 	bl	80126e0 <_nx_nd_cache_add_entry>
 80126ba:	2800      	cmp	r0, #0
 80126bc:	d0d5      	beq.n	801266a <_nx_nd_cache_add+0x1e>
            return(NX_NOT_SUCCESSFUL);
 80126be:	2043      	movs	r0, #67	; 0x43
}
 80126c0:	b003      	add	sp, #12
 80126c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((copy_from[0] == copy_to[0]) &&
 80126c6:	8a1a      	ldrh	r2, [r3, #16]
 80126c8:	4282      	cmp	r2, r0
 80126ca:	d1da      	bne.n	8012682 <_nx_nd_cache_add+0x36>
 80126cc:	8865      	ldrh	r5, [r4, #2]
 80126ce:	8a5a      	ldrh	r2, [r3, #18]
 80126d0:	4295      	cmp	r5, r2
 80126d2:	d1d6      	bne.n	8012682 <_nx_nd_cache_add+0x36>
            (copy_from[1] == copy_to[1]) &&
 80126d4:	88a5      	ldrh	r5, [r4, #4]
 80126d6:	8a9a      	ldrh	r2, [r3, #20]
 80126d8:	4295      	cmp	r5, r2
 80126da:	d1d2      	bne.n	8012682 <_nx_nd_cache_add+0x36>
            return(NX_SUCCESS);
 80126dc:	2000      	movs	r0, #0
 80126de:	e7da      	b.n	8012696 <_nx_nd_cache_add+0x4a>

080126e0 <_nx_nd_cache_add_entry>:
/**************************************************************************/

UINT _nx_nd_cache_add_entry(NX_IP *ip_ptr, ULONG *dest_ip,
                            NXD_IPV6_ADDRESS *iface_address,
                            ND_CACHE_ENTRY **nd_cache_entry)
{
 80126e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Initialize the return value. */
    *nd_cache_entry = NX_NULL;

    /* Compute a simple hash based on the destination IP address. */
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80126e4:	e9d1 5400 	ldrd	r5, r4, [r1]
 80126e8:	688e      	ldr	r6, [r1, #8]
    *nd_cache_entry = NX_NULL;
 80126ea:	f04f 0c00 	mov.w	ip, #0
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80126ee:	442c      	add	r4, r5
 80126f0:	68cd      	ldr	r5, [r1, #12]
 80126f2:	2710      	movs	r7, #16
                   (NX_IPV6_NEIGHBOR_CACHE_SIZE));

#ifndef NX_DISABLE_IPV6_PURGE_UNUSED_CACHE_ENTRIES

    /* Set the lowest possible timer ticks left to compare to. */
    stale_timer_ticks = 0;
 80126f4:	46e6      	mov	lr, ip
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80126f6:	4434      	add	r4, r6
    *nd_cache_entry = NX_NULL;
 80126f8:	f8c3 c000 	str.w	ip, [r3]
{
 80126fc:	4693      	mov	fp, r2
    first_available = NX_IPV6_NEIGHBOR_CACHE_SIZE;
 80126fe:	46b8      	mov	r8, r7
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 8012700:	442c      	add	r4, r5

    /* Start out at a very high number of remaining ticks to compare to. */
    timer_ticks_left = 0xFFFFFFFF;
 8012702:	f04f 39ff 	mov.w	r9, #4294967295
            /* Start back at the first table entry. */
            index = 0;
        }

        /* Is the current entry available? */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 8012706:	f04f 0c34 	mov.w	ip, #52	; 0x34
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 801270a:	f004 040f 	and.w	r4, r4, #15
 801270e:	e003      	b.n	8012718 <_nx_nd_cache_add_entry+0x38>
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++, index++)
 8012710:	3f01      	subs	r7, #1
 8012712:	f104 0401 	add.w	r4, r4, #1
 8012716:	d021      	beq.n	801275c <_nx_nd_cache_add_entry+0x7c>
            index = 0;
 8012718:	2c10      	cmp	r4, #16
 801271a:	bf08      	it	eq
 801271c:	2400      	moveq	r4, #0
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 801271e:	fb0c 0504 	mla	r5, ip, r4, r0
 8012722:	f895 61e9 	ldrb.w	r6, [r5, #489]	; 0x1e9
 8012726:	b33e      	cbz	r6, 8012778 <_nx_nd_cache_add_entry+0x98>
            break;
        }

#ifndef NX_DISABLE_IPV6_PURGE_UNUSED_CACHE_ENTRIES
        /* Skip over routers and static entries. */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_is_router != NX_NULL || ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_is_static)
 8012728:	f8d5 21f4 	ldr.w	r2, [r5, #500]	; 0x1f4
 801272c:	2a00      	cmp	r2, #0
 801272e:	d1ef      	bne.n	8012710 <_nx_nd_cache_add_entry+0x30>
 8012730:	f895 a1eb 	ldrb.w	sl, [r5, #491]	; 0x1eb
 8012734:	f1ba 0f00 	cmp.w	sl, #0
 8012738:	d1ea      	bne.n	8012710 <_nx_nd_cache_add_entry+0x30>
        /* Purging is enabled;
           Attempt to find a STALE entry and if there is more than one,
           choose the oldest one e.g. the highest timer ticks elapsed. */

        /* Check for stale entries. These are the best candidates for 'recycling.' */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 801273a:	2e03      	cmp	r6, #3
 801273c:	d014      	beq.n	8012768 <_nx_nd_cache_add_entry+0x88>
                stale_timer_ticks = (UINT)ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick;
                first_available = index;
            }
        }
        /* Next try finding a REACHABLE entry closest to its cache table expiration date. */
        else if (stale_timer_ticks == 0 &&
 801273e:	f1be 0f00 	cmp.w	lr, #0
 8012742:	d1e5      	bne.n	8012710 <_nx_nd_cache_add_entry+0x30>
 8012744:	2e02      	cmp	r6, #2
 8012746:	d1e3      	bne.n	8012710 <_nx_nd_cache_add_entry+0x30>
                 ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
        {

            /* Is this entry older that our previous oldest entry? */
            if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick < timer_ticks_left)
 8012748:	f8d5 51ec 	ldr.w	r5, [r5, #492]	; 0x1ec
 801274c:	454d      	cmp	r5, r9
 801274e:	d2df      	bcs.n	8012710 <_nx_nd_cache_add_entry+0x30>
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++, index++)
 8012750:	3f01      	subs	r7, #1
            if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick < timer_ticks_left)
 8012752:	46a0      	mov	r8, r4
 8012754:	46a9      	mov	r9, r5
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++, index++)
 8012756:	f104 0401 	add.w	r4, r4, #1
 801275a:	d1dd      	bne.n	8012718 <_nx_nd_cache_add_entry+0x38>
        }
#endif
    }

    /* Did not find a available entry. */
    if (first_available == NX_IPV6_NEIGHBOR_CACHE_SIZE)
 801275c:	f1b8 0f10 	cmp.w	r8, #16
 8012760:	d109      	bne.n	8012776 <_nx_nd_cache_add_entry+0x96>
    {

        /* Return unsuccessful status. */
        return(NX_NOT_SUCCESSFUL);
 8012762:	2043      	movs	r0, #67	; 0x43

    /* Release the protection. */
    *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[first_available];

    return(NX_SUCCESS);
}
 8012764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick > stale_timer_ticks)
 8012768:	f8d5 51ec 	ldr.w	r5, [r5, #492]	; 0x1ec
 801276c:	4575      	cmp	r5, lr
 801276e:	d9cf      	bls.n	8012710 <_nx_nd_cache_add_entry+0x30>
 8012770:	46ae      	mov	lr, r5
 8012772:	46a0      	mov	r8, r4
 8012774:	e7cc      	b.n	8012710 <_nx_nd_cache_add_entry+0x30>
 8012776:	4644      	mov	r4, r8
 8012778:	4699      	mov	r9, r3
    _nx_nd_cache_delete_internal(ip_ptr, &ip_ptr -> nx_ipv6_nd_cache[first_available]);
 801277a:	2334      	movs	r3, #52	; 0x34
 801277c:	460d      	mov	r5, r1
 801277e:	4606      	mov	r6, r0
 8012780:	fb03 f404 	mul.w	r4, r3, r4
 8012784:	f504 77e8 	add.w	r7, r4, #464	; 0x1d0
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_nd_status = ND_CACHE_STATE_CREATED;
 8012788:	4426      	add	r6, r4
    _nx_nd_cache_delete_internal(ip_ptr, &ip_ptr -> nx_ipv6_nd_cache[first_available]);
 801278a:	4407      	add	r7, r0
 801278c:	4639      	mov	r1, r7
 801278e:	f000 f813 	bl	80127b8 <_nx_nd_cache_delete_internal>
    COPY_IPV6_ADDRESS(dest_ip, ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_dest_ip);
 8012792:	4628      	mov	r0, r5
 8012794:	4639      	mov	r1, r7
 8012796:	f7f3 fe99 	bl	80064cc <COPY_IPV6_ADDRESS>
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_nd_status = ND_CACHE_STATE_CREATED;
 801279a:	2306      	movs	r3, #6
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_outgoing_address = iface_address;
 801279c:	f8c6 b200 	str.w	fp, [r6, #512]	; 0x200
    return(NX_SUCCESS);
 80127a0:	2000      	movs	r0, #0
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_nd_status = ND_CACHE_STATE_CREATED;
 80127a2:	f886 31e9 	strb.w	r3, [r6, #489]	; 0x1e9
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_interface_ptr = iface_address -> nxd_ipv6_address_attached;
 80127a6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80127aa:	f8c6 31f0 	str.w	r3, [r6, #496]	; 0x1f0
    *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[first_available];
 80127ae:	f8c9 7000 	str.w	r7, [r9]
}
 80127b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b6:	bf00      	nop

080127b8 <_nx_nd_cache_delete_internal>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_nd_cache_delete_internal(NX_IP *ip_ptr, ND_CACHE_ENTRY *entry)
{
 80127b8:	b570      	push	{r4, r5, r6, lr}
 80127ba:	4605      	mov	r5, r0

UINT       i = 0, table_size;
NX_PACKET *pkt, *next_pkt;

    /* Free up the queued packets. */
    pkt = entry -> nx_nd_cache_packet_waiting_head;
 80127bc:	6a88      	ldr	r0, [r1, #40]	; 0x28
{
 80127be:	460c      	mov	r4, r1

    /* Flush any packets enqueued waiting on neighbor reachability confirmation. */
    while (pkt)
 80127c0:	b128      	cbz	r0, 80127ce <_nx_nd_cache_delete_internal+0x16>
    {

        next_pkt = pkt -> nx_packet_queue_next;
 80127c2:	69c6      	ldr	r6, [r0, #28]
        _nx_packet_transmit_release(pkt);
 80127c4:	f7f4 f97a 	bl	8006abc <_nx_packet_transmit_release>
    while (pkt)
 80127c8:	4630      	mov	r0, r6
 80127ca:	2e00      	cmp	r6, #0
 80127cc:	d1f9      	bne.n	80127c2 <_nx_nd_cache_delete_internal+0xa>
        pkt = next_pkt;
    }
    entry -> nx_nd_cache_packet_waiting_queue_length = 0;
 80127ce:	2300      	movs	r3, #0
    /* Clear the entry out.  */
    entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INVALID;
    entry -> nx_nd_cache_is_static = 0;

    /* Is there a corresponding link in the default router list? */
    if (entry -> nx_nd_cache_is_router)
 80127d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    entry -> nx_nd_cache_packet_waiting_queue_length = 0;
 80127d2:	76a3      	strb	r3, [r4, #26]
    memset(entry -> nx_nd_cache_mac_addr, 0, 6);
 80127d4:	6123      	str	r3, [r4, #16]
 80127d6:	82a3      	strh	r3, [r4, #20]
    entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INVALID;
 80127d8:	7663      	strb	r3, [r4, #25]
    entry -> nx_nd_cache_is_static = 0;
 80127da:	76e3      	strb	r3, [r4, #27]
    entry -> nx_nd_cache_packet_waiting_tail = NX_NULL;
 80127dc:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    if (entry -> nx_nd_cache_is_router)
 80127e0:	b102      	cbz	r2, 80127e4 <_nx_nd_cache_delete_internal+0x2c>
    {

        /* Set its pointer to this entry in the cache table to NULL. */
        entry -> nx_nd_cache_is_router -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 80127e2:	6193      	str	r3, [r2, #24]
    }

    /* And indicate that this cache entry is no longer a router. */
    entry -> nx_nd_cache_is_router = NX_NULL;
 80127e4:	2200      	movs	r2, #0

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 80127e6:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    entry -> nx_nd_cache_is_router = NX_NULL;
 80127ea:	6262      	str	r2, [r4, #36]	; 0x24

    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d050      	beq.n	8012892 <_nx_nd_cache_delete_internal+0xda>
    {

        /* Skip invalid entries. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 80127f0:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80127f4:	b131      	cbz	r1, 8012804 <_nx_nd_cache_delete_internal+0x4c>

        /* Keep track of valid entries we have checked. */
        table_size--;

        /* Find the destination unit. */
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 80127f6:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
        table_size--;
 80127fa:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 80127fc:	42a1      	cmp	r1, r4
 80127fe:	d04a      	beq.n	8012896 <_nx_nd_cache_delete_internal+0xde>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 8012800:	2b00      	cmp	r3, #0
 8012802:	d046      	beq.n	8012892 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8012804:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
 8012808:	b12a      	cbz	r2, 8012816 <_nx_nd_cache_delete_internal+0x5e>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 801280a:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
        table_size--;
 801280e:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012810:	4294      	cmp	r4, r2
 8012812:	d049      	beq.n	80128a8 <_nx_nd_cache_delete_internal+0xf0>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 8012814:	b3eb      	cbz	r3, 8012892 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8012816:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 801281a:	b12a      	cbz	r2, 8012828 <_nx_nd_cache_delete_internal+0x70>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 801281c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
        table_size--;
 8012820:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012822:	4294      	cmp	r4, r2
 8012824:	d04d      	beq.n	80128c2 <_nx_nd_cache_delete_internal+0x10a>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 8012826:	b3a3      	cbz	r3, 8012892 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8012828:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
 801282c:	b12a      	cbz	r2, 801283a <_nx_nd_cache_delete_internal+0x82>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 801282e:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
        table_size--;
 8012832:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012834:	4294      	cmp	r4, r2
 8012836:	d051      	beq.n	80128dc <_nx_nd_cache_delete_internal+0x124>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 8012838:	b35b      	cbz	r3, 8012892 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 801283a:	f8d5 2130 	ldr.w	r2, [r5, #304]	; 0x130
 801283e:	b12a      	cbz	r2, 801284c <_nx_nd_cache_delete_internal+0x94>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012840:	f8d5 2154 	ldr.w	r2, [r5, #340]	; 0x154
        table_size--;
 8012844:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012846:	4294      	cmp	r4, r2
 8012848:	d053      	beq.n	80128f2 <_nx_nd_cache_delete_internal+0x13a>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 801284a:	b313      	cbz	r3, 8012892 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 801284c:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
 8012850:	b12a      	cbz	r2, 801285e <_nx_nd_cache_delete_internal+0xa6>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012852:	f8d5 217c 	ldr.w	r2, [r5, #380]	; 0x17c
        table_size--;
 8012856:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012858:	4294      	cmp	r4, r2
 801285a:	d055      	beq.n	8012908 <_nx_nd_cache_delete_internal+0x150>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 801285c:	b1cb      	cbz	r3, 8012892 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 801285e:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
 8012862:	b12a      	cbz	r2, 8012870 <_nx_nd_cache_delete_internal+0xb8>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012864:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8012868:	4294      	cmp	r4, r2
 801286a:	d05a      	beq.n	8012922 <_nx_nd_cache_delete_internal+0x16a>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 801286c:	2b01      	cmp	r3, #1
 801286e:	d010      	beq.n	8012892 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8012870:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
 8012874:	b16b      	cbz	r3, 8012892 <_nx_nd_cache_delete_internal+0xda>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 8012876:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
 801287a:	429c      	cmp	r4, r3
 801287c:	d109      	bne.n	8012892 <_nx_nd_cache_delete_internal+0xda>

            /* Set its pointer to this entry in the destination table to NULL. */
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;

            /* Update the destination_table size. */
            ip_ptr -> nx_ipv6_destination_table_size--;
 801287e:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8012882:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8012884:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8012886:	f8c5 21a8 	str.w	r2, [r5, #424]	; 0x1a8
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 801288a:	f8c5 21cc 	str.w	r2, [r5, #460]	; 0x1cc
            ip_ptr -> nx_ipv6_destination_table_size--;
 801288e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510

        i++;
    }

    return(NX_SUCCESS);
}
 8012892:	2000      	movs	r0, #0
 8012894:	bd70      	pop	{r4, r5, r6, pc}
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8012896:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 801289a:	f8c5 20b4 	str.w	r2, [r5, #180]	; 0xb4
            ip_ptr -> nx_ipv6_destination_table_size--;
 801289e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d1ae      	bne.n	8012804 <_nx_nd_cache_delete_internal+0x4c>
 80128a6:	e7f4      	b.n	8012892 <_nx_nd_cache_delete_internal+0xda>
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128a8:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80128ac:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128ae:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80128b0:	f8c5 10b8 	str.w	r1, [r5, #184]	; 0xb8
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 80128b4:	f8c5 10dc 	str.w	r1, [r5, #220]	; 0xdc
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128b8:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d1aa      	bne.n	8012816 <_nx_nd_cache_delete_internal+0x5e>
 80128c0:	e7e7      	b.n	8012892 <_nx_nd_cache_delete_internal+0xda>
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128c2:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80128c6:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128c8:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80128ca:	f8c5 10e0 	str.w	r1, [r5, #224]	; 0xe0
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 80128ce:	f8c5 1104 	str.w	r1, [r5, #260]	; 0x104
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128d2:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d1a6      	bne.n	8012828 <_nx_nd_cache_delete_internal+0x70>
 80128da:	e7da      	b.n	8012892 <_nx_nd_cache_delete_internal+0xda>
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128dc:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80128e0:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128e2:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80128e4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 80128e8:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128ec:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
 80128f0:	e7a2      	b.n	8012838 <_nx_nd_cache_delete_internal+0x80>
 80128f2:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80128f6:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 80128f8:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80128fa:	f8c5 1130 	str.w	r1, [r5, #304]	; 0x130
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 80128fe:	f8c5 1154 	str.w	r1, [r5, #340]	; 0x154
            ip_ptr -> nx_ipv6_destination_table_size--;
 8012902:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
 8012906:	e7a0      	b.n	801284a <_nx_nd_cache_delete_internal+0x92>
 8012908:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 801290c:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 801290e:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8012910:	f8c5 1158 	str.w	r1, [r5, #344]	; 0x158
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 8012914:	f8c5 117c 	str.w	r1, [r5, #380]	; 0x17c
            ip_ptr -> nx_ipv6_destination_table_size--;
 8012918:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 801291c:	2b00      	cmp	r3, #0
 801291e:	d19e      	bne.n	801285e <_nx_nd_cache_delete_internal+0xa6>
 8012920:	e7b7      	b.n	8012892 <_nx_nd_cache_delete_internal+0xda>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8012922:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8012926:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8012928:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 801292a:	f8c5 1180 	str.w	r1, [r5, #384]	; 0x180
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 801292e:	f8c5 11a4 	str.w	r1, [r5, #420]	; 0x1a4
            ip_ptr -> nx_ipv6_destination_table_size--;
 8012932:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
 8012936:	e799      	b.n	801286c <_nx_nd_cache_delete_internal+0xb4>

08012938 <_nx_nd_cache_fast_periodic_update>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_nd_cache_fast_periodic_update(NX_IP *ip_ptr)
{
 8012938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801293a:	4607      	mov	r7, r0
 801293c:	b083      	sub	sp, #12
 801293e:	f500 74e8 	add.w	r4, r0, #464	; 0x1d0
 8012942:	f500 66a2 	add.w	r6, r0, #1296	; 0x510
 8012946:	e00d      	b.n	8012964 <_nx_nd_cache_fast_periodic_update+0x2c>
            else
            {
            /*  Send another solicitation (NS) packet. */
            INT uniCastNS;

                uniCastNS = (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_PROBE);
 8012948:	f1a5 0505 	sub.w	r5, r5, #5
            if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_num_solicit == 0)
 801294c:	7e23      	ldrb	r3, [r4, #24]

                /* Send out another mcast ns.*/
                _nx_icmpv6_send_ns(ip_ptr, ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_dest_ip,
 801294e:	4621      	mov	r1, r4
 8012950:	4638      	mov	r0, r7
                uniCastNS = (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_PROBE);
 8012952:	fab5 f585 	clz	r5, r5
 8012956:	096d      	lsrs	r5, r5, #5
            if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_num_solicit == 0)
 8012958:	b9ab      	cbnz	r3, 8012986 <_nx_nd_cache_fast_periodic_update+0x4e>
                _nx_nd_cache_delete_internal(ip_ptr, &ip_ptr -> nx_ipv6_nd_cache[i]);
 801295a:	f7ff ff2d 	bl	80127b8 <_nx_nd_cache_delete_internal>
 801295e:	3434      	adds	r4, #52	; 0x34
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 8012960:	42a6      	cmp	r6, r4
 8012962:	d00e      	beq.n	8012982 <_nx_nd_cache_fast_periodic_update+0x4a>
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 8012964:	7e65      	ldrb	r5, [r4, #25]
        if ((ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status != ND_CACHE_STATE_PROBE) &&
 8012966:	f005 02fb 	and.w	r2, r5, #251	; 0xfb
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 801296a:	2d00      	cmp	r5, #0
 801296c:	d0f7      	beq.n	801295e <_nx_nd_cache_fast_periodic_update+0x26>
        if ((ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status != ND_CACHE_STATE_PROBE) &&
 801296e:	2a01      	cmp	r2, #1
 8012970:	d1f5      	bne.n	801295e <_nx_nd_cache_fast_periodic_update+0x26>
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick == 0)
 8012972:	69e1      	ldr	r1, [r4, #28]

            /* Note that the only cache entries whose timer ticks are being decremented in this
               function are states whose timer tick was set in actual timer ticks (as compared
               with the slow periodic update where cache entry'timer ticks' are updated in
               seconds.  This is intentional and correct behavior. */
            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick--;
 8012974:	1e48      	subs	r0, r1, #1
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick == 0)
 8012976:	2900      	cmp	r1, #0
 8012978:	d0e6      	beq.n	8012948 <_nx_nd_cache_fast_periodic_update+0x10>
            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick--;
 801297a:	61e0      	str	r0, [r4, #28]
 801297c:	3434      	adds	r4, #52	; 0x34
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 801297e:	42a6      	cmp	r6, r4
 8012980:	d1f0      	bne.n	8012964 <_nx_nd_cache_fast_periodic_update+0x2c>
        }
    }
}
 8012982:	b003      	add	sp, #12
 8012984:	bdf0      	pop	{r4, r5, r6, r7, pc}
                _nx_icmpv6_send_ns(ip_ptr, ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_dest_ip,
 8012986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012988:	e9cd 5400 	strd	r5, r4, [sp]
 801298c:	f7fd fee6 	bl	801075c <_nx_icmpv6_send_ns>
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_num_solicit--;
 8012990:	7e23      	ldrb	r3, [r4, #24]
 8012992:	3b01      	subs	r3, #1
 8012994:	7623      	strb	r3, [r4, #24]
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_retrans_timer_ticks;
 8012996:	f8d7 3ee0 	ldr.w	r3, [r7, #3808]	; 0xee0
 801299a:	61e3      	str	r3, [r4, #28]
 801299c:	e7df      	b.n	801295e <_nx_nd_cache_fast_periodic_update+0x26>
 801299e:	bf00      	nop

080129a0 <_nx_nd_cache_find_entry>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_nd_cache_find_entry(NX_IP *ip_ptr,
                             ULONG *dest_ip, ND_CACHE_ENTRY **nd_cache_entry)
{
 80129a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    /* Initialize the return value. */
    *nd_cache_entry = NX_NULL;

    /* Compute a simple hash based on the dest_ip */
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80129a4:	684b      	ldr	r3, [r1, #4]
{
 80129a6:	4690      	mov	r8, r2
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80129a8:	680c      	ldr	r4, [r1, #0]
    *nd_cache_entry = NX_NULL;
 80129aa:	2200      	movs	r2, #0
{
 80129ac:	4689      	mov	r9, r1
 80129ae:	4607      	mov	r7, r0
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80129b0:	441c      	add	r4, r3
 80129b2:	688b      	ldr	r3, [r1, #8]
 80129b4:	2610      	movs	r6, #16
                   (NX_IPV6_NEIGHBOR_CACHE_SIZE));

    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
    {

        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 80129b6:	f04f 0a34 	mov.w	sl, #52	; 0x34
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80129ba:	441c      	add	r4, r3
 80129bc:	68cb      	ldr	r3, [r1, #12]
    *nd_cache_entry = NX_NULL;
 80129be:	f8c8 2000 	str.w	r2, [r8]
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80129c2:	441c      	add	r4, r3
 80129c4:	f004 040f 	and.w	r4, r4, #15
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 80129c8:	fb0a f004 	mul.w	r0, sl, r4
            *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[index];

            return(NX_SUCCESS);
        }

        index++;
 80129cc:	3401      	adds	r4, #1
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 80129ce:	183b      	adds	r3, r7, r0
 80129d0:	f893 21e9 	ldrb.w	r2, [r3, #489]	; 0x1e9
 80129d4:	b152      	cbz	r2, 80129ec <_nx_nd_cache_find_entry+0x4c>
            (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_dest_ip[0], dest_ip)))
 80129d6:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 80129da:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
            (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_dest_ip[0], dest_ip)))
 80129de:	4649      	mov	r1, r9
 80129e0:	183d      	adds	r5, r7, r0
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 80129e2:	b11b      	cbz	r3, 80129ec <_nx_nd_cache_find_entry+0x4c>
            (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_dest_ip[0], dest_ip)))
 80129e4:	4628      	mov	r0, r5
 80129e6:	f7f3 fd47 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
            (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_interface_ptr) &&
 80129ea:	b958      	cbnz	r0, 8012a04 <_nx_nd_cache_find_entry+0x64>

        /* Check for overflow */
        if (index == NX_IPV6_NEIGHBOR_CACHE_SIZE)
 80129ec:	2c10      	cmp	r4, #16
 80129ee:	d004      	beq.n	80129fa <_nx_nd_cache_find_entry+0x5a>
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 80129f0:	3e01      	subs	r6, #1
 80129f2:	d1e9      	bne.n	80129c8 <_nx_nd_cache_find_entry+0x28>
        {
            index = 0;
        }
    }

    return(NX_NOT_SUCCESSFUL);
 80129f4:	2043      	movs	r0, #67	; 0x43
}
 80129f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 80129fa:	3e01      	subs	r6, #1
            index = 0;
 80129fc:	f04f 0400 	mov.w	r4, #0
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 8012a00:	d1e2      	bne.n	80129c8 <_nx_nd_cache_find_entry+0x28>
 8012a02:	e7f7      	b.n	80129f4 <_nx_nd_cache_find_entry+0x54>
            *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[index];
 8012a04:	f8c8 5000 	str.w	r5, [r8]
            return(NX_SUCCESS);
 8012a08:	2000      	movs	r0, #0
}
 8012a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a0e:	bf00      	nop

08012a10 <_nx_nd_cache_slow_periodic_update>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_nd_cache_slow_periodic_update(NX_IP *ip_ptr)
{
 8012a10:	b430      	push	{r4, r5}
 8012a12:	f500 73f4 	add.w	r3, r0, #488	; 0x1e8
            {

                /* Set to the probe state. We do not send out NS;
                   the nd_cache_fast_periodic_update will handle the
                   processing of this entry now. */
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status = ND_CACHE_STATE_PROBE;
 8012a16:	2505      	movs	r5, #5
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_num_solicit = NX_MAX_UNICAST_SOLICIT;
 8012a18:	2403      	movs	r4, #3
 8012a1a:	f500 60a5 	add.w	r0, r0, #1320	; 0x528
 8012a1e:	e009      	b.n	8012a34 <_nx_nd_cache_slow_periodic_update+0x24>
        else if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_DELAY)
 8012a20:	2a04      	cmp	r2, #4
 8012a22:	d01a      	beq.n	8012a5a <_nx_nd_cache_slow_periodic_update+0x4a>
            }
        }
        else if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 8012a24:	2a03      	cmp	r2, #3
 8012a26:	d102      	bne.n	8012a2e <_nx_nd_cache_slow_periodic_update+0x1e>

            /* When the entry is in stale mode, we actually increment the timer_tick.
               The larger the timer_tick value, the longer then entry has been in
               stale mode.  This makes the entry a target for recycling (being replaced
               by a newer reachable entry). */
            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick++;
 8012a28:	685a      	ldr	r2, [r3, #4]
 8012a2a:	3201      	adds	r2, #1
 8012a2c:	605a      	str	r2, [r3, #4]
 8012a2e:	3334      	adds	r3, #52	; 0x34
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 8012a30:	4283      	cmp	r3, r0
 8012a32:	d010      	beq.n	8012a56 <_nx_nd_cache_slow_periodic_update+0x46>
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 8012a34:	785a      	ldrb	r2, [r3, #1]
 8012a36:	2a00      	cmp	r2, #0
 8012a38:	d0f9      	beq.n	8012a2e <_nx_nd_cache_slow_periodic_update+0x1e>
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_is_static)
 8012a3a:	78d9      	ldrb	r1, [r3, #3]
 8012a3c:	2900      	cmp	r1, #0
 8012a3e:	d1f6      	bne.n	8012a2e <_nx_nd_cache_slow_periodic_update+0x1e>
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 8012a40:	2a02      	cmp	r2, #2
 8012a42:	d1ed      	bne.n	8012a20 <_nx_nd_cache_slow_periodic_update+0x10>
            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick--;
 8012a44:	685a      	ldr	r2, [r3, #4]
 8012a46:	3a01      	subs	r2, #1
 8012a48:	605a      	str	r2, [r3, #4]
            if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick == 0)
 8012a4a:	2a00      	cmp	r2, #0
 8012a4c:	d1ef      	bne.n	8012a2e <_nx_nd_cache_slow_periodic_update+0x1e>
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 8012a4e:	705c      	strb	r4, [r3, #1]
 8012a50:	3334      	adds	r3, #52	; 0x34
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 8012a52:	4283      	cmp	r3, r0
 8012a54:	d1ee      	bne.n	8012a34 <_nx_nd_cache_slow_periodic_update+0x24>
        }
    }
}
 8012a56:	bc30      	pop	{r4, r5}
 8012a58:	4770      	bx	lr
            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick--;
 8012a5a:	685a      	ldr	r2, [r3, #4]
 8012a5c:	3a01      	subs	r2, #1
 8012a5e:	605a      	str	r2, [r3, #4]
            if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick == 0)
 8012a60:	2a00      	cmp	r2, #0
 8012a62:	d1e4      	bne.n	8012a2e <_nx_nd_cache_slow_periodic_update+0x1e>
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status = ND_CACHE_STATE_PROBE;
 8012a64:	705d      	strb	r5, [r3, #1]
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_num_solicit = NX_MAX_UNICAST_SOLICIT;
 8012a66:	701c      	strb	r4, [r3, #0]
 8012a68:	e7e1      	b.n	8012a2e <_nx_nd_cache_slow_periodic_update+0x1e>
 8012a6a:	bf00      	nop

08012a6c <_nx_packet_copy>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8012a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 8012a70:	2400      	movs	r4, #0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 8012a72:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 8012a74:	b085      	sub	sp, #20
    *new_packet_ptr =  NX_NULL;
 8012a76:	600c      	str	r4, [r1, #0]
    if (packet_ptr -> nx_packet_length == 0)
 8012a78:	b175      	cbz	r5, 8012a98 <_nx_packet_copy+0x2c>
 8012a7a:	4617      	mov	r7, r2
 8012a7c:	4689      	mov	r9, r1
 8012a7e:	4606      	mov	r6, r0
        return(NX_INVALID_PACKET);
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8012a80:	4622      	mov	r2, r4
 8012a82:	a903      	add	r1, sp, #12
 8012a84:	4638      	mov	r0, r7
 8012a86:	4698      	mov	r8, r3
 8012a88:	f7f3 fe00 	bl	800668c <_nx_packet_allocate>

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 8012a8c:	4605      	mov	r5, r0
 8012a8e:	b140      	cbz	r0, 8012aa2 <_nx_packet_copy+0x36>
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
    }
}
 8012a90:	4628      	mov	r0, r5
 8012a92:	b005      	add	sp, #20
 8012a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(NX_INVALID_PACKET);
 8012a98:	2512      	movs	r5, #18
}
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	b005      	add	sp, #20
 8012a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8012aa2:	9903      	ldr	r1, [sp, #12]
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 8012aa4:	463b      	mov	r3, r7
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8012aa6:	6b72      	ldr	r2, [r6, #52]	; 0x34
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 8012aa8:	4608      	mov	r0, r1
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8012aaa:	634a      	str	r2, [r1, #52]	; 0x34
    work_ptr -> nx_packet_ip_version = packet_ptr -> nx_packet_ip_version;
 8012aac:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8012ab0:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 8012ab4:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 8012ab6:	6932      	ldr	r2, [r6, #16]
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 8012ab8:	63cc      	str	r4, [r1, #60]	; 0x3c
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 8012aba:	68f4      	ldr	r4, [r6, #12]
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 8012abc:	4611      	mov	r1, r2
 8012abe:	f8cd 8000 	str.w	r8, [sp]
 8012ac2:	1aa2      	subs	r2, r4, r2
 8012ac4:	f7f3 fe40 	bl	8006748 <_nx_packet_data_append>
        if (status != NX_SUCCESS)
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	d12e      	bne.n	8012b2a <_nx_packet_copy+0xbe>
        packet_ptr =  packet_ptr -> nx_packet_next;
 8012acc:	6874      	ldr	r4, [r6, #4]
    } while (packet_ptr);
 8012ace:	b914      	cbnz	r4, 8012ad6 <_nx_packet_copy+0x6a>
 8012ad0:	e012      	b.n	8012af8 <_nx_packet_copy+0x8c>
        packet_ptr =  packet_ptr -> nx_packet_next;
 8012ad2:	6864      	ldr	r4, [r4, #4]
    } while (packet_ptr);
 8012ad4:	b184      	cbz	r4, 8012af8 <_nx_packet_copy+0x8c>
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8012ad6:	68a5      	ldr	r5, [r4, #8]
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 8012ad8:	463b      	mov	r3, r7
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8012ada:	68e2      	ldr	r2, [r4, #12]
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 8012adc:	4629      	mov	r1, r5
 8012ade:	9803      	ldr	r0, [sp, #12]
 8012ae0:	1b52      	subs	r2, r2, r5
 8012ae2:	f8cd 8000 	str.w	r8, [sp]
 8012ae6:	f7f3 fe2f 	bl	8006748 <_nx_packet_data_append>
        if (status != NX_SUCCESS)
 8012aea:	4605      	mov	r5, r0
 8012aec:	2800      	cmp	r0, #0
 8012aee:	d0f0      	beq.n	8012ad2 <_nx_packet_copy+0x66>
            _nx_packet_release(work_ptr);
 8012af0:	9803      	ldr	r0, [sp, #12]
 8012af2:	f7f3 ff7d 	bl	80069f0 <_nx_packet_release>
            return(status);
 8012af6:	e7cb      	b.n	8012a90 <_nx_packet_copy+0x24>
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8012af8:	6934      	ldr	r4, [r6, #16]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 8012afa:	9803      	ldr	r0, [sp, #12]
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8012afc:	68b3      	ldr	r3, [r6, #8]
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 8012afe:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8012b00:	1b1b      	subs	r3, r3, r4
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8012b02:	6a42      	ldr	r2, [r0, #36]	; 0x24
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 8012b04:	1b0c      	subs	r4, r1, r4
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 8012b06:	6901      	ldr	r1, [r0, #16]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8012b08:	1ad2      	subs	r2, r2, r3
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 8012b0a:	440b      	add	r3, r1
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 8012b0c:	4421      	add	r1, r4
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8012b0e:	6242      	str	r2, [r0, #36]	; 0x24
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 8012b10:	6a74      	ldr	r4, [r6, #36]	; 0x24
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 8012b12:	6083      	str	r3, [r0, #8]
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 8012b14:	42a2      	cmp	r2, r4
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 8012b16:	6381      	str	r1, [r0, #56]	; 0x38
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 8012b18:	d103      	bne.n	8012b22 <_nx_packet_copy+0xb6>
        *new_packet_ptr =  work_ptr;
 8012b1a:	f8c9 0000 	str.w	r0, [r9]
        return(NX_SUCCESS);
 8012b1e:	2500      	movs	r5, #0
 8012b20:	e7b6      	b.n	8012a90 <_nx_packet_copy+0x24>
        return(NX_INVALID_PACKET);
 8012b22:	2512      	movs	r5, #18
        _nx_packet_release(work_ptr);
 8012b24:	f7f3 ff64 	bl	80069f0 <_nx_packet_release>
        return(NX_INVALID_PACKET);
 8012b28:	e7b2      	b.n	8012a90 <_nx_packet_copy+0x24>
        if (status != NX_SUCCESS)
 8012b2a:	4605      	mov	r5, r0
 8012b2c:	e7e0      	b.n	8012af0 <_nx_packet_copy+0x84>
 8012b2e:	bf00      	nop

08012b30 <_nx_packet_data_extract_offset>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_extract_offset(NX_PACKET *packet_ptr, ULONG offset, VOID *buffer_start, ULONG buffer_length, ULONG *bytes_copied)
{
 8012b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


    working_packet_ptr =  packet_ptr;

    /* Check for an invalid offset or packet length.  */
    if (offset >= working_packet_ptr -> nx_packet_length)
 8012b34:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012b36:	428d      	cmp	r5, r1
 8012b38:	d805      	bhi.n	8012b46 <_nx_packet_data_extract_offset+0x16>
    {

        /* Note: A zero offset with a packet of zero length is ok. */
        if (offset == 0)
 8012b3a:	b981      	cbnz	r1, 8012b5e <_nx_packet_data_extract_offset+0x2e>
        {

            *bytes_copied = 0;
 8012b3c:	9b06      	ldr	r3, [sp, #24]
            return(NX_SUCCESS);
 8012b3e:	4608      	mov	r0, r1
            *bytes_copied = 0;
 8012b40:	6019      	str	r1, [r3, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_EXTRACT_OFFSET, packet_ptr, buffer_length, *bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 8012b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b46:	4604      	mov	r4, r0
 8012b48:	4617      	mov	r7, r2
 8012b4a:	460e      	mov	r6, r1
        packet_fragment_length =  (ULONG)((working_packet_ptr -> nx_packet_append_ptr - working_packet_ptr -> nx_packet_prepend_ptr));
 8012b4c:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
 8012b50:	1a12      	subs	r2, r2, r0
        if (packet_fragment_length > offset_bytes)
 8012b52:	42b2      	cmp	r2, r6
 8012b54:	d806      	bhi.n	8012b64 <_nx_packet_data_extract_offset+0x34>
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 8012b56:	6864      	ldr	r4, [r4, #4]
        offset_bytes = offset_bytes - packet_fragment_length;
 8012b58:	1ab6      	subs	r6, r6, r2
    while (working_packet_ptr)
 8012b5a:	2c00      	cmp	r4, #0
 8012b5c:	d1f6      	bne.n	8012b4c <_nx_packet_data_extract_offset+0x1c>
        return(NX_PACKET_OFFSET_ERROR);
 8012b5e:	2053      	movs	r0, #83	; 0x53
}
 8012b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (source_ptr == NX_NULL)
 8012b64:	1986      	adds	r6, r0, r6
 8012b66:	d0fa      	beq.n	8012b5e <_nx_packet_data_extract_offset+0x2e>
    bytes_to_copy =   (packet_ptr -> nx_packet_length - offset);
 8012b68:	eba5 0801 	sub.w	r8, r5, r1
 8012b6c:	4598      	cmp	r8, r3
 8012b6e:	bf28      	it	cs
 8012b70:	4698      	movcs	r8, r3
 8012b72:	9b06      	ldr	r3, [sp, #24]
 8012b74:	f8c3 8000 	str.w	r8, [r3]
        memcpy(destination_ptr, source_ptr, bytes_to_copy);
 8012b78:	4631      	mov	r1, r6
 8012b7a:	4638      	mov	r0, r7
    while (working_packet_ptr && remaining_bytes)
 8012b7c:	b1ac      	cbz	r4, 8012baa <_nx_packet_data_extract_offset+0x7a>
 8012b7e:	f1b8 0f00 	cmp.w	r8, #0
 8012b82:	d012      	beq.n	8012baa <_nx_packet_data_extract_offset+0x7a>
        bytes_to_copy = (ULONG)(working_packet_ptr -> nx_packet_append_ptr - source_ptr);
 8012b84:	68e5      	ldr	r5, [r4, #12]
 8012b86:	1bad      	subs	r5, r5, r6
 8012b88:	4545      	cmp	r5, r8
 8012b8a:	bf28      	it	cs
 8012b8c:	4645      	movcs	r5, r8
        memcpy(destination_ptr, source_ptr, bytes_to_copy);
 8012b8e:	462a      	mov	r2, r5
        destination_ptr += bytes_to_copy;
 8012b90:	442f      	add	r7, r5
        memcpy(destination_ptr, source_ptr, bytes_to_copy);
 8012b92:	f00b fcde 	bl	801e552 <memcpy>
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 8012b96:	6864      	ldr	r4, [r4, #4]
        remaining_bytes -= bytes_to_copy;
 8012b98:	eba8 0805 	sub.w	r8, r8, r5
        if (working_packet_ptr)
 8012b9c:	2c00      	cmp	r4, #0
 8012b9e:	d0eb      	beq.n	8012b78 <_nx_packet_data_extract_offset+0x48>
            source_ptr = working_packet_ptr -> nx_packet_prepend_ptr;
 8012ba0:	68a6      	ldr	r6, [r4, #8]
        memcpy(destination_ptr, source_ptr, bytes_to_copy);
 8012ba2:	4638      	mov	r0, r7
 8012ba4:	4631      	mov	r1, r6
    while (working_packet_ptr && remaining_bytes)
 8012ba6:	2c00      	cmp	r4, #0
 8012ba8:	d1e9      	bne.n	8012b7e <_nx_packet_data_extract_offset+0x4e>
    return(NX_SUCCESS);
 8012baa:	2000      	movs	r0, #0
}
 8012bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012bb0 <_nx_packet_pool_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_delete(NX_PACKET_POOL *pool_ptr)
{
 8012bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb4:	4605      	mov	r5, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012bb6:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012bba:	b672      	cpsid	i

    /* Disable interrupts to remove the packet pool from the created list.  */
    TX_DISABLE

    /* Decrement the number of packet pools created.  */
    _nx_packet_pool_created_count--;
 8012bbc:	4925      	ldr	r1, [pc, #148]	; (8012c54 <_nx_packet_pool_delete+0xa4>)

    /* Clear the packet pool ID to make it invalid.  */
    pool_ptr -> nx_packet_pool_id =  0;
 8012bbe:	2000      	movs	r0, #0

    /* See if the packet pool only one on the list.  */
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 8012bc0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    _nx_packet_pool_created_count--;
 8012bc2:	680b      	ldr	r3, [r1, #0]
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 8012bc4:	42aa      	cmp	r2, r5
    _nx_packet_pool_created_count--;
 8012bc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8012bca:	600b      	str	r3, [r1, #0]
    pool_ptr -> nx_packet_pool_id =  0;
 8012bcc:	6028      	str	r0, [r5, #0]
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 8012bce:	d03d      	beq.n	8012c4c <_nx_packet_pool_delete+0x9c>
    else
    {

        /* Link-up the neighbors.  */
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
            pool_ptr -> nx_packet_pool_created_previous;
 8012bd0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
            pool_ptr -> nx_packet_pool_created_next;

        /* See if we have to update the created list head pointer.  */
        if (_nx_packet_pool_created_ptr == pool_ptr)
 8012bd2:	4b21      	ldr	r3, [pc, #132]	; (8012c58 <_nx_packet_pool_delete+0xa8>)
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 8012bd4:	6391      	str	r1, [r2, #56]	; 0x38
        if (_nx_packet_pool_created_ptr == pool_ptr)
 8012bd6:	6819      	ldr	r1, [r3, #0]
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 8012bd8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
        if (_nx_packet_pool_created_ptr == pool_ptr)
 8012bda:	42a9      	cmp	r1, r5
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 8012bdc:	6342      	str	r2, [r0, #52]	; 0x34
        if (_nx_packet_pool_created_ptr == pool_ptr)
 8012bde:	d032      	beq.n	8012c46 <_nx_packet_pool_delete+0x96>
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012be0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8012c5c <_nx_packet_pool_delete+0xac>
 8012be4:	f8d8 3000 	ldr.w	r3, [r8]
 8012be8:	3301      	adds	r3, #1
 8012bea:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012bee:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the packet pool suspension list to resume any and all
       threads suspended on this packet pool.  */
    thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 8012bf2:	e9d5 430b 	ldrd	r4, r3, [r5, #44]	; 0x2c
    while (pool_ptr -> nx_packet_pool_suspended_count)
 8012bf6:	b1bb      	cbz	r3, 8012c28 <_nx_packet_pool_delete+0x78>
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012bf8:	2700      	movs	r7, #0

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the return status in the thread to NX_POOL_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 8012bfa:	2630      	movs	r6, #48	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012bfc:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012c00:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 8012c02:	f8d8 3000 	ldr.w	r3, [r8]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012c06:	66a7      	str	r7, [r4, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8012c08:	3301      	adds	r3, #1
 8012c0a:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012c0e:	f382 8810 	msr	PRIMASK, r2
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 8012c12:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012c16:	6f24      	ldr	r4, [r4, #112]	; 0x70

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 8012c18:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8012c1a:	f00a fb49 	bl	801d2b0 <_tx_thread_system_resume>

        /* Decrease the suspended count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 8012c1e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012c20:	3b01      	subs	r3, #1
 8012c22:	632b      	str	r3, [r5, #48]	; 0x30
    while (pool_ptr -> nx_packet_pool_suspended_count)
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d1e9      	bne.n	8012bfc <_nx_packet_pool_delete+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012c28:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012c2c:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8012c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8012c32:	3b01      	subs	r3, #1
 8012c34:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012c38:	f382 8810 	msr	PRIMASK, r2

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(pool_ptr);

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8012c3c:	f00a fb1a 	bl	801d274 <_tx_thread_system_preempt_check>

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
}
 8012c40:	2000      	movs	r0, #0
 8012c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
 8012c46:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8012c48:	601a      	str	r2, [r3, #0]
 8012c4a:	e7c9      	b.n	8012be0 <_nx_packet_pool_delete+0x30>
        _nx_packet_pool_created_ptr =  NX_NULL;
 8012c4c:	4b02      	ldr	r3, [pc, #8]	; (8012c58 <_nx_packet_pool_delete+0xa8>)
 8012c4e:	6018      	str	r0, [r3, #0]
 8012c50:	e7c6      	b.n	8012be0 <_nx_packet_pool_delete+0x30>
 8012c52:	bf00      	nop
 8012c54:	20007898 	.word	0x20007898
 8012c58:	2000789c 	.word	0x2000789c
 8012c5c:	20007a7c 	.word	0x20007a7c

08012c60 <_nx_tcp_cleanup_deferred>:
{
    NX_PARAMETER_NOT_USED(thread_ptr);

    NX_CLEANUP_EXTENSION
    /* This function is never called... so do nothing!  */
}
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop

08012c64 <_nx_tcp_client_bind_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012c64:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012c68:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the TCP socket.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8012c6a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d046      	beq.n	8012cfe <_nx_tcp_client_bind_cleanup+0x9a>
 8012c70:	4926      	ldr	r1, [pc, #152]	; (8012d0c <_nx_tcp_client_bind_cleanup+0xa8>)
{
 8012c72:	b430      	push	{r4, r5}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012c74:	681c      	ldr	r4, [r3, #0]
 8012c76:	428c      	cmp	r4, r1
 8012c78:	d003      	beq.n	8012c82 <_nx_tcp_client_bind_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012c7a:	f382 8810 	msr	PRIMASK, r2
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8012c7e:	bc30      	pop	{r4, r5}
 8012c80:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8012c82:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8012c84:	2900      	cmp	r1, #0
 8012c86:	d0f8      	beq.n	8012c7a <_nx_tcp_client_bind_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c88:	f3ef 8405 	mrs	r4, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8012c8c:	4920      	ldr	r1, [pc, #128]	; (8012d10 <_nx_tcp_client_bind_cleanup+0xac>)
 8012c8e:	6809      	ldr	r1, [r1, #0]
 8012c90:	4321      	orrs	r1, r4
 8012c92:	d126      	bne.n	8012ce2 <_nx_tcp_client_bind_cleanup+0x7e>
 8012c94:	4d1f      	ldr	r5, [pc, #124]	; (8012d14 <_nx_tcp_client_bind_cleanup+0xb0>)
 8012c96:	4c20      	ldr	r4, [pc, #128]	; (8012d18 <_nx_tcp_client_bind_cleanup+0xb4>)
 8012c98:	682d      	ldr	r5, [r5, #0]
 8012c9a:	42a5      	cmp	r5, r4
 8012c9c:	d021      	beq.n	8012ce2 <_nx_tcp_client_bind_cleanup+0x7e>
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8012c9e:	6f04      	ldr	r4, [r0, #112]	; 0x70
        socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 8012ca0:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8012ca4:	4284      	cmp	r4, r0
        owning_socket_ptr =  socket_ptr -> nx_tcp_socket_bound_previous;
 8012ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012caa:	6681      	str	r1, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8012cac:	d02a      	beq.n	8012d04 <_nx_tcp_client_bind_cleanup+0xa0>
                thread_ptr -> tx_thread_suspended_previous;
 8012cae:	6f41      	ldr	r1, [r0, #116]	; 0x74
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8012cb0:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8012cb4:	6761      	str	r1, [r4, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8012cb6:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8012cb8:	670c      	str	r4, [r1, #112]	; 0x70
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 8012cba:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8012cbe:	6b04      	ldr	r4, [r0, #48]	; 0x30
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 8012cc0:	3901      	subs	r1, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8012cc2:	2c0c      	cmp	r4, #12
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 8012cc4:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8012cc8:	d1d7      	bne.n	8012c7a <_nx_tcp_client_bind_cleanup+0x16>
            _tx_thread_preempt_disable++;
 8012cca:	4914      	ldr	r1, [pc, #80]	; (8012d1c <_nx_tcp_client_bind_cleanup+0xb8>)
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 8012ccc:	2423      	movs	r4, #35	; 0x23
            _tx_thread_preempt_disable++;
 8012cce:	680b      	ldr	r3, [r1, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 8012cd0:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012cd8:	f382 8810 	msr	PRIMASK, r2
}
 8012cdc:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 8012cde:	f00a bae7 	b.w	801d2b0 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8012ce2:	490f      	ldr	r1, [pc, #60]	; (8012d20 <_nx_tcp_client_bind_cleanup+0xbc>)
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8012ce4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8012ce8:	6681      	str	r1, [r0, #104]	; 0x68
 8012cea:	f382 8810 	msr	PRIMASK, r2
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 8012cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 8012cf8:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8012cfa:	f009 bd15 	b.w	801c728 <_tx_event_flags_set>
 8012cfe:	f382 8810 	msr	PRIMASK, r2
 8012d02:	4770      	bx	lr
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 8012d04:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8012d08:	e7d7      	b.n	8012cba <_nx_tcp_client_bind_cleanup+0x56>
 8012d0a:	bf00      	nop
 8012d0c:	54435020 	.word	0x54435020
 8012d10:	200000ec 	.word	0x200000ec
 8012d14:	20007a80 	.word	0x20007a80
 8012d18:	20007b28 	.word	0x20007b28
 8012d1c:	20007a7c 	.word	0x20007a7c
 8012d20:	08012c61 	.word	0x08012c61

08012d24 <_nx_tcp_connect_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012d24:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012d28:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8012d2a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d03f      	beq.n	8012db0 <_nx_tcp_connect_cleanup+0x8c>
 8012d30:	4922      	ldr	r1, [pc, #136]	; (8012dbc <_nx_tcp_connect_cleanup+0x98>)
{
 8012d32:	b430      	push	{r4, r5}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012d34:	681c      	ldr	r4, [r3, #0]
 8012d36:	428c      	cmp	r4, r1
 8012d38:	d003      	beq.n	8012d42 <_nx_tcp_connect_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d3a:	f382 8810 	msr	PRIMASK, r2
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8012d3e:	bc30      	pop	{r4, r5}
 8012d40:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8012d42:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8012d44:	2900      	cmp	r1, #0
 8012d46:	d0f8      	beq.n	8012d3a <_nx_tcp_connect_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012d48:	f3ef 8405 	mrs	r4, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8012d4c:	491c      	ldr	r1, [pc, #112]	; (8012dc0 <_nx_tcp_connect_cleanup+0x9c>)
 8012d4e:	6809      	ldr	r1, [r1, #0]
 8012d50:	4321      	orrs	r1, r4
 8012d52:	d11f      	bne.n	8012d94 <_nx_tcp_connect_cleanup+0x70>
 8012d54:	4d1b      	ldr	r5, [pc, #108]	; (8012dc4 <_nx_tcp_connect_cleanup+0xa0>)
 8012d56:	4c1c      	ldr	r4, [pc, #112]	; (8012dc8 <_nx_tcp_connect_cleanup+0xa4>)
 8012d58:	682d      	ldr	r5, [r5, #0]
 8012d5a:	42a5      	cmp	r5, r4
 8012d5c:	d01a      	beq.n	8012d94 <_nx_tcp_connect_cleanup+0x70>
        if (socket_ptr -> nx_tcp_socket_client_type)
 8012d5e:	689c      	ldr	r4, [r3, #8]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012d60:	6681      	str	r1, [r0, #104]	; 0x68
        socket_ptr -> nx_tcp_socket_connect_suspended_thread =  NX_NULL;
 8012d62:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8012d66:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
        if (socket_ptr -> nx_tcp_socket_client_type)
 8012d6a:	bb24      	cbnz	r4, 8012db6 <_nx_tcp_connect_cleanup+0x92>
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 8012d6c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8012d6e:	2402      	movs	r4, #2
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 8012d70:	3901      	subs	r1, #1
 8012d72:	64d9      	str	r1, [r3, #76]	; 0x4c
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8012d74:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012d76:	645c      	str	r4, [r3, #68]	; 0x44
 8012d78:	290c      	cmp	r1, #12
 8012d7a:	d1de      	bne.n	8012d3a <_nx_tcp_connect_cleanup+0x16>
            _tx_thread_preempt_disable++;
 8012d7c:	4913      	ldr	r1, [pc, #76]	; (8012dcc <_nx_tcp_connect_cleanup+0xa8>)
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8012d7e:	2438      	movs	r4, #56	; 0x38
            _tx_thread_preempt_disable++;
 8012d80:	680b      	ldr	r3, [r1, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8012d82:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 8012d86:	3301      	adds	r3, #1
 8012d88:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d8a:	f382 8810 	msr	PRIMASK, r2
}
 8012d8e:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 8012d90:	f00a ba8e 	b.w	801d2b0 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8012d94:	490e      	ldr	r1, [pc, #56]	; (8012dd0 <_nx_tcp_connect_cleanup+0xac>)
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8012d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8012d9a:	6681      	str	r1, [r0, #104]	; 0x68
 8012d9c:	f382 8810 	msr	PRIMASK, r2
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8012da0:	2200      	movs	r2, #0
 8012da2:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 8012da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 8012daa:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8012dac:	f009 bcbc 	b.w	801c728 <_tx_event_flags_set>
 8012db0:	f382 8810 	msr	PRIMASK, r2
 8012db4:	4770      	bx	lr
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 8012db6:	2401      	movs	r4, #1
 8012db8:	e7dc      	b.n	8012d74 <_nx_tcp_connect_cleanup+0x50>
 8012dba:	bf00      	nop
 8012dbc:	54435020 	.word	0x54435020
 8012dc0:	200000ec 	.word	0x200000ec
 8012dc4:	20007a80 	.word	0x20007a80
 8012dc8:	20007b28 	.word	0x20007b28
 8012dcc:	20007a7c 	.word	0x20007a7c
 8012dd0:	08012c61 	.word	0x08012c61

08012dd4 <_nx_tcp_deferred_cleanup_check>:
TX_THREAD     *thread_ptr;


    /* Pickup the first socket and the created count.  */
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
    created_sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 8012dd4:	f8d0 39b8 	ldr.w	r3, [r0, #2488]	; 0x9b8
{
 8012dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 8012ddc:	f8d0 69b4 	ldr.w	r6, [r0, #2484]	; 0x9b4

    /* Loop through all created TCP sockets on the IP instance.  */
    while (created_sockets--)
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d04d      	beq.n	8012e80 <_nx_tcp_deferred_cleanup_check+0xac>
 8012de4:	f103 38ff 	add.w	r8, r3, #4294967295
 8012de8:	4d34      	ldr	r5, [pc, #208]	; (8012ebc <_nx_tcp_deferred_cleanup_check+0xe8>)
 8012dea:	e019      	b.n	8012e20 <_nx_tcp_deferred_cleanup_check+0x4c>
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
            } while (--suspended_threads);
        }

        /* Check the socket for deferred connect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_connect_suspended_thread;
 8012dec:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
        if (thread_ptr)
 8012df0:	b110      	cbz	r0, 8012df8 <_nx_tcp_deferred_cleanup_check+0x24>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8012df2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8012df4:	42ab      	cmp	r3, r5
 8012df6:	d05c      	beq.n	8012eb2 <_nx_tcp_deferred_cleanup_check+0xde>
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
            }
        }

        /* Check the socket for deferred disconnect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_disconnect_suspended_thread;
 8012df8:	f8d6 010c 	ldr.w	r0, [r6, #268]	; 0x10c
        if (thread_ptr)
 8012dfc:	b110      	cbz	r0, 8012e04 <_nx_tcp_deferred_cleanup_check+0x30>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8012dfe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8012e00:	42ab      	cmp	r3, r5
 8012e02:	d052      	beq.n	8012eaa <_nx_tcp_deferred_cleanup_check+0xd6>
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
            }
        }

        /* Check the socket for deferred receive cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_receive_suspended_count;
 8012e04:	f8d6 40fc 	ldr.w	r4, [r6, #252]	; 0xfc
        if (suspended_threads)
 8012e08:	2c00      	cmp	r4, #0
 8012e0a:	d13b      	bne.n	8012e84 <_nx_tcp_deferred_cleanup_check+0xb0>
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
            } while (--suspended_threads);
        }

        /* Check the socket for deferred transmit cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_transmit_suspended_count;
 8012e0c:	f8d6 4104 	ldr.w	r4, [r6, #260]	; 0x104
        if (suspended_threads)
 8012e10:	b9ec      	cbnz	r4, 8012e4e <_nx_tcp_deferred_cleanup_check+0x7a>
    while (created_sockets--)
 8012e12:	f108 38ff 	add.w	r8, r8, #4294967295
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
            } while (--suspended_threads);
        }

        /* Move to next created TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8012e16:	f8d6 6118 	ldr.w	r6, [r6, #280]	; 0x118
    while (created_sockets--)
 8012e1a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012e1e:	d02f      	beq.n	8012e80 <_nx_tcp_deferred_cleanup_check+0xac>
        suspended_threads =  socket_ptr -> nx_tcp_socket_bind_suspended_count;
 8012e20:	f8d6 4114 	ldr.w	r4, [r6, #276]	; 0x114
        if (suspended_threads)
 8012e24:	2c00      	cmp	r4, #0
 8012e26:	d0e1      	beq.n	8012dec <_nx_tcp_deferred_cleanup_check+0x18>
            thread_ptr =  socket_ptr -> nx_tcp_socket_bind_suspension_list;
 8012e28:	f8d6 7110 	ldr.w	r7, [r6, #272]	; 0x110
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8012e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e2e:	42ab      	cmp	r3, r5
 8012e30:	d005      	beq.n	8012e3e <_nx_tcp_deferred_cleanup_check+0x6a>
            } while (--suspended_threads);
 8012e32:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012e34:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8012e36:	d0d9      	beq.n	8012dec <_nx_tcp_deferred_cleanup_check+0x18>
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8012e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e3a:	42ab      	cmp	r3, r5
 8012e3c:	d1f9      	bne.n	8012e32 <_nx_tcp_deferred_cleanup_check+0x5e>
                    _nx_tcp_client_bind_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8012e3e:	4638      	mov	r0, r7
 8012e40:	2100      	movs	r1, #0
 8012e42:	f7ff ff0f 	bl	8012c64 <_nx_tcp_client_bind_cleanup>
            } while (--suspended_threads);
 8012e46:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012e48:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8012e4a:	d1ef      	bne.n	8012e2c <_nx_tcp_deferred_cleanup_check+0x58>
 8012e4c:	e7ce      	b.n	8012dec <_nx_tcp_deferred_cleanup_check+0x18>
            thread_ptr =  socket_ptr -> nx_tcp_socket_transmit_suspension_list;
 8012e4e:	f8d6 7100 	ldr.w	r7, [r6, #256]	; 0x100
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8012e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e54:	42ab      	cmp	r3, r5
 8012e56:	d005      	beq.n	8012e64 <_nx_tcp_deferred_cleanup_check+0x90>
            } while (--suspended_threads);
 8012e58:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012e5a:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8012e5c:	d0d9      	beq.n	8012e12 <_nx_tcp_deferred_cleanup_check+0x3e>
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8012e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e60:	42ab      	cmp	r3, r5
 8012e62:	d1f9      	bne.n	8012e58 <_nx_tcp_deferred_cleanup_check+0x84>
                    _nx_tcp_transmit_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8012e64:	4638      	mov	r0, r7
 8012e66:	2100      	movs	r1, #0
 8012e68:	f7f5 fc8e 	bl	8008788 <_nx_tcp_transmit_cleanup>
            } while (--suspended_threads);
 8012e6c:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012e6e:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8012e70:	d1ef      	bne.n	8012e52 <_nx_tcp_deferred_cleanup_check+0x7e>
    while (created_sockets--)
 8012e72:	f108 38ff 	add.w	r8, r8, #4294967295
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8012e76:	f8d6 6118 	ldr.w	r6, [r6, #280]	; 0x118
    while (created_sockets--)
 8012e7a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012e7e:	d1cf      	bne.n	8012e20 <_nx_tcp_deferred_cleanup_check+0x4c>
    }
}
 8012e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 8012e84:	f8d6 70f8 	ldr.w	r7, [r6, #248]	; 0xf8
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8012e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e8a:	42ab      	cmp	r3, r5
 8012e8c:	d005      	beq.n	8012e9a <_nx_tcp_deferred_cleanup_check+0xc6>
            } while (--suspended_threads);
 8012e8e:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012e90:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8012e92:	d0bb      	beq.n	8012e0c <_nx_tcp_deferred_cleanup_check+0x38>
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8012e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e96:	42ab      	cmp	r3, r5
 8012e98:	d1f9      	bne.n	8012e8e <_nx_tcp_deferred_cleanup_check+0xba>
                    _nx_tcp_receive_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8012e9a:	4638      	mov	r0, r7
 8012e9c:	2100      	movs	r1, #0
 8012e9e:	f000 faeb 	bl	8013478 <_nx_tcp_receive_cleanup>
            } while (--suspended_threads);
 8012ea2:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012ea4:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8012ea6:	d1ef      	bne.n	8012e88 <_nx_tcp_deferred_cleanup_check+0xb4>
 8012ea8:	e7b0      	b.n	8012e0c <_nx_tcp_deferred_cleanup_check+0x38>
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8012eaa:	2100      	movs	r1, #0
 8012eac:	f000 f808 	bl	8012ec0 <_nx_tcp_disconnect_cleanup>
 8012eb0:	e7a8      	b.n	8012e04 <_nx_tcp_deferred_cleanup_check+0x30>
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	f7ff ff36 	bl	8012d24 <_nx_tcp_connect_cleanup>
 8012eb8:	e79e      	b.n	8012df8 <_nx_tcp_deferred_cleanup_check+0x24>
 8012eba:	bf00      	nop
 8012ebc:	08012c61 	.word	0x08012c61

08012ec0 <_nx_tcp_disconnect_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012ec0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012ec4:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8012ec6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d037      	beq.n	8012f3c <_nx_tcp_disconnect_cleanup+0x7c>
{
 8012ecc:	b470      	push	{r4, r5, r6}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012ece:	4c1d      	ldr	r4, [pc, #116]	; (8012f44 <_nx_tcp_disconnect_cleanup+0x84>)
 8012ed0:	681d      	ldr	r5, [r3, #0]
 8012ed2:	42a5      	cmp	r5, r4
 8012ed4:	d003      	beq.n	8012ede <_nx_tcp_disconnect_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012ed6:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8012eda:	bc70      	pop	{r4, r5, r6}
 8012edc:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8012ede:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8012ee0:	4602      	mov	r2, r0
 8012ee2:	2c00      	cmp	r4, #0
 8012ee4:	d0f7      	beq.n	8012ed6 <_nx_tcp_disconnect_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012ee6:	f3ef 8505 	mrs	r5, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8012eea:	4c17      	ldr	r4, [pc, #92]	; (8012f48 <_nx_tcp_disconnect_cleanup+0x88>)
 8012eec:	6824      	ldr	r4, [r4, #0]
 8012eee:	432c      	orrs	r4, r5
 8012ef0:	d116      	bne.n	8012f20 <_nx_tcp_disconnect_cleanup+0x60>
 8012ef2:	4e16      	ldr	r6, [pc, #88]	; (8012f4c <_nx_tcp_disconnect_cleanup+0x8c>)
 8012ef4:	4d16      	ldr	r5, [pc, #88]	; (8012f50 <_nx_tcp_disconnect_cleanup+0x90>)
 8012ef6:	6836      	ldr	r6, [r6, #0]
 8012ef8:	42ae      	cmp	r6, r5
 8012efa:	d011      	beq.n	8012f20 <_nx_tcp_disconnect_cleanup+0x60>
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8012efc:	6b05      	ldr	r5, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012efe:	6684      	str	r4, [r0, #104]	; 0x68
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8012f00:	2d0c      	cmp	r5, #12
        socket_ptr -> nx_tcp_socket_disconnect_suspended_thread =  NX_NULL;
 8012f02:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8012f06:	d1e6      	bne.n	8012ed6 <_nx_tcp_disconnect_cleanup+0x16>
            _tx_thread_preempt_disable++;
 8012f08:	4c12      	ldr	r4, [pc, #72]	; (8012f54 <_nx_tcp_disconnect_cleanup+0x94>)
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 8012f0a:	2541      	movs	r5, #65	; 0x41
            _tx_thread_preempt_disable++;
 8012f0c:	6823      	ldr	r3, [r4, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 8012f0e:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 8012f12:	3301      	adds	r3, #1
 8012f14:	6023      	str	r3, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012f16:	f381 8810 	msr	PRIMASK, r1
}
 8012f1a:	bc70      	pop	{r4, r5, r6}
            _tx_thread_system_resume(thread_ptr);
 8012f1c:	f00a b9c8 	b.w	801d2b0 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8012f20:	4c0d      	ldr	r4, [pc, #52]	; (8012f58 <_nx_tcp_disconnect_cleanup+0x98>)
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8012f22:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8012f26:	6694      	str	r4, [r2, #104]	; 0x68
 8012f28:	f381 8810 	msr	PRIMASK, r1
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 8012f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 8012f36:	bc70      	pop	{r4, r5, r6}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8012f38:	f009 bbf6 	b.w	801c728 <_tx_event_flags_set>
 8012f3c:	f381 8810 	msr	PRIMASK, r1
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop
 8012f44:	54435020 	.word	0x54435020
 8012f48:	200000ec 	.word	0x200000ec
 8012f4c:	20007a80 	.word	0x20007a80
 8012f50:	20007b28 	.word	0x20007b28
 8012f54:	20007a7c 	.word	0x20007a7c
 8012f58:	08012c61 	.word	0x08012c61

08012f5c <_nx_tcp_packet_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8012f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Pickup the source IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8012f60:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
{
 8012f64:	b08b      	sub	sp, #44	; 0x2c
ULONG                        mss = 0;
 8012f66:	2300      	movs	r3, #0
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8012f68:	2a04      	cmp	r2, #4
ULONG                        mss = 0;
 8012f6a:	9309      	str	r3, [sp, #36]	; 0x24
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8012f6c:	f000 812c 	beq.w	80131c8 <_nx_tcp_packet_process+0x26c>
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8012f70:	2a06      	cmp	r2, #6
 8012f72:	f040 809b 	bne.w	80130ac <_nx_tcp_packet_process+0x150>

    /* IPv6 */
    NX_IPV6_HEADER *ipv6_header;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8012f76:	6b8b      	ldr	r3, [r1, #56]	; 0x38

        source_ip = &ipv6_header -> nx_ip_header_source_ip[0];

        dest_ip = &ipv6_header -> nx_ip_header_destination_ip[0];

        mss = 1220;
 8012f78:	f240 42c4 	movw	r2, #1220	; 0x4c4

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8012f7c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8012f7e:	4682      	mov	sl, r0
        source_ip = &ipv6_header -> nx_ip_header_source_ip[0];
 8012f80:	f103 0508 	add.w	r5, r3, #8
        dest_ip = &ipv6_header -> nx_ip_header_destination_ip[0];
 8012f84:	3318      	adds	r3, #24
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8012f86:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8012f8a:	4689      	mov	r9, r1
        dest_ip = &ipv6_header -> nx_ip_header_destination_ip[0];
 8012f8c:	9304      	str	r3, [sp, #16]
    }
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8012f8e:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
        mss = 1220;
 8012f92:	9209      	str	r2, [sp, #36]	; 0x24
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8012f94:	071a      	lsls	r2, r3, #28
        source_ip = &ipv6_header -> nx_ip_header_source_ip[0];
 8012f96:	9503      	str	r5, [sp, #12]
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8012f98:	f140 8128 	bpl.w	80131ec <_nx_tcp_packet_process+0x290>
        }
    }

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8012f9c:	f8d9 8008 	ldr.w	r8, [r9, #8]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8012fa0:	e9d8 6501 	ldrd	r6, r5, [r8, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8012fa4:	f8d8 700c 	ldr.w	r7, [r8, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8012fa8:	ea86 4336 	eor.w	r3, r6, r6, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8012fac:	f8d8 0010 	ldr.w	r0, [r8, #16]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8012fb0:	ea87 4137 	eor.w	r1, r7, r7, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8012fb4:	f8d8 2000 	ldr.w	r2, [r8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8012fb8:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8012fba:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8012fbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8012fc0:	ea85 4435 	eor.w	r4, r5, r5, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8012fc4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8012fc8:	ea83 2336 	eor.w	r3, r3, r6, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8012fcc:	ea81 2137 	eor.w	r1, r1, r7, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8012fd0:	ea82 4632 	eor.w	r6, r2, r2, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8012fd4:	f8c8 3004 	str.w	r3, [r8, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8012fd8:	ea80 4730 	eor.w	r7, r0, r0, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8012fdc:	f8c8 100c 	str.w	r1, [r8, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8012fe0:	0a24      	lsrs	r4, r4, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8012fe2:	0a3f      	lsrs	r7, r7, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8012fe4:	0a36      	lsrs	r6, r6, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8012fe6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8012fea:	f007 13ff 	and.w	r3, r7, #16711935	; 0xff00ff

    /* Determine if there are any option words...  Note there are always 5 words in a TCP header.  */
    option_words =  (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 8012fee:	0f09      	lsrs	r1, r1, #28
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8012ff0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8012ff4:	ea84 2435 	eor.w	r4, r4, r5, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8012ff8:	ea83 2330 	eor.w	r3, r3, r0, ror #8
        /* The function is complete, just return!  */
        return;
    }
#endif

    if (option_words)
 8012ffc:	3905      	subs	r1, #5
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8012ffe:	ea86 2632 	eor.w	r6, r6, r2, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8013002:	f8c8 4008 	str.w	r4, [r8, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8013006:	f8c8 3010 	str.w	r3, [r8, #16]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 801300a:	f8c8 6000 	str.w	r6, [r8]
    if (option_words)
 801300e:	d14f      	bne.n	80130b0 <_nx_tcp_packet_process+0x154>
 8013010:	b2b5      	uxth	r5, r6
 8013012:	0c36      	lsrs	r6, r6, #16
 8013014:	eb05 2315 	add.w	r3, r5, r5, lsr #8
 8013018:	f003 031f 	and.w	r3, r3, #31
 801301c:	9305      	str	r3, [sp, #20]
 801301e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013022:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
 8013026:	6854      	ldr	r4, [r2, #4]

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];

    /* Determine if there are any sockets bound on this port index.  */
    if (socket_ptr)
 8013028:	2c00      	cmp	r4, #0
 801302a:	d066      	beq.n	80130fa <_nx_tcp_packet_process+0x19e>
 801302c:	2201      	movs	r2, #1
                }
            }

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 801302e:	eb0a 0783 	add.w	r7, sl, r3, lsl #2
 8013032:	e005      	b.n	8013040 <_nx_tcp_packet_process+0xe4>
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
 8013034:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 8013038:	6879      	ldr	r1, [r7, #4]
 801303a:	42a1      	cmp	r1, r4
 801303c:	f000 80b4 	beq.w	80131a8 <_nx_tcp_packet_process+0x24c>
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 8013040:	68e1      	ldr	r1, [r4, #12]
 8013042:	42a9      	cmp	r1, r5
 8013044:	d1f6      	bne.n	8013034 <_nx_tcp_packet_process+0xd8>
 8013046:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013048:	42b1      	cmp	r1, r6
 801304a:	d1f3      	bne.n	8013034 <_nx_tcp_packet_process+0xd8>
                if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == packet_ptr -> nx_packet_ip_version)
 801304c:	f899 0030 	ldrb.w	r0, [r9, #48]	; 0x30
 8013050:	6961      	ldr	r1, [r4, #20]
 8013052:	4281      	cmp	r1, r0
 8013054:	d1ee      	bne.n	8013034 <_nx_tcp_packet_process+0xd8>
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8013056:	2904      	cmp	r1, #4
 8013058:	f000 80ff 	beq.w	801325a <_nx_tcp_packet_process+0x2fe>
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 801305c:	2906      	cmp	r1, #6
 801305e:	d1e9      	bne.n	8013034 <_nx_tcp_packet_process+0xd8>
                        if (CHECK_IPV6_ADDRESSES_SAME(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6, source_ip))
 8013060:	9903      	ldr	r1, [sp, #12]
 8013062:	f104 0018 	add.w	r0, r4, #24
 8013066:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801306a:	f7f3 fa05 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 801306e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013072:	2800      	cmp	r0, #0
 8013074:	d0de      	beq.n	8013034 <_nx_tcp_packet_process+0xd8>
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 8013076:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 801307a:	f8d8 200c 	ldr.w	r2, [r8, #12]
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 801307e:	605c      	str	r4, [r3, #4]
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 8013080:	0393      	lsls	r3, r2, #14
 8013082:	d50e      	bpl.n	80130a2 <_nx_tcp_packet_process+0x146>
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8013084:	9b09      	ldr	r3, [sp, #36]	; 0x24
                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 8013086:	6922      	ldr	r2, [r4, #16]
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8013088:	6323      	str	r3, [r4, #48]	; 0x30
                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 801308a:	b112      	cbz	r2, 8013092 <_nx_tcp_packet_process+0x136>
 801308c:	4293      	cmp	r3, r2
 801308e:	f200 81a0 	bhi.w	80133d2 <_nx_tcp_packet_process+0x476>
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 8013092:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8013094:	2a03      	cmp	r2, #3
 8013096:	f000 8196 	beq.w	80133c6 <_nx_tcp_packet_process+0x46a>
                            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 801309a:	62e3      	str	r3, [r4, #44]	; 0x2c
                            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 801309c:	fb03 f303 	mul.w	r3, r3, r3
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
 80130a0:	63e3      	str	r3, [r4, #60]	; 0x3c
                    _nx_tcp_socket_packet_process(socket_ptr, packet_ptr);
 80130a2:	4649      	mov	r1, r9
 80130a4:	4620      	mov	r0, r4
 80130a6:	f000 fb25 	bl	80136f4 <_nx_tcp_socket_packet_process>
                    return;
 80130aa:	e087      	b.n	80131bc <_nx_tcp_packet_process+0x260>
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 80130ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130ae:	deff      	udf	#255	; 0xff
        status = _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 80130b0:	aa09      	add	r2, sp, #36	; 0x24
 80130b2:	0089      	lsls	r1, r1, #2
 80130b4:	f108 0014 	add.w	r0, r8, #20
 80130b8:	f002 fd68 	bl	8015b8c <_nx_tcp_mss_option_get>
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 80130bc:	f8d8 6000 	ldr.w	r6, [r8]
        if (status == NX_FALSE)
 80130c0:	4602      	mov	r2, r0
 80130c2:	2800      	cmp	r0, #0
 80130c4:	f000 80a0 	beq.w	8013208 <_nx_tcp_packet_process+0x2ac>
 80130c8:	b2b5      	uxth	r5, r6
            if (mss == 0)
 80130ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130cc:	0c36      	lsrs	r6, r6, #16
 80130ce:	eb05 2315 	add.w	r3, r5, r5, lsr #8
 80130d2:	f003 031f 	and.w	r3, r3, #31
 80130d6:	9305      	str	r3, [sp, #20]
 80130d8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80130dc:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 80130e0:	684c      	ldr	r4, [r1, #4]
 80130e2:	2a00      	cmp	r2, #0
 80130e4:	d1a0      	bne.n	8013028 <_nx_tcp_packet_process+0xcc>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80130e6:	f899 2030 	ldrb.w	r2, [r9, #48]	; 0x30
 80130ea:	2a04      	cmp	r2, #4
 80130ec:	f040 80bc 	bne.w	8013268 <_nx_tcp_packet_process+0x30c>
                    mss = 536;
 80130f0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80130f4:	9209      	str	r2, [sp, #36]	; 0x24
    if (socket_ptr)
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	d198      	bne.n	801302c <_nx_tcp_packet_process+0xd0>
#endif

    /* Handle new connection requests without ACK bit in NX_TCP_SYN_RECEIVED state.
       NX_TCP_SYN_RECEIVED state is equal of LISTEN state of RFC.
       RFC793, Section3.9, Page65. */
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 80130fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80130fe:	02df      	lsls	r7, r3, #11
 8013100:	d45f      	bmi.n	80131c2 <_nx_tcp_packet_process+0x266>
        (ip_ptr -> nx_ip_tcp_active_listen_requests))
 8013102:	f8da 2b44 	ldr.w	r2, [sl, #2884]	; 0xb44
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 8013106:	2a00      	cmp	r2, #0
 8013108:	d05b      	beq.n	80131c2 <_nx_tcp_packet_process+0x266>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 801310a:	f899 1030 	ldrb.w	r1, [r9, #48]	; 0x30
 801310e:	2904      	cmp	r1, #4
 8013110:	f000 808a 	beq.w	8013228 <_nx_tcp_packet_process+0x2cc>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8013114:	2906      	cmp	r1, #6
 8013116:	f000 80ae 	beq.w	8013276 <_nx_tcp_packet_process+0x31a>
            }
        }
#endif /* FEATURE_NX_IPV6*/

        /* Search all ports in listen mode for a match. */
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 801311a:	4614      	mov	r4, r2
 801311c:	e002      	b.n	8013124 <_nx_tcp_packet_process+0x1c8>
                /* Finished processing, just return.  */
                return;
            }

            /* Move to the next listen request.  */
            listen_ptr = listen_ptr -> nx_tcp_listen_next;
 801311e:	69e4      	ldr	r4, [r4, #28]
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 8013120:	4294      	cmp	r4, r2
 8013122:	d04e      	beq.n	80131c2 <_nx_tcp_packet_process+0x266>
            if (listen_ptr -> nx_tcp_listen_port == port)
 8013124:	6827      	ldr	r7, [r4, #0]
 8013126:	42af      	cmp	r7, r5
 8013128:	d1f9      	bne.n	801311e <_nx_tcp_packet_process+0x1c2>
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 801312a:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 801312e:	d042      	beq.n	80131b6 <_nx_tcp_packet_process+0x25a>
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 8013130:	68a5      	ldr	r5, [r4, #8]
 8013132:	2d00      	cmp	r5, #0
 8013134:	f000 80b4 	beq.w	80132a0 <_nx_tcp_packet_process+0x344>
 8013138:	f413 2180 	ands.w	r1, r3, #262144	; 0x40000
 801313c:	f040 810d 	bne.w	801335a <_nx_tcp_packet_process+0x3fe>
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 8013140:	60a1      	str	r1, [r4, #8]
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8013142:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 8013146:	2b04      	cmp	r3, #4
 8013148:	9304      	str	r3, [sp, #16]
 801314a:	f000 8145 	beq.w	80133d8 <_nx_tcp_packet_process+0x47c>
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 801314e:	2b06      	cmp	r3, #6
 8013150:	f000 812c 	beq.w	80133ac <_nx_tcp_packet_process+0x450>
 8013154:	9b05      	ldr	r3, [sp, #20]
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8013156:	2000      	movs	r0, #0
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8013158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801315a:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 801315e:	f8d8 3004 	ldr.w	r3, [r8, #4]
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8013162:	6e29      	ldr	r1, [r5, #96]	; 0x60
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 8013164:	64eb      	str	r3, [r5, #76]	; 0x4c
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 8013166:	f8da 3934 	ldr.w	r3, [sl, #2356]	; 0x934
                    socket_ptr -> nx_tcp_socket_connect_port = source_port;
 801316a:	62ae      	str	r6, [r5, #40]	; 0x28
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 801316c:	632a      	str	r2, [r5, #48]	; 0x30
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = mss;
 801316e:	666a      	str	r2, [r5, #100]	; 0x64
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8013170:	6429      	str	r1, [r5, #64]	; 0x40
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8013172:	66a8      	str	r0, [r5, #104]	; 0x68
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 8013174:	2b00      	cmp	r3, #0
 8013176:	f000 8114 	beq.w	80133a2 <_nx_tcp_packet_process+0x446>
                            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 801317a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
                        socket_ptr -> nx_tcp_socket_bound_previous =
 801317e:	e9c5 323b 	strd	r3, r2, [r5, #236]	; 0xec
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 8013182:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8013186:	f8c2 50ec 	str.w	r5, [r2, #236]	; 0xec
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous = socket_ptr;
 801318a:	f8c3 50f0 	str.w	r5, [r3, #240]	; 0xf0
                    _nx_packet_release(packet_ptr);
 801318e:	4648      	mov	r0, r9
                    listen_callback = listen_ptr -> nx_tcp_listen_callback;
 8013190:	6864      	ldr	r4, [r4, #4]
                    _nx_packet_release(packet_ptr);
 8013192:	f7f3 fc2d 	bl	80069f0 <_nx_packet_release>
                    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 8013196:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8013198:	2b04      	cmp	r3, #4
 801319a:	f000 80be 	beq.w	801331a <_nx_tcp_packet_process+0x3be>
                    if (listen_callback)
 801319e:	b16c      	cbz	r4, 80131bc <_nx_tcp_packet_process+0x260>
                        (listen_callback)(socket_ptr, port);
 80131a0:	4639      	mov	r1, r7
 80131a2:	4628      	mov	r0, r5
 80131a4:	47a0      	blx	r4
 80131a6:	e009      	b.n	80131bc <_nx_tcp_packet_process+0x260>
    if (is_valid_option_flag == NX_FALSE)
 80131a8:	2a00      	cmp	r2, #0
 80131aa:	d1a6      	bne.n	80130fa <_nx_tcp_packet_process+0x19e>
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 80131ac:	4642      	mov	r2, r8
 80131ae:	4650      	mov	r0, sl
 80131b0:	4649      	mov	r1, r9
 80131b2:	f002 fd1d 	bl	8015bf0 <_nx_tcp_no_connection_reset>
        _nx_packet_release(packet_ptr);
 80131b6:	4648      	mov	r0, r9
 80131b8:	f7f3 fc1a 	bl	80069f0 <_nx_packet_release>

    /* Not a connection request, just release the packet.  */
    _nx_packet_release(packet_ptr);

    return;
}
 80131bc:	b00b      	add	sp, #44	; 0x2c
 80131be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 80131c2:	035b      	lsls	r3, r3, #13
 80131c4:	d4f7      	bmi.n	80131b6 <_nx_tcp_packet_process+0x25a>
 80131c6:	e7f1      	b.n	80131ac <_nx_tcp_packet_process+0x250>
        ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 80131c8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        mss = 536;
 80131ca:	f44f 7206 	mov.w	r2, #536	; 0x218
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80131ce:	f8d1 b034 	ldr.w	fp, [r1, #52]	; 0x34
 80131d2:	4682      	mov	sl, r0
        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 80131d4:	f103 040c 	add.w	r4, r3, #12
        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 80131d8:	3310      	adds	r3, #16
        mss = 536;
 80131da:	9209      	str	r2, [sp, #36]	; 0x24
 80131dc:	4689      	mov	r9, r1
        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 80131de:	9304      	str	r3, [sp, #16]
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 80131e0:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 80131e4:	9403      	str	r4, [sp, #12]
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 80131e6:	071a      	lsls	r2, r3, #28
 80131e8:	f53f aed8 	bmi.w	8012f9c <_nx_tcp_packet_process+0x40>
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 80131ec:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80131ee:	4648      	mov	r0, r9
 80131f0:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 80131f4:	9100      	str	r1, [sp, #0]
 80131f6:	2106      	movs	r1, #6
 80131f8:	f7ee fe74 	bl	8001ee4 <_nx_ip_checksum_compute>
        if (checksum != 0)
 80131fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013200:	4298      	cmp	r0, r3
 8013202:	f43f aecb 	beq.w	8012f9c <_nx_tcp_packet_process+0x40>
 8013206:	e7d6      	b.n	80131b6 <_nx_tcp_packet_process+0x25a>
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 8013208:	b2b5      	uxth	r5, r6
    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 801320a:	0c36      	lsrs	r6, r6, #16
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 801320c:	eb05 2315 	add.w	r3, r5, r5, lsr #8
 8013210:	f003 031f 	and.w	r3, r3, #31
 8013214:	9305      	str	r3, [sp, #20]
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 8013216:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801321a:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 801321e:	684c      	ldr	r4, [r1, #4]
    if (socket_ptr)
 8013220:	2c00      	cmp	r4, #0
 8013222:	f47f af04 	bne.w	801302e <_nx_tcp_packet_process+0xd2>
 8013226:	e7c1      	b.n	80131ac <_nx_tcp_packet_process+0x250>
            if ((*source_ip == *dest_ip) && (source_port == port))
 8013228:	9904      	ldr	r1, [sp, #16]
 801322a:	6808      	ldr	r0, [r1, #0]
 801322c:	9903      	ldr	r1, [sp, #12]
 801322e:	6809      	ldr	r1, [r1, #0]
 8013230:	4288      	cmp	r0, r1
 8013232:	d101      	bne.n	8013238 <_nx_tcp_packet_process+0x2dc>
 8013234:	42b5      	cmp	r5, r6
 8013236:	d0be      	beq.n	80131b6 <_nx_tcp_packet_process+0x25a>
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8013238:	f001 4070 	and.w	r0, r1, #4026531840	; 0xf0000000
            if (
 801323c:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
 8013240:	d0b9      	beq.n	80131b6 <_nx_tcp_packet_process+0x25a>
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 8013242:	e9db 4006 	ldrd	r4, r0, [fp, #24]
 8013246:	ea01 0704 	and.w	r7, r1, r4
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 801324a:	4287      	cmp	r7, r0
 801324c:	d024      	beq.n	8013298 <_nx_tcp_packet_process+0x33c>
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 801324e:	1c4c      	adds	r4, r1, #1
 8013250:	d0b1      	beq.n	80131b6 <_nx_tcp_packet_process+0x25a>
 8013252:	4281      	cmp	r1, r0
 8013254:	f47f af61 	bne.w	801311a <_nx_tcp_packet_process+0x1be>
 8013258:	e7ad      	b.n	80131b6 <_nx_tcp_packet_process+0x25a>
                if (find_a_match)
 801325a:	9903      	ldr	r1, [sp, #12]
 801325c:	69a0      	ldr	r0, [r4, #24]
 801325e:	6809      	ldr	r1, [r1, #0]
 8013260:	4288      	cmp	r0, r1
 8013262:	f47f aee7 	bne.w	8013034 <_nx_tcp_packet_process+0xd8>
 8013266:	e706      	b.n	8013076 <_nx_tcp_packet_process+0x11a>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8013268:	2a06      	cmp	r2, #6
 801326a:	f47f aedd 	bne.w	8013028 <_nx_tcp_packet_process+0xcc>
                    mss = 1220;
 801326e:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8013272:	9209      	str	r2, [sp, #36]	; 0x24
 8013274:	e6d8      	b.n	8013028 <_nx_tcp_packet_process+0xcc>
            if ((CHECK_IPV6_ADDRESSES_SAME(source_ip, dest_ip)) && (source_port == port))
 8013276:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801327a:	f7f3 f8fd 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 801327e:	b108      	cbz	r0, 8013284 <_nx_tcp_packet_process+0x328>
 8013280:	42b5      	cmp	r5, r6
 8013282:	d098      	beq.n	80131b6 <_nx_tcp_packet_process+0x25a>
            if (IPv6_Address_Type(source_ip) & IPV6_ADDRESS_MULTICAST)
 8013284:	9803      	ldr	r0, [sp, #12]
 8013286:	f7f3 f96d 	bl	8006564 <IPv6_Address_Type>
 801328a:	0040      	lsls	r0, r0, #1
 801328c:	d493      	bmi.n	80131b6 <_nx_tcp_packet_process+0x25a>
 801328e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013292:	f8da 2b44 	ldr.w	r2, [sl, #2884]	; 0xb44
 8013296:	e740      	b.n	801311a <_nx_tcp_packet_process+0x1be>
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 8013298:	43e4      	mvns	r4, r4
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 801329a:	438c      	bics	r4, r1
 801329c:	d1d7      	bne.n	801324e <_nx_tcp_packet_process+0x2f2>
 801329e:	e78a      	b.n	80131b6 <_nx_tcp_packet_process+0x25a>
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 80132a0:	e9d4 3b04 	ldrd	r3, fp, [r4, #16]
                    while (queued_count--)
 80132a4:	1e5f      	subs	r7, r3, #1
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d05e      	beq.n	8013368 <_nx_tcp_packet_process+0x40c>
 80132aa:	9404      	str	r4, [sp, #16]
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 80132ac:	465d      	mov	r5, fp
 80132ae:	4634      	mov	r4, r6
 80132b0:	9e03      	ldr	r6, [sp, #12]
 80132b2:	e008      	b.n	80132c6 <_nx_tcp_packet_process+0x36a>
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 80132b4:	2b06      	cmp	r3, #6
 80132b6:	d041      	beq.n	801333c <_nx_tcp_packet_process+0x3e0>
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 80132b8:	69e9      	ldr	r1, [r5, #28]
 80132ba:	46ab      	mov	fp, r5
                    while (queued_count--)
 80132bc:	1e7b      	subs	r3, r7, #1
 80132be:	2f00      	cmp	r7, #0
 80132c0:	d051      	beq.n	8013366 <_nx_tcp_packet_process+0x40a>
 80132c2:	461f      	mov	r7, r3
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 80132c4:	460d      	mov	r5, r1
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80132c6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 80132ca:	68a8      	ldr	r0, [r5, #8]
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80132cc:	2b04      	cmp	r3, #4
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 80132ce:	f8b0 a002 	ldrh.w	sl, [r0, #2]
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80132d2:	d1ef      	bne.n	80132b4 <_nx_tcp_packet_process+0x358>
                            if ((*queued_source_ip == *source_ip) && (queued_source_port == source_port))
 80132d4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80132d8:	6833      	ldr	r3, [r6, #0]
 80132da:	4299      	cmp	r1, r3
 80132dc:	d1ec      	bne.n	80132b8 <_nx_tcp_packet_process+0x35c>
 80132de:	45a2      	cmp	sl, r4
 80132e0:	d1ea      	bne.n	80132b8 <_nx_tcp_packet_process+0x35c>
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 80132e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132e6:	9c04      	ldr	r4, [sp, #16]
 80132e8:	0359      	lsls	r1, r3, #13
 80132ea:	f57f af64 	bpl.w	80131b6 <_nx_tcp_packet_process+0x25a>
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 80132ee:	6962      	ldr	r2, [r4, #20]
                            _nx_packet_release(queued_ptr);
 80132f0:	4628      	mov	r0, r5
 80132f2:	69eb      	ldr	r3, [r5, #28]
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 80132f4:	42aa      	cmp	r2, r5
                                listen_ptr -> nx_tcp_listen_queue_head = queued_ptr -> nx_packet_queue_next;
 80132f6:	bf0c      	ite	eq
 80132f8:	6163      	streq	r3, [r4, #20]
                                queued_prev_ptr -> nx_packet_queue_next = queued_ptr -> nx_packet_queue_next;
 80132fa:	f8cb 301c 	strne.w	r3, [fp, #28]
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 80132fe:	69a3      	ldr	r3, [r4, #24]
 8013300:	42ab      	cmp	r3, r5
                                listen_ptr -> nx_tcp_listen_queue_tail = queued_prev_ptr;
 8013302:	bf08      	it	eq
 8013304:	f8c4 b018 	streq.w	fp, [r4, #24]
                            _nx_packet_release(queued_ptr);
 8013308:	f7f3 fb72 	bl	80069f0 <_nx_packet_release>
                            listen_ptr -> nx_tcp_listen_queue_current--;
 801330c:	6923      	ldr	r3, [r4, #16]
                            _nx_packet_release(packet_ptr);
 801330e:	4648      	mov	r0, r9
                            listen_ptr -> nx_tcp_listen_queue_current--;
 8013310:	3b01      	subs	r3, #1
 8013312:	6123      	str	r3, [r4, #16]
                            _nx_packet_release(packet_ptr);
 8013314:	f7f3 fb6c 	bl	80069f0 <_nx_packet_release>
                            return;
 8013318:	e750      	b.n	80131bc <_nx_tcp_packet_process+0x260>
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 801331a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 801331c:	2200      	movs	r2, #0
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 801331e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8013320:	3301      	adds	r3, #1
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8013322:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 8013326:	1c48      	adds	r0, r1, #1
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8013328:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 801332c:	e9c5 0312 	strd	r0, r3, [r5, #72]	; 0x48
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8013330:	f8c5 20d8 	str.w	r2, [r5, #216]	; 0xd8
                        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8013334:	4628      	mov	r0, r5
 8013336:	f7f3 fff3 	bl	8007320 <_nx_tcp_packet_send_syn>
 801333a:	e730      	b.n	801319e <_nx_tcp_packet_process+0x242>
                            if ((CHECK_IPV6_ADDRESSES_SAME(queued_source_ip, source_ip)) && (queued_source_port == source_port))
 801333c:	3820      	subs	r0, #32
 801333e:	4631      	mov	r1, r6
 8013340:	f7f3 f89a 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8013344:	45a2      	cmp	sl, r4
 8013346:	d1b7      	bne.n	80132b8 <_nx_tcp_packet_process+0x35c>
 8013348:	2800      	cmp	r0, #0
 801334a:	d0b5      	beq.n	80132b8 <_nx_tcp_packet_process+0x35c>
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 801334c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013350:	9c04      	ldr	r4, [sp, #16]
 8013352:	035a      	lsls	r2, r3, #13
 8013354:	f57f af2f 	bpl.w	80131b6 <_nx_tcp_packet_process+0x25a>
 8013358:	e7c9      	b.n	80132ee <_nx_tcp_packet_process+0x392>
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 801335a:	e9d4 3b04 	ldrd	r3, fp, [r4, #16]
                    while (queued_count--)
 801335e:	1e5f      	subs	r7, r3, #1
 8013360:	2b00      	cmp	r3, #0
 8013362:	d1a2      	bne.n	80132aa <_nx_tcp_packet_process+0x34e>
 8013364:	e727      	b.n	80131b6 <_nx_tcp_packet_process+0x25a>
 8013366:	9c04      	ldr	r4, [sp, #16]
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8013368:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801336c:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 8013370:	f47f af21 	bne.w	80131b6 <_nx_tcp_packet_process+0x25a>
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 8013374:	6960      	ldr	r0, [r4, #20]
                    packet_ptr -> nx_packet_queue_next = NX_NULL;
 8013376:	f8c9 301c 	str.w	r3, [r9, #28]
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 801337a:	2800      	cmp	r0, #0
 801337c:	d041      	beq.n	8013402 <_nx_tcp_packet_process+0x4a6>
                        (listen_ptr -> nx_tcp_listen_queue_tail) -> nx_packet_queue_next = packet_ptr;
 801337e:	69a3      	ldr	r3, [r4, #24]
 8013380:	f8c3 901c 	str.w	r9, [r3, #28]
                    listen_ptr -> nx_tcp_listen_queue_tail =  packet_ptr;
 8013384:	f8c4 9018 	str.w	r9, [r4, #24]
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 8013388:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
                    listen_ptr -> nx_tcp_listen_queue_current++;
 801338c:	1c5a      	adds	r2, r3, #1
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 801338e:	428a      	cmp	r2, r1
                    listen_ptr -> nx_tcp_listen_queue_current++;
 8013390:	6122      	str	r2, [r4, #16]
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 8013392:	f67f af13 	bls.w	80131bc <_nx_tcp_packet_process+0x260>
                        listen_ptr -> nx_tcp_listen_queue_head = (listen_ptr -> nx_tcp_listen_queue_head) -> nx_packet_queue_next;
 8013396:	69c2      	ldr	r2, [r0, #28]
 8013398:	e9c4 3204 	strd	r3, r2, [r4, #16]
                        _nx_packet_release(packet_ptr);
 801339c:	f7f3 fb28 	bl	80069f0 <_nx_packet_release>
 80133a0:	e70c      	b.n	80131bc <_nx_tcp_packet_process+0x260>
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 80133a2:	e9c5 553b 	strd	r5, r5, [r5, #236]	; 0xec
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 80133a6:	f8ca 5934 	str.w	r5, [sl, #2356]	; 0x934
 80133aa:	e6f0      	b.n	801318e <_nx_tcp_packet_process+0x232>
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V6;
 80133ac:	616b      	str	r3, [r5, #20]
                        COPY_IPV6_ADDRESS(source_ip, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 80133ae:	f105 0118 	add.w	r1, r5, #24
 80133b2:	9803      	ldr	r0, [sp, #12]
 80133b4:	f7f3 f88a 	bl	80064cc <COPY_IPV6_ADDRESS>
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 80133b8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 80133bc:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 80133c0:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
 80133c4:	e6c6      	b.n	8013154 <_nx_tcp_packet_process+0x1f8>
                                 (socket_ptr -> nx_tcp_socket_connect_mss > mss))
 80133c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 80133c8:	4293      	cmp	r3, r2
 80133ca:	f4ff ae66 	bcc.w	801309a <_nx_tcp_packet_process+0x13e>
 80133ce:	4613      	mov	r3, r2
 80133d0:	e664      	b.n	801309c <_nx_tcp_packet_process+0x140>
                            socket_ptr -> nx_tcp_socket_connect_mss  = socket_ptr -> nx_tcp_socket_mss;
 80133d2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80133d4:	4613      	mov	r3, r2
 80133d6:	e661      	b.n	801309c <_nx_tcp_packet_process+0x140>
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 80133d8:	462b      	mov	r3, r5
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 80133da:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 80133de:	f105 0234 	add.w	r2, r5, #52	; 0x34
 80133e2:	4650      	mov	r0, sl
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 80133e4:	f843 1f38 	str.w	r1, [r3, #56]!
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 80133e8:	9903      	ldr	r1, [sp, #12]
 80133ea:	6809      	ldr	r1, [r1, #0]
 80133ec:	f7ee ff64 	bl	80022b8 <_nx_ip_route_find>
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 80133f0:	9b04      	ldr	r3, [sp, #16]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 80133f2:	9903      	ldr	r1, [sp, #12]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 80133f4:	616b      	str	r3, [r5, #20]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 80133f6:	680b      	ldr	r3, [r1, #0]
 80133f8:	61ab      	str	r3, [r5, #24]
 80133fa:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 80133fe:	9304      	str	r3, [sp, #16]
 8013400:	e6a5      	b.n	801314e <_nx_tcp_packet_process+0x1f2>
                        listen_ptr -> nx_tcp_listen_queue_head = packet_ptr;
 8013402:	4648      	mov	r0, r9
 8013404:	f8c4 9014 	str.w	r9, [r4, #20]
 8013408:	e7bc      	b.n	8013384 <_nx_tcp_packet_process+0x428>
 801340a:	bf00      	nop

0801340c <_nx_tcp_packet_send_probe>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_probe(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence, UCHAR data)
{
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	b086      	sub	sp, #24

    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 8013410:	2600      	movs	r6, #0
 8013412:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8013414:	4605      	mov	r5, r0
 8013416:	ac06      	add	r4, sp, #24
 8013418:	f804 2d01 	strb.w	r2, [r4, #-1]!
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 801341c:	460a      	mov	r2, r1
 801341e:	9402      	str	r4, [sp, #8]
 8013420:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8013424:	e9cd 6600 	strd	r6, r6, [sp]
 8013428:	f7f3 fe82 	bl	8007130 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, &data);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 801342c:	4b02      	ldr	r3, [pc, #8]	; (8013438 <_nx_tcp_packet_send_probe+0x2c>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	656b      	str	r3, [r5, #84]	; 0x54
}
 8013432:	b006      	add	sp, #24
 8013434:	bd70      	pop	{r4, r5, r6, pc}
 8013436:	bf00      	nop
 8013438:	200078c0 	.word	0x200078c0

0801343c <_nx_tcp_packet_send_rst>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_rst(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *header_ptr)
{
 801343c:	b510      	push	{r4, lr}
    /* Reset Generation, RFC793, Section3.4, Page37, the RST packet is set up based on if the incoming packet has the ACK bit set. */
    /* If the incoming segment has an ACK field, the reset takes its sequence number from the ACK field of the segment,
       otherwise the reset has sequence number zero and the ACK field is set to the sum of the sequence number and segment length of the incoming segment.  */

    /* Check for the ACK bit in the incoming TCP header.  */
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 801343e:	68cc      	ldr	r4, [r1, #12]
{
 8013440:	b084      	sub	sp, #16
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8013442:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
 8013446:	d10a      	bne.n	801345e <_nx_tcp_packet_send_rst+0x22>
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
                                    0, 0, 0, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_RST_BIT | NX_TCP_ACK_BIT), 0,
 8013448:	684b      	ldr	r3, [r1, #4]
 801344a:	4622      	mov	r2, r4
 801344c:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8013450:	9402      	str	r4, [sp, #8]
 8013452:	e9cd 4400 	strd	r4, r4, [sp]
 8013456:	f7f3 fe6b 	bl	8007130 <_nx_tcp_packet_send_control>

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the resets sent count.  */
    socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_resets_sent++;
#endif /* NX_DISABLE_TCP_INFO */
}
 801345a:	b004      	add	sp, #16
 801345c:	bd10      	pop	{r4, pc}
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
 801345e:	2400      	movs	r4, #0
 8013460:	688a      	ldr	r2, [r1, #8]
 8013462:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8013466:	4623      	mov	r3, r4
 8013468:	9400      	str	r4, [sp, #0]
 801346a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801346e:	f7f3 fe5f 	bl	8007130 <_nx_tcp_packet_send_control>
}
 8013472:	b004      	add	sp, #16
 8013474:	bd10      	pop	{r4, pc}
 8013476:	bf00      	nop

08013478 <_nx_tcp_receive_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013478:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801347c:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 801347e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8013480:	2b00      	cmp	r3, #0
 8013482:	d046      	beq.n	8013512 <_nx_tcp_receive_cleanup+0x9a>
 8013484:	4926      	ldr	r1, [pc, #152]	; (8013520 <_nx_tcp_receive_cleanup+0xa8>)
{
 8013486:	b430      	push	{r4, r5}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8013488:	681c      	ldr	r4, [r3, #0]
 801348a:	428c      	cmp	r4, r1
 801348c:	d003      	beq.n	8013496 <_nx_tcp_receive_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801348e:	f382 8810 	msr	PRIMASK, r2
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8013492:	bc30      	pop	{r4, r5}
 8013494:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8013496:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8013498:	2900      	cmp	r1, #0
 801349a:	d0f8      	beq.n	801348e <_nx_tcp_receive_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801349c:	f3ef 8405 	mrs	r4, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 80134a0:	4920      	ldr	r1, [pc, #128]	; (8013524 <_nx_tcp_receive_cleanup+0xac>)
 80134a2:	6809      	ldr	r1, [r1, #0]
 80134a4:	4321      	orrs	r1, r4
 80134a6:	d126      	bne.n	80134f6 <_nx_tcp_receive_cleanup+0x7e>
 80134a8:	4d1f      	ldr	r5, [pc, #124]	; (8013528 <_nx_tcp_receive_cleanup+0xb0>)
 80134aa:	4c20      	ldr	r4, [pc, #128]	; (801352c <_nx_tcp_receive_cleanup+0xb4>)
 80134ac:	682d      	ldr	r5, [r5, #0]
 80134ae:	42a5      	cmp	r5, r4
 80134b0:	d021      	beq.n	80134f6 <_nx_tcp_receive_cleanup+0x7e>
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80134b2:	6f04      	ldr	r4, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80134b4:	6681      	str	r1, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80134b6:	4284      	cmp	r4, r0
 80134b8:	d02e      	beq.n	8013518 <_nx_tcp_receive_cleanup+0xa0>
                thread_ptr -> tx_thread_suspended_previous;
 80134ba:	6f41      	ldr	r1, [r0, #116]	; 0x74
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80134bc:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80134c0:	6761      	str	r1, [r4, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80134c2:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80134c4:	670c      	str	r4, [r1, #112]	; 0x70
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 80134c6:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80134ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 80134cc:	3901      	subs	r1, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80134ce:	2c0c      	cmp	r4, #12
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 80134d0:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80134d4:	d1db      	bne.n	801348e <_nx_tcp_receive_cleanup+0x16>
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 80134d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            _tx_thread_preempt_disable++;
 80134d8:	4915      	ldr	r1, [pc, #84]	; (8013530 <_nx_tcp_receive_cleanup+0xb8>)
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 80134da:	2b05      	cmp	r3, #5
            _tx_thread_preempt_disable++;
 80134dc:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 80134de:	bf14      	ite	ne
 80134e0:	2438      	movne	r4, #56	; 0x38
 80134e2:	2401      	moveq	r4, #1
            _tx_thread_preempt_disable++;
 80134e4:	3301      	adds	r3, #1
 80134e6:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 80134ea:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80134ec:	f382 8810 	msr	PRIMASK, r2
}
 80134f0:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 80134f2:	f009 bedd 	b.w	801d2b0 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 80134f6:	490f      	ldr	r1, [pc, #60]	; (8013534 <_nx_tcp_receive_cleanup+0xbc>)
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 80134f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 80134fc:	6681      	str	r1, [r0, #104]	; 0x68
 80134fe:	f382 8810 	msr	PRIMASK, r2
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8013502:	2200      	movs	r2, #0
 8013504:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 8013508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 801350c:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 801350e:	f009 b90b 	b.w	801c728 <_tx_event_flags_set>
 8013512:	f382 8810 	msr	PRIMASK, r2
 8013516:	4770      	bx	lr
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  NX_NULL;
 8013518:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
 801351c:	e7d3      	b.n	80134c6 <_nx_tcp_receive_cleanup+0x4e>
 801351e:	bf00      	nop
 8013520:	54435020 	.word	0x54435020
 8013524:	200000ec 	.word	0x200000ec
 8013528:	20007a80 	.word	0x20007a80
 801352c:	20007b28 	.word	0x20007b28
 8013530:	20007a7c 	.word	0x20007a7c
 8013534:	08012c61 	.word	0x08012c61

08013538 <_nx_tcp_server_socket_relisten>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_server_socket_relisten(NX_IP *ip_ptr, UINT port, NX_TCP_SOCKET *socket_ptr)
{
 8013538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SERVER_SOCKET_RELISTEN, ip_ptr, port, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801353c:	f200 683c 	addw	r8, r0, #1596	; 0x63c
ULONG                        mss = 0;
 8013540:	2300      	movs	r3, #0
{
 8013542:	b087      	sub	sp, #28
 8013544:	4616      	mov	r6, r2
 8013546:	4681      	mov	r9, r0
 8013548:	460f      	mov	r7, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801354a:	4640      	mov	r0, r8
 801354c:	f04f 31ff 	mov.w	r1, #4294967295
ULONG                        mss = 0;
 8013550:	9300      	str	r3, [sp, #0]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8013552:	f009 fad1 	bl	801caf8 <_tx_mutex_get>

    /* Determine if the server socket is in a proper state.  */
    if (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED)
 8013556:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8013558:	2b01      	cmp	r3, #1
 801355a:	d12c      	bne.n	80135b6 <_nx_tcp_server_socket_relisten+0x7e>
        return(NX_NOT_CLOSED);
    }

    /* Determine if the server socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_tcp_socket_bound_next) ||
 801355c:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
 8013560:	bb13      	cbnz	r3, 80135a8 <_nx_tcp_server_socket_relisten+0x70>
 8013562:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 8013566:	b9fb      	cbnz	r3, 80135a8 <_nx_tcp_server_socket_relisten+0x70>
        return(NX_ALREADY_BOUND);
    }

    /* Search through the active listen requests to see if there is already
       one active.  */
    listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 8013568:	f8d9 3b44 	ldr.w	r3, [r9, #2884]	; 0xb44
    if (listen_ptr)
 801356c:	b353      	cbz	r3, 80135c4 <_nx_tcp_server_socket_relisten+0x8c>
 801356e:	461c      	mov	r4, r3
 8013570:	e002      	b.n	8013578 <_nx_tcp_server_socket_relisten+0x40>
                    return(NX_CONNECTION_PENDING);
                }
            }

            /* Move to the next listen request.  */
            listen_ptr =  listen_ptr -> nx_tcp_listen_next;
 8013572:	69e4      	ldr	r4, [r4, #28]
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 8013574:	42a3      	cmp	r3, r4
 8013576:	d025      	beq.n	80135c4 <_nx_tcp_server_socket_relisten+0x8c>
            if ((listen_ptr -> nx_tcp_listen_port == port) &&
 8013578:	6825      	ldr	r5, [r4, #0]
 801357a:	42bd      	cmp	r5, r7
 801357c:	d1f9      	bne.n	8013572 <_nx_tcp_server_socket_relisten+0x3a>
 801357e:	68a2      	ldr	r2, [r4, #8]
 8013580:	2a00      	cmp	r2, #0
 8013582:	d1f6      	bne.n	8013572 <_nx_tcp_server_socket_relisten+0x3a>
                if (!listen_ptr -> nx_tcp_listen_queue_current)
 8013584:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013588:	f1ba 0f00 	cmp.w	sl, #0
 801358c:	d121      	bne.n	80135d2 <_nx_tcp_server_socket_relisten+0x9a>
                    socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 801358e:	2302      	movs	r3, #2
                    listen_ptr -> nx_tcp_listen_socket_ptr =  socket_ptr;
 8013590:	60a6      	str	r6, [r4, #8]
                    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8013592:	4640      	mov	r0, r8
                    socket_ptr -> nx_tcp_socket_client_type =  NX_FALSE;
 8013594:	f8c6 a008 	str.w	sl, [r6, #8]
                    socket_ptr -> nx_tcp_socket_connect_interface = NX_NULL;
 8013598:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
                    socket_ptr -> nx_tcp_socket_port =  port;
 801359c:	60f7      	str	r7, [r6, #12]
                    socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 801359e:	6473      	str	r3, [r6, #68]	; 0x44
                    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80135a0:	f009 fb94 	bl	801cccc <_tx_mutex_put>
                    return(NX_SUCCESS);
 80135a4:	4650      	mov	r0, sl
 80135a6:	e003      	b.n	80135b0 <_nx_tcp_server_socket_relisten+0x78>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80135a8:	4640      	mov	r0, r8
 80135aa:	f009 fb8f 	bl	801cccc <_tx_mutex_put>
        return(NX_ALREADY_BOUND);
 80135ae:	2022      	movs	r0, #34	; 0x22
    /* Successful listen request, release the protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));

    /* Return an invalid relisten - nothing.  */
    return(NX_INVALID_RELISTEN);
}
 80135b0:	b007      	add	sp, #28
 80135b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80135b6:	4640      	mov	r0, r8
 80135b8:	f009 fb88 	bl	801cccc <_tx_mutex_put>
        return(NX_NOT_CLOSED);
 80135bc:	2035      	movs	r0, #53	; 0x35
}
 80135be:	b007      	add	sp, #28
 80135c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80135c4:	4640      	mov	r0, r8
 80135c6:	f009 fb81 	bl	801cccc <_tx_mutex_put>
    return(NX_INVALID_RELISTEN);
 80135ca:	2047      	movs	r0, #71	; 0x47
}
 80135cc:	b007      	add	sp, #28
 80135ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (packet_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 80135d2:	e9d4 7305 	ldrd	r7, r3, [r4, #20]
                    listen_ptr -> nx_tcp_listen_queue_current--;
 80135d6:	f10a 30ff 	add.w	r0, sl, #4294967295
                    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80135da:	f8d7 b008 	ldr.w	fp, [r7, #8]
                    if (packet_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 80135de:	42bb      	cmp	r3, r7
                    listen_ptr -> nx_tcp_listen_queue_head =  packet_ptr -> nx_packet_queue_next;
 80135e0:	69f9      	ldr	r1, [r7, #28]
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 80135e2:	f8db 300c 	ldr.w	r3, [fp, #12]
                        listen_ptr -> nx_tcp_listen_queue_tail =  NX_NULL;
 80135e6:	bf08      	it	eq
 80135e8:	61a2      	streq	r2, [r4, #24]
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 80135ea:	039a      	lsls	r2, r3, #14
                    listen_ptr -> nx_tcp_listen_queue_head =  packet_ptr -> nx_packet_queue_next;
 80135ec:	6161      	str	r1, [r4, #20]
                    listen_ptr -> nx_tcp_listen_queue_current--;
 80135ee:	6120      	str	r0, [r4, #16]
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 80135f0:	d502      	bpl.n	80135f8 <_nx_tcp_server_socket_relisten+0xc0>
                        option_words = (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 80135f2:	0f1b      	lsrs	r3, r3, #28
                        if (option_words > 0)
 80135f4:	3b05      	subs	r3, #5
 80135f6:	d176      	bne.n	80136e6 <_nx_tcp_server_socket_relisten+0x1ae>
                    if (mss == 0)
 80135f8:	9900      	ldr	r1, [sp, #0]
 80135fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80135fe:	2900      	cmp	r1, #0
 8013600:	d14c      	bne.n	801369c <_nx_tcp_server_socket_relisten+0x164>
                        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8013602:	2b04      	cmp	r3, #4
 8013604:	d055      	beq.n	80136b2 <_nx_tcp_server_socket_relisten+0x17a>
                        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8013606:	2b06      	cmp	r3, #6
 8013608:	d118      	bne.n	801363c <_nx_tcp_server_socket_relisten+0x104>
                            mss = 1220;
 801360a:	f240 43c4 	movw	r3, #1220	; 0x4c4
 801360e:	9300      	str	r3, [sp, #0]
                        source_ip.nxd_ip_version = NX_IP_VERSION_V6;
 8013610:	2006      	movs	r0, #6
                        COPY_IPV6_ADDRESS(source_ip.nxd_ip_address.v6,
 8013612:	f106 0118 	add.w	r1, r6, #24
                        source_ip.nxd_ip_address.v6[1] = ipv6_header -> nx_ip_header_source_ip[1];
 8013616:	e95b 2308 	ldrd	r2, r3, [fp, #-32]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V6;
 801361a:	6170      	str	r0, [r6, #20]
                        source_ip.nxd_ip_version = NX_IP_VERSION_V6;
 801361c:	9001      	str	r0, [sp, #4]
                        COPY_IPV6_ADDRESS(source_ip.nxd_ip_address.v6,
 801361e:	a802      	add	r0, sp, #8
                        source_ip.nxd_ip_address.v6[1] = ipv6_header -> nx_ip_header_source_ip[1];
 8013620:	e9cd 2302 	strd	r2, r3, [sp, #8]
                        source_ip.nxd_ip_address.v6[3] = ipv6_header -> nx_ip_header_source_ip[3];
 8013624:	e95b 2306 	ldrd	r2, r3, [fp, #-24]
 8013628:	e9cd 2304 	strd	r2, r3, [sp, #16]
                        COPY_IPV6_ADDRESS(source_ip.nxd_ip_address.v6,
 801362c:	f7f2 ff4e 	bl	80064cc <COPY_IPV6_ADDRESS>
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8013630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013632:	9900      	ldr	r1, [sp, #0]
                        socket_ptr -> nx_tcp_socket_connect_interface = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address_attached;
 8013634:	685a      	ldr	r2, [r3, #4]
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8013636:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
                        socket_ptr -> nx_tcp_socket_connect_interface = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address_attached;
 801363a:	6372      	str	r2, [r6, #52]	; 0x34
                    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 801363c:	eb05 2315 	add.w	r3, r5, r5, lsr #8
                    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 8013640:	f8bb 2002 	ldrh.w	r2, [fp, #2]
                    socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number;
 8013644:	f8db 0004 	ldr.w	r0, [fp, #4]
                    socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8013648:	f04f 0c02 	mov.w	ip, #2
                    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 801364c:	f003 031f 	and.w	r3, r3, #31
                    socket_ptr -> nx_tcp_socket_connect_port =  source_port;
 8013650:	62b2      	str	r2, [r6, #40]	; 0x28
                    socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number;
 8013652:	64f0      	str	r0, [r6, #76]	; 0x4c
                    socket_ptr -> nx_tcp_socket_client_type =  NX_FALSE;
 8013654:	2000      	movs	r0, #0
 8013656:	eb09 0983 	add.w	r9, r9, r3, lsl #2
                    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  source_ip.nxd_ip_version;
 801365a:	9b01      	ldr	r3, [sp, #4]
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 801365c:	6331      	str	r1, [r6, #48]	; 0x30
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 801365e:	f8d9 2934 	ldr.w	r2, [r9, #2356]	; 0x934
                    socket_ptr -> nx_tcp_socket_port =  port;
 8013662:	60f5      	str	r5, [r6, #12]
                    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  source_ip.nxd_ip_version;
 8013664:	6173      	str	r3, [r6, #20]
                    socket_ptr -> nx_tcp_socket_client_type =  NX_FALSE;
 8013666:	60b0      	str	r0, [r6, #8]
                    socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8013668:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 801366c:	b1e2      	cbz	r2, 80136a8 <_nx_tcp_server_socket_relisten+0x170>
                        socket_ptr -> nx_tcp_socket_bound_previous = (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 801366e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8013672:	e9c6 233b 	strd	r2, r3, [r6, #236]	; 0xec
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next = socket_ptr;
 8013676:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 801367a:	f8c3 60ec 	str.w	r6, [r3, #236]	; 0xec
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous =   socket_ptr;
 801367e:	f8c2 60f0 	str.w	r6, [r2, #240]	; 0xf0
                    listen_callback =  listen_ptr -> nx_tcp_listen_callback;
 8013682:	6864      	ldr	r4, [r4, #4]
                    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8013684:	4640      	mov	r0, r8
 8013686:	f009 fb21 	bl	801cccc <_tx_mutex_put>
                    if (listen_callback)
 801368a:	b114      	cbz	r4, 8013692 <_nx_tcp_server_socket_relisten+0x15a>
                        (listen_callback)(socket_ptr, port);
 801368c:	4629      	mov	r1, r5
 801368e:	4630      	mov	r0, r6
 8013690:	47a0      	blx	r4
                    _nx_packet_release(packet_ptr);
 8013692:	4638      	mov	r0, r7
 8013694:	f7f3 f9ac 	bl	80069f0 <_nx_packet_release>
                    return(NX_CONNECTION_PENDING);
 8013698:	2048      	movs	r0, #72	; 0x48
 801369a:	e789      	b.n	80135b0 <_nx_tcp_server_socket_relisten+0x78>
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 801369c:	2b04      	cmp	r3, #4
 801369e:	d00b      	beq.n	80136b8 <_nx_tcp_server_socket_relisten+0x180>
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 80136a0:	2b06      	cmp	r3, #6
 80136a2:	d0b5      	beq.n	8013610 <_nx_tcp_server_socket_relisten+0xd8>
 80136a4:	9900      	ldr	r1, [sp, #0]
 80136a6:	e7c9      	b.n	801363c <_nx_tcp_server_socket_relisten+0x104>
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 80136a8:	e9c6 663b 	strd	r6, r6, [r6, #236]	; 0xec
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 80136ac:	f8c9 6934 	str.w	r6, [r9, #2356]	; 0x934
 80136b0:	e7e7      	b.n	8013682 <_nx_tcp_server_socket_relisten+0x14a>
                            mss = 536;
 80136b2:	f44f 7306 	mov.w	r3, #536	; 0x218
 80136b6:	9300      	str	r3, [sp, #0]
                        ipv4_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 80136b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 80136ba:	4633      	mov	r3, r6
                        socket_ptr -> nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80136bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 80136be:	2100      	movs	r1, #0
                        source_ip.nxd_ip_address.v4 = ipv4_header_ptr -> nx_ip_header_source_ip;
 80136c0:	68c0      	ldr	r0, [r0, #12]
                        source_ip.nxd_ip_version = NX_IP_VERSION_V4;
 80136c2:	f04f 0c04 	mov.w	ip, #4
                        socket_ptr -> nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80136c6:	6372      	str	r2, [r6, #52]	; 0x34
                        _nx_ip_route_find(ip_ptr, source_ip.nxd_ip_address.v4,
 80136c8:	f106 0234 	add.w	r2, r6, #52	; 0x34
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = source_ip.nxd_ip_address.v4;
 80136cc:	61b0      	str	r0, [r6, #24]
                        source_ip.nxd_ip_address.v4 = ipv4_header_ptr -> nx_ip_header_source_ip;
 80136ce:	9002      	str	r0, [sp, #8]
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 80136d0:	f843 1f38 	str.w	r1, [r3, #56]!
                        _nx_ip_route_find(ip_ptr, source_ip.nxd_ip_address.v4,
 80136d4:	4601      	mov	r1, r0
 80136d6:	4648      	mov	r0, r9
                        source_ip.nxd_ip_version = NX_IP_VERSION_V4;
 80136d8:	f8cd c004 	str.w	ip, [sp, #4]
                        _nx_ip_route_find(ip_ptr, source_ip.nxd_ip_address.v4,
 80136dc:	f7ee fdec 	bl	80022b8 <_nx_ip_route_find>
 80136e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80136e4:	e7dc      	b.n	80136a0 <_nx_tcp_server_socket_relisten+0x168>
                            _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 80136e6:	0099      	lsls	r1, r3, #2
 80136e8:	466a      	mov	r2, sp
 80136ea:	f10b 0014 	add.w	r0, fp, #20
 80136ee:	f002 fa4d 	bl	8015b8c <_nx_tcp_mss_option_get>
 80136f2:	e781      	b.n	80135f8 <_nx_tcp_server_socket_relisten+0xc0>

080136f4 <_nx_tcp_socket_packet_process>:

    /* Copy the TCP header, since the actual packet can be delivered to
       a waiting socket/thread during this routine and before we are done
       using the header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 80136f4:	f8d1 c008 	ldr.w	ip, [r1, #8]
ULONG         mss = 0;
 80136f8:	2300      	movs	r3, #0
{
 80136fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 80136fe:	4665      	mov	r5, ip
{
 8013700:	b086      	sub	sp, #24

    /* Get the size of the TCP header.  */
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

    /* Process the segment if socket state is equal or greater than NX_TCP_SYN_RECEIVED. According to RFC 793, Section 3.9, Page 69.  */
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 8013702:	f8d0 e044 	ldr.w	lr, [r0, #68]	; 0x44
{
 8013706:	460f      	mov	r7, r1
 8013708:	4606      	mov	r6, r0
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 801370a:	ac01      	add	r4, sp, #4
ULONG         mss = 0;
 801370c:	9300      	str	r3, [sp, #0]
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 801370e:	f1be 0f03 	cmp.w	lr, #3
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 8013712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013716:	9b04      	ldr	r3, [sp, #16]
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 8013718:	6829      	ldr	r1, [r5, #0]
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 801371a:	ea4f 7213 	mov.w	r2, r3, lsr #28
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 801371e:	6021      	str	r1, [r4, #0]
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013720:	ea4f 0482 	mov.w	r4, r2, lsl #2
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 8013724:	d91d      	bls.n	8013762 <_nx_tcp_socket_packet_process+0x6e>

        /* Pickup the sequence of this packet. */
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;

        /* Calculate the data length in the packet.  */
        packet_data_length = packet_ptr -> nx_packet_length - header_length;
 8013726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;
 8013728:	9802      	ldr	r0, [sp, #8]

        /* There are four cases for the acceptability test for an incoming segment.
           Section 3.9 Page 69, RFC 793.  */
        outside_of_window = NX_TRUE;

        if (packet_data_length == 0)
 801372a:	1b12      	subs	r2, r2, r4
        rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 801372c:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
        rx_window = socket_ptr -> nx_tcp_socket_rx_window_current;
 801372e:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        if (packet_data_length == 0)
 8013732:	d123      	bne.n	801377c <_nx_tcp_socket_packet_process+0x88>
        {
            if (rx_window == 0)
 8013734:	2d00      	cmp	r5, #0
 8013736:	d067      	beq.n	8013808 <_nx_tcp_socket_packet_process+0x114>
                       special allowance should be made to accept valid ACKs, URGs and RSTs.
                       Section 3.9 Page 69, RFC 793. */
                    outside_of_window = NX_FALSE;
                }
            }
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 8013738:	1a42      	subs	r2, r0, r1
 801373a:	2a00      	cmp	r2, #0
 801373c:	db38      	blt.n	80137b0 <_nx_tcp_socket_packet_process+0xbc>
                     ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0))
 801373e:	4429      	add	r1, r5
 8013740:	1a09      	subs	r1, r1, r0
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 8013742:	2900      	cmp	r1, #0
 8013744:	dd34      	ble.n	80137b0 <_nx_tcp_socket_packet_process+0xbc>
            /* Finished processing, simply return!  */
            return;
        }

        /* Step2: Check the RST bit. According to RFC 793, Section 3.9, Page 70.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8013746:	035a      	lsls	r2, r3, #13
 8013748:	d45a      	bmi.n	8013800 <_nx_tcp_socket_packet_process+0x10c>
            /* Finished processing, simply return!  */
            return;
        }

        /* Step3: Check the SYN bit. According to RFC 793, Section 3.9, Page 71.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 801374a:	039d      	lsls	r5, r3, #14
 801374c:	f100 80b7 	bmi.w	80138be <_nx_tcp_socket_packet_process+0x1ca>
            /* Finished processing, simply return!  */
            return;
        }

        /* Step4: Check the ACK field. According to RFC 793, Section 3.9, Page 72.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED)
 8013750:	f1be 0f04 	cmp.w	lr, #4
 8013754:	f000 80a9 	beq.w	80138aa <_nx_tcp_socket_packet_process+0x1b6>
        {

            /* Check the ACK field.  */
            if (_nx_tcp_socket_state_ack_check(socket_ptr, &tcp_header_copy) == NX_FALSE)
 8013758:	a901      	add	r1, sp, #4
 801375a:	4630      	mov	r0, r6
 801375c:	f000 f8c0 	bl	80138e0 <_nx_tcp_socket_state_ack_check>
 8013760:	b340      	cbz	r0, 80137b4 <_nx_tcp_socket_packet_process+0xc0>
            }
        }
    }

    /* Illegal option length check. */
    if (header_length > sizeof(NX_TCP_HEADER))
 8013762:	2c14      	cmp	r4, #20
 8013764:	d83a      	bhi.n	80137dc <_nx_tcp_socket_packet_process+0xe8>
        }

    }

    /* Process relative to the state of the socket.  */
    switch (socket_ptr -> nx_tcp_socket_state)
 8013766:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8013768:	3b03      	subs	r3, #3
 801376a:	2b08      	cmp	r3, #8
 801376c:	d82c      	bhi.n	80137c8 <_nx_tcp_socket_packet_process+0xd4>
 801376e:	e8df f003 	tbb	[pc, r3]
 8013772:	9e8e      	.short	0x9e8e
 8013774:	60757e82 	.word	0x60757e82
 8013778:	2b5b      	.short	0x2b5b
 801377a:	27          	.byte	0x27
 801377b:	00          	.byte	0x00
            if ((rx_window > 0) &&
 801377c:	b1c5      	cbz	r5, 80137b0 <_nx_tcp_socket_packet_process+0xbc>
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 801377e:	eba0 0801 	sub.w	r8, r0, r1
            if ((rx_window > 0) &&
 8013782:	f1b8 0f00 	cmp.w	r8, #0
 8013786:	db06      	blt.n	8013796 <_nx_tcp_socket_packet_process+0xa2>
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 8013788:	eb05 0801 	add.w	r8, r5, r1
 801378c:	eba8 0800 	sub.w	r8, r8, r0
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 8013790:	f1b8 0f00 	cmp.w	r8, #0
 8013794:	dcd7      	bgt.n	8013746 <_nx_tcp_socket_packet_process+0x52>
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 8013796:	f100 38ff 	add.w	r8, r0, #4294967295
 801379a:	eba8 0801 	sub.w	r8, r8, r1
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 801379e:	eb18 0f02 	cmn.w	r8, r2
 80137a2:	d405      	bmi.n	80137b0 <_nx_tcp_socket_packet_process+0xbc>
                  ((INT)rx_sequence + 1 + ((INT)rx_window - (INT)packet_sequence) - (INT)packet_data_length > 0))))
 80137a4:	3101      	adds	r1, #1
 80137a6:	1a2d      	subs	r5, r5, r0
 80137a8:	4429      	add	r1, r5
 80137aa:	1a8a      	subs	r2, r1, r2
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 80137ac:	2a00      	cmp	r2, #0
 80137ae:	dcca      	bgt.n	8013746 <_nx_tcp_socket_packet_process+0x52>
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 80137b0:	0359      	lsls	r1, r3, #13
 80137b2:	d534      	bpl.n	801381e <_nx_tcp_socket_packet_process+0x12a>
            _nx_packet_release(packet_ptr);
 80137b4:	4638      	mov	r0, r7
 80137b6:	f7f3 f91b 	bl	80069f0 <_nx_packet_release>
    {

        /* Yes, the packet was not queued up above, so it needs to be released.  */
        _nx_packet_release(packet_ptr);
    }
}
 80137ba:	b006      	add	sp, #24
 80137bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _nx_tcp_socket_state_last_ack(socket_ptr, &tcp_header_copy);
 80137c0:	a901      	add	r1, sp, #4
 80137c2:	4630      	mov	r0, r6
 80137c4:	f000 fe36 	bl	8014434 <_nx_tcp_socket_state_last_ack>
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 80137c8:	9b04      	ldr	r3, [sp, #16]
 80137ca:	029b      	lsls	r3, r3, #10
 80137cc:	d5f2      	bpl.n	80137b4 <_nx_tcp_socket_packet_process+0xc0>
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 80137ce:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
        if (urgent_callback)
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d0ee      	beq.n	80137b4 <_nx_tcp_socket_packet_process+0xc0>
            (urgent_callback)(socket_ptr);
 80137d6:	4630      	mov	r0, r6
 80137d8:	4798      	blx	r3
 80137da:	e7eb      	b.n	80137b4 <_nx_tcp_socket_packet_process+0xc0>
 80137dc:	f8d7 c008 	ldr.w	ip, [r7, #8]
        if (!_nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)),
 80137e0:	f10c 0014 	add.w	r0, ip, #20
 80137e4:	466a      	mov	r2, sp
 80137e6:	f1a4 0114 	sub.w	r1, r4, #20
 80137ea:	f002 f9cf 	bl	8015b8c <_nx_tcp_mss_option_get>
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d1b9      	bne.n	8013766 <_nx_tcp_socket_packet_process+0x72>
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 80137f2:	9a04      	ldr	r2, [sp, #16]
 80137f4:	02d1      	lsls	r1, r2, #11
 80137f6:	d567      	bpl.n	80138c8 <_nx_tcp_socket_packet_process+0x1d4>
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 80137f8:	a901      	add	r1, sp, #4
 80137fa:	4630      	mov	r0, r6
 80137fc:	f7ff fe1e 	bl	801343c <_nx_tcp_packet_send_rst>
            _nx_tcp_socket_connection_reset(socket_ptr);
 8013800:	4630      	mov	r0, r6
 8013802:	f7f3 ffd5 	bl	80077b0 <_nx_tcp_socket_connection_reset>
 8013806:	e7d5      	b.n	80137b4 <_nx_tcp_socket_packet_process+0xc0>
                if (packet_sequence == rx_sequence)
 8013808:	4288      	cmp	r0, r1
 801380a:	d09c      	beq.n	8013746 <_nx_tcp_socket_packet_process+0x52>
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 801380c:	f413 1f10 	tst.w	r3, #2359296	; 0x240000
 8013810:	d199      	bne.n	8013746 <_nx_tcp_socket_packet_process+0x52>
                         ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_CONTROL_MASK) == NX_TCP_ACK_BIT))
 8013812:	f403 12b8 	and.w	r2, r3, #1507328	; 0x170000
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 8013816:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 801381a:	d1c9      	bne.n	80137b0 <_nx_tcp_socket_packet_process+0xbc>
 801381c:	e793      	b.n	8013746 <_nx_tcp_socket_packet_process+0x52>
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 801381e:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8013820:	4630      	mov	r0, r6
 8013822:	f7f3 fc71 	bl	8007108 <_nx_tcp_packet_send_ack>
 8013826:	e7c5      	b.n	80137b4 <_nx_tcp_socket_packet_process+0xc0>
        _nx_tcp_socket_state_closing(socket_ptr, &tcp_header_copy);
 8013828:	a901      	add	r1, sp, #4
 801382a:	4630      	mov	r0, r6
 801382c:	f000 fa98 	bl	8013d60 <_nx_tcp_socket_state_closing>
        break;
 8013830:	e7ca      	b.n	80137c8 <_nx_tcp_socket_packet_process+0xd4>
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8013832:	4639      	mov	r1, r7
 8013834:	4630      	mov	r0, r6
 8013836:	f000 fab9 	bl	8013dac <_nx_tcp_socket_state_data_check>
 801383a:	4604      	mov	r4, r0
        _nx_tcp_socket_state_fin_wait2(socket_ptr);
 801383c:	4630      	mov	r0, r6
 801383e:	f000 fdd1 	bl	80143e4 <_nx_tcp_socket_state_fin_wait2>
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 8013842:	9b04      	ldr	r3, [sp, #16]
 8013844:	029a      	lsls	r2, r3, #10
 8013846:	d504      	bpl.n	8013852 <_nx_tcp_socket_packet_process+0x15e>
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 8013848:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
        if (urgent_callback)
 801384c:	b10b      	cbz	r3, 8013852 <_nx_tcp_socket_packet_process+0x15e>
            (urgent_callback)(socket_ptr);
 801384e:	4630      	mov	r0, r6
 8013850:	4798      	blx	r3
    if (!packet_queued)
 8013852:	2c00      	cmp	r4, #0
 8013854:	d0ae      	beq.n	80137b4 <_nx_tcp_socket_packet_process+0xc0>
}
 8013856:	b006      	add	sp, #24
 8013858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 801385c:	4639      	mov	r1, r7
 801385e:	4630      	mov	r0, r6
 8013860:	f000 faa4 	bl	8013dac <_nx_tcp_socket_state_data_check>
 8013864:	4604      	mov	r4, r0
        _nx_tcp_socket_state_fin_wait1(socket_ptr);
 8013866:	4630      	mov	r0, r6
 8013868:	f000 fd7e 	bl	8014368 <_nx_tcp_socket_state_fin_wait1>
        break;
 801386c:	e7e9      	b.n	8013842 <_nx_tcp_socket_packet_process+0x14e>
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 801386e:	4630      	mov	r0, r6
 8013870:	f000 fea8 	bl	80145c4 <_nx_tcp_socket_state_transmit_check>
        break;
 8013874:	e7a8      	b.n	80137c8 <_nx_tcp_socket_packet_process+0xd4>
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8013876:	4639      	mov	r1, r7
 8013878:	4630      	mov	r0, r6
 801387a:	f000 fa97 	bl	8013dac <_nx_tcp_socket_state_data_check>
 801387e:	4604      	mov	r4, r0
        _nx_tcp_socket_state_established(socket_ptr);
 8013880:	4630      	mov	r0, r6
 8013882:	f000 fd4d 	bl	8014320 <_nx_tcp_socket_state_established>
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 8013886:	4630      	mov	r0, r6
 8013888:	f000 fe9c 	bl	80145c4 <_nx_tcp_socket_state_transmit_check>
        break;
 801388c:	e7d9      	b.n	8013842 <_nx_tcp_socket_packet_process+0x14e>
        _nx_tcp_socket_state_syn_sent(socket_ptr, &tcp_header_copy, packet_ptr);
 801388e:	a901      	add	r1, sp, #4
 8013890:	463a      	mov	r2, r7
 8013892:	4630      	mov	r0, r6
 8013894:	f000 fe1c 	bl	80144d0 <_nx_tcp_socket_state_syn_sent>
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 8013898:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801389a:	2b05      	cmp	r3, #5
 801389c:	d194      	bne.n	80137c8 <_nx_tcp_socket_packet_process+0xd4>
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 801389e:	4639      	mov	r1, r7
 80138a0:	4630      	mov	r0, r6
 80138a2:	f000 fa83 	bl	8013dac <_nx_tcp_socket_state_data_check>
 80138a6:	4604      	mov	r4, r0
 80138a8:	e7cb      	b.n	8013842 <_nx_tcp_socket_packet_process+0x14e>
    if (header_length > sizeof(NX_TCP_HEADER))
 80138aa:	2c14      	cmp	r4, #20
 80138ac:	d898      	bhi.n	80137e0 <_nx_tcp_socket_packet_process+0xec>
        _nx_tcp_socket_state_syn_received(socket_ptr, &tcp_header_copy);
 80138ae:	a901      	add	r1, sp, #4
 80138b0:	4630      	mov	r0, r6
 80138b2:	f000 fddb 	bl	801446c <_nx_tcp_socket_state_syn_received>
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 80138b6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80138b8:	2b05      	cmp	r3, #5
 80138ba:	d185      	bne.n	80137c8 <_nx_tcp_socket_packet_process+0xd4>
 80138bc:	e7ef      	b.n	801389e <_nx_tcp_socket_packet_process+0x1aa>
            tcp_header_copy.nx_tcp_sequence_number++;
 80138be:	1c43      	adds	r3, r0, #1
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 80138c0:	a901      	add	r1, sp, #4
 80138c2:	4630      	mov	r0, r6
            tcp_header_copy.nx_tcp_sequence_number++;
 80138c4:	9302      	str	r3, [sp, #8]
 80138c6:	e799      	b.n	80137fc <_nx_tcp_socket_packet_process+0x108>
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 80138c8:	9b02      	ldr	r3, [sp, #8]
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 80138ca:	f412 3f40 	tst.w	r2, #196608	; 0x30000
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 80138ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80138d0:	eba3 0304 	sub.w	r3, r3, r4
 80138d4:	440b      	add	r3, r1
                    tcp_header_copy.nx_tcp_sequence_number++;
 80138d6:	bf18      	it	ne
 80138d8:	3301      	addne	r3, #1
 80138da:	9302      	str	r3, [sp, #8]
 80138dc:	e78c      	b.n	80137f8 <_nx_tcp_socket_packet_process+0x104>
 80138de:	bf00      	nop

080138e0 <_nx_tcp_socket_state_ack_check>:
UINT           wrapped_flag = NX_FALSE;


    /* Determine if the header has an ACK bit set.  This is an
       acknowledgement of a previous transmission.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 80138e0:	68cb      	ldr	r3, [r1, #12]
 80138e2:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 80138e6:	f000 80a4 	beq.w	8013a32 <_nx_tcp_socket_state_ack_check+0x152>
 80138ea:	6c82      	ldr	r2, [r0, #72]	; 0x48
{
 80138ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {

        /* Initialize tx sequence. */
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 80138f0:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
{
 80138f4:	b083      	sub	sp, #12
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d169      	bne.n	80139ce <_nx_tcp_socket_state_ack_check+0xee>
        }
        else
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
        }
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 80138fa:	6e83      	ldr	r3, [r0, #104]	; 0x68
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 80138fc:	4691      	mov	r9, r2

        /* Initialize ending rx sequence. */
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 80138fe:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 8013902:	eba2 0803 	sub.w	r8, r2, r3
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8013906:	2c00      	cmp	r4, #0
 8013908:	d06a      	beq.n	80139e0 <_nx_tcp_socket_state_ack_check+0x100>
        {
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;

            /* Setup a pointer to header of this packet in the sent list.  */
#ifndef NX_DISABLE_IPV4
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 801390a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801390e:	2a04      	cmp	r2, #4
 8013910:	f000 8148 	beq.w	8013ba4 <_nx_tcp_socket_state_ack_check+0x2c4>
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
                                                       sizeof(NX_IPV4_HEADER));
            }
#endif /* NX_DISABLE_IPV4 */
#ifdef FEATURE_NX_IPV6
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8013914:	2a06      	cmp	r2, #6
 8013916:	f040 8089 	bne.w	8013a2c <_nx_tcp_socket_state_ack_check+0x14c>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 801391a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801391c:	3628      	adds	r6, #40	; 0x28
            temp =  search_header_ptr -> nx_tcp_header_word_3;
            NX_CHANGE_ULONG_ENDIAN(temp);
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

            /* Determine the sequence number in the TCP header.  */
            search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 801391e:	6877      	ldr	r7, [r6, #4]
 8013920:	468a      	mov	sl, r1
                                  (header_length +
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
                                           (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));

            /* Calculate the ending packet sequence.  */
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 8013922:	68a5      	ldr	r5, [r4, #8]
            NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8013924:	ea87 4237 	eor.w	r2, r7, r7, ror #16
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 8013928:	6a64      	ldr	r4, [r4, #36]	; 0x24
        }
#endif

        /* First, determine if incoming ACK matches our transmit sequence.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 801392a:	6889      	ldr	r1, [r1, #8]
            NX_CHANGE_ULONG_ENDIAN(search_sequence);
 801392c:	0a12      	lsrs	r2, r2, #8
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 801392e:	442c      	add	r4, r5
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 8013930:	68f5      	ldr	r5, [r6, #12]
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 8013932:	4549      	cmp	r1, r9
            NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8013934:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 8013938:	eba4 0406 	sub.w	r4, r4, r6
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 801393c:	f3c5 1503 	ubfx	r5, r5, #4, #4
            NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8013940:	ea82 2237 	eor.w	r2, r2, r7, ror #8
 8013944:	4607      	mov	r7, r0
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 8013946:	4422      	add	r2, r4
 8013948:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 801394c:	9201      	str	r2, [sp, #4]
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 801394e:	d04e      	beq.n	80139ee <_nx_tcp_socket_state_ack_check+0x10e>
        {

            /* Calculate the start and end of the transmit sequence.  */

            /* Pickup the head of the transmit queue.  */
            search_ptr =    socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8013950:	f8d0 60d0 	ldr.w	r6, [r0, #208]	; 0xd0

            /* Determine if there is a packet on the transmit queue... and determine if the packet has been
               transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if ((search_ptr) && (search_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_DRIVER_TX_DONE)))
 8013954:	2e00      	cmp	r6, #0
 8013956:	d078      	beq.n	8013a4a <_nx_tcp_socket_state_ack_check+0x16a>
 8013958:	69f5      	ldr	r5, [r6, #28]
 801395a:	f1b5 3fdd 	cmp.w	r5, #3722304989	; 0xdddddddd
 801395e:	f000 8166 	beq.w	8013c2e <_nx_tcp_socket_state_ack_check+0x34e>
 8013962:	f04f 0b00 	mov.w	fp, #0
            while (search_ptr)
            {

                /* Determine if the packet has been transmitted.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8013966:	f1b5 3fdd 	cmp.w	r5, #3722304989	; 0xdddddddd
 801396a:	68b3      	ldr	r3, [r6, #8]
 801396c:	465c      	mov	r4, fp
 801396e:	d02a      	beq.n	80139c6 <_nx_tcp_socket_state_ack_check+0xe6>
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
                                                           search_ptr -> nx_packet_ip_header_length);
 8013970:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8013974:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8013976:	4402      	add	r2, r0
 8013978:	eba3 0c02 	sub.w	ip, r3, r2
                temp =  search_header_ptr -> nx_tcp_header_word_3;
                NX_CHANGE_ULONG_ENDIAN(temp);
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

                /* Determine the sequence number in the TCP header.  */
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 801397c:	6855      	ldr	r5, [r2, #4]
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 801397e:	68d0      	ldr	r0, [r2, #12]
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8013980:	ea85 4335 	eor.w	r3, r5, r5, ror #16
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));

                /* Calculate the ending packet sequence.  */
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8013984:	6a72      	ldr	r2, [r6, #36]	; 0x24
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013986:	f3c0 1003 	ubfx	r0, r0, #4, #4
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 801398a:	0a1b      	lsrs	r3, r3, #8
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 801398c:	4462      	add	r2, ip
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 801398e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013992:	ea83 2335 	eor.w	r3, r3, r5, ror #8
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8013996:	4413      	add	r3, r2
 8013998:	eba3 0380 	sub.w	r3, r3, r0, lsl #2

                    /* No, the transmit window is not wrapped. Perform a simple compare to determine if the ACK
                       covers the current search packet.  */

                    /* Is this ACK before the current search packet or after the transmit sequence?  */
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 801399c:	428b      	cmp	r3, r1
 801399e:	f200 80ff 	bhi.w	8013ba0 <_nx_tcp_socket_state_ack_check+0x2c0>
 80139a2:	4589      	cmp	r9, r1
 80139a4:	f0c0 80fc 	bcc.w	8013ba0 <_nx_tcp_socket_state_ack_check+0x2c0>
                /* Increase the packet release count.  */
                packet_release_count++;

                /* Move the search and previous pointers forward.  */
                previous_ptr =  search_ptr;
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 80139a8:	6a33      	ldr	r3, [r6, #32]
                packet_release_count++;
 80139aa:	f10b 0b01 	add.w	fp, fp, #1

                /* Determine if we are at the end of the TCP queue.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 80139ae:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 80139b2:	d045      	beq.n	8013a40 <_nx_tcp_socket_state_ack_check+0x160>
            while (search_ptr)
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d043      	beq.n	8013a40 <_nx_tcp_socket_state_ack_check+0x160>
 80139b8:	69dd      	ldr	r5, [r3, #28]
 80139ba:	4634      	mov	r4, r6
 80139bc:	461e      	mov	r6, r3
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 80139be:	f1b5 3fdd 	cmp.w	r5, #3722304989	; 0xdddddddd
 80139c2:	68b3      	ldr	r3, [r6, #8]
 80139c4:	d1d4      	bne.n	8013970 <_nx_tcp_socket_state_ack_check+0x90>
 80139c6:	461a      	mov	r2, r3
 80139c8:	f04f 0c00 	mov.w	ip, #0
 80139cc:	e7d6      	b.n	801397c <_nx_tcp_socket_state_ack_check+0x9c>
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 80139ce:	6e83      	ldr	r3, [r0, #104]	; 0x68
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence + 1;
 80139d0:	f102 0901 	add.w	r9, r2, #1
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 80139d4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 80139d8:	eba2 0803 	sub.w	r8, r2, r3
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 80139dc:	2c00      	cmp	r4, #0
 80139de:	d194      	bne.n	801390a <_nx_tcp_socket_state_ack_check+0x2a>
 80139e0:	468a      	mov	sl, r1
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 80139e2:	6889      	ldr	r1, [r1, #8]
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 80139e4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80139e6:	4607      	mov	r7, r0
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 80139e8:	4549      	cmp	r1, r9
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 80139ea:	9201      	str	r2, [sp, #4]
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 80139ec:	d1b0      	bne.n	8013950 <_nx_tcp_socket_state_ack_check+0x70>
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 80139ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
            packet_release_count =  socket_ptr -> nx_tcp_socket_transmit_sent_count;
 80139f0:	f8d0 b0cc 	ldr.w	fp, [r0, #204]	; 0xcc
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 80139f4:	2a06      	cmp	r2, #6
            previous_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_tail;
 80139f6:	f8d0 60d4 	ldr.w	r6, [r0, #212]	; 0xd4
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 80139fa:	d902      	bls.n	8013a02 <_nx_tcp_socket_state_ack_check+0x122>
                socket_ptr -> nx_tcp_socket_fin_acked = NX_TRUE;
 80139fc:	2201      	movs	r2, #1
 80139fe:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
                }
            }
        }

        /* Determine if anything needs to be released.  */
        if (!packet_release_count)
 8013a02:	4649      	mov	r1, r9
 8013a04:	f1bb 0f00 	cmp.w	fp, #0
 8013a08:	f040 8094 	bne.w	8013b34 <_nx_tcp_socket_state_ack_check+0x254>
                       side of the connection figure out if everything is still okay.  */
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
                    return(NX_FALSE);
                }
            }
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 8013a0c:	f8d7 b080 	ldr.w	fp, [r7, #128]	; 0x80
 8013a10:	f1bb 0f00 	cmp.w	fp, #0
 8013a14:	f040 8152 	bne.w	8013cbc <_nx_tcp_socket_state_ack_check+0x3dc>
 8013a18:	f8da 2004 	ldr.w	r2, [sl, #4]
 8013a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	f000 817a 	beq.w	8013d18 <_nx_tcp_socket_state_ack_check+0x438>
 8013a24:	eba1 0808 	sub.w	r8, r1, r8
 8013a28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013a2a:	e09e      	b.n	8013b6a <_nx_tcp_socket_state_ack_check+0x28a>
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	68db      	ldr	r3, [r3, #12]
 8013a30:	deff      	udf	#255	; 0xff
    else
    {

        /* The ACK bit is off drop the segment and return.  */
        /* RFC793, Section3.9, Page72.  */
        return(NX_FALSE);
 8013a32:	4618      	mov	r0, r3
    }
}
 8013a34:	4770      	bx	lr
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 8013a36:	b910      	cbnz	r0, 8013a3e <_nx_tcp_socket_state_ack_check+0x15e>
 8013a38:	2a00      	cmp	r2, #0
 8013a3a:	f000 812b 	beq.w	8013c94 <_nx_tcp_socket_state_ack_check+0x3b4>
 8013a3e:	4666      	mov	r6, ip
        if (!packet_release_count)
 8013a40:	f1bb 0f00 	cmp.w	fp, #0
 8013a44:	d175      	bne.n	8013b32 <_nx_tcp_socket_state_ack_check+0x252>
            if (tcp_header_ptr -> nx_tcp_acknowledgment_number != ending_tx_sequence)
 8013a46:	4589      	cmp	r9, r1
 8013a48:	d0e0      	beq.n	8013a0c <_nx_tcp_socket_state_ack_check+0x12c>
                if ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence > 0)
 8013a4a:	eba1 0309 	sub.w	r3, r1, r9
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	f300 80ce 	bgt.w	8013bf0 <_nx_tcp_socket_state_ack_check+0x310>
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 8013a54:	eba1 0808 	sub.w	r8, r1, r8
 8013a58:	f04f 0b00 	mov.w	fp, #0
 8013a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013a5e:	f1b8 0f00 	cmp.w	r8, #0
 8013a62:	f340 808b 	ble.w	8013b7c <_nx_tcp_socket_state_ack_check+0x29c>
            socket_ptr -> nx_tcp_socket_tx_window_advertised =  (tcp_header_ptr -> nx_tcp_header_word_3) & NX_LOWER_16_MASK;
 8013a66:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 8013a6a:	663a      	str	r2, [r7, #96]	; 0x60
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 8013a6c:	4293      	cmp	r3, r2
 8013a6e:	d306      	bcc.n	8013a7e <_nx_tcp_socket_state_ack_check+0x19e>
 8013a70:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8013a74:	4288      	cmp	r0, r1
 8013a76:	d802      	bhi.n	8013a7e <_nx_tcp_socket_state_ack_check+0x19e>
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 8013a78:	2100      	movs	r1, #0
 8013a7a:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
        if (!packet_release_count)
 8013a7e:	f1bb 0f00 	cmp.w	fp, #0
 8013a82:	d052      	beq.n	8013b2a <_nx_tcp_socket_state_ack_check+0x24a>
        search_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8013a84:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
        if (previous_ptr != socket_ptr -> nx_tcp_socket_transmit_sent_tail)
 8013a88:	42b1      	cmp	r1, r6
 8013a8a:	f000 80b7 	beq.w	8013bfc <_nx_tcp_socket_state_ack_check+0x31c>
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013a8e:	6a31      	ldr	r1, [r6, #32]
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8013a90:	2400      	movs	r4, #0
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 8013a92:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013a96:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 8013a9a:	eba2 020b 	sub.w	r2, r2, fp
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8013a9e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8013aa2:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 8013aa6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8013aaa:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
        while (packet_release_count--)
 8013aae:	f10b 3bff 	add.w	fp, fp, #4294967295
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 8013ab2:	f04f 36aa 	mov.w	r6, #2863311530	; 0xaaaaaaaa
 8013ab6:	e015      	b.n	8013ae4 <_nx_tcp_socket_state_ack_check+0x204>
                                                       previous_ptr -> nx_packet_ip_header_length);
 8013ab8:	f890 c032 	ldrb.w	ip, [r0, #50]	; 0x32
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 8013abc:	442a      	add	r2, r5
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 8013abe:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013ac0:	4461      	add	r1, ip
                temp = search_header_ptr -> nx_tcp_header_word_3;
 8013ac2:	68cd      	ldr	r5, [r1, #12]
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 8013ac4:	1a52      	subs	r2, r2, r1
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013ac6:	f3c5 1103 	ubfx	r1, r5, #4, #4
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 8013aca:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > tcp_payload_length)
 8013ace:	429a      	cmp	r2, r3
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= tcp_payload_length;
 8013ad0:	bf34      	ite	cc
 8013ad2:	1a9a      	subcc	r2, r3, r2
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8013ad4:	2200      	movcs	r2, #0
        while (packet_release_count--)
 8013ad6:	f11b 3bff 	adds.w	fp, fp, #4294967295
 8013ada:	66ba      	str	r2, [r7, #104]	; 0x68
                previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = ((NX_PACKET *)NX_PACKET_ALLOCATED);
 8013adc:	6206      	str	r6, [r0, #32]
        while (packet_release_count--)
 8013ade:	d318      	bcc.n	8013b12 <_nx_tcp_socket_state_ack_check+0x232>
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ae4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013ae6:	6882      	ldr	r2, [r0, #8]
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013ae8:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 8013aec:	6206      	str	r6, [r0, #32]
            if (previous_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8013aee:	f1b1 3fdd 	cmp.w	r1, #3722304989	; 0xdddddddd
 8013af2:	d1e1      	bne.n	8013ab8 <_nx_tcp_socket_state_ack_check+0x1d8>
                temp = search_header_ptr -> nx_tcp_header_word_3;
 8013af4:	68d2      	ldr	r2, [r2, #12]
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013af6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8013afa:	0091      	lsls	r1, r2, #2
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > (previous_ptr -> nx_packet_length - header_length))
 8013afc:	1a6a      	subs	r2, r5, r1
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d24c      	bcs.n	8013b9c <_nx_tcp_socket_state_ack_check+0x2bc>
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= previous_ptr -> nx_packet_length - header_length;
 8013b02:	1b5a      	subs	r2, r3, r5
 8013b04:	440a      	add	r2, r1
 8013b06:	66ba      	str	r2, [r7, #104]	; 0x68
                _nx_packet_release(previous_ptr);
 8013b08:	f7f2 ff72 	bl	80069f0 <_nx_packet_release>
        while (packet_release_count--)
 8013b0c:	f11b 3bff 	adds.w	fp, fp, #4294967295
 8013b10:	d2e6      	bcs.n	8013ae0 <_nx_tcp_socket_state_ack_check+0x200>
        if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 8013b12:	f897 40aa 	ldrb.w	r4, [r7, #170]	; 0xaa
 8013b16:	2c01      	cmp	r4, #1
 8013b18:	d107      	bne.n	8013b2a <_nx_tcp_socket_state_ack_check+0x24a>
            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_FALSE);
 8013b1a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8013b1e:	2200      	movs	r2, #0
 8013b20:	4639      	mov	r1, r7
 8013b22:	f7f4 f8e7 	bl	8007cf4 <_nx_tcp_socket_retransmit>
        return(NX_TRUE);
 8013b26:	4620      	mov	r0, r4
 8013b28:	e000      	b.n	8013b2c <_nx_tcp_socket_state_ack_check+0x24c>
            return(NX_TRUE);
 8013b2a:	2001      	movs	r0, #1
}
 8013b2c:	b003      	add	sp, #12
 8013b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 8013b34:	f897 40aa 	ldrb.w	r4, [r7, #170]	; 0xaa
 8013b38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013b3a:	2c01      	cmp	r4, #1
 8013b3c:	d048      	beq.n	8013bd0 <_nx_tcp_socket_state_ack_check+0x2f0>
 8013b3e:	6e78      	ldr	r0, [r7, #100]	; 0x64
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 8013b40:	1a52      	subs	r2, r2, r1
 8013b42:	f112 0f02 	cmn.w	r2, #2
 8013b46:	d430      	bmi.n	8013baa <_nx_tcp_socket_state_ack_check+0x2ca>
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8013b48:	2200      	movs	r2, #0
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 8013b4a:	f8c7 8070 	str.w	r8, [r7, #112]	; 0x70
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 8013b4e:	eba1 0808 	sub.w	r8, r1, r8
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8013b52:	67ba      	str	r2, [r7, #120]	; 0x78
                if (socket_ptr -> nx_tcp_socket_tx_window_congestion >= socket_ptr -> nx_tcp_socket_tx_slow_start_threshold)
 8013b54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b56:	4282      	cmp	r2, r0
 8013b58:	d844      	bhi.n	8013be4 <_nx_tcp_socket_state_ack_check+0x304>
                    temp = socket_ptr -> nx_tcp_socket_connect_mss2 / socket_ptr -> nx_tcp_socket_tx_window_congestion;
 8013b5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b5c:	fbb2 f2f0 	udiv	r2, r2, r0
                        temp = 1;
 8013b60:	2a00      	cmp	r2, #0
 8013b62:	bf08      	it	eq
 8013b64:	2201      	moveq	r2, #1
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_window_congestion + temp;
 8013b66:	4402      	add	r2, r0
 8013b68:	667a      	str	r2, [r7, #100]	; 0x64
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 8013b6a:	f1b8 0f00 	cmp.w	r8, #0
 8013b6e:	dd05      	ble.n	8013b7c <_nx_tcp_socket_state_ack_check+0x29c>
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 8013b70:	eba1 0909 	sub.w	r9, r1, r9
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 8013b74:	f1b9 0f00 	cmp.w	r9, #0
 8013b78:	f77f af75 	ble.w	8013a66 <_nx_tcp_socket_state_ack_check+0x186>
            ((INT)tcp_header_ptr -> nx_tcp_sequence_number - (INT)ending_rx_sequence > 0) ||
 8013b7c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8013b80:	9801      	ldr	r0, [sp, #4]
 8013b82:	1a10      	subs	r0, r2, r0
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 8013b84:	2800      	cmp	r0, #0
 8013b86:	f73f af6e 	bgt.w	8013a66 <_nx_tcp_socket_state_ack_check+0x186>
            (((INT)tcp_header_ptr -> nx_tcp_sequence_number == (INT)ending_rx_sequence) &&
 8013b8a:	f1b8 0f00 	cmp.w	r8, #0
 8013b8e:	db03      	blt.n	8013b98 <_nx_tcp_socket_state_ack_check+0x2b8>
 8013b90:	9801      	ldr	r0, [sp, #4]
 8013b92:	4282      	cmp	r2, r0
 8013b94:	f43f af67 	beq.w	8013a66 <_nx_tcp_socket_state_ack_check+0x186>
 8013b98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b9a:	e767      	b.n	8013a6c <_nx_tcp_socket_state_ack_check+0x18c>
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	e7b2      	b.n	8013b06 <_nx_tcp_socket_state_ack_check+0x226>
 8013ba0:	4626      	mov	r6, r4
 8013ba2:	e74d      	b.n	8013a40 <_nx_tcp_socket_state_ack_check+0x160>
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8013ba4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013ba6:	3614      	adds	r6, #20
 8013ba8:	e6b9      	b.n	801391e <_nx_tcp_socket_state_ack_check+0x3e>
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 8013baa:	1e8d      	subs	r5, r1, #2
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8013bac:	2200      	movs	r2, #0
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 8013bae:	2c01      	cmp	r4, #1
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 8013bb0:	f8c7 8070 	str.w	r8, [r7, #112]	; 0x70
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 8013bb4:	66fd      	str	r5, [r7, #108]	; 0x6c
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 8013bb6:	eba1 0808 	sub.w	r8, r1, r8
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8013bba:	67ba      	str	r2, [r7, #120]	; 0x78
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 8013bbc:	d1ca      	bne.n	8013b54 <_nx_tcp_socket_state_ack_check+0x274>
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 8013bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 8013bc0:	eba0 0008 	sub.w	r0, r0, r8
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 8013bc4:	4542      	cmp	r2, r8
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 8013bc6:	6678      	str	r0, [r7, #100]	; 0x64
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 8013bc8:	d2cf      	bcs.n	8013b6a <_nx_tcp_socket_state_ack_check+0x28a>
                    socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 8013bca:	4410      	add	r0, r2
 8013bcc:	6678      	str	r0, [r7, #100]	; 0x64
 8013bce:	e7cc      	b.n	8013b6a <_nx_tcp_socket_state_ack_check+0x28a>
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 8013bd0:	1a88      	subs	r0, r1, r2
 8013bd2:	2800      	cmp	r0, #0
 8013bd4:	f340 8093 	ble.w	8013cfe <_nx_tcp_socket_state_ack_check+0x41e>
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 8013bd8:	2400      	movs	r4, #0
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 8013bda:	6c38      	ldr	r0, [r7, #64]	; 0x40
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 8013bdc:	f887 40aa 	strb.w	r4, [r7, #170]	; 0xaa
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 8013be0:	6678      	str	r0, [r7, #100]	; 0x64
 8013be2:	e7ad      	b.n	8013b40 <_nx_tcp_socket_state_ack_check+0x260>
                    if (acked_bytes < socket_ptr -> nx_tcp_socket_connect_mss)
 8013be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013be6:	4542      	cmp	r2, r8
 8013be8:	d96e      	bls.n	8013cc8 <_nx_tcp_socket_state_ack_check+0x3e8>
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += acked_bytes;
 8013bea:	4440      	add	r0, r8
 8013bec:	6678      	str	r0, [r7, #100]	; 0x64
 8013bee:	e7bc      	b.n	8013b6a <_nx_tcp_socket_state_ack_check+0x28a>
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 8013bf0:	4638      	mov	r0, r7
 8013bf2:	4649      	mov	r1, r9
 8013bf4:	f7f3 fa88 	bl	8007108 <_nx_tcp_packet_send_ack>
                    return(NX_FALSE);
 8013bf8:	2000      	movs	r0, #0
 8013bfa:	e797      	b.n	8013b2c <_nx_tcp_socket_state_ack_check+0x24c>
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 8013bfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  NX_NULL;
 8013bfe:	2400      	movs	r4, #0
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 8013c00:	f021 0502 	bic.w	r5, r1, #2
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 8013c04:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 8013c08:	2d09      	cmp	r5, #9
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 8013c0a:	e9c7 4434 	strd	r4, r4, [r7, #208]	; 0xd0
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 8013c0e:	d006      	beq.n	8013c1e <_nx_tcp_socket_state_ack_check+0x33e>
 8013c10:	f1a1 0107 	sub.w	r1, r1, #7
 8013c14:	fab1 f181 	clz	r1, r1
 8013c18:	0949      	lsrs	r1, r1, #5
 8013c1a:	2900      	cmp	r1, #0
 8013c1c:	d063      	beq.n	8013ce6 <_nx_tcp_socket_state_ack_check+0x406>
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8013c1e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8013c22:	2200      	movs	r2, #0
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8013c24:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8013c28:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8013c2c:	e73f      	b.n	8013aae <_nx_tcp_socket_state_ack_check+0x1ce>
                if (tcp_header_ptr -> nx_tcp_acknowledgment_number == starting_tx_sequence)
 8013c2e:	4541      	cmp	r1, r8
 8013c30:	d04d      	beq.n	8013cce <_nx_tcp_socket_state_ack_check+0x3ee>
 8013c32:	45c1      	cmp	r9, r8
 8013c34:	f63f ae95 	bhi.w	8013962 <_nx_tcp_socket_state_ack_check+0x82>
 8013c38:	462a      	mov	r2, r5
            packet_release_count =  0;
 8013c3a:	f04f 0b00 	mov.w	fp, #0
 8013c3e:	68b5      	ldr	r5, [r6, #8]
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8013c40:	f1b2 3fdd 	cmp.w	r2, #3722304989	; 0xdddddddd
            previous_ptr =  NX_NULL;
 8013c44:	46dc      	mov	ip, fp
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8013c46:	d036      	beq.n	8013cb6 <_nx_tcp_socket_state_ack_check+0x3d6>
                                                           search_ptr -> nx_packet_ip_header_length);
 8013c48:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8013c4c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8013c4e:	441a      	add	r2, r3
 8013c50:	1aad      	subs	r5, r5, r2
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 8013c52:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8013c56:	4588      	cmp	r8, r1
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 8013c58:	68d4      	ldr	r4, [r2, #12]
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8013c5a:	ea8e 433e 	eor.w	r3, lr, lr, ror #16
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8013c5e:	6a72      	ldr	r2, [r6, #36]	; 0x24
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013c60:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8013c64:	bf88      	it	hi
 8013c66:	2000      	movhi	r0, #0
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8013c68:	ea4f 2313 	mov.w	r3, r3, lsr #8
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8013c6c:	442a      	add	r2, r5
 8013c6e:	bf98      	it	ls
 8013c70:	2001      	movls	r0, #1
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8013c72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013c76:	ea83 233e 	eor.w	r3, r3, lr, ror #8
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8013c7a:	4413      	add	r3, r2
 8013c7c:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 8013c80:	428b      	cmp	r3, r1
 8013c82:	bf94      	ite	ls
 8013c84:	2200      	movls	r2, #0
 8013c86:	2201      	movhi	r2, #1
                    if (ending_packet_sequence < starting_tx_sequence)
 8013c88:	4598      	cmp	r8, r3
 8013c8a:	f63f aed4 	bhi.w	8013a36 <_nx_tcp_socket_state_ack_check+0x156>
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f47f aed2 	bne.w	8013a38 <_nx_tcp_socket_state_ack_check+0x158>
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013c94:	6a33      	ldr	r3, [r6, #32]
                packet_release_count++;
 8013c96:	f10b 0b01 	add.w	fp, fp, #1
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 8013c9a:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 8013c9e:	f43f aecf 	beq.w	8013a40 <_nx_tcp_socket_state_ack_check+0x160>
            while (search_ptr)
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	f43f aecc 	beq.w	8013a40 <_nx_tcp_socket_state_ack_check+0x160>
 8013ca8:	69da      	ldr	r2, [r3, #28]
 8013caa:	46b4      	mov	ip, r6
 8013cac:	461e      	mov	r6, r3
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8013cae:	f1b2 3fdd 	cmp.w	r2, #3722304989	; 0xdddddddd
 8013cb2:	68b5      	ldr	r5, [r6, #8]
 8013cb4:	d1c8      	bne.n	8013c48 <_nx_tcp_socket_state_ack_check+0x368>
 8013cb6:	462a      	mov	r2, r5
 8013cb8:	2500      	movs	r5, #0
 8013cba:	e7ca      	b.n	8013c52 <_nx_tcp_socket_state_ack_check+0x372>
 8013cbc:	eba1 0808 	sub.w	r8, r1, r8
 8013cc0:	f04f 0b00 	mov.w	fp, #0
 8013cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013cc6:	e750      	b.n	8013b6a <_nx_tcp_socket_state_ack_check+0x28a>
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 8013cc8:	4402      	add	r2, r0
 8013cca:	667a      	str	r2, [r7, #100]	; 0x64
 8013ccc:	e74d      	b.n	8013b6a <_nx_tcp_socket_state_ack_check+0x28a>
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 8013cce:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8013cd0:	3301      	adds	r3, #1
                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 8013cd2:	2b03      	cmp	r3, #3
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 8013cd4:	6783      	str	r3, [r0, #120]	; 0x78
                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 8013cd6:	d028      	beq.n	8013d2a <_nx_tcp_socket_state_ack_check+0x44a>
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 8013cd8:	d903      	bls.n	8013ce2 <_nx_tcp_socket_state_ack_check+0x402>
 8013cda:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d007      	beq.n	8013cf2 <_nx_tcp_socket_state_ack_check+0x412>
 8013ce2:	4641      	mov	r1, r8
 8013ce4:	e7a5      	b.n	8013c32 <_nx_tcp_socket_state_ack_check+0x352>
            else if (socket_ptr -> nx_tcp_socket_tx_window_advertised != 0)
 8013ce6:	2a00      	cmp	r2, #0
 8013ce8:	f43f aee1 	beq.w	8013aae <_nx_tcp_socket_state_ack_check+0x1ce>
                socket_ptr -> nx_tcp_socket_timeout =  0;
 8013cec:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8013cf0:	e6dd      	b.n	8013aae <_nx_tcp_socket_state_ack_check+0x1ce>
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 8013cf2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8013cf4:	4641      	mov	r1, r8
 8013cf6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8013cf8:	4413      	add	r3, r2
 8013cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8013cfc:	e799      	b.n	8013c32 <_nx_tcp_socket_state_ack_check+0x352>
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 8013cfe:	1a52      	subs	r2, r2, r1
 8013d00:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013d02:	f112 0f02 	cmn.w	r2, #2
 8013d06:	f53f af50 	bmi.w	8013baa <_nx_tcp_socket_state_ack_check+0x2ca>
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8013d0a:	2200      	movs	r2, #0
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 8013d0c:	f8c7 8070 	str.w	r8, [r7, #112]	; 0x70
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 8013d10:	eba1 0808 	sub.w	r8, r1, r8
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8013d14:	67ba      	str	r2, [r7, #120]	; 0x78
 8013d16:	e752      	b.n	8013bbe <_nx_tcp_socket_state_ack_check+0x2de>
                _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 8013d18:	4638      	mov	r0, r7
 8013d1a:	f7f3 f9f5 	bl	8007108 <_nx_tcp_packet_send_ack>
 8013d1e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d24:	eba1 0808 	sub.w	r8, r1, r8
 8013d28:	e71f      	b.n	8013b6a <_nx_tcp_socket_state_ack_check+0x28a>
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 8013d2a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013d2c:	eba8 0303 	sub.w	r3, r8, r3
 8013d30:	3b01      	subs	r3, #1
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	dc09      	bgt.n	8013d4a <_nx_tcp_socket_state_ack_check+0x46a>
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 8013d36:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8013d38:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d9d1      	bls.n	8013ce2 <_nx_tcp_socket_state_ack_check+0x402>
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 8013d3e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8013d40:	eba8 0303 	sub.w	r3, r8, r3
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 8013d44:	ebb3 0382 	subs.w	r3, r3, r2, lsl #2
 8013d48:	d5cb      	bpl.n	8013ce2 <_nx_tcp_socket_state_ack_check+0x402>
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 8013d4a:	4639      	mov	r1, r7
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8013d52:	f7f3 ffcf 	bl	8007cf4 <_nx_tcp_socket_retransmit>
 8013d56:	f8da 1008 	ldr.w	r1, [sl, #8]
 8013d5a:	69f5      	ldr	r5, [r6, #28]
 8013d5c:	e769      	b.n	8013c32 <_nx_tcp_socket_state_ack_check+0x352>
 8013d5e:	bf00      	nop

08013d60 <_nx_tcp_socket_state_closing>:
VOID  _nx_tcp_socket_state_closing(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{


    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8013d60:	68cb      	ldr	r3, [r1, #12]
 8013d62:	02db      	lsls	r3, r3, #11
 8013d64:	d503      	bpl.n	8013d6e <_nx_tcp_socket_state_closing+0xe>
    {

        /* If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8013d66:	688a      	ldr	r2, [r1, #8]
 8013d68:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d000      	beq.n	8013d70 <_nx_tcp_socket_state_closing+0x10>
 8013d6e:	4770      	bx	lr
 8013d70:	684a      	ldr	r2, [r1, #4]
 8013d72:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d1fa      	bne.n	8013d6e <_nx_tcp_socket_state_closing+0xe>

            /* Set the socket state to TIMED WAIT now.  */
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;

            /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8013d78:	4a0b      	ldr	r2, [pc, #44]	; (8013da8 <_nx_tcp_socket_state_closing+0x48>)
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8013d7a:	210a      	movs	r1, #10

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8013d7c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8013d80:	6812      	ldr	r2, [r2, #0]
{
 8013d82:	b510      	push	{r4, lr}
 8013d84:	4604      	mov	r4, r0
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8013d86:	6441      	str	r1, [r0, #68]	; 0x44
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8013d88:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8013d8c:	b123      	cbz	r3, 8013d98 <_nx_tcp_socket_state_closing+0x38>
            {

                /* Resume the thread suspended for the disconnect.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8013d8e:	2100      	movs	r1, #0
 8013d90:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 8013d94:	f7f4 fc74 	bl	8008680 <_nx_tcp_socket_thread_resume>
            }

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 8013d98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8013d9c:	b11b      	cbz	r3, 8013da6 <_nx_tcp_socket_state_closing+0x46>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8013d9e:	4620      	mov	r0, r4
#endif
        }

        /* Ignore the segment.  According to RFC 793, Section 3.9, Page 73.  */
    }
}
 8013da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8013da4:	4718      	bx	r3
}
 8013da6:	bd10      	pop	{r4, pc}
 8013da8:	200078bc 	.word	0x200078bc

08013dac <_nx_tcp_socket_state_data_check>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_data_check(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 8013dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif


    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8013db0:	f8d1 b008 	ldr.w	fp, [r1, #8]
{
 8013db4:	b083      	sub	sp, #12

    /* Pickup the begin sequence of this packet. */
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;

    /* Calculate the data length in the packet.  */
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 8013db6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
{
 8013db8:	4605      	mov	r5, r0
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013dba:	f8db 300c 	ldr.w	r3, [fp, #12]
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;
 8013dbe:	f8db 9004 	ldr.w	r9, [fp, #4]
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013dc2:	0f1c      	lsrs	r4, r3, #28
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 8013dc4:	eba2 0484 	sub.w	r4, r2, r4, lsl #2

    /* Pickup the end sequence of this packet. The end sequence is one byte to the last byte in this packet. */
    packet_end_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 8013dc8:	eb09 0704 	add.w	r7, r9, r4

    /* Trim the data that out of the receive window, make sure all data are in receive window.  */
    if (packet_data_length)
 8013dcc:	2c00      	cmp	r4, #0
 8013dce:	f000 813a 	beq.w	8014046 <_nx_tcp_socket_state_data_check+0x29a>
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 8013dd2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013dd4:	4688      	mov	r8, r1
    {

        /* Step1. trim the data on the left side of the receive window.  */
        if (((INT)socket_ptr -> nx_tcp_socket_rx_sequence - (INT)packet_begin_sequence) > 0)
 8013dd6:	464e      	mov	r6, r9
 8013dd8:	eba3 0a09 	sub.w	sl, r3, r9
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 8013ddc:	9300      	str	r3, [sp, #0]
        if (((INT)socket_ptr -> nx_tcp_socket_rx_sequence - (INT)packet_begin_sequence) > 0)
 8013dde:	f1ba 0f00 	cmp.w	sl, #0
 8013de2:	f300 813e 	bgt.w	8014062 <_nx_tcp_socket_state_data_check+0x2b6>
 8013de6:	461a      	mov	r2, r3
            packet_begin_sequence += trim_data_length;
        }

        /* Step2. trim the data on the right side of the receive window.  */
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
             (INT)socket_ptr -> nx_tcp_socket_rx_window_current) > 0)
 8013de8:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 8013dec:	1afb      	subs	r3, r7, r3
 8013dee:	eba3 030c 	sub.w	r3, r3, ip
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	f300 814e 	bgt.w	8014094 <_nx_tcp_socket_state_data_check+0x2e8>
            packet_end_sequence -= trim_data_length;
        }
    }

    /* Determine if the packet has the FIN bit set to signal a disconnect.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 8013df8:	f8db 300c 	ldr.w	r3, [fp, #12]
 8013dfc:	03d9      	lsls	r1, r3, #15
 8013dfe:	d506      	bpl.n	8013e0e <_nx_tcp_socket_state_data_check+0x62>
    {

        /* Setup the FIN sequence number that we need to look at.  */
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 8013e00:	f8db 3004 	ldr.w	r3, [fp, #4]

        /* Indicate that the FIN sequence is now valid.  Once the receive chain is complete
           we will process (ACK) the FIN command which is part of a disconnect started by the
           other side of the connection.  */
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 8013e04:	2201      	movs	r2, #1
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 8013e06:	4423      	add	r3, r4
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 8013e08:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 8013e0c:	65ab      	str	r3, [r5, #88]	; 0x58
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_FIN_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
    }

    /* Compute the amount of payload data in this packet. */
    if (packet_data_length == 0)
 8013e0e:	2c00      	cmp	r4, #0
 8013e10:	f000 811f 	beq.w	8014052 <_nx_tcp_socket_state_data_check+0x2a6>
 8013e14:	f8db 3004 	ldr.w	r3, [fp, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Ensure the next pointer in the packet is set to NULL, which will indicate to the
       receive logic that it is not yet part of a contiguous stream.  */
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 8013e18:	2200      	movs	r2, #0
 8013e1a:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

    /* Otherwise, the packet is within the receive window so continue processing
       the incoming TCP data.  */

    /* Pickup the tail pointer of the receive queue.  */
    search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 8013e1c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8013e20:	1a5c      	subs	r4, r3, r1
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 8013e22:	f8c8 201c 	str.w	r2, [r8, #28]
 8013e26:	fab4 f484 	clz	r4, r4
 8013e2a:	0964      	lsrs	r4, r4, #5

    /* Check to see if the tail pointer is part of a contiguous stream.  */
    if (search_ptr)
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	f000 8203 	beq.w	8014238 <_nx_tcp_socket_state_data_check+0x48c>
    {

        /* Setup a pointer to header of this packet in the sent list.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 8013e32:	6882      	ldr	r2, [r0, #8]

        /* Determine the size of the search TCP header.  */
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

        /* Now see if the current sequence number accounts for the last packet.  */
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 8013e34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013e36:	f8d2 c004 	ldr.w	ip, [r2, #4]
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013e3a:	68d2      	ldr	r2, [r2, #12]
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 8013e3c:	4463      	add	r3, ip
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013e3e:	0f12      	lsrs	r2, r2, #28
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 8013e40:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
#endif /* NX_ENABLE_LOW_WATERMARK */

    /* Determine if we have a simple case of TCP data coming in the correct order.  This means
       the socket's sequence number matches the incoming packet sequence number and the last packet's
       data on the socket's receive queue (if any) matches the current sequence number.  */
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 8013e44:	428b      	cmp	r3, r1
 8013e46:	d102      	bne.n	8013e4e <_nx_tcp_socket_state_data_check+0xa2>
 8013e48:	2c00      	cmp	r4, #0
 8013e4a:	f040 8235 	bne.w	80142b8 <_nx_tcp_socket_state_data_check+0x50c>
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* End of the simple case: add new packet towards the end of the recv queue.
           All packets in the receive queue are in sequence. */
    }
    else if (socket_ptr -> nx_tcp_socket_receive_queue_head == NX_NULL)
 8013e4e:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 8013e52:	2c00      	cmp	r4, #0
 8013e54:	f000 820a 	beq.w	801426c <_nx_tcp_socket_state_data_check+0x4c0>

        /* Go through the received packet chain, and locate the first packet that the
           packet_begin_sequence is to the right of the end of it. */

        /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
        if (((INT)packet_begin_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) > 0)
 8013e58:	1a76      	subs	r6, r6, r1
 8013e5a:	2e00      	cmp	r6, #0
 8013e5c:	f300 819b 	bgt.w	8014196 <_nx_tcp_socket_state_data_check+0x3ea>
        }

        /* At this point, it is guaranteed that the receive queue contains packets. */
        search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;

        previous_ptr = NX_NULL;
 8013e60:	f04f 0a00 	mov.w	sl, #0
        work_ptr -> nx_packet_next = NX_NULL;
 8013e64:	4652      	mov	r2, sl

        while (search_ptr)
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 8013e66:	f1b4 3fee 	cmp.w	r4, #4008636142	; 0xeeeeeeee
 8013e6a:	f000 8155 	beq.w	8014118 <_nx_tcp_socket_state_data_check+0x36c>
 8013e6e:	fab4 f684 	clz	r6, r4
 8013e72:	0976      	lsrs	r6, r6, #5
 8013e74:	2e00      	cmp	r6, #0
 8013e76:	f040 814f 	bne.w	8014118 <_nx_tcp_socket_state_data_check+0x36c>
                break;
            }

            /* Setup a pointer to header of this packet in the receive list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 8013e7a:	68a3      	ldr	r3, [r4, #8]
            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;

            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8013e7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 8013e7e:	f8d3 c004 	ldr.w	ip, [r3, #4]
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013e82:	68d9      	ldr	r1, [r3, #12]
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8013e84:	eb00 0e0c 	add.w	lr, r0, ip
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013e88:	0f09      	lsrs	r1, r1, #28
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8013e8a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
             *        In this configuration, the incoming packet is completely to the right of      *
             *        search_ptr.  Move to the next search packet.                                  *
             *                                                                                      *
             ****************************************************************************************/
            /* packet_ptr is to the right of search_ptr */
            if (((INT)(packet_begin_sequence - search_end_sequence)) >= 0)
 8013e8e:	eba9 0e01 	sub.w	lr, r9, r1
 8013e92:	f1be 0f00 	cmp.w	lr, #0
 8013e96:	f280 8139 	bge.w	801410c <_nx_tcp_socket_state_data_check+0x360>
             *              SSSSSSSSS                                                               *
             *        In this configuration, the incoming packet is completely to the left of       *
             *        search_ptr.  Incoming packet needs to be inserted in front of search ptr.     *
             *                                                                                      *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_end_sequence)) >= 0)
 8013e9a:	ebac 0e07 	sub.w	lr, ip, r7
 8013e9e:	f1be 0f00 	cmp.w	lr, #0
 8013ea2:	da2f      	bge.n	8013f04 <_nx_tcp_socket_state_data_check+0x158>
             *        to search for contigous data, therefore no need to wake up user thread.       *
             *        Howerver may need to send out ACK if new packet is to the right of the seq    *
             *        number.                                                                       *
             *                                                                                      *
             ****************************************************************************************/
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 8013ea4:	eba9 0e0c 	sub.w	lr, r9, ip
 8013ea8:	f1be 0f00 	cmp.w	lr, #0
 8013eac:	db05      	blt.n	8013eba <_nx_tcp_socket_state_data_check+0x10e>
                (((INT)(search_end_sequence - packet_end_sequence)) >= 0))
 8013eae:	eba1 0e07 	sub.w	lr, r1, r7
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 8013eb2:	f1be 0f00 	cmp.w	lr, #0
 8013eb6:	f280 8168 	bge.w	801418a <_nx_tcp_socket_state_data_check+0x3de>
             *         Release existing packet, and insert new packet, then check for the next      *
             *         packet on the chain.  The next search may yield case (5).  Need to check     *
             *         for contingous data, may need to send ACK.                                   *
             *                                                                                      *
            ****************************************************************************************/
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 8013eba:	ebac 0609 	sub.w	r6, ip, r9
 8013ebe:	2e00      	cmp	r6, #0
 8013ec0:	f2c0 8108 	blt.w	80140d4 <_nx_tcp_socket_state_data_check+0x328>
                (((INT)(packet_end_sequence - search_end_sequence) >= 0)))
 8013ec4:	1a79      	subs	r1, r7, r1
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 8013ec6:	2900      	cmp	r1, #0
 8013ec8:	f280 8138 	bge.w	801413c <_nx_tcp_socket_state_data_check+0x390>
             *        contigous data, may need to send out ACK.                                     *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_begin_sequence)) >= 0)
            {

                _nx_tcp_socket_state_data_trim(packet_ptr, (packet_end_sequence - search_begin_sequence));
 8013ecc:	eba7 070c 	sub.w	r7, r7, ip
    if (amount >= packet_ptr -> nx_packet_length)
 8013ed0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8013ed4:	429f      	cmp	r7, r3
 8013ed6:	d215      	bcs.n	8013f04 <_nx_tcp_socket_state_data_check+0x158>
    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 8013ed8:	1bdf      	subs	r7, r3, r7
    packet_ptr -> nx_packet_length = bytes_to_keep;
 8013eda:	4641      	mov	r1, r8
 8013edc:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
 8013ee0:	684e      	ldr	r6, [r1, #4]
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 8013ee2:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8013ee6:	1ad0      	subs	r0, r2, r3
 8013ee8:	42b8      	cmp	r0, r7
 8013eea:	f2c0 81fc 	blt.w	80142e6 <_nx_tcp_socket_state_data_check+0x53a>
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8013eee:	443b      	add	r3, r7
        work_ptr -> nx_packet_next = NX_NULL;
 8013ef0:	2200      	movs	r2, #0
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8013ef2:	60cb      	str	r3, [r1, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 8013ef4:	604a      	str	r2, [r1, #4]
        if (work_ptr)
 8013ef6:	b12e      	cbz	r6, 8013f04 <_nx_tcp_socket_state_data_check+0x158>
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8013ef8:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
            _nx_packet_release(work_ptr);
 8013efc:	4630      	mov	r0, r6
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8013efe:	6233      	str	r3, [r6, #32]
            _nx_packet_release(work_ptr);
 8013f00:	f7f2 fd76 	bl	80069f0 <_nx_packet_release>
            previous_ptr = search_ptr;
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
        }   /* End of while (search_ptr) */

        /* At this point, the logic (within the while loop) finds a location where this packet should be inserted. */
        if (previous_ptr == NX_NULL)
 8013f04:	f1ba 0f00 	cmp.w	sl, #0
 8013f08:	f000 81ad 	beq.w	8014266 <_nx_tcp_socket_state_data_check+0x4ba>
        }
        else
        {

            /* The packet needs to be inserted after previous_ptr. */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = packet_ptr;
 8013f0c:	f8ca 8020 	str.w	r8, [sl, #32]
        }

        if (search_ptr == NX_NULL)
 8013f10:	2c00      	cmp	r4, #0
 8013f12:	f000 81a1 	beq.w	8014258 <_nx_tcp_socket_state_data_check+0x4ac>
        }
        else
        {

            /* Chain search_ptr onto packet_ptr. */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = search_ptr;
 8013f16:	f8c8 4020 	str.w	r4, [r8, #32]

        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

        /* Increment the receive TCP packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8013f1a:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
ULONG          acked_packets = 0;
 8013f1e:	2400      	movs	r4, #0

        /* End of the out-of-order search.  At this point, the packet has been inserted. */

        /* Now we need to figure out how much, if any, we can ACK.  */
        search_ptr =    socket_ptr -> nx_tcp_socket_receive_queue_head;
 8013f20:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0

                    acked_packets++;

                    /* Mark this packet as ready for retrieval.  */
                    /*lint -e{923} suppress cast of ULONG to pointer.  */
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8013f24:	f04f 3cbb 	mov.w	ip, #3149642683	; 0xbbbbbbbb
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8013f28:	3201      	adds	r2, #1
        expected_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 8013f2a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8013f2c:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 8013f30:	6886      	ldr	r6, [r0, #8]
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8013f32:	6a43      	ldr	r3, [r0, #36]	; 0x24
            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 8013f34:	6871      	ldr	r1, [r6, #4]
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013f36:	68f6      	ldr	r6, [r6, #12]
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8013f38:	440b      	add	r3, r1
            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 8013f3a:	1a79      	subs	r1, r7, r1
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013f3c:	0f36      	lsrs	r6, r6, #28
            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 8013f3e:	2900      	cmp	r1, #0
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8013f40:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
                if ((INT)(search_end_sequence - expected_sequence) > 0)
 8013f44:	eba3 0107 	sub.w	r1, r3, r7
            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 8013f48:	db0d      	blt.n	8013f66 <_nx_tcp_socket_state_data_check+0x1ba>
                if ((INT)(search_end_sequence - expected_sequence) > 0)
 8013f4a:	2900      	cmp	r1, #0
 8013f4c:	f340 80ed 	ble.w	801412a <_nx_tcp_socket_state_data_check+0x37e>
                    socket_ptr -> nx_tcp_socket_rx_sequence = expected_sequence;
 8013f50:	64eb      	str	r3, [r5, #76]	; 0x4c
                    acked_packets++;
 8013f52:	3401      	adds	r4, #1
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8013f54:	f8c0 c01c 	str.w	ip, [r0, #28]
                    expected_sequence = search_end_sequence;
 8013f58:	461f      	mov	r7, r3
                /* Expected number is to the left of search_ptr.   Get out of the do-while loop!  */
                break;
            }

            /* Move the search pointer to the next queued receive packet.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013f5a:	6a00      	ldr	r0, [r0, #32]

                /* Get out of the loop!  */
                break;
            }
#endif /* NX_ENABLE_LOW_WATERMARK */
        } while (search_ptr);
 8013f5c:	f1b0 3fee 	cmp.w	r0, #4008636142	; 0xeeeeeeee
 8013f60:	d001      	beq.n	8013f66 <_nx_tcp_socket_state_data_check+0x1ba>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	d1e4      	bne.n	8013f30 <_nx_tcp_socket_state_data_check+0x184>
 8013f66:	6cef      	ldr	r7, [r5, #76]	; 0x4c
    socket_ptr -> nx_tcp_socket_packets_received++;
    socket_ptr -> nx_tcp_socket_bytes_received += packet_data_length;
#endif

    /* Check if the rx sequence number has been updated.  */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8013f68:	9b00      	ldr	r3, [sp, #0]
 8013f6a:	42bb      	cmp	r3, r7
 8013f6c:	f000 8171 	beq.w	8014252 <_nx_tcp_socket_state_data_check+0x4a6>
    {

        /* Decrease the receive window size since rx_sequence is updated.  */
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8013f70:	1bdf      	subs	r7, r3, r7

        /* Update the rx_window_last_sent for SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98.  */
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8013f72:	e9d5 c320 	ldrd	ip, r3, [r5, #128]	; 0x80
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8013f76:	44bc      	add	ip, r7
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8013f78:	443b      	add	r3, r7
 8013f7a:	e9c5 c320 	strd	ip, r3, [r5, #128]	; 0x80

    /* At this point, we can use the packet TCP header pointers since the received
       packet is already queued.  */

    /* Any packets for receving? */
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8013f7e:	2c00      	cmp	r4, #0
 8013f80:	d040      	beq.n	8014004 <_nx_tcp_socket_state_data_check+0x258>
 8013f82:	f8d5 10f8 	ldr.w	r1, [r5, #248]	; 0xf8
 8013f86:	2900      	cmp	r1, #0
 8013f88:	d03c      	beq.n	8014004 <_nx_tcp_socket_state_data_check+0x258>
 8013f8a:	f105 08f8 	add.w	r8, r5, #248	; 0xf8
        /* Simply update the head pointer of the queue.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;

        /* Mark the packet as no longer being part of the TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8013f8e:	f04f 37aa 	mov.w	r7, #2863311530	; 0xaaaaaaaa

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8013f92:	f04f 0a00 	mov.w	sl, #0
 8013f96:	46c1      	mov	r9, r8
 8013f98:	e006      	b.n	8013fa8 <_nx_tcp_socket_state_data_check+0x1fc>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8013f9a:	f8d5 10f8 	ldr.w	r1, [r5, #248]	; 0xf8
 8013f9e:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 8013fa2:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 8013fa6:	b369      	cbz	r1, 8014004 <_nx_tcp_socket_state_data_check+0x258>
        packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 8013fa8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8013fac:	f102 3eff 	add.w	lr, r2, #4294967295

        /* Setup a pointer to the first thread suspended on the receive queue.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;

        /* Place the packet pointer in the return pointer.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8013fb0:	f8d1 807c 	ldr.w	r8, [r1, #124]	; 0x7c

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;

        /* Decrement the acked_packets count. */
        acked_packets--;
 8013fb4:	3c01      	subs	r4, #1
        tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8013fb6:	f8d3 b008 	ldr.w	fp, [r3, #8]

        /* Resume thread.  */
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 8013fba:	2100      	movs	r1, #0
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 8013fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013fbe:	f8db 000c 	ldr.w	r0, [fp, #12]
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013fc2:	6a1e      	ldr	r6, [r3, #32]
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013fc4:	0f00      	lsrs	r0, r0, #28
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013fc6:	f8c5 60c0 	str.w	r6, [r5, #192]	; 0xc0
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013fca:	0080      	lsls	r0, r0, #2
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8013fcc:	f8d5 60fc 	ldr.w	r6, [r5, #252]	; 0xfc
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 8013fd0:	1a12      	subs	r2, r2, r0
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 8013fd2:	4458      	add	r0, fp
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8013fd4:	e9c3 a707 	strd	sl, r7, [r3, #28]
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 8013fd8:	4494      	add	ip, r2
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8013fda:	f8c5 e0bc 	str.w	lr, [r5, #188]	; 0xbc
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8013fde:	f106 3eff 	add.w	lr, r6, #4294967295
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 8013fe2:	6098      	str	r0, [r3, #8]
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 8013fe4:	625a      	str	r2, [r3, #36]	; 0x24
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 8013fe6:	4648      	mov	r0, r9
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8013fe8:	f8c8 3000 	str.w	r3, [r8]
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 8013fec:	f8c5 c080 	str.w	ip, [r5, #128]	; 0x80
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8013ff0:	f8c5 e0fc 	str.w	lr, [r5, #252]	; 0xfc
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 8013ff4:	f7f4 fb44 	bl	8008680 <_nx_tcp_socket_thread_resume>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8013ff8:	2c00      	cmp	r4, #0
 8013ffa:	d1ce      	bne.n	8013f9a <_nx_tcp_socket_state_data_check+0x1ee>
 8013ffc:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 8014000:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 8014004:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    }

    /* Is the queue empty?.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 8014006:	b90a      	cbnz	r2, 801400c <_nx_tcp_socket_state_data_check+0x260>
    {

        /* Yes. Set both head and tail pointers to NULL.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
        socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 8014008:	e9c5 2230 	strd	r2, r2, [r5, #192]	; 0xc0
    }

    /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
       RFC1122, Section4.2.3.3, Page97-98. */
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 801400c:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8014010:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8014012:	ebac 0c01 	sub.w	ip, ip, r1
 8014016:	ebbc 0f52 	cmp.w	ip, r2, lsr #1
 801401a:	f080 809f 	bcs.w	801415c <_nx_tcp_socket_state_data_check+0x3b0>
        need_ack = NX_TRUE;
    }

    /* If the incoming packet caused the sequence number to move forward,
       indicating the new piece of data is in order, in sequence, and valid for receiving. */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 801401e:	9a00      	ldr	r2, [sp, #0]
 8014020:	429a      	cmp	r2, r3
 8014022:	d00c      	beq.n	801403e <_nx_tcp_socket_state_data_check+0x292>
UINT           need_ack = NX_FALSE;
 8014024:	2400      	movs	r4, #0
    {
        /* Determine if there is a socket receive notification function specified.  */
        if (socket_ptr -> nx_tcp_receive_callback)
 8014026:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 801402a:	b10b      	cbz	r3, 8014030 <_nx_tcp_socket_state_data_check+0x284>
        {

            /* Yes, notification is requested.  Call the application's receive notification
               function for this socket.  */
            (socket_ptr -> nx_tcp_receive_callback)(socket_ptr);
 801402c:	4628      	mov	r0, r5
 801402e:	4798      	blx	r3
#ifdef NX_TCP_ACK_EVERY_N_PACKETS
        /* Determine if we need to ACK up to the current sequence number.  */

        /* If we are still in an ESTABLISHED state, a FIN isn't present and we can
           allocate a packet for the ACK message, send an ACK message.  */
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 8014030:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8014032:	2b05      	cmp	r3, #5
 8014034:	f000 80ec 	beq.w	8014210 <_nx_tcp_socket_state_data_check+0x464>
            }
        }
#endif
    }

    if (need_ack == NX_TRUE)
 8014038:	2c00      	cmp	r4, #0
 801403a:	f040 8092 	bne.w	8014162 <_nx_tcp_socket_state_data_check+0x3b6>
        /* Need to send ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
    }

    /* Return true since the packet was queued.  */
    return(NX_TRUE);
 801403e:	2001      	movs	r0, #1
}
 8014040:	b003      	add	sp, #12
 8014042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 8014046:	03db      	lsls	r3, r3, #15
 8014048:	d503      	bpl.n	8014052 <_nx_tcp_socket_state_data_check+0x2a6>
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 801404a:	2301      	movs	r3, #1
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 801404c:	6587      	str	r7, [r0, #88]	; 0x58
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 801404e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 8014052:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8014054:	2b05      	cmp	r3, #5
 8014056:	f000 8089 	beq.w	801416c <_nx_tcp_socket_state_data_check+0x3c0>
        return(NX_FALSE);
 801405a:	2000      	movs	r0, #0
}
 801405c:	b003      	add	sp, #12
 801405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (amount >= packet_ptr -> nx_packet_length || amount == 0)
 8014062:	4552      	cmp	r2, sl
 8014064:	bf8c      	ite	hi
 8014066:	2600      	movhi	r6, #0
 8014068:	2601      	movls	r6, #1
 801406a:	2e00      	cmp	r6, #0
 801406c:	f000 809a 	beq.w	80141a4 <_nx_tcp_socket_state_data_check+0x3f8>
 8014070:	461a      	mov	r2, r3
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 8014072:	1afb      	subs	r3, r7, r3
             (INT)socket_ptr -> nx_tcp_socket_rx_window_current) > 0)
 8014074:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 8014078:	eb0a 0109 	add.w	r1, sl, r9
            packet_data_length -= trim_data_length;
 801407c:	f8dd 9000 	ldr.w	r9, [sp]
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 8014080:	eba3 030c 	sub.w	r3, r3, ip
            packet_data_length -= trim_data_length;
 8014084:	eba4 040a 	sub.w	r4, r4, sl
 8014088:	464e      	mov	r6, r9
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 801408a:	f8cb 1004 	str.w	r1, [fp, #4]
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 801408e:	2b00      	cmp	r3, #0
 8014090:	f77f aeb2 	ble.w	8013df8 <_nx_tcp_socket_state_data_check+0x4c>
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 8014094:	eb0c 0a02 	add.w	sl, ip, r2
    if (amount >= packet_ptr -> nx_packet_length)
 8014098:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 801409c:	eba7 070a 	sub.w	r7, r7, sl
    if (amount >= packet_ptr -> nx_packet_length)
 80140a0:	4287      	cmp	r7, r0
 80140a2:	d214      	bcs.n	80140ce <_nx_tcp_socket_state_data_check+0x322>
    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 80140a4:	1bc0      	subs	r0, r0, r7
    packet_ptr -> nx_packet_length = bytes_to_keep;
 80140a6:	4641      	mov	r1, r8
 80140a8:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 80140ac:	f8d1 c004 	ldr.w	ip, [r1, #4]
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 80140b0:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80140b4:	eba2 0e03 	sub.w	lr, r2, r3
 80140b8:	4586      	cmp	lr, r0
 80140ba:	f2c0 80b6 	blt.w	801422a <_nx_tcp_socket_state_data_check+0x47e>
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 80140be:	4403      	add	r3, r0
        work_ptr -> nx_packet_next = NX_NULL;
 80140c0:	2200      	movs	r2, #0
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 80140c2:	60cb      	str	r3, [r1, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 80140c4:	604a      	str	r2, [r1, #4]
        if (work_ptr)
 80140c6:	f1bc 0f00 	cmp.w	ip, #0
 80140ca:	f040 80ed 	bne.w	80142a8 <_nx_tcp_socket_state_data_check+0x4fc>
            packet_data_length -= trim_data_length;
 80140ce:	1be4      	subs	r4, r4, r7
            packet_end_sequence -= trim_data_length;
 80140d0:	4657      	mov	r7, sl
 80140d2:	e691      	b.n	8013df8 <_nx_tcp_socket_state_data_check+0x4c>
            _nx_tcp_socket_state_data_trim(search_ptr, (ULONG)(search_end_sequence - packet_begin_sequence));
 80140d4:	eba1 0109 	sub.w	r1, r1, r9
    if (amount >= packet_ptr -> nx_packet_length)
 80140d8:	4288      	cmp	r0, r1
 80140da:	d917      	bls.n	801410c <_nx_tcp_socket_state_data_check+0x360>
    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 80140dc:	1a41      	subs	r1, r0, r1
    packet_ptr -> nx_packet_length = bytes_to_keep;
 80140de:	46a4      	mov	ip, r4
 80140e0:	6261      	str	r1, [r4, #36]	; 0x24
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 80140e2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80140e6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80140ea:	eba6 0e03 	sub.w	lr, r6, r3
 80140ee:	458e      	cmp	lr, r1
 80140f0:	db14      	blt.n	801411c <_nx_tcp_socket_state_data_check+0x370>
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 80140f2:	440b      	add	r3, r1
        work_ptr -> nx_packet_next = NX_NULL;
 80140f4:	f8cc 2004 	str.w	r2, [ip, #4]
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 80140f8:	f8cc 300c 	str.w	r3, [ip, #12]
        if (work_ptr)
 80140fc:	b130      	cbz	r0, 801410c <_nx_tcp_socket_state_data_check+0x360>
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 80140fe:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8014102:	9201      	str	r2, [sp, #4]
 8014104:	6203      	str	r3, [r0, #32]
            _nx_packet_release(work_ptr);
 8014106:	f7f2 fc73 	bl	80069f0 <_nx_packet_release>
 801410a:	9a01      	ldr	r2, [sp, #4]
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 801410c:	46a2      	mov	sl, r4
 801410e:	6a24      	ldr	r4, [r4, #32]
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 8014110:	f1b4 3fee 	cmp.w	r4, #4008636142	; 0xeeeeeeee
 8014114:	f47f aeab 	bne.w	8013e6e <_nx_tcp_socket_state_data_check+0xc2>
                search_ptr = NX_NULL;
 8014118:	2400      	movs	r4, #0
 801411a:	e6f3      	b.n	8013f04 <_nx_tcp_socket_state_data_check+0x158>
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 801411c:	1b9e      	subs	r6, r3, r6
 801411e:	4684      	mov	ip, r0
 8014120:	4431      	add	r1, r6
    while (work_ptr)
 8014122:	2800      	cmp	r0, #0
 8014124:	d0f2      	beq.n	801410c <_nx_tcp_socket_state_data_check+0x360>
 8014126:	6883      	ldr	r3, [r0, #8]
 8014128:	e7db      	b.n	80140e2 <_nx_tcp_socket_state_data_check+0x336>
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 801412a:	6a00      	ldr	r0, [r0, #32]
        } while (search_ptr);
 801412c:	2800      	cmp	r0, #0
 801412e:	f43f af1a 	beq.w	8013f66 <_nx_tcp_socket_state_data_check+0x1ba>
 8014132:	f1b0 3fee 	cmp.w	r0, #4008636142	; 0xeeeeeeee
 8014136:	f47f aefb 	bne.w	8013f30 <_nx_tcp_socket_state_data_check+0x184>
 801413a:	e714      	b.n	8013f66 <_nx_tcp_socket_state_data_check+0x1ba>
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 801413c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
                _nx_packet_release(search_ptr);
 8014140:	4620      	mov	r0, r4
 8014142:	9201      	str	r2, [sp, #4]
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8014144:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8014148:	3b01      	subs	r3, #1
                tmp_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 801414a:	6a21      	ldr	r1, [r4, #32]
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 801414c:	6222      	str	r2, [r4, #32]
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 801414e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
                search_ptr = tmp_ptr;
 8014152:	460c      	mov	r4, r1
                _nx_packet_release(search_ptr);
 8014154:	f7f2 fc4c 	bl	80069f0 <_nx_packet_release>
                continue;
 8014158:	9a01      	ldr	r2, [sp, #4]
 801415a:	e684      	b.n	8013e66 <_nx_tcp_socket_state_data_check+0xba>
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 801415c:	9a00      	ldr	r2, [sp, #0]
 801415e:	429a      	cmp	r2, r3
 8014160:	d161      	bne.n	8014226 <_nx_tcp_socket_state_data_check+0x47a>
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8014162:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8014164:	4628      	mov	r0, r5
 8014166:	f7f2 ffcf 	bl	8007108 <_nx_tcp_packet_send_ack>
 801416a:	e768      	b.n	801403e <_nx_tcp_socket_state_data_check+0x292>
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 801416c:	f8d5 60bc 	ldr.w	r6, [r5, #188]	; 0xbc
 8014170:	2e00      	cmp	r6, #0
 8014172:	f47f af72 	bne.w	801405a <_nx_tcp_socket_state_data_check+0x2ae>
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 8014176:	f8db 2004 	ldr.w	r2, [fp, #4]
 801417a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 801417c:	4293      	cmp	r3, r2
 801417e:	f43f af6c 	beq.w	801405a <_nx_tcp_socket_state_data_check+0x2ae>
            ((socket_ptr -> nx_tcp_socket_rx_sequence - 1) != tcp_header_ptr -> nx_tcp_sequence_number))
 8014182:	3b01      	subs	r3, #1
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 8014184:	429a      	cmp	r2, r3
 8014186:	f43f af68 	beq.w	801405a <_nx_tcp_socket_state_data_check+0x2ae>
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 801418a:	4628      	mov	r0, r5
 801418c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 801418e:	f7f2 ffbb 	bl	8007108 <_nx_tcp_packet_send_ack>
                return(NX_FALSE);
 8014192:	4630      	mov	r0, r6
 8014194:	e762      	b.n	801405c <_nx_tcp_socket_state_data_check+0x2b0>
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8014196:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8014198:	4628      	mov	r0, r5
 801419a:	f7f2 ffb5 	bl	8007108 <_nx_tcp_packet_send_ack>
 801419e:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 80141a2:	e65d      	b.n	8013e60 <_nx_tcp_socket_state_data_check+0xb4>
    packet_ptr -> nx_packet_length -= amount;
 80141a4:	eba2 020a 	sub.w	r2, r2, sl
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 80141a8:	f10b 0314 	add.w	r3, fp, #20
                work_ptr -> nx_packet_next = NX_NULL;
 80141ac:	9601      	str	r6, [sp, #4]
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 80141ae:	46d1      	mov	r9, sl
 80141b0:	4641      	mov	r1, r8
    packet_ptr -> nx_packet_length -= amount;
 80141b2:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 80141b6:	f8c8 3008 	str.w	r3, [r8, #8]
 80141ba:	e00f      	b.n	80141dc <_nx_tcp_socket_state_data_check+0x430>
                packet_ptr -> nx_packet_next = work_ptr -> nx_packet_next;
 80141bc:	684b      	ldr	r3, [r1, #4]
 80141be:	f8c8 3004 	str.w	r3, [r8, #4]
                work_ptr -> nx_packet_next = NX_NULL;
 80141c2:	9b01      	ldr	r3, [sp, #4]
 80141c4:	604b      	str	r3, [r1, #4]
                work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 80141c6:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80141ca:	620b      	str	r3, [r1, #32]
                _nx_packet_release(work_ptr);
 80141cc:	f7f2 fc10 	bl	80069f0 <_nx_packet_release>
    while (amount)
 80141d0:	ebb9 0906 	subs.w	r9, r9, r6
            work_ptr = packet_ptr -> nx_packet_next;
 80141d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    while (amount)
 80141d8:	d00f      	beq.n	80141fa <_nx_tcp_socket_state_data_check+0x44e>
 80141da:	688b      	ldr	r3, [r1, #8]
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 80141dc:	68ce      	ldr	r6, [r1, #12]
                _nx_packet_release(work_ptr);
 80141de:	4608      	mov	r0, r1
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 80141e0:	1af6      	subs	r6, r6, r3
        if (amount > work_length)
 80141e2:	454e      	cmp	r6, r9
 80141e4:	f080 8086 	bcs.w	80142f4 <_nx_tcp_socket_state_data_check+0x548>
            if (work_ptr == packet_ptr)
 80141e8:	4588      	cmp	r8, r1
 80141ea:	d1e7      	bne.n	80141bc <_nx_tcp_socket_state_data_check+0x410>
    while (amount)
 80141ec:	ebb9 0906 	subs.w	r9, r9, r6
                work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr;
 80141f0:	f8c8 300c 	str.w	r3, [r8, #12]
            work_ptr = packet_ptr -> nx_packet_next;
 80141f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    while (amount)
 80141f8:	d1ef      	bne.n	80141da <_nx_tcp_socket_state_data_check+0x42e>
    packet_ptr -> nx_packet_prepend_ptr -= sizeof(NX_TCP_HEADER);
 80141fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80141fe:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8014200:	f1a3 0114 	sub.w	r1, r3, #20
 8014204:	f8db 9004 	ldr.w	r9, [fp, #4]
 8014208:	4613      	mov	r3, r2
 801420a:	f8c8 1008 	str.w	r1, [r8, #8]
 801420e:	e730      	b.n	8014072 <_nx_tcp_socket_state_data_check+0x2c6>
            ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT) == 0))
 8014210:	f8db 300c 	ldr.w	r3, [fp, #12]
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 8014214:	03da      	lsls	r2, r3, #15
 8014216:	f53f af0f 	bmi.w	8014038 <_nx_tcp_socket_state_data_check+0x28c>
            if (socket_ptr -> nx_tcp_socket_ack_n_packet_counter >= NX_TCP_ACK_EVERY_N_PACKETS)
 801421a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801421c:	2b01      	cmp	r3, #1
 801421e:	d95f      	bls.n	80142e0 <_nx_tcp_socket_state_data_check+0x534>
                socket_ptr -> nx_tcp_socket_ack_n_packet_counter = 1;
 8014220:	2301      	movs	r3, #1
 8014222:	676b      	str	r3, [r5, #116]	; 0x74
 8014224:	e79d      	b.n	8014162 <_nx_tcp_socket_state_data_check+0x3b6>
        need_ack = NX_TRUE;
 8014226:	2401      	movs	r4, #1
 8014228:	e6fd      	b.n	8014026 <_nx_tcp_socket_state_data_check+0x27a>
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 801422a:	1a9b      	subs	r3, r3, r2
    while (work_ptr)
 801422c:	4661      	mov	r1, ip
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 801422e:	4418      	add	r0, r3
    while (work_ptr)
 8014230:	2900      	cmp	r1, #0
 8014232:	f47f af3b 	bne.w	80140ac <_nx_tcp_socket_state_data_check+0x300>
 8014236:	e74a      	b.n	80140ce <_nx_tcp_socket_state_data_check+0x322>
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 8014238:	428b      	cmp	r3, r1
 801423a:	f47f ae08 	bne.w	8013e4e <_nx_tcp_socket_state_data_check+0xa2>
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 801423e:	4b37      	ldr	r3, [pc, #220]	; (801431c <_nx_tcp_socket_state_data_check+0x570>)
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8014240:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8014244:	681b      	ldr	r3, [r3, #0]
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8014246:	f8c8 201c 	str.w	r2, [r8, #28]
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 801424a:	656b      	str	r3, [r5, #84]	; 0x54
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 801424c:	e9c5 8830 	strd	r8, r8, [r5, #192]	; 0xc0
 8014250:	e03a      	b.n	80142c8 <_nx_tcp_socket_state_data_check+0x51c>
 8014252:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 8014256:	e692      	b.n	8013f7e <_nx_tcp_socket_state_data_check+0x1d2>
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 8014258:	f04f 33ee 	mov.w	r3, #4008636142	; 0xeeeeeeee
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 801425c:	f8c5 80c4 	str.w	r8, [r5, #196]	; 0xc4
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 8014260:	f8c8 3020 	str.w	r3, [r8, #32]
 8014264:	e659      	b.n	8013f1a <_nx_tcp_socket_state_data_check+0x16e>
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 8014266:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
 801426a:	e651      	b.n	8013f10 <_nx_tcp_socket_state_data_check+0x164>
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 801426c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 801426e:	4628      	mov	r0, r5
 8014270:	f7f2 ff4a 	bl	8007108 <_nx_tcp_packet_send_ack>
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8014274:	4b29      	ldr	r3, [pc, #164]	; (801431c <_nx_tcp_socket_state_data_check+0x570>)
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8014276:	6cef      	ldr	r7, [r5, #76]	; 0x4c
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 8014278:	2201      	movs	r2, #1
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 801427a:	681b      	ldr	r3, [r3, #0]
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 801427c:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 8014280:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8014284:	656b      	str	r3, [r5, #84]	; 0x54
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8014286:	9b00      	ldr	r3, [sp, #0]
 8014288:	429f      	cmp	r7, r3
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 801428a:	e9c5 8830 	strd	r8, r8, [r5, #192]	; 0xc0
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 801428e:	f8c8 1020 	str.w	r1, [r8, #32]
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8014292:	f47f ae6d 	bne.w	8013f70 <_nx_tcp_socket_state_data_check+0x1c4>
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 8014296:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8014298:	e9d5 3120 	ldrd	r3, r1, [r5, #128]	; 0x80
 801429c:	1a5b      	subs	r3, r3, r1
 801429e:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 80142a2:	f4bf af5e 	bcs.w	8014162 <_nx_tcp_socket_state_data_check+0x3b6>
 80142a6:	e6ca      	b.n	801403e <_nx_tcp_socket_state_data_check+0x292>
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 80142a8:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
            _nx_packet_release(work_ptr);
 80142ac:	4660      	mov	r0, ip
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 80142ae:	f8cc 3020 	str.w	r3, [ip, #32]
            _nx_packet_release(work_ptr);
 80142b2:	f7f2 fb9d 	bl	80069f0 <_nx_packet_release>
 80142b6:	e70a      	b.n	80140ce <_nx_tcp_socket_state_data_check+0x322>
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 80142b8:	f04f 33bb 	mov.w	r3, #3149642683	; 0xbbbbbbbb
 80142bc:	f8c8 301c 	str.w	r3, [r8, #28]
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  packet_ptr;
 80142c0:	f8c0 8020 	str.w	r8, [r0, #32]
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 80142c4:	f8c5 80c4 	str.w	r8, [r5, #196]	; 0xc4
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 80142c8:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 80142cc:	f04f 33ee 	mov.w	r3, #4008636142	; 0xeeeeeeee
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 80142d0:	3401      	adds	r4, #1
 80142d2:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 80142d6:	4622      	mov	r2, r4
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 80142d8:	f8c8 3020 	str.w	r3, [r8, #32]
            socket_ptr -> nx_tcp_socket_rx_sequence =  packet_end_sequence;
 80142dc:	64ef      	str	r7, [r5, #76]	; 0x4c
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 80142de:	e643      	b.n	8013f68 <_nx_tcp_socket_state_data_check+0x1bc>
                socket_ptr -> nx_tcp_socket_ack_n_packet_counter++;
 80142e0:	3301      	adds	r3, #1
 80142e2:	676b      	str	r3, [r5, #116]	; 0x74
 80142e4:	e6a8      	b.n	8014038 <_nx_tcp_socket_state_data_check+0x28c>
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 80142e6:	1a9b      	subs	r3, r3, r2
    while (work_ptr)
 80142e8:	4631      	mov	r1, r6
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 80142ea:	441f      	add	r7, r3
    while (work_ptr)
 80142ec:	2e00      	cmp	r6, #0
 80142ee:	f47f adf7 	bne.w	8013ee0 <_nx_tcp_socket_state_data_check+0x134>
 80142f2:	e607      	b.n	8013f04 <_nx_tcp_socket_state_data_check+0x158>
            if (work_ptr == packet_ptr)
 80142f4:	4588      	cmp	r8, r1
 80142f6:	eb03 0009 	add.w	r0, r3, r9
 80142fa:	d001      	beq.n	8014300 <_nx_tcp_socket_state_data_check+0x554>
                work_ptr -> nx_packet_prepend_ptr += amount;
 80142fc:	6088      	str	r0, [r1, #8]
 80142fe:	e77c      	b.n	80141fa <_nx_tcp_socket_state_data_check+0x44e>
                memmove(packet_ptr -> nx_packet_prepend_ptr,
 8014300:	eba6 0209 	sub.w	r2, r6, r9
 8014304:	4601      	mov	r1, r0
 8014306:	4618      	mov	r0, r3
 8014308:	f00a f92e 	bl	801e568 <memmove>
                packet_ptr -> nx_packet_append_ptr -= amount;
 801430c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8014310:	eba2 0309 	sub.w	r3, r2, r9
 8014314:	f8c8 300c 	str.w	r3, [r8, #12]
 8014318:	e76f      	b.n	80141fa <_nx_tcp_socket_state_data_check+0x44e>
 801431a:	bf00      	nop
 801431c:	200078c0 	.word	0x200078c0

08014320 <_nx_tcp_socket_state_established>:
    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
#endif
    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8014320:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
 8014324:	b11b      	cbz	r3, 801432e <_nx_tcp_socket_state_established+0xe>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8014326:	6d83      	ldr	r3, [r0, #88]	; 0x58
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8014328:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801432a:	4293      	cmp	r3, r2
 801432c:	d000      	beq.n	8014330 <_nx_tcp_socket_state_established+0x10>
 801432e:	4770      	bx	lr
{
 8014330:	b510      	push	{r4, lr}

        /* The FIN bit is set, we need to go into the finished state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;

        /* Increment the received sequence.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8014332:	3301      	adds	r3, #1
 8014334:	4604      	mov	r4, r0
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 8014336:	2206      	movs	r2, #6

        /* Loop to release all threads suspended while trying to receive on the socket.  */
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8014338:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 801433c:	64e3      	str	r3, [r4, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 801433e:	6462      	str	r2, [r4, #68]	; 0x44
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8014340:	b130      	cbz	r0, 8014350 <_nx_tcp_socket_state_established+0x30>
        {

            /* Release the head of the receive suspension list. */
            _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 8014342:	2100      	movs	r1, #0
 8014344:	f7ff f898 	bl	8013478 <_nx_tcp_receive_cleanup>
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8014348:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801434c:	2800      	cmp	r0, #0
 801434e:	d1f8      	bne.n	8014342 <_nx_tcp_socket_state_established+0x22>
        }

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8014350:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014352:	4620      	mov	r0, r4
 8014354:	f7f2 fed8 	bl	8007108 <_nx_tcp_packet_send_ack>

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8014358:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 801435c:	b11b      	cbz	r3, 8014366 <_nx_tcp_socket_state_established+0x46>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 801435e:	4620      	mov	r0, r4
        }
    }
}
 8014360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8014364:	4718      	bx	r3
}
 8014366:	bd10      	pop	{r4, pc}

08014368 <_nx_tcp_socket_state_fin_wait1>:
{


    /* Determine if the peer has proper ACK number but FIN is not sent,
       move into the FIN WAIT 2 state and do nothing else.  */
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8014368:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 801436c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
{
 8014370:	b570      	push	{r4, r5, r6, lr}
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8014372:	b909      	cbnz	r1, 8014378 <_nx_tcp_socket_state_fin_wait1+0x10>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8014374:	bb32      	cbnz	r2, 80143c4 <_nx_tcp_socket_state_fin_wait1+0x5c>
        socket_ptr -> nx_tcp_socket_rx_sequence++;

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
    }
}
 8014376:	bd70      	pop	{r4, r5, r6, pc}
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8014378:	b1fa      	cbz	r2, 80143ba <_nx_tcp_socket_state_fin_wait1+0x52>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 801437a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 801437c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 801437e:	428a      	cmp	r2, r1
 8014380:	d1f9      	bne.n	8014376 <_nx_tcp_socket_state_fin_wait1+0xe>
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8014382:	4d17      	ldr	r5, [pc, #92]	; (80143e0 <_nx_tcp_socket_state_fin_wait1+0x78>)
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8014384:	230a      	movs	r3, #10
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8014386:	3201      	adds	r2, #1
 8014388:	4604      	mov	r4, r0
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 801438a:	682d      	ldr	r5, [r5, #0]
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 801438c:	6443      	str	r3, [r0, #68]	; 0x44
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 801438e:	6c81      	ldr	r1, [r0, #72]	; 0x48
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8014390:	64c2      	str	r2, [r0, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8014392:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8014396:	f7f2 feb7 	bl	8007108 <_nx_tcp_packet_send_ack>
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 801439a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 801439e:	b123      	cbz	r3, 80143aa <_nx_tcp_socket_state_fin_wait1+0x42>
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 80143a0:	2100      	movs	r1, #0
 80143a2:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80143a6:	f7f4 f96b 	bl	8008680 <_nx_tcp_socket_thread_resume>
        if (socket_ptr -> nx_tcp_disconnect_callback)
 80143aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d0e1      	beq.n	8014376 <_nx_tcp_socket_state_fin_wait1+0xe>
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 80143b2:	4620      	mov	r0, r4
}
 80143b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 80143b8:	4718      	bx	r3
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 80143ba:	2108      	movs	r1, #8
        socket_ptr -> nx_tcp_socket_timeout =  0;
 80143bc:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 80143c0:	6441      	str	r1, [r0, #68]	; 0x44
}
 80143c2:	bd70      	pop	{r4, r5, r6, pc}
 80143c4:	6d81      	ldr	r1, [r0, #88]	; 0x58
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 80143c6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80143c8:	428a      	cmp	r2, r1
 80143ca:	d1d4      	bne.n	8014376 <_nx_tcp_socket_state_fin_wait1+0xe>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 80143cc:	2409      	movs	r4, #9
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 80143ce:	3201      	adds	r2, #1
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 80143d0:	6c81      	ldr	r1, [r0, #72]	; 0x48
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 80143d2:	6444      	str	r4, [r0, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 80143d4:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 80143d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 80143da:	f7f2 be95 	b.w	8007108 <_nx_tcp_packet_send_ack>
 80143de:	bf00      	nop
 80143e0:	200078bc 	.word	0x200078bc

080143e4 <_nx_tcp_socket_state_fin_wait2>:
{


    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 80143e4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80143e8:	b132      	cbz	r2, 80143f8 <_nx_tcp_socket_state_fin_wait2+0x14>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 80143ea:	6d82      	ldr	r2, [r0, #88]	; 0x58
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 80143ec:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80143ee:	428a      	cmp	r2, r1
{
 80143f0:	b570      	push	{r4, r5, r6, lr}
 80143f2:	4604      	mov	r4, r0
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 80143f4:	d001      	beq.n	80143fa <_nx_tcp_socket_state_fin_wait2+0x16>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
}
 80143f6:	bd70      	pop	{r4, r5, r6, pc}
 80143f8:	4770      	bx	lr
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 80143fa:	4d0d      	ldr	r5, [pc, #52]	; (8014430 <_nx_tcp_socket_state_fin_wait2+0x4c>)
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 80143fc:	230a      	movs	r3, #10
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 80143fe:	3201      	adds	r2, #1
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8014400:	6c81      	ldr	r1, [r0, #72]	; 0x48
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8014402:	682d      	ldr	r5, [r5, #0]
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8014404:	6443      	str	r3, [r0, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8014406:	64c2      	str	r2, [r0, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8014408:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 801440c:	f7f2 fe7c 	bl	8007108 <_nx_tcp_packet_send_ack>
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8014410:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8014414:	b123      	cbz	r3, 8014420 <_nx_tcp_socket_state_fin_wait2+0x3c>
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8014416:	2100      	movs	r1, #0
 8014418:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 801441c:	f7f4 f930 	bl	8008680 <_nx_tcp_socket_thread_resume>
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8014420:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8014424:	2b00      	cmp	r3, #0
 8014426:	d0e6      	beq.n	80143f6 <_nx_tcp_socket_state_fin_wait2+0x12>
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8014428:	4620      	mov	r0, r4
}
 801442a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 801442e:	4718      	bx	r3
 8014430:	200078bc 	.word	0x200078bc

08014434 <_nx_tcp_socket_state_last_ack>:
/**************************************************************************/
VOID  _nx_tcp_socket_state_last_ack(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{

    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8014434:	68cb      	ldr	r3, [r1, #12]
 8014436:	02db      	lsls	r3, r3, #11
 8014438:	d517      	bpl.n	801446a <_nx_tcp_socket_state_last_ack+0x36>
    {

        /*   If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 801443a:	688a      	ldr	r2, [r1, #8]
 801443c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801443e:	429a      	cmp	r2, r3
{
 8014440:	b510      	push	{r4, lr}
 8014442:	4604      	mov	r4, r0
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8014444:	d000      	beq.n	8014448 <_nx_tcp_socket_state_last_ack+0x14>
                (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
            }
#endif
        }
    }
}
 8014446:	bd10      	pop	{r4, pc}
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8014448:	6849      	ldr	r1, [r1, #4]
 801444a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801444c:	4299      	cmp	r1, r3
 801444e:	d1fa      	bne.n	8014446 <_nx_tcp_socket_state_last_ack+0x12>
            _nx_tcp_socket_block_cleanup(socket_ptr);
 8014450:	f7f3 f998 	bl	8007784 <_nx_tcp_socket_block_cleanup>
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8014454:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8014458:	2b00      	cmp	r3, #0
 801445a:	d0f4      	beq.n	8014446 <_nx_tcp_socket_state_last_ack+0x12>
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 801445c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8014460:	2100      	movs	r1, #0
}
 8014462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8014466:	f7f4 b90b 	b.w	8008680 <_nx_tcp_socket_thread_resume>
 801446a:	4770      	bx	lr

0801446c <_nx_tcp_socket_state_syn_received>:
{


    /* Determine if the incoming message is an ACK message.  If it is and
       if it is proper, move into the ESTABLISHED state.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 801446c:	68ca      	ldr	r2, [r1, #12]
 801446e:	02d3      	lsls	r3, r2, #11
 8014470:	d528      	bpl.n	80144c4 <_nx_tcp_socket_state_syn_received+0x58>
 8014472:	4603      	mov	r3, r0
{
 8014474:	b430      	push	{r4, r5}
    {

        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence)
 8014476:	688d      	ldr	r5, [r1, #8]
 8014478:	6c84      	ldr	r4, [r0, #72]	; 0x48
 801447a:	42a5      	cmp	r5, r4
 801447c:	d11f      	bne.n	80144be <_nx_tcp_socket_state_syn_received+0x52>
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Save the window size.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
                tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 801447e:	b292      	uxth	r2, r2
            /* Set the initial slow start threshold to be the advertised window size. */
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;

            /* Set the initial congestion control window size. */
            /* Section 3.1, Page 5, RFC5681. */
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 8014480:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8014484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
 8014486:	661a      	str	r2, [r3, #96]	; 0x60
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8014488:	641a      	str	r2, [r3, #64]	; 0x40
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 801448a:	b9e0      	cbnz	r0, 80144c6 <_nx_tcp_socket_state_syn_received+0x5a>
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
            }
            else
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 801448c:	f5b1 6f89 	cmp.w	r1, #1096	; 0x448
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8014490:	ea4f 0281 	mov.w	r2, r1, lsl #2
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8014494:	d305      	bcc.n	80144a2 <_nx_tcp_socket_state_syn_received+0x36>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
                }
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 8014496:	f640 008e 	movw	r0, #2190	; 0x88e
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 801449a:	1a52      	subs	r2, r2, r1
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 801449c:	4281      	cmp	r1, r0
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 801449e:	bf88      	it	hi
 80144a0:	1a52      	subhi	r2, r2, r1
 80144a2:	665a      	str	r2, [r3, #100]	; 0x64
                }
            }

            /* Move into the ESTABLISHED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 80144a4:	2005      	movs	r0, #5
                socket_ptr -> nx_tcp_socket_keepalive_timeout =  NX_TCP_KEEPALIVE_INITIAL;
                socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
            }
#endif
            /* Update the value of nx_tcp_socket_rx_sequence_acked */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 80144a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 80144a8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 80144ac:	6458      	str	r0, [r3, #68]	; 0x44
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 80144ae:	6519      	str	r1, [r3, #80]	; 0x50
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 80144b0:	b15a      	cbz	r2, 80144ca <_nx_tcp_socket_state_syn_received+0x5e>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 80144b2:	f503 7084 	add.w	r0, r3, #264	; 0x108
 80144b6:	2100      	movs	r1, #0

            /* Send the RST packet.  */
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
        }
    }
}
 80144b8:	bc30      	pop	{r4, r5}
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 80144ba:	f7f4 b8e1 	b.w	8008680 <_nx_tcp_socket_thread_resume>
}
 80144be:	bc30      	pop	{r4, r5}
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 80144c0:	f7fe bfbc 	b.w	801343c <_nx_tcp_packet_send_rst>
 80144c4:	4770      	bx	lr
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 80144c6:	6659      	str	r1, [r3, #100]	; 0x64
 80144c8:	e7ec      	b.n	80144a4 <_nx_tcp_socket_state_syn_received+0x38>
}
 80144ca:	bc30      	pop	{r4, r5}
 80144cc:	4770      	bx	lr
 80144ce:	bf00      	nop

080144d0 <_nx_tcp_socket_state_syn_sent>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_sent(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr, NX_PACKET *packet_ptr)
{
 80144d0:	b538      	push	{r3, r4, r5, lr}
#ifndef TX_ENABLE_EVENT_TRACE
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Check if a RST is present. */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 80144d2:	68cb      	ldr	r3, [r1, #12]
{
 80144d4:	4602      	mov	r2, r0
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 80144d6:	f413 2480 	ands.w	r4, r3, #262144	; 0x40000
 80144da:	d006      	beq.n	80144ea <_nx_tcp_socket_state_syn_sent+0x1a>
    {

        /* Check if the ACK was acceptable. According to RFC 793, Section 3.9, Page 67.  */
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 80144dc:	02dc      	lsls	r4, r3, #11
 80144de:	d503      	bpl.n	80144e8 <_nx_tcp_socket_state_syn_sent+0x18>
 80144e0:	6889      	ldr	r1, [r1, #8]
 80144e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80144e4:	4299      	cmp	r1, r3
 80144e6:	d03a      	beq.n	801455e <_nx_tcp_socket_state_syn_sent+0x8e>
           the other side to clear any previous connection.  */

        /* Send the RST packet.  */
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
    }
}
 80144e8:	bd38      	pop	{r3, r4, r5, pc}
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 80144ea:	f403 1090 	and.w	r0, r3, #1179648	; 0x120000
 80144ee:	f5b0 1f90 	cmp.w	r0, #1179648	; 0x120000
 80144f2:	d009      	beq.n	8014508 <_nx_tcp_socket_state_syn_sent+0x38>
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 80144f4:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 80144f8:	d011      	beq.n	801451e <_nx_tcp_socket_state_syn_sent+0x4e>
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 80144fa:	02d8      	lsls	r0, r3, #11
 80144fc:	d5f4      	bpl.n	80144e8 <_nx_tcp_socket_state_syn_sent+0x18>
 80144fe:	6888      	ldr	r0, [r1, #8]
 8014500:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014502:	4298      	cmp	r0, r3
 8014504:	d106      	bne.n	8014514 <_nx_tcp_socket_state_syn_sent+0x44>
}
 8014506:	bd38      	pop	{r3, r4, r5, pc}
             (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 8014508:	6c90      	ldr	r0, [r2, #72]	; 0x48
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 801450a:	688d      	ldr	r5, [r1, #8]
 801450c:	4285      	cmp	r5, r0
 801450e:	d02c      	beq.n	801456a <_nx_tcp_socket_state_syn_sent+0x9a>
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 8014510:	02db      	lsls	r3, r3, #11
 8014512:	d5e9      	bpl.n	80144e8 <_nx_tcp_socket_state_syn_sent+0x18>
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 8014514:	4610      	mov	r0, r2
}
 8014516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 801451a:	f7fe bf8f 	b.w	801343c <_nx_tcp_packet_send_rst>
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 801451e:	6848      	ldr	r0, [r1, #4]
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8014520:	b29b      	uxth	r3, r3
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8014522:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 8014524:	3001      	adds	r0, #1
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8014526:	6613      	str	r3, [r2, #96]	; 0x60
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8014528:	f5b1 6f89 	cmp.w	r1, #1096	; 0x448
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 801452c:	6413      	str	r3, [r2, #64]	; 0x40
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 801452e:	64d0      	str	r0, [r2, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8014530:	ea4f 0381 	mov.w	r3, r1, lsl #2
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8014534:	d317      	bcc.n	8014566 <_nx_tcp_socket_state_syn_sent+0x96>
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 8014536:	f640 008e 	movw	r0, #2190	; 0x88e
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 801453a:	1a5b      	subs	r3, r3, r1
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 801453c:	4281      	cmp	r1, r0
 801453e:	d912      	bls.n	8014566 <_nx_tcp_socket_state_syn_sent+0x96>
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8014540:	1a59      	subs	r1, r3, r1
 8014542:	6651      	str	r1, [r2, #100]	; 0x64
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8014544:	2300      	movs	r3, #0
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 8014546:	2404      	movs	r4, #4
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8014548:	6c91      	ldr	r1, [r2, #72]	; 0x48
 801454a:	4610      	mov	r0, r2
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 801454c:	6693      	str	r3, [r2, #104]	; 0x68
        socket_ptr -> nx_tcp_socket_timeout =  0;
 801454e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8014552:	3901      	subs	r1, #1
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 8014554:	6454      	str	r4, [r2, #68]	; 0x44
}
 8014556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 801455a:	f7f2 bee1 	b.w	8007320 <_nx_tcp_packet_send_syn>
}
 801455e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            _nx_tcp_socket_connection_reset(socket_ptr);
 8014562:	f7f3 b925 	b.w	80077b0 <_nx_tcp_socket_connection_reset>
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8014566:	6653      	str	r3, [r2, #100]	; 0x64
 8014568:	e7ec      	b.n	8014544 <_nx_tcp_socket_state_syn_sent+0x74>
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 801456a:	6849      	ldr	r1, [r1, #4]
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 801456c:	b29b      	uxth	r3, r3
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 801456e:	f8d2 50e0 	ldr.w	r5, [r2, #224]	; 0xe0
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 8014572:	3101      	adds	r1, #1
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8014574:	6613      	str	r3, [r2, #96]	; 0x60
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8014576:	6413      	str	r3, [r2, #64]	; 0x40
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 8014578:	64d1      	str	r1, [r2, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 801457a:	6694      	str	r4, [r2, #104]	; 0x68
 801457c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 801457e:	b9fd      	cbnz	r5, 80145c0 <_nx_tcp_socket_state_syn_sent+0xf0>
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8014580:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
            socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8014584:	ea4f 0183 	mov.w	r1, r3, lsl #2
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8014588:	d305      	bcc.n	8014596 <_nx_tcp_socket_state_syn_sent+0xc6>
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 801458a:	f640 048e 	movw	r4, #2190	; 0x88e
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 801458e:	1ac9      	subs	r1, r1, r3
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 8014590:	42a3      	cmp	r3, r4
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8014592:	bf88      	it	hi
 8014594:	1ac9      	subhi	r1, r1, r3
 8014596:	6651      	str	r1, [r2, #100]	; 0x64
 8014598:	4614      	mov	r4, r2
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 801459a:	4601      	mov	r1, r0
 801459c:	4610      	mov	r0, r2
 801459e:	f7f2 fdb3 	bl	8007108 <_nx_tcp_packet_send_ack>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 80145a2:	2205      	movs	r2, #5
        socket_ptr -> nx_tcp_socket_timeout =  0;
 80145a4:	2100      	movs	r1, #0
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 80145a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 80145aa:	6462      	str	r2, [r4, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_timeout =  0;
 80145ac:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d099      	beq.n	80144e8 <_nx_tcp_socket_state_syn_sent+0x18>
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 80145b4:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
 80145b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 80145bc:	f7f4 b860 	b.w	8008680 <_nx_tcp_socket_thread_resume>
            socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 80145c0:	6653      	str	r3, [r2, #100]	; 0x64
 80145c2:	e7e9      	b.n	8014598 <_nx_tcp_socket_state_syn_sent+0xc8>

080145c4 <_nx_tcp_socket_state_transmit_check>:
{

ULONG tx_window_current;

    /* Now check to see if there is a thread suspended attempting to transmit.  */
    if (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 80145c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80145c8:	b333      	cbz	r3, 8014618 <_nx_tcp_socket_state_transmit_check+0x54>
        /* Yes, a thread is suspended attempting to transmit when the transmit window
           is lower than its request size.  Determine if the current transmit window
           size can now accommodate the request.  */

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 80145ca:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
 80145ce:	4293      	cmp	r3, r2
 80145d0:	d909      	bls.n	80145e6 <_nx_tcp_socket_state_transmit_check+0x22>
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 80145d2:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80145d4:	3901      	subs	r1, #1
 80145d6:	2901      	cmp	r1, #1
 80145d8:	d802      	bhi.n	80145e0 <_nx_tcp_socket_state_transmit_check+0x1c>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 80145da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80145dc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80145e0:	4293      	cmp	r3, r2
 80145e2:	bf28      	it	cs
 80145e4:	4613      	movcs	r3, r2
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 80145e6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d215      	bcs.n	8014618 <_nx_tcp_socket_state_transmit_check+0x54>
        }


        /* Determine if the current transmit window (received from the connected socket)
           is large enough to handle the transmit.  */
        if ((tx_window_current) &&
 80145ec:	e9d0 3232 	ldrd	r3, r2, [r0, #200]	; 0xc8
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d211      	bcs.n	8014618 <_nx_tcp_socket_state_transmit_check+0x54>
            (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
        {

            /* Is NetX set up with a windows update callback? */
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 80145f4:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
{
 80145f8:	b510      	push	{r4, lr}
 80145fa:	4604      	mov	r4, r0
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 80145fc:	b103      	cbz	r3, 8014600 <_nx_tcp_socket_state_transmit_check+0x3c>
            {

                /* Yes; Call this function when there is a change in transmit windows size. */
                (socket_ptr -> nx_tcp_socket_window_update_notify)(socket_ptr);
 80145fe:	4798      	blx	r3
            }


            /* Decrement the suspension count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 8014600:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104

            /* Remove the suspended thread from the list.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 8014604:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8014608:	2100      	movs	r1, #0
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 801460a:	3b01      	subs	r3, #1
 801460c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        }
    }
}
 8014610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 8014614:	f7f4 b834 	b.w	8008680 <_nx_tcp_socket_thread_resume>
 8014618:	4770      	bx	lr
 801461a:	bf00      	nop

0801461c <_nx_tcp_socket_transmit_configure>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_transmit_configure(NX_TCP_SOCKET *socket_ptr, ULONG max_queue_depth,
                                        ULONG timeout, ULONG max_retries, ULONG timeout_shift)
{
 801461c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_TRANSMIT_CONFIGURE, ip_ptr, socket_ptr, max_queue_depth, timeout, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can initiate accept processing for this socket.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014620:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
{
 8014624:	4604      	mov	r4, r0
 8014626:	460f      	mov	r7, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014628:	f04f 31ff 	mov.w	r1, #4294967295
 801462c:	f205 653c 	addw	r5, r5, #1596	; 0x63c
{
 8014630:	4691      	mov	r9, r2
 8014632:	461e      	mov	r6, r3
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014634:	4628      	mov	r0, r5
 8014636:	f008 fa5f 	bl	801caf8 <_tx_mutex_get>

    /* Setup the socket with the new transmit parameters.  */
    socket_ptr -> nx_tcp_socket_timeout_rate =                    timeout;
    socket_ptr -> nx_tcp_socket_timeout_max_retries =             max_retries;
    socket_ptr -> nx_tcp_socket_timeout_shift =                   timeout_shift;
 801463a:	9b06      	ldr	r3, [sp, #24]
    socket_ptr -> nx_tcp_socket_timeout_rate =                    timeout;
 801463c:	f8c4 90dc 	str.w	r9, [r4, #220]	; 0xdc
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum_default =  max_queue_depth;
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum =          max_queue_depth;

    /* Release the IP protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014640:	4628      	mov	r0, r5
    socket_ptr -> nx_tcp_socket_timeout_max_retries =             max_retries;
 8014642:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    socket_ptr -> nx_tcp_socket_timeout_shift =                   timeout_shift;
 8014646:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum_default =  max_queue_depth;
 801464a:	f8c4 7134 	str.w	r7, [r4, #308]	; 0x134
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum =          max_queue_depth;
 801464e:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014652:	f008 fb3b 	bl	801cccc <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
}
 8014656:	2000      	movs	r0, #0
 8014658:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

0801465c <_nx_udp_bind_cleanup>:
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 801465c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801465e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014662:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8014664:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8014666:	b14a      	cbz	r2, 801467c <_nx_udp_bind_cleanup+0x20>
 8014668:	b143      	cbz	r3, 801467c <_nx_udp_bind_cleanup+0x20>
 801466a:	4a16      	ldr	r2, [pc, #88]	; (80146c4 <_nx_udp_bind_cleanup+0x68>)
{
 801466c:	b430      	push	{r4, r5}
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 801466e:	681c      	ldr	r4, [r3, #0]
 8014670:	4294      	cmp	r4, r2
 8014672:	d006      	beq.n	8014682 <_nx_udp_bind_cleanup+0x26>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014674:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8014678:	bc30      	pop	{r4, r5}
 801467a:	4770      	bx	lr
 801467c:	f381 8810 	msr	PRIMASK, r1
 8014680:	4770      	bx	lr
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8014682:	6f02      	ldr	r2, [r0, #112]	; 0x70
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 8014684:	2500      	movs	r5, #0
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 8014686:	6d1c      	ldr	r4, [r3, #80]	; 0x50
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8014688:	4282      	cmp	r2, r0
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 801468a:	655d      	str	r5, [r3, #84]	; 0x54
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801468c:	6685      	str	r5, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801468e:	d016      	beq.n	80146be <_nx_udp_bind_cleanup+0x62>
                thread_ptr -> tx_thread_suspended_previous;
 8014690:	6f43      	ldr	r3, [r0, #116]	; 0x74
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8014692:	6622      	str	r2, [r4, #96]	; 0x60
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8014694:	6753      	str	r3, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8014696:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8014698:	671a      	str	r2, [r3, #112]	; 0x70
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 801469a:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 801469c:	6b02      	ldr	r2, [r0, #48]	; 0x30
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 801469e:	3b01      	subs	r3, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80146a0:	2a0c      	cmp	r2, #12
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 80146a2:	6663      	str	r3, [r4, #100]	; 0x64
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80146a4:	d1e6      	bne.n	8014674 <_nx_udp_bind_cleanup+0x18>
            _tx_thread_preempt_disable++;
 80146a6:	4a08      	ldr	r2, [pc, #32]	; (80146c8 <_nx_udp_bind_cleanup+0x6c>)
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 80146a8:	2423      	movs	r4, #35	; 0x23
            _tx_thread_preempt_disable++;
 80146aa:	6813      	ldr	r3, [r2, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 80146ac:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 80146b0:	3301      	adds	r3, #1
 80146b2:	6013      	str	r3, [r2, #0]
 80146b4:	f381 8810 	msr	PRIMASK, r1
}
 80146b8:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 80146ba:	f008 bdf9 	b.w	801d2b0 <_tx_thread_system_resume>
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 80146be:	6625      	str	r5, [r4, #96]	; 0x60
 80146c0:	e7eb      	b.n	801469a <_nx_udp_bind_cleanup+0x3e>
 80146c2:	bf00      	nop
 80146c4:	55445020 	.word	0x55445020
 80146c8:	20007a7c 	.word	0x20007a7c

080146cc <_nx_udp_free_port_find>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 80146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	4606      	mov	r6, r0
 80146d2:	460f      	mov	r7, r1
 80146d4:	4690      	mov	r8, r2
 80146d6:	f200 653c 	addw	r5, r0, #1596	; 0x63c
        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 80146da:	460c      	mov	r4, r1
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80146dc:	f04f 31ff 	mov.w	r1, #4294967295
 80146e0:	4628      	mov	r0, r5
 80146e2:	f008 fa09 	bl	801caf8 <_tx_mutex_get>
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 80146e6:	eb04 2314 	add.w	r3, r4, r4, lsr #8
 80146ea:	f003 031f 	and.w	r3, r3, #31
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80146ee:	f203 232a 	addw	r3, r3, #554	; 0x22a
 80146f2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
        if (search_ptr)
 80146f6:	b1a1      	cbz	r1, 8014722 <_nx_udp_free_port_find+0x56>
 80146f8:	460b      	mov	r3, r1
 80146fa:	e002      	b.n	8014702 <_nx_udp_free_port_find+0x36>
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 80146fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            } while (search_ptr != end_ptr);
 80146fe:	4299      	cmp	r1, r3
 8014700:	d00f      	beq.n	8014722 <_nx_udp_free_port_find+0x56>
                if (search_ptr -> nx_udp_socket_port == port)
 8014702:	689a      	ldr	r2, [r3, #8]
 8014704:	42a2      	cmp	r2, r4
 8014706:	d1f9      	bne.n	80146fc <_nx_udp_free_port_find+0x30>
        port++;
 8014708:	3401      	adds	r4, #1
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801470a:	4628      	mov	r0, r5
 801470c:	f008 fade 	bl	801cccc <_tx_mutex_put>
        if (port > NX_MAX_PORT)
 8014710:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8014714:	d30d      	bcc.n	8014732 <_nx_udp_free_port_find+0x66>
        }
    } while (starting_port != port);
 8014716:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 801471a:	d00c      	beq.n	8014736 <_nx_udp_free_port_find+0x6a>
            port =  NX_SEARCH_PORT_START;
 801471c:	f44f 4440 	mov.w	r4, #49152	; 0xc000
 8014720:	e7dc      	b.n	80146dc <_nx_udp_free_port_find+0x10>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014722:	4628      	mov	r0, r5
 8014724:	f008 fad2 	bl	801cccc <_tx_mutex_put>
            *free_port_ptr =  port;
 8014728:	f8c8 4000 	str.w	r4, [r8]
            return(NX_SUCCESS);
 801472c:	2000      	movs	r0, #0

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
}
 801472e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } while (starting_port != port);
 8014732:	42a7      	cmp	r7, r4
 8014734:	d1d2      	bne.n	80146dc <_nx_udp_free_port_find+0x10>
    return(NX_NO_FREE_PORTS);
 8014736:	2045      	movs	r0, #69	; 0x45
}
 8014738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801473c <_nx_udp_packet_info_extract>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_packet_info_extract(NX_PACKET *packet_ptr, ULONG *ip_address,
                                  UINT *protocol, UINT *port, UINT *interface_index)
{
 801473c:	b530      	push	{r4, r5, lr}
 801473e:	b089      	sub	sp, #36	; 0x24
 8014740:	460d      	mov	r5, r1
 8014742:	9c0c      	ldr	r4, [sp, #48]	; 0x30
NXD_ADDRESS nxd_ip_address;
UINT        status;


    /* Call the NXD version of the service. */
    status = _nxd_udp_packet_info_extract(packet_ptr, &nxd_ip_address, protocol, port, interface_index);
 8014744:	a903      	add	r1, sp, #12
 8014746:	9400      	str	r4, [sp, #0]
 8014748:	f000 ff74 	bl	8015634 <_nxd_udp_packet_info_extract>

    if (status == NX_SUCCESS)
 801474c:	b928      	cbnz	r0, 801475a <_nx_udp_packet_info_extract+0x1e>
    {
        if (ip_address)
 801474e:	b125      	cbz	r5, 801475a <_nx_udp_packet_info_extract+0x1e>
        {

            /*lint -e{644} suppress variable might not be initialized, since "nxd_ip_address" was initialized in _nxd_udp_packet_info_extract. */
            if (nxd_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 8014750:	9b03      	ldr	r3, [sp, #12]
 8014752:	2b04      	cmp	r3, #4
 8014754:	d103      	bne.n	801475e <_nx_udp_packet_info_extract+0x22>
            {
                *ip_address = nxd_ip_address.nxd_ip_address.v4;
 8014756:	9b04      	ldr	r3, [sp, #16]
 8014758:	602b      	str	r3, [r5, #0]
    NX_PARAMETER_NOT_USED(port);
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 801475a:	b009      	add	sp, #36	; 0x24
 801475c:	bd30      	pop	{r4, r5, pc}
                return(NX_INVALID_PACKET);
 801475e:	2012      	movs	r0, #18
}
 8014760:	b009      	add	sp, #36	; 0x24
 8014762:	bd30      	pop	{r4, r5, pc}

08014764 <_nx_udp_receive_cleanup>:
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8014764:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014766:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801476a:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 801476c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 801476e:	b152      	cbz	r2, 8014786 <_nx_udp_receive_cleanup+0x22>
 8014770:	b14b      	cbz	r3, 8014786 <_nx_udp_receive_cleanup+0x22>
 8014772:	4a16      	ldr	r2, [pc, #88]	; (80147cc <_nx_udp_receive_cleanup+0x68>)
{
 8014774:	b410      	push	{r4}
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8014776:	681c      	ldr	r4, [r3, #0]
 8014778:	4294      	cmp	r4, r2
 801477a:	d007      	beq.n	801478c <_nx_udp_receive_cleanup+0x28>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801477c:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8014780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014784:	4770      	bx	lr
 8014786:	f381 8810 	msr	PRIMASK, r1
 801478a:	4770      	bx	lr
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801478c:	6f02      	ldr	r2, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801478e:	2400      	movs	r4, #0
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8014790:	4282      	cmp	r2, r0
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014792:	6684      	str	r4, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8014794:	d017      	beq.n	80147c6 <_nx_udp_receive_cleanup+0x62>
                thread_ptr -> tx_thread_suspended_previous;
 8014796:	6f44      	ldr	r4, [r0, #116]	; 0x74
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8014798:	659a      	str	r2, [r3, #88]	; 0x58
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 801479a:	6754      	str	r4, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 801479c:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801479e:	6722      	str	r2, [r4, #112]	; 0x70
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 80147a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80147a2:	6b04      	ldr	r4, [r0, #48]	; 0x30
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 80147a4:	3a01      	subs	r2, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80147a6:	2c0c      	cmp	r4, #12
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 80147a8:	65da      	str	r2, [r3, #92]	; 0x5c
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80147aa:	d1e7      	bne.n	801477c <_nx_udp_receive_cleanup+0x18>
            _tx_thread_preempt_disable++;
 80147ac:	4a08      	ldr	r2, [pc, #32]	; (80147d0 <_nx_udp_receive_cleanup+0x6c>)
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 80147ae:	2401      	movs	r4, #1
            _tx_thread_preempt_disable++;
 80147b0:	6813      	ldr	r3, [r2, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 80147b2:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 80147b6:	4423      	add	r3, r4
 80147b8:	6013      	str	r3, [r2, #0]
 80147ba:	f381 8810 	msr	PRIMASK, r1
}
 80147be:	f85d 4b04 	ldr.w	r4, [sp], #4
            _tx_thread_system_resume(thread_ptr);
 80147c2:	f008 bd75 	b.w	801d2b0 <_tx_thread_system_resume>
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 80147c6:	659c      	str	r4, [r3, #88]	; 0x58
 80147c8:	e7ea      	b.n	80147a0 <_nx_udp_receive_cleanup+0x3c>
 80147ca:	bf00      	nop
 80147cc:	55445020 	.word	0x55445020
 80147d0:	20007a7c 	.word	0x20007a7c

080147d4 <_nx_udp_socket_receive_notify>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80147d4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80147d8:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =  udp_receive_notify;
 80147da:	6701      	str	r1, [r0, #112]	; 0x70
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80147dc:	f383 8810 	msr	PRIMASK, r3
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE_NOTIFY, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, udp_receive_notify, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 80147e0:	2000      	movs	r0, #0
 80147e2:	4770      	bx	lr

080147e4 <_nx_udp_socket_source_send>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_source_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                                 ULONG ip_address, UINT port, UINT address_index)
{
 80147e4:	b430      	push	{r4, r5}
 80147e6:	9c02      	ldr	r4, [sp, #8]

    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;

    /* Store interface information into the packet structure. */
    packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[address_index]);
 80147e8:	68c5      	ldr	r5, [r0, #12]
 80147ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80147ee:	0124      	lsls	r4, r4, #4
 80147f0:	f604 4448 	addw	r4, r4, #3144	; 0xc48
 80147f4:	442c      	add	r4, r5
 80147f6:	634c      	str	r4, [r1, #52]	; 0x34

    /* Call udp_socket_send service */
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);

    return(status);
}
 80147f8:	bc30      	pop	{r4, r5}
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 80147fa:	f001 ba41 	b.w	8015c80 <_nx_udp_socket_send>
 80147fe:	bf00      	nop

08014800 <_nx_utility_string_length_check>:

UINT    i;


    /* Check for invalid input pointers.  */
    if (input_string == NX_NULL)
 8014800:	b1b0      	cbz	r0, 8014830 <_nx_utility_string_length_check+0x30>
    {
        return(NX_PTR_ERROR);
    }

    /* Traverse the string.  */
    for (i = 0; input_string[i]; i++)
 8014802:	7803      	ldrb	r3, [r0, #0]
 8014804:	b1e3      	cbz	r3, 8014840 <_nx_utility_string_length_check+0x40>
    {

        /* Check if the string length is bigger than the max string length.  */
        if (i >= max_string_length)
 8014806:	b1ca      	cbz	r2, 801483c <_nx_utility_string_length_check+0x3c>
    for (i = 0; input_string[i]; i++)
 8014808:	2300      	movs	r3, #0
{
 801480a:	b410      	push	{r4}
 801480c:	e001      	b.n	8014812 <_nx_utility_string_length_check+0x12>
        if (i >= max_string_length)
 801480e:	429a      	cmp	r2, r3
 8014810:	d00a      	beq.n	8014828 <_nx_utility_string_length_check+0x28>
    for (i = 0; input_string[i]; i++)
 8014812:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8014816:	3301      	adds	r3, #1
 8014818:	2c00      	cmp	r4, #0
 801481a:	d1f8      	bne.n	801480e <_nx_utility_string_length_check+0xe>
    }

    /* Return the string length if string_length is not NULL.
       String_length being NULL indicates the caller needs to check for string 
       length within the max_string_length. */
    if (string_length)
 801481c:	b151      	cbz	r1, 8014834 <_nx_utility_string_length_check+0x34>
    {
        *string_length = i;
    }

    /* Return success.  */
    return(NX_SUCCESS);
 801481e:	2000      	movs	r0, #0
        *string_length = i;
 8014820:	600b      	str	r3, [r1, #0]
}
 8014822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014826:	4770      	bx	lr
            return(NX_SIZE_ERROR);
 8014828:	2009      	movs	r0, #9
}
 801482a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801482e:	4770      	bx	lr
        return(NX_PTR_ERROR);
 8014830:	2007      	movs	r0, #7
 8014832:	4770      	bx	lr
    return(NX_SUCCESS);
 8014834:	4608      	mov	r0, r1
}
 8014836:	f85d 4b04 	ldr.w	r4, [sp], #4
 801483a:	4770      	bx	lr
            return(NX_SIZE_ERROR);
 801483c:	2009      	movs	r0, #9
 801483e:	4770      	bx	lr
    if (string_length)
 8014840:	b101      	cbz	r1, 8014844 <_nx_utility_string_length_check+0x44>
        *string_length = i;
 8014842:	600b      	str	r3, [r1, #0]
    return(NX_SUCCESS);
 8014844:	2000      	movs	r0, #0
 8014846:	4770      	bx	lr

08014848 <_nxd_ipv6_default_router_add_internal>:
                                            ULONG *router_addr,
                                            ULONG router_lifetime,
                                            NX_INTERFACE *if_ptr,
                                            INT router_type,
                                            NX_IPV6_DEFAULT_ROUTER_ENTRY **_ret)
{
 8014848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801484c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801484e:	4605      	mov	r5, r0
 8014850:	4689      	mov	r9, r1
 8014852:	4690      	mov	r8, r2
 8014854:	461f      	mov	r7, r3
NX_IPV6_DEFAULT_ROUTER_ENTRY *ret = NX_NULL;
NXD_IPV6_ADDRESS             *ipv6_address;


    /* If a router pointer is provided, initialize it to NULL. */
    if (_ret)
 8014856:	b10e      	cbz	r6, 801485c <_nxd_ipv6_default_router_add_internal+0x14>
    {
        *_ret = NX_NULL;
 8014858:	2300      	movs	r3, #0
 801485a:	6033      	str	r3, [r6, #0]
    }

    /* Verify gateway address is reachable. */
    address_type = IPv6_Address_Type(router_addr);
 801485c:	4648      	mov	r0, r9
 801485e:	f7f1 fe81 	bl	8006564 <IPv6_Address_Type>
    if (address_type & IPV6_ADDRESS_UNICAST)
 8014862:	2800      	cmp	r0, #0
 8014864:	da67      	bge.n	8014936 <_nxd_ipv6_default_router_add_internal+0xee>
    {

        /* It is a unicast address. */
        if (address_type & IPV6_ADDRESS_GLOBAL)
 8014866:	0741      	lsls	r1, r0, #29
 8014868:	d50e      	bpl.n	8014888 <_nxd_ipv6_default_router_add_internal+0x40>
        {

            /* It is a global address. */
            /* Point to the first address unit in the interface. */
            ipv6_address = if_ptr -> nxd_interface_ipv6_address_list_head;
 801486a:	6a3c      	ldr	r4, [r7, #32]
            while (ipv6_address)
 801486c:	b91c      	cbnz	r4, 8014876 <_nxd_ipv6_default_router_add_internal+0x2e>
 801486e:	e062      	b.n	8014936 <_nxd_ipv6_default_router_add_internal+0xee>
                    /* Router address is on link. */
                    break;
                }

                /* Point to the next address unit. */
                ipv6_address = ipv6_address -> nxd_ipv6_address_next;
 8014870:	69a4      	ldr	r4, [r4, #24]
            while (ipv6_address)
 8014872:	2c00      	cmp	r4, #0
 8014874:	d05f      	beq.n	8014936 <_nxd_ipv6_default_router_add_internal+0xee>
                if (_nxd_ipv6_find_max_prefix_length(router_addr, ipv6_address -> nxd_ipv6_address,
 8014876:	78e2      	ldrb	r2, [r4, #3]
 8014878:	f104 0108 	add.w	r1, r4, #8
 801487c:	4648      	mov	r0, r9
 801487e:	f000 fb5b 	bl	8014f38 <_nxd_ipv6_find_max_prefix_length>
                                                     ipv6_address -> nxd_ipv6_address_prefix_length) >= ipv6_address -> nxd_ipv6_address_prefix_length)
 8014882:	78e3      	ldrb	r3, [r4, #3]
                if (_nxd_ipv6_find_max_prefix_length(router_addr, ipv6_address -> nxd_ipv6_address,
 8014884:	4298      	cmp	r0, r3
 8014886:	d3f3      	bcc.n	8014870 <_nxd_ipv6_default_router_add_internal+0x28>
    /* Search through the list for an already existing entry. */
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
    {

        /* Does this slot contain a valid router? */
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014888:	f895 4cf0 	ldrb.w	r4, [r5, #3312]	; 0xcf0
 801488c:	2c00      	cmp	r4, #0
 801488e:	f040 80b3 	bne.w	80149f8 <_nxd_ipv6_default_router_add_internal+0x1b0>
 8014892:	f895 3d0c 	ldrb.w	r3, [r5, #3340]	; 0xd0c
 8014896:	2b00      	cmp	r3, #0
 8014898:	d152      	bne.n	8014940 <_nxd_ipv6_default_router_add_internal+0xf8>
 801489a:	f895 2d28 	ldrb.w	r2, [r5, #3368]	; 0xd28
 801489e:	2a00      	cmp	r2, #0
 80148a0:	f040 80c3 	bne.w	8014a2a <_nxd_ipv6_default_router_add_internal+0x1e2>
 80148a4:	f895 4d44 	ldrb.w	r4, [r5, #3396]	; 0xd44
 80148a8:	2c00      	cmp	r4, #0
 80148aa:	f040 8103 	bne.w	8014ab4 <_nxd_ipv6_default_router_add_internal+0x26c>
 80148ae:	f895 3d60 	ldrb.w	r3, [r5, #3424]	; 0xd60
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	f040 80d5 	bne.w	8014a62 <_nxd_ipv6_default_router_add_internal+0x21a>
 80148b8:	f895 3d7c 	ldrb.w	r3, [r5, #3452]	; 0xd7c
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d06c      	beq.n	801499a <_nxd_ipv6_default_router_add_internal+0x152>
        {

            /* Check for matching router address. */
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 80148c0:	f505 6158 	add.w	r1, r5, #3456	; 0xd80
 80148c4:	4648      	mov	r0, r9
 80148c6:	f7f1 fdd7 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 80148ca:	b120      	cbz	r0, 80148d6 <_nxd_ipv6_default_router_add_internal+0x8e>
 80148cc:	f8d5 3d90 	ldr.w	r3, [r5, #3472]	; 0xd90
 80148d0:	429f      	cmp	r7, r3
 80148d2:	f000 810a 	beq.w	8014aea <_nxd_ipv6_default_router_add_internal+0x2a2>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 80148d6:	f895 3d98 	ldrb.w	r3, [r5, #3480]	; 0xd98
 80148da:	2b00      	cmp	r3, #0
 80148dc:	f040 80d4 	bne.w	8014a88 <_nxd_ipv6_default_router_add_internal+0x240>
        }
        else
        {

            /* Flag this as a slot we can use to add the new router. */
            if (first_available == (UINT)0xFFFFFFFF)
 80148e0:	1c61      	adds	r1, r4, #1
 80148e2:	d15e      	bne.n	80149a2 <_nxd_ipv6_default_router_add_internal+0x15a>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 80148e4:	f895 3db4 	ldrb.w	r3, [r5, #3508]	; 0xdb4
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d169      	bne.n	80149c0 <_nxd_ipv6_default_router_add_internal+0x178>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 80148ec:	2406      	movs	r4, #6
 80148ee:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3

        /* Set up local pointer. */
        ret = &ip_ptr -> nx_ipv6_default_router_table[first_available];

        /* Copy the router's address into the router table.  */
        COPY_IPV6_ADDRESS(router_addr, ret -> nx_ipv6_default_router_entry_router_address);
 80148f2:	4648      	mov	r0, r9
 80148f4:	00a4      	lsls	r4, r4, #2
 80148f6:	f604 41f4 	addw	r1, r4, #3316	; 0xcf4
 80148fa:	4429      	add	r1, r5
 80148fc:	f7f1 fde6 	bl	80064cc <COPY_IPV6_ADDRESS>

        /* Add the specified input to the router record. */
        ret -> nx_ipv6_default_router_entry_flag = (UCHAR)(router_type | NX_IPV6_ROUTE_TYPE_VALID);
 8014900:	9a08      	ldr	r2, [sp, #32]
 8014902:	192b      	adds	r3, r5, r4
        /* Set the interface index.  */
        ret -> nx_ipv6_default_router_entry_interface_ptr = if_ptr;

        /* Has no entry in the cache table. Neighbor Discovery process handles this
           automaticaly. */
        ret -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014904:	2000      	movs	r0, #0
        ret -> nx_ipv6_default_router_entry_flag = (UCHAR)(router_type | NX_IPV6_ROUTE_TYPE_VALID);
 8014906:	f062 027f 	orn	r2, r2, #127	; 0x7f
        ret -> nx_ipv6_default_router_entry_life_time = (USHORT)router_lifetime;
 801490a:	f8a3 8cf2 	strh.w	r8, [r3, #3314]	; 0xcf2
        ret -> nx_ipv6_default_router_entry_interface_ptr = if_ptr;
 801490e:	f8c3 7d04 	str.w	r7, [r3, #3332]	; 0xd04
        ret -> nx_ipv6_default_router_entry_flag = (UCHAR)(router_type | NX_IPV6_ROUTE_TYPE_VALID);
 8014912:	f883 2cf0 	strb.w	r2, [r3, #3312]	; 0xcf0
        ret -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014916:	f8c3 0d08 	str.w	r0, [r3, #3336]	; 0xd08

        /* Update the count of routers currently in the table. */
        ip_ptr -> nx_ipv6_default_router_table_size++;
 801491a:	f8b5 3cec 	ldrh.w	r3, [r5, #3308]	; 0xcec
 801491e:	3301      	adds	r3, #1
 8014920:	f8a5 3cec 	strh.w	r3, [r5, #3308]	; 0xcec
        return(NX_NO_MORE_ENTRIES);
    }

    /* If a router pointer was supplied, set it to the location of the router
       we just added to the table. */
    if (_ret)
 8014924:	2e00      	cmp	r6, #0
 8014926:	f000 80c1 	beq.w	8014aac <_nxd_ipv6_default_router_add_internal+0x264>
        ret = &ip_ptr -> nx_ipv6_default_router_table[first_available];
 801492a:	f504 644f 	add.w	r4, r4, #3312	; 0xcf0
 801492e:	4425      	add	r5, r4
    {
        *_ret = ret;
 8014930:	6035      	str	r5, [r6, #0]
    }

    /* Successful completion, we're done! */
    return(NX_SUCCESS);
}
 8014932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return(NX_IP_ADDRESS_ERROR);
 8014936:	2021      	movs	r0, #33	; 0x21
}
 8014938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 801493c:	f04f 34ff 	mov.w	r4, #4294967295
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 8014940:	f505 6151 	add.w	r1, r5, #3344	; 0xd10
 8014944:	4648      	mov	r0, r9
 8014946:	f7f1 fd97 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 801494a:	b120      	cbz	r0, 8014956 <_nxd_ipv6_default_router_add_internal+0x10e>
 801494c:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 8014950:	429f      	cmp	r7, r3
 8014952:	f000 80c1 	beq.w	8014ad8 <_nxd_ipv6_default_router_add_internal+0x290>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014956:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
 801495a:	2b00      	cmp	r3, #0
 801495c:	d166      	bne.n	8014a2c <_nxd_ipv6_default_router_add_internal+0x1e4>
            if (first_available == (UINT)0xFFFFFFFF)
 801495e:	3401      	adds	r4, #1
 8014960:	f040 80aa 	bne.w	8014ab8 <_nxd_ipv6_default_router_add_internal+0x270>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014964:	f895 3d44 	ldrb.w	r3, [r5, #3396]	; 0xd44
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014968:	2402      	movs	r4, #2
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 801496a:	2b00      	cmp	r3, #0
 801496c:	d09f      	beq.n	80148ae <_nxd_ipv6_default_router_add_internal+0x66>
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 801496e:	f605 5148 	addw	r1, r5, #3400	; 0xd48
 8014972:	4648      	mov	r0, r9
 8014974:	f7f1 fd80 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014978:	b120      	cbz	r0, 8014984 <_nxd_ipv6_default_router_add_internal+0x13c>
 801497a:	f8d5 3d58 	ldr.w	r3, [r5, #3416]	; 0xd58
 801497e:	429f      	cmp	r7, r3
 8014980:	f000 80a1 	beq.w	8014ac6 <_nxd_ipv6_default_router_add_internal+0x27e>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014984:	f895 3d60 	ldrb.w	r3, [r5, #3424]	; 0xd60
 8014988:	2b00      	cmp	r3, #0
 801498a:	d16a      	bne.n	8014a62 <_nxd_ipv6_default_router_add_internal+0x21a>
            if (first_available == (UINT)0xFFFFFFFF)
 801498c:	1c63      	adds	r3, r4, #1
 801498e:	d193      	bne.n	80148b8 <_nxd_ipv6_default_router_add_internal+0x70>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014990:	f895 3d7c 	ldrb.w	r3, [r5, #3452]	; 0xd7c
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014994:	2404      	movs	r4, #4
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014996:	2b00      	cmp	r3, #0
 8014998:	d192      	bne.n	80148c0 <_nxd_ipv6_default_router_add_internal+0x78>
 801499a:	f895 3d98 	ldrb.w	r3, [r5, #3480]	; 0xd98
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d172      	bne.n	8014a88 <_nxd_ipv6_default_router_add_internal+0x240>
 80149a2:	f895 3db4 	ldrb.w	r3, [r5, #3508]	; 0xdb4
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d0a1      	beq.n	80148ee <_nxd_ipv6_default_router_add_internal+0xa6>
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 80149aa:	f605 51b8 	addw	r1, r5, #3512	; 0xdb8
 80149ae:	4648      	mov	r0, r9
 80149b0:	f7f1 fd62 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 80149b4:	b960      	cbnz	r0, 80149d0 <_nxd_ipv6_default_router_add_internal+0x188>
    if (first_available != (UINT)0xFFFFFFFF)
 80149b6:	1c63      	adds	r3, r4, #1
 80149b8:	d199      	bne.n	80148ee <_nxd_ipv6_default_router_add_internal+0xa6>
        return(NX_NO_MORE_ENTRIES);
 80149ba:	2017      	movs	r0, #23
}
 80149bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 80149c0:	f605 51b8 	addw	r1, r5, #3512	; 0xdb8
 80149c4:	4648      	mov	r0, r9
 80149c6:	f7f1 fd57 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 80149ca:	2800      	cmp	r0, #0
 80149cc:	d08e      	beq.n	80148ec <_nxd_ipv6_default_router_add_internal+0xa4>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 80149ce:	2406      	movs	r4, #6
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 80149d0:	f8d5 3dc8 	ldr.w	r3, [r5, #3528]	; 0xdc8
 80149d4:	42bb      	cmp	r3, r7
 80149d6:	d1ee      	bne.n	80149b6 <_nxd_ipv6_default_router_add_internal+0x16e>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 80149d8:	2307      	movs	r3, #7
 80149da:	22c4      	movs	r2, #196	; 0xc4
                ret -> nx_ipv6_default_router_entry_life_time = (USHORT)router_lifetime;
 80149dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80149e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80149e4:	f8a3 8cf2 	strh.w	r8, [r3, #3314]	; 0xcf2
                if (_ret)
 80149e8:	2e00      	cmp	r6, #0
 80149ea:	d05f      	beq.n	8014aac <_nxd_ipv6_default_router_add_internal+0x264>
                ret = &ip_ptr -> nx_ipv6_default_router_table[i];
 80149ec:	f502 624f 	add.w	r2, r2, #3312	; 0xcf0
                return(NX_SUCCESS);
 80149f0:	2000      	movs	r0, #0
                ret = &ip_ptr -> nx_ipv6_default_router_table[i];
 80149f2:	4415      	add	r5, r2
                    *_ret = ret;
 80149f4:	6035      	str	r5, [r6, #0]
 80149f6:	e79f      	b.n	8014938 <_nxd_ipv6_default_router_add_internal+0xf0>
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 80149f8:	f605 41f4 	addw	r1, r5, #3316	; 0xcf4
 80149fc:	4648      	mov	r0, r9
 80149fe:	f7f1 fd3b 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014a02:	b118      	cbz	r0, 8014a0c <_nxd_ipv6_default_router_add_internal+0x1c4>
 8014a04:	f8d5 3d04 	ldr.w	r3, [r5, #3332]	; 0xd04
 8014a08:	429f      	cmp	r7, r3
 8014a0a:	d068      	beq.n	8014ade <_nxd_ipv6_default_router_add_internal+0x296>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014a0c:	f895 3d0c 	ldrb.w	r3, [r5, #3340]	; 0xd0c
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d193      	bne.n	801493c <_nxd_ipv6_default_router_add_internal+0xf4>
 8014a14:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d149      	bne.n	8014ab0 <_nxd_ipv6_default_router_add_internal+0x268>
 8014a1c:	f895 3d44 	ldrb.w	r3, [r5, #3396]	; 0xd44
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014a20:	2401      	movs	r4, #1
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	f43f af43 	beq.w	80148ae <_nxd_ipv6_default_router_add_internal+0x66>
 8014a28:	e7a1      	b.n	801496e <_nxd_ipv6_default_router_add_internal+0x126>
 8014a2a:	461c      	mov	r4, r3
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 8014a2c:	f605 512c 	addw	r1, r5, #3372	; 0xd2c
 8014a30:	4648      	mov	r0, r9
 8014a32:	f7f1 fd21 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014a36:	b118      	cbz	r0, 8014a40 <_nxd_ipv6_default_router_add_internal+0x1f8>
 8014a38:	f8d5 3d3c 	ldr.w	r3, [r5, #3388]	; 0xd3c
 8014a3c:	429f      	cmp	r7, r3
 8014a3e:	d048      	beq.n	8014ad2 <_nxd_ipv6_default_router_add_internal+0x28a>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014a40:	f895 3d44 	ldrb.w	r3, [r5, #3396]	; 0xd44
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d192      	bne.n	801496e <_nxd_ipv6_default_router_add_internal+0x126>
            if (first_available == (UINT)0xFFFFFFFF)
 8014a48:	1c62      	adds	r2, r4, #1
 8014a4a:	f47f af30 	bne.w	80148ae <_nxd_ipv6_default_router_add_internal+0x66>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014a4e:	f895 3d60 	ldrb.w	r3, [r5, #3424]	; 0xd60
 8014a52:	b92b      	cbnz	r3, 8014a60 <_nxd_ipv6_default_router_add_internal+0x218>
 8014a54:	f895 3d7c 	ldrb.w	r3, [r5, #3452]	; 0xd7c
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014a58:	2403      	movs	r4, #3
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d09d      	beq.n	801499a <_nxd_ipv6_default_router_add_internal+0x152>
 8014a5e:	e72f      	b.n	80148c0 <_nxd_ipv6_default_router_add_internal+0x78>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014a60:	2403      	movs	r4, #3
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 8014a62:	f605 5164 	addw	r1, r5, #3428	; 0xd64
 8014a66:	4648      	mov	r0, r9
 8014a68:	f7f1 fd06 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014a6c:	b118      	cbz	r0, 8014a76 <_nxd_ipv6_default_router_add_internal+0x22e>
 8014a6e:	f8d5 3d74 	ldr.w	r3, [r5, #3444]	; 0xd74
 8014a72:	429f      	cmp	r7, r3
 8014a74:	d02a      	beq.n	8014acc <_nxd_ipv6_default_router_add_internal+0x284>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014a76:	f895 3d7c 	ldrb.w	r3, [r5, #3452]	; 0xd7c
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	f47f af20 	bne.w	80148c0 <_nxd_ipv6_default_router_add_internal+0x78>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014a80:	1c60      	adds	r0, r4, #1
 8014a82:	bf08      	it	eq
 8014a84:	2405      	moveq	r4, #5
 8014a86:	e788      	b.n	801499a <_nxd_ipv6_default_router_add_internal+0x152>
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 8014a88:	f605 519c 	addw	r1, r5, #3484	; 0xd9c
 8014a8c:	4648      	mov	r0, r9
 8014a8e:	f7f1 fcf3 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014a92:	b118      	cbz	r0, 8014a9c <_nxd_ipv6_default_router_add_internal+0x254>
 8014a94:	f8d5 3dac 	ldr.w	r3, [r5, #3500]	; 0xdac
 8014a98:	429f      	cmp	r7, r3
 8014a9a:	d023      	beq.n	8014ae4 <_nxd_ipv6_default_router_add_internal+0x29c>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014a9c:	f895 3db4 	ldrb.w	r3, [r5, #3508]	; 0xdb4
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d182      	bne.n	80149aa <_nxd_ipv6_default_router_add_internal+0x162>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014aa4:	1c62      	adds	r2, r4, #1
 8014aa6:	bf08      	it	eq
 8014aa8:	2407      	moveq	r4, #7
 8014aaa:	e720      	b.n	80148ee <_nxd_ipv6_default_router_add_internal+0xa6>
                return(NX_SUCCESS);
 8014aac:	2000      	movs	r0, #0
 8014aae:	e743      	b.n	8014938 <_nxd_ipv6_default_router_add_internal+0xf0>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014ab0:	2401      	movs	r4, #1
 8014ab2:	e7bb      	b.n	8014a2c <_nxd_ipv6_default_router_add_internal+0x1e4>
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 8014ab4:	4614      	mov	r4, r2
 8014ab6:	e75a      	b.n	801496e <_nxd_ipv6_default_router_add_internal+0x126>
 8014ab8:	f895 4d44 	ldrb.w	r4, [r5, #3396]	; 0xd44
 8014abc:	2c00      	cmp	r4, #0
 8014abe:	f43f aef6 	beq.w	80148ae <_nxd_ipv6_default_router_add_internal+0x66>
 8014ac2:	461c      	mov	r4, r3
 8014ac4:	e753      	b.n	801496e <_nxd_ipv6_default_router_add_internal+0x126>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014ac6:	2303      	movs	r3, #3
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 8014ac8:	2254      	movs	r2, #84	; 0x54
 8014aca:	e787      	b.n	80149dc <_nxd_ipv6_default_router_add_internal+0x194>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014acc:	2304      	movs	r3, #4
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 8014ace:	2270      	movs	r2, #112	; 0x70
 8014ad0:	e784      	b.n	80149dc <_nxd_ipv6_default_router_add_internal+0x194>
 8014ad2:	2302      	movs	r3, #2
 8014ad4:	2238      	movs	r2, #56	; 0x38
 8014ad6:	e781      	b.n	80149dc <_nxd_ipv6_default_router_add_internal+0x194>
 8014ad8:	2301      	movs	r3, #1
 8014ada:	221c      	movs	r2, #28
 8014adc:	e77e      	b.n	80149dc <_nxd_ipv6_default_router_add_internal+0x194>
 8014ade:	2300      	movs	r3, #0
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	e77b      	b.n	80149dc <_nxd_ipv6_default_router_add_internal+0x194>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014ae4:	2306      	movs	r3, #6
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 8014ae6:	22a8      	movs	r2, #168	; 0xa8
 8014ae8:	e778      	b.n	80149dc <_nxd_ipv6_default_router_add_internal+0x194>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014aea:	2305      	movs	r3, #5
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 8014aec:	228c      	movs	r2, #140	; 0x8c
 8014aee:	e775      	b.n	80149dc <_nxd_ipv6_default_router_add_internal+0x194>

08014af0 <_nxd_ipv6_default_router_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_default_router_delete(NX_IP *ip_ptr, NXD_ADDRESS *router_address)
{
 8014af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    NX_TRACE_IN_LINE_INSERT(NXD_TRACE_IPV6_DEFAULT_ROUTER_DELETE,
                            ip_ptr, router_address -> nxd_ip_address.v6[3], 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain protection on this IP instance for access into the default router table. */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014af4:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 8014af8:	4604      	mov	r4, r0
 8014afa:	460f      	mov	r7, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014afc:	f04f 31ff 	mov.w	r1, #4294967295
 8014b00:	4630      	mov	r0, r6
 8014b02:	f007 fff9 	bl	801caf8 <_tx_mutex_get>

    /* If our default route table is empty, just return */
    if (ip_ptr -> nx_ipv6_default_router_table_size == 0)
 8014b06:	f8b4 5cec 	ldrh.w	r5, [r4, #3308]	; 0xcec
 8014b0a:	b32d      	cbz	r5, 8014b58 <_nxd_ipv6_default_router_delete+0x68>

        /*Set local pointer for convenience. */
        rt_entry = &ip_ptr -> nx_ipv6_default_router_table[i];

        /* Does this slot contain a router? */
        if (rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID)
 8014b0c:	f994 3cf0 	ldrsb.w	r3, [r4, #3312]	; 0xcf0
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	db32      	blt.n	8014b7a <_nxd_ipv6_default_router_delete+0x8a>
 8014b14:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	db39      	blt.n	8014b90 <_nxd_ipv6_default_router_delete+0xa0>
 8014b1c:	f994 3d28 	ldrsb.w	r3, [r4, #3368]	; 0xd28
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	db40      	blt.n	8014ba6 <_nxd_ipv6_default_router_delete+0xb6>
 8014b24:	f994 3d44 	ldrsb.w	r3, [r4, #3396]	; 0xd44
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	db47      	blt.n	8014bbc <_nxd_ipv6_default_router_delete+0xcc>
 8014b2c:	f994 3d60 	ldrsb.w	r3, [r4, #3424]	; 0xd60
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	db6f      	blt.n	8014c14 <_nxd_ipv6_default_router_delete+0x124>
 8014b34:	f994 3d7c 	ldrsb.w	r3, [r4, #3452]	; 0xd7c
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	db76      	blt.n	8014c2a <_nxd_ipv6_default_router_delete+0x13a>
 8014b3c:	f994 3d98 	ldrsb.w	r3, [r4, #3480]	; 0xd98
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	db7d      	blt.n	8014c40 <_nxd_ipv6_default_router_delete+0x150>
 8014b44:	f994 3db4 	ldrsb.w	r3, [r4, #3508]	; 0xdb4
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	db0b      	blt.n	8014b64 <_nxd_ipv6_default_router_delete+0x74>
            }
        }
    }

    /* Release the mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014b4c:	4630      	mov	r0, r6
 8014b4e:	f008 f8bd 	bl	801cccc <_tx_mutex_put>

    return(NX_NOT_FOUND);
 8014b52:	204e      	movs	r0, #78	; 0x4e
    NX_PARAMETER_NOT_USED(router_address);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 8014b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014b58:	4630      	mov	r0, r6
 8014b5a:	f008 f8b7 	bl	801cccc <_tx_mutex_put>
        return(NX_SUCCESS);
 8014b5e:	4628      	mov	r0, r5
}
 8014b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014b64:	f604 55b8 	addw	r5, r4, #3512	; 0xdb8
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8014b68:	1d38      	adds	r0, r7, #4
 8014b6a:	4629      	mov	r1, r5
 8014b6c:	f7f1 fc84 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014b70:	2800      	cmp	r0, #0
 8014b72:	d0eb      	beq.n	8014b4c <_nxd_ipv6_default_router_delete+0x5c>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014b74:	f04f 0807 	mov.w	r8, #7
 8014b78:	e02a      	b.n	8014bd0 <_nxd_ipv6_default_router_delete+0xe0>
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014b7a:	f604 45f4 	addw	r5, r4, #3316	; 0xcf4
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8014b7e:	1d38      	adds	r0, r7, #4
 8014b80:	4629      	mov	r1, r5
 8014b82:	f7f1 fc79 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014b86:	2800      	cmp	r0, #0
 8014b88:	d0c4      	beq.n	8014b14 <_nxd_ipv6_default_router_delete+0x24>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014b8a:	f04f 0800 	mov.w	r8, #0
 8014b8e:	e01f      	b.n	8014bd0 <_nxd_ipv6_default_router_delete+0xe0>
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014b90:	f504 6551 	add.w	r5, r4, #3344	; 0xd10
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8014b94:	1d38      	adds	r0, r7, #4
 8014b96:	4629      	mov	r1, r5
 8014b98:	f7f1 fc6e 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014b9c:	2800      	cmp	r0, #0
 8014b9e:	d0bd      	beq.n	8014b1c <_nxd_ipv6_default_router_delete+0x2c>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014ba0:	f04f 0801 	mov.w	r8, #1
 8014ba4:	e014      	b.n	8014bd0 <_nxd_ipv6_default_router_delete+0xe0>
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014ba6:	f604 552c 	addw	r5, r4, #3372	; 0xd2c
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8014baa:	1d38      	adds	r0, r7, #4
 8014bac:	4629      	mov	r1, r5
 8014bae:	f7f1 fc63 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014bb2:	2800      	cmp	r0, #0
 8014bb4:	d0b6      	beq.n	8014b24 <_nxd_ipv6_default_router_delete+0x34>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014bb6:	f04f 0802 	mov.w	r8, #2
 8014bba:	e009      	b.n	8014bd0 <_nxd_ipv6_default_router_delete+0xe0>
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014bbc:	f604 5548 	addw	r5, r4, #3400	; 0xd48
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8014bc0:	1d38      	adds	r0, r7, #4
 8014bc2:	4629      	mov	r1, r5
 8014bc4:	f7f1 fc58 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	d0af      	beq.n	8014b2c <_nxd_ipv6_default_router_delete+0x3c>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014bcc:	f04f 0803 	mov.w	r8, #3
                if (rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr)
 8014bd0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8014bd4:	eba7 0308 	sub.w	r3, r7, r8
 8014bd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014bdc:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8014be0:	b10b      	cbz	r3, 8014be6 <_nxd_ipv6_default_router_delete+0xf6>
                    rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr -> nx_nd_cache_is_router = NX_NULL;
 8014be2:	2200      	movs	r2, #0
 8014be4:	625a      	str	r2, [r3, #36]	; 0x24
                _nx_invalidate_destination_entry(ip_ptr, rt_entry -> nx_ipv6_default_router_entry_router_address);
 8014be6:	4629      	mov	r1, r5
 8014be8:	4620      	mov	r0, r4
 8014bea:	f7fc f83b 	bl	8010c64 <_nx_invalidate_destination_entry>
                rt_entry -> nx_ipv6_default_router_entry_flag = 0;
 8014bee:	eba7 0308 	sub.w	r3, r7, r8
 8014bf2:	2500      	movs	r5, #0
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014bf4:	4630      	mov	r0, r6
                rt_entry -> nx_ipv6_default_router_entry_flag = 0;
 8014bf6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014bfa:	f883 5cf0 	strb.w	r5, [r3, #3312]	; 0xcf0
                rt_entry -> nx_ipv6_default_router_entry_interface_ptr = NX_NULL;
 8014bfe:	f8c3 5d04 	str.w	r5, [r3, #3332]	; 0xd04
                ip_ptr -> nx_ipv6_default_router_table_size--;
 8014c02:	f8b4 3cec 	ldrh.w	r3, [r4, #3308]	; 0xcec
 8014c06:	3b01      	subs	r3, #1
 8014c08:	f8a4 3cec 	strh.w	r3, [r4, #3308]	; 0xcec
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014c0c:	f008 f85e 	bl	801cccc <_tx_mutex_put>
                return(NX_SUCCESS);
 8014c10:	4628      	mov	r0, r5
 8014c12:	e79f      	b.n	8014b54 <_nxd_ipv6_default_router_delete+0x64>
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014c14:	f604 5564 	addw	r5, r4, #3428	; 0xd64
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8014c18:	1d38      	adds	r0, r7, #4
 8014c1a:	4629      	mov	r1, r5
 8014c1c:	f7f1 fc2c 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d087      	beq.n	8014b34 <_nxd_ipv6_default_router_delete+0x44>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014c24:	f04f 0804 	mov.w	r8, #4
 8014c28:	e7d2      	b.n	8014bd0 <_nxd_ipv6_default_router_delete+0xe0>
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014c2a:	f504 6558 	add.w	r5, r4, #3456	; 0xd80
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8014c2e:	1d38      	adds	r0, r7, #4
 8014c30:	4629      	mov	r1, r5
 8014c32:	f7f1 fc21 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d080      	beq.n	8014b3c <_nxd_ipv6_default_router_delete+0x4c>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014c3a:	f04f 0805 	mov.w	r8, #5
 8014c3e:	e7c7      	b.n	8014bd0 <_nxd_ipv6_default_router_delete+0xe0>
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014c40:	f604 559c 	addw	r5, r4, #3484	; 0xd9c
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8014c44:	1d38      	adds	r0, r7, #4
 8014c46:	4629      	mov	r1, r5
 8014c48:	f7f1 fc16 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	f43f af79 	beq.w	8014b44 <_nxd_ipv6_default_router_delete+0x54>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8014c52:	f04f 0806 	mov.w	r8, #6
 8014c56:	e7bb      	b.n	8014bd0 <_nxd_ipv6_default_router_delete+0xe0>

08014c58 <_nxd_ipv6_default_router_table_init>:
       when the current router cannot be reached. */
    ip_ptr -> nx_ipv6_default_router_table_round_robin_index = 0;

    /* Initialize the start of the prefix table (linked list) to NULL. */
    ip_ptr -> nx_ipv6_prefix_list_table[0].nx_ipv6_prefix_entry_prev = NX_NULL;
    ip_ptr -> nx_ipv6_prefix_list_table[0].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[1];
 8014c58:	f600 52f4 	addw	r2, r0, #3572	; 0xdf4
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014c5c:	2300      	movs	r3, #0
    /* Link up the entries in the prefix table.  */
    for (i = 1; i < NX_IPV6_PREFIX_LIST_TABLE_SIZE - 1; i++)
    {

        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014c5e:	f600 6174 	addw	r1, r0, #3700	; 0xe74
 8014c62:	f600 6cb4 	addw	ip, r0, #3764	; 0xeb4
    ip_ptr -> nx_ipv6_prefix_list_table[0].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[1];
 8014c66:	f8c0 2df0 	str.w	r2, [r0, #3568]	; 0xdf0
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8014c6a:	f8c0 2e2c 	str.w	r2, [r0, #3628]	; 0xe2c
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014c6e:	f600 6294 	addw	r2, r0, #3732	; 0xe94
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014c72:	f880 3cf0 	strb.w	r3, [r0, #3312]	; 0xcf0
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 8014c76:	f8a0 3cf2 	strh.w	r3, [r0, #3314]	; 0xcf2
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014c7a:	f8c0 3d08 	str.w	r3, [r0, #3336]	; 0xd08
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014c7e:	f880 3d0c 	strb.w	r3, [r0, #3340]	; 0xd0c
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 8014c82:	f8a0 3d0e 	strh.w	r3, [r0, #3342]	; 0xd0e
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014c86:	f8c0 3d24 	str.w	r3, [r0, #3364]	; 0xd24
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014c8a:	f880 3d28 	strb.w	r3, [r0, #3368]	; 0xd28
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 8014c8e:	f8a0 3d2a 	strh.w	r3, [r0, #3370]	; 0xd2a
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014c92:	f8c0 3d40 	str.w	r3, [r0, #3392]	; 0xd40
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014c96:	f880 3d44 	strb.w	r3, [r0, #3396]	; 0xd44
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 8014c9a:	f8a0 3d46 	strh.w	r3, [r0, #3398]	; 0xd46
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014c9e:	f8c0 3d5c 	str.w	r3, [r0, #3420]	; 0xd5c
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014ca2:	f880 3d60 	strb.w	r3, [r0, #3424]	; 0xd60
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 8014ca6:	f8a0 3d62 	strh.w	r3, [r0, #3426]	; 0xd62
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014caa:	f8c0 3d78 	str.w	r3, [r0, #3448]	; 0xd78
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014cae:	f880 3d7c 	strb.w	r3, [r0, #3452]	; 0xd7c
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 8014cb2:	f8a0 3d7e 	strh.w	r3, [r0, #3454]	; 0xd7e
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014cb6:	f8c0 3d94 	str.w	r3, [r0, #3476]	; 0xd94
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014cba:	f880 3d98 	strb.w	r3, [r0, #3480]	; 0xd98
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 8014cbe:	f8a0 3d9a 	strh.w	r3, [r0, #3482]	; 0xd9a
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014cc2:	f8c0 3db0 	str.w	r3, [r0, #3504]	; 0xdb0
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8014cc6:	f880 3db4 	strb.w	r3, [r0, #3508]	; 0xdb4
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 8014cca:	f8a0 3db6 	strh.w	r3, [r0, #3510]	; 0xdb6
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 8014cce:	f8c0 3dcc 	str.w	r3, [r0, #3532]	; 0xdcc
    ip_ptr -> nx_ipv6_default_router_table_size = 0;
 8014cd2:	f8a0 3cec 	strh.w	r3, [r0, #3308]	; 0xcec
    ip_ptr -> nx_ipv6_default_router_table_round_robin_index = 0;
 8014cd6:	f8c0 3dd0 	str.w	r3, [r0, #3536]	; 0xdd0
    ip_ptr -> nx_ipv6_prefix_list_table[0].nx_ipv6_prefix_entry_prev = NX_NULL;
 8014cda:	f8c0 3dec 	str.w	r3, [r0, #3564]	; 0xdec
{
 8014cde:	b4f0      	push	{r4, r5, r6, r7}
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014ce0:	f600 6714 	addw	r7, r0, #3604	; 0xe14
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8014ce4:	f600 55d4 	addw	r5, r0, #3540	; 0xdd4
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014ce8:	f600 6634 	addw	r6, r0, #3636	; 0xe34
 8014cec:	f600 6454 	addw	r4, r0, #3668	; 0xe54
 8014cf0:	f8c0 7e10 	str.w	r7, [r0, #3600]	; 0xe10
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8014cf4:	f8c0 5e0c 	str.w	r5, [r0, #3596]	; 0xe0c
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014cf8:	f8c0 6e30 	str.w	r6, [r0, #3632]	; 0xe30
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8014cfc:	f8c0 7e4c 	str.w	r7, [r0, #3660]	; 0xe4c
 8014d00:	f8c0 6e6c 	str.w	r6, [r0, #3692]	; 0xe6c
    /* Null terminate the end of the prefix table (linked list). */
    ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
    ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = NX_NULL;

    /* Set the free list pointer to the 1st entry. */
    ip_ptr -> nx_ipv6_prefix_entry_free_list = &ip_ptr -> nx_ipv6_prefix_list_table[0];
 8014d04:	f8c0 5ed8 	str.w	r5, [r0, #3800]	; 0xed8
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014d08:	f8c0 4e50 	str.w	r4, [r0, #3664]	; 0xe50
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8014d0c:	f8c0 4e8c 	str.w	r4, [r0, #3724]	; 0xe8c
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014d10:	f8c0 ceb0 	str.w	ip, [r0, #3760]	; 0xeb0
    ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = NX_NULL;
 8014d14:	f8c0 3ed0 	str.w	r3, [r0, #3792]	; 0xed0
    ip_ptr -> nx_ipv6_prefix_list_ptr = NX_NULL;
 8014d18:	f8c0 3ed4 	str.w	r3, [r0, #3796]	; 0xed4
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014d1c:	f8c0 1e70 	str.w	r1, [r0, #3696]	; 0xe70
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8014d20:	f8c0 1eac 	str.w	r1, [r0, #3756]	; 0xeac
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8014d24:	f8c0 2e90 	str.w	r2, [r0, #3728]	; 0xe90
    ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8014d28:	f8c0 2ecc 	str.w	r2, [r0, #3788]	; 0xecc

    /* All done, return. */
}
 8014d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8014d2e:	4770      	bx	lr

08014d30 <_nxd_ipv6_destination_table_find_next_hop>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_destination_table_find_next_hop(NX_IP *ip_ptr, ULONG *destination_ip, ULONG *next_hop)
{
 8014d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


    status = NX_NOT_SUCCESSFUL;

    /* Next hop storage must not be valid. */
    NX_ASSERT(next_hop != NX_NULL);
 8014d32:	2a00      	cmp	r2, #0
 8014d34:	d064      	beq.n	8014e00 <_nxd_ipv6_destination_table_find_next_hop+0xd0>

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 8014d36:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
 8014d3a:	4605      	mov	r5, r0

    /* Check the num of destination. */
    if (table_size == 0)
 8014d3c:	2c00      	cmp	r4, #0
 8014d3e:	d05d      	beq.n	8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
    /* Loop through all entries. */
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
    {

        /* Skip invalid entries. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8014d40:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8014d44:	460e      	mov	r6, r1
 8014d46:	4617      	mov	r7, r2
 8014d48:	b13b      	cbz	r3, 8014d5a <_nxd_ipv6_destination_table_find_next_hop+0x2a>

        /* Keep track of valid entries we have checked. */
        table_size--;

        /* Check whether or not the address is the same. */
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014d4a:	3094      	adds	r0, #148	; 0x94
        table_size--;
 8014d4c:	3c01      	subs	r4, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014d4e:	f7f1 fb93 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d165      	bne.n	8014e22 <_nxd_ipv6_destination_table_find_next_hop+0xf2>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8014d56:	2c00      	cmp	r4, #0
 8014d58:	d050      	beq.n	8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8014d5a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 8014d5e:	b14b      	cbz	r3, 8014d74 <_nxd_ipv6_destination_table_find_next_hop+0x44>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014d60:	4631      	mov	r1, r6
 8014d62:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
        table_size--;
 8014d66:	3c01      	subs	r4, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014d68:	f7f1 fb86 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014d6c:	2800      	cmp	r0, #0
 8014d6e:	d162      	bne.n	8014e36 <_nxd_ipv6_destination_table_find_next_hop+0x106>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8014d70:	2c00      	cmp	r4, #0
 8014d72:	d043      	beq.n	8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8014d74:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8014d78:	b143      	cbz	r3, 8014d8c <_nxd_ipv6_destination_table_find_next_hop+0x5c>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014d7a:	4631      	mov	r1, r6
 8014d7c:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
        table_size--;
 8014d80:	3c01      	subs	r4, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014d82:	f7f1 fb79 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d153      	bne.n	8014e32 <_nxd_ipv6_destination_table_find_next_hop+0x102>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8014d8a:	b3bc      	cbz	r4, 8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8014d8c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8014d90:	b143      	cbz	r3, 8014da4 <_nxd_ipv6_destination_table_find_next_hop+0x74>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014d92:	4631      	mov	r1, r6
 8014d94:	f505 7086 	add.w	r0, r5, #268	; 0x10c
        table_size--;
 8014d98:	3c01      	subs	r4, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014d9a:	f7f1 fb6d 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	d145      	bne.n	8014e2e <_nxd_ipv6_destination_table_find_next_hop+0xfe>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8014da2:	b35c      	cbz	r4, 8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8014da4:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 8014da8:	b13b      	cbz	r3, 8014dba <_nxd_ipv6_destination_table_find_next_hop+0x8a>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014daa:	4631      	mov	r1, r6
 8014dac:	f505 709a 	add.w	r0, r5, #308	; 0x134
        table_size--;
 8014db0:	3c01      	subs	r4, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014db2:	f7f1 fb61 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014db6:	bbc0      	cbnz	r0, 8014e2a <_nxd_ipv6_destination_table_find_next_hop+0xfa>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8014db8:	b304      	cbz	r4, 8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8014dba:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
 8014dbe:	b13b      	cbz	r3, 8014dd0 <_nxd_ipv6_destination_table_find_next_hop+0xa0>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014dc0:	4631      	mov	r1, r6
 8014dc2:	f505 70ae 	add.w	r0, r5, #348	; 0x15c
        table_size--;
 8014dc6:	3c01      	subs	r4, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014dc8:	f7f1 fb56 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014dcc:	bb58      	cbnz	r0, 8014e26 <_nxd_ipv6_destination_table_find_next_hop+0xf6>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8014dce:	b1ac      	cbz	r4, 8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8014dd0:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
 8014dd4:	b13b      	cbz	r3, 8014de6 <_nxd_ipv6_destination_table_find_next_hop+0xb6>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014dd6:	4631      	mov	r1, r6
 8014dd8:	f505 70c2 	add.w	r0, r5, #388	; 0x184
 8014ddc:	f7f1 fb4c 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014de0:	b9b8      	cbnz	r0, 8014e12 <_nxd_ipv6_destination_table_find_next_hop+0xe2>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8014de2:	2c01      	cmp	r4, #1
 8014de4:	d00a      	beq.n	8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8014de6:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
 8014dea:	b13b      	cbz	r3, 8014dfc <_nxd_ipv6_destination_table_find_next_hop+0xcc>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014dec:	4631      	mov	r1, r6
 8014dee:	f505 70d6 	add.w	r0, r5, #428	; 0x1ac
 8014df2:	f7f1 fb41 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014df6:	f44f 738c 	mov.w	r3, #280	; 0x118
 8014dfa:	b958      	cbnz	r0, 8014e14 <_nxd_ipv6_destination_table_find_next_hop+0xe4>
        return(NX_NOT_SUCCESSFUL);
 8014dfc:	2043      	movs	r0, #67	; 0x43
        }
    }


    return(status);
}
 8014dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NX_ASSERT(next_hop != NX_NULL);
 8014e00:	f04f 30ff 	mov.w	r0, #4294967295
 8014e04:	f008 fa00 	bl	801d208 <_tx_thread_sleep>
 8014e08:	f04f 30ff 	mov.w	r0, #4294967295
 8014e0c:	f008 f9fc 	bl	801d208 <_tx_thread_sleep>
 8014e10:	e7f6      	b.n	8014e00 <_nxd_ipv6_destination_table_find_next_hop+0xd0>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014e12:	23f0      	movs	r3, #240	; 0xf0
            COPY_IPV6_ADDRESS(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop);
 8014e14:	33a4      	adds	r3, #164	; 0xa4
 8014e16:	4639      	mov	r1, r7
 8014e18:	18e8      	adds	r0, r5, r3
 8014e1a:	f7f1 fb57 	bl	80064cc <COPY_IPV6_ADDRESS>
            status = NX_SUCCESS;
 8014e1e:	2000      	movs	r0, #0
}
 8014e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8014e22:	2300      	movs	r3, #0
 8014e24:	e7f6      	b.n	8014e14 <_nxd_ipv6_destination_table_find_next_hop+0xe4>
 8014e26:	23c8      	movs	r3, #200	; 0xc8
 8014e28:	e7f4      	b.n	8014e14 <_nxd_ipv6_destination_table_find_next_hop+0xe4>
 8014e2a:	23a0      	movs	r3, #160	; 0xa0
 8014e2c:	e7f2      	b.n	8014e14 <_nxd_ipv6_destination_table_find_next_hop+0xe4>
 8014e2e:	2378      	movs	r3, #120	; 0x78
 8014e30:	e7f0      	b.n	8014e14 <_nxd_ipv6_destination_table_find_next_hop+0xe4>
 8014e32:	2350      	movs	r3, #80	; 0x50
 8014e34:	e7ee      	b.n	8014e14 <_nxd_ipv6_destination_table_find_next_hop+0xe4>
 8014e36:	2328      	movs	r3, #40	; 0x28
 8014e38:	e7ec      	b.n	8014e14 <_nxd_ipv6_destination_table_find_next_hop+0xe4>
 8014e3a:	bf00      	nop

08014e3c <_nxd_ipv6_find_default_router_from_address>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
NX_IPV6_DEFAULT_ROUTER_ENTRY *_nxd_ipv6_find_default_router_from_address(NX_IP *ip_ptr, ULONG *router_address)
{
 8014e3c:	b570      	push	{r4, r5, r6, lr}
INT                           i;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;


    /* Get exclusive access to the IP task lock. */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014e3e:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 8014e42:	4604      	mov	r4, r0
 8014e44:	460d      	mov	r5, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014e46:	f04f 31ff 	mov.w	r1, #4294967295
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	f007 fe54 	bl	801caf8 <_tx_mutex_get>

        /* Local pointer to table entry. */
        rt_entry = &ip_ptr -> nx_ipv6_default_router_table[i];

        /* Does this slot contain a valid router? */
        if (rt_entry -> nx_ipv6_default_router_entry_flag)
 8014e50:	f894 3cf0 	ldrb.w	r3, [r4, #3312]	; 0xcf0
 8014e54:	bb03      	cbnz	r3, 8014e98 <_nxd_ipv6_find_default_router_from_address+0x5c>
 8014e56:	f894 3d0c 	ldrb.w	r3, [r4, #3340]	; 0xd0c
 8014e5a:	bb6b      	cbnz	r3, 8014eb8 <_nxd_ipv6_find_default_router_from_address+0x7c>
 8014e5c:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d132      	bne.n	8014eca <_nxd_ipv6_find_default_router_from_address+0x8e>
 8014e64:	f894 3d44 	ldrb.w	r3, [r4, #3396]	; 0xd44
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d137      	bne.n	8014edc <_nxd_ipv6_find_default_router_from_address+0xa0>
 8014e6c:	f894 3d60 	ldrb.w	r3, [r4, #3424]	; 0xd60
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d13c      	bne.n	8014eee <_nxd_ipv6_find_default_router_from_address+0xb2>
 8014e74:	f894 3d7c 	ldrb.w	r3, [r4, #3452]	; 0xd7c
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d141      	bne.n	8014f00 <_nxd_ipv6_find_default_router_from_address+0xc4>
 8014e7c:	f894 3d98 	ldrb.w	r3, [r4, #3480]	; 0xd98
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d146      	bne.n	8014f12 <_nxd_ipv6_find_default_router_from_address+0xd6>
 8014e84:	f894 3db4 	ldrb.w	r3, [r4, #3508]	; 0xdb4
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d14b      	bne.n	8014f24 <_nxd_ipv6_find_default_router_from_address+0xe8>

    /* Release the lock. */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));

    /* Return a null pointer indicating no matching router found. */
    return(NX_NULL);
 8014e8c:	2400      	movs	r4, #0
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014e8e:	4630      	mov	r0, r6
 8014e90:	f007 ff1c 	bl	801cccc <_tx_mutex_put>
}
 8014e94:	4620      	mov	r0, r4
 8014e96:	bd70      	pop	{r4, r5, r6, pc}
            if (CHECK_IPV6_ADDRESSES_SAME(router_address, rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014e98:	f604 41f4 	addw	r1, r4, #3316	; 0xcf4
 8014e9c:	4628      	mov	r0, r5
 8014e9e:	f7f1 faeb 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	d0d7      	beq.n	8014e56 <_nxd_ipv6_find_default_router_from_address+0x1a>
 8014ea6:	2300      	movs	r3, #0
        rt_entry = &ip_ptr -> nx_ipv6_default_router_table[i];
 8014ea8:	f503 634f 	add.w	r3, r3, #3312	; 0xcf0
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014eac:	4630      	mov	r0, r6
        rt_entry = &ip_ptr -> nx_ipv6_default_router_table[i];
 8014eae:	441c      	add	r4, r3
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014eb0:	f007 ff0c 	bl	801cccc <_tx_mutex_put>
}
 8014eb4:	4620      	mov	r0, r4
 8014eb6:	bd70      	pop	{r4, r5, r6, pc}
            if (CHECK_IPV6_ADDRESSES_SAME(router_address, rt_entry -> nx_ipv6_default_router_entry_router_address))
 8014eb8:	f504 6151 	add.w	r1, r4, #3344	; 0xd10
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	f7f1 fadb 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d0ca      	beq.n	8014e5c <_nxd_ipv6_find_default_router_from_address+0x20>
 8014ec6:	231c      	movs	r3, #28
 8014ec8:	e7ee      	b.n	8014ea8 <_nxd_ipv6_find_default_router_from_address+0x6c>
 8014eca:	f604 512c 	addw	r1, r4, #3372	; 0xd2c
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f7f1 fad2 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d0c5      	beq.n	8014e64 <_nxd_ipv6_find_default_router_from_address+0x28>
 8014ed8:	2338      	movs	r3, #56	; 0x38
 8014eda:	e7e5      	b.n	8014ea8 <_nxd_ipv6_find_default_router_from_address+0x6c>
 8014edc:	f604 5148 	addw	r1, r4, #3400	; 0xd48
 8014ee0:	4628      	mov	r0, r5
 8014ee2:	f7f1 fac9 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d0c0      	beq.n	8014e6c <_nxd_ipv6_find_default_router_from_address+0x30>
 8014eea:	2354      	movs	r3, #84	; 0x54
 8014eec:	e7dc      	b.n	8014ea8 <_nxd_ipv6_find_default_router_from_address+0x6c>
 8014eee:	f604 5164 	addw	r1, r4, #3428	; 0xd64
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	f7f1 fac0 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	d0bb      	beq.n	8014e74 <_nxd_ipv6_find_default_router_from_address+0x38>
 8014efc:	2370      	movs	r3, #112	; 0x70
 8014efe:	e7d3      	b.n	8014ea8 <_nxd_ipv6_find_default_router_from_address+0x6c>
 8014f00:	f504 6158 	add.w	r1, r4, #3456	; 0xd80
 8014f04:	4628      	mov	r0, r5
 8014f06:	f7f1 fab7 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	d0b6      	beq.n	8014e7c <_nxd_ipv6_find_default_router_from_address+0x40>
 8014f0e:	238c      	movs	r3, #140	; 0x8c
 8014f10:	e7ca      	b.n	8014ea8 <_nxd_ipv6_find_default_router_from_address+0x6c>
 8014f12:	f604 519c 	addw	r1, r4, #3484	; 0xd9c
 8014f16:	4628      	mov	r0, r5
 8014f18:	f7f1 faae 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d0b1      	beq.n	8014e84 <_nxd_ipv6_find_default_router_from_address+0x48>
 8014f20:	23a8      	movs	r3, #168	; 0xa8
 8014f22:	e7c1      	b.n	8014ea8 <_nxd_ipv6_find_default_router_from_address+0x6c>
 8014f24:	4628      	mov	r0, r5
 8014f26:	f604 51b8 	addw	r1, r4, #3512	; 0xdb8
 8014f2a:	f7f1 faa5 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8014f2e:	2800      	cmp	r0, #0
 8014f30:	d0ac      	beq.n	8014e8c <_nxd_ipv6_find_default_router_from_address+0x50>
 8014f32:	23c4      	movs	r3, #196	; 0xc4
 8014f34:	e7b8      	b.n	8014ea8 <_nxd_ipv6_find_default_router_from_address+0x6c>
 8014f36:	bf00      	nop

08014f38 <_nxd_ipv6_find_max_prefix_length>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_find_max_prefix_length(ULONG *addr1, ULONG *addr2, UINT max_length)
{
 8014f38:	b470      	push	{r4, r5, r6}
UINT length = 0;
UINT i, j, bit, time;

    for (i = 0; i < 4; i++)
    {
        if (addr1[i] == addr2[i])
 8014f3a:	680b      	ldr	r3, [r1, #0]
 8014f3c:	6804      	ldr	r4, [r0, #0]
 8014f3e:	429c      	cmp	r4, r3
 8014f40:	d10e      	bne.n	8014f60 <_nxd_ipv6_find_max_prefix_length+0x28>
 8014f42:	6844      	ldr	r4, [r0, #4]
 8014f44:	684b      	ldr	r3, [r1, #4]
 8014f46:	429c      	cmp	r4, r3
 8014f48:	d137      	bne.n	8014fba <_nxd_ipv6_find_max_prefix_length+0x82>
 8014f4a:	6884      	ldr	r4, [r0, #8]
 8014f4c:	688b      	ldr	r3, [r1, #8]
 8014f4e:	429c      	cmp	r4, r3
 8014f50:	d135      	bne.n	8014fbe <_nxd_ipv6_find_max_prefix_length+0x86>
 8014f52:	68c4      	ldr	r4, [r0, #12]
 8014f54:	68cb      	ldr	r3, [r1, #12]
 8014f56:	429c      	cmp	r4, r3
 8014f58:	d133      	bne.n	8014fc2 <_nxd_ipv6_find_max_prefix_length+0x8a>
        {
            length += 32;
 8014f5a:	2080      	movs	r0, #128	; 0x80
        }
    }


    return(length);
}
 8014f5c:	bc70      	pop	{r4, r5, r6}
 8014f5e:	4770      	bx	lr
UINT length = 0;
 8014f60:	2000      	movs	r0, #0
        else if (length + 31 < max_length)
 8014f62:	f100 011f 	add.w	r1, r0, #31
 8014f66:	4291      	cmp	r1, r2
 8014f68:	d3f8      	bcc.n	8014f5c <_nxd_ipv6_find_max_prefix_length+0x24>
                if (addr1[i] >> bit == addr2[i] >> bit)
 8014f6a:	0c22      	lsrs	r2, r4, #16
 8014f6c:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
                    bit += time;
 8014f70:	bf0c      	ite	eq
 8014f72:	2208      	moveq	r2, #8
 8014f74:	2218      	movne	r2, #24
                if (addr1[i] >> bit == addr2[i] >> bit)
 8014f76:	fa24 f602 	lsr.w	r6, r4, r2
 8014f7a:	fa23 f502 	lsr.w	r5, r3, r2
 8014f7e:	42ae      	cmp	r6, r5
                    bit += time;
 8014f80:	bf14      	ite	ne
 8014f82:	3204      	addne	r2, #4
                    bit -= time;
 8014f84:	3a04      	subeq	r2, #4
                if (addr1[i] >> bit == addr2[i] >> bit)
 8014f86:	fa24 f502 	lsr.w	r5, r4, r2
 8014f8a:	fa23 f602 	lsr.w	r6, r3, r2
 8014f8e:	42b5      	cmp	r5, r6
                    bit += time;
 8014f90:	bf14      	ite	ne
 8014f92:	3202      	addne	r2, #2
                    bit -= time;
 8014f94:	3a02      	subeq	r2, #2
                if (addr1[i] >> bit == addr2[i] >> bit)
 8014f96:	fa24 f502 	lsr.w	r5, r4, r2
 8014f9a:	fa23 f602 	lsr.w	r6, r3, r2
 8014f9e:	42b5      	cmp	r5, r6
                    bit += time;
 8014fa0:	bf14      	ite	ne
 8014fa2:	3201      	addne	r2, #1
                    bit -= time;
 8014fa4:	f102 32ff 	addeq.w	r2, r2, #4294967295
                if (addr1[i] >> bit == addr2[i] >> bit)
 8014fa8:	40d4      	lsrs	r4, r2
 8014faa:	40d3      	lsrs	r3, r2
 8014fac:	429c      	cmp	r4, r3
 8014fae:	d001      	beq.n	8014fb4 <_nxd_ipv6_find_max_prefix_length+0x7c>
                    length += (31 - bit);
 8014fb0:	1a88      	subs	r0, r1, r2
                    break;
 8014fb2:	e7d3      	b.n	8014f5c <_nxd_ipv6_find_max_prefix_length+0x24>
 8014fb4:	3020      	adds	r0, #32
                        length += (32 - bit);
 8014fb6:	1a80      	subs	r0, r0, r2
 8014fb8:	e7d0      	b.n	8014f5c <_nxd_ipv6_find_max_prefix_length+0x24>
            length += 32;
 8014fba:	2020      	movs	r0, #32
 8014fbc:	e7d1      	b.n	8014f62 <_nxd_ipv6_find_max_prefix_length+0x2a>
 8014fbe:	2040      	movs	r0, #64	; 0x40
 8014fc0:	e7cf      	b.n	8014f62 <_nxd_ipv6_find_max_prefix_length+0x2a>
 8014fc2:	2060      	movs	r0, #96	; 0x60
 8014fc4:	e7cd      	b.n	8014f62 <_nxd_ipv6_find_max_prefix_length+0x2a>
 8014fc6:	bf00      	nop

08014fc8 <_nxd_ipv6_interface_find>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_interface_find(NX_IP *ip_ptr, ULONG *dest_address,
                              NXD_IPV6_ADDRESS **ipv6_addr, NX_INTERFACE *if_ptr)
{
 8014fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fcc:	4691      	mov	r9, r2
 8014fce:	b085      	sub	sp, #20
 8014fd0:	4605      	mov	r5, r0
UINT                          i;
NXD_IPV6_ADDRESS             *ipv6_address;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;
UINT                          start_index;
UINT                          end_index;
ULONG                         address_type = IPv6_Address_Type(dest_address);
 8014fd2:	4608      	mov	r0, r1
{
 8014fd4:	460e      	mov	r6, r1
 8014fd6:	469a      	mov	sl, r3
ULONG                         address_type = IPv6_Address_Type(dest_address);
 8014fd8:	f7f1 fac4 	bl	8006564 <IPv6_Address_Type>

    /* ipv6_addr must not be NULL. */
    NX_ASSERT(ipv6_addr != NX_NULL);
 8014fdc:	f1b9 0f00 	cmp.w	r9, #0
 8014fe0:	d039      	beq.n	8015056 <_nxd_ipv6_interface_find+0x8e>
        }
    }
#endif /* NX_ENABLE_IPV6_MULTICAST  */

    /* Loop through addresses. */
    if (address_type & IPV6_ADDRESS_UNICAST)
 8014fe2:	2800      	cmp	r0, #0
 8014fe4:	4683      	mov	fp, r0
 8014fe6:	db77      	blt.n	80150d8 <_nxd_ipv6_interface_find+0x110>
                return(NX_SUCCESS);
            }
        }
    }

    if (if_ptr)
 8014fe8:	f1ba 0f00 	cmp.w	sl, #0
 8014fec:	f000 80ba 	beq.w	8015164 <_nxd_ipv6_interface_find+0x19c>
    {

        /* Search addresses from specified interface only. */
        start_index = if_ptr -> nx_interface_index;
 8014ff0:	f89a 8007 	ldrb.w	r8, [sl, #7]
        end_index = (UINT)(if_ptr -> nx_interface_index + 1);
 8014ff4:	f108 0301 	add.w	r3, r8, #1
        start_index = 0;
        end_index = NX_MAX_PHYSICAL_INTERFACES;
    }

    /* Loop through interfaces. */
    for (i = start_index; i < end_index; i++)
 8014ff8:	4598      	cmp	r8, r3
        end_index = (UINT)(if_ptr -> nx_interface_index + 1);
 8014ffa:	9301      	str	r3, [sp, #4]
    for (i = start_index; i < end_index; i++)
 8014ffc:	d249      	bcs.n	8015092 <_nxd_ipv6_interface_find+0xca>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
            {
                continue;
            }

            if (address_type & IPV6_ADDRESS_LINKLOCAL)
 8014ffe:	f00b 0301 	and.w	r3, fp, #1
 8015002:	eb08 0788 	add.w	r7, r8, r8, lsl #2
 8015006:	9503      	str	r5, [sp, #12]
 8015008:	9300      	str	r3, [sp, #0]
 801500a:	eb05 1707 	add.w	r7, r5, r7, lsl #4

                /* Found a proper outgoing address. */
                break;
            }
            /* Check for a multicast destination address.*/
            else if (address_type & IPV6_ADDRESS_MULTICAST)
 801500e:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 8015012:	9302      	str	r3, [sp, #8]
        if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up == NX_FALSE)
 8015014:	f897 3c4e 	ldrb.w	r3, [r7, #3150]	; 0xc4e
 8015018:	2b00      	cmp	r3, #0
 801501a:	d033      	beq.n	8015084 <_nxd_ipv6_interface_find+0xbc>
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 801501c:	f8d7 4c68 	ldr.w	r4, [r7, #3176]	; 0xc68
 8015020:	b384      	cbz	r4, 8015084 <_nxd_ipv6_interface_find+0xbc>
 8015022:	9b02      	ldr	r3, [sp, #8]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d16d      	bne.n	8015104 <_nxd_ipv6_interface_find+0x13c>
 8015028:	9b00      	ldr	r3, [sp, #0]
 801502a:	b9fb      	cbnz	r3, 801506c <_nxd_ipv6_interface_find+0xa4>
 801502c:	e001      	b.n	8015032 <_nxd_ipv6_interface_find+0x6a>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 801502e:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8015030:	b344      	cbz	r4, 8015084 <_nxd_ipv6_interface_find+0xbc>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015032:	78a3      	ldrb	r3, [r4, #2]
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8015034:	f104 0108 	add.w	r1, r4, #8
 8015038:	4630      	mov	r0, r6
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 801503a:	2b04      	cmp	r3, #4
 801503c:	d1f7      	bne.n	801502e <_nxd_ipv6_interface_find+0x66>
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 801503e:	78e2      	ldrb	r2, [r4, #3]
 8015040:	f7ff ff7a 	bl	8014f38 <_nxd_ipv6_find_max_prefix_length>
                     ipv6_address -> nxd_ipv6_address_prefix_length)
 8015044:	78e3      	ldrb	r3, [r4, #3]
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8015046:	4283      	cmp	r3, r0
 8015048:	d8f1      	bhi.n	801502e <_nxd_ipv6_interface_find+0x66>
        if (ipv6_address)
        {

            /* Found a proper address. */
            *ipv6_addr = ipv6_address;
            return(NX_SUCCESS);
 801504a:	2000      	movs	r0, #0
            *ipv6_addr = ipv6_address;
 801504c:	f8c9 4000 	str.w	r4, [r9]
        }
    }

    /* No available interface. */
    return(NX_NO_INTERFACE_ADDRESS);
}
 8015050:	b005      	add	sp, #20
 8015052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NX_ASSERT(ipv6_addr != NX_NULL);
 8015056:	f04f 30ff 	mov.w	r0, #4294967295
 801505a:	f008 f8d5 	bl	801d208 <_tx_thread_sleep>
 801505e:	f04f 30ff 	mov.w	r0, #4294967295
 8015062:	f008 f8d1 	bl	801d208 <_tx_thread_sleep>
 8015066:	e7f6      	b.n	8015056 <_nxd_ipv6_interface_find+0x8e>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 8015068:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 801506a:	b15c      	cbz	r4, 8015084 <_nxd_ipv6_interface_find+0xbc>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 801506c:	78a3      	ldrb	r3, [r4, #2]
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 801506e:	f104 0008 	add.w	r0, r4, #8
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015072:	2b04      	cmp	r3, #4
 8015074:	d1f8      	bne.n	8015068 <_nxd_ipv6_interface_find+0xa0>
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 8015076:	f7f1 fa75 	bl	8006564 <IPv6_Address_Type>
 801507a:	07c0      	lsls	r0, r0, #31
 801507c:	d4e5      	bmi.n	801504a <_nxd_ipv6_interface_find+0x82>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 801507e:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8015080:	2c00      	cmp	r4, #0
 8015082:	d1f3      	bne.n	801506c <_nxd_ipv6_interface_find+0xa4>
    for (i = start_index; i < end_index; i++)
 8015084:	f108 0801 	add.w	r8, r8, #1
 8015088:	9b01      	ldr	r3, [sp, #4]
 801508a:	3750      	adds	r7, #80	; 0x50
 801508c:	4543      	cmp	r3, r8
 801508e:	d8c1      	bhi.n	8015014 <_nxd_ipv6_interface_find+0x4c>
 8015090:	9d03      	ldr	r5, [sp, #12]
    ipv6_address = ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nxd_interface_ipv6_address_list_head;
 8015092:	f8d5 4cb8 	ldr.w	r4, [r5, #3256]	; 0xcb8
    if (ipv6_address)
 8015096:	b13c      	cbz	r4, 80150a8 <_nxd_ipv6_interface_find+0xe0>
        if (CHECK_IPV6_ADDRESSES_SAME(ipv6_address -> nxd_ipv6_address, dest_address))
 8015098:	4631      	mov	r1, r6
 801509a:	f104 0008 	add.w	r0, r4, #8
 801509e:	f7f1 f9eb 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 80150a2:	2800      	cmp	r0, #0
 80150a4:	f040 8089 	bne.w	80151ba <_nxd_ipv6_interface_find+0x1f2>
    if (address_type & IPV6_ADDRESS_GLOBAL)
 80150a8:	f01b 0f04 	tst.w	fp, #4
 80150ac:	d010      	beq.n	80150d0 <_nxd_ipv6_interface_find+0x108>
 80150ae:	f105 06e0 	add.w	r6, r5, #224	; 0xe0
 80150b2:	4657      	mov	r7, sl
            if (rt_entry -> nx_ipv6_default_router_entry_flag == 0)
 80150b4:	f895 3cf0 	ldrb.w	r3, [r5, #3312]	; 0xcf0
 80150b8:	b13b      	cbz	r3, 80150ca <_nxd_ipv6_interface_find+0x102>
            if (rt_entry -> nx_ipv6_default_router_entry_interface_ptr -> nx_interface_link_up == NX_FALSE)
 80150ba:	f8d5 3d04 	ldr.w	r3, [r5, #3332]	; 0xd04
 80150be:	799a      	ldrb	r2, [r3, #6]
 80150c0:	b11a      	cbz	r2, 80150ca <_nxd_ipv6_interface_find+0x102>
            if (if_ptr && (rt_entry -> nx_ipv6_default_router_entry_interface_ptr != if_ptr))
 80150c2:	2f00      	cmp	r7, #0
 80150c4:	d052      	beq.n	801516c <_nxd_ipv6_interface_find+0x1a4>
 80150c6:	42bb      	cmp	r3, r7
 80150c8:	d050      	beq.n	801516c <_nxd_ipv6_interface_find+0x1a4>
 80150ca:	351c      	adds	r5, #28
        for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 80150cc:	42b5      	cmp	r5, r6
 80150ce:	d1f1      	bne.n	80150b4 <_nxd_ipv6_interface_find+0xec>
    return(NX_NO_INTERFACE_ADDRESS);
 80150d0:	2050      	movs	r0, #80	; 0x50
}
 80150d2:	b005      	add	sp, #20
 80150d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 80150d8:	7c2b      	ldrb	r3, [r5, #16]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d15f      	bne.n	801519e <_nxd_ipv6_interface_find+0x1d6>
 80150de:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d152      	bne.n	801518c <_nxd_ipv6_interface_find+0x1c4>
 80150e6:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	f43f af7c 	beq.w	8014fe8 <_nxd_ipv6_interface_find+0x20>
                (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address, dest_address)))
 80150f0:	4631      	mov	r1, r6
 80150f2:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80150f6:	f7f1 f9bf 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 80150fa:	2800      	cmp	r0, #0
 80150fc:	f43f af74 	beq.w	8014fe8 <_nxd_ipv6_interface_find+0x20>
 8015100:	2340      	movs	r3, #64	; 0x40
 8015102:	e054      	b.n	80151ae <_nxd_ipv6_interface_find+0x1e6>
 8015104:	9b00      	ldr	r3, [sp, #0]
 8015106:	bb1b      	cbnz	r3, 8015150 <_nxd_ipv6_interface_find+0x188>
 8015108:	e006      	b.n	8015118 <_nxd_ipv6_interface_find+0x150>
                else if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_GLOBAL)
 801510a:	f7f1 fa2b 	bl	8006564 <IPv6_Address_Type>
 801510e:	0741      	lsls	r1, r0, #29
 8015110:	d49b      	bmi.n	801504a <_nxd_ipv6_interface_find+0x82>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 8015112:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8015114:	2c00      	cmp	r4, #0
 8015116:	d0b5      	beq.n	8015084 <_nxd_ipv6_interface_find+0xbc>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015118:	78a3      	ldrb	r3, [r4, #2]
 801511a:	f104 0508 	add.w	r5, r4, #8
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 801511e:	4630      	mov	r0, r6
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015120:	2b04      	cmp	r3, #4
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8015122:	4629      	mov	r1, r5
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015124:	d1f5      	bne.n	8015112 <_nxd_ipv6_interface_find+0x14a>
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8015126:	78e2      	ldrb	r2, [r4, #3]
 8015128:	f7ff ff06 	bl	8014f38 <_nxd_ipv6_find_max_prefix_length>
                     ipv6_address -> nxd_ipv6_address_prefix_length)
 801512c:	78e3      	ldrb	r3, [r4, #3]
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 801512e:	4298      	cmp	r0, r3
                else if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_GLOBAL)
 8015130:	4628      	mov	r0, r5
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8015132:	d28a      	bcs.n	801504a <_nxd_ipv6_interface_find+0x82>
                if ((dest_address[0] & 0x000F0000) == 0x00020000)
 8015134:	6833      	ldr	r3, [r6, #0]
 8015136:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 801513a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801513e:	d1e4      	bne.n	801510a <_nxd_ipv6_interface_find+0x142>
                    if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 8015140:	f7f1 fa10 	bl	8006564 <IPv6_Address_Type>
 8015144:	07c2      	lsls	r2, r0, #31
 8015146:	d480      	bmi.n	801504a <_nxd_ipv6_interface_find+0x82>
 8015148:	e7e3      	b.n	8015112 <_nxd_ipv6_interface_find+0x14a>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 801514a:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 801514c:	2c00      	cmp	r4, #0
 801514e:	d099      	beq.n	8015084 <_nxd_ipv6_interface_find+0xbc>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015150:	78a3      	ldrb	r3, [r4, #2]
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 8015152:	f104 0008 	add.w	r0, r4, #8
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015156:	2b04      	cmp	r3, #4
 8015158:	d1f7      	bne.n	801514a <_nxd_ipv6_interface_find+0x182>
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 801515a:	f7f1 fa03 	bl	8006564 <IPv6_Address_Type>
 801515e:	07c3      	lsls	r3, r0, #31
 8015160:	d5f3      	bpl.n	801514a <_nxd_ipv6_interface_find+0x182>
 8015162:	e772      	b.n	801504a <_nxd_ipv6_interface_find+0x82>
        end_index = NX_MAX_PHYSICAL_INTERFACES;
 8015164:	2301      	movs	r3, #1
        start_index = 0;
 8015166:	46d0      	mov	r8, sl
        end_index = NX_MAX_PHYSICAL_INTERFACES;
 8015168:	9301      	str	r3, [sp, #4]
 801516a:	e748      	b.n	8014ffe <_nxd_ipv6_interface_find+0x36>
            ipv6_address = rt_entry -> nx_ipv6_default_router_entry_interface_ptr -> nxd_interface_ipv6_address_list_head;
 801516c:	6a1c      	ldr	r4, [r3, #32]
            while (ipv6_address)
 801516e:	2c00      	cmp	r4, #0
 8015170:	d0ab      	beq.n	80150ca <_nxd_ipv6_interface_find+0x102>
                if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015172:	78a3      	ldrb	r3, [r4, #2]
 8015174:	2b04      	cmp	r3, #4
 8015176:	d001      	beq.n	801517c <_nxd_ipv6_interface_find+0x1b4>
                    ipv6_address = ipv6_address -> nxd_ipv6_address_next;
 8015178:	69a4      	ldr	r4, [r4, #24]
 801517a:	e7f8      	b.n	801516e <_nxd_ipv6_interface_find+0x1a6>
                else if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 801517c:	f104 0008 	add.w	r0, r4, #8
 8015180:	f7f1 f9f0 	bl	8006564 <IPv6_Address_Type>
 8015184:	f010 0001 	ands.w	r0, r0, #1
 8015188:	d1f6      	bne.n	8015178 <_nxd_ipv6_interface_find+0x1b0>
 801518a:	e75f      	b.n	801504c <_nxd_ipv6_interface_find+0x84>
                (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address, dest_address)))
 801518c:	4631      	mov	r1, r6
 801518e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8015192:	f7f1 f971 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 8015196:	2800      	cmp	r0, #0
 8015198:	d0a5      	beq.n	80150e6 <_nxd_ipv6_interface_find+0x11e>
 801519a:	2320      	movs	r3, #32
 801519c:	e007      	b.n	80151ae <_nxd_ipv6_interface_find+0x1e6>
                (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address, dest_address)))
 801519e:	4631      	mov	r1, r6
 80151a0:	f105 0018 	add.w	r0, r5, #24
 80151a4:	f7f1 f968 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 80151a8:	2800      	cmp	r0, #0
 80151aa:	d098      	beq.n	80150de <_nxd_ipv6_interface_find+0x116>
 80151ac:	2300      	movs	r3, #0
                *ipv6_addr = &(ip_ptr -> nx_ipv6_address[i]);
 80151ae:	3310      	adds	r3, #16
                return(NX_SUCCESS);
 80151b0:	2000      	movs	r0, #0
                *ipv6_addr = &(ip_ptr -> nx_ipv6_address[i]);
 80151b2:	441d      	add	r5, r3
 80151b4:	f8c9 5000 	str.w	r5, [r9]
                return(NX_SUCCESS);
 80151b8:	e74a      	b.n	8015050 <_nxd_ipv6_interface_find+0x88>
            *ipv6_addr = ipv6_address;
 80151ba:	f8c9 4000 	str.w	r4, [r9]
            return(NX_SUCCESS);
 80151be:	2000      	movs	r0, #0
 80151c0:	e746      	b.n	8015050 <_nxd_ipv6_interface_find+0x88>
 80151c2:	bf00      	nop

080151c4 <_nxd_ipv6_router_lookup>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_router_lookup(NX_IP *ip_ptr, NX_INTERFACE *if_ptr, ULONG *router_address, void **nd_cache_entry)
{
 80151c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UINT                          table_size;
UINT                          routers_checked;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;
ND_CACHE_ENTRY               *NDCacheEntry;

    NX_ASSERT(nd_cache_entry != NX_NULL)
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	f000 8097 	beq.w	80152fc <_nxd_ipv6_router_lookup+0x138>
 80151ce:	4604      	mov	r4, r0

    /* Initialize cache pointer to NULL (if no router found). */
    *nd_cache_entry = NULL;
 80151d0:	2600      	movs	r6, #0

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_default_router_table_size;
 80151d2:	f8b0 0cec 	ldrh.w	r0, [r0, #3308]	; 0xcec
 80151d6:	4698      	mov	r8, r3
    *nd_cache_entry = NULL;
 80151d8:	601e      	str	r6, [r3, #0]

    /* Check if there have been any routers added to the table. */
    if (table_size == 0)
 80151da:	2800      	cmp	r0, #0
 80151dc:	f000 808b 	beq.w	80152f6 <_nxd_ipv6_router_lookup+0x132>

        /* Local pointer for convenience. */
        rt_entry = &(ip_ptr -> nx_ipv6_default_router_table[i]);

        /* Does this slot contain a valid router? */
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80151e0:	f994 7cf0 	ldrsb.w	r7, [r4, #3312]	; 0xcf0
 80151e4:	460d      	mov	r5, r1
 80151e6:	4611      	mov	r1, r2
 80151e8:	42b7      	cmp	r7, r6
 80151ea:	f2c0 8090 	blt.w	801530e <_nxd_ipv6_router_lookup+0x14a>
 80151ee:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	f2c0 81c2 	blt.w	801557c <_nxd_ipv6_router_lookup+0x3b8>
 80151f8:	f994 3d28 	ldrsb.w	r3, [r4, #3368]	; 0xd28
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	f2c0 819d 	blt.w	801553c <_nxd_ipv6_router_lookup+0x378>
 8015202:	f994 3d44 	ldrsb.w	r3, [r4, #3396]	; 0xd44
 8015206:	2b00      	cmp	r3, #0
 8015208:	f2c0 81a8 	blt.w	801555c <_nxd_ipv6_router_lookup+0x398>
 801520c:	f994 3d60 	ldrsb.w	r3, [r4, #3424]	; 0xd60
 8015210:	2b00      	cmp	r3, #0
 8015212:	f2c0 8183 	blt.w	801551c <_nxd_ipv6_router_lookup+0x358>
 8015216:	f994 3d7c 	ldrsb.w	r3, [r4, #3452]	; 0xd7c
 801521a:	2b00      	cmp	r3, #0
 801521c:	f2c0 816a 	blt.w	80154f4 <_nxd_ipv6_router_lookup+0x330>
 8015220:	f994 3d98 	ldrsb.w	r3, [r4, #3480]	; 0xd98
 8015224:	2b00      	cmp	r3, #0
 8015226:	f2c0 8155 	blt.w	80154d4 <_nxd_ipv6_router_lookup+0x310>
 801522a:	f994 3db4 	ldrsb.w	r3, [r4, #3508]	; 0xdb4
 801522e:	2b00      	cmp	r3, #0
 8015230:	f2c0 813f 	blt.w	80154b2 <_nxd_ipv6_router_lookup+0x2ee>
    /* If we are here, we did not find a suitable default router. Do a search
       of routers previously reachable. */

    /* Start at the round robin index so we don't always choose the first
       less-than-reachable router in the table. */
    i = ip_ptr -> nx_ipv6_default_router_table_round_robin_index;
 8015234:	f8d4 0dd0 	ldr.w	r0, [r4, #3536]	; 0xdd0

        /* Local pointer for convenience. */
        rt_entry = &(ip_ptr -> nx_ipv6_default_router_table[i]);

        /* Does this slot contain a valid router? */
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8015238:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801523c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015240:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8015244:	2b00      	cmp	r3, #0
 8015246:	f2c0 812b 	blt.w	80154a0 <_nxd_ipv6_router_lookup+0x2dc>
            /* We're done. Return successful outcome status. */
            return(NX_SUCCESS);
        }

        /* Are we past the end of the table? */
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 801524a:	2807      	cmp	r0, #7
 801524c:	f000 8103 	beq.w	8015456 <_nxd_ipv6_router_lookup+0x292>
            /* Yes, wrap to the first slot.*/
            i = 0;
        }
        else
        {
            i++;
 8015250:	1c43      	adds	r3, r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8015252:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8015256:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801525a:	f992 2cf0 	ldrsb.w	r2, [r2, #3312]	; 0xcf0
 801525e:	2a00      	cmp	r2, #0
 8015260:	f2c0 810a 	blt.w	8015478 <_nxd_ipv6_router_lookup+0x2b4>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8015264:	2b07      	cmp	r3, #7
 8015266:	f000 80db 	beq.w	8015420 <_nxd_ipv6_router_lookup+0x25c>
            i++;
 801526a:	3002      	adds	r0, #2
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801526c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8015270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015274:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8015278:	2b00      	cmp	r3, #0
 801527a:	f2c0 80f4 	blt.w	8015466 <_nxd_ipv6_router_lookup+0x2a2>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 801527e:	2807      	cmp	r0, #7
 8015280:	f000 80bd 	beq.w	80153fe <_nxd_ipv6_router_lookup+0x23a>
            i++;
 8015284:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8015286:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801528a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801528e:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8015292:	2b00      	cmp	r3, #0
 8015294:	f2c0 80cc 	blt.w	8015430 <_nxd_ipv6_router_lookup+0x26c>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8015298:	2807      	cmp	r0, #7
 801529a:	f000 8095 	beq.w	80153c8 <_nxd_ipv6_router_lookup+0x204>
            i++;
 801529e:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80152a0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80152a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80152a8:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	f2c0 80ae 	blt.w	801540e <_nxd_ipv6_router_lookup+0x24a>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 80152b2:	2807      	cmp	r0, #7
 80152b4:	d079      	beq.n	80153aa <_nxd_ipv6_router_lookup+0x1e6>
            i++;
 80152b6:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80152b8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80152bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80152c0:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	f2c0 8087 	blt.w	80153d8 <_nxd_ipv6_router_lookup+0x214>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 80152ca:	2807      	cmp	r0, #7
 80152cc:	d03f      	beq.n	801534e <_nxd_ipv6_router_lookup+0x18a>
            i++;
 80152ce:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80152d0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80152d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80152d8:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 80152dc:	2b00      	cmp	r3, #0
 80152de:	db6b      	blt.n	80153b8 <_nxd_ipv6_router_lookup+0x1f4>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 80152e0:	2807      	cmp	r0, #7
 80152e2:	d05a      	beq.n	801539a <_nxd_ipv6_router_lookup+0x1d6>
            i++;
 80152e4:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80152e6:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80152ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80152ee:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	db32      	blt.n	801535c <_nxd_ipv6_router_lookup+0x198>
        return(NX_NOT_SUCCESSFUL);
 80152f6:	2043      	movs	r0, #67	; 0x43
        }
    }

    /* Router not found. */
    return(NX_NOT_SUCCESSFUL);
}
 80152f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NX_ASSERT(nd_cache_entry != NX_NULL)
 80152fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015300:	f007 ff82 	bl	801d208 <_tx_thread_sleep>
 8015304:	f04f 30ff 	mov.w	r0, #4294967295
 8015308:	f007 ff7e 	bl	801d208 <_tx_thread_sleep>
 801530c:	e7f6      	b.n	80152fc <_nxd_ipv6_router_lookup+0x138>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801530e:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8015312:	429d      	cmp	r5, r3
 8015314:	f47f af6b 	bne.w	80151ee <_nxd_ipv6_router_lookup+0x2a>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8015318:	f8d4 3d08 	ldr.w	r3, [r4, #3336]	; 0xd08
            if (!NDCacheEntry ||
 801531c:	b11b      	cbz	r3, 8015326 <_nxd_ipv6_router_lookup+0x162>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 801531e:	7e5b      	ldrb	r3, [r3, #25]
 8015320:	3b02      	subs	r3, #2
 8015322:	2b03      	cmp	r3, #3
 8015324:	d903      	bls.n	801532e <_nxd_ipv6_router_lookup+0x16a>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8015326:	3801      	subs	r0, #1
 8015328:	f47f af61 	bne.w	80151ee <_nxd_ipv6_router_lookup+0x2a>
 801532c:	e782      	b.n	8015234 <_nxd_ipv6_router_lookup+0x70>
 801532e:	4630      	mov	r0, r6
            COPY_IPV6_ADDRESS(ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address, router_address);
 8015330:	251c      	movs	r5, #28
 8015332:	fb05 f500 	mul.w	r5, r5, r0
 8015336:	f605 40f4 	addw	r0, r5, #3316	; 0xcf4
 801533a:	4420      	add	r0, r4
            *nd_cache_entry = ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr;
 801533c:	442c      	add	r4, r5
            COPY_IPV6_ADDRESS(ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address, router_address);
 801533e:	f7f1 f8c5 	bl	80064cc <COPY_IPV6_ADDRESS>
            return(NX_SUCCESS);
 8015342:	2000      	movs	r0, #0
            *nd_cache_entry = ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8015344:	f8d4 3d08 	ldr.w	r3, [r4, #3336]	; 0xd08
 8015348:	f8c8 3000 	str.w	r3, [r8]
            return(NX_SUCCESS);
 801534c:	e7d4      	b.n	80152f8 <_nxd_ipv6_router_lookup+0x134>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801534e:	2f00      	cmp	r7, #0
 8015350:	db4b      	blt.n	80153ea <_nxd_ipv6_router_lookup+0x226>
 8015352:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
 8015356:	2b00      	cmp	r3, #0
 8015358:	dacd      	bge.n	80152f6 <_nxd_ipv6_router_lookup+0x132>
            i++;
 801535a:	2001      	movs	r0, #1
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 801535c:	231c      	movs	r3, #28
 801535e:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8015362:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8015366:	42ab      	cmp	r3, r5
 8015368:	d1c5      	bne.n	80152f6 <_nxd_ipv6_router_lookup+0x132>
            COPY_IPV6_ADDRESS(rt_entry -> nx_ipv6_default_router_entry_router_address, router_address);
 801536a:	251c      	movs	r5, #28
 801536c:	fb05 f500 	mul.w	r5, r5, r0
 8015370:	f605 40f4 	addw	r0, r5, #3316	; 0xcf4
 8015374:	4420      	add	r0, r4
 8015376:	f7f1 f8a9 	bl	80064cc <COPY_IPV6_ADDRESS>
            ip_ptr -> nx_ipv6_default_router_table_round_robin_index++;
 801537a:	f8d4 3dd0 	ldr.w	r3, [r4, #3536]	; 0xdd0
            *nd_cache_entry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 801537e:	1960      	adds	r0, r4, r5
            ip_ptr -> nx_ipv6_default_router_table_round_robin_index++;
 8015380:	3301      	adds	r3, #1
            *nd_cache_entry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8015382:	f8d0 2d08 	ldr.w	r2, [r0, #3336]	; 0xd08
                ip_ptr -> nx_ipv6_default_router_table_round_robin_index = 0;
 8015386:	2000      	movs	r0, #0
            if (ip_ptr -> nx_ipv6_default_router_table_round_robin_index == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE)
 8015388:	2b08      	cmp	r3, #8
            *nd_cache_entry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 801538a:	f8c8 2000 	str.w	r2, [r8]
            ip_ptr -> nx_ipv6_default_router_table_round_robin_index++;
 801538e:	f8c4 3dd0 	str.w	r3, [r4, #3536]	; 0xdd0
            if (ip_ptr -> nx_ipv6_default_router_table_round_robin_index == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE)
 8015392:	d1b1      	bne.n	80152f8 <_nxd_ipv6_router_lookup+0x134>
                ip_ptr -> nx_ipv6_default_router_table_round_robin_index = 0;
 8015394:	f8c4 0dd0 	str.w	r0, [r4, #3536]	; 0xdd0
 8015398:	e7ae      	b.n	80152f8 <_nxd_ipv6_router_lookup+0x134>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801539a:	2f00      	cmp	r7, #0
 801539c:	daab      	bge.n	80152f6 <_nxd_ipv6_router_lookup+0x132>
 801539e:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 80153a2:	429d      	cmp	r5, r3
 80153a4:	d1a7      	bne.n	80152f6 <_nxd_ipv6_router_lookup+0x132>
            i = 0;
 80153a6:	2000      	movs	r0, #0
 80153a8:	e7df      	b.n	801536a <_nxd_ipv6_router_lookup+0x1a6>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80153aa:	2f00      	cmp	r7, #0
 80153ac:	db22      	blt.n	80153f4 <_nxd_ipv6_router_lookup+0x230>
 80153ae:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 80153b2:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	da95      	bge.n	80152e4 <_nxd_ipv6_router_lookup+0x120>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 80153b8:	231c      	movs	r3, #28
 80153ba:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80153be:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80153c2:	429d      	cmp	r5, r3
 80153c4:	d18c      	bne.n	80152e0 <_nxd_ipv6_router_lookup+0x11c>
 80153c6:	e7d0      	b.n	801536a <_nxd_ipv6_router_lookup+0x1a6>
 80153c8:	2f00      	cmp	r7, #0
 80153ca:	db3a      	blt.n	8015442 <_nxd_ipv6_router_lookup+0x27e>
 80153cc:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 80153d0:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	f6bf af7b 	bge.w	80152ce <_nxd_ipv6_router_lookup+0x10a>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 80153d8:	231c      	movs	r3, #28
 80153da:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80153de:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80153e2:	429d      	cmp	r5, r3
 80153e4:	f47f af71 	bne.w	80152ca <_nxd_ipv6_router_lookup+0x106>
 80153e8:	e7bf      	b.n	801536a <_nxd_ipv6_router_lookup+0x1a6>
 80153ea:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 80153ee:	429d      	cmp	r5, r3
 80153f0:	d1af      	bne.n	8015352 <_nxd_ipv6_router_lookup+0x18e>
 80153f2:	e7d8      	b.n	80153a6 <_nxd_ipv6_router_lookup+0x1e2>
 80153f4:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 80153f8:	429d      	cmp	r5, r3
 80153fa:	d1d8      	bne.n	80153ae <_nxd_ipv6_router_lookup+0x1ea>
 80153fc:	e7d3      	b.n	80153a6 <_nxd_ipv6_router_lookup+0x1e2>
 80153fe:	2f00      	cmp	r7, #0
 8015400:	db24      	blt.n	801544c <_nxd_ipv6_router_lookup+0x288>
 8015402:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 8015406:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8015408:	2b00      	cmp	r3, #0
 801540a:	f6bf af54 	bge.w	80152b6 <_nxd_ipv6_router_lookup+0xf2>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 801540e:	231c      	movs	r3, #28
 8015410:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8015414:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8015418:	429d      	cmp	r5, r3
 801541a:	f47f af4a 	bne.w	80152b2 <_nxd_ipv6_router_lookup+0xee>
 801541e:	e7a4      	b.n	801536a <_nxd_ipv6_router_lookup+0x1a6>
 8015420:	2f00      	cmp	r7, #0
 8015422:	db33      	blt.n	801548c <_nxd_ipv6_router_lookup+0x2c8>
 8015424:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 8015428:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801542a:	2b00      	cmp	r3, #0
 801542c:	f6bf af37 	bge.w	801529e <_nxd_ipv6_router_lookup+0xda>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8015430:	231c      	movs	r3, #28
 8015432:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8015436:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 801543a:	429d      	cmp	r5, r3
 801543c:	f47f af2c 	bne.w	8015298 <_nxd_ipv6_router_lookup+0xd4>
 8015440:	e793      	b.n	801536a <_nxd_ipv6_router_lookup+0x1a6>
 8015442:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8015446:	429d      	cmp	r5, r3
 8015448:	d1c0      	bne.n	80153cc <_nxd_ipv6_router_lookup+0x208>
 801544a:	e7ac      	b.n	80153a6 <_nxd_ipv6_router_lookup+0x1e2>
 801544c:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8015450:	429d      	cmp	r5, r3
 8015452:	d1d6      	bne.n	8015402 <_nxd_ipv6_router_lookup+0x23e>
 8015454:	e7a7      	b.n	80153a6 <_nxd_ipv6_router_lookup+0x1e2>
 8015456:	2f00      	cmp	r7, #0
 8015458:	db1d      	blt.n	8015496 <_nxd_ipv6_router_lookup+0x2d2>
 801545a:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 801545e:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8015460:	2b00      	cmp	r3, #0
 8015462:	f6bf af0f 	bge.w	8015284 <_nxd_ipv6_router_lookup+0xc0>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8015466:	231c      	movs	r3, #28
 8015468:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801546c:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8015470:	42ab      	cmp	r3, r5
 8015472:	f47f af04 	bne.w	801527e <_nxd_ipv6_router_lookup+0xba>
 8015476:	e778      	b.n	801536a <_nxd_ipv6_router_lookup+0x1a6>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8015478:	221c      	movs	r2, #28
 801547a:	fb02 4203 	mla	r2, r2, r3, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801547e:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
 8015482:	4295      	cmp	r5, r2
 8015484:	f47f aeee 	bne.w	8015264 <_nxd_ipv6_router_lookup+0xa0>
            i++;
 8015488:	4618      	mov	r0, r3
 801548a:	e76e      	b.n	801536a <_nxd_ipv6_router_lookup+0x1a6>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801548c:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8015490:	429d      	cmp	r5, r3
 8015492:	d1c7      	bne.n	8015424 <_nxd_ipv6_router_lookup+0x260>
 8015494:	e787      	b.n	80153a6 <_nxd_ipv6_router_lookup+0x1e2>
 8015496:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 801549a:	429d      	cmp	r5, r3
 801549c:	d1dd      	bne.n	801545a <_nxd_ipv6_router_lookup+0x296>
 801549e:	e782      	b.n	80153a6 <_nxd_ipv6_router_lookup+0x1e2>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 80154a0:	231c      	movs	r3, #28
 80154a2:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80154a6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80154aa:	429d      	cmp	r5, r3
 80154ac:	f47f aecd 	bne.w	801524a <_nxd_ipv6_router_lookup+0x86>
 80154b0:	e75b      	b.n	801536a <_nxd_ipv6_router_lookup+0x1a6>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80154b2:	f8d4 3dc8 	ldr.w	r3, [r4, #3528]	; 0xdc8
 80154b6:	42ab      	cmp	r3, r5
 80154b8:	f47f aebc 	bne.w	8015234 <_nxd_ipv6_router_lookup+0x70>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 80154bc:	f8d4 3dcc 	ldr.w	r3, [r4, #3532]	; 0xdcc
            if (!NDCacheEntry ||
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	f43f aeb7 	beq.w	8015234 <_nxd_ipv6_router_lookup+0x70>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 80154c6:	7e5b      	ldrb	r3, [r3, #25]
 80154c8:	3b02      	subs	r3, #2
 80154ca:	2b03      	cmp	r3, #3
 80154cc:	f63f aeb2 	bhi.w	8015234 <_nxd_ipv6_router_lookup+0x70>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 80154d0:	2007      	movs	r0, #7
 80154d2:	e72d      	b.n	8015330 <_nxd_ipv6_router_lookup+0x16c>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80154d4:	f8d4 3dac 	ldr.w	r3, [r4, #3500]	; 0xdac
 80154d8:	429d      	cmp	r5, r3
 80154da:	f47f aea6 	bne.w	801522a <_nxd_ipv6_router_lookup+0x66>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 80154de:	f8d4 3db0 	ldr.w	r3, [r4, #3504]	; 0xdb0
            if (!NDCacheEntry ||
 80154e2:	b11b      	cbz	r3, 80154ec <_nxd_ipv6_router_lookup+0x328>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 80154e4:	7e5b      	ldrb	r3, [r3, #25]
 80154e6:	3b02      	subs	r3, #2
 80154e8:	2b03      	cmp	r3, #3
 80154ea:	d913      	bls.n	8015514 <_nxd_ipv6_router_lookup+0x350>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 80154ec:	2801      	cmp	r0, #1
 80154ee:	f47f ae9c 	bne.w	801522a <_nxd_ipv6_router_lookup+0x66>
 80154f2:	e69f      	b.n	8015234 <_nxd_ipv6_router_lookup+0x70>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80154f4:	f8d4 3d90 	ldr.w	r3, [r4, #3472]	; 0xd90
 80154f8:	429d      	cmp	r5, r3
 80154fa:	f47f ae91 	bne.w	8015220 <_nxd_ipv6_router_lookup+0x5c>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 80154fe:	f8d4 3d94 	ldr.w	r3, [r4, #3476]	; 0xd94
            if (!NDCacheEntry ||
 8015502:	b11b      	cbz	r3, 801550c <_nxd_ipv6_router_lookup+0x348>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8015504:	7e5b      	ldrb	r3, [r3, #25]
 8015506:	3b02      	subs	r3, #2
 8015508:	2b03      	cmp	r3, #3
 801550a:	d905      	bls.n	8015518 <_nxd_ipv6_router_lookup+0x354>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 801550c:	3801      	subs	r0, #1
 801550e:	f47f ae87 	bne.w	8015220 <_nxd_ipv6_router_lookup+0x5c>
 8015512:	e68f      	b.n	8015234 <_nxd_ipv6_router_lookup+0x70>
 8015514:	2006      	movs	r0, #6
 8015516:	e70b      	b.n	8015330 <_nxd_ipv6_router_lookup+0x16c>
 8015518:	2005      	movs	r0, #5
 801551a:	e709      	b.n	8015330 <_nxd_ipv6_router_lookup+0x16c>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801551c:	f8d4 3d74 	ldr.w	r3, [r4, #3444]	; 0xd74
 8015520:	429d      	cmp	r5, r3
 8015522:	f47f ae78 	bne.w	8015216 <_nxd_ipv6_router_lookup+0x52>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8015526:	f8d4 3d78 	ldr.w	r3, [r4, #3448]	; 0xd78
            if (!NDCacheEntry ||
 801552a:	b11b      	cbz	r3, 8015534 <_nxd_ipv6_router_lookup+0x370>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 801552c:	7e5b      	ldrb	r3, [r3, #25]
 801552e:	3b02      	subs	r3, #2
 8015530:	2b03      	cmp	r3, #3
 8015532:	d933      	bls.n	801559c <_nxd_ipv6_router_lookup+0x3d8>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8015534:	3801      	subs	r0, #1
 8015536:	f47f ae6e 	bne.w	8015216 <_nxd_ipv6_router_lookup+0x52>
 801553a:	e67b      	b.n	8015234 <_nxd_ipv6_router_lookup+0x70>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801553c:	f8d4 3d3c 	ldr.w	r3, [r4, #3388]	; 0xd3c
 8015540:	429d      	cmp	r5, r3
 8015542:	f47f ae5e 	bne.w	8015202 <_nxd_ipv6_router_lookup+0x3e>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8015546:	f8d4 3d40 	ldr.w	r3, [r4, #3392]	; 0xd40
            if (!NDCacheEntry ||
 801554a:	b11b      	cbz	r3, 8015554 <_nxd_ipv6_router_lookup+0x390>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 801554c:	7e5b      	ldrb	r3, [r3, #25]
 801554e:	3b02      	subs	r3, #2
 8015550:	2b03      	cmp	r3, #3
 8015552:	d927      	bls.n	80155a4 <_nxd_ipv6_router_lookup+0x3e0>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8015554:	3801      	subs	r0, #1
 8015556:	f47f ae54 	bne.w	8015202 <_nxd_ipv6_router_lookup+0x3e>
 801555a:	e66b      	b.n	8015234 <_nxd_ipv6_router_lookup+0x70>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801555c:	f8d4 3d58 	ldr.w	r3, [r4, #3416]	; 0xd58
 8015560:	429d      	cmp	r5, r3
 8015562:	f47f ae53 	bne.w	801520c <_nxd_ipv6_router_lookup+0x48>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8015566:	f8d4 3d5c 	ldr.w	r3, [r4, #3420]	; 0xd5c
            if (!NDCacheEntry ||
 801556a:	b11b      	cbz	r3, 8015574 <_nxd_ipv6_router_lookup+0x3b0>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 801556c:	7e5b      	ldrb	r3, [r3, #25]
 801556e:	3b02      	subs	r3, #2
 8015570:	2b03      	cmp	r3, #3
 8015572:	d915      	bls.n	80155a0 <_nxd_ipv6_router_lookup+0x3dc>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8015574:	3801      	subs	r0, #1
 8015576:	f47f ae49 	bne.w	801520c <_nxd_ipv6_router_lookup+0x48>
 801557a:	e65b      	b.n	8015234 <_nxd_ipv6_router_lookup+0x70>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801557c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8015580:	429d      	cmp	r5, r3
 8015582:	f47f ae39 	bne.w	80151f8 <_nxd_ipv6_router_lookup+0x34>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8015586:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
            if (!NDCacheEntry ||
 801558a:	b11b      	cbz	r3, 8015594 <_nxd_ipv6_router_lookup+0x3d0>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 801558c:	7e5b      	ldrb	r3, [r3, #25]
 801558e:	3b02      	subs	r3, #2
 8015590:	2b03      	cmp	r3, #3
 8015592:	d909      	bls.n	80155a8 <_nxd_ipv6_router_lookup+0x3e4>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8015594:	3801      	subs	r0, #1
 8015596:	f47f ae2f 	bne.w	80151f8 <_nxd_ipv6_router_lookup+0x34>
 801559a:	e64b      	b.n	8015234 <_nxd_ipv6_router_lookup+0x70>
 801559c:	2004      	movs	r0, #4
 801559e:	e6c7      	b.n	8015330 <_nxd_ipv6_router_lookup+0x16c>
 80155a0:	2003      	movs	r0, #3
 80155a2:	e6c5      	b.n	8015330 <_nxd_ipv6_router_lookup+0x16c>
 80155a4:	2002      	movs	r0, #2
 80155a6:	e6c3      	b.n	8015330 <_nxd_ipv6_router_lookup+0x16c>
 80155a8:	2001      	movs	r0, #1
 80155aa:	e6c1      	b.n	8015330 <_nxd_ipv6_router_lookup+0x16c>

080155ac <_nxd_ipv6_search_onlink>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
INT _nxd_ipv6_search_onlink(NX_IP *ip_ptr, ULONG *dest_addr)
{
 80155ac:	b570      	push	{r4, r5, r6, lr}
 80155ae:	4606      	mov	r6, r0
NXD_IPV6_ADDRESS     *ipv6_address;


    /* First special case is the link local address. All these
       addresses are onlink.  */
    if (IPv6_Address_Type(dest_addr) & IPV6_ADDRESS_LINKLOCAL)
 80155b0:	4608      	mov	r0, r1
{
 80155b2:	460d      	mov	r5, r1
    if (IPv6_Address_Type(dest_addr) & IPV6_ADDRESS_LINKLOCAL)
 80155b4:	f7f0 ffd6 	bl	8006564 <IPv6_Address_Type>
 80155b8:	07c3      	lsls	r3, r0, #31
 80155ba:	d439      	bmi.n	8015630 <_nxd_ipv6_search_onlink+0x84>
    {
        return(1);
    }

    /* Set a local pointer for convenience. */
    prefix_entry = ip_ptr -> nx_ipv6_prefix_list_ptr;
 80155bc:	f8d6 4ed4 	ldr.w	r4, [r6, #3796]	; 0xed4

    /* Loop through the prefix table. Prefixes are the IPv6 equivalent of
       network domains in IPv4.  */
    while (prefix_entry)
 80155c0:	bb7c      	cbnz	r4, 8015622 <_nxd_ipv6_search_onlink+0x76>
    for (addr_index = 0; addr_index < NX_MAX_IPV6_ADDRESSES; addr_index++)
    {

        ipv6_address = &ip_ptr -> nx_ipv6_address[addr_index];
        /* Skip invalid entries. */
        if (!(ipv6_address -> nxd_ipv6_address_valid))
 80155c2:	7c33      	ldrb	r3, [r6, #16]
 80155c4:	b153      	cbz	r3, 80155dc <_nxd_ipv6_search_onlink+0x30>
        {
            continue;
        }

        /* Skip non-manually configured entires. */
        if (ipv6_address -> nxd_ipv6_address_ConfigurationMethod != NX_IPV6_ADDRESS_MANUAL_CONFIG)
 80155c6:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 80155ca:	2b01      	cmp	r3, #1
 80155cc:	d106      	bne.n	80155dc <_nxd_ipv6_search_onlink+0x30>
        {
            continue;
        }

        /* Check whether or not the destination address is matched. */
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 80155ce:	7cf2      	ldrb	r2, [r6, #19]
 80155d0:	f106 0118 	add.w	r1, r6, #24
 80155d4:	4628      	mov	r0, r5
 80155d6:	f7f0 ff2f 	bl	8006438 <CHECK_IP_ADDRESSES_BY_PREFIX>
 80155da:	bb48      	cbnz	r0, 8015630 <_nxd_ipv6_search_onlink+0x84>
        if (!(ipv6_address -> nxd_ipv6_address_valid))
 80155dc:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80155e0:	b15b      	cbz	r3, 80155fa <_nxd_ipv6_search_onlink+0x4e>
        if (ipv6_address -> nxd_ipv6_address_ConfigurationMethod != NX_IPV6_ADDRESS_MANUAL_CONFIG)
 80155e2:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d107      	bne.n	80155fa <_nxd_ipv6_search_onlink+0x4e>
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 80155ea:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
 80155ee:	f106 0138 	add.w	r1, r6, #56	; 0x38
 80155f2:	4628      	mov	r0, r5
 80155f4:	f7f0 ff20 	bl	8006438 <CHECK_IP_ADDRESSES_BY_PREFIX>
 80155f8:	b9d0      	cbnz	r0, 8015630 <_nxd_ipv6_search_onlink+0x84>
        if (!(ipv6_address -> nxd_ipv6_address_valid))
 80155fa:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 80155fe:	b15b      	cbz	r3, 8015618 <_nxd_ipv6_search_onlink+0x6c>
        if (ipv6_address -> nxd_ipv6_address_ConfigurationMethod != NX_IPV6_ADDRESS_MANUAL_CONFIG)
 8015600:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
 8015604:	2b01      	cmp	r3, #1
 8015606:	d107      	bne.n	8015618 <_nxd_ipv6_search_onlink+0x6c>
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 8015608:	4628      	mov	r0, r5
 801560a:	f896 2053 	ldrb.w	r2, [r6, #83]	; 0x53
 801560e:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8015612:	f7f0 ff11 	bl	8006438 <CHECK_IP_ADDRESSES_BY_PREFIX>
 8015616:	b958      	cbnz	r0, 8015630 <_nxd_ipv6_search_onlink+0x84>
        }
    }


    /* No matches found. Not an onlink address. */
    return(0);
 8015618:	2000      	movs	r0, #0
}
 801561a:	bd70      	pop	{r4, r5, r6, pc}
        prefix_entry = prefix_entry -> nx_ipv6_prefix_entry_next;
 801561c:	69e4      	ldr	r4, [r4, #28]
    while (prefix_entry)
 801561e:	2c00      	cmp	r4, #0
 8015620:	d0cf      	beq.n	80155c2 <_nxd_ipv6_search_onlink+0x16>
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 8015622:	6922      	ldr	r2, [r4, #16]
 8015624:	4621      	mov	r1, r4
 8015626:	4628      	mov	r0, r5
 8015628:	f7f0 ff06 	bl	8006438 <CHECK_IP_ADDRESSES_BY_PREFIX>
 801562c:	2800      	cmp	r0, #0
 801562e:	d0f5      	beq.n	801561c <_nxd_ipv6_search_onlink+0x70>
        return(1);
 8015630:	2001      	movs	r0, #1
}
 8015632:	bd70      	pop	{r4, r5, r6, pc}

08015634 <_nxd_udp_packet_info_extract>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_packet_info_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address,
                                   UINT *protocol, UINT *port, UINT *interface_index)
{
 8015634:	b570      	push	{r4, r5, r6, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	4604      	mov	r4, r0
 801563a:	9d06      	ldr	r5, [sp, #24]
#ifdef FEATURE_NX_IPV6
NX_IPV6_HEADER *ipv6_header;
#endif /* FEATURE_NX_IPV6 */


    if (ip_address)
 801563c:	b191      	cbz	r1, 8015664 <_nxd_udp_packet_info_extract+0x30>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 801563e:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 8015642:	2e04      	cmp	r6, #4
 8015644:	d023      	beq.n	801568e <_nxd_udp_packet_info_extract+0x5a>
        }
        else
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8015646:	2e06      	cmp	r6, #6
 8015648:	d002      	beq.n	8015650 <_nxd_udp_packet_info_extract+0x1c>
        else
#endif /* FEATURE_NX_IPV6 */
        {

            /* Invalid IP version . */
            return(NX_INVALID_PACKET);
 801564a:	2012      	movs	r0, #18
    }

    *interface_index = (UINT)nx_interface -> nx_interface_index;

    return(NX_SUCCESS);
}
 801564c:	b002      	add	sp, #8
 801564e:	bd70      	pop	{r4, r5, r6, pc}
            ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8015650:	6b80      	ldr	r0, [r0, #56]	; 0x38
            ip_address -> nxd_ip_version = NX_IP_VERSION_V6;
 8015652:	f841 6b04 	str.w	r6, [r1], #4
            COPY_IPV6_ADDRESS(ipv6_header -> nx_ip_header_source_ip, ip_address -> nxd_ip_address.v6);
 8015656:	3008      	adds	r0, #8
 8015658:	e9cd 2300 	strd	r2, r3, [sp]
 801565c:	f7f0 ff36 	bl	80064cc <COPY_IPV6_ADDRESS>
 8015660:	e9dd 2300 	ldrd	r2, r3, [sp]
    if (port != NX_NULL)
 8015664:	b11b      	cbz	r3, 801566e <_nxd_udp_packet_info_extract+0x3a>
    source_port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 8015666:	68a1      	ldr	r1, [r4, #8]
 8015668:	f831 1c06 	ldrh.w	r1, [r1, #-6]
        *port = source_port;
 801566c:	6019      	str	r1, [r3, #0]
    if (protocol != NX_NULL)
 801566e:	b10a      	cbz	r2, 8015674 <_nxd_udp_packet_info_extract+0x40>
        *protocol = 0x11;
 8015670:	2311      	movs	r3, #17
 8015672:	6013      	str	r3, [r2, #0]
    if (interface_index == NX_NULL)
 8015674:	b145      	cbz	r5, 8015688 <_nxd_udp_packet_info_extract+0x54>
    *interface_index = 0xFFFFFFFF;
 8015676:	f04f 33ff 	mov.w	r3, #4294967295
 801567a:	602b      	str	r3, [r5, #0]
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 801567c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8015680:	2b04      	cmp	r3, #4
 8015682:	d00b      	beq.n	801569c <_nxd_udp_packet_info_extract+0x68>
    else if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8015684:	2b06      	cmp	r3, #6
 8015686:	d011      	beq.n	80156ac <_nxd_udp_packet_info_extract+0x78>
        return(NX_SUCCESS);
 8015688:	2000      	movs	r0, #0
}
 801568a:	b002      	add	sp, #8
 801568c:	bd70      	pop	{r4, r5, r6, pc}
            ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 801568e:	6b80      	ldr	r0, [r0, #56]	; 0x38
            ip_address -> nxd_ip_version = NX_IP_VERSION_V4;
 8015690:	600e      	str	r6, [r1, #0]
            ip_address -> nxd_ip_address.v4 = ipv4_header -> nx_ip_header_source_ip;
 8015692:	68c0      	ldr	r0, [r0, #12]
 8015694:	6048      	str	r0, [r1, #4]
    if (port != NX_NULL)
 8015696:	2b00      	cmp	r3, #0
 8015698:	d1e5      	bne.n	8015666 <_nxd_udp_packet_info_extract+0x32>
 801569a:	e7e8      	b.n	801566e <_nxd_udp_packet_info_extract+0x3a>
        nx_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 801569c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (nx_interface == NX_NULL)
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d0f2      	beq.n	8015688 <_nxd_udp_packet_info_extract+0x54>
    *interface_index = (UINT)nx_interface -> nx_interface_index;
 80156a2:	79db      	ldrb	r3, [r3, #7]
    return(NX_SUCCESS);
 80156a4:	2000      	movs	r0, #0
    *interface_index = (UINT)nx_interface -> nx_interface_index;
 80156a6:	602b      	str	r3, [r5, #0]
}
 80156a8:	b002      	add	sp, #8
 80156aa:	bd70      	pop	{r4, r5, r6, pc}
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr == NX_NULL)
 80156ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d0ea      	beq.n	8015688 <_nxd_udp_packet_info_extract+0x54>
            nx_interface = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	e7f3      	b.n	801569e <_nxd_udp_packet_info_extract+0x6a>
 80156b6:	bf00      	nop

080156b8 <_nx_icmp_interface_ping>:
/**************************************************************************/
UINT  _nx_icmp_interface_ping(NX_IP *ip_ptr, ULONG ip_address,
                              NX_INTERFACE *interface_ptr, ULONG next_hop_address,
                              CHAR *data_ptr, ULONG data_size,
                              NX_PACKET **response_ptr, ULONG wait_option)
{
 80156b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156bc:	b087      	sub	sp, #28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_PING, ip_ptr, ip_address, data_ptr, data_size, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Clear the destination pointer.  */
    *response_ptr =  NX_NULL;
 80156be:	f04f 0c00 	mov.w	ip, #0
{
 80156c2:	4698      	mov	r8, r3
 80156c4:	4604      	mov	r4, r0
    *response_ptr =  NX_NULL;
 80156c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
{
 80156c8:	460f      	mov	r7, r1
 80156ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80156cc:	4616      	mov	r6, r2

#endif /* NX_IPSEC_ENABLE */

    /* Allocate a packet to place the ICMP echo request message in.  */
    /*lint -e{845} suppress argument to operator '+' is certain to be 0, since "data_offset" can be non-zero when NX_IPSEC_ENABLE is defined. */
    status =  _nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr,
 80156ce:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 80156d2:	222c      	movs	r2, #44	; 0x2c
    *response_ptr =  NX_NULL;
 80156d4:	f8c3 c000 	str.w	ip, [r3]
    status =  _nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr,
 80156d8:	a905      	add	r1, sp, #20
 80156da:	462b      	mov	r3, r5
 80156dc:	f7f0 ffd6 	bl	800668c <_nx_packet_allocate>
                                  (ULONG)(NX_IPv4_ICMP_PACKET + data_offset + NX_ICMP_HEADER_SIZE), wait_option);
    if (status)
 80156e0:	4681      	mov	r9, r0
 80156e2:	b118      	cbz	r0, 80156ec <_nx_icmp_interface_ping+0x34>
        _tx_thread_system_preempt_check();

        /* Immediate return, return error completion.  */
        return(NX_NO_RESPONSE);
    }
}
 80156e4:	4648      	mov	r0, r9
 80156e6:	b007      	add	sp, #28
 80156e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = _nx_packet_data_append(request_ptr, (VOID *)data_ptr, data_size, ip_ptr -> nx_ip_default_packet_pool, wait_option);
 80156ec:	f8d4 3638 	ldr.w	r3, [r4, #1592]	; 0x638
 80156f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80156f2:	9805      	ldr	r0, [sp, #20]
 80156f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80156f6:	9500      	str	r5, [sp, #0]
 80156f8:	f7f1 f826 	bl	8006748 <_nx_packet_data_append>
    if (status)
 80156fc:	4681      	mov	r9, r0
 80156fe:	2800      	cmp	r0, #0
 8015700:	f040 8098 	bne.w	8015834 <_nx_icmp_interface_ping+0x17c>
    sequence =                             (ip_ptr -> nx_ip_icmp_sequence++ & NX_LOWER_16_MASK);
 8015704:	f8d4 387c 	ldr.w	r3, [r4, #2172]	; 0x87c
    NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_0);
 8015708:	f04f 0b08 	mov.w	fp, #8
    header_ptr -> nx_icmp_header_word_1 =  (ULONG)(request_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sequence;
 801570c:	6971      	ldr	r1, [r6, #20]
    sequence =                             (ip_ptr -> nx_ip_icmp_sequence++ & NX_LOWER_16_MASK);
 801570e:	fa1f fa83 	uxth.w	sl, r3
 8015712:	f103 0c01 	add.w	ip, r3, #1
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = interface_ptr;
 8015716:	9805      	ldr	r0, [sp, #20]
    header_ptr -> nx_icmp_header_word_1 =  (ULONG)(request_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sequence;
 8015718:	ea4a 4101 	orr.w	r1, sl, r1, lsl #16
    request_ptr -> nx_packet_prepend_ptr -= NX_ICMP_HEADER_SIZE;
 801571c:	f8d0 9008 	ldr.w	r9, [r0, #8]
    NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_1);
 8015720:	ea81 4331 	eor.w	r3, r1, r1, ror #16
    request_ptr -> nx_packet_length += (ULONG)NX_ICMP_HEADER_SIZE;
 8015724:	6a42      	ldr	r2, [r0, #36]	; 0x24
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = interface_ptr;
 8015726:	6346      	str	r6, [r0, #52]	; 0x34
    request_ptr -> nx_packet_prepend_ptr -= NX_ICMP_HEADER_SIZE;
 8015728:	f1a9 0e08 	sub.w	lr, r9, #8
    NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_1);
 801572c:	fa23 f30b 	lsr.w	r3, r3, fp
    if (request_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8015730:	6c36      	ldr	r6, [r6, #64]	; 0x40
    request_ptr -> nx_packet_length += (ULONG)NX_ICMP_HEADER_SIZE;
 8015732:	445a      	add	r2, fp
    request_ptr -> nx_packet_prepend_ptr -= NX_ICMP_HEADER_SIZE;
 8015734:	f8c0 e008 	str.w	lr, [r0, #8]
    NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_1);
 8015738:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    request_ptr -> nx_packet_length += (ULONG)NX_ICMP_HEADER_SIZE;
 801573c:	6242      	str	r2, [r0, #36]	; 0x24
    NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_1);
 801573e:	ea83 2131 	eor.w	r1, r3, r1, ror #8
    if (request_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8015742:	f016 0340 	ands.w	r3, r6, #64	; 0x40
    sequence =                             (ip_ptr -> nx_ip_icmp_sequence++ & NX_LOWER_16_MASK);
 8015746:	f8c4 c87c 	str.w	ip, [r4, #2172]	; 0x87c
    NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_1);
 801574a:	e949 b102 	strd	fp, r1, [r9, #-8]
    if (request_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 801574e:	d054      	beq.n	80157fa <_nx_icmp_interface_ping+0x142>
        request_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8015750:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015756:	63c3      	str	r3, [r0, #60]	; 0x3c
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8015758:	f204 6b3c 	addw	fp, r4, #1596	; 0x63c
 801575c:	f04f 31ff 	mov.w	r1, #4294967295
 8015760:	4658      	mov	r0, fp
 8015762:	f007 f9c9 	bl	801caf8 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8015766:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801576a:	b672      	cpsid	i
    _tx_thread_preempt_disable++;
 801576c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8015878 <_nx_icmp_interface_ping+0x1c0>
    thread_ptr =  _tx_thread_current_ptr;
 8015770:	493f      	ldr	r1, [pc, #252]	; (8015870 <_nx_icmp_interface_ping+0x1b8>)
    _tx_thread_preempt_disable++;
 8015772:	f8d9 3000 	ldr.w	r3, [r9]
    thread_ptr =  _tx_thread_current_ptr;
 8015776:	680e      	ldr	r6, [r1, #0]
    _tx_thread_preempt_disable++;
 8015778:	3301      	adds	r3, #1
 801577a:	f8c9 3000 	str.w	r3, [r9]
    if (wait_option)
 801577e:	b1e5      	cbz	r5, 80157ba <_nx_icmp_interface_ping+0x102>
        thread_ptr -> tx_thread_additional_suspend_info =  (void *)response_ptr;
 8015780:	9b12      	ldr	r3, [sp, #72]	; 0x48
        thread_ptr -> tx_thread_suspend_status =   NX_NO_RESPONSE;
 8015782:	2129      	movs	r1, #41	; 0x29
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_icmp_cleanup;
 8015784:	483b      	ldr	r0, [pc, #236]	; (8015874 <_nx_icmp_interface_ping+0x1bc>)
        thread_ptr -> tx_thread_suspend_control_block =  (void *)ip_ptr;
 8015786:	66f4      	str	r4, [r6, #108]	; 0x6c
        thread_ptr -> tx_thread_suspend_info =  sequence;
 8015788:	e9c6 a31e 	strd	sl, r3, [r6, #120]	; 0x78
        if (ip_ptr -> nx_ip_icmp_ping_suspension_list)
 801578c:	f8d4 38a0 	ldr.w	r3, [r4, #2208]	; 0x8a0
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_icmp_cleanup;
 8015790:	66b0      	str	r0, [r6, #104]	; 0x68
        thread_ptr -> tx_thread_suspend_status =   NX_NO_RESPONSE;
 8015792:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
        if (ip_ptr -> nx_ip_icmp_ping_suspension_list)
 8015796:	2b00      	cmp	r3, #0
 8015798:	d065      	beq.n	8015866 <_nx_icmp_interface_ping+0x1ae>
                (ip_ptr -> nx_ip_icmp_ping_suspension_list) -> tx_thread_suspended_previous;
 801579a:	6f59      	ldr	r1, [r3, #116]	; 0x74
            thread_ptr -> tx_thread_suspended_previous =
 801579c:	e9c6 311c 	strd	r3, r1, [r6, #112]	; 0x70
            ((ip_ptr -> nx_ip_icmp_ping_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80157a0:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80157a2:	670e      	str	r6, [r1, #112]	; 0x70
            (ip_ptr -> nx_ip_icmp_ping_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 80157a4:	675e      	str	r6, [r3, #116]	; 0x74
        ip_ptr -> nx_ip_icmp_ping_suspended_count++;
 80157a6:	f8d4 38a4 	ldr.w	r3, [r4, #2212]	; 0x8a4
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80157aa:	2101      	movs	r1, #1
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80157ac:	200c      	movs	r0, #12
        ip_ptr -> nx_ip_icmp_ping_suspended_count++;
 80157ae:	440b      	add	r3, r1
 80157b0:	f8c4 38a4 	str.w	r3, [r4, #2212]	; 0x8a4
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80157b4:	64f5      	str	r5, [r6, #76]	; 0x4c
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80157b6:	6330      	str	r0, [r6, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80157b8:	63b1      	str	r1, [r6, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80157ba:	f382 8810 	msr	PRIMASK, r2
    _nx_ip_packet_send(ip_ptr, request_ptr, ip_address,
 80157be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80157c2:	2180      	movs	r1, #128	; 0x80
 80157c4:	f04f 0c00 	mov.w	ip, #0
 80157c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80157cc:	9301      	str	r3, [sp, #4]
 80157ce:	463a      	mov	r2, r7
 80157d0:	9100      	str	r1, [sp, #0]
 80157d2:	4620      	mov	r0, r4
 80157d4:	4663      	mov	r3, ip
 80157d6:	9905      	ldr	r1, [sp, #20]
 80157d8:	f8cd c008 	str.w	ip, [sp, #8]
 80157dc:	f7ec fd2c 	bl	8002238 <_nx_ip_packet_send>
    if (wait_option)
 80157e0:	b37d      	cbz	r5, 8015842 <_nx_icmp_interface_ping+0x18a>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80157e2:	4658      	mov	r0, fp
 80157e4:	f007 fa72 	bl	801cccc <_tx_mutex_put>
        _tx_thread_system_suspend(thread_ptr);
 80157e8:	4630      	mov	r0, r6
 80157ea:	f007 fde7 	bl	801d3bc <_tx_thread_system_suspend>
        if (thread_ptr -> tx_thread_suspend_status == NX_SUCCESS)
 80157ee:	f8d6 9084 	ldr.w	r9, [r6, #132]	; 0x84
}
 80157f2:	4648      	mov	r0, r9
 80157f4:	b007      	add	sp, #28
 80157f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        checksum = _nx_ip_checksum_compute(request_ptr, NX_IP_ICMP,
 80157fa:	9300      	str	r3, [sp, #0]
 80157fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8015800:	f7ec fb70 	bl	8001ee4 <_nx_ip_checksum_compute>
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_0);
 8015804:	f859 2c08 	ldr.w	r2, [r9, #-8]
        header_ptr -> nx_icmp_header_word_0 =  header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8015808:	43c0      	mvns	r0, r0
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_0);
 801580a:	ea82 4332 	eor.w	r3, r2, r2, ror #16
        header_ptr -> nx_icmp_header_word_0 =  header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 801580e:	b280      	uxth	r0, r0
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_0);
 8015810:	fa23 f30b 	lsr.w	r3, r3, fp
 8015814:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015818:	ea83 2332 	eor.w	r3, r3, r2, ror #8
        header_ptr -> nx_icmp_header_word_0 =  header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 801581c:	4318      	orrs	r0, r3
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_icmp_header_word_0);
 801581e:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 8015822:	fa23 f30b 	lsr.w	r3, r3, fp
 8015826:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801582a:	ea83 2330 	eor.w	r3, r3, r0, ror #8
 801582e:	f849 3c08 	str.w	r3, [r9, #-8]
 8015832:	e791      	b.n	8015758 <_nx_icmp_interface_ping+0xa0>
        _nx_packet_release(request_ptr);
 8015834:	9805      	ldr	r0, [sp, #20]
 8015836:	f7f1 f8db 	bl	80069f0 <_nx_packet_release>
}
 801583a:	4648      	mov	r0, r9
 801583c:	b007      	add	sp, #28
 801583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8015842:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8015846:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8015848:	f8d9 3000 	ldr.w	r3, [r9]
 801584c:	3b01      	subs	r3, #1
 801584e:	f8c9 3000 	str.w	r3, [r9]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8015852:	f382 8810 	msr	PRIMASK, r2
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015856:	4658      	mov	r0, fp
        return(NX_NO_RESPONSE);
 8015858:	f04f 0929 	mov.w	r9, #41	; 0x29
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801585c:	f007 fa36 	bl	801cccc <_tx_mutex_put>
        _tx_thread_system_preempt_check();
 8015860:	f007 fd08 	bl	801d274 <_tx_thread_system_preempt_check>
        return(NX_NO_RESPONSE);
 8015864:	e73e      	b.n	80156e4 <_nx_icmp_interface_ping+0x2c>
            ip_ptr -> nx_ip_icmp_ping_suspension_list =    thread_ptr;
 8015866:	f8c4 68a0 	str.w	r6, [r4, #2208]	; 0x8a0
            thread_ptr -> tx_thread_suspended_previous =   thread_ptr;
 801586a:	e9c6 661c 	strd	r6, r6, [r6, #112]	; 0x70
 801586e:	e79a      	b.n	80157a6 <_nx_icmp_interface_ping+0xee>
 8015870:	20007a80 	.word	0x20007a80
 8015874:	08015c99 	.word	0x08015c99
 8015878:	20007a7c 	.word	0x20007a7c

0801587c <_nx_icmpv6_DAD_clear_NDCache_entry>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
void _nx_icmpv6_DAD_clear_NDCache_entry(NX_IP *ip_ptr, ULONG *ip_addr)
{
 801587c:	b500      	push	{lr}
 801587e:	b083      	sub	sp, #12

ND_CACHE_ENTRY *NDCacheEntry;

    /* Find the ND CACHE entry.  */
    if (_nx_nd_cache_find_entry(ip_ptr, ip_addr, &NDCacheEntry) == NX_SUCCESS)
 8015880:	aa01      	add	r2, sp, #4
 8015882:	f7fd f88d 	bl	80129a0 <_nx_nd_cache_find_entry>
 8015886:	b908      	cbnz	r0, 801588c <_nx_icmpv6_DAD_clear_NDCache_entry+0x10>
    {

        /*lint -e{644} suppress variable might not be initialized, since "NDCacheEntry" was initialized in _nx_nd_cache_find_entry. */
        NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INVALID;
 8015888:	9b01      	ldr	r3, [sp, #4]
 801588a:	7658      	strb	r0, [r3, #25]
    }

    return;
}
 801588c:	b003      	add	sp, #12
 801588e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015892:	bf00      	nop

08015894 <_nx_icmpv6_DAD_failure>:
UINT              ipv6_addr_index;
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */
NXD_IPV6_ADDRESS *address_ptr;

    /* Set the interface to an invalid state. */
    ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_UNKNOWN;
 8015894:	2300      	movs	r3, #0
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */

    /* Remove address from interface. */
    if (ipv6_address == ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head)
 8015896:	6848      	ldr	r0, [r1, #4]
    ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_UNKNOWN;
 8015898:	708b      	strb	r3, [r1, #2]
    ipv6_address -> nxd_ipv6_address_valid = NX_FALSE;
 801589a:	700b      	strb	r3, [r1, #0]
    ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit = 0;
 801589c:	770b      	strb	r3, [r1, #28]
    if (ipv6_address == ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head)
 801589e:	6a02      	ldr	r2, [r0, #32]
 80158a0:	428a      	cmp	r2, r1
 80158a2:	d00e      	beq.n	80158c2 <_nx_icmpv6_DAD_failure+0x2e>
        ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head = ipv6_address -> nxd_ipv6_address_next;
    }
    else
    {

        for (address_ptr = ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head;
 80158a4:	b182      	cbz	r2, 80158c8 <_nx_icmpv6_DAD_failure+0x34>
             address_ptr != NX_NULL;
             address_ptr = address_ptr -> nxd_ipv6_address_next)
        {
            if (address_ptr -> nxd_ipv6_address_next == ipv6_address)
 80158a6:	6993      	ldr	r3, [r2, #24]
 80158a8:	428b      	cmp	r3, r1
 80158aa:	d004      	beq.n	80158b6 <_nx_icmpv6_DAD_failure+0x22>
        for (address_ptr = ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head;
 80158ac:	b143      	cbz	r3, 80158c0 <_nx_icmpv6_DAD_failure+0x2c>
{
 80158ae:	461a      	mov	r2, r3
            if (address_ptr -> nxd_ipv6_address_next == ipv6_address)
 80158b0:	6993      	ldr	r3, [r2, #24]
 80158b2:	428b      	cmp	r3, r1
 80158b4:	d1fa      	bne.n	80158ac <_nx_icmpv6_DAD_failure+0x18>
            {
                address_ptr -> nxd_ipv6_address_next = ipv6_address -> nxd_ipv6_address_next;
 80158b6:	698b      	ldr	r3, [r1, #24]
 80158b8:	6193      	str	r3, [r2, #24]
        for (address_ptr = ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head;
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d1f7      	bne.n	80158ae <_nx_icmpv6_DAD_failure+0x1a>
 80158be:	4770      	bx	lr
            }
        }
    }
}
 80158c0:	4770      	bx	lr
        ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head = ipv6_address -> nxd_ipv6_address_next;
 80158c2:	6993      	ldr	r3, [r2, #24]
 80158c4:	6203      	str	r3, [r0, #32]
 80158c6:	4770      	bx	lr
 80158c8:	4770      	bx	lr
 80158ca:	bf00      	nop

080158cc <_nx_icmpv6_dest_table_add>:
/**************************************************************************/

UINT _nx_icmpv6_dest_table_add(NX_IP *ip_ptr, ULONG *destination_address,
                               NX_IPV6_DESTINATION_ENTRY **dest_entry_ptr, ULONG *next_hop,
                               ULONG path_mtu, ULONG mtu_timeout, NXD_IPV6_ADDRESS *ipv6_address)
{
 80158cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

UINT i, table_size;
UINT status;

    /* Pointers must not be NULL. */
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NX_NULL) && (next_hop != NX_NULL));
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	bf18      	it	ne
 80158d4:	2a00      	cmpne	r2, #0
{
 80158d6:	b082      	sub	sp, #8
 80158d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NX_NULL) && (next_hop != NX_NULL));
 80158da:	d001      	beq.n	80158e0 <_nx_icmpv6_dest_table_add+0x14>
 80158dc:	468a      	mov	sl, r1
 80158de:	b921      	cbnz	r1, 80158ea <_nx_icmpv6_dest_table_add+0x1e>
 80158e0:	f04f 30ff 	mov.w	r0, #4294967295
 80158e4:	f007 fc90 	bl	801d208 <_tx_thread_sleep>
 80158e8:	e7fa      	b.n	80158e0 <_nx_icmpv6_dest_table_add+0x14>

    /* Check if destination table already exist. */
    status = _nx_icmpv6_dest_table_find(ip_ptr, destination_address, dest_entry_ptr, path_mtu, mtu_timeout);
 80158ea:	9500      	str	r5, [sp, #0]
 80158ec:	461f      	mov	r7, r3
 80158ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158f0:	4604      	mov	r4, r0
 80158f2:	4691      	mov	r9, r2
 80158f4:	f000 f884 	bl	8015a00 <_nx_icmpv6_dest_table_find>

    /* Check status.  */
    if (status == NX_SUCCESS)
 80158f8:	4605      	mov	r5, r0
 80158fa:	b348      	cbz	r0, 8015950 <_nx_icmpv6_dest_table_add+0x84>
 80158fc:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;

    /* There is no invalid destination in table. */
    if (table_size == NX_IPV6_DESTINATION_TABLE_SIZE)
 8015900:	2b08      	cmp	r3, #8
 8015902:	d06e      	beq.n	80159e2 <_nx_icmpv6_dest_table_add+0x116>
    {
        return(NX_NOT_SUCCESSFUL);
    }

    /* Initialize the pointer to the table location where we will update/add information. */
    *dest_entry_ptr = NX_NULL;
 8015904:	2300      	movs	r3, #0
    /* Go through the table to find an empty slot. */
    for (i = 0; i < NX_IPV6_DESTINATION_TABLE_SIZE; i++)
    {

        /* Is this slot empty? */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015906:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    *dest_entry_ptr = NX_NULL;
 801590a:	f8c9 3000 	str.w	r3, [r9]
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 801590e:	b385      	cbz	r5, 8015972 <_nx_icmpv6_dest_table_add+0xa6>
 8015910:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8015914:	2b00      	cmp	r3, #0
 8015916:	d06c      	beq.n	80159f2 <_nx_icmpv6_dest_table_add+0x126>
 8015918:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d066      	beq.n	80159ee <_nx_icmpv6_dest_table_add+0x122>
 8015920:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8015924:	2b00      	cmp	r3, #0
 8015926:	d068      	beq.n	80159fa <_nx_icmpv6_dest_table_add+0x12e>
 8015928:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 801592c:	2b00      	cmp	r3, #0
 801592e:	d062      	beq.n	80159f6 <_nx_icmpv6_dest_table_add+0x12a>
 8015930:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8015934:	2b00      	cmp	r3, #0
 8015936:	d058      	beq.n	80159ea <_nx_icmpv6_dest_table_add+0x11e>
 8015938:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801593c:	2b00      	cmp	r3, #0
 801593e:	d052      	beq.n	80159e6 <_nx_icmpv6_dest_table_add+0x11a>
 8015940:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 8015944:	b1a3      	cbz	r3, 8015970 <_nx_icmpv6_dest_table_add+0xa4>
            break;
        }
    }

    /* Destination is not empty so i must be less than table size. */
    NX_ASSERT(i < NX_IPV6_DESTINATION_TABLE_SIZE);
 8015946:	f04f 30ff 	mov.w	r0, #4294967295
 801594a:	f007 fc5d 	bl	801d208 <_tx_thread_sleep>
 801594e:	e7fa      	b.n	8015946 <_nx_icmpv6_dest_table_add+0x7a>
        if (CHECK_IPV6_ADDRESSES_SAME(next_hop, (*dest_entry_ptr) -> nx_ipv6_destination_entry_next_hop))
 8015950:	f8d9 1000 	ldr.w	r1, [r9]
 8015954:	4638      	mov	r0, r7
 8015956:	3114      	adds	r1, #20
 8015958:	f7f0 fd8e 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 801595c:	bba8      	cbnz	r0, 80159ca <_nx_icmpv6_dest_table_add+0xfe>
            ip_ptr -> nx_ipv6_destination_table_size--;
 801595e:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            (*dest_entry_ptr) -> nx_ipv6_destination_entry_valid = 0;
 8015962:	f8d9 2000 	ldr.w	r2, [r9]
            ip_ptr -> nx_ipv6_destination_table_size--;
 8015966:	3b01      	subs	r3, #1
            (*dest_entry_ptr) -> nx_ipv6_destination_entry_valid = 0;
 8015968:	6010      	str	r0, [r2, #0]
            ip_ptr -> nx_ipv6_destination_table_size--;
 801596a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
 801596e:	e7c7      	b.n	8015900 <_nx_icmpv6_dest_table_add+0x34>
    for (i = 0; i < NX_IPV6_DESTINATION_TABLE_SIZE; i++)
 8015970:	2507      	movs	r5, #7
 8015972:	2228      	movs	r2, #40	; 0x28
       matching entry, so we handle it separately.
     */

    /* Clear out any previous data from this slot. */
    /*lint -e{669} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    memset(&ip_ptr -> nx_ipv6_destination_table[i], 0, sizeof(NX_IPV6_DESTINATION_ENTRY));
 8015974:	2100      	movs	r1, #0
 8015976:	fb02 f605 	mul.w	r6, r2, r5
 801597a:	f106 0890 	add.w	r8, r6, #144	; 0x90
 801597e:	44a0      	add	r8, r4
 8015980:	4640      	mov	r0, r8
 8015982:	f008 fe0a 	bl	801e59a <memset>

    /* Fill in the newly created table entry with the supplied and/or default information. */
    COPY_IPV6_ADDRESS(destination_address, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address);
 8015986:	f106 0194 	add.w	r1, r6, #148	; 0x94
 801598a:	4650      	mov	r0, sl
 801598c:	4421      	add	r1, r4
 801598e:	f7f0 fd9d 	bl	80064cc <COPY_IPV6_ADDRESS>

    /* Add next hop information to the entry. */
    COPY_IPV6_ADDRESS(next_hop, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop);
 8015992:	f106 01a4 	add.w	r1, r6, #164	; 0xa4

    /* Attempt to find the matching entry in the cache table. NetX Duo will need to know
       how to get a packet to the next hop, not just the destination! */
    status = _nx_nd_cache_find_entry(ip_ptr, next_hop, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 8015996:	36b4      	adds	r6, #180	; 0xb4
    COPY_IPV6_ADDRESS(next_hop, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop);
 8015998:	4638      	mov	r0, r7
 801599a:	4421      	add	r1, r4
    status = _nx_nd_cache_find_entry(ip_ptr, next_hop, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 801599c:	4426      	add	r6, r4
    COPY_IPV6_ADDRESS(next_hop, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop);
 801599e:	f7f0 fd95 	bl	80064cc <COPY_IPV6_ADDRESS>
    status = _nx_nd_cache_find_entry(ip_ptr, next_hop, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 80159a2:	4639      	mov	r1, r7
 80159a4:	4620      	mov	r0, r4
 80159a6:	4632      	mov	r2, r6
 80159a8:	f7fc fffa 	bl	80129a0 <_nx_nd_cache_find_entry>

    /* Did not find the matching entry. Try to add one. */
    if (status)
 80159ac:	b988      	cbnz	r0, 80159d2 <_nx_icmpv6_dest_table_add+0x106>
        }
    }


    /* Validate this entry to ensure it will not be overwritten with new entries. */
    ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 1;
 80159ae:	2228      	movs	r2, #40	; 0x28

    /* Update the count of destinations currently in the table. */
    ip_ptr -> nx_ipv6_destination_table_size++;
 80159b0:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
    ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 1;
 80159b4:	fb02 4505 	mla	r5, r2, r5, r4
 80159b8:	2201      	movs	r2, #1
 80159ba:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    ip_ptr -> nx_ipv6_destination_table_size++;
 80159be:	4413      	add	r3, r2
#endif  /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

    /* Set the table location pointer to the entry we just added/updated. */
    *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];

    return(NX_SUCCESS);
 80159c0:	2500      	movs	r5, #0
    ip_ptr -> nx_ipv6_destination_table_size++;
 80159c2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];
 80159c6:	f8c9 8000 	str.w	r8, [r9]
}
 80159ca:	4628      	mov	r0, r5
 80159cc:	b002      	add	sp, #8
 80159ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        status = _nx_nd_cache_add_entry(ip_ptr, next_hop, ipv6_address, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 80159d2:	4633      	mov	r3, r6
 80159d4:	4639      	mov	r1, r7
 80159d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159d8:	4620      	mov	r0, r4
 80159da:	f7fc fe81 	bl	80126e0 <_nx_nd_cache_add_entry>
        if (status)
 80159de:	2800      	cmp	r0, #0
 80159e0:	d0e5      	beq.n	80159ae <_nx_icmpv6_dest_table_add+0xe2>
        return(NX_NOT_SUCCESSFUL);
 80159e2:	2543      	movs	r5, #67	; 0x43
 80159e4:	e7f1      	b.n	80159ca <_nx_icmpv6_dest_table_add+0xfe>
    for (i = 0; i < NX_IPV6_DESTINATION_TABLE_SIZE; i++)
 80159e6:	2506      	movs	r5, #6
 80159e8:	e7c3      	b.n	8015972 <_nx_icmpv6_dest_table_add+0xa6>
 80159ea:	2505      	movs	r5, #5
 80159ec:	e7c1      	b.n	8015972 <_nx_icmpv6_dest_table_add+0xa6>
 80159ee:	2502      	movs	r5, #2
 80159f0:	e7bf      	b.n	8015972 <_nx_icmpv6_dest_table_add+0xa6>
 80159f2:	2501      	movs	r5, #1
 80159f4:	e7bd      	b.n	8015972 <_nx_icmpv6_dest_table_add+0xa6>
 80159f6:	2504      	movs	r5, #4
 80159f8:	e7bb      	b.n	8015972 <_nx_icmpv6_dest_table_add+0xa6>
 80159fa:	2503      	movs	r5, #3
 80159fc:	e7b9      	b.n	8015972 <_nx_icmpv6_dest_table_add+0xa6>
 80159fe:	bf00      	nop

08015a00 <_nx_icmpv6_dest_table_find>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_icmpv6_dest_table_find(NX_IP *ip_ptr, ULONG *destination_address, NX_IPV6_DESTINATION_ENTRY **dest_entry_ptr,
                                ULONG path_mtu, ULONG mtu_timeout)
{
 8015a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

UINT i, table_size;

    /* Destination address must be valid. */
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NULL));
 8015a04:	2900      	cmp	r1, #0
 8015a06:	d062      	beq.n	8015ace <_nx_icmpv6_dest_table_find+0xce>
 8015a08:	fab2 f682 	clz	r6, r2
 8015a0c:	4690      	mov	r8, r2
 8015a0e:	0976      	lsrs	r6, r6, #5
 8015a10:	2e00      	cmp	r6, #0
 8015a12:	d15c      	bne.n	8015ace <_nx_icmpv6_dest_table_find+0xce>

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 8015a14:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
 8015a18:	4604      	mov	r4, r0

    /* Check the destination num. */
    if (table_size == 0)
 8015a1a:	2d00      	cmp	r5, #0
 8015a1c:	d054      	beq.n	8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
    /* Loop through all entries. */
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
    {

        /* Skip invalid entries. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015a1e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8015a22:	460f      	mov	r7, r1
    *dest_entry_ptr = NX_NULL;
 8015a24:	6016      	str	r6, [r2, #0]
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015a26:	b13b      	cbz	r3, 8015a38 <_nx_icmpv6_dest_table_find+0x38>

        /* Keep track of valid entries we have checked. */
        table_size--;

        /* Check whether or not the address is the same. */
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a28:	3094      	adds	r0, #148	; 0x94
        table_size--;
 8015a2a:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a2c:	f7f0 fd24 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8015a30:	2800      	cmp	r0, #0
 8015a32:	d170      	bne.n	8015b16 <_nx_icmpv6_dest_table_find+0x116>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015a34:	2d00      	cmp	r5, #0
 8015a36:	d047      	beq.n	8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015a38:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8015a3c:	b143      	cbz	r3, 8015a50 <_nx_icmpv6_dest_table_find+0x50>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a3e:	4639      	mov	r1, r7
 8015a40:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
        table_size--;
 8015a44:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a46:	f7f0 fd17 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d161      	bne.n	8015b12 <_nx_icmpv6_dest_table_find+0x112>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015a4e:	b3dd      	cbz	r5, 8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015a50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8015a54:	b143      	cbz	r3, 8015a68 <_nx_icmpv6_dest_table_find+0x68>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a56:	4639      	mov	r1, r7
 8015a58:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
        table_size--;
 8015a5c:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a5e:	f7f0 fd0b 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8015a62:	2800      	cmp	r0, #0
 8015a64:	d153      	bne.n	8015b0e <_nx_icmpv6_dest_table_find+0x10e>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015a66:	b37d      	cbz	r5, 8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015a68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8015a6c:	b143      	cbz	r3, 8015a80 <_nx_icmpv6_dest_table_find+0x80>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a6e:	4639      	mov	r1, r7
 8015a70:	f504 7086 	add.w	r0, r4, #268	; 0x10c
        table_size--;
 8015a74:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a76:	f7f0 fcff 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8015a7a:	2800      	cmp	r0, #0
 8015a7c:	d145      	bne.n	8015b0a <_nx_icmpv6_dest_table_find+0x10a>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015a7e:	b31d      	cbz	r5, 8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015a80:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8015a84:	b13b      	cbz	r3, 8015a96 <_nx_icmpv6_dest_table_find+0x96>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a86:	4639      	mov	r1, r7
 8015a88:	f504 709a 	add.w	r0, r4, #308	; 0x134
        table_size--;
 8015a8c:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a8e:	f7f0 fcf3 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8015a92:	bbc0      	cbnz	r0, 8015b06 <_nx_icmpv6_dest_table_find+0x106>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015a94:	b1c5      	cbz	r5, 8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015a96:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8015a9a:	b13b      	cbz	r3, 8015aac <_nx_icmpv6_dest_table_find+0xac>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015a9c:	4639      	mov	r1, r7
 8015a9e:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
        table_size--;
 8015aa2:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015aa4:	f7f0 fce8 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8015aa8:	bb58      	cbnz	r0, 8015b02 <_nx_icmpv6_dest_table_find+0x102>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015aaa:	b16d      	cbz	r5, 8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015aac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015ab0:	b13b      	cbz	r3, 8015ac2 <_nx_icmpv6_dest_table_find+0xc2>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015ab2:	4639      	mov	r1, r7
 8015ab4:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 8015ab8:	f7f0 fcde 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8015abc:	b9d0      	cbnz	r0, 8015af4 <_nx_icmpv6_dest_table_find+0xf4>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015abe:	2d01      	cmp	r5, #1
 8015ac0:	d002      	beq.n	8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015ac2:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 8015ac6:	b95b      	cbnz	r3, 8015ae0 <_nx_icmpv6_dest_table_find+0xe0>
        return(NX_NOT_SUCCESSFUL);
 8015ac8:	2043      	movs	r0, #67	; 0x43
            return(NX_SUCCESS);
        }
    }

    return(NX_NOT_SUCCESSFUL);
}
 8015aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NULL));
 8015ace:	f04f 30ff 	mov.w	r0, #4294967295
 8015ad2:	f007 fb99 	bl	801d208 <_tx_thread_sleep>
 8015ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8015ada:	f007 fb95 	bl	801d208 <_tx_thread_sleep>
 8015ade:	e7f6      	b.n	8015ace <_nx_icmpv6_dest_table_find+0xce>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015ae0:	4639      	mov	r1, r7
 8015ae2:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 8015ae6:	f7f0 fcc7 	bl	8006478 <CHECK_IPV6_ADDRESSES_SAME>
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d0ec      	beq.n	8015ac8 <_nx_icmpv6_dest_table_find+0xc8>
 8015aee:	f44f 738c 	mov.w	r3, #280	; 0x118
 8015af2:	e000      	b.n	8015af6 <_nx_icmpv6_dest_table_find+0xf6>
 8015af4:	23f0      	movs	r3, #240	; 0xf0
            *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];
 8015af6:	3390      	adds	r3, #144	; 0x90
            return(NX_SUCCESS);
 8015af8:	2000      	movs	r0, #0
            *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];
 8015afa:	441c      	add	r4, r3
 8015afc:	f8c8 4000 	str.w	r4, [r8]
            return(NX_SUCCESS);
 8015b00:	e7e3      	b.n	8015aca <_nx_icmpv6_dest_table_find+0xca>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 8015b02:	23c8      	movs	r3, #200	; 0xc8
 8015b04:	e7f7      	b.n	8015af6 <_nx_icmpv6_dest_table_find+0xf6>
 8015b06:	23a0      	movs	r3, #160	; 0xa0
 8015b08:	e7f5      	b.n	8015af6 <_nx_icmpv6_dest_table_find+0xf6>
 8015b0a:	2378      	movs	r3, #120	; 0x78
 8015b0c:	e7f3      	b.n	8015af6 <_nx_icmpv6_dest_table_find+0xf6>
 8015b0e:	2350      	movs	r3, #80	; 0x50
 8015b10:	e7f1      	b.n	8015af6 <_nx_icmpv6_dest_table_find+0xf6>
 8015b12:	2328      	movs	r3, #40	; 0x28
 8015b14:	e7ef      	b.n	8015af6 <_nx_icmpv6_dest_table_find+0xf6>
 8015b16:	4633      	mov	r3, r6
 8015b18:	e7ed      	b.n	8015af6 <_nx_icmpv6_dest_table_find+0xf6>
 8015b1a:	bf00      	nop

08015b1c <_nx_ipv6_multicast_leave>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_multicast_leave(NX_IP *ip_ptr, ULONG *multicast_addr, NX_INTERFACE *nx_interface)
{
 8015b1c:	b570      	push	{r4, r5, r6, lr}
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
    driver_request.nx_ip_driver_interface = nx_interface;

    /* Obtain the IP mutex so we can search the multicast join list.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8015b1e:	f200 643c 	addw	r4, r0, #1596	; 0x63c
{
 8015b22:	b088      	sub	sp, #32
 8015b24:	4615      	mov	r5, r2
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 8015b26:	68ce      	ldr	r6, [r1, #12]
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_LEAVE;
 8015b28:	2209      	movs	r2, #9
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 8015b2a:	f243 3333 	movw	r3, #13107	; 0x3333
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8015b2e:	f04f 31ff 	mov.w	r1, #4294967295
    driver_request.nx_ip_driver_ptr = ip_ptr;
 8015b32:	9006      	str	r0, [sp, #24]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8015b34:	4620      	mov	r0, r4
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_LEAVE;
 8015b36:	9200      	str	r2, [sp, #0]
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 8015b38:	9302      	str	r3, [sp, #8]
    driver_request.nx_ip_driver_interface = nx_interface;
 8015b3a:	9507      	str	r5, [sp, #28]
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 8015b3c:	9603      	str	r6, [sp, #12]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8015b3e:	f006 ffdb 	bl	801caf8 <_tx_mutex_get>


    /* Call the device driver with the driver request. */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8015b42:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015b44:	4668      	mov	r0, sp
 8015b46:	4798      	blx	r3

    /* Release the protection over the IP instance.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015b48:	4620      	mov	r0, r4
 8015b4a:	f007 f8bf 	bl	801cccc <_tx_mutex_put>

    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
}
 8015b4e:	9801      	ldr	r0, [sp, #4]
 8015b50:	b008      	add	sp, #32
 8015b52:	bd70      	pop	{r4, r5, r6, pc}

08015b54 <_nx_ipv6_option_error>:
/*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
NX_IPV6_HEADER *ip_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;

    /* Top 2 bits of the option type indicate how we shall process this option
       in case of an error. */
    switch (option_type >> 6)
 8015b54:	0992      	lsrs	r2, r2, #6
 8015b56:	2a02      	cmp	r2, #2
 8015b58:	d00d      	beq.n	8015b76 <_nx_ipv6_option_error+0x22>
 8015b5a:	2a03      	cmp	r2, #3
 8015b5c:	d004      	beq.n	8015b68 <_nx_ipv6_option_error+0x14>
UINT rv = NX_SUCCESS;
 8015b5e:	2a01      	cmp	r2, #1
 8015b60:	bf0c      	ite	eq
 8015b62:	2054      	moveq	r0, #84	; 0x54
 8015b64:	2000      	movne	r0, #0
 8015b66:	4770      	bx	lr
    {

    case 3: /* Discard the packet and send ICMP Parameter Problem to unicast address */
        if ((ip_header_ptr -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 8015b68:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8015b6a:	6992      	ldr	r2, [r2, #24]
 8015b6c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8015b70:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8015b74:	d006      	beq.n	8015b84 <_nx_ipv6_option_error+0x30>
    /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
    case 2: /* Discard the packet and send ICMP Parameter Problem */

#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE

        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 2, (ULONG)(offset + sizeof(NX_IPV6_HEADER)));
 8015b76:	4a04      	ldr	r2, [pc, #16]	; (8015b88 <_nx_ipv6_option_error+0x34>)
{
 8015b78:	b508      	push	{r3, lr}
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 2, (ULONG)(offset + sizeof(NX_IPV6_HEADER)));
 8015b7a:	3328      	adds	r3, #40	; 0x28
 8015b7c:	f7fa fc36 	bl	80103ec <_nx_icmpv6_send_error_message>

    /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
    case 1: /* Discard the packet */

        /* Error status - Drop the packet */
        rv = NX_OPTION_HEADER_ERROR;
 8015b80:	2054      	movs	r0, #84	; 0x54
    default:
        break;
    }

    return(rv);
}
 8015b82:	bd08      	pop	{r3, pc}
            rv = NX_OPTION_HEADER_ERROR;
 8015b84:	2054      	movs	r0, #84	; 0x54
}
 8015b86:	4770      	bx	lr
 8015b88:	04020000 	.word	0x04020000

08015b8c <_nx_tcp_mss_option_get>:
{

ULONG option_length;

    /* Initialize the value.  */
    *mss = 0;
 8015b8c:	2300      	movs	r3, #0

    /* Loop through the option area looking for the MSS.  */
    while (option_area_size >= 4)
 8015b8e:	2903      	cmp	r1, #3
    *mss = 0;
 8015b90:	6013      	str	r3, [r2, #0]
    while (option_area_size >= 4)
 8015b92:	d92a      	bls.n	8015bea <_nx_tcp_mss_option_get+0x5e>
{
 8015b94:	b410      	push	{r4}
    {

        /* Is the current character the MSS type?  */
        if (*option_ptr == NX_TCP_MSS_KIND)
 8015b96:	7803      	ldrb	r3, [r0, #0]
 8015b98:	4604      	mov	r4, r0
 8015b9a:	2b02      	cmp	r3, #2
 8015b9c:	d00e      	beq.n	8015bbc <_nx_tcp_mss_option_get+0x30>
        }

        /* Otherwise, process relative to the option type.  */

        /* Check for end of list.  */
        if (*option_ptr == NX_TCP_EOL_KIND)
 8015b9e:	b1c3      	cbz	r3, 8015bd2 <_nx_tcp_mss_option_get+0x46>
            /* Yes, end of list, get out!  */
            break;
        }

        /* Check for NOP.  */
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 8015ba0:	2b01      	cmp	r3, #1
 8015ba2:	d012      	beq.n	8015bca <_nx_tcp_mss_option_get+0x3e>
        }
        else
        {

            /* Derive the option length.  */
            option_length =  ((ULONG)*option_ptr);
 8015ba4:	7860      	ldrb	r0, [r4, #1]
            {
                return(NX_FALSE);
            }

            /* Move the option pointer forward.  */
            option_ptr =  option_ptr + (option_length - 1);
 8015ba6:	4404      	add	r4, r0
            if (option_length == 0)
 8015ba8:	b160      	cbz	r0, 8015bc4 <_nx_tcp_mss_option_get+0x38>

            /* Determine if this is greater than the option area size.  */
            if (option_length > option_area_size)
 8015baa:	4288      	cmp	r0, r1
            {
                return(NX_FALSE);
            }
            else
            {
                option_area_size =  option_area_size - option_length;
 8015bac:	eba1 0100 	sub.w	r1, r1, r0
            if (option_length > option_area_size)
 8015bb0:	d807      	bhi.n	8015bc2 <_nx_tcp_mss_option_get+0x36>
    while (option_area_size >= 4)
 8015bb2:	2903      	cmp	r1, #3
 8015bb4:	d90d      	bls.n	8015bd2 <_nx_tcp_mss_option_get+0x46>
        if (*option_ptr == NX_TCP_MSS_KIND)
 8015bb6:	7823      	ldrb	r3, [r4, #0]
 8015bb8:	2b02      	cmp	r3, #2
 8015bba:	d1f0      	bne.n	8015b9e <_nx_tcp_mss_option_get+0x12>
            if (*option_ptr++ != 4)
 8015bbc:	7863      	ldrb	r3, [r4, #1]
 8015bbe:	2b04      	cmp	r3, #4
 8015bc0:	d00b      	beq.n	8015bda <_nx_tcp_mss_option_get+0x4e>
                return(NX_FALSE);
 8015bc2:	2000      	movs	r0, #0
        }
    }

    /* Return.  */
    return(NX_TRUE);
}
 8015bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bc8:	4770      	bx	lr
            option_area_size--;
 8015bca:	3901      	subs	r1, #1
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 8015bcc:	3401      	adds	r4, #1
    while (option_area_size >= 4)
 8015bce:	2903      	cmp	r1, #3
 8015bd0:	d8f1      	bhi.n	8015bb6 <_nx_tcp_mss_option_get+0x2a>
    return(NX_TRUE);
 8015bd2:	2001      	movs	r0, #1
}
 8015bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bd8:	4770      	bx	lr
            *mss = (ULONG)*option_ptr++;
 8015bda:	78a1      	ldrb	r1, [r4, #2]
    return(NX_TRUE);
 8015bdc:	2001      	movs	r0, #1
            *mss = (ULONG)*option_ptr++;
 8015bde:	6011      	str	r1, [r2, #0]
            *mss = (*mss << 8) | (ULONG)*option_ptr;
 8015be0:	78e3      	ldrb	r3, [r4, #3]
 8015be2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8015be6:	6013      	str	r3, [r2, #0]
            break;
 8015be8:	e7ec      	b.n	8015bc4 <_nx_tcp_mss_option_get+0x38>
    return(NX_TRUE);
 8015bea:	2001      	movs	r0, #1
}
 8015bec:	4770      	bx	lr
 8015bee:	bf00      	nop

08015bf0 <_nx_tcp_no_connection_reset>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_no_connection_reset(NX_IP *ip_ptr, NX_PACKET *packet_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 8015bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bf2:	b0d1      	sub	sp, #324	; 0x144
 8015bf4:	460e      	mov	r6, r1
 8015bf6:	4607      	mov	r7, r0
 8015bf8:	4614      	mov	r4, r2
ULONG         data_offset = 0;
#endif /* NX_IPSEC_ENABLE */


    /* Clear the fake socket first.  */
    memset((void *)&fake_socket, 0, sizeof(NX_TCP_SOCKET));
 8015bfa:	a801      	add	r0, sp, #4
 8015bfc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8015c00:	2100      	movs	r1, #0
 8015c02:	f008 fcca 	bl	801e59a <memset>
    /* Build a fake socket so we can send a reset TCP requests that are not valid.  */
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;

    /* Set the connection IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8015c06:	f896 5030 	ldrb.w	r5, [r6, #48]	; 0x30
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;
 8015c0a:	972c      	str	r7, [sp, #176]	; 0xb0
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8015c0c:	2d04      	cmp	r5, #4
 8015c0e:	d01c      	beq.n	8015c4a <_nx_tcp_no_connection_reset+0x5a>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8015c10:	2d06      	cmp	r5, #6
 8015c12:	d029      	beq.n	8015c68 <_nx_tcp_no_connection_reset+0x78>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* FEATURE_NX_IPV6 */

    /* Set the source port and destination port.  */
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 8015c14:	6823      	ldr	r3, [r4, #0]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);

    /* Set the sequence number only if the incoming segment does not have the ACK flag, according to
       Section 3.4, "Reset Generation" on page 37, RFC793. */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 8015c16:	68e2      	ldr	r2, [r4, #12]
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 8015c18:	b299      	uxth	r1, r3
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 8015c1a:	0c1b      	lsrs	r3, r3, #16
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 8015c1c:	9104      	str	r1, [sp, #16]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 8015c1e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 8015c20:	02d3      	lsls	r3, r2, #11
 8015c22:	d40a      	bmi.n	8015c3a <_nx_tcp_no_connection_reset+0x4a>
    {
        /* Get the header length.  */
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

        /* Update sequence number to set the reset acknowledge number.  */
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 8015c24:	6a70      	ldr	r0, [r6, #36]	; 0x24
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8015c26:	0f11      	lsrs	r1, r2, #28
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 8015c28:	6863      	ldr	r3, [r4, #4]

        /* Check the SYN and FIN bits.  */
        if (tcp_header_ptr -> nx_tcp_header_word_3 & (NX_TCP_SYN_BIT | NX_TCP_FIN_BIT))
 8015c2a:	f412 3f40 	tst.w	r2, #196608	; 0x30000
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 8015c2e:	4403      	add	r3, r0
 8015c30:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
        {

            /* Update sequence number to set the reset acknowledge number.  */
            tcp_header_ptr -> nx_tcp_sequence_number++;
 8015c34:	bf18      	it	ne
 8015c36:	3301      	addne	r3, #1
 8015c38:	6063      	str	r3, [r4, #4]
            fake_socket.nx_tcp_socket_egress_sa_data_offset = 0;
        }
    }
#endif

    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 8015c3a:	2380      	movs	r3, #128	; 0x80

    /* Send a RST to indicate the connection was not available.  */
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 8015c3c:	4621      	mov	r1, r4
 8015c3e:	a801      	add	r0, sp, #4
    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 8015c40:	932e      	str	r3, [sp, #184]	; 0xb8
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 8015c42:	f7fd fbfb 	bl	801343c <_nx_tcp_packet_send_rst>
}
 8015c46:	b051      	add	sp, #324	; 0x144
 8015c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8015c4a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 8015c4c:	4638      	mov	r0, r7
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8015c4e:	6b77      	ldr	r7, [r6, #52]	; 0x34
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 8015c50:	ab0f      	add	r3, sp, #60	; 0x3c
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 8015c52:	68d1      	ldr	r1, [r2, #12]
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 8015c54:	aa0e      	add	r2, sp, #56	; 0x38
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8015c56:	970e      	str	r7, [sp, #56]	; 0x38
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 8015c58:	e9cd 5106 	strd	r5, r1, [sp, #24]
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 8015c5c:	f7ec fb2c 	bl	80022b8 <_nx_ip_route_find>
 8015c60:	f896 5030 	ldrb.w	r5, [r6, #48]	; 0x30
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8015c64:	2d06      	cmp	r5, #6
 8015c66:	d1d5      	bne.n	8015c14 <_nx_tcp_no_connection_reset+0x24>
        ipv6_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8015c68:	6bb0      	ldr	r0, [r6, #56]	; 0x38
        COPY_IPV6_ADDRESS(&ipv6_header_ptr -> nx_ip_header_source_ip[0], fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8015c6a:	a907      	add	r1, sp, #28
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V6;
 8015c6c:	9506      	str	r5, [sp, #24]
        COPY_IPV6_ADDRESS(&ipv6_header_ptr -> nx_ip_header_source_ip[0], fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8015c6e:	3008      	adds	r0, #8
 8015c70:	f7f0 fc2c 	bl	80064cc <COPY_IPV6_ADDRESS>
        fake_socket.nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8015c74:	6b73      	ldr	r3, [r6, #52]	; 0x34
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8015c76:	685a      	ldr	r2, [r3, #4]
        fake_socket.nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8015c78:	934f      	str	r3, [sp, #316]	; 0x13c
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8015c7a:	920e      	str	r2, [sp, #56]	; 0x38
 8015c7c:	e7ca      	b.n	8015c14 <_nx_tcp_no_connection_reset+0x24>
 8015c7e:	bf00      	nop

08015c80 <_nx_udp_socket_send>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 8015c80:	b510      	push	{r4, lr}
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 8015c82:	2404      	movs	r4, #4
{
 8015c84:	b086      	sub	sp, #24
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 8015c86:	9202      	str	r2, [sp, #8]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 8015c88:	eb0d 0204 	add.w	r2, sp, r4
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 8015c8c:	9401      	str	r4, [sp, #4]
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 8015c8e:	f7f9 f92f 	bl	800eef0 <_nxd_udp_socket_send>
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 8015c92:	b006      	add	sp, #24
 8015c94:	bd10      	pop	{r4, pc}
 8015c96:	bf00      	nop

08015c98 <_nx_icmp_cleanup>:
NX_IP *ip_ptr;

    NX_CLEANUP_EXTENSION

    /* Setup pointer to IP control block.  */
    ip_ptr =  (NX_IP *)thread_ptr -> tx_thread_suspend_control_block;
 8015c98:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8015c9a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8015c9e:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (ip_ptr) &&
 8015ca0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8015ca2:	b152      	cbz	r2, 8015cba <_nx_icmp_cleanup+0x22>
 8015ca4:	b14b      	cbz	r3, 8015cba <_nx_icmp_cleanup+0x22>
 8015ca6:	4a1a      	ldr	r2, [pc, #104]	; (8015d10 <_nx_icmp_cleanup+0x78>)
{
 8015ca8:	b410      	push	{r4}
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (ip_ptr) &&
 8015caa:	681c      	ldr	r4, [r3, #0]
 8015cac:	4294      	cmp	r4, r2
 8015cae:	d007      	beq.n	8015cc0 <_nx_icmp_cleanup+0x28>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8015cb0:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8015cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cb8:	4770      	bx	lr
 8015cba:	f381 8810 	msr	PRIMASK, r1
 8015cbe:	4770      	bx	lr
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8015cc0:	6f02      	ldr	r2, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8015cc2:	2400      	movs	r4, #0
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8015cc4:	4282      	cmp	r2, r0
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8015cc6:	6684      	str	r4, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8015cc8:	d01e      	beq.n	8015d08 <_nx_icmp_cleanup+0x70>
            if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 8015cca:	f8d3 48a0 	ldr.w	r4, [r3, #2208]	; 0x8a0
 8015cce:	4284      	cmp	r4, r0
                thread_ptr -> tx_thread_suspended_previous;
 8015cd0:	6f44      	ldr	r4, [r0, #116]	; 0x74
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8015cd2:	bf08      	it	eq
 8015cd4:	f8c3 28a0 	streq.w	r2, [r3, #2208]	; 0x8a0
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8015cd8:	6754      	str	r4, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8015cda:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8015cdc:	6722      	str	r2, [r4, #112]	; 0x70
        ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8015cde:	f8d3 28a4 	ldr.w	r2, [r3, #2212]	; 0x8a4
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8015ce2:	6b04      	ldr	r4, [r0, #48]	; 0x30
        ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8015ce4:	3a01      	subs	r2, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8015ce6:	2c0c      	cmp	r4, #12
        ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8015ce8:	f8c3 28a4 	str.w	r2, [r3, #2212]	; 0x8a4
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8015cec:	d1e0      	bne.n	8015cb0 <_nx_icmp_cleanup+0x18>
            _tx_thread_preempt_disable++;
 8015cee:	4a09      	ldr	r2, [pc, #36]	; (8015d14 <_nx_icmp_cleanup+0x7c>)
            thread_ptr -> tx_thread_suspend_status =  NX_NO_RESPONSE;
 8015cf0:	2429      	movs	r4, #41	; 0x29
            _tx_thread_preempt_disable++;
 8015cf2:	6813      	ldr	r3, [r2, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_NO_RESPONSE;
 8015cf4:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	6013      	str	r3, [r2, #0]
 8015cfc:	f381 8810 	msr	PRIMASK, r1
}
 8015d00:	f85d 4b04 	ldr.w	r4, [sp], #4
            _tx_thread_system_resume(thread_ptr);
 8015d04:	f007 bad4 	b.w	801d2b0 <_tx_thread_system_resume>
            ip_ptr -> nx_ip_icmp_ping_suspension_list =  TX_NULL;
 8015d08:	f8c3 48a0 	str.w	r4, [r3, #2208]	; 0x8a0
 8015d0c:	e7e7      	b.n	8015cde <_nx_icmp_cleanup+0x46>
 8015d0e:	bf00      	nop
 8015d10:	49502020 	.word	0x49502020
 8015d14:	20007a7c 	.word	0x20007a7c

08015d18 <_fxe_directory_information_get>:
/**************************************************************************/
UINT  _fxe_directory_information_get(FX_MEDIA *media_ptr, CHAR *directory_name,
                                     UINT *attributes, ULONG *size,
                                     UINT *year, UINT *month, UINT *day,
                                     UINT *hour, UINT *minute, UINT *second)
{
 8015d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d1c:	ac07      	add	r4, sp, #28
 8015d1e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8015d22:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8015d26:	e894 5030 	ldmia.w	r4, {r4, r5, ip, lr}

UINT status;


    /* Check for a null media pointer or all null return parameter pointers.  */
    if ((media_ptr == FX_NULL) ||
 8015d2a:	b360      	cbz	r0, 8015d86 <_fxe_directory_information_get+0x6e>
 8015d2c:	b972      	cbnz	r2, 8015d4c <_fxe_directory_information_get+0x34>
 8015d2e:	b96b      	cbnz	r3, 8015d4c <_fxe_directory_information_get+0x34>
        ((attributes == FX_NULL) && (size == FX_NULL) && (year == FX_NULL) && (month == FX_NULL) &&
 8015d30:	b964      	cbnz	r4, 8015d4c <_fxe_directory_information_get+0x34>
 8015d32:	b95d      	cbnz	r5, 8015d4c <_fxe_directory_information_get+0x34>
         (day == FX_NULL) && (hour == FX_NULL) && (minute == FX_NULL) && (second == FX_NULL)))
 8015d34:	f1bc 0f00 	cmp.w	ip, #0
 8015d38:	d108      	bne.n	8015d4c <_fxe_directory_information_get+0x34>
 8015d3a:	f1be 0f00 	cmp.w	lr, #0
 8015d3e:	d105      	bne.n	8015d4c <_fxe_directory_information_get+0x34>
 8015d40:	f1b8 0f00 	cmp.w	r8, #0
 8015d44:	d102      	bne.n	8015d4c <_fxe_directory_information_get+0x34>
 8015d46:	f1b9 0f00 	cmp.w	r9, #0
 8015d4a:	d01c      	beq.n	8015d86 <_fxe_directory_information_get+0x6e>
__attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
{

unsigned int  ipsr_value;

    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015d4c:	f3ef 8605 	mrs	r6, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8015d50:	4f0e      	ldr	r7, [pc, #56]	; (8015d8c <_fxe_directory_information_get+0x74>)
 8015d52:	683f      	ldr	r7, [r7, #0]
 8015d54:	433e      	orrs	r6, r7
 8015d56:	d113      	bne.n	8015d80 <_fxe_directory_information_get+0x68>
 8015d58:	4e0d      	ldr	r6, [pc, #52]	; (8015d90 <_fxe_directory_information_get+0x78>)
 8015d5a:	4f0e      	ldr	r7, [pc, #56]	; (8015d94 <_fxe_directory_information_get+0x7c>)
 8015d5c:	6836      	ldr	r6, [r6, #0]
 8015d5e:	42be      	cmp	r6, r7
 8015d60:	d00e      	beq.n	8015d80 <_fxe_directory_information_get+0x68>
 8015d62:	b16e      	cbz	r6, 8015d80 <_fxe_directory_information_get+0x68>

    /* Call actual directory information get service.  */
    status =  _fx_directory_information_get(media_ptr, directory_name, attributes, size,
 8015d64:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015d68:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8015d6c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8015d70:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8015d74:	9508      	str	r5, [sp, #32]
 8015d76:	9407      	str	r4, [sp, #28]
                                            year, month, day, hour, minute, second);

    /* Directory information get is complete, return status.  */
    return(status);
}
 8015d78:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status =  _fx_directory_information_get(media_ptr, directory_name, attributes, size,
 8015d7c:	f000 b8f2 	b.w	8015f64 <_fx_directory_information_get>
    FX_CALLER_CHECKING_CODE
 8015d80:	2020      	movs	r0, #32
}
 8015d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(FX_PTR_ERROR);
 8015d86:	2018      	movs	r0, #24
}
 8015d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d8c:	200000ec 	.word	0x200000ec
 8015d90:	20007a80 	.word	0x20007a80
 8015d94:	20007b28 	.word	0x20007b28

08015d98 <_fxe_file_close>:

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8015d98:	b178      	cbz	r0, 8015dba <_fxe_file_close+0x22>
 8015d9a:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8015d9e:	4a08      	ldr	r2, [pc, #32]	; (8015dc0 <_fxe_file_close+0x28>)
 8015da0:	6812      	ldr	r2, [r2, #0]
 8015da2:	4313      	orrs	r3, r2
 8015da4:	d107      	bne.n	8015db6 <_fxe_file_close+0x1e>
 8015da6:	4b07      	ldr	r3, [pc, #28]	; (8015dc4 <_fxe_file_close+0x2c>)
 8015da8:	4a07      	ldr	r2, [pc, #28]	; (8015dc8 <_fxe_file_close+0x30>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	4293      	cmp	r3, r2
 8015dae:	d002      	beq.n	8015db6 <_fxe_file_close+0x1e>
 8015db0:	b10b      	cbz	r3, 8015db6 <_fxe_file_close+0x1e>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 8015db2:	f000 bc31 	b.w	8016618 <_fx_file_close>
    FX_CALLER_CHECKING_CODE
 8015db6:	2020      	movs	r0, #32

    /* Return status to the caller.  */
    return(status);
}
 8015db8:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8015dba:	2018      	movs	r0, #24
 8015dbc:	4770      	bx	lr
 8015dbe:	bf00      	nop
 8015dc0:	200000ec 	.word	0x200000ec
 8015dc4:	20007a80 	.word	0x20007a80
 8015dc8:	20007b28 	.word	0x20007b28

08015dcc <_fxe_file_create>:

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8015dcc:	b178      	cbz	r0, 8015dee <_fxe_file_create+0x22>
 8015dce:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8015dd2:	4a08      	ldr	r2, [pc, #32]	; (8015df4 <_fxe_file_create+0x28>)
 8015dd4:	6812      	ldr	r2, [r2, #0]
 8015dd6:	4313      	orrs	r3, r2
 8015dd8:	d107      	bne.n	8015dea <_fxe_file_create+0x1e>
 8015dda:	4b07      	ldr	r3, [pc, #28]	; (8015df8 <_fxe_file_create+0x2c>)
 8015ddc:	4a07      	ldr	r2, [pc, #28]	; (8015dfc <_fxe_file_create+0x30>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	4293      	cmp	r3, r2
 8015de2:	d002      	beq.n	8015dea <_fxe_file_create+0x1e>
 8015de4:	b10b      	cbz	r3, 8015dea <_fxe_file_create+0x1e>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 8015de6:	f000 bc85 	b.w	80166f4 <_fx_file_create>
    FX_CALLER_CHECKING_CODE
 8015dea:	2020      	movs	r0, #32

    /* File create is complete, return status.  */
    return(status);
}
 8015dec:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8015dee:	2018      	movs	r0, #24
 8015df0:	4770      	bx	lr
 8015df2:	bf00      	nop
 8015df4:	200000ec 	.word	0x200000ec
 8015df8:	20007a80 	.word	0x20007a80
 8015dfc:	20007b28 	.word	0x20007b28

08015e00 <_fxe_file_delete>:

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8015e00:	b178      	cbz	r0, 8015e22 <_fxe_file_delete+0x22>
 8015e02:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8015e06:	4a08      	ldr	r2, [pc, #32]	; (8015e28 <_fxe_file_delete+0x28>)
 8015e08:	6812      	ldr	r2, [r2, #0]
 8015e0a:	4313      	orrs	r3, r2
 8015e0c:	d107      	bne.n	8015e1e <_fxe_file_delete+0x1e>
 8015e0e:	4b07      	ldr	r3, [pc, #28]	; (8015e2c <_fxe_file_delete+0x2c>)
 8015e10:	4a07      	ldr	r2, [pc, #28]	; (8015e30 <_fxe_file_delete+0x30>)
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	4293      	cmp	r3, r2
 8015e16:	d002      	beq.n	8015e1e <_fxe_file_delete+0x1e>
 8015e18:	b10b      	cbz	r3, 8015e1e <_fxe_file_delete+0x1e>

    /* Call actual file delete service.  */
    status =  _fx_file_delete(media_ptr, file_name);
 8015e1a:	f000 bd07 	b.w	801682c <_fx_file_delete>
    FX_CALLER_CHECKING_CODE
 8015e1e:	2020      	movs	r0, #32

    /* File delete is complete, return status.  */
    return(status);
}
 8015e20:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8015e22:	2018      	movs	r0, #24
 8015e24:	4770      	bx	lr
 8015e26:	bf00      	nop
 8015e28:	200000ec 	.word	0x200000ec
 8015e2c:	20007a80 	.word	0x20007a80
 8015e30:	20007b28 	.word	0x20007b28

08015e34 <_fxe_file_open>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 8015e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e38:	9e06      	ldr	r6, [sp, #24]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 8015e3a:	b388      	cbz	r0, 8015ea0 <_fxe_file_open+0x6c>
 8015e3c:	4c23      	ldr	r4, [pc, #140]	; (8015ecc <_fxe_file_open+0x98>)
 8015e3e:	6805      	ldr	r5, [r0, #0]
 8015e40:	42a5      	cmp	r5, r4
 8015e42:	d12d      	bne.n	8015ea0 <_fxe_file_open+0x6c>
 8015e44:	b361      	cbz	r1, 8015ea0 <_fxe_file_open+0x6c>
 8015e46:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 8015e4a:	d129      	bne.n	8015ea0 <_fxe_file_open+0x6c>
    {
        return(FX_PTR_ERROR);
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8015e4c:	2b02      	cmp	r3, #2
 8015e4e:	d82d      	bhi.n	8015eac <_fxe_file_open+0x78>
 8015e50:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_ACCESS_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8015e54:	4d1e      	ldr	r5, [pc, #120]	; (8015ed0 <_fxe_file_open+0x9c>)
 8015e56:	682d      	ldr	r5, [r5, #0]
 8015e58:	432c      	orrs	r4, r5
 8015e5a:	d124      	bne.n	8015ea6 <_fxe_file_open+0x72>
 8015e5c:	4c1d      	ldr	r4, [pc, #116]	; (8015ed4 <_fxe_file_open+0xa0>)
 8015e5e:	4d1e      	ldr	r5, [pc, #120]	; (8015ed8 <_fxe_file_open+0xa4>)
 8015e60:	6824      	ldr	r4, [r4, #0]
 8015e62:	42ac      	cmp	r4, r5
 8015e64:	d01f      	beq.n	8015ea6 <_fxe_file_open+0x72>
 8015e66:	b1f4      	cbz	r4, 8015ea6 <_fxe_file_open+0x72>

    /* Get protection.  */
    FX_PROTECT
 8015e68:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	460d      	mov	r5, r1
 8015e70:	f04f 31ff 	mov.w	r1, #4294967295
 8015e74:	4630      	mov	r0, r6
 8015e76:	461f      	mov	r7, r3
 8015e78:	4690      	mov	r8, r2
 8015e7a:	f006 fe3d 	bl	801caf8 <_tx_mutex_get>
 8015e7e:	bb10      	cbnz	r0, 8015ec6 <_fxe_file_open+0x92>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 8015e80:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
    open_count =    media_ptr -> fx_media_opened_file_count;

    while (open_count--)
 8015e84:	1e51      	subs	r1, r2, #1
 8015e86:	b922      	cbnz	r2, 8015e92 <_fxe_file_open+0x5e>
 8015e88:	e012      	b.n	8015eb0 <_fxe_file_open+0x7c>
 8015e8a:	3901      	subs	r1, #1
            /* Return error.  */
            return(FX_PTR_ERROR);
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8015e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    while (open_count--)
 8015e8e:	1c4a      	adds	r2, r1, #1
 8015e90:	d00e      	beq.n	8015eb0 <_fxe_file_open+0x7c>
        if (file_ptr == current_file)
 8015e92:	429d      	cmp	r5, r3
 8015e94:	d1f9      	bne.n	8015e8a <_fxe_file_open+0x56>
            FX_UNPROTECT
 8015e96:	4630      	mov	r0, r6
 8015e98:	f006 ff18 	bl	801cccc <_tx_mutex_put>
            return(FX_PTR_ERROR);
 8015e9c:	2018      	movs	r0, #24
 8015e9e:	e000      	b.n	8015ea2 <_fxe_file_open+0x6e>
        return(FX_PTR_ERROR);
 8015ea0:	2018      	movs	r0, #24
    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);

    /* Open is complete, return status.  */
    return(status);
}
 8015ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FX_CALLER_CHECKING_CODE
 8015ea6:	2020      	movs	r0, #32
}
 8015ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return(FX_ACCESS_ERROR);
 8015eac:	2006      	movs	r0, #6
 8015eae:	e7f8      	b.n	8015ea2 <_fxe_file_open+0x6e>
    FX_UNPROTECT
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	f006 ff0b 	bl	801cccc <_tx_mutex_put>
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8015eb6:	463b      	mov	r3, r7
 8015eb8:	4642      	mov	r2, r8
 8015eba:	4629      	mov	r1, r5
 8015ebc:	4620      	mov	r0, r4
}
 8015ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8015ec2:	f000 bd5f 	b.w	8016984 <_fx_file_open>
    FX_PROTECT
 8015ec6:	2011      	movs	r0, #17
 8015ec8:	e7eb      	b.n	8015ea2 <_fxe_file_open+0x6e>
 8015eca:	bf00      	nop
 8015ecc:	4d454449 	.word	0x4d454449
 8015ed0:	200000ec 	.word	0x200000ec
 8015ed4:	20007a80 	.word	0x20007a80
 8015ed8:	20007b28 	.word	0x20007b28

08015edc <_fxe_file_read>:

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	bf18      	it	ne
 8015ee0:	2900      	cmpne	r1, #0
 8015ee2:	d016      	beq.n	8015f12 <_fxe_file_read+0x36>
{
 8015ee4:	b430      	push	{r4, r5}
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 8015ee6:	b188      	cbz	r0, 8015f0c <_fxe_file_read+0x30>
 8015ee8:	f3ef 8405 	mrs	r4, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8015eec:	4d0a      	ldr	r5, [pc, #40]	; (8015f18 <_fxe_file_read+0x3c>)
 8015eee:	682d      	ldr	r5, [r5, #0]
 8015ef0:	432c      	orrs	r4, r5
 8015ef2:	d108      	bne.n	8015f06 <_fxe_file_read+0x2a>
 8015ef4:	4c09      	ldr	r4, [pc, #36]	; (8015f1c <_fxe_file_read+0x40>)
 8015ef6:	6824      	ldr	r4, [r4, #0]
 8015ef8:	b12c      	cbz	r4, 8015f06 <_fxe_file_read+0x2a>
 8015efa:	4d09      	ldr	r5, [pc, #36]	; (8015f20 <_fxe_file_read+0x44>)
 8015efc:	42ac      	cmp	r4, r5
 8015efe:	d002      	beq.n	8015f06 <_fxe_file_read+0x2a>
    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);

    /* Return status to the caller.  */
    return(status);
}
 8015f00:	bc30      	pop	{r4, r5}
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8015f02:	f000 bf7d 	b.w	8016e00 <_fx_file_read>
    FX_CALLER_CHECKING_CODE
 8015f06:	2020      	movs	r0, #32
}
 8015f08:	bc30      	pop	{r4, r5}
 8015f0a:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8015f0c:	2018      	movs	r0, #24
}
 8015f0e:	bc30      	pop	{r4, r5}
 8015f10:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8015f12:	2018      	movs	r0, #24
}
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	200000ec 	.word	0x200000ec
 8015f1c:	20007a80 	.word	0x20007a80
 8015f20:	20007b28 	.word	0x20007b28

08015f24 <_fxe_file_write>:

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8015f24:	b1a8      	cbz	r0, 8015f52 <_fxe_file_write+0x2e>
 8015f26:	b1a1      	cbz	r1, 8015f52 <_fxe_file_write+0x2e>
{
 8015f28:	b410      	push	{r4}
 8015f2a:	f3ef 8305 	mrs	r3, IPSR
    {
        return(FX_PTR_ERROR);
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8015f2e:	4c0a      	ldr	r4, [pc, #40]	; (8015f58 <_fxe_file_write+0x34>)
 8015f30:	6824      	ldr	r4, [r4, #0]
 8015f32:	4323      	orrs	r3, r4
 8015f34:	d109      	bne.n	8015f4a <_fxe_file_write+0x26>
 8015f36:	4b09      	ldr	r3, [pc, #36]	; (8015f5c <_fxe_file_write+0x38>)
 8015f38:	4c09      	ldr	r4, [pc, #36]	; (8015f60 <_fxe_file_write+0x3c>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	42a3      	cmp	r3, r4
 8015f3e:	d004      	beq.n	8015f4a <_fxe_file_write+0x26>
 8015f40:	b11b      	cbz	r3, 8015f4a <_fxe_file_write+0x26>
    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);

    /* Return status to the caller.  */
    return(status);
}
 8015f42:	f85d 4b04 	ldr.w	r4, [sp], #4
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 8015f46:	f001 b8e5 	b.w	8017114 <_fx_file_write>
    FX_CALLER_CHECKING_CODE
 8015f4a:	2020      	movs	r0, #32
}
 8015f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f50:	4770      	bx	lr
        return(FX_PTR_ERROR);
 8015f52:	2018      	movs	r0, #24
}
 8015f54:	4770      	bx	lr
 8015f56:	bf00      	nop
 8015f58:	200000ec 	.word	0x200000ec
 8015f5c:	20007a80 	.word	0x20007a80
 8015f60:	20007b28 	.word	0x20007b28

08015f64 <_fx_directory_information_get>:
/**************************************************************************/
UINT  _fx_directory_information_get(FX_MEDIA *media_ptr, CHAR *directory_name,
                                    UINT *attributes, ULONG *size,
                                    UINT *year, UINT *month, UINT *day,
                                    UINT *hour, UINT *minute, UINT *second)
{
 8015f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_directory_information_gets++;
 8015f68:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
{
 8015f6c:	b09f      	sub	sp, #124	; 0x7c

    /* Clear the short name string.  */
    dir_entry.fx_dir_entry_short_name[0] =  0;

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8015f6e:	6805      	ldr	r5, [r0, #0]
    dir_entry.fx_dir_entry_short_name[0] =  0;
 8015f70:	2600      	movs	r6, #0
    media_ptr -> fx_media_directory_information_gets++;
 8015f72:	3401      	adds	r4, #1
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8015f74:	f600 179c 	addw	r7, r0, #2460	; 0x99c
    dir_entry.fx_dir_entry_short_name[0] =  0;
 8015f78:	f88d 600c 	strb.w	r6, [sp, #12]
    media_ptr -> fx_media_directory_information_gets++;
 8015f7c:	f8c0 40f8 	str.w	r4, [r0, #248]	; 0xf8
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8015f80:	4c3c      	ldr	r4, [pc, #240]	; (8016074 <_fx_directory_information_get+0x110>)
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8015f82:	9702      	str	r7, [sp, #8]
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8015f84:	42a5      	cmp	r5, r4
 8015f86:	d004      	beq.n	8015f92 <_fx_directory_information_get+0x2e>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8015f88:	2611      	movs	r6, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Directory information get is complete, return successful status.  */
    return(FX_SUCCESS);
}
 8015f8a:	4630      	mov	r0, r6
 8015f8c:	b01f      	add	sp, #124	; 0x7c
 8015f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8015f92:	f500 79e4 	add.w	r9, r0, #456	; 0x1c8
 8015f96:	460d      	mov	r5, r1
 8015f98:	4604      	mov	r4, r0
 8015f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8015f9e:	4648      	mov	r0, r9
 8015fa0:	461f      	mov	r7, r3
 8015fa2:	4690      	mov	r8, r2
 8015fa4:	f006 fda8 	bl	801caf8 <_tx_mutex_get>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d1ed      	bne.n	8015f88 <_fx_directory_information_get+0x24>
    status =  _fx_directory_search(media_ptr, directory_name, &dir_entry, FX_NULL, FX_NULL);
 8015fac:	9000      	str	r0, [sp, #0]
 8015fae:	4603      	mov	r3, r0
 8015fb0:	4629      	mov	r1, r5
 8015fb2:	aa02      	add	r2, sp, #8
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	f000 f85f 	bl	8016078 <_fx_directory_search>
    if (status != FX_SUCCESS)
 8015fba:	4606      	mov	r6, r0
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	d152      	bne.n	8016066 <_fx_directory_information_get+0x102>
    search_ptr =  media_ptr -> fx_media_opened_file_list;
 8015fc0:	e9d4 0532 	ldrd	r0, r5, [r4, #200]	; 0xc8
    while (open_count)
 8015fc4:	b1c5      	cbz	r5, 8015ff8 <_fx_directory_information_get+0x94>
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset == dir_entry.fx_dir_entry_byte_offset) &&
 8015fc6:	9914      	ldr	r1, [sp, #80]	; 0x50
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 8015fc8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015fcc:	e002      	b.n	8015fd4 <_fx_directory_information_get+0x70>
    while (open_count)
 8015fce:	3d01      	subs	r5, #1
        search_ptr =  search_ptr -> fx_file_opened_next;
 8015fd0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    while (open_count)
 8015fd2:	d011      	beq.n	8015ff8 <_fx_directory_information_get+0x94>
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 8015fd4:	e9d0 ab2a 	ldrd	sl, fp, [r0, #168]	; 0xa8
 8015fd8:	459b      	cmp	fp, r3
 8015fda:	bf08      	it	eq
 8015fdc:	4592      	cmpeq	sl, r2
 8015fde:	d1f6      	bne.n	8015fce <_fx_directory_information_get+0x6a>
 8015fe0:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8015fe4:	428c      	cmp	r4, r1
 8015fe6:	d1f2      	bne.n	8015fce <_fx_directory_information_get+0x6a>
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset == dir_entry.fx_dir_entry_byte_offset) &&
 8015fe8:	6884      	ldr	r4, [r0, #8]
 8015fea:	2c00      	cmp	r4, #0
 8015fec:	d0ef      	beq.n	8015fce <_fx_directory_information_get+0x6a>
            _fx_utility_memory_copy((UCHAR *)&search_ptr -> fx_file_dir_entry, (UCHAR *)&dir_entry, sizeof(FX_DIR_ENTRY));
 8015fee:	a902      	add	r1, sp, #8
 8015ff0:	3068      	adds	r0, #104	; 0x68
 8015ff2:	2270      	movs	r2, #112	; 0x70
 8015ff4:	f002 f964 	bl	80182c0 <_fx_utility_memory_copy>
    if (attributes)
 8015ff8:	f1b8 0f00 	cmp.w	r8, #0
 8015ffc:	d003      	beq.n	8016006 <_fx_directory_information_get+0xa2>
        *attributes =  dir_entry.fx_dir_entry_attributes;
 8015ffe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016002:	f8c8 3000 	str.w	r3, [r8]
    if (size)
 8016006:	b10f      	cbz	r7, 801600c <_fx_directory_information_get+0xa8>
        *size =  (ULONG)dir_entry.fx_dir_entry_file_size;
 8016008:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801600a:	603b      	str	r3, [r7, #0]
    if (year)
 801600c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801600e:	b133      	cbz	r3, 801601e <_fx_directory_information_get+0xba>
 8016010:	461a      	mov	r2, r3
        *year =  ((dir_entry.fx_dir_entry_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) +
 8016012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016014:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8016018:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801601c:	6013      	str	r3, [r2, #0]
    if (month)
 801601e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016020:	b123      	cbz	r3, 801602c <_fx_directory_information_get+0xc8>
 8016022:	461a      	mov	r2, r3
        *month =  (dir_entry.fx_dir_entry_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8016024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016026:	f3c3 1343 	ubfx	r3, r3, #5, #4
 801602a:	6013      	str	r3, [r2, #0]
    if (day)
 801602c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801602e:	b123      	cbz	r3, 801603a <_fx_directory_information_get+0xd6>
 8016030:	461a      	mov	r2, r3
        *day =  dir_entry.fx_dir_entry_date & FX_DAY_MASK;
 8016032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016034:	f003 031f 	and.w	r3, r3, #31
 8016038:	6013      	str	r3, [r2, #0]
    if (hour)
 801603a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801603c:	b123      	cbz	r3, 8016048 <_fx_directory_information_get+0xe4>
 801603e:	461a      	mov	r2, r3
        *hour =  (dir_entry.fx_dir_entry_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 8016040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016042:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8016046:	6013      	str	r3, [r2, #0]
    if (minute)
 8016048:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801604a:	b123      	cbz	r3, 8016056 <_fx_directory_information_get+0xf2>
 801604c:	461a      	mov	r2, r3
        *minute =  (dir_entry.fx_dir_entry_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 801604e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016050:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8016054:	6013      	str	r3, [r2, #0]
    if (second)
 8016056:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016058:	b12b      	cbz	r3, 8016066 <_fx_directory_information_get+0x102>
 801605a:	461a      	mov	r2, r3
        *second =  (dir_entry.fx_dir_entry_time & FX_SECOND_MASK) * 2;
 801605c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801605e:	f003 031f 	and.w	r3, r3, #31
 8016062:	005b      	lsls	r3, r3, #1
 8016064:	6013      	str	r3, [r2, #0]
    FX_UNPROTECT
 8016066:	4648      	mov	r0, r9
 8016068:	f006 fe30 	bl	801cccc <_tx_mutex_put>
}
 801606c:	4630      	mov	r0, r6
 801606e:	b01f      	add	sp, #124	; 0x7c
 8016070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016074:	4d454449 	.word	0x4d454449

08016078 <_fx_directory_search>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 8016078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801607c:	4607      	mov	r7, r0
 801607e:	b0ab      	sub	sp, #172	; 0xac

ULONG         i, n;
UINT          found;
UINT          status;
UINT          v, j;
ULONG         cluster, next_cluster = 0;
 8016080:	2000      	movs	r0, #0
{
 8016082:	9208      	str	r2, [sp, #32]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 8016084:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
{
 8016088:	9107      	str	r1, [sp, #28]
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 801608a:	f607 019c 	addw	r1, r7, #2204	; 0x89c
    media_ptr -> fx_media_directory_searches++;
 801608e:	3201      	adds	r2, #1
ULONG         cluster, next_cluster = 0;
 8016090:	900d      	str	r0, [sp, #52]	; 0x34
    name =  media_ptr -> fx_media_name_buffer;
 8016092:	9103      	str	r1, [sp, #12]

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 8016094:	930a      	str	r3, [sp, #40]	; 0x28
    media_ptr -> fx_media_directory_searches++;
 8016096:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
    if (last_dir_ptr)
 801609a:	b10b      	cbz	r3, 80160a0 <_fx_directory_search+0x28>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	7018      	strb	r0, [r3, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 80160a0:	9b07      	ldr	r3, [sp, #28]
 80160a2:	f897 53e0 	ldrb.w	r5, [r7, #992]	; 0x3e0
 80160a6:	781c      	ldrb	r4, [r3, #0]
 80160a8:	2c5c      	cmp	r4, #92	; 0x5c
 80160aa:	d019      	beq.n	80160e0 <_fx_directory_search+0x68>
 80160ac:	2c2f      	cmp	r4, #47	; 0x2f
 80160ae:	d017      	beq.n	80160e0 <_fx_directory_search+0x68>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 80160b0:	4bad      	ldr	r3, [pc, #692]	; (8016368 <_fx_directory_search+0x2f0>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80160b8:	2900      	cmp	r1, #0
 80160ba:	f000 81f1 	beq.w	80164a0 <_fx_directory_search+0x428>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 80160be:	680b      	ldr	r3, [r1, #0]
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	f000 81b1 	beq.w	801642a <_fx_directory_search+0x3b2>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 80160c8:	2270      	movs	r2, #112	; 0x70
 80160ca:	ae0e      	add	r6, sp, #56	; 0x38

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 80160cc:	188b      	adds	r3, r1, r2
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 80160ce:	4630      	mov	r0, r6
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 80160d0:	930b      	str	r3, [sp, #44]	; 0x2c
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 80160d2:	f008 fa3e 	bl	801e552 <memcpy>
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 80160d6:	2d00      	cmp	r5, #0
 80160d8:	f040 81fe 	bne.w	80164d8 <_fx_directory_search+0x460>
 80160dc:	9601      	str	r6, [sp, #4]
 80160de:	e005      	b.n	80160ec <_fx_directory_search+0x74>
 80160e0:	2d00      	cmp	r5, #0
 80160e2:	f040 8143 	bne.w	801636c <_fx_directory_search+0x2f4>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 80160e6:	2300      	movs	r3, #0
 80160e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80160ea:	9301      	str	r3, [sp, #4]
 80160ec:	f242 42a8 	movw	r2, #9384	; 0x24a8
            return(FX_SUCCESS);
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 80160f0:	2300      	movs	r3, #0
 80160f2:	9907      	ldr	r1, [sp, #28]
 80160f4:	18ba      	adds	r2, r7, r2
 80160f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80160fa:	9106      	str	r1, [sp, #24]
 80160fc:	9209      	str	r2, [sp, #36]	; 0x24
 80160fe:	f887 33e0 	strb.w	r3, [r7, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 8016102:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016104:	b113      	cbz	r3, 801610c <_fx_directory_search+0x94>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 8016106:	461a      	mov	r2, r3
 8016108:	9b06      	ldr	r3, [sp, #24]
 801610a:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 801610c:	9806      	ldr	r0, [sp, #24]
 801610e:	9903      	ldr	r1, [sp, #12]
 8016110:	f003 fcc0 	bl	8019a94 <_fx_directory_name_extract>

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 8016114:	9a01      	ldr	r2, [sp, #4]
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 8016116:	9006      	str	r0, [sp, #24]
        if (search_dir_ptr)
 8016118:	2a00      	cmp	r2, #0
 801611a:	d04f      	beq.n	80161bc <_fx_directory_search+0x144>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 801611c:	2300      	movs	r3, #0

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 801611e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8016120:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8016124:	6513      	str	r3, [r2, #80]	; 0x50
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8016126:	461c      	mov	r4, r3
                i =        0;
 8016128:	930c      	str	r3, [sp, #48]	; 0x30
                while (cluster < media_ptr -> fx_media_fat_reserved)
 801612a:	e012      	b.n	8016152 <_fx_directory_search+0xda>
                {

                    /* Increment the cluster count.  */
                    i++;
 801612c:	950c      	str	r5, [sp, #48]	; 0x30

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 801612e:	f001 fac5 	bl	80176bc <_fx_utility_FAT_entry_read>

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 8016132:	2800      	cmp	r0, #0
 8016134:	f040 81af 	bne.w	8016496 <_fx_directory_search+0x41e>
                        /* Return the bad status.  */
                        return(status);
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 8016138:	2e01      	cmp	r6, #1
 801613a:	f240 81a7 	bls.w	801648c <_fx_directory_search+0x414>
 801613e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016140:	42b3      	cmp	r3, r6
 8016142:	461e      	mov	r6, r3
 8016144:	f000 81a2 	beq.w	801648c <_fx_directory_search+0x414>
 8016148:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801614a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801614c:	42a3      	cmp	r3, r4
 801614e:	f0c0 819d 	bcc.w	801648c <_fx_directory_search+0x414>
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8016152:	f8d9 3000 	ldr.w	r3, [r9]
                    i++;
 8016156:	1c65      	adds	r5, r4, #1
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8016158:	4631      	mov	r1, r6
 801615a:	aa0d      	add	r2, sp, #52	; 0x34
                while (cluster < media_ptr -> fx_media_fat_reserved)
 801615c:	42b3      	cmp	r3, r6
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 801615e:	4638      	mov	r0, r7
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8016160:	d8e4      	bhi.n	801612c <_fx_directory_search+0xb4>

                    cluster = next_cluster;
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8016162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8016166:	9e01      	ldr	r6, [sp, #4]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8016168:	fba0 0103 	umull	r0, r1, r0, r3
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 801616c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 801616e:	fba0 2304 	umull	r2, r3, r0, r4
            if (last_dir_ptr)
 8016172:	4628      	mov	r0, r5
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8016174:	fb04 3301 	mla	r3, r4, r1, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8016178:	0951      	lsrs	r1, r2, #5
 801617a:	ea41 61c3 	orr.w	r1, r1, r3, lsl #27
 801617e:	095b      	lsrs	r3, r3, #5
 8016180:	9104      	str	r1, [sp, #16]
 8016182:	9305      	str	r3, [sp, #20]
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8016184:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8016188:	e9c6 120e 	strd	r1, r2, [r6, #56]	; 0x38
            if (last_dir_ptr)
 801618c:	b1dd      	cbz	r5, 80161c6 <_fx_directory_search+0x14e>

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 801618e:	2270      	movs	r2, #112	; 0x70
 8016190:	4631      	mov	r1, r6
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8016192:	682c      	ldr	r4, [r5, #0]
                *last_dir_ptr =  *search_dir_ptr;
 8016194:	f008 f9dd 	bl	801e552 <memcpy>
 8016198:	6833      	ldr	r3, [r6, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 801619a:	2200      	movs	r2, #0
 801619c:	1e61      	subs	r1, r4, #1
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 801619e:	602c      	str	r4, [r5, #0]
 80161a0:	3b01      	subs	r3, #1
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 80161a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80161a6:	f801 0f01 	strb.w	r0, [r1, #1]!

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 80161aa:	7818      	ldrb	r0, [r3, #0]
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 80161ac:	b908      	cbnz	r0, 80161b2 <_fx_directory_search+0x13a>
 80161ae:	2aff      	cmp	r2, #255	; 0xff
 80161b0:	d109      	bne.n	80161c6 <_fx_directory_search+0x14e>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80161b2:	3201      	adds	r2, #1
 80161b4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80161b8:	d1f3      	bne.n	80161a2 <_fx_directory_search+0x12a>
 80161ba:	e004      	b.n	80161c6 <_fx_directory_search+0x14e>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 80161bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80161be:	2200      	movs	r2, #0
 80161c0:	4619      	mov	r1, r3
 80161c2:	e9cd 1204 	strd	r1, r2, [sp, #16]
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 80161c6:	aa2a      	add	r2, sp, #168	; 0xa8
 80161c8:	2300      	movs	r3, #0
 80161ca:	f842 3d78 	str.w	r3, [r2, #-120]!
 80161ce:	9202      	str	r2, [sp, #8]

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 80161d0:	4643      	mov	r3, r8
 80161d2:	9a02      	ldr	r2, [sp, #8]
 80161d4:	9901      	ldr	r1, [sp, #4]
 80161d6:	4638      	mov	r0, r7
 80161d8:	f002 f878 	bl	80182cc <_fx_directory_entry_read>
#endif /* FX_ENABLE_EXFAT */

            i++;
 80161dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80161de:	3501      	adds	r5, #1
 80161e0:	950c      	str	r5, [sp, #48]	; 0x30

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 80161e2:	2800      	cmp	r0, #0
 80161e4:	f040 8157 	bne.w	8016496 <_fx_directory_search+0x41e>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 80161e8:	f8d8 4000 	ldr.w	r4, [r8]
 80161ec:	7823      	ldrb	r3, [r4, #0]
 80161ee:	b373      	cbz	r3, 801624e <_fx_directory_search+0x1d6>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 80161f0:	2be5      	cmp	r3, #229	; 0xe5
 80161f2:	d102      	bne.n	80161fa <_fx_directory_search+0x182>
 80161f4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80161f8:	b313      	cbz	r3, 8016240 <_fx_directory_search+0x1c8>
 80161fa:	9e03      	ldr	r6, [sp, #12]
 80161fc:	46b2      	mov	sl, r6
 80161fe:	e002      	b.n	8016206 <_fx_directory_search+0x18e>
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
                dir_name_ptr++;
            } while (*dir_name_ptr);
 8016200:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016204:	b343      	cbz	r3, 8016258 <_fx_directory_search+0x1e0>
                alpha =  *dir_name_ptr;
 8016206:	7822      	ldrb	r2, [r4, #0]
 8016208:	46b3      	mov	fp, r6
                name_alpha =  *work_ptr;
 801620a:	f816 3b01 	ldrb.w	r3, [r6], #1
                if ((alpha >= 'a') && (alpha <= 'z'))
 801620e:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
                    alpha =  (CHAR)((INT)alpha - 0x20);
 8016212:	f1a2 0c20 	sub.w	ip, r2, #32
 8016216:	4696      	mov	lr, r2
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 8016218:	f1a3 0920 	sub.w	r9, r3, #32
                if ((alpha >= 'a') && (alpha <= 'z'))
 801621c:	2919      	cmp	r1, #25
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 801621e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
                    alpha =  (CHAR)((INT)alpha - 0x20);
 8016222:	bf98      	it	ls
 8016224:	fa5f fe8c 	uxtbls.w	lr, ip
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 8016228:	2919      	cmp	r1, #25
 801622a:	469c      	mov	ip, r3
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 801622c:	bf98      	it	ls
 801622e:	fa5f fc89 	uxtbls.w	ip, r9
                if (alpha != name_alpha)
 8016232:	45e6      	cmp	lr, ip
 8016234:	d0e4      	beq.n	8016200 <_fx_directory_search+0x188>

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8016236:	b18a      	cbz	r2, 801625c <_fx_directory_search+0x1e4>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8016238:	f898 3004 	ldrb.w	r3, [r8, #4]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d141      	bne.n	80162c4 <_fx_directory_search+0x24c>
                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
                }
            }
        } while ((i < directory_size) && (!found));
 8016240:	2300      	movs	r3, #0
 8016242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016246:	428b      	cmp	r3, r1
 8016248:	bf08      	it	eq
 801624a:	4285      	cmpeq	r5, r0
 801624c:	d3c0      	bcc.n	80161d0 <_fx_directory_search+0x158>
        /* Now determine if we have a match.  */
        if (!found)
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 801624e:	2504      	movs	r5, #4
        }
    }
#endif

    return(FX_SUCCESS);
}
 8016250:	4628      	mov	r0, r5
 8016252:	b02b      	add	sp, #172	; 0xac
 8016254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016258:	f89b 3001 	ldrb.w	r3, [fp, #1]
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 801625c:	2b00      	cmp	r3, #0
 801625e:	d1eb      	bne.n	8016238 <_fx_directory_search+0x1c0>
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 8016260:	f898 301c 	ldrb.w	r3, [r8, #28]
 8016264:	4605      	mov	r5, r0
 8016266:	06db      	lsls	r3, r3, #27
 8016268:	d44b      	bmi.n	8016302 <_fx_directory_search+0x28a>
            if (name_ptr)
 801626a:	9b06      	ldr	r3, [sp, #24]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d1ee      	bne.n	801624e <_fx_directory_search+0x1d6>
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 8016270:	9b07      	ldr	r3, [sp, #28]
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	2b5c      	cmp	r3, #92	; 0x5c
 8016276:	f000 8176 	beq.w	8016566 <_fx_directory_search+0x4ee>
 801627a:	2b2f      	cmp	r3, #47	; 0x2f
 801627c:	f000 8173 	beq.w	8016566 <_fx_directory_search+0x4ee>
 8016280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016282:	2b00      	cmp	r3, #0
 8016284:	f000 81c3 	beq.w	801660e <_fx_directory_search+0x596>
 8016288:	1e59      	subs	r1, r3, #1
 801628a:	f207 32df 	addw	r2, r7, #991	; 0x3df
    v=  0;
 801628e:	2300      	movs	r3, #0
 8016290:	e005      	b.n	801629e <_fx_directory_search+0x226>
            v++;
 8016292:	3301      	adds	r3, #1
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 8016294:	f802 0f01 	strb.w	r0, [r2, #1]!
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8016298:	2bff      	cmp	r3, #255	; 0xff
 801629a:	f000 8165 	beq.w	8016568 <_fx_directory_search+0x4f0>
 801629e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80162a2:	2800      	cmp	r0, #0
 80162a4:	d1f5      	bne.n	8016292 <_fx_directory_search+0x21a>
    if ((*original_name != '\\') && (*original_name != '/'))
 80162a6:	9a07      	ldr	r2, [sp, #28]
 80162a8:	7812      	ldrb	r2, [r2, #0]
 80162aa:	2a5c      	cmp	r2, #92	; 0x5c
 80162ac:	f000 815c 	beq.w	8016568 <_fx_directory_search+0x4f0>
 80162b0:	2a2f      	cmp	r2, #47	; 0x2f
 80162b2:	f000 8159 	beq.w	8016568 <_fx_directory_search+0x4f0>
 80162b6:	1c5a      	adds	r2, r3, #1
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 80162b8:	18f9      	adds	r1, r7, r3
 80162ba:	202f      	movs	r0, #47	; 0x2f
 80162bc:	4613      	mov	r3, r2
 80162be:	f881 03e0 	strb.w	r0, [r1, #992]	; 0x3e0
 80162c2:	e151      	b.n	8016568 <_fx_directory_search+0x4f0>
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 80162c4:	f108 0204 	add.w	r2, r8, #4
 80162c8:	e003      	b.n	80162d2 <_fx_directory_search+0x25a>
                } while (*dir_name_ptr);
 80162ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
                    work_ptr++;
 80162ce:	4656      	mov	r6, sl
                } while (*dir_name_ptr);
 80162d0:	b17b      	cbz	r3, 80162f2 <_fx_directory_search+0x27a>
 80162d2:	4656      	mov	r6, sl
                    name_alpha =  *work_ptr;
 80162d4:	f81a 3b01 	ldrb.w	r3, [sl], #1
                    alpha =  *dir_name_ptr;
 80162d8:	7811      	ldrb	r1, [r2, #0]
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80162da:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80162de:	f1a3 0c20 	sub.w	ip, r3, #32
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80162e2:	2c19      	cmp	r4, #25
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80162e4:	bf98      	it	ls
 80162e6:	fa5f f38c 	uxtbls.w	r3, ip
                    if (alpha != name_alpha)
 80162ea:	428b      	cmp	r3, r1
 80162ec:	d0ed      	beq.n	80162ca <_fx_directory_search+0x252>
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 80162ee:	2900      	cmp	r1, #0
 80162f0:	d1a6      	bne.n	8016240 <_fx_directory_search+0x1c8>
 80162f2:	7833      	ldrb	r3, [r6, #0]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d1a3      	bne.n	8016240 <_fx_directory_search+0x1c8>
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 80162f8:	f898 301c 	ldrb.w	r3, [r8, #28]
 80162fc:	4605      	mov	r5, r0
 80162fe:	06db      	lsls	r3, r3, #27
 8016300:	d5b3      	bpl.n	801626a <_fx_directory_search+0x1f2>
            search_dir =      *entry_ptr;
 8016302:	2270      	movs	r2, #112	; 0x70
 8016304:	4641      	mov	r1, r8
 8016306:	a80e      	add	r0, sp, #56	; 0x38
 8016308:	f008 f923 	bl	801e552 <memcpy>
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 801630c:	2200      	movs	r2, #0
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 801630e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8016310:	9222      	str	r2, [sp, #136]	; 0x88
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 8016312:	2b00      	cmp	r3, #0
 8016314:	f040 80d4 	bne.w	80164c0 <_fx_directory_search+0x448>
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 8016318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801631a:	7013      	strb	r3, [r2, #0]
                if (last_dir_ptr)
 801631c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801631e:	b1fb      	cbz	r3, 8016360 <_fx_directory_search+0x2e8>
                    *last_dir_ptr =  *search_dir_ptr;
 8016320:	a90e      	add	r1, sp, #56	; 0x38
 8016322:	2270      	movs	r2, #112	; 0x70
 8016324:	4618      	mov	r0, r3
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8016326:	681c      	ldr	r4, [r3, #0]
 8016328:	461e      	mov	r6, r3
                    *last_dir_ptr =  *search_dir_ptr;
 801632a:	f008 f912 	bl	801e552 <memcpy>
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 801632e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016330:	1d23      	adds	r3, r4, #4
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 8016332:	6034      	str	r4, [r6, #0]
 8016334:	1d11      	adds	r1, r2, #4
 8016336:	428c      	cmp	r4, r1
 8016338:	bf38      	it	cc
 801633a:	429a      	cmpcc	r2, r3
 801633c:	f0c0 8156 	bcc.w	80165ec <_fx_directory_search+0x574>
 8016340:	ea44 0102 	orr.w	r1, r4, r2
 8016344:	0789      	lsls	r1, r1, #30
 8016346:	f040 8151 	bne.w	80165ec <_fx_directory_search+0x574>
 801634a:	3a04      	subs	r2, #4
 801634c:	f504 7080 	add.w	r0, r4, #256	; 0x100
                        destination_name_ptr[n] =  source_name_ptr[n];
 8016350:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8016354:	4298      	cmp	r0, r3
 8016356:	6021      	str	r1, [r4, #0]
 8016358:	461c      	mov	r4, r3
 801635a:	f103 0304 	add.w	r3, r3, #4
 801635e:	d1f7      	bne.n	8016350 <_fx_directory_search+0x2d8>
                search_dir_ptr =  FX_NULL;
 8016360:	2300      	movs	r3, #0
 8016362:	9301      	str	r3, [sp, #4]
 8016364:	e0ae      	b.n	80164c4 <_fx_directory_search+0x44c>
 8016366:	bf00      	nop
 8016368:	20007a80 	.word	0x20007a80
 801636c:	9907      	ldr	r1, [sp, #28]
 801636e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8016372:	460b      	mov	r3, r1
 8016374:	f101 06fe 	add.w	r6, r1, #254	; 0xfe
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8016378:	b18c      	cbz	r4, 801639e <_fx_directory_search+0x326>
                if (alpha == '\\')
 801637a:	2c5c      	cmp	r4, #92	; 0x5c
 801637c:	f000 8082 	beq.w	8016484 <_fx_directory_search+0x40c>
                if (beta == '\\')
 8016380:	2d5c      	cmp	r5, #92	; 0x5c
 8016382:	4621      	mov	r1, r4
 8016384:	d04f      	beq.n	8016426 <_fx_directory_search+0x3ae>
                    alpha =  '/';
 8016386:	4628      	mov	r0, r5
                if (alpha != beta)
 8016388:	4288      	cmp	r0, r1
 801638a:	d108      	bne.n	801639e <_fx_directory_search+0x326>
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 801638c:	42b3      	cmp	r3, r6
 801638e:	f000 8127 	beq.w	80165e0 <_fx_directory_search+0x568>
 8016392:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8016396:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801639a:	2c00      	cmp	r4, #0
 801639c:	d1ed      	bne.n	801637a <_fx_directory_search+0x302>
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 801639e:	42a5      	cmp	r5, r4
 80163a0:	f47f aea1 	bne.w	80160e6 <_fx_directory_search+0x6e>
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 80163a4:	9d08      	ldr	r5, [sp, #32]
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 80163a6:	f507 711c 	add.w	r1, r7, #624	; 0x270
 80163aa:	2270      	movs	r2, #112	; 0x70
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 80163ac:	682c      	ldr	r4, [r5, #0]
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 80163ae:	4628      	mov	r0, r5
 80163b0:	f008 f8cf 	bl	801e552 <memcpy>
 80163b4:	f207 21df 	addw	r1, r7, #735	; 0x2df
 80163b8:	1e60      	subs	r0, r4, #1
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80163ba:	2300      	movs	r3, #0
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 80163bc:	602c      	str	r4, [r5, #0]
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 80163be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 80163c2:	2bff      	cmp	r3, #255	; 0xff
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80163c4:	f103 0301 	add.w	r3, r3, #1
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 80163c8:	f800 2f01 	strb.w	r2, [r0, #1]!
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 80163cc:	d07f      	beq.n	80164ce <_fx_directory_search+0x456>
 80163ce:	2a00      	cmp	r2, #0
 80163d0:	d17d      	bne.n	80164ce <_fx_directory_search+0x456>
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 80163d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80163d4:	b1d6      	cbz	r6, 801640c <_fx_directory_search+0x394>
 80163d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80163da:	b1bb      	cbz	r3, 801640c <_fx_directory_search+0x394>
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 80163dc:	6835      	ldr	r5, [r6, #0]
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 80163de:	2270      	movs	r2, #112	; 0x70
 80163e0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80163e4:	4630      	mov	r0, r6
 80163e6:	f008 f8b4 	bl	801e552 <memcpy>
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80163ea:	6035      	str	r5, [r6, #0]
 80163ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80163f0:	1e6a      	subs	r2, r5, #1
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80163f2:	2100      	movs	r1, #0
 80163f4:	3b01      	subs	r3, #1
                    destination_name_ptr[n] =  source_name_ptr[n];
 80163f6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80163fa:	f802 0f01 	strb.w	r0, [r2, #1]!
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 80163fe:	7818      	ldrb	r0, [r3, #0]
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 8016400:	2800      	cmp	r0, #0
 8016402:	f040 80aa 	bne.w	801655a <_fx_directory_search+0x4e2>
 8016406:	29ff      	cmp	r1, #255	; 0xff
 8016408:	f000 80a7 	beq.w	801655a <_fx_directory_search+0x4e2>
            if (last_name_ptr)
 801640c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801640e:	b103      	cbz	r3, 8016412 <_fx_directory_search+0x39a>
                *last_name_ptr =  temp_ptr;
 8016410:	601c      	str	r4, [r3, #0]
            media_ptr -> fx_media_directory_search_cache_hits++;
 8016412:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
            return(FX_SUCCESS);
 8016416:	2500      	movs	r5, #0
            media_ptr -> fx_media_directory_search_cache_hits++;
 8016418:	3301      	adds	r3, #1
}
 801641a:	4628      	mov	r0, r5
            media_ptr -> fx_media_directory_search_cache_hits++;
 801641c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
}
 8016420:	b02b      	add	sp, #172	; 0xac
 8016422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    beta =  '/';
 8016426:	202f      	movs	r0, #47	; 0x2f
 8016428:	e7ae      	b.n	8016388 <_fx_directory_search+0x310>
    if (media_ptr -> fx_media_last_found_name[0])
 801642a:	2d00      	cmp	r5, #0
 801642c:	f43f ae5b 	beq.w	80160e6 <_fx_directory_search+0x6e>
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 8016430:	2d5c      	cmp	r5, #92	; 0x5c
 8016432:	d002      	beq.n	801643a <_fx_directory_search+0x3c2>
 8016434:	2d2f      	cmp	r5, #47	; 0x2f
 8016436:	f47f ae56 	bne.w	80160e6 <_fx_directory_search+0x6e>
 801643a:	2300      	movs	r3, #0
                    v++;
 801643c:	2501      	movs	r5, #1
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 801643e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016440:	9301      	str	r3, [sp, #4]
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8016442:	2c00      	cmp	r4, #0
 8016444:	f000 80e5 	beq.w	8016612 <_fx_directory_search+0x59a>
 8016448:	f203 30e1 	addw	r0, r3, #993	; 0x3e1
 801644c:	9e07      	ldr	r6, [sp, #28]
 801644e:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
                j =  0;
 8016452:	2100      	movs	r1, #0
 8016454:	4438      	add	r0, r7
 8016456:	e00c      	b.n	8016472 <_fx_directory_search+0x3fa>
                        beta =  '/';
 8016458:	2a5c      	cmp	r2, #92	; 0x5c
 801645a:	bf08      	it	eq
 801645c:	222f      	moveq	r2, #47	; 0x2f
                    if (alpha != beta)
 801645e:	42a2      	cmp	r2, r4
 8016460:	d172      	bne.n	8016548 <_fx_directory_search+0x4d0>
                    j++;
 8016462:	3101      	adds	r1, #1
                    v++;
 8016464:	3501      	adds	r5, #1
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8016466:	4299      	cmp	r1, r3
 8016468:	d06e      	beq.n	8016548 <_fx_directory_search+0x4d0>
 801646a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 801646e:	2c00      	cmp	r4, #0
 8016470:	d06a      	beq.n	8016548 <_fx_directory_search+0x4d0>
                    if (alpha == '\\')
 8016472:	2c5c      	cmp	r4, #92	; 0x5c
                    beta =   media_ptr -> fx_media_last_found_name[v];
 8016474:	f810 2b01 	ldrb.w	r2, [r0], #1
                    if (alpha == '\\')
 8016478:	d1ee      	bne.n	8016458 <_fx_directory_search+0x3e0>
                    if (beta == '\\')
 801647a:	2a5c      	cmp	r2, #92	; 0x5c
                        alpha =  '/';
 801647c:	f04f 042f 	mov.w	r4, #47	; 0x2f
                    if (beta == '\\')
 8016480:	d1ed      	bne.n	801645e <_fx_directory_search+0x3e6>
 8016482:	e7ee      	b.n	8016462 <_fx_directory_search+0x3ea>
                if (beta == '\\')
 8016484:	2d5c      	cmp	r5, #92	; 0x5c
 8016486:	d081      	beq.n	801638c <_fx_directory_search+0x314>
                    alpha =  '/';
 8016488:	212f      	movs	r1, #47	; 0x2f
 801648a:	e77c      	b.n	8016386 <_fx_directory_search+0x30e>
                        return(FX_FAT_READ_ERROR);
 801648c:	2503      	movs	r5, #3
}
 801648e:	4628      	mov	r0, r5
 8016490:	b02b      	add	sp, #172	; 0xac
 8016492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016496:	4605      	mov	r5, r0
 8016498:	4628      	mov	r0, r5
 801649a:	b02b      	add	sp, #172	; 0xac
 801649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 80164a0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80164a4:	781b      	ldrb	r3, [r3, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d0bf      	beq.n	801642a <_fx_directory_search+0x3b2>
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80164aa:	ae0e      	add	r6, sp, #56	; 0x38
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 80164ac:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80164b0:	2270      	movs	r2, #112	; 0x70
 80164b2:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80164b6:	4630      	mov	r0, r6
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 80164b8:	930b      	str	r3, [sp, #44]	; 0x2c
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80164ba:	f008 f84a 	bl	801e552 <memcpy>
 80164be:	e60a      	b.n	80160d6 <_fx_directory_search+0x5e>
            search_dir_ptr =  &search_dir;
 80164c0:	ab0e      	add	r3, sp, #56	; 0x38
 80164c2:	9301      	str	r3, [sp, #4]
    } while (name_ptr);
 80164c4:	9b06      	ldr	r3, [sp, #24]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	f47f ae1b 	bne.w	8016102 <_fx_directory_search+0x8a>
 80164cc:	e6d0      	b.n	8016270 <_fx_directory_search+0x1f8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80164ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164d2:	f47f af74 	bne.w	80163be <_fx_directory_search+0x346>
 80164d6:	e77c      	b.n	80163d2 <_fx_directory_search+0x35a>
 80164d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164da:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
 80164de:	1e59      	subs	r1, r3, #1
        v =  0;
 80164e0:	2300      	movs	r3, #0
 80164e2:	e008      	b.n	80164f6 <_fx_directory_search+0x47e>
                        beta =  '/';
 80164e4:	2a5c      	cmp	r2, #92	; 0x5c
 80164e6:	bf08      	it	eq
 80164e8:	222f      	moveq	r2, #47	; 0x2f
                    if (alpha != beta)
 80164ea:	42aa      	cmp	r2, r5
 80164ec:	d10f      	bne.n	801650e <_fx_directory_search+0x496>
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 80164ee:	2bff      	cmp	r3, #255	; 0xff
 80164f0:	d00d      	beq.n	801650e <_fx_directory_search+0x496>
 80164f2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80164f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80164fa:	b1b2      	cbz	r2, 801652a <_fx_directory_search+0x4b2>
                    if (alpha == '\\')
 80164fc:	2d5c      	cmp	r5, #92	; 0x5c
 80164fe:	f103 0301 	add.w	r3, r3, #1
 8016502:	d1ef      	bne.n	80164e4 <_fx_directory_search+0x46c>
                    if (beta == '\\')
 8016504:	2a5c      	cmp	r2, #92	; 0x5c
                        alpha =  '/';
 8016506:	f04f 052f 	mov.w	r5, #47	; 0x2f
                    if (beta == '\\')
 801650a:	d1ee      	bne.n	80164ea <_fx_directory_search+0x472>
 801650c:	e7ef      	b.n	80164ee <_fx_directory_search+0x476>
                if (path_ptr[v])
 801650e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016510:	5cd2      	ldrb	r2, [r2, r3]
 8016512:	2a00      	cmp	r2, #0
 8016514:	f47f ade2 	bne.w	80160dc <_fx_directory_search+0x64>
 8016518:	18fa      	adds	r2, r7, r3
 801651a:	f892 23e0 	ldrb.w	r2, [r2, #992]	; 0x3e0
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 801651e:	2a5c      	cmp	r2, #92	; 0x5c
 8016520:	d008      	beq.n	8016534 <_fx_directory_search+0x4bc>
 8016522:	2a2f      	cmp	r2, #47	; 0x2f
 8016524:	f47f adda 	bne.w	80160dc <_fx_directory_search+0x64>
 8016528:	e004      	b.n	8016534 <_fx_directory_search+0x4bc>
 801652a:	2d5c      	cmp	r5, #92	; 0x5c
 801652c:	d002      	beq.n	8016534 <_fx_directory_search+0x4bc>
 801652e:	2d2f      	cmp	r5, #47	; 0x2f
 8016530:	f47f add4 	bne.w	80160dc <_fx_directory_search+0x64>
                    v++;
 8016534:	1c5d      	adds	r5, r3, #1
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8016536:	9601      	str	r6, [sp, #4]
 8016538:	2dfe      	cmp	r5, #254	; 0xfe
 801653a:	d982      	bls.n	8016442 <_fx_directory_search+0x3ca>
                if (v >= 256)
 801653c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8016540:	f43f add4 	beq.w	80160ec <_fx_directory_search+0x74>
                j =  0;
 8016544:	2100      	movs	r1, #0
                if (v >= 256)
 8016546:	25ff      	movs	r5, #255	; 0xff
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 8016548:	9b07      	ldr	r3, [sp, #28]
 801654a:	443d      	add	r5, r7
 801654c:	5c5a      	ldrb	r2, [r3, r1]
 801654e:	f895 33e0 	ldrb.w	r3, [r5, #992]	; 0x3e0
 8016552:	429a      	cmp	r2, r3
 8016554:	f47f adca 	bne.w	80160ec <_fx_directory_search+0x74>
 8016558:	e724      	b.n	80163a4 <_fx_directory_search+0x32c>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 801655a:	3101      	adds	r1, #1
 801655c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8016560:	f47f af49 	bne.w	80163f6 <_fx_directory_search+0x37e>
 8016564:	e752      	b.n	801640c <_fx_directory_search+0x394>
    v=  0;
 8016566:	2300      	movs	r3, #0
 8016568:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 801656c:	9907      	ldr	r1, [sp, #28]
 801656e:	443a      	add	r2, r7
 8016570:	1e48      	subs	r0, r1, #1
 8016572:	e005      	b.n	8016580 <_fx_directory_search+0x508>
        v++;
 8016574:	3301      	adds	r3, #1
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 8016576:	f802 1b01 	strb.w	r1, [r2], #1
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 801657a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801657e:	d040      	beq.n	8016602 <_fx_directory_search+0x58a>
 8016580:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8016584:	2900      	cmp	r1, #0
 8016586:	d1f5      	bne.n	8016574 <_fx_directory_search+0x4fc>
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 8016588:	443b      	add	r3, r7
 801658a:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
    if (search_dir_ptr)
 801658e:	9901      	ldr	r1, [sp, #4]
 8016590:	2900      	cmp	r1, #0
 8016592:	d03a      	beq.n	801660a <_fx_directory_search+0x592>
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 8016594:	2270      	movs	r2, #112	; 0x70
 8016596:	f507 7000 	add.w	r0, r7, #512	; 0x200
 801659a:	f007 ffda 	bl	801e552 <memcpy>
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 801659e:	2301      	movs	r3, #1
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 80165a0:	9c08      	ldr	r4, [sp, #32]
 80165a2:	2270      	movs	r2, #112	; 0x70
 80165a4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80165a8:	f507 701c 	add.w	r0, r7, #624	; 0x270
 80165ac:	4621      	mov	r1, r4
 80165ae:	f007 ffd0 	bl	801e552 <memcpy>
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 80165b2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80165b6:	f207 21df 	addw	r1, r7, #735	; 0x2df
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80165ba:	2300      	movs	r3, #0
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 80165bc:	f8c7 2270 	str.w	r2, [r7, #624]	; 0x270
 80165c0:	6822      	ldr	r2, [r4, #0]
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 80165c2:	5cd2      	ldrb	r2, [r2, r3]
 80165c4:	f801 2f01 	strb.w	r2, [r1, #1]!
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 80165c8:	9a08      	ldr	r2, [sp, #32]
 80165ca:	6812      	ldr	r2, [r2, #0]
 80165cc:	5cd0      	ldrb	r0, [r2, r3]
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 80165ce:	b910      	cbnz	r0, 80165d6 <_fx_directory_search+0x55e>
 80165d0:	2bff      	cmp	r3, #255	; 0xff
 80165d2:	f47f ae3d 	bne.w	8016250 <_fx_directory_search+0x1d8>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80165d6:	3301      	adds	r3, #1
 80165d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165dc:	d1f1      	bne.n	80165c2 <_fx_directory_search+0x54a>
 80165de:	e637      	b.n	8016250 <_fx_directory_search+0x1d8>
 80165e0:	9b07      	ldr	r3, [sp, #28]
 80165e2:	f897 54df 	ldrb.w	r5, [r7, #1247]	; 0x4df
 80165e6:	f893 40ff 	ldrb.w	r4, [r3, #255]	; 0xff
 80165ea:	e6d8      	b.n	801639e <_fx_directory_search+0x326>
 80165ec:	3c01      	subs	r4, #1
 80165ee:	1e51      	subs	r1, r2, #1
 80165f0:	f102 03ff 	add.w	r3, r2, #255	; 0xff
                        destination_name_ptr[n] =  source_name_ptr[n];
 80165f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80165f8:	428b      	cmp	r3, r1
                        destination_name_ptr[n] =  source_name_ptr[n];
 80165fa:	f804 2f01 	strb.w	r2, [r4, #1]!
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80165fe:	d1f9      	bne.n	80165f4 <_fx_directory_search+0x57c>
 8016600:	e6ae      	b.n	8016360 <_fx_directory_search+0x2e8>
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8016602:	2300      	movs	r3, #0
 8016604:	f887 33e0 	strb.w	r3, [r7, #992]	; 0x3e0
 8016608:	e7c1      	b.n	801658e <_fx_directory_search+0x516>
 801660a:	460b      	mov	r3, r1
 801660c:	e7c8      	b.n	80165a0 <_fx_directory_search+0x528>
 801660e:	2201      	movs	r2, #1
 8016610:	e652      	b.n	80162b8 <_fx_directory_search+0x240>
                j =  0;
 8016612:	4621      	mov	r1, r4
 8016614:	e798      	b.n	8016548 <_fx_directory_search+0x4d0>
 8016616:	bf00      	nop

08016618 <_fx_file_close>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 8016618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 801661a:	6802      	ldr	r2, [r0, #0]
 801661c:	4b30      	ldr	r3, [pc, #192]	; (80166e0 <_fx_file_close+0xc8>)
 801661e:	429a      	cmp	r2, r3
 8016620:	d10c      	bne.n	801663c <_fx_file_close+0x24>
        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8016622:	6d85      	ldr	r5, [r0, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8016624:	4a2f      	ldr	r2, [pc, #188]	; (80166e4 <_fx_file_close+0xcc>)
    media_ptr -> fx_media_file_closes++;
 8016626:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
    FX_PROTECT
 801662a:	6829      	ldr	r1, [r5, #0]
    media_ptr -> fx_media_file_closes++;
 801662c:	3301      	adds	r3, #1
    FX_PROTECT
 801662e:	4291      	cmp	r1, r2
    media_ptr -> fx_media_file_closes++;
 8016630:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
    FX_PROTECT
 8016634:	d005      	beq.n	8016642 <_fx_file_close+0x2a>
 8016636:	2611      	movs	r6, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return status to the caller.  */
    return(FX_SUCCESS);
}
 8016638:	4630      	mov	r0, r6
 801663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(FX_NOT_OPEN);
 801663c:	2607      	movs	r6, #7
}
 801663e:	4630      	mov	r0, r6
 8016640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FX_PROTECT
 8016642:	f505 77e4 	add.w	r7, r5, #456	; 0x1c8
 8016646:	4604      	mov	r4, r0
 8016648:	f04f 31ff 	mov.w	r1, #4294967295
 801664c:	4638      	mov	r0, r7
 801664e:	f006 fa53 	bl	801caf8 <_tx_mutex_get>
 8016652:	4606      	mov	r6, r0
 8016654:	2800      	cmp	r0, #0
 8016656:	d1ee      	bne.n	8016636 <_fx_file_close+0x1e>
    if (file_ptr == file_ptr -> fx_file_opened_next)
 8016658:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801665a:	42a3      	cmp	r3, r4
 801665c:	d038      	beq.n	80166d0 <_fx_file_close+0xb8>
            file_ptr -> fx_file_opened_previous;
 801665e:	6e21      	ldr	r1, [r4, #96]	; 0x60
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8016660:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 8016664:	6619      	str	r1, [r3, #96]	; 0x60
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8016666:	42a2      	cmp	r2, r4
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8016668:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801666a:	65cb      	str	r3, [r1, #92]	; 0x5c
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 801666c:	d033      	beq.n	80166d6 <_fx_file_close+0xbe>
    media_ptr -> fx_media_opened_file_count--;
 801666e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8016672:	68a2      	ldr	r2, [r4, #8]
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8016674:	491c      	ldr	r1, [pc, #112]	; (80166e8 <_fx_file_close+0xd0>)
    media_ptr -> fx_media_opened_file_count--;
 8016676:	3b01      	subs	r3, #1
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8016678:	2a01      	cmp	r2, #1
    media_ptr -> fx_media_opened_file_count--;
 801667a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 801667e:	6021      	str	r1, [r4, #0]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8016680:	d101      	bne.n	8016686 <_fx_file_close+0x6e>
 8016682:	7b23      	ldrb	r3, [r4, #12]
 8016684:	b923      	cbnz	r3, 8016690 <_fx_file_close+0x78>
    FX_UNPROTECT
 8016686:	4638      	mov	r0, r7
 8016688:	f006 fb20 	bl	801cccc <_tx_mutex_put>
}
 801668c:	4630      	mov	r0, r6
 801668e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8016690:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8016694:	b672      	cpsid	i
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8016696:	4915      	ldr	r1, [pc, #84]	; (80166ec <_fx_file_close+0xd4>)
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8016698:	4b15      	ldr	r3, [pc, #84]	; (80166f0 <_fx_file_close+0xd8>)
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 801669a:	6809      	ldr	r1, [r1, #0]
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 801669c:	681b      	ldr	r3, [r3, #0]
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 801669e:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 80166a2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 80166a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80166aa:	f382 8810 	msr	PRIMASK, r2
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 80166ae:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 80166b2:	4628      	mov	r0, r5
 80166b4:	f104 0168 	add.w	r1, r4, #104	; 0x68
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 80166b8:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 80166bc:	f002 f8e4 	bl	8018888 <_fx_directory_entry_write>
        if (status != FX_SUCCESS)
 80166c0:	4603      	mov	r3, r0
 80166c2:	2800      	cmp	r0, #0
 80166c4:	d0df      	beq.n	8016686 <_fx_file_close+0x6e>
            FX_UNPROTECT
 80166c6:	4638      	mov	r0, r7
            return(status);
 80166c8:	461e      	mov	r6, r3
            FX_UNPROTECT
 80166ca:	f006 faff 	bl	801cccc <_tx_mutex_put>
            return(status);
 80166ce:	e7b3      	b.n	8016638 <_fx_file_close+0x20>
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 80166d0:	f8c5 00c8 	str.w	r0, [r5, #200]	; 0xc8
 80166d4:	e7cb      	b.n	801666e <_fx_file_close+0x56>
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 80166d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80166d8:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
 80166dc:	e7c7      	b.n	801666e <_fx_file_close+0x56>
 80166de:	bf00      	nop
 80166e0:	46494c45 	.word	0x46494c45
 80166e4:	4d454449 	.word	0x4d454449
 80166e8:	46494c43 	.word	0x46494c43
 80166ec:	20007910 	.word	0x20007910
 80166f0:	200078f8 	.word	0x200078f8

080166f4 <_fx_file_create>:


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 80166f4:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80166f8:	3301      	adds	r3, #1
{
 80166fa:	b570      	push	{r4, r5, r6, lr}
    media_ptr -> fx_media_file_creates++;
 80166fc:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
{
 8016700:	b0bc      	sub	sp, #240	; 0xf0

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
    work_ptr =  (CHAR *)file_name;
    while (*work_ptr)
 8016702:	780b      	ldrb	r3, [r1, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d04e      	beq.n	80167a6 <_fx_file_create+0xb2>
 8016708:	460c      	mov	r4, r1
    i =  0;
 801670a:	2200      	movs	r2, #0
 801670c:	e00b      	b.n	8016726 <_fx_file_create+0x32>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 801670e:	2b2f      	cmp	r3, #47	; 0x2f
 8016710:	d00b      	beq.n	801672a <_fx_file_create+0x36>
        {
            /* Yes, reset the name size.  */
            i =  0;
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 8016712:	3b20      	subs	r3, #32
 8016714:	bf18      	it	ne
 8016716:	2301      	movne	r3, #1
 8016718:	b90a      	cbnz	r2, 801671e <_fx_file_create+0x2a>
 801671a:	2b00      	cmp	r3, #0
 801671c:	d041      	beq.n	80167a2 <_fx_file_create+0xae>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 801671e:	3201      	adds	r2, #1
    while (*work_ptr)
 8016720:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016724:	b133      	cbz	r3, 8016734 <_fx_file_create+0x40>
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 8016726:	2b5c      	cmp	r3, #92	; 0x5c
 8016728:	d1f1      	bne.n	801670e <_fx_file_create+0x1a>
    while (*work_ptr)
 801672a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
            i =  0;
 801672e:	2200      	movs	r2, #0
    while (*work_ptr)
 8016730:	2b00      	cmp	r3, #0
 8016732:	d1f8      	bne.n	8016726 <_fx_file_create+0x32>
        /* Move to the next character.  */
        work_ptr++;
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 8016734:	3a01      	subs	r2, #1
 8016736:	2afe      	cmp	r2, #254	; 0xfe
 8016738:	d835      	bhi.n	80167a6 <_fx_file_create+0xb2>
    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
    search_directory.fx_dir_entry_short_name[0] = 0;

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 801673a:	4a39      	ldr	r2, [pc, #228]	; (8016820 <_fx_file_create+0x12c>)
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 801673c:	f600 159c 	addw	r5, r0, #2460	; 0x99c
    dir_entry.fx_dir_entry_short_name[0] =        0;
 8016740:	f88d 3014 	strb.w	r3, [sp, #20]
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8016744:	f600 249c 	addw	r4, r0, #2716	; 0xa9c
    search_directory.fx_dir_entry_short_name[0] = 0;
 8016748:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 801674c:	6803      	ldr	r3, [r0, #0]
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 801674e:	9504      	str	r5, [sp, #16]
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8016750:	4293      	cmp	r3, r2
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8016752:	9420      	str	r4, [sp, #128]	; 0x80
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8016754:	d003      	beq.n	801675e <_fx_file_create+0x6a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8016756:	2411      	movs	r4, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* File create is complete, return status.  */
    return(status);
}
 8016758:	4620      	mov	r0, r4
 801675a:	b03c      	add	sp, #240	; 0xf0
 801675c:	bd70      	pop	{r4, r5, r6, pc}
    FX_PROTECT
 801675e:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 8016762:	460c      	mov	r4, r1
 8016764:	4605      	mov	r5, r0
 8016766:	f04f 31ff 	mov.w	r1, #4294967295
 801676a:	4630      	mov	r0, r6
 801676c:	f006 f9c4 	bl	801caf8 <_tx_mutex_get>
 8016770:	2800      	cmp	r0, #0
 8016772:	d1f0      	bne.n	8016756 <_fx_file_create+0x62>
    if (media_ptr -> fx_media_driver_write_protect)
 8016774:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8016778:	b9cb      	cbnz	r3, 80167ae <_fx_file_create+0xba>
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 801677a:	a803      	add	r0, sp, #12
 801677c:	4621      	mov	r1, r4
 801677e:	ab20      	add	r3, sp, #128	; 0x80
 8016780:	aa04      	add	r2, sp, #16
 8016782:	9000      	str	r0, [sp, #0]
 8016784:	4628      	mov	r0, r5
 8016786:	f7ff fc77 	bl	8016078 <_fx_directory_search>
    if (status == FX_SUCCESS)
 801678a:	2800      	cmp	r0, #0
 801678c:	d042      	beq.n	8016814 <_fx_file_create+0x120>
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 801678e:	9904      	ldr	r1, [sp, #16]
 8016790:	9803      	ldr	r0, [sp, #12]
 8016792:	f003 f97f 	bl	8019a94 <_fx_directory_name_extract>
 8016796:	b178      	cbz	r0, 80167b8 <_fx_file_create+0xc4>
        FX_UNPROTECT
 8016798:	4630      	mov	r0, r6
        return(FX_INVALID_PATH);
 801679a:	240d      	movs	r4, #13
        FX_UNPROTECT
 801679c:	f006 fa96 	bl	801cccc <_tx_mutex_put>
        return(FX_INVALID_PATH);
 80167a0:	e7da      	b.n	8016758 <_fx_file_create+0x64>
            i =  0;
 80167a2:	461a      	mov	r2, r3
 80167a4:	e7bc      	b.n	8016720 <_fx_file_create+0x2c>
        return(FX_INVALID_NAME);
 80167a6:	240c      	movs	r4, #12
}
 80167a8:	4620      	mov	r0, r4
 80167aa:	b03c      	add	sp, #240	; 0xf0
 80167ac:	bd70      	pop	{r4, r5, r6, pc}
        FX_UNPROTECT
 80167ae:	4630      	mov	r0, r6
        return(FX_WRITE_PROTECT);
 80167b0:	2423      	movs	r4, #35	; 0x23
        FX_UNPROTECT
 80167b2:	f006 fa8b 	bl	801cccc <_tx_mutex_put>
        return(FX_WRITE_PROTECT);
 80167b6:	e7cf      	b.n	8016758 <_fx_file_create+0x64>
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 80167b8:	a920      	add	r1, sp, #128	; 0x80
 80167ba:	aa04      	add	r2, sp, #16
 80167bc:	4628      	mov	r0, r5
 80167be:	f002 fee1 	bl	8019584 <_fx_directory_free_search>
    if (status != FX_SUCCESS)
 80167c2:	4604      	mov	r4, r0
 80167c4:	bb10      	cbnz	r0, 801680c <_fx_file_create+0x118>
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 80167c6:	9904      	ldr	r1, [sp, #16]
 80167c8:	9803      	ldr	r0, [sp, #12]
 80167ca:	f003 f963 	bl	8019a94 <_fx_directory_name_extract>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80167ce:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80167d2:	b672      	cpsid	i
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 80167d4:	4913      	ldr	r1, [pc, #76]	; (8016824 <_fx_file_create+0x130>)
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 80167d6:	4a14      	ldr	r2, [pc, #80]	; (8016828 <_fx_file_create+0x134>)
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 80167d8:	6809      	ldr	r1, [r1, #0]
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 80167da:	6812      	ldr	r2, [r2, #0]
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 80167dc:	910f      	str	r1, [sp, #60]	; 0x3c
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 80167de:	9210      	str	r2, [sp, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80167e0:	f383 8810 	msr	PRIMASK, r3
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 80167e4:	2220      	movs	r2, #32
    if (dir_entry.fx_dir_entry_name[0] == '.')
 80167e6:	9b04      	ldr	r3, [sp, #16]
    dir_entry.fx_dir_entry_file_size =  0;
 80167e8:	2000      	movs	r0, #0
 80167ea:	2100      	movs	r1, #0
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 80167ec:	9411      	str	r4, [sp, #68]	; 0x44
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 80167ee:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    dir_entry.fx_dir_entry_file_size =  0;
 80167f2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    if (dir_entry.fx_dir_entry_name[0] == '.')
 80167f6:	781b      	ldrb	r3, [r3, #0]
 80167f8:	2b2e      	cmp	r3, #46	; 0x2e
 80167fa:	d102      	bne.n	8016802 <_fx_file_create+0x10e>
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 80167fc:	2322      	movs	r3, #34	; 0x22
 80167fe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 8016802:	a904      	add	r1, sp, #16
 8016804:	4628      	mov	r0, r5
 8016806:	f002 f83f 	bl	8018888 <_fx_directory_entry_write>
 801680a:	4604      	mov	r4, r0
    FX_UNPROTECT
 801680c:	4630      	mov	r0, r6
 801680e:	f006 fa5d 	bl	801cccc <_tx_mutex_put>
    return(status);
 8016812:	e7a1      	b.n	8016758 <_fx_file_create+0x64>
        FX_UNPROTECT
 8016814:	4630      	mov	r0, r6
        return(FX_ALREADY_CREATED);
 8016816:	240b      	movs	r4, #11
        FX_UNPROTECT
 8016818:	f006 fa58 	bl	801cccc <_tx_mutex_put>
        return(FX_ALREADY_CREATED);
 801681c:	e79c      	b.n	8016758 <_fx_file_create+0x64>
 801681e:	bf00      	nop
 8016820:	4d454449 	.word	0x4d454449
 8016824:	20007910 	.word	0x20007910
 8016828:	200078f8 	.word	0x200078f8

0801682c <_fx_file_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_delete(FX_MEDIA *media_ptr, CHAR *file_name)
{
 801682c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;

    /* Clear the short name string.  */
    dir_entry.fx_dir_entry_short_name[0] =  0;
 8016830:	2400      	movs	r4, #0
{
 8016832:	b0a1      	sub	sp, #132	; 0x84
    media_ptr -> fx_media_file_deletes++;
 8016834:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8016838:	f600 159c 	addw	r5, r0, #2460	; 0x99c

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 801683c:	4a50      	ldr	r2, [pc, #320]	; (8016980 <_fx_file_delete+0x154>)
    dir_entry.fx_dir_entry_short_name[0] =  0;
 801683e:	f88d 4014 	strb.w	r4, [sp, #20]
    media_ptr -> fx_media_file_deletes++;
 8016842:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8016844:	6804      	ldr	r4, [r0, #0]
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8016846:	9504      	str	r5, [sp, #16]
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8016848:	4294      	cmp	r4, r2
    media_ptr -> fx_media_file_deletes++;
 801684a:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 801684e:	d004      	beq.n	801685a <_fx_file_delete+0x2e>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8016850:	2511      	movs	r5, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* File delete is complete, return status.  */
    return(status);
}
 8016852:	4628      	mov	r0, r5
 8016854:	b021      	add	sp, #132	; 0x84
 8016856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    FX_PROTECT
 801685a:	f500 76e4 	add.w	r6, r0, #456	; 0x1c8
 801685e:	460d      	mov	r5, r1
 8016860:	4604      	mov	r4, r0
 8016862:	f04f 31ff 	mov.w	r1, #4294967295
 8016866:	4630      	mov	r0, r6
 8016868:	f006 f946 	bl	801caf8 <_tx_mutex_get>
 801686c:	2800      	cmp	r0, #0
 801686e:	d1ef      	bne.n	8016850 <_fx_file_delete+0x24>
    if (media_ptr -> fx_media_driver_write_protect)
 8016870:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8016874:	bb3b      	cbnz	r3, 80168c6 <_fx_file_delete+0x9a>
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, FX_NULL, FX_NULL);
 8016876:	4629      	mov	r1, r5
 8016878:	9300      	str	r3, [sp, #0]
 801687a:	aa04      	add	r2, sp, #16
 801687c:	4620      	mov	r0, r4
 801687e:	f7ff fbfb 	bl	8016078 <_fx_directory_search>
    if (status != FX_SUCCESS)
 8016882:	4605      	mov	r5, r0
 8016884:	bb98      	cbnz	r0, 80168ee <_fx_file_delete+0xc2>
    if (dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8016886:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801688a:	f013 0f18 	tst.w	r3, #24
 801688e:	d15f      	bne.n	8016950 <_fx_file_delete+0x124>
    if (dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 8016890:	07db      	lsls	r3, r3, #31
 8016892:	d418      	bmi.n	80168c6 <_fx_file_delete+0x9a>
    search_ptr =  media_ptr -> fx_media_opened_file_list;
 8016894:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
    while (open_count)
 8016898:	b1d2      	cbz	r2, 80168d0 <_fx_file_delete+0xa4>
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset == dir_entry.fx_dir_entry_byte_offset))
 801689a:	9d16      	ldr	r5, [sp, #88]	; 0x58
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 801689c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80168a0:	e002      	b.n	80168a8 <_fx_file_delete+0x7c>
    while (open_count)
 80168a2:	3a01      	subs	r2, #1
        search_ptr =  search_ptr -> fx_file_opened_next;
 80168a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    while (open_count)
 80168a6:	d013      	beq.n	80168d0 <_fx_file_delete+0xa4>
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 80168a8:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80168ac:	4549      	cmp	r1, r9
 80168ae:	bf08      	it	eq
 80168b0:	4540      	cmpeq	r0, r8
 80168b2:	d1f6      	bne.n	80168a2 <_fx_file_delete+0x76>
 80168b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80168b8:	42a9      	cmp	r1, r5
 80168ba:	d1f2      	bne.n	80168a2 <_fx_file_delete+0x76>
            FX_UNPROTECT
 80168bc:	4630      	mov	r0, r6
            return(FX_ACCESS_ERROR);
 80168be:	2506      	movs	r5, #6
            FX_UNPROTECT
 80168c0:	f006 fa04 	bl	801cccc <_tx_mutex_put>
            return(FX_ACCESS_ERROR);
 80168c4:	e7c5      	b.n	8016852 <_fx_file_delete+0x26>
        FX_UNPROTECT
 80168c6:	4630      	mov	r0, r6
        return(FX_WRITE_PROTECT);
 80168c8:	2523      	movs	r5, #35	; 0x23
        FX_UNPROTECT
 80168ca:	f006 f9ff 	bl	801cccc <_tx_mutex_put>
        return(FX_WRITE_PROTECT);
 80168ce:	e7c0      	b.n	8016852 <_fx_file_delete+0x26>
    dir_entry.fx_dir_entry_name[0] =        (CHAR)FX_DIR_ENTRY_FREE;
 80168d0:	23e5      	movs	r3, #229	; 0xe5
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 80168d2:	2000      	movs	r0, #0
    dir_entry.fx_dir_entry_name[0] =        (CHAR)FX_DIR_ENTRY_FREE;
 80168d4:	9a04      	ldr	r2, [sp, #16]
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 80168d6:	a904      	add	r1, sp, #16
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 80168d8:	f884 03e0 	strb.w	r0, [r4, #992]	; 0x3e0
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 80168dc:	4620      	mov	r0, r4
    cluster =           dir_entry.fx_dir_entry_cluster;
 80168de:	9f11      	ldr	r7, [sp, #68]	; 0x44
    dir_entry.fx_dir_entry_name[0] =        (CHAR)FX_DIR_ENTRY_FREE;
 80168e0:	7013      	strb	r3, [r2, #0]
    dir_entry.fx_dir_entry_short_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 80168e2:	f88d 3014 	strb.w	r3, [sp, #20]
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 80168e6:	f001 ffcf 	bl	8018888 <_fx_directory_entry_write>
    if (status != FX_SUCCESS)
 80168ea:	4605      	mov	r5, r0
 80168ec:	b118      	cbz	r0, 80168f6 <_fx_file_delete+0xca>
        FX_UNPROTECT
 80168ee:	4630      	mov	r0, r6
 80168f0:	f006 f9ec 	bl	801cccc <_tx_mutex_put>
        return(status);
 80168f4:	e7ad      	b.n	8016852 <_fx_file_delete+0x26>
        while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80168f6:	2f01      	cmp	r7, #1
 80168f8:	d92f      	bls.n	801695a <_fx_file_delete+0x12e>
 80168fa:	f242 49a8 	movw	r9, #9384	; 0x24a8
 80168fe:	f854 3009 	ldr.w	r3, [r4, r9]
 8016902:	429f      	cmp	r7, r3
 8016904:	d229      	bcs.n	801695a <_fx_file_delete+0x12e>
 8016906:	44a1      	add	r9, r4
    cluster_count =     0;
 8016908:	4680      	mov	r8, r0
 801690a:	e011      	b.n	8016930 <_fx_file_delete+0x104>
            if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 801690c:	9b03      	ldr	r3, [sp, #12]
                status =  _fx_utility_FAT_entry_write(media_ptr, cluster, FX_FREE_CLUSTER);
 801690e:	4620      	mov	r0, r4
            if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 8016910:	42bb      	cmp	r3, r7
 8016912:	d02a      	beq.n	801696a <_fx_file_delete+0x13e>
 8016914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016916:	4543      	cmp	r3, r8
 8016918:	d327      	bcc.n	801696a <_fx_file_delete+0x13e>
                status =  _fx_utility_FAT_entry_write(media_ptr, cluster, FX_FREE_CLUSTER);
 801691a:	f001 f82f 	bl	801797c <_fx_utility_FAT_entry_write>
                if (status != FX_SUCCESS)
 801691e:	4603      	mov	r3, r0
 8016920:	bb40      	cbnz	r0, 8016974 <_fx_file_delete+0x148>
            cluster =  contents;
 8016922:	9f03      	ldr	r7, [sp, #12]
        while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8016924:	2f01      	cmp	r7, #1
 8016926:	d919      	bls.n	801695c <_fx_file_delete+0x130>
 8016928:	f8d9 3000 	ldr.w	r3, [r9]
 801692c:	42bb      	cmp	r3, r7
 801692e:	d915      	bls.n	801695c <_fx_file_delete+0x130>
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8016930:	aa03      	add	r2, sp, #12
 8016932:	4639      	mov	r1, r7
 8016934:	4620      	mov	r0, r4
            cluster_count++;
 8016936:	f108 0801 	add.w	r8, r8, #1
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 801693a:	f000 febf 	bl	80176bc <_fx_utility_FAT_entry_read>
                status =  _fx_utility_FAT_entry_write(media_ptr, cluster, FX_FREE_CLUSTER);
 801693e:	4639      	mov	r1, r7
                if (status != FX_SUCCESS)
 8016940:	4602      	mov	r2, r0
 8016942:	2800      	cmp	r0, #0
 8016944:	d0e2      	beq.n	801690c <_fx_file_delete+0xe0>
                    FX_UNPROTECT
 8016946:	4630      	mov	r0, r6
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8016948:	4615      	mov	r5, r2
                    FX_UNPROTECT
 801694a:	f006 f9bf 	bl	801cccc <_tx_mutex_put>
                    return(status);
 801694e:	e780      	b.n	8016852 <_fx_file_delete+0x26>
        FX_UNPROTECT
 8016950:	4630      	mov	r0, r6
        return(FX_NOT_A_FILE);
 8016952:	2505      	movs	r5, #5
        FX_UNPROTECT
 8016954:	f006 f9ba 	bl	801cccc <_tx_mutex_put>
        return(FX_NOT_A_FILE);
 8016958:	e77b      	b.n	8016852 <_fx_file_delete+0x26>
    cluster_count =     0;
 801695a:	46a8      	mov	r8, r5
        media_ptr -> fx_media_available_clusters + cluster_count;
 801695c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    FX_UNPROTECT
 801695e:	4630      	mov	r0, r6
        media_ptr -> fx_media_available_clusters + cluster_count;
 8016960:	4443      	add	r3, r8
    media_ptr -> fx_media_available_clusters =
 8016962:	67e3      	str	r3, [r4, #124]	; 0x7c
    FX_UNPROTECT
 8016964:	f006 f9b2 	bl	801cccc <_tx_mutex_put>
    return(status);
 8016968:	e773      	b.n	8016852 <_fx_file_delete+0x26>
                FX_UNPROTECT
 801696a:	4630      	mov	r0, r6
                return(FX_FAT_READ_ERROR);
 801696c:	2503      	movs	r5, #3
                FX_UNPROTECT
 801696e:	f006 f9ad 	bl	801cccc <_tx_mutex_put>
                return(FX_FAT_READ_ERROR);
 8016972:	e76e      	b.n	8016852 <_fx_file_delete+0x26>
                    FX_UNPROTECT
 8016974:	4630      	mov	r0, r6
                status =  _fx_utility_FAT_entry_write(media_ptr, cluster, FX_FREE_CLUSTER);
 8016976:	461d      	mov	r5, r3
                    FX_UNPROTECT
 8016978:	f006 f9a8 	bl	801cccc <_tx_mutex_put>
                    return(status);
 801697c:	e769      	b.n	8016852 <_fx_file_delete+0x26>
 801697e:	bf00      	nop
 8016980:	4d454449 	.word	0x4d454449

08016984 <_fx_file_open>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 8016984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016988:	4604      	mov	r4, r0
 801698a:	460d      	mov	r5, r1
UINT     fast_open;
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 801698c:	486e      	ldr	r0, [pc, #440]	; (8016b48 <_fx_file_open+0x1c4>)
{
 801698e:	b093      	sub	sp, #76	; 0x4c
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8016990:	6821      	ldr	r1, [r4, #0]
ULONG    contents = 0;
 8016992:	2600      	movs	r6, #0
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8016994:	4281      	cmp	r1, r0
ULONG    contents = 0;
 8016996:	9611      	str	r6, [sp, #68]	; 0x44
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8016998:	f040 80bb 	bne.w	8016b12 <_fx_file_open+0x18e>
 801699c:	4698      	mov	r8, r3
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 801699e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 80169a2:	f64f 70f8 	movw	r0, #65528	; 0xfff8
 80169a6:	4617      	mov	r7, r2
    media_ptr -> fx_media_file_opens++;
 80169a8:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_32_bit_FAT)
 80169aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
        fat_last        = FX_LAST_CLUSTER_1_32;
 80169ac:	4967      	ldr	r1, [pc, #412]	; (8016b4c <_fx_file_open+0x1c8>)
    media_ptr -> fx_media_file_opens++;
 80169ae:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        fat_last        = FX_LAST_CLUSTER_1_32;
 80169b2:	4603      	mov	r3, r0
    file_ptr -> fx_file_write_notify = FX_NULL;
 80169b4:	f8c5 61dc 	str.w	r6, [r5, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_1_32;
 80169b8:	2a00      	cmp	r2, #0
 80169ba:	bf18      	it	ne
 80169bc:	460b      	movne	r3, r1
        fat_last        = FX_LAST_CLUSTER_1;
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
    }

    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 80169be:	f1b8 0f02 	cmp.w	r8, #2
        fat_last        = FX_LAST_CLUSTER_1_32;
 80169c2:	9304      	str	r3, [sp, #16]
    if (open_type == FX_OPEN_FOR_READ_FAST)
 80169c4:	f000 80aa 	beq.w	8016b1c <_fx_file_open+0x198>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80169c8:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
 80169cc:	f04f 31ff 	mov.w	r1, #4294967295
 80169d0:	4658      	mov	r0, fp
 80169d2:	f006 f891 	bl	801caf8 <_tx_mutex_get>
 80169d6:	2800      	cmp	r0, #0
 80169d8:	f040 809b 	bne.w	8016b12 <_fx_file_open+0x18e>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 80169dc:	f105 03d8 	add.w	r3, r5, #216	; 0xd8
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 80169e0:	f885 006c 	strb.w	r0, [r5, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 80169e4:	4639      	mov	r1, r7
 80169e6:	9000      	str	r0, [sp, #0]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 80169e8:	461a      	mov	r2, r3
 80169ea:	930b      	str	r3, [sp, #44]	; 0x2c
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 80169ec:	4603      	mov	r3, r0
 80169ee:	4620      	mov	r0, r4
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 80169f0:	66aa      	str	r2, [r5, #104]	; 0x68
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 80169f2:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80169f6:	f7ff fb3f 	bl	8016078 <_fx_directory_search>

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 80169fa:	4607      	mov	r7, r0
 80169fc:	2800      	cmp	r0, #0
 80169fe:	f040 809a 	bne.w	8016b36 <_fx_file_open+0x1b2>
        /* Return the error code.  */
        return(status);
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8016a02:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 8016a06:	f013 0f18 	tst.w	r3, #24
 8016a0a:	f040 8181 	bne.w	8016d10 <_fx_file_open+0x38c>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 8016a0e:	f1b8 0f01 	cmp.w	r8, #1
 8016a12:	f000 8134 	beq.w	8016c7e <_fx_file_open+0x2fa>
    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8016a16:	6d62      	ldr	r2, [r4, #84]	; 0x54
    file_ptr -> fx_file_current_physical_cluster =  0;
 8016a18:	f04f 0a00 	mov.w	sl, #0
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016a1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8016a1e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016a22:	930e      	str	r3, [sp, #56]	; 0x38
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8016a24:	920c      	str	r2, [sp, #48]	; 0x30
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016a26:	fb02 f303 	mul.w	r3, r2, r3
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8016a2a:	9109      	str	r1, [sp, #36]	; 0x24
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016a2c:	930a      	str	r3, [sp, #40]	; 0x28
    file_ptr -> fx_file_current_physical_cluster =  0;
 8016a2e:	f8c5 a020 	str.w	sl, [r5, #32]
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8016a32:	e9d5 1228 	ldrd	r1, r2, [r5, #160]	; 0xa0
 8016a36:	e9cd 1202 	strd	r1, r2, [sp, #8]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	f000 8170 	beq.w	8016d20 <_fx_file_open+0x39c>
    }

    last_cluster =      0;
    cluster_count =     0;
    leading_consecutive = 1;
    file_ptr -> fx_file_consecutive_cluster = 1;
 8016a40:	2301      	movs	r3, #1
 8016a42:	61ab      	str	r3, [r5, #24]

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 8016a44:	2e00      	cmp	r6, #0
 8016a46:	f040 8083 	bne.w	8016b50 <_fx_file_open+0x1cc>
        else
        {
#endif /* FX_ENABLE_EXFAT */

            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8016a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a4c:	4298      	cmp	r0, r3
 8016a4e:	f240 81c6 	bls.w	8016dde <_fx_file_open+0x45a>
 8016a52:	f242 42a8 	movw	r2, #9384	; 0x24a8
 8016a56:	58a1      	ldr	r1, [r4, r2]
 8016a58:	4288      	cmp	r0, r1
 8016a5a:	f080 81c0 	bcs.w	8016dde <_fx_file_open+0x45a>
 8016a5e:	eb04 0a02 	add.w	sl, r4, r2
                /* Setup for the next cluster.  */
                cluster =  contents;

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 8016a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a64:	2100      	movs	r1, #0
 8016a66:	970e      	str	r7, [sp, #56]	; 0x38
 8016a68:	4610      	mov	r0, r2
 8016a6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016a6c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8016a70:	4699      	mov	r9, r3
 8016a72:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8016a76:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016a7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016a7e:	e010      	b.n	8016aa2 <_fx_file_open+0x11e>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8016a80:	ebbb 0909 	subs.w	r9, fp, r9
 8016a84:	eb6c 0a0a 	sbc.w	sl, ip, sl
 8016a88:	e9cd 9a02 	strd	r9, sl, [sp, #8]
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8016a8c:	2a01      	cmp	r2, #1
 8016a8e:	f240 8158 	bls.w	8016d42 <_fx_file_open+0x3be>
 8016a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	429a      	cmp	r2, r3
 8016a98:	f080 8153 	bcs.w	8016d42 <_fx_file_open+0x3be>
 8016a9c:	4646      	mov	r6, r8
                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
                        file_ptr -> fx_file_current_relative_cluster++;

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 8016a9e:	4617      	mov	r7, r2
 8016aa0:	4681      	mov	r9, r0
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8016aa2:	aa11      	add	r2, sp, #68	; 0x44
 8016aa4:	4639      	mov	r1, r7
 8016aa6:	4620      	mov	r0, r4
                cluster_count++;
 8016aa8:	f106 0801 	add.w	r8, r6, #1
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8016aac:	f000 fe06 	bl	80176bc <_fx_utility_FAT_entry_read>
                if (status != FX_SUCCESS)
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	f040 8187 	bne.w	8016dc4 <_fx_file_open+0x440>
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 8016ab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016ab8:	42ba      	cmp	r2, r7
 8016aba:	f000 813b 	beq.w	8016d34 <_fx_file_open+0x3b0>
 8016abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ac0:	4543      	cmp	r3, r8
 8016ac2:	f0c0 8137 	bcc.w	8016d34 <_fx_file_open+0x3b0>
                if (cluster + 1 == contents)
 8016ac6:	1c7b      	adds	r3, r7, #1
                    if (leading_consecutive)
 8016ac8:	4293      	cmp	r3, r2
 8016aca:	d102      	bne.n	8016ad2 <_fx_file_open+0x14e>
 8016acc:	f019 0f01 	tst.w	r9, #1
 8016ad0:	d135      	bne.n	8016b3e <_fx_file_open+0x1ba>
                if (bytes_remaining > bytes_per_cluster)
 8016ad2:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 8016ad6:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8016ada:	45e2      	cmp	sl, ip
 8016adc:	bf08      	it	eq
 8016ade:	45d9      	cmpeq	r9, fp
 8016ae0:	d3ce      	bcc.n	8016a80 <_fx_file_open+0xfc>
                else if (!file_ptr -> fx_file_current_physical_cluster)
 8016ae2:	6a2b      	ldr	r3, [r5, #32]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d1d1      	bne.n	8016a8c <_fx_file_open+0x108>
                    if ((bytes_remaining == bytes_per_cluster) &&
 8016ae8:	45e2      	cmp	sl, ip
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 8016aea:	622f      	str	r7, [r5, #32]
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8016aec:	636e      	str	r6, [r5, #52]	; 0x34
                    if ((bytes_remaining == bytes_per_cluster) &&
 8016aee:	bf08      	it	eq
 8016af0:	45d9      	cmpeq	r9, fp
 8016af2:	d1cb      	bne.n	8016a8c <_fx_file_open+0x108>
 8016af4:	2a01      	cmp	r2, #1
 8016af6:	d9c9      	bls.n	8016a8c <_fx_file_open+0x108>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8016af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	429a      	cmp	r2, r3
 8016afe:	f080 8120 	bcs.w	8016d42 <_fx_file_open+0x3be>
                        bytes_remaining =  0;
 8016b02:	2600      	movs	r6, #0
 8016b04:	2700      	movs	r7, #0
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 8016b06:	622a      	str	r2, [r5, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 8016b08:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
                        bytes_remaining =  0;
 8016b0c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8016b10:	e7c4      	b.n	8016a9c <_fx_file_open+0x118>
        return(FX_MEDIA_NOT_OPEN);
 8016b12:	2711      	movs	r7, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
}
 8016b14:	4638      	mov	r0, r7
 8016b16:	b013      	add	sp, #76	; 0x4c
 8016b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8016b1c:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
 8016b20:	f04f 31ff 	mov.w	r1, #4294967295
        open_type =  FX_OPEN_FOR_READ;
 8016b24:	46b0      	mov	r8, r6
        fast_open =  FX_TRUE;
 8016b26:	2601      	movs	r6, #1
    FX_PROTECT
 8016b28:	4658      	mov	r0, fp
 8016b2a:	f005 ffe5 	bl	801caf8 <_tx_mutex_get>
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	f43f af54 	beq.w	80169dc <_fx_file_open+0x58>
 8016b34:	e7ed      	b.n	8016b12 <_fx_file_open+0x18e>
        FX_UNPROTECT
 8016b36:	4658      	mov	r0, fp
 8016b38:	f006 f8c8 	bl	801cccc <_tx_mutex_put>
        return(status);
 8016b3c:	e7ea      	b.n	8016b14 <_fx_file_open+0x190>
                        file_ptr -> fx_file_consecutive_cluster++;
 8016b3e:	69ab      	ldr	r3, [r5, #24]
 8016b40:	2001      	movs	r0, #1
 8016b42:	4403      	add	r3, r0
 8016b44:	61ab      	str	r3, [r5, #24]
 8016b46:	e7c4      	b.n	8016ad2 <_fx_file_open+0x14e>
 8016b48:	4d454449 	.word	0x4d454449
 8016b4c:	0ffffff8 	.word	0x0ffffff8
 8016b50:	4608      	mov	r0, r1
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8016b52:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016b54:	f110 30ff 	adds.w	r0, r0, #4294967295
 8016b58:	f142 31ff 	adc.w	r1, r2, #4294967295
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016b66:	4613      	mov	r3, r2
 8016b68:	4632      	mov	r2, r6
 8016b6a:	1980      	adds	r0, r0, r6
 8016b6c:	4159      	adcs	r1, r3
 8016b6e:	f7e9 fce7 	bl	8000540 <__aeabi_uldivmod>
 8016b72:	fba0 2306 	umull	r2, r3, r0, r6
 8016b76:	46d6      	mov	lr, sl
 8016b78:	960a      	str	r6, [sp, #40]	; 0x28
 8016b7a:	469a      	mov	sl, r3
 8016b7c:	4691      	mov	r9, r2
 8016b7e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    last_cluster =      0;
 8016b82:	4676      	mov	r6, lr
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8016b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8016b88:	e9cd 9a06 	strd	r9, sl, [sp, #24]
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8016b8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8016b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b92:	fb03 a301 	mla	r3, r3, r1, sl
 8016b96:	9307      	str	r3, [sp, #28]
    cluster_count =     0;
 8016b98:	4673      	mov	r3, lr
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 8016b9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8016b9c:	2200      	movs	r2, #0
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 8016b9e:	4897      	ldr	r0, [pc, #604]	; (8016dfc <_fx_file_open+0x478>)
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 8016ba0:	6069      	str	r1, [r5, #4]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8016ba2:	9909      	ldr	r1, [sp, #36]	; 0x24
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8016ba4:	732a      	strb	r2, [r5, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 8016ba6:	612b      	str	r3, [r5, #16]
 8016ba8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8016baa:	6169      	str	r1, [r5, #20]
 8016bac:	2100      	movs	r1, #0
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 8016bae:	6028      	str	r0, [r5, #0]
 8016bb0:	4699      	mov	r9, r3
 8016bb2:	468a      	mov	sl, r1
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 8016bb4:	65ac      	str	r4, [r5, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 8016bb6:	f8c5 8008 	str.w	r8, [r5, #8]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 8016bba:	61ee      	str	r6, [r5, #28]
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 8016bbc:	f8c5 21d8 	str.w	r2, [r5, #472]	; 0x1d8
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8016bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016bc4:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 8016bc8:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 8016bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016bd0:	e9c5 0114 	strd	r0, r1, [r5, #80]	; 0x50
    if (open_type == FX_OPEN_FOR_READ)
 8016bd4:	f1b8 0f00 	cmp.w	r8, #0
 8016bd8:	d07a      	beq.n	8016cd0 <_fx_file_open+0x34c>
        if (bytes_remaining == bytes_per_cluster)
 8016bda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016bdc:	f04f 0900 	mov.w	r9, #0
 8016be0:	6a2b      	ldr	r3, [r5, #32]
 8016be2:	4688      	mov	r8, r1
 8016be4:	1e98      	subs	r0, r3, #2
 8016be6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8016bea:	f04f 0900 	mov.w	r9, #0
 8016bee:	fb00 fa0e 	mul.w	sl, r0, lr
 8016bf2:	f149 31ff 	adc.w	r1, r9, #4294967295
 8016bf6:	fba0 890c 	umull	r8, r9, r0, ip
 8016bfa:	fb0c aa01 	mla	sl, ip, r1, sl
 8016bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016c02:	44d1      	add	r9, sl
 8016c04:	eb10 0008 	adds.w	r0, r0, r8
 8016c08:	eb41 0109 	adc.w	r1, r1, r9
 8016c0c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8016c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c18:	4589      	cmp	r9, r1
 8016c1a:	bf08      	it	eq
 8016c1c:	4580      	cmpeq	r8, r0
 8016c1e:	f000 80b9 	beq.w	8016d94 <_fx_file_open+0x410>
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8016c22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016c24:	4680      	mov	r8, r0
 8016c26:	4689      	mov	r9, r1
 8016c28:	4613      	mov	r3, r2
 8016c2a:	4632      	mov	r2, r6
 8016c2c:	f7e9 fc88 	bl	8000540 <__aeabi_uldivmod>
 8016c30:	63a8      	str	r0, [r5, #56]	; 0x38
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 8016c32:	fbb8 f3f6 	udiv	r3, r8, r6
 8016c36:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016c3a:	9902      	ldr	r1, [sp, #8]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8016c3c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 8016c40:	fb06 1313 	mls	r3, r6, r3, r1
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8016c44:	eb18 0800 	adds.w	r8, r8, r0
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 8016c48:	632b      	str	r3, [r5, #48]	; 0x30
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8016c4a:	f149 0900 	adc.w	r9, r9, #0
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8016c4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016c52:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8016c56:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
    if (media_ptr -> fx_media_opened_file_list)
 8016c5a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d063      	beq.n	8016d2a <_fx_file_open+0x3a6>
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 8016c62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 8016c64:	661d      	str	r5, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 8016c66:	65d5      	str	r5, [r2, #92]	; 0x5c
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 8016c68:	662a      	str	r2, [r5, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 8016c6a:	65eb      	str	r3, [r5, #92]	; 0x5c
    media_ptr -> fx_media_opened_file_count++;
 8016c6c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    FX_UNPROTECT
 8016c70:	4658      	mov	r0, fp
    media_ptr -> fx_media_opened_file_count++;
 8016c72:	3301      	adds	r3, #1
 8016c74:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    FX_UNPROTECT
 8016c78:	f006 f828 	bl	801cccc <_tx_mutex_put>
    return(FX_SUCCESS);
 8016c7c:	e74a      	b.n	8016b14 <_fx_file_open+0x190>
        if (media_ptr -> fx_media_driver_write_protect)
 8016c7e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8016c82:	2a00      	cmp	r2, #0
 8016c84:	d13f      	bne.n	8016d06 <_fx_file_open+0x382>
        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 8016c86:	07db      	lsls	r3, r3, #31
 8016c88:	d41d      	bmi.n	8016cc6 <_fx_file_open+0x342>
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 8016c8a:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
        while (open_count)
 8016c8e:	2a00      	cmp	r2, #0
 8016c90:	f43f aec1 	beq.w	8016a16 <_fx_file_open+0x92>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8016c94:	46dc      	mov	ip, fp
 8016c96:	46a1      	mov	r9, r4
 8016c98:	e9d5 012a 	ldrd	r0, r1, [r5, #168]	; 0xa8
 8016c9c:	e002      	b.n	8016ca4 <_fx_file_open+0x320>
        while (open_count)
 8016c9e:	3a01      	subs	r2, #1
            search_ptr =  search_ptr -> fx_file_opened_next;
 8016ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        while (open_count)
 8016ca2:	d03a      	beq.n	8016d1a <_fx_file_open+0x396>
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8016ca4:	e9d3 ab2a 	ldrd	sl, fp, [r3, #168]	; 0xa8
 8016ca8:	458b      	cmp	fp, r1
 8016caa:	bf08      	it	eq
 8016cac:	4582      	cmpeq	sl, r0
 8016cae:	d1f6      	bne.n	8016c9e <_fx_file_open+0x31a>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8016cb0:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8016cb4:	46a6      	mov	lr, r4
 8016cb6:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 8016cba:	45a6      	cmp	lr, r4
 8016cbc:	d1ef      	bne.n	8016c9e <_fx_file_open+0x31a>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8016cbe:	689c      	ldr	r4, [r3, #8]
 8016cc0:	2c01      	cmp	r4, #1
 8016cc2:	d1ec      	bne.n	8016c9e <_fx_file_open+0x31a>
 8016cc4:	46e3      	mov	fp, ip
                FX_UNPROTECT
 8016cc6:	4658      	mov	r0, fp
                return(FX_ACCESS_ERROR);
 8016cc8:	2706      	movs	r7, #6
                FX_UNPROTECT
 8016cca:	f005 ffff 	bl	801cccc <_tx_mutex_put>
                return(FX_ACCESS_ERROR);
 8016cce:	e721      	b.n	8016b14 <_fx_file_open+0x190>
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8016cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        file_ptr -> fx_file_current_file_offset =       0;
 8016cd2:	2000      	movs	r0, #0
        file_ptr -> fx_file_current_relative_cluster =  0;
 8016cd4:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
        file_ptr -> fx_file_current_file_offset =       0;
 8016cd8:	2100      	movs	r1, #0
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8016cda:	1e9e      	subs	r6, r3, #2
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8016cdc:	622b      	str	r3, [r5, #32]
        file_ptr -> fx_file_current_relative_sector =   0;
 8016cde:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8016ce2:	fba6 230c 	umull	r2, r3, r6, ip
        file_ptr -> fx_file_current_logical_offset =    0;
 8016ce6:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016cea:	46c8      	mov	r8, r9
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8016cec:	fb06 330e 	mla	r3, r6, lr, r3
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016cf0:	eb18 0802 	adds.w	r8, r8, r2
 8016cf4:	eb4a 0903 	adc.w	r9, sl, r3
 8016cf8:	4642      	mov	r2, r8
 8016cfa:	464b      	mov	r3, r9
        file_ptr -> fx_file_current_file_offset =       0;
 8016cfc:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016d00:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
 8016d04:	e7a9      	b.n	8016c5a <_fx_file_open+0x2d6>
            FX_UNPROTECT
 8016d06:	4658      	mov	r0, fp
            return(FX_WRITE_PROTECT);
 8016d08:	2723      	movs	r7, #35	; 0x23
            FX_UNPROTECT
 8016d0a:	f005 ffdf 	bl	801cccc <_tx_mutex_put>
            return(FX_WRITE_PROTECT);
 8016d0e:	e701      	b.n	8016b14 <_fx_file_open+0x190>
        FX_UNPROTECT
 8016d10:	4658      	mov	r0, fp
        return(FX_NOT_A_FILE);
 8016d12:	2705      	movs	r7, #5
        FX_UNPROTECT
 8016d14:	f005 ffda 	bl	801cccc <_tx_mutex_put>
        return(FX_NOT_A_FILE);
 8016d18:	e6fc      	b.n	8016b14 <_fx_file_open+0x190>
 8016d1a:	46e3      	mov	fp, ip
 8016d1c:	464c      	mov	r4, r9
 8016d1e:	e67a      	b.n	8016a16 <_fx_file_open+0x92>
        FX_UNPROTECT
 8016d20:	4658      	mov	r0, fp
        return(FX_MEDIA_INVALID);
 8016d22:	2702      	movs	r7, #2
        FX_UNPROTECT
 8016d24:	f005 ffd2 	bl	801cccc <_tx_mutex_put>
        return(FX_MEDIA_INVALID);
 8016d28:	e6f4      	b.n	8016b14 <_fx_file_open+0x190>
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 8016d2a:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 8016d2e:	65ed      	str	r5, [r5, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 8016d30:	662d      	str	r5, [r5, #96]	; 0x60
 8016d32:	e79b      	b.n	8016c6c <_fx_file_open+0x2e8>
 8016d34:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
                    return(FX_FAT_READ_ERROR);
 8016d38:	2703      	movs	r7, #3
                    FX_UNPROTECT
 8016d3a:	4658      	mov	r0, fp
 8016d3c:	f005 ffc6 	bl	801cccc <_tx_mutex_put>
                    return(FX_FAT_READ_ERROR);
 8016d40:	e6e8      	b.n	8016b14 <_fx_file_open+0x190>
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8016d42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016d44:	4643      	mov	r3, r8
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 8016d46:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 8016d4a:	f04f 0e00 	mov.w	lr, #0
 8016d4e:	9709      	str	r7, [sp, #36]	; 0x24
 8016d50:	9f0e      	ldr	r7, [sp, #56]	; 0x38
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8016d52:	910e      	str	r1, [sp, #56]	; 0x38
 8016d54:	fba1 010c 	umull	r0, r1, r1, ip
 8016d58:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8016d5c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8016d60:	fba0 9a03 	umull	r9, sl, r0, r3
 8016d64:	fb03 a101 	mla	r1, r3, r1, sl
 8016d68:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 8016d6c:	9107      	str	r1, [sp, #28]
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8016d6e:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 8016d72:	e9d5 0128 	ldrd	r0, r1, [r5, #160]	; 0xa0
 8016d76:	458a      	cmp	sl, r1
 8016d78:	bf08      	it	eq
 8016d7a:	4581      	cmpeq	r9, r0
 8016d7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016d80:	d328      	bcc.n	8016dd4 <_fx_file_open+0x450>
 8016d82:	b113      	cbz	r3, 8016d8a <_fx_file_open+0x406>
                ((cluster_count) && (contents < fat_last)))
 8016d84:	9904      	ldr	r1, [sp, #16]
 8016d86:	428a      	cmp	r2, r1
 8016d88:	d324      	bcc.n	8016dd4 <_fx_file_open+0x450>
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8016d8a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 8016d8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016d90:	9209      	str	r2, [sp, #36]	; 0x24
 8016d92:	e702      	b.n	8016b9a <_fx_file_open+0x216>
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8016d94:	f110 30ff 	adds.w	r0, r0, #4294967295
 8016d98:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	f141 31ff 	adc.w	r1, r1, #4294967295
 8016da0:	4632      	mov	r2, r6
 8016da2:	f7e9 fbcd 	bl	8000540 <__aeabi_uldivmod>
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 8016da6:	632e      	str	r6, [r5, #48]	; 0x30
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8016da8:	63a8      	str	r0, [r5, #56]	; 0x38
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8016daa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8016dae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8016db2:	eb18 0800 	adds.w	r8, r8, r0
 8016db6:	eb49 0901 	adc.w	r9, r9, r1
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8016dba:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016dbe:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
 8016dc2:	e74a      	b.n	8016c5a <_fx_file_open+0x2d6>
 8016dc4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8016dc8:	4601      	mov	r1, r0
                    FX_UNPROTECT
 8016dca:	4658      	mov	r0, fp
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8016dcc:	460f      	mov	r7, r1
                    FX_UNPROTECT
 8016dce:	f005 ff7d 	bl	801cccc <_tx_mutex_put>
                    return(status);
 8016dd2:	e69f      	b.n	8016b14 <_fx_file_open+0x190>
                FX_UNPROTECT
 8016dd4:	4658      	mov	r0, fp
                return(FX_FILE_CORRUPT);
 8016dd6:	2708      	movs	r7, #8
                FX_UNPROTECT
 8016dd8:	f005 ff78 	bl	801cccc <_tx_mutex_put>
                return(FX_FILE_CORRUPT);
 8016ddc:	e69a      	b.n	8016b14 <_fx_file_open+0x190>
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8016dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016de2:	ea52 0103 	orrs.w	r1, r2, r3
 8016de6:	d1f5      	bne.n	8016dd4 <_fx_file_open+0x450>
 8016de8:	f04f 0e00 	mov.w	lr, #0
 8016dec:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8016df0:	e9cd 2306 	strd	r2, r3, [sp, #24]
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8016df4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016df8:	4673      	mov	r3, lr
 8016dfa:	e6ce      	b.n	8016b9a <_fx_file_open+0x216>
 8016dfc:	46494c45 	.word	0x46494c45

08016e00 <_fx_file_read>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 8016e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e04:	4605      	mov	r5, r0
 8016e06:	b08f      	sub	sp, #60	; 0x3c
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8016e08:	48ac      	ldr	r0, [pc, #688]	; (80170bc <_fx_file_read+0x2bc>)
{
 8016e0a:	9205      	str	r2, [sp, #20]
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8016e0c:	682a      	ldr	r2, [r5, #0]
{
 8016e0e:	9308      	str	r3, [sp, #32]
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8016e10:	4282      	cmp	r2, r0
 8016e12:	d10f      	bne.n	8016e34 <_fx_file_read+0x34>
        return(FX_NOT_OPEN);
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8016e14:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8016e16:	468a      	mov	sl, r1

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8016e18:	4aa9      	ldr	r2, [pc, #676]	; (80170c0 <_fx_file_read+0x2c0>)
    media_ptr -> fx_media_file_reads++;
 8016e1a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    FX_PROTECT
 8016e1e:	6821      	ldr	r1, [r4, #0]
    media_ptr -> fx_media_file_reads++;
 8016e20:	3301      	adds	r3, #1
    FX_PROTECT
 8016e22:	4291      	cmp	r1, r2
    media_ptr -> fx_media_file_reads++;
 8016e24:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    FX_PROTECT
 8016e28:	d009      	beq.n	8016e3e <_fx_file_read+0x3e>
 8016e2a:	2211      	movs	r2, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
}
 8016e2c:	4610      	mov	r0, r2
 8016e2e:	b00f      	add	sp, #60	; 0x3c
 8016e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_OPEN);
 8016e34:	2207      	movs	r2, #7
}
 8016e36:	4610      	mov	r0, r2
 8016e38:	b00f      	add	sp, #60	; 0x3c
 8016e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8016e3e:	f504 73e4 	add.w	r3, r4, #456	; 0x1c8
 8016e42:	f04f 31ff 	mov.w	r1, #4294967295
 8016e46:	4618      	mov	r0, r3
 8016e48:	9309      	str	r3, [sp, #36]	; 0x24
 8016e4a:	f005 fe55 	bl	801caf8 <_tx_mutex_get>
 8016e4e:	4680      	mov	r8, r0
 8016e50:	2800      	cmp	r0, #0
 8016e52:	d1ea      	bne.n	8016e2a <_fx_file_read+0x2a>
    if (file_ptr -> fx_file_current_file_offset >=
 8016e54:	e9d5 bc10 	ldrd	fp, ip, [r5, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 8016e58:	e9d5 6712 	ldrd	r6, r7, [r5, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 8016e5c:	45bc      	cmp	ip, r7
 8016e5e:	bf08      	it	eq
 8016e60:	45b3      	cmpeq	fp, r6
 8016e62:	f080 8131 	bcs.w	80170c8 <_fx_file_read+0x2c8>
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 8016e66:	ebb6 080b 	subs.w	r8, r6, fp
    if ((ULONG64)request_size >
 8016e6a:	f04f 0100 	mov.w	r1, #0
 8016e6e:	9b05      	ldr	r3, [sp, #20]
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 8016e70:	eb67 090c 	sbc.w	r9, r7, ip
    if ((ULONG64)request_size >
 8016e74:	4589      	cmp	r9, r1
 8016e76:	bf08      	it	eq
 8016e78:	4598      	cmpeq	r8, r3
 8016e7a:	d202      	bcs.n	8016e82 <_fx_file_read+0x82>
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 8016e7c:	eba6 030b 	sub.w	r3, r6, fp
 8016e80:	9305      	str	r3, [sp, #20]
    while (bytes_remaining)
 8016e82:	9f05      	ldr	r7, [sp, #20]
 8016e84:	2f00      	cmp	r7, #0
 8016e86:	d033      	beq.n	8016ef0 <_fx_file_read+0xf0>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8016e88:	f242 48a8 	movw	r8, #9384	; 0x24a8
 8016e8c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8016e8e:	44a0      	add	r8, r4
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8016e90:	b91a      	cbnz	r2, 8016e9a <_fx_file_read+0x9a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 8016e92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 8016e94:	42bb      	cmp	r3, r7
 8016e96:	f240 80a5 	bls.w	8016fe4 <_fx_file_read+0x1e4>
            status =  _fx_utility_logical_sector_read(media_ptr,
 8016e9a:	2204      	movs	r2, #4
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	4620      	mov	r0, r4
 8016ea0:	9202      	str	r2, [sp, #8]
 8016ea2:	9301      	str	r3, [sp, #4]
 8016ea4:	68a1      	ldr	r1, [r4, #8]
 8016ea6:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8016eaa:	9100      	str	r1, [sp, #0]
 8016eac:	f000 ff6c 	bl	8017d88 <_fx_utility_logical_sector_read>
            if (status !=  FX_SUCCESS)
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	f040 80c0 	bne.w	8017036 <_fx_file_read+0x236>
                file_ptr -> fx_file_current_logical_offset;
 8016eb6:	6b28      	ldr	r0, [r5, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8016eb8:	4651      	mov	r1, sl
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8016eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8016ebc:	68a3      	ldr	r3, [r4, #8]
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8016ebe:	1a36      	subs	r6, r6, r0
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8016ec0:	4418      	add	r0, r3
 8016ec2:	42be      	cmp	r6, r7
 8016ec4:	bf28      	it	cs
 8016ec6:	463e      	movcs	r6, r7
 8016ec8:	4632      	mov	r2, r6
            bytes_remaining =  bytes_remaining - copy_bytes;
 8016eca:	1bbf      	subs	r7, r7, r6
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 8016ecc:	f001 f9f8 	bl	80182c0 <_fx_utility_memory_copy>
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8016ed0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 8016ed2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            destination_ptr =  destination_ptr + copy_bytes;
 8016ed4:	44b2      	add	sl, r6
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8016ed6:	4432      	add	r2, r6
        if (file_ptr -> fx_file_current_logical_offset >=
 8016ed8:	429a      	cmp	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 8016eda:	632a      	str	r2, [r5, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 8016edc:	d260      	bcs.n	8016fa0 <_fx_file_read+0x1a0>
    while (bytes_remaining)
 8016ede:	2f00      	cmp	r7, #0
 8016ee0:	d1d6      	bne.n	8016e90 <_fx_file_read+0x90>
 8016ee2:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 8016ee6:	9905      	ldr	r1, [sp, #20]
 8016ee8:	eb12 0b01 	adds.w	fp, r2, r1
 8016eec:	f143 0c00 	adc.w	ip, r3, #0
    *actual_size =  request_size;
 8016ef0:	9b08      	ldr	r3, [sp, #32]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8016ef2:	4974      	ldr	r1, [pc, #464]	; (80170c4 <_fx_file_read+0x2c4>)
    *actual_size =  request_size;
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	9b05      	ldr	r3, [sp, #20]
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8016ef8:	6809      	ldr	r1, [r1, #0]
    FX_UNPROTECT
 8016efa:	9809      	ldr	r0, [sp, #36]	; 0x24
    file_ptr -> fx_file_current_file_offset =
 8016efc:	e9c5 bc10 	strd	fp, ip, [r5, #64]	; 0x40
    *actual_size =  request_size;
 8016f00:	6013      	str	r3, [r2, #0]
    return(FX_SUCCESS);
 8016f02:	2200      	movs	r2, #0
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8016f04:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
    return(FX_SUCCESS);
 8016f08:	9205      	str	r2, [sp, #20]
    FX_UNPROTECT
 8016f0a:	f005 fedf 	bl	801cccc <_tx_mutex_put>
    return(FX_SUCCESS);
 8016f0e:	9a05      	ldr	r2, [sp, #20]
 8016f10:	e78c      	b.n	8016e2c <_fx_file_read+0x2c>
 8016f12:	9b06      	ldr	r3, [sp, #24]
 8016f14:	4645      	mov	r5, r8
 8016f16:	464e      	mov	r6, r9
 8016f18:	46b8      	mov	r8, r7
 8016f1a:	455b      	cmp	r3, fp
 8016f1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016f1e:	bf28      	it	cs
 8016f20:	465b      	movcs	r3, fp
 8016f22:	4619      	mov	r1, r3
 8016f24:	9306      	str	r3, [sp, #24]
            if (sectors == 1)
 8016f26:	2901      	cmp	r1, #1
 8016f28:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8016f2c:	f000 80d6 	beq.w	80170dc <_fx_file_read+0x2dc>
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 8016f30:	f8d5 01d8 	ldr.w	r0, [r5, #472]	; 0x1d8
 8016f34:	f242 4ba4 	movw	fp, #9380	; 0x24a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8016f38:	f04f 0c04 	mov.w	ip, #4
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 8016f3c:	f844 000b 	str.w	r0, [r4, fp]
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8016f40:	4620      	mov	r0, r4
 8016f42:	9101      	str	r1, [sp, #4]
 8016f44:	f8cd a000 	str.w	sl, [sp]
 8016f48:	f8cd c008 	str.w	ip, [sp, #8]
 8016f4c:	f000 ff1c 	bl	8017d88 <_fx_utility_logical_sector_read>
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 8016f50:	2300      	movs	r3, #0
 8016f52:	f844 300b 	str.w	r3, [r4, fp]
                if (status !=  FX_SUCCESS)
 8016f56:	2800      	cmp	r0, #0
 8016f58:	d16d      	bne.n	8017036 <_fx_file_read+0x236>
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8016f5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
                (sectors - 1);
 8016f5c:	9906      	ldr	r1, [sp, #24]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8016f5e:	3b01      	subs	r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8016f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
                media_ptr -> fx_media_bytes_per_sector;
 8016f62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                (sectors - 1);
 8016f64:	f101 3cff 	add.w	ip, r1, #4294967295
            file_ptr -> fx_file_current_physical_cluster = cluster;
 8016f68:	622e      	str	r6, [r5, #32]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8016f6a:	185e      	adds	r6, r3, r1
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 8016f6c:	fb01 f902 	mul.w	r9, r1, r2
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8016f70:	6b69      	ldr	r1, [r5, #52]	; 0x34
            file_ptr -> fx_file_current_logical_offset =
 8016f72:	632a      	str	r2, [r5, #48]	; 0x30
            bytes_remaining =  bytes_remaining -
 8016f74:	eba7 0709 	sub.w	r7, r7, r9
            destination_ptr =  destination_ptr +
 8016f78:	44ca      	add	sl, r9
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8016f7a:	fbb6 fef0 	udiv	lr, r6, r0
                file_ptr -> fx_file_current_logical_sector +
 8016f7e:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 8016f82:	fb00 691e 	mls	r9, r0, lr, r6
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8016f86:	eb01 060e 	add.w	r6, r1, lr
                file_ptr -> fx_file_current_logical_sector +
 8016f8a:	eb12 000c 	adds.w	r0, r2, ip
            file_ptr -> fx_file_current_relative_sector =
 8016f8e:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
                file_ptr -> fx_file_current_logical_sector +
 8016f92:	f143 0100 	adc.w	r1, r3, #0
 8016f96:	4602      	mov	r2, r0
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8016f98:	636e      	str	r6, [r5, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector +
 8016f9a:	460b      	mov	r3, r1
            file_ptr -> fx_file_current_logical_sector =
 8016f9c:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 8016fa0:	b967      	cbnz	r7, 8016fbc <_fx_file_read+0x1bc>
 8016fa2:	9e05      	ldr	r6, [sp, #20]
 8016fa4:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 8016fa8:	e9d5 0114 	ldrd	r0, r1, [r5, #80]	; 0x50
 8016fac:	eb12 0b06 	adds.w	fp, r2, r6
 8016fb0:	f143 0c00 	adc.w	ip, r3, #0
 8016fb4:	458c      	cmp	ip, r1
 8016fb6:	bf08      	it	eq
 8016fb8:	4583      	cmpeq	fp, r0
 8016fba:	d299      	bcs.n	8016ef0 <_fx_file_read+0xf0>
            file_ptr -> fx_file_current_relative_sector++;
 8016fbc:	6bab      	ldr	r3, [r5, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 8016fbe:	6d62      	ldr	r2, [r4, #84]	; 0x54
            file_ptr -> fx_file_current_relative_sector++;
 8016fc0:	3301      	adds	r3, #1
            if (file_ptr -> fx_file_current_relative_sector >=
 8016fc2:	4293      	cmp	r3, r2
            file_ptr -> fx_file_current_relative_sector++;
 8016fc4:	63ab      	str	r3, [r5, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 8016fc6:	d23c      	bcs.n	8017042 <_fx_file_read+0x242>
                file_ptr -> fx_file_current_logical_sector++;
 8016fc8:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8016fcc:	1c50      	adds	r0, r2, #1
 8016fce:	f143 0100 	adc.w	r1, r3, #0
 8016fd2:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =  0;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	461a      	mov	r2, r3
 8016fda:	632b      	str	r3, [r5, #48]	; 0x30
    while (bytes_remaining)
 8016fdc:	2f00      	cmp	r7, #0
 8016fde:	f47f af57 	bne.w	8016e90 <_fx_file_read+0x90>
 8016fe2:	e77e      	b.n	8016ee2 <_fx_file_read+0xe2>
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8016fe4:	fbb7 f3f3 	udiv	r3, r7, r3
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8016fe8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016fea:	6baa      	ldr	r2, [r5, #56]	; 0x38
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8016fec:	f8d5 9020 	ldr.w	r9, [r5, #32]
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8016ff0:	eba1 0b02 	sub.w	fp, r1, r2
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8016ff4:	9306      	str	r3, [sp, #24]
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 8016ff6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8016ffa:	455b      	cmp	r3, fp
 8016ffc:	d97f      	bls.n	80170fe <_fx_file_read+0x2fe>
 8016ffe:	970a      	str	r7, [sp, #40]	; 0x28
 8017000:	4647      	mov	r7, r8
 8017002:	46a8      	mov	r8, r5
 8017004:	461d      	mov	r5, r3
 8017006:	e00d      	b.n	8017024 <_fx_file_read+0x224>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8017008:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801700a:	2e01      	cmp	r6, #1
 801700c:	d94a      	bls.n	80170a4 <_fx_file_read+0x2a4>
 801700e:	6839      	ldr	r1, [r7, #0]
 8017010:	428e      	cmp	r6, r1
 8017012:	d847      	bhi.n	80170a4 <_fx_file_read+0x2a4>
                    if (next_cluster != cluster + 1)
 8017014:	4296      	cmp	r6, r2
 8017016:	f47f af7c 	bne.w	8016f12 <_fx_file_read+0x112>
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 801701a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801701c:	46b1      	mov	r9, r6
 801701e:	4493      	add	fp, r2
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8017020:	455d      	cmp	r5, fp
 8017022:	d946      	bls.n	80170b2 <_fx_file_read+0x2b2>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8017024:	aa0d      	add	r2, sp, #52	; 0x34
 8017026:	4649      	mov	r1, r9
 8017028:	4620      	mov	r0, r4
 801702a:	f000 fb47 	bl	80176bc <_fx_utility_FAT_entry_read>
                    if (next_cluster != cluster + 1)
 801702e:	f109 0201 	add.w	r2, r9, #1
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8017032:	2800      	cmp	r0, #0
 8017034:	d0e8      	beq.n	8017008 <_fx_file_read+0x208>
 8017036:	9005      	str	r0, [sp, #20]
                        FX_UNPROTECT
 8017038:	9809      	ldr	r0, [sp, #36]	; 0x24
 801703a:	f005 fe47 	bl	801cccc <_tx_mutex_put>
 801703e:	9a05      	ldr	r2, [sp, #20]
 8017040:	e6f4      	b.n	8016e2c <_fx_file_read+0x2c>
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 8017042:	aa0d      	add	r2, sp, #52	; 0x34
 8017044:	6a29      	ldr	r1, [r5, #32]
 8017046:	4620      	mov	r0, r4
 8017048:	f000 fb38 	bl	80176bc <_fx_utility_FAT_entry_read>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 801704c:	2800      	cmp	r0, #0
 801704e:	d1f2      	bne.n	8017036 <_fx_file_read+0x236>
 8017050:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017052:	2901      	cmp	r1, #1
 8017054:	d956      	bls.n	8017104 <_fx_file_read+0x304>
 8017056:	f8d8 3000 	ldr.w	r3, [r8]
 801705a:	4299      	cmp	r1, r3
 801705c:	d852      	bhi.n	8017104 <_fx_file_read+0x304>
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 801705e:	f1b1 0b02 	subs.w	fp, r1, #2
 8017062:	f04f 0300 	mov.w	r3, #0
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8017066:	6d66      	ldr	r6, [r4, #84]	; 0x54
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8017068:	f143 3cff 	adc.w	ip, r3, #4294967295
 801706c:	465a      	mov	r2, fp
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 801706e:	6229      	str	r1, [r5, #32]
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8017070:	4663      	mov	r3, ip
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017072:	f8d4 c050 	ldr.w	ip, [r4, #80]	; 0x50
                file_ptr -> fx_file_current_relative_sector =  0;
 8017076:	63a8      	str	r0, [r5, #56]	; 0x38
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8017078:	fbab 0106 	umull	r0, r1, fp, r6
 801707c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                file_ptr -> fx_file_current_relative_cluster++;
 8017082:	6b6a      	ldr	r2, [r5, #52]	; 0x34
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8017084:	fb06 1303 	mla	r3, r6, r3, r1
                file_ptr -> fx_file_current_relative_cluster++;
 8017088:	3201      	adds	r2, #1
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 801708a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801708e:	9307      	str	r3, [sp, #28]
                file_ptr -> fx_file_current_relative_cluster++;
 8017090:	636a      	str	r2, [r5, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017096:	eb10 000c 	adds.w	r0, r0, ip
 801709a:	f141 0100 	adc.w	r1, r1, #0
 801709e:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
 80170a2:	e798      	b.n	8016fd6 <_fx_file_read+0x1d6>
                            return(FX_FILE_CORRUPT);
 80170a4:	2208      	movs	r2, #8
                        FX_UNPROTECT
 80170a6:	9809      	ldr	r0, [sp, #36]	; 0x24
                            return(FX_FILE_CORRUPT);
 80170a8:	9205      	str	r2, [sp, #20]
                        FX_UNPROTECT
 80170aa:	f005 fe0f 	bl	801cccc <_tx_mutex_put>
 80170ae:	9a05      	ldr	r2, [sp, #20]
 80170b0:	e6bc      	b.n	8016e2c <_fx_file_read+0x2c>
 80170b2:	4645      	mov	r5, r8
 80170b4:	9906      	ldr	r1, [sp, #24]
 80170b6:	46b8      	mov	r8, r7
 80170b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80170ba:	e734      	b.n	8016f26 <_fx_file_read+0x126>
 80170bc:	46494c45 	.word	0x46494c45
 80170c0:	4d454449 	.word	0x4d454449
 80170c4:	200078f8 	.word	0x200078f8
        return(FX_END_OF_FILE);
 80170c8:	2209      	movs	r2, #9
        FX_UNPROTECT
 80170ca:	9809      	ldr	r0, [sp, #36]	; 0x24
        return(FX_END_OF_FILE);
 80170cc:	9205      	str	r2, [sp, #20]
        FX_UNPROTECT
 80170ce:	f005 fdfd 	bl	801cccc <_tx_mutex_put>
        *actual_size =  0;
 80170d2:	9b08      	ldr	r3, [sp, #32]
        return(FX_END_OF_FILE);
 80170d4:	9a05      	ldr	r2, [sp, #20]
        *actual_size =  0;
 80170d6:	f8c3 8000 	str.w	r8, [r3]
        return(FX_END_OF_FILE);
 80170da:	e6a7      	b.n	8016e2c <_fx_file_read+0x2c>
 80170dc:	4608      	mov	r0, r1
                status =  _fx_utility_logical_sector_read(media_ptr,
 80170de:	2104      	movs	r1, #4
 80170e0:	9001      	str	r0, [sp, #4]
 80170e2:	4620      	mov	r0, r4
 80170e4:	9102      	str	r1, [sp, #8]
 80170e6:	68a1      	ldr	r1, [r4, #8]
 80170e8:	9100      	str	r1, [sp, #0]
 80170ea:	f000 fe4d 	bl	8017d88 <_fx_utility_logical_sector_read>
                if (status !=  FX_SUCCESS)
 80170ee:	2800      	cmp	r0, #0
 80170f0:	d1a1      	bne.n	8017036 <_fx_file_read+0x236>
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector);
 80170f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80170f4:	4651      	mov	r1, sl
 80170f6:	68a0      	ldr	r0, [r4, #8]
 80170f8:	f001 f8e2 	bl	80182c0 <_fx_utility_memory_copy>
 80170fc:	e72d      	b.n	8016f5a <_fx_file_read+0x15a>
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80170fe:	464e      	mov	r6, r9
 8017100:	4619      	mov	r1, r3
 8017102:	e710      	b.n	8016f26 <_fx_file_read+0x126>
                            return(FX_FILE_CORRUPT);
 8017104:	2208      	movs	r2, #8
                        FX_UNPROTECT
 8017106:	9809      	ldr	r0, [sp, #36]	; 0x24
                            return(FX_FILE_CORRUPT);
 8017108:	9205      	str	r2, [sp, #20]
                        FX_UNPROTECT
 801710a:	f005 fddf 	bl	801cccc <_tx_mutex_put>
 801710e:	9a05      	ldr	r2, [sp, #20]
 8017110:	e68c      	b.n	8016e2c <_fx_file_read+0x2c>
 8017112:	bf00      	nop

08017114 <_fx_file_write>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8017114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8017118:	4b68      	ldr	r3, [pc, #416]	; (80172bc <_fx_file_write+0x1a8>)
{
 801711a:	460f      	mov	r7, r1
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 801711c:	6801      	ldr	r1, [r0, #0]
{
 801711e:	b08f      	sub	sp, #60	; 0x3c
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8017120:	4299      	cmp	r1, r3
 8017122:	d123      	bne.n	801716c <_fx_file_write+0x58>
        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8017124:	6d85      	ldr	r5, [r0, #88]	; 0x58

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 8017126:	4692      	mov	sl, r2
 8017128:	f04f 0b00 	mov.w	fp, #0
 801712c:	4604      	mov	r4, r0
 801712e:	f04f 0900 	mov.w	r9, #0
    media_ptr -> fx_media_file_writes++;
 8017132:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 8017136:	f04f 38ff 	mov.w	r8, #4294967295
    media_ptr -> fx_media_file_writes++;
 801713a:	3301      	adds	r3, #1
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 801713c:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	; 0x40
 8017140:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8017144:	eb12 0a00 	adds.w	sl, r2, r0
    media_ptr -> fx_media_file_writes++;
 8017148:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 801714c:	eb4b 0b01 	adc.w	fp, fp, r1
 8017150:	45d9      	cmp	r9, fp
 8017152:	bf08      	it	eq
 8017154:	45d0      	cmpeq	r8, sl
 8017156:	d30f      	bcc.n	8017178 <_fx_file_write+0x64>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8017158:	4b59      	ldr	r3, [pc, #356]	; (80172c0 <_fx_file_write+0x1ac>)
 801715a:	6829      	ldr	r1, [r5, #0]
 801715c:	4299      	cmp	r1, r3
 801715e:	d011      	beq.n	8017184 <_fx_file_write+0x70>
 8017160:	f04f 0b11 	mov.w	fp, #17
    /* Release media protection.  */
    FX_UNPROTECT

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
}
 8017164:	4658      	mov	r0, fp
 8017166:	b00f      	add	sp, #60	; 0x3c
 8017168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NOT_OPEN);
 801716c:	f04f 0b07 	mov.w	fp, #7
}
 8017170:	4658      	mov	r0, fp
 8017172:	b00f      	add	sp, #60	; 0x3c
 8017174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_NO_MORE_SPACE);
 8017178:	f04f 0b0a 	mov.w	fp, #10
}
 801717c:	4658      	mov	r0, fp
 801717e:	b00f      	add	sp, #60	; 0x3c
 8017180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FX_PROTECT
 8017184:	f505 73e4 	add.w	r3, r5, #456	; 0x1c8
 8017188:	f04f 31ff 	mov.w	r1, #4294967295
 801718c:	9206      	str	r2, [sp, #24]
 801718e:	4618      	mov	r0, r3
 8017190:	9308      	str	r3, [sp, #32]
 8017192:	f005 fcb1 	bl	801caf8 <_tx_mutex_get>
 8017196:	2800      	cmp	r0, #0
 8017198:	d1e2      	bne.n	8017160 <_fx_file_write+0x4c>
    if (media_ptr -> fx_media_driver_write_protect)
 801719a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 801719e:	9a06      	ldr	r2, [sp, #24]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	f040 8221 	bne.w	80175e8 <_fx_file_write+0x4d4>
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 80171a6:	68a1      	ldr	r1, [r4, #8]
 80171a8:	2901      	cmp	r1, #1
 80171aa:	f040 8081 	bne.w	80172b0 <_fx_file_write+0x19c>
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 80171ae:	f8d5 e028 	ldr.w	lr, [r5, #40]	; 0x28
 80171b2:	6d6e      	ldr	r6, [r5, #84]	; 0x54
 80171b4:	fb06 f60e 	mul.w	r6, r6, lr
    if (bytes_per_cluster == 0)
 80171b8:	2e00      	cmp	r6, #0
 80171ba:	d073      	beq.n	80172a4 <_fx_file_write+0x190>
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 80171bc:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 80171c0:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
 80171c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80171c8:	ebb0 0008 	subs.w	r0, r0, r8
 80171cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80171d0:	eb61 0109 	sbc.w	r1, r1, r9
 80171d4:	4559      	cmp	r1, fp
 80171d6:	bf08      	it	eq
 80171d8:	4550      	cmpeq	r0, sl
 80171da:	f080 80c5 	bcs.w	8017368 <_fx_file_write+0x254>
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 80171de:	1e50      	subs	r0, r2, #1
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 80171e0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 80171e4:	4430      	add	r0, r6
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 80171e6:	ebb8 0101 	subs.w	r1, r8, r1
 80171ea:	eb69 0202 	sbc.w	r2, r9, r2
 80171ee:	eb11 0800 	adds.w	r8, r1, r0
 80171f2:	4693      	mov	fp, r2
 80171f4:	4640      	mov	r0, r8
 80171f6:	4632      	mov	r2, r6
 80171f8:	f14b 0900 	adc.w	r9, fp, #0
 80171fc:	4649      	mov	r1, r9
 80171fe:	f7e9 f99f 	bl	8000540 <__aeabi_uldivmod>
 8017202:	4682      	mov	sl, r0
        if (clusters > media_ptr -> fx_media_available_clusters)
 8017204:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8017206:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
        if (clusters > media_ptr -> fx_media_available_clusters)
 801720a:	4550      	cmp	r0, sl
 801720c:	f0c0 8218 	bcc.w	8017640 <_fx_file_write+0x52c>
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 8017210:	4652      	mov	r2, sl
 8017212:	2300      	movs	r3, #0
 8017214:	fbaa 8906 	umull	r8, r9, sl, r6
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 8017218:	6921      	ldr	r1, [r4, #16]
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 801721a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801721e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 8017220:	4451      	add	r1, sl
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 8017222:	fb06 9903 	mla	r9, r6, r3, r9
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 8017226:	6121      	str	r1, [r4, #16]
 8017228:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801722c:	eb12 0208 	adds.w	r2, r2, r8
 8017230:	f04f 38ff 	mov.w	r8, #4294967295
 8017234:	eb43 0309 	adc.w	r3, r3, r9
 8017238:	f04f 0900 	mov.w	r9, #0
 801723c:	4599      	cmp	r9, r3
 801723e:	bf08      	it	eq
 8017240:	4590      	cmpeq	r8, r2
 8017242:	d201      	bcs.n	8017248 <_fx_file_write+0x134>
 8017244:	4642      	mov	r2, r8
 8017246:	464b      	mov	r3, r9
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 8017248:	eba0 000a 	sub.w	r0, r0, sl
        total_clusters =     media_ptr -> fx_media_total_clusters;
 801724c:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 8017250:	f8d4 901c 	ldr.w	r9, [r4, #28]
        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 8017254:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 8017258:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 801725c:	67e8      	str	r0, [r5, #124]	; 0x7c
        while (clusters)
 801725e:	f1ba 0f00 	cmp.w	sl, #0
 8017262:	d06f      	beq.n	8017344 <_fx_file_write+0x230>
 8017264:	4623      	mov	r3, r4
    first_new_cluster =  0;
 8017266:	f04f 0a00 	mov.w	sl, #0
 801726a:	4644      	mov	r4, r8
 801726c:	4698      	mov	r8, r3
                    if (!total_clusters)
 801726e:	b964      	cbnz	r4, 801728a <_fx_file_write+0x176>
 8017270:	e1e6      	b.n	8017640 <_fx_file_write+0x52c>
 8017272:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8017274:	1c71      	adds	r1, r6, #1
                    if (FAT_value == FX_FREE_CLUSTER)
 8017276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017278:	3302      	adds	r3, #2
 801727a:	b31a      	cbz	r2, 80172c4 <_fx_file_write+0x1b0>
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 801727c:	428b      	cmp	r3, r1
 801727e:	bf8c      	ite	hi
 8017280:	460e      	movhi	r6, r1
 8017282:	2602      	movls	r6, #2
                    if (!total_clusters)
 8017284:	2c00      	cmp	r4, #0
 8017286:	f000 81db 	beq.w	8017640 <_fx_file_write+0x52c>
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 801728a:	aa0d      	add	r2, sp, #52	; 0x34
 801728c:	4631      	mov	r1, r6
 801728e:	4628      	mov	r0, r5
                    total_clusters--;
 8017290:	3c01      	subs	r4, #1
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8017292:	f000 fa13 	bl	80176bc <_fx_utility_FAT_entry_read>
                    if (status != FX_SUCCESS)
 8017296:	2800      	cmp	r0, #0
 8017298:	d0eb      	beq.n	8017272 <_fx_file_write+0x15e>
 801729a:	4683      	mov	fp, r0
                        FX_UNPROTECT
 801729c:	9808      	ldr	r0, [sp, #32]
 801729e:	f005 fd15 	bl	801cccc <_tx_mutex_put>
 80172a2:	e75f      	b.n	8017164 <_fx_file_write+0x50>
        FX_UNPROTECT
 80172a4:	9808      	ldr	r0, [sp, #32]
        return(FX_MEDIA_INVALID);
 80172a6:	f04f 0b02 	mov.w	fp, #2
        FX_UNPROTECT
 80172aa:	f005 fd0f 	bl	801cccc <_tx_mutex_put>
        return(FX_MEDIA_INVALID);
 80172ae:	e759      	b.n	8017164 <_fx_file_write+0x50>
        FX_UNPROTECT
 80172b0:	9808      	ldr	r0, [sp, #32]
        return(FX_ACCESS_ERROR);
 80172b2:	f04f 0b06 	mov.w	fp, #6
        FX_UNPROTECT
 80172b6:	f005 fd09 	bl	801cccc <_tx_mutex_put>
        return(FX_ACCESS_ERROR);
 80172ba:	e753      	b.n	8017164 <_fx_file_write+0x50>
 80172bc:	46494c45 	.word	0x46494c45
 80172c0:	4d454449 	.word	0x4d454449
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 80172c4:	428b      	cmp	r3, r1
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 80172c6:	bf98      	it	ls
 80172c8:	2102      	movls	r1, #2
 80172ca:	f1ba 0f00 	cmp.w	sl, #0
 80172ce:	bf08      	it	eq
 80172d0:	46b2      	moveq	sl, r6
 80172d2:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
            if (last_cluster)
 80172d6:	f1b9 0f00 	cmp.w	r9, #0
 80172da:	f000 81c2 	beq.w	8017662 <_fx_file_write+0x54e>
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 80172de:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80172e2:	454b      	cmp	r3, r9
 80172e4:	d006      	beq.n	80172f4 <_fx_file_write+0x1e0>
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 80172e6:	4649      	mov	r1, r9
 80172e8:	4632      	mov	r2, r6
 80172ea:	4628      	mov	r0, r5
 80172ec:	f000 fb46 	bl	801797c <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 80172f0:	2800      	cmp	r0, #0
 80172f2:	d1d2      	bne.n	801729a <_fx_file_write+0x186>
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 80172f4:	6d68      	ldr	r0, [r5, #84]	; 0x54
                if ((file_ptr -> fx_file_current_relative_sector >=
 80172f6:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 80172fa:	1e43      	subs	r3, r0, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d317      	bcc.n	8017330 <_fx_file_write+0x21c>
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 8017300:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8017304:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8017306:	429a      	cmp	r2, r3
 8017308:	d312      	bcc.n	8017330 <_fx_file_write+0x21c>
                    file_ptr -> fx_file_current_relative_cluster++;
 801730a:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 801730e:	f04f 0e00 	mov.w	lr, #0
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017312:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8017314:	f1a6 0c02 	sub.w	ip, r6, #2
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017318:	2300      	movs	r3, #0
                    file_ptr -> fx_file_current_relative_cluster++;
 801731a:	3101      	adds	r1, #1
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 801731c:	f8c8 6020 	str.w	r6, [r8, #32]
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017320:	fbe0 230c 	umlal	r2, r3, r0, ip
                    file_ptr -> fx_file_current_relative_sector =   0;
 8017324:	f8c8 e038 	str.w	lr, [r8, #56]	; 0x38
                    file_ptr -> fx_file_current_relative_cluster++;
 8017328:	e9c8 e10c 	strd	lr, r1, [r8, #48]	; 0x30
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801732c:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
        while (clusters)
 8017330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017332:	46b1      	mov	r9, r6
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 8017334:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
        while (clusters)
 8017338:	3b01      	subs	r3, #1
 801733a:	9309      	str	r3, [sp, #36]	; 0x24
 801733c:	d197      	bne.n	801726e <_fx_file_write+0x15a>
 801733e:	4644      	mov	r4, r8
 8017340:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8017344:	f242 43ac 	movw	r3, #9388	; 0x24ac
 8017348:	4649      	mov	r1, r9
 801734a:	4628      	mov	r0, r5
 801734c:	58ea      	ldr	r2, [r5, r3]
 801734e:	f000 fb15 	bl	801797c <_fx_utility_FAT_entry_write>
            if (status !=  FX_SUCCESS)
 8017352:	4683      	mov	fp, r0
 8017354:	2800      	cmp	r0, #0
 8017356:	d1a1      	bne.n	801729c <_fx_file_write+0x188>
        if (file_ptr -> fx_file_last_physical_cluster)
 8017358:	69e1      	ldr	r1, [r4, #28]
 801735a:	2900      	cmp	r1, #0
 801735c:	f040 81a5 	bne.w	80176aa <_fx_file_write+0x596>
 8017360:	f8d5 e028 	ldr.w	lr, [r5, #40]	; 0x28
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 8017364:	f8c4 901c 	str.w	r9, [r4, #28]
    if (file_ptr -> fx_file_current_logical_offset >=
 8017368:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801736a:	4576      	cmp	r6, lr
 801736c:	d30c      	bcc.n	8017388 <_fx_file_write+0x274>
        file_ptr -> fx_file_current_relative_sector++;
 801736e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 8017370:	2600      	movs	r6, #0
        file_ptr -> fx_file_current_logical_sector++;
 8017372:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 8017376:	3101      	adds	r1, #1
        file_ptr -> fx_file_current_logical_offset =  0;
 8017378:	6326      	str	r6, [r4, #48]	; 0x30
        file_ptr -> fx_file_current_logical_sector++;
 801737a:	f112 0801 	adds.w	r8, r2, #1
        file_ptr -> fx_file_current_relative_sector++;
 801737e:	63a1      	str	r1, [r4, #56]	; 0x38
        file_ptr -> fx_file_current_logical_sector++;
 8017380:	f143 0900 	adc.w	r9, r3, #0
 8017384:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
    while (bytes_remaining)
 8017388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801738c:	4313      	orrs	r3, r2
 801738e:	d050      	beq.n	8017432 <_fx_file_write+0x31e>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8017390:	f242 4aa8 	movw	sl, #9384	; 0x24a8
 8017394:	9706      	str	r7, [sp, #24]
    while (bytes_remaining)
 8017396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 801739a:	44aa      	add	sl, r5
 801739c:	469b      	mov	fp, r3
 801739e:	4657      	mov	r7, sl
 80173a0:	4692      	mov	sl, r2
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80173a2:	b936      	cbnz	r6, 80173b2 <_fx_file_write+0x29e>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 80173a4:	2300      	movs	r3, #0
 80173a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80173a8:	459b      	cmp	fp, r3
 80173aa:	bf08      	it	eq
 80173ac:	4592      	cmpeq	sl, r2
 80173ae:	f080 80f5 	bcs.w	801759c <_fx_file_write+0x488>
                status =  _fx_utility_logical_sector_read(media_ptr,
 80173b2:	f04f 0904 	mov.w	r9, #4
 80173b6:	f04f 0801 	mov.w	r8, #1
 80173ba:	4628      	mov	r0, r5
 80173bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80173c0:	f8cd 8004 	str.w	r8, [sp, #4]
 80173c4:	68a9      	ldr	r1, [r5, #8]
 80173c6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80173ca:	9100      	str	r1, [sp, #0]
 80173cc:	f000 fcdc 	bl	8017d88 <_fx_utility_logical_sector_read>
            if (status !=  FX_SUCCESS)
 80173d0:	2800      	cmp	r0, #0
 80173d2:	f47f af62 	bne.w	801729a <_fx_file_write+0x186>
                file_ptr -> fx_file_current_logical_offset;
 80173d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 80173d8:	6aae      	ldr	r6, [r5, #40]	; 0x28
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 80173da:	68a9      	ldr	r1, [r5, #8]
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 80173dc:	1af6      	subs	r6, r6, r3
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 80173de:	9806      	ldr	r0, [sp, #24]
 80173e0:	4419      	add	r1, r3
            if (copy_bytes > bytes_remaining)
 80173e2:	2300      	movs	r3, #0
                copy_bytes =  (ULONG)bytes_remaining;
 80173e4:	459b      	cmp	fp, r3
 80173e6:	bf08      	it	eq
 80173e8:	45b2      	cmpeq	sl, r6
 80173ea:	bf38      	it	cc
 80173ec:	4656      	movcc	r6, sl
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +
 80173ee:	4632      	mov	r2, r6
 80173f0:	f000 ff66 	bl	80182c0 <_fx_utility_memory_copy>
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80173f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80173f8:	f8cd 8004 	str.w	r8, [sp, #4]
 80173fc:	4628      	mov	r0, r5
 80173fe:	68a9      	ldr	r1, [r5, #8]
 8017400:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8017404:	9100      	str	r1, [sp, #0]
 8017406:	f000 fe6d 	bl	80180e4 <_fx_utility_logical_sector_write>
            if (status !=  FX_SUCCESS)
 801740a:	2800      	cmp	r0, #0
 801740c:	f47f af45 	bne.w	801729a <_fx_file_write+0x186>
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8017410:	6b22      	ldr	r2, [r4, #48]	; 0x30
            bytes_remaining =  bytes_remaining - copy_bytes;
 8017412:	ebba 0a06 	subs.w	sl, sl, r6
            source_ptr =  source_ptr + copy_bytes;
 8017416:	9906      	ldr	r1, [sp, #24]
        if (file_ptr -> fx_file_current_logical_offset >=
 8017418:	6aab      	ldr	r3, [r5, #40]	; 0x28
            bytes_remaining =  bytes_remaining - copy_bytes;
 801741a:	f16b 0b00 	sbc.w	fp, fp, #0
            source_ptr =  source_ptr + copy_bytes;
 801741e:	4431      	add	r1, r6
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8017420:	4416      	add	r6, r2
        if (file_ptr -> fx_file_current_logical_offset >=
 8017422:	429e      	cmp	r6, r3
            source_ptr =  source_ptr + copy_bytes;
 8017424:	9106      	str	r1, [sp, #24]
            file_ptr -> fx_file_current_logical_offset =
 8017426:	6326      	str	r6, [r4, #48]	; 0x30
        if (file_ptr -> fx_file_current_logical_offset >=
 8017428:	f080 8094 	bcs.w	8017554 <_fx_file_write+0x440>
    while (bytes_remaining)
 801742c:	ea5a 030b 	orrs.w	r3, sl, fp
 8017430:	d1b7      	bne.n	80173a2 <_fx_file_write+0x28e>
 8017432:	e9d4 8910 	ldrd	r8, r9, [r4, #64]	; 0x40
        file_ptr -> fx_file_current_file_offset + size;
 8017436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
        file_ptr -> fx_file_current_file_size;
 801743a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
        file_ptr -> fx_file_current_file_offset + size;
 801743e:	eb12 0208 	adds.w	r2, r2, r8
 8017442:	eb43 0309 	adc.w	r3, r3, r9
    if (file_ptr -> fx_file_current_file_offset >
 8017446:	4299      	cmp	r1, r3
 8017448:	bf08      	it	eq
 801744a:	4290      	cmpeq	r0, r2
    file_ptr -> fx_file_current_file_offset =
 801744c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8017450:	e9c4 0128 	strd	r0, r1, [r4, #160]	; 0xa0
    if (file_ptr -> fx_file_current_file_offset >
 8017454:	f080 811c 	bcs.w	8017690 <_fx_file_write+0x57c>
        open_count =  media_ptr -> fx_media_opened_file_count;
 8017458:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 801745c:	f8d5 60c8 	ldr.w	r6, [r5, #200]	; 0xc8
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8017460:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        while (open_count)
 8017464:	b927      	cbnz	r7, 8017470 <_fx_file_write+0x35c>
 8017466:	e113      	b.n	8017690 <_fx_file_write+0x57c>
 8017468:	3f01      	subs	r7, #1
            search_ptr =  search_ptr -> fx_file_opened_next;
 801746a:	6df6      	ldr	r6, [r6, #92]	; 0x5c
        while (open_count)
 801746c:	f000 8110 	beq.w	8017690 <_fx_file_write+0x57c>
            if ((search_ptr != file_ptr) &&
 8017470:	42b4      	cmp	r4, r6
 8017472:	d0f9      	beq.n	8017468 <_fx_file_write+0x354>
 8017474:	e9d6 012a 	ldrd	r0, r1, [r6, #168]	; 0xa8
 8017478:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
 801747c:	4299      	cmp	r1, r3
 801747e:	bf08      	it	eq
 8017480:	4290      	cmpeq	r0, r2
 8017482:	d1f1      	bne.n	8017468 <_fx_file_write+0x354>
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8017484:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8017488:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801748c:	429a      	cmp	r2, r3
 801748e:	d1eb      	bne.n	8017468 <_fx_file_write+0x354>
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8017490:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 8017494:	69e0      	ldr	r0, [r4, #28]
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8017496:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 801749a:	f8c6 109c 	str.w	r1, [r6, #156]	; 0x9c
                if (search_ptr -> fx_file_total_clusters == 0)
 801749e:	6931      	ldr	r1, [r6, #16]
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 80174a0:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 80174a4:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 80174a8:	61f0      	str	r0, [r6, #28]
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 80174aa:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 80174ae:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 80174b2:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
                if (search_ptr -> fx_file_total_clusters == 0)
 80174b6:	2900      	cmp	r1, #0
 80174b8:	d1d6      	bne.n	8017468 <_fx_file_write+0x354>
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 80174ba:	f8d4 c014 	ldr.w	ip, [r4, #20]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80174be:	f04f 0900 	mov.w	r9, #0
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 80174c2:	6923      	ldr	r3, [r4, #16]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80174c4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 80174c6:	f1ac 0a02 	sub.w	sl, ip, #2
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80174ca:	6d68      	ldr	r0, [r5, #84]	; 0x54
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 80174cc:	6133      	str	r3, [r6, #16]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80174ce:	464b      	mov	r3, r9
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 80174d0:	f8c6 c020 	str.w	ip, [r6, #32]
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80174d4:	fbe0 230a 	umlal	r2, r3, r0, sl
                    search_ptr -> fx_file_current_relative_cluster =  0;
 80174d8:	6371      	str	r1, [r6, #52]	; 0x34
                    search_ptr -> fx_file_current_relative_sector =   0;
 80174da:	63b1      	str	r1, [r6, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 80174dc:	6331      	str	r1, [r6, #48]	; 0x30
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80174de:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
                    search_ptr -> fx_file_current_file_offset =       0;
 80174e2:	2200      	movs	r2, #0
 80174e4:	2300      	movs	r3, #0
 80174e6:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
 80174ea:	e7bd      	b.n	8017468 <_fx_file_write+0x354>
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80174ec:	4649      	mov	r1, r9
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80174ee:	9a06      	ldr	r2, [sp, #24]
 80174f0:	2304      	movs	r3, #4
 80174f2:	f8cd 8004 	str.w	r8, [sp, #4]
 80174f6:	4628      	mov	r0, r5
 80174f8:	9200      	str	r2, [sp, #0]
 80174fa:	9302      	str	r3, [sp, #8]
 80174fc:	9109      	str	r1, [sp, #36]	; 0x24
 80174fe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8017502:	f000 fdef 	bl	80180e4 <_fx_utility_logical_sector_write>
            if (status !=  FX_SUCCESS)
 8017506:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017508:	2800      	cmp	r0, #0
 801750a:	f47f aec6 	bne.w	801729a <_fx_file_write+0x186>
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 801750e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                (sectors - 1);
 8017510:	f108 36ff 	add.w	r6, r8, #4294967295
                media_ptr -> fx_media_bytes_per_sector;
 8017514:	6aaa      	ldr	r2, [r5, #40]	; 0x28
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8017516:	3b01      	subs	r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8017518:	6d68      	ldr	r0, [r5, #84]	; 0x54
            file_ptr -> fx_file_current_logical_offset =
 801751a:	6322      	str	r2, [r4, #48]	; 0x30
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 801751c:	eb03 0c08 	add.w	ip, r3, r8
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 8017520:	fb08 f802 	mul.w	r8, r8, r2
            source_ptr =  source_ptr +
 8017524:	9b06      	ldr	r3, [sp, #24]
            bytes_remaining =  bytes_remaining -
 8017526:	ebba 0a08 	subs.w	sl, sl, r8
            file_ptr -> fx_file_current_physical_cluster = cluster;
 801752a:	6221      	str	r1, [r4, #32]
            source_ptr =  source_ptr +
 801752c:	4443      	add	r3, r8
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 801752e:	6b61      	ldr	r1, [r4, #52]	; 0x34
            bytes_remaining =  bytes_remaining -
 8017530:	f16b 0b00 	sbc.w	fp, fp, #0
            source_ptr =  source_ptr +
 8017534:	9306      	str	r3, [sp, #24]
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 8017536:	fbbc fef0 	udiv	lr, ip, r0
                file_ptr -> fx_file_current_logical_sector +
 801753a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 801753e:	fb00 c01e 	mls	r0, r0, lr, ip
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8017542:	4471      	add	r1, lr
                file_ptr -> fx_file_current_logical_sector +
 8017544:	eb12 0806 	adds.w	r8, r2, r6
            file_ptr -> fx_file_current_relative_sector =
 8017548:	63a0      	str	r0, [r4, #56]	; 0x38
                file_ptr -> fx_file_current_logical_sector +
 801754a:	f143 0900 	adc.w	r9, r3, #0
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 801754e:	6361      	str	r1, [r4, #52]	; 0x34
            file_ptr -> fx_file_current_logical_sector =
 8017550:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
            if ((bytes_remaining == 0) &&
 8017554:	ea5a 030b 	orrs.w	r3, sl, fp
 8017558:	d110      	bne.n	801757c <_fx_file_write+0x468>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 801755a:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 801755e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017562:	4690      	mov	r8, r2
 8017564:	4699      	mov	r9, r3
 8017566:	eb10 0008 	adds.w	r0, r0, r8
            if ((bytes_remaining == 0) &&
 801756a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
                ((file_ptr -> fx_file_current_file_offset + size) >=
 801756e:	eb41 0109 	adc.w	r1, r1, r9
            if ((bytes_remaining == 0) &&
 8017572:	4299      	cmp	r1, r3
 8017574:	bf08      	it	eq
 8017576:	4290      	cmpeq	r0, r2
 8017578:	f4bf af5d 	bcs.w	8017436 <_fx_file_write+0x322>
            file_ptr -> fx_file_current_relative_sector++;
 801757c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 801757e:	6d6a      	ldr	r2, [r5, #84]	; 0x54
            file_ptr -> fx_file_current_relative_sector++;
 8017580:	3301      	adds	r3, #1
            if (file_ptr -> fx_file_current_relative_sector >=
 8017582:	4293      	cmp	r3, r2
            file_ptr -> fx_file_current_relative_sector++;
 8017584:	63a3      	str	r3, [r4, #56]	; 0x38
            if (file_ptr -> fx_file_current_relative_sector >=
 8017586:	d235      	bcs.n	80175f4 <_fx_file_write+0x4e0>
                file_ptr -> fx_file_current_logical_sector++;
 8017588:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 801758c:	1c50      	adds	r0, r2, #1
 801758e:	f143 0100 	adc.w	r1, r3, #0
 8017592:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =  0;
 8017596:	2600      	movs	r6, #0
 8017598:	6326      	str	r6, [r4, #48]	; 0x30
 801759a:	e747      	b.n	801742c <_fx_file_write+0x318>
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 801759c:	4650      	mov	r0, sl
 801759e:	4659      	mov	r1, fp
 80175a0:	f7e8 ffce 	bl	8000540 <__aeabi_uldivmod>
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80175a4:	6d6e      	ldr	r6, [r5, #84]	; 0x54
 80175a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 80175a8:	4680      	mov	r8, r0
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80175aa:	f8d4 9020 	ldr.w	r9, [r4, #32]
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80175ae:	1af6      	subs	r6, r6, r3
            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80175b0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80175b4:	42b0      	cmp	r0, r6
 80175b6:	d80d      	bhi.n	80175d4 <_fx_file_write+0x4c0>
 80175b8:	e798      	b.n	80174ec <_fx_file_write+0x3d8>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80175ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80175bc:	2901      	cmp	r1, #1
 80175be:	d945      	bls.n	801764c <_fx_file_write+0x538>
 80175c0:	683a      	ldr	r2, [r7, #0]
 80175c2:	4291      	cmp	r1, r2
 80175c4:	d842      	bhi.n	801764c <_fx_file_write+0x538>
                    if (next_cluster != cluster + 1)
 80175c6:	4299      	cmp	r1, r3
 80175c8:	d146      	bne.n	8017658 <_fx_file_write+0x544>
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 80175ca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80175cc:	4689      	mov	r9, r1
 80175ce:	441e      	add	r6, r3
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80175d0:	45b0      	cmp	r8, r6
 80175d2:	d98c      	bls.n	80174ee <_fx_file_write+0x3da>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80175d4:	aa0c      	add	r2, sp, #48	; 0x30
 80175d6:	4649      	mov	r1, r9
 80175d8:	4628      	mov	r0, r5
 80175da:	f000 f86f 	bl	80176bc <_fx_utility_FAT_entry_read>
                    if (next_cluster != cluster + 1)
 80175de:	f109 0301 	add.w	r3, r9, #1
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80175e2:	2800      	cmp	r0, #0
 80175e4:	d0e9      	beq.n	80175ba <_fx_file_write+0x4a6>
 80175e6:	e658      	b.n	801729a <_fx_file_write+0x186>
        FX_UNPROTECT
 80175e8:	9808      	ldr	r0, [sp, #32]
        return(FX_WRITE_PROTECT);
 80175ea:	f04f 0b23 	mov.w	fp, #35	; 0x23
        FX_UNPROTECT
 80175ee:	f005 fb6d 	bl	801cccc <_tx_mutex_put>
        return(FX_WRITE_PROTECT);
 80175f2:	e5b7      	b.n	8017164 <_fx_file_write+0x50>
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 80175f4:	aa0c      	add	r2, sp, #48	; 0x30
 80175f6:	6a21      	ldr	r1, [r4, #32]
 80175f8:	4628      	mov	r0, r5
 80175fa:	f000 f85f 	bl	80176bc <_fx_utility_FAT_entry_read>
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80175fe:	2800      	cmp	r0, #0
 8017600:	f47f ae4b 	bne.w	801729a <_fx_file_write+0x186>
 8017604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017606:	2b01      	cmp	r3, #1
 8017608:	d920      	bls.n	801764c <_fx_file_write+0x538>
 801760a:	683a      	ldr	r2, [r7, #0]
 801760c:	4293      	cmp	r3, r2
 801760e:	d81d      	bhi.n	801764c <_fx_file_write+0x538>
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8017610:	6d69      	ldr	r1, [r5, #84]	; 0x54
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8017612:	1e9a      	subs	r2, r3, #2
 8017614:	f04f 0900 	mov.w	r9, #0
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017618:	6d2e      	ldr	r6, [r5, #80]	; 0x50
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 801761a:	6223      	str	r3, [r4, #32]
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 801761c:	f149 33ff 	adc.w	r3, r9, #4294967295
 8017620:	fba2 8901 	umull	r8, r9, r2, r1
                file_ptr -> fx_file_current_relative_sector =  0;
 8017624:	63a0      	str	r0, [r4, #56]	; 0x38
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8017626:	fb01 9903 	mla	r9, r1, r3, r9
                file_ptr -> fx_file_current_relative_cluster++;
 801762a:	6b60      	ldr	r0, [r4, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801762c:	eb18 0206 	adds.w	r2, r8, r6
                file_ptr -> fx_file_current_relative_cluster++;
 8017630:	f100 0101 	add.w	r1, r0, #1
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017634:	f149 0300 	adc.w	r3, r9, #0
                file_ptr -> fx_file_current_relative_cluster++;
 8017638:	6361      	str	r1, [r4, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801763a:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 801763e:	e7aa      	b.n	8017596 <_fx_file_write+0x482>
                        FX_UNPROTECT
 8017640:	9808      	ldr	r0, [sp, #32]
                        return(FX_NO_MORE_SPACE);
 8017642:	f04f 0b0a 	mov.w	fp, #10
                        FX_UNPROTECT
 8017646:	f005 fb41 	bl	801cccc <_tx_mutex_put>
                        return(FX_NO_MORE_SPACE);
 801764a:	e58b      	b.n	8017164 <_fx_file_write+0x50>
                        FX_UNPROTECT
 801764c:	9808      	ldr	r0, [sp, #32]
                            return(FX_FILE_CORRUPT);
 801764e:	f04f 0b08 	mov.w	fp, #8
                        FX_UNPROTECT
 8017652:	f005 fb3b 	bl	801cccc <_tx_mutex_put>
 8017656:	e585      	b.n	8017164 <_fx_file_write+0x50>
 8017658:	45b0      	cmp	r8, r6
 801765a:	4649      	mov	r1, r9
 801765c:	bf28      	it	cs
 801765e:	46b0      	movcs	r8, r6
 8017660:	e745      	b.n	80174ee <_fx_file_write+0x3da>
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017662:	6d2a      	ldr	r2, [r5, #80]	; 0x50
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8017664:	1eb1      	subs	r1, r6, #2
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017666:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8017668:	2300      	movs	r3, #0
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 801766a:	f8c8 6014 	str.w	r6, [r8, #20]
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801766e:	fbe0 2301 	umlal	r2, r3, r0, r1
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 8017672:	f8c8 6020 	str.w	r6, [r8, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 8017676:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
                    file_ptr -> fx_file_current_logical_offset =    0;
 801767a:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 801767e:	f8c8 609c 	str.w	r6, [r8, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017682:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
                    file_ptr -> fx_file_current_file_offset =       0;
 8017686:	2200      	movs	r2, #0
 8017688:	2300      	movs	r3, #0
 801768a:	e9c8 2310 	strd	r2, r3, [r8, #64]	; 0x40
 801768e:	e64f      	b.n	8017330 <_fx_file_write+0x21c>
    file_ptr -> fx_file_modified =  FX_TRUE;
 8017690:	2201      	movs	r2, #1
    if (file_ptr -> fx_file_write_notify)
 8017692:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
    file_ptr -> fx_file_modified =  FX_TRUE;
 8017696:	7322      	strb	r2, [r4, #12]
    if (file_ptr -> fx_file_write_notify)
 8017698:	b10b      	cbz	r3, 801769e <_fx_file_write+0x58a>
        file_ptr -> fx_file_write_notify(file_ptr);
 801769a:	4620      	mov	r0, r4
 801769c:	4798      	blx	r3
    FX_UNPROTECT
 801769e:	9808      	ldr	r0, [sp, #32]
    return(FX_SUCCESS);
 80176a0:	f04f 0b00 	mov.w	fp, #0
    FX_UNPROTECT
 80176a4:	f005 fb12 	bl	801cccc <_tx_mutex_put>
    return(FX_SUCCESS);
 80176a8:	e55c      	b.n	8017164 <_fx_file_write+0x50>
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 80176aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176ac:	4628      	mov	r0, r5
 80176ae:	f000 f965 	bl	801797c <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 80176b2:	4683      	mov	fp, r0
 80176b4:	2800      	cmp	r0, #0
 80176b6:	f43f ae53 	beq.w	8017360 <_fx_file_write+0x24c>
 80176ba:	e5ef      	b.n	801729c <_fx_file_write+0x188>

080176bc <_fx_utility_FAT_entry_read>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 80176bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 80176c0:	f001 0403 	and.w	r4, r1, #3
    media_ptr -> fx_media_fat_entry_reads++;
 80176c4:	f8d0 6178 	ldr.w	r6, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 80176c8:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
{
 80176cc:	b089      	sub	sp, #36	; 0x24
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 80176ce:	00a7      	lsls	r7, r4, #2
    media_ptr -> fx_media_fat_entry_reads++;
 80176d0:	3601      	adds	r6, #1
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 80176d2:	3301      	adds	r3, #1
    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];

    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 80176d4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    media_ptr -> fx_media_fat_entry_reads++;
 80176d8:	f8c0 6178 	str.w	r6, [r0, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 80176dc:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 80176e0:	00a4      	lsls	r4, r4, #2
 80176e2:	eb00 0c04 	add.w	ip, r0, r4
 80176e6:	f8dc 6758 	ldr.w	r6, [ip, #1880]	; 0x758
 80176ea:	428e      	cmp	r6, r1
 80176ec:	d05f      	beq.n	80177ae <_fx_utility_FAT_entry_read+0xf2>
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 80176ee:	f504 64eb 	add.w	r4, r4, #1880	; 0x758
 80176f2:	4605      	mov	r5, r0
 80176f4:	f50c 6eeb 	add.w	lr, ip, #1880	; 0x758
 80176f8:	4404      	add	r4, r0
        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 80176fa:	68e6      	ldr	r6, [r4, #12]
 80176fc:	428e      	cmp	r6, r1
 80176fe:	d041      	beq.n	8017784 <_fx_utility_FAT_entry_read+0xc8>
        *(cache_entry_ptr + 1) =  temp_cache_entry;

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 8017700:	69a6      	ldr	r6, [r4, #24]
 8017702:	428e      	cmp	r6, r1
 8017704:	d063      	beq.n	80177ce <_fx_utility_FAT_entry_read+0x112>
        *(cache_entry_ptr + 1) =  temp_cache_entry;

        /* Return a successful status.  */
        return(FX_SUCCESS);
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 8017706:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017708:	428e      	cmp	r6, r1
 801770a:	d07b      	beq.n	8017804 <_fx_utility_FAT_entry_read+0x148>
 801770c:	4690      	mov	r8, r2
        return(FX_SUCCESS);
    }

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 801770e:	1cfa      	adds	r2, r7, #3
 8017710:	460e      	mov	r6, r1
 8017712:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017716:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801771a:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 801771e:	2a00      	cmp	r2, #0
 8017720:	d14d      	bne.n	80177be <_fx_utility_FAT_entry_read+0x102>

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8017722:	f8d5 1184 	ldr.w	r1, [r5, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 8017726:	1e5a      	subs	r2, r3, #1
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8017728:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 801772a:	3101      	adds	r1, #1
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 801772c:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
 8017730:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8017734:	f8c5 1184 	str.w	r1, [r5, #388]	; 0x184
 8017738:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801773a:	68a8      	ldr	r0, [r5, #8]
    if (media_ptr -> fx_media_12_bit_FAT)
 801773c:	2b00      	cmp	r3, #0
 801773e:	f040 809d 	bne.w	801787c <_fx_utility_FAT_entry_read+0x1c0>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 8017742:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8017744:	2900      	cmp	r1, #0
 8017746:	d17e      	bne.n	8017846 <_fx_utility_FAT_entry_read+0x18a>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 8017748:	ea4f 0a46 	mov.w	sl, r6, lsl #1
        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
            (ULONG)media_ptr -> fx_media_reserved_sectors;

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801774c:	460b      	mov	r3, r1
 801774e:	9000      	str	r0, [sp, #0]
 8017750:	2101      	movs	r1, #1
 8017752:	2002      	movs	r0, #2
 8017754:	9101      	str	r1, [sp, #4]
 8017756:	9002      	str	r0, [sp, #8]
 8017758:	4628      	mov	r0, r5
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801775a:	fbba f9f9 	udiv	r9, sl, r9
 801775e:	4491      	add	r9, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017760:	464a      	mov	r2, r9
 8017762:	f000 fb11 	bl	8017d88 <_fx_utility_logical_sector_read>
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8017766:	4603      	mov	r3, r0
 8017768:	b9e8      	cbnz	r0, 80177a6 <_fx_utility_FAT_entry_read+0xea>
            return(status);
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801776a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801776c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801776e:	eba9 0902 	sub.w	r9, r9, r2
             media_ptr -> fx_media_bytes_per_sector);

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8017772:	68a8      	ldr	r0, [r5, #8]
        byte_offset =  byte_offset -
 8017774:	fb03 aa19 	mls	sl, r3, r9, sl

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8017778:	4450      	add	r0, sl
 801777a:	f002 f9d9 	bl	8019b30 <_fx_utility_16_unsigned_read>

        *entry_ptr =  entry;
 801777e:	f8c8 0000 	str.w	r0, [r8]
 8017782:	e0b2      	b.n	80178ea <_fx_utility_FAT_entry_read+0x22e>
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 8017784:	6921      	ldr	r1, [r4, #16]
        temp_cache_entry =        *(cache_entry_ptr);
 8017786:	ad05      	add	r5, sp, #20
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8017788:	340c      	adds	r4, #12
        return(FX_SUCCESS);
 801778a:	2300      	movs	r3, #0
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 801778c:	6011      	str	r1, [r2, #0]
        temp_cache_entry =        *(cache_entry_ptr);
 801778e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8017792:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8017796:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801779a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 801779e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80177a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	b009      	add	sp, #36	; 0x24
 80177aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(FX_SUCCESS);
 80177ae:	2300      	movs	r3, #0
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 80177b0:	f8dc 175c 	ldr.w	r1, [ip, #1884]	; 0x75c
}
 80177b4:	4618      	mov	r0, r3
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 80177b6:	6011      	str	r1, [r2, #0]
}
 80177b8:	b009      	add	sp, #36	; 0x24
 80177ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        status = _fx_utility_FAT_flush(media_ptr);
 80177be:	f000 f967 	bl	8017a90 <_fx_utility_FAT_flush>
        if (status != FX_SUCCESS)
 80177c2:	4603      	mov	r3, r0
 80177c4:	2800      	cmp	r0, #0
 80177c6:	d1ee      	bne.n	80177a6 <_fx_utility_FAT_entry_read+0xea>
 80177c8:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
 80177cc:	e7a9      	b.n	8017722 <_fx_utility_FAT_entry_read+0x66>
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 80177ce:	69e3      	ldr	r3, [r4, #28]
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 80177d0:	f104 0718 	add.w	r7, r4, #24
        temp_cache_entry =        *(cache_entry_ptr);
 80177d4:	ad05      	add	r5, sp, #20
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80177d6:	340c      	adds	r4, #12
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 80177d8:	6013      	str	r3, [r2, #0]
        return(FX_SUCCESS);
 80177da:	2300      	movs	r3, #0
        temp_cache_entry =        *(cache_entry_ptr);
 80177dc:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80177e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 80177e4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80177e8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80177ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80177f0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80177f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80177f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	b009      	add	sp, #36	; 0x24
 8017800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8017804:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        temp_cache_entry =        *(cache_entry_ptr);
 8017806:	ab05      	add	r3, sp, #20
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8017808:	f104 0724 	add.w	r7, r4, #36	; 0x24
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 801780c:	f104 0518 	add.w	r5, r4, #24
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8017810:	6011      	str	r1, [r2, #0]
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8017812:	340c      	adds	r4, #12
        temp_cache_entry =        *(cache_entry_ptr);
 8017814:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8017818:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 801781c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017820:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8017824:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017828:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 801782c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017830:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8017834:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
        return(FX_SUCCESS);
 8017838:	2300      	movs	r3, #0
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 801783a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801783e:	4618      	mov	r0, r3
 8017840:	b009      	add	sp, #36	; 0x24
 8017842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byte_offset =  (((ULONG)cluster) * 4);
 8017846:	ea4f 0a86 	mov.w	sl, r6, lsl #2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801784a:	f04f 0c02 	mov.w	ip, #2
 801784e:	2101      	movs	r1, #1
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017850:	fbba fbf9 	udiv	fp, sl, r9
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017854:	e88d 1003 	stmia.w	sp, {r0, r1, ip}
 8017858:	445a      	add	r2, fp
 801785a:	4628      	mov	r0, r5
 801785c:	f000 fa94 	bl	8017d88 <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 8017860:	4603      	mov	r3, r0
 8017862:	2800      	cmp	r0, #0
 8017864:	d19f      	bne.n	80177a6 <_fx_utility_FAT_entry_read+0xea>
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 8017866:	68a8      	ldr	r0, [r5, #8]
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8017868:	fb09 a91b 	mls	r9, r9, fp, sl
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 801786c:	4448      	add	r0, r9
 801786e:	f002 f969 	bl	8019b44 <_fx_utility_32_unsigned_read>
            entry32 = entry32 & 0x0FFFFFFF;
 8017872:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
        *entry_ptr =  entry32;
 8017876:	f8c8 0000 	str.w	r0, [r8]
 801787a:	e036      	b.n	80178ea <_fx_utility_FAT_entry_read+0x22e>
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801787c:	f04f 0b01 	mov.w	fp, #1
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8017880:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017884:	2302      	movs	r3, #2
 8017886:	9000      	str	r0, [sp, #0]
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8017888:	fa2a fa0b 	lsr.w	sl, sl, fp
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801788c:	f8cd b004 	str.w	fp, [sp, #4]
 8017890:	9302      	str	r3, [sp, #8]
 8017892:	4628      	mov	r0, r5
 8017894:	2300      	movs	r3, #0
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017896:	fbba f9f9 	udiv	r9, sl, r9
 801789a:	4491      	add	r9, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801789c:	464a      	mov	r2, r9
 801789e:	f000 fa73 	bl	8017d88 <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 80178a2:	4603      	mov	r3, r0
 80178a4:	2800      	cmp	r0, #0
 80178a6:	f47f af7e 	bne.w	80177a6 <_fx_utility_FAT_entry_read+0xea>
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80178aa:	6c6a      	ldr	r2, [r5, #68]	; 0x44
             media_ptr -> fx_media_bytes_per_sector);
 80178ac:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80178ae:	eba9 0202 	sub.w	r2, r9, r2
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80178b2:	68a8      	ldr	r0, [r5, #8]
 80178b4:	f101 3cff 	add.w	ip, r1, #4294967295
        byte_offset =  byte_offset -
 80178b8:	fb01 a212 	mls	r2, r1, r2, sl
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80178bc:	eb00 0e02 	add.w	lr, r0, r2
 80178c0:	f810 a002 	ldrb.w	sl, [r0, r2]
 80178c4:	eb0e 010b 	add.w	r1, lr, fp
        if (cluster & 1)
 80178c8:	ea16 0e0b 	ands.w	lr, r6, fp
 80178cc:	d02c      	beq.n	8017928 <_fx_utility_FAT_entry_read+0x26c>
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80178ce:	4562      	cmp	r2, ip
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 80178d0:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80178d4:	d031      	beq.n	801793a <_fx_utility_FAT_entry_read+0x27e>
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 80178d6:	780b      	ldrb	r3, [r1, #0]
 80178d8:	ea4a 1303 	orr.w	r3, sl, r3, lsl #4
        if (entry >= FX_MAX_12BIT_CLUST)
 80178dc:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
            entry =  entry | FX_SIGN_EXTEND;
 80178e0:	bf28      	it	cs
 80178e2:	f443 4370 	orrcs.w	r3, r3, #61440	; 0xf000
        *entry_ptr =  entry;
 80178e6:	f8c8 3000 	str.w	r3, [r8]
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80178ea:	f104 0c18 	add.w	ip, r4, #24
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 80178ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80178f2:	f104 0e24 	add.w	lr, r4, #36	; 0x24
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80178f6:	340c      	adds	r4, #12
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 80178f8:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    return(FX_SUCCESS);
 80178fc:	2300      	movs	r3, #0
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80178fe:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8017902:	f505 67eb 	add.w	r7, r5, #1880	; 0x758
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8017906:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 801790a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801790e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8017912:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 801791a:	f8c5 6758 	str.w	r6, [r5, #1880]	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 801791e:	f8d8 2000 	ldr.w	r2, [r8]
 8017922:	f8c5 275c 	str.w	r2, [r5, #1884]	; 0x75c
    return(FX_SUCCESS);
 8017926:	e73e      	b.n	80177a6 <_fx_utility_FAT_entry_read+0xea>
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8017928:	4562      	cmp	r2, ip
 801792a:	d015      	beq.n	8017958 <_fx_utility_FAT_entry_read+0x29c>
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 801792c:	780b      	ldrb	r3, [r1, #0]
 801792e:	021b      	lsls	r3, r3, #8
 8017930:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8017934:	ea43 030a 	orr.w	r3, r3, sl
 8017938:	e7d0      	b.n	80178dc <_fx_utility_FAT_entry_read+0x220>
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801793a:	2202      	movs	r2, #2
 801793c:	e9cd 0b00 	strd	r0, fp, [sp]
 8017940:	9202      	str	r2, [sp, #8]
 8017942:	4628      	mov	r0, r5
 8017944:	eb09 020b 	add.w	r2, r9, fp
 8017948:	f000 fa1e 	bl	8017d88 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 801794c:	4603      	mov	r3, r0
 801794e:	2800      	cmp	r0, #0
 8017950:	f47f af29 	bne.w	80177a6 <_fx_utility_FAT_entry_read+0xea>
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8017954:	68a9      	ldr	r1, [r5, #8]
 8017956:	e7be      	b.n	80178d6 <_fx_utility_FAT_entry_read+0x21a>
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017958:	2302      	movs	r3, #2
 801795a:	9000      	str	r0, [sp, #0]
 801795c:	f109 0201 	add.w	r2, r9, #1
 8017960:	f8cd b004 	str.w	fp, [sp, #4]
 8017964:	9302      	str	r3, [sp, #8]
 8017966:	4628      	mov	r0, r5
 8017968:	4673      	mov	r3, lr
 801796a:	f000 fa0d 	bl	8017d88 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 801796e:	4603      	mov	r3, r0
 8017970:	2800      	cmp	r0, #0
 8017972:	f47f af18 	bne.w	80177a6 <_fx_utility_FAT_entry_read+0xea>
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8017976:	68a9      	ldr	r1, [r5, #8]
 8017978:	e7d8      	b.n	801792c <_fx_utility_FAT_entry_read+0x270>
 801797a:	bf00      	nop

0801797c <_fx_utility_FAT_entry_write>:

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 801797c:	f001 0303 	and.w	r3, r1, #3
{
 8017980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8017984:	009e      	lsls	r6, r3, #2
{
 8017986:	4691      	mov	r9, r2
    media_ptr -> fx_media_fat_entry_writes++;
 8017988:	f8d0 217c 	ldr.w	r2, [r0, #380]	; 0x17c
{
 801798c:	460f      	mov	r7, r1

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 801798e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8017992:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_writes++;
 8017996:	3201      	adds	r2, #1
{
 8017998:	4605      	mov	r5, r0
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 801799a:	009b      	lsls	r3, r3, #2
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 801799c:	1c4c      	adds	r4, r1, #1
    media_ptr -> fx_media_fat_entry_writes++;
 801799e:	f8c0 217c 	str.w	r2, [r0, #380]	; 0x17c
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 80179a2:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 80179a6:	f8c0 4188 	str.w	r4, [r0, #392]	; 0x188
    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 80179aa:	58c2      	ldr	r2, [r0, r3]
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 80179ac:	4403      	add	r3, r0
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 80179ae:	4297      	cmp	r7, r2
 80179b0:	d058      	beq.n	8017a64 <_fx_utility_FAT_entry_write+0xe8>
 80179b2:	68da      	ldr	r2, [r3, #12]
 80179b4:	f103 080c 	add.w	r8, r3, #12
 80179b8:	4297      	cmp	r7, r2
 80179ba:	d064      	beq.n	8017a86 <_fx_utility_FAT_entry_write+0x10a>
 80179bc:	699a      	ldr	r2, [r3, #24]
 80179be:	f103 0a18 	add.w	sl, r3, #24
 80179c2:	4297      	cmp	r7, r2
 80179c4:	d04d      	beq.n	8017a62 <_fx_utility_FAT_entry_write+0xe6>
 80179c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179c8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80179cc:	42ba      	cmp	r2, r7
 80179ce:	d05c      	beq.n	8017a8a <_fx_utility_FAT_entry_write+0x10e>
    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 80179d0:	1cf2      	adds	r2, r6, #3
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 80179d2:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 80179d6:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 80179da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 80179de:	3301      	adds	r3, #1
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 80179e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 80179e4:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 80179e8:	f8d2 3760 	ldr.w	r3, [r2, #1888]	; 0x760
 80179ec:	2b01      	cmp	r3, #1
 80179ee:	d045      	beq.n	8017a7c <_fx_utility_FAT_entry_write+0x100>
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 80179f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 80179f4:	f04f 0c01 	mov.w	ip, #1
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80179f8:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 80179fc:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8017a00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8017a04:	f506 63eb 	add.w	r3, r6, #1880	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8017a08:	f8d5 40ac 	ldr.w	r4, [r5, #172]	; 0xac
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8017a0c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8017a10:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8017a14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017a18:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8017a1c:	f8c6 7758 	str.w	r7, [r6, #1880]	; 0x758
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 8017a20:	f8c6 975c 	str.w	r9, [r6, #1884]	; 0x75c
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8017a24:	f8c6 c760 	str.w	ip, [r6, #1888]	; 0x760
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8017a28:	b1c4      	cbz	r4, 8017a5c <_fx_utility_FAT_entry_write+0xe0>
 8017a2a:	f1b9 0f00 	cmp.w	r9, #0
 8017a2e:	d115      	bne.n	8017a5c <_fx_utility_FAT_entry_write+0xe0>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8017a30:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8017a34:	3f02      	subs	r7, #2
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8017a36:	2406      	movs	r4, #6

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8017a38:	4628      	mov	r0, r5
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8017a3a:	3301      	adds	r3, #1
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8017a3c:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8017a40:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8017a44:	fb02 1707 	mla	r7, r2, r7, r1
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017a48:	2190      	movs	r1, #144	; 0x90
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8017a4a:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8017a4e:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8017a52:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017a56:	e9c5 4122 	strd	r4, r1, [r5, #136]	; 0x88
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8017a5a:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 8017a5c:	2000      	movs	r0, #0
}
 8017a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8017a62:	4653      	mov	r3, sl
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8017a64:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8017a68:	2101      	movs	r1, #1
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 8017a6a:	f8c3 9004 	str.w	r9, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8017a6e:	6099      	str	r1, [r3, #8]
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8017a70:	2a00      	cmp	r2, #0
 8017a72:	d0f3      	beq.n	8017a5c <_fx_utility_FAT_entry_write+0xe0>
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8017a74:	f1b9 0f00 	cmp.w	r9, #0
 8017a78:	d0da      	beq.n	8017a30 <_fx_utility_FAT_entry_write+0xb4>
 8017a7a:	e7ef      	b.n	8017a5c <_fx_utility_FAT_entry_write+0xe0>
        status = _fx_utility_FAT_flush(media_ptr);
 8017a7c:	f000 f808 	bl	8017a90 <_fx_utility_FAT_flush>
        if (status != FX_SUCCESS)
 8017a80:	2800      	cmp	r0, #0
 8017a82:	d0b5      	beq.n	80179f0 <_fx_utility_FAT_entry_write+0x74>
 8017a84:	e7eb      	b.n	8017a5e <_fx_utility_FAT_entry_write+0xe2>
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8017a86:	4643      	mov	r3, r8
 8017a88:	e7ec      	b.n	8017a64 <_fx_utility_FAT_entry_write+0xe8>
 8017a8a:	4623      	mov	r3, r4
 8017a8c:	e7ea      	b.n	8017a64 <_fx_utility_FAT_entry_write+0xe8>
 8017a8e:	bf00      	nop

08017a90 <_fx_utility_FAT_flush>:
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8017a90:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
{
 8017a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_fat_cache_flushes++;
 8017a98:	3301      	adds	r3, #1
{
 8017a9a:	b085      	sub	sp, #20
 8017a9c:	4604      	mov	r4, r0
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8017a9e:	2700      	movs	r7, #0
 8017aa0:	4606      	mov	r6, r0
    media_ptr -> fx_media_fat_cache_flushes++;
 8017aa2:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8017aa6:	f8d6 3760 	ldr.w	r3, [r6, #1888]	; 0x760
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d064      	beq.n	8017b78 <_fx_utility_FAT_flush+0xe8>

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8017aae:	6e23      	ldr	r3, [r4, #96]	; 0x60
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8017ab0:	f8d6 2758 	ldr.w	r2, [r6, #1880]	; 0x758
 8017ab4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8017ab8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017aba:	68a0      	ldr	r0, [r4, #8]
        if (media_ptr -> fx_media_12_bit_FAT)
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d163      	bne.n	8017b88 <_fx_utility_FAT_flush+0xf8>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 8017ac0:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 8017ac4:	f1be 0f00 	cmp.w	lr, #0
 8017ac8:	f040 8124 	bne.w	8017d14 <_fx_utility_FAT_flush+0x284>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 8017acc:	0055      	lsls	r5, r2, #1
            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
                (ULONG)media_ptr -> fx_media_reserved_sectors;

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017ace:	9000      	str	r0, [sp, #0]
 8017ad0:	2201      	movs	r2, #1
 8017ad2:	2002      	movs	r0, #2
 8017ad4:	4673      	mov	r3, lr
 8017ad6:	9002      	str	r0, [sp, #8]
 8017ad8:	4620      	mov	r0, r4
 8017ada:	9201      	str	r2, [sp, #4]
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017adc:	fbb5 f5fc 	udiv	r5, r5, ip
 8017ae0:	440d      	add	r5, r1
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017ae2:	462a      	mov	r2, r5
 8017ae4:	f000 f950 	bl	8017d88 <_fx_utility_logical_sector_read>
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	d14a      	bne.n	8017b82 <_fx_utility_FAT_flush+0xf2>
 8017aec:	68a0      	ldr	r0, [r4, #8]
 8017aee:	46b0      	mov	r8, r6
 8017af0:	46b9      	mov	r9, r7
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8017af2:	f8d8 3760 	ldr.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8017af6:	f109 0901 	add.w	r9, r9, #1
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8017afa:	b1b3      	cbz	r3, 8017b2a <_fx_utility_FAT_flush+0x9a>

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8017afc:	f8d8 3758 	ldr.w	r3, [r8, #1880]	; 0x758

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017b00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
                byte_offset =  (((ULONG)cluster) * 2);
 8017b04:	005b      	lsls	r3, r3, #1
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8017b06:	6c61      	ldr	r1, [r4, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017b08:	fbb3 f2fc 	udiv	r2, r3, ip
 8017b0c:	440a      	add	r2, r1

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8017b0e:	4295      	cmp	r5, r2
 8017b10:	d10b      	bne.n	8017b2a <_fx_utility_FAT_flush+0x9a>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8017b12:	1a6a      	subs	r2, r5, r1

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8017b14:	f8d8 175c 	ldr.w	r1, [r8, #1884]	; 0x75c
                byte_offset =  byte_offset -
 8017b18:	fb0c 3312 	mls	r3, ip, r2, r3
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8017b1c:	4418      	add	r0, r3
 8017b1e:	f002 f80d 	bl	8019b3c <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8017b22:	2300      	movs	r3, #0
 8017b24:	68a0      	ldr	r0, [r4, #8]
 8017b26:	f8c8 3760 	str.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8017b2a:	f1b9 0f10 	cmp.w	r9, #16
 8017b2e:	f108 080c 	add.w	r8, r8, #12
 8017b32:	d1de      	bne.n	8017af2 <_fx_utility_FAT_flush+0x62>
                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8017b34:	2302      	movs	r3, #2
 8017b36:	2101      	movs	r1, #1
 8017b38:	9000      	str	r0, [sp, #0]
 8017b3a:	462a      	mov	r2, r5
 8017b3c:	9302      	str	r3, [sp, #8]
 8017b3e:	4620      	mov	r0, r4
 8017b40:	2300      	movs	r3, #0
 8017b42:	9101      	str	r1, [sp, #4]
 8017b44:	f000 face 	bl	80180e4 <_fx_utility_logical_sector_write>
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8017b48:	b9d8      	cbnz	r0, 8017b82 <_fx_utility_FAT_flush+0xf2>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8017b4a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017b4c:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8017b50:	f3c2 2287 	ubfx	r2, r2, #10, #8
 8017b54:	b10b      	cbz	r3, 8017b5a <_fx_utility_FAT_flush+0xca>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8017b56:	3201      	adds	r2, #1
 8017b58:	b2d2      	uxtb	r2, r2
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8017b5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8017b5c:	2301      	movs	r3, #1
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8017b5e:	1a6d      	subs	r5, r5, r1
 8017b60:	fbb5 f5f2 	udiv	r5, r5, r2
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8017b64:	eb04 02d5 	add.w	r2, r4, r5, lsr #3
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8017b68:	40ab      	lsls	r3, r5
 8017b6a:	f892 1818 	ldrb.w	r1, [r2, #2072]	; 0x818
 8017b6e:	f003 0307 	and.w	r3, r3, #7
 8017b72:	430b      	orrs	r3, r1
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8017b74:	f882 3818 	strb.w	r3, [r2, #2072]	; 0x818
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8017b78:	3701      	adds	r7, #1
 8017b7a:	360c      	adds	r6, #12
 8017b7c:	2f10      	cmp	r7, #16
 8017b7e:	d192      	bne.n	8017aa6 <_fx_utility_FAT_flush+0x16>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8017b80:	2000      	movs	r0, #0
}
 8017b82:	b005      	add	sp, #20
 8017b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8017b88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            multi_sector_entry = -1;
 8017b8c:	f04f 38ff 	mov.w	r8, #4294967295
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8017b90:	0855      	lsrs	r5, r2, #1
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017b92:	fbb5 f5fc 	udiv	r5, r5, ip
 8017b96:	440d      	add	r5, r1
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017b98:	2301      	movs	r3, #1
 8017b9a:	2202      	movs	r2, #2
 8017b9c:	9000      	str	r0, [sp, #0]
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	9202      	str	r2, [sp, #8]
 8017ba2:	462a      	mov	r2, r5
 8017ba4:	9301      	str	r3, [sp, #4]
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	f000 f8ee 	bl	8017d88 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8017bac:	2800      	cmp	r0, #0
 8017bae:	d1e8      	bne.n	8017b82 <_fx_utility_FAT_flush+0xf2>
                if (multi_sector_entry != -1)
 8017bb0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8017bb4:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8017bb8:	d00f      	beq.n	8017bda <_fx_utility_FAT_flush+0x14a>
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8017bba:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017bbe:	eb04 0888 	add.w	r8, r4, r8, lsl #2
                    if (cluster & 1)
 8017bc2:	f8d8 2758 	ldr.w	r2, [r8, #1880]	; 0x758
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8017bc6:	f8d8 375c 	ldr.w	r3, [r8, #1884]	; 0x75c
                    if (cluster & 1)
 8017bca:	07d2      	lsls	r2, r2, #31
 8017bcc:	f140 808a 	bpl.w	8017ce4 <_fx_utility_FAT_flush+0x254>
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8017bd0:	091b      	lsrs	r3, r3, #4
 8017bd2:	f88e 3000 	strb.w	r3, [lr]
 8017bd6:	f8d4 e008 	ldr.w	lr, [r4, #8]
            multi_sector_entry = -1;
 8017bda:	4631      	mov	r1, r6
 8017bdc:	4638      	mov	r0, r7
 8017bde:	f04f 38ff 	mov.w	r8, #4294967295
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 8017be2:	f8d1 3760 	ldr.w	r3, [r1, #1888]	; 0x760
 8017be6:	b38b      	cbz	r3, 8017c4c <_fx_utility_FAT_flush+0x1bc>
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8017be8:	f8d1 2758 	ldr.w	r2, [r1, #1880]	; 0x758
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017bec:	f8d4 a028 	ldr.w	sl, [r4, #40]	; 0x28
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8017bf0:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 8017bf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8017bf6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017bfa:	fbbc f9fa 	udiv	r9, ip, sl
 8017bfe:	4499      	add	r9, r3
                    if (sector != FAT_sector)
 8017c00:	454d      	cmp	r5, r9
 8017c02:	d123      	bne.n	8017c4c <_fx_utility_FAT_flush+0x1bc>
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8017c04:	1aeb      	subs	r3, r5, r3
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8017c06:	f10a 3bff 	add.w	fp, sl, #4294967295
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8017c0a:	f8d1 975c 	ldr.w	r9, [r1, #1884]	; 0x75c
 8017c0e:	f002 0201 	and.w	r2, r2, #1
                    byte_offset =  byte_offset -
 8017c12:	fb0a c313 	mls	r3, sl, r3, ip
 8017c16:	fa5f fc89 	uxtb.w	ip, r9
 8017c1a:	449e      	add	lr, r3
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8017c1c:	459b      	cmp	fp, r3
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8017c1e:	f04f 0300 	mov.w	r3, #0
 8017c22:	f8c1 3760 	str.w	r3, [r1, #1888]	; 0x760
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8017c26:	d056      	beq.n	8017cd6 <_fx_utility_FAT_flush+0x246>
                    if (cluster & 1)
 8017c28:	2a00      	cmp	r2, #0
 8017c2a:	d043      	beq.n	8017cb4 <_fx_utility_FAT_flush+0x224>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8017c2c:	f89e 3000 	ldrb.w	r3, [lr]
                        if ((multi_sector_entry) == (INT)i)
 8017c30:	4580      	cmp	r8, r0
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8017c32:	f003 030f 	and.w	r3, r3, #15
 8017c36:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8017c3a:	f88e 3000 	strb.w	r3, [lr]
                        if ((multi_sector_entry) == (INT)i)
 8017c3e:	d047      	beq.n	8017cd0 <_fx_utility_FAT_flush+0x240>
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8017c40:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8017c44:	f88e 9001 	strb.w	r9, [lr, #1]
 8017c48:	f8d4 e008 	ldr.w	lr, [r4, #8]
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8017c4c:	3001      	adds	r0, #1
 8017c4e:	310c      	adds	r1, #12
 8017c50:	2810      	cmp	r0, #16
 8017c52:	d1c6      	bne.n	8017be2 <_fx_utility_FAT_flush+0x152>
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8017c54:	2301      	movs	r3, #1
 8017c56:	2202      	movs	r2, #2
 8017c58:	f8cd e000 	str.w	lr, [sp]
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	9202      	str	r2, [sp, #8]
 8017c60:	462a      	mov	r2, r5
 8017c62:	9301      	str	r3, [sp, #4]
 8017c64:	2300      	movs	r3, #0
 8017c66:	f000 fa3d 	bl	80180e4 <_fx_utility_logical_sector_write>
                if (status != FX_SUCCESS)
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	d189      	bne.n	8017b82 <_fx_utility_FAT_flush+0xf2>
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8017c6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8017c74:	f3c3 2387 	ubfx	r3, r3, #10, #8
 8017c78:	b10a      	cbz	r2, 8017c7e <_fx_utility_FAT_flush+0x1ee>
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	b2db      	uxtb	r3, r3
                if (sectors_per_bit == 0)
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d07d      	beq.n	8017d7e <_fx_utility_FAT_flush+0x2ee>
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8017c82:	6c61      	ldr	r1, [r4, #68]	; 0x44
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8017c84:	2201      	movs	r2, #1
                if (multi_sector_entry != -1)
 8017c86:	f1b8 3fff 	cmp.w	r8, #4294967295
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8017c8a:	eba5 0101 	sub.w	r1, r5, r1
 8017c8e:	fbb1 f3f3 	udiv	r3, r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8017c92:	eb04 01d3 	add.w	r1, r4, r3, lsr #3
                    | (1 << ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7));
 8017c96:	fa02 f303 	lsl.w	r3, r2, r3
 8017c9a:	f891 2818 	ldrb.w	r2, [r1, #2072]	; 0x818
 8017c9e:	f003 0307 	and.w	r3, r3, #7
 8017ca2:	ea43 0302 	orr.w	r3, r3, r2
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8017ca6:	f881 3818 	strb.w	r3, [r1, #2072]	; 0x818
                if (multi_sector_entry != -1)
 8017caa:	f43f af65 	beq.w	8017b78 <_fx_utility_FAT_flush+0xe8>
                    FAT_sector++;
 8017cae:	3501      	adds	r5, #1
 8017cb0:	68a0      	ldr	r0, [r4, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017cb2:	e771      	b.n	8017b98 <_fx_utility_FAT_flush+0x108>
                        if ((multi_sector_entry) == (INT)i)
 8017cb4:	4580      	cmp	r8, r0
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8017cb6:	f88e c000 	strb.w	ip, [lr]
                        if ((multi_sector_entry) == (INT)i)
 8017cba:	d00f      	beq.n	8017cdc <_fx_utility_FAT_flush+0x24c>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8017cbc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8017cc0:	f3c9 2903 	ubfx	r9, r9, #8, #4
 8017cc4:	f023 030f 	bic.w	r3, r3, #15
 8017cc8:	ea49 0903 	orr.w	r9, r9, r3
 8017ccc:	f88e 9001 	strb.w	r9, [lr, #1]
 8017cd0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8017cd4:	e7ba      	b.n	8017c4c <_fx_utility_FAT_flush+0x1bc>
                    if (cluster & 1)
 8017cd6:	b98a      	cbnz	r2, 8017cfc <_fx_utility_FAT_flush+0x26c>
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8017cd8:	f88e c000 	strb.w	ip, [lr]
 8017cdc:	f8d4 e008 	ldr.w	lr, [r4, #8]
                        if ((multi_sector_entry) == (INT)i)
 8017ce0:	4680      	mov	r8, r0
 8017ce2:	e7b3      	b.n	8017c4c <_fx_utility_FAT_flush+0x1bc>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8017ce4:	f89e 2000 	ldrb.w	r2, [lr]
 8017ce8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8017cec:	f022 020f 	bic.w	r2, r2, #15
 8017cf0:	4313      	orrs	r3, r2
 8017cf2:	f88e 3000 	strb.w	r3, [lr]
 8017cf6:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8017cfa:	e76e      	b.n	8017bda <_fx_utility_FAT_flush+0x14a>
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8017cfc:	f89e 3000 	ldrb.w	r3, [lr]
 8017d00:	4680      	mov	r8, r0
 8017d02:	f003 030f 	and.w	r3, r3, #15
 8017d06:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8017d0a:	f88e 3000 	strb.w	r3, [lr]
 8017d0e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8017d12:	e79b      	b.n	8017c4c <_fx_utility_FAT_flush+0x1bc>
            byte_offset =  (((ULONG)cluster) * 4);
 8017d14:	0092      	lsls	r2, r2, #2
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017d16:	2501      	movs	r5, #1
 8017d18:	9000      	str	r0, [sp, #0]
 8017d1a:	2002      	movs	r0, #2
 8017d1c:	9501      	str	r5, [sp, #4]
 8017d1e:	9002      	str	r0, [sp, #8]
 8017d20:	4620      	mov	r0, r4
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017d22:	fbb2 f5fc 	udiv	r5, r2, ip
 8017d26:	440d      	add	r5, r1
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8017d28:	462a      	mov	r2, r5
 8017d2a:	f000 f82d 	bl	8017d88 <_fx_utility_logical_sector_read>
            if (status != FX_SUCCESS)
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	f47f af27 	bne.w	8017b82 <_fx_utility_FAT_flush+0xf2>
 8017d34:	68a0      	ldr	r0, [r4, #8]
 8017d36:	46b0      	mov	r8, r6
 8017d38:	46b9      	mov	r9, r7
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8017d3a:	f8d8 3760 	ldr.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8017d3e:	f109 0901 	add.w	r9, r9, #1
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8017d42:	b1b3      	cbz	r3, 8017d72 <_fx_utility_FAT_flush+0x2e2>
                byte_offset =  (((ULONG)cluster) * 4);
 8017d44:	f8d8 3758 	ldr.w	r3, [r8, #1880]	; 0x758
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017d48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
                byte_offset =  (((ULONG)cluster) * 4);
 8017d4c:	009b      	lsls	r3, r3, #2
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8017d4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8017d50:	fbb3 f2fc 	udiv	r2, r3, ip
 8017d54:	440a      	add	r2, r1
                if (sector != FAT_sector)
 8017d56:	4295      	cmp	r5, r2
 8017d58:	d10b      	bne.n	8017d72 <_fx_utility_FAT_flush+0x2e2>
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8017d5a:	1a6a      	subs	r2, r5, r1
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8017d5c:	f8d8 175c 	ldr.w	r1, [r8, #1884]	; 0x75c
                byte_offset =  byte_offset -
 8017d60:	fb0c 3312 	mls	r3, ip, r2, r3
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8017d64:	4418      	add	r0, r3
 8017d66:	f001 fef9 	bl	8019b5c <_fx_utility_32_unsigned_write>
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	68a0      	ldr	r0, [r4, #8]
 8017d6e:	f8c8 3760 	str.w	r3, [r8, #1888]	; 0x760
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8017d72:	f1b9 0f10 	cmp.w	r9, #16
 8017d76:	f108 080c 	add.w	r8, r8, #12
 8017d7a:	d1de      	bne.n	8017d3a <_fx_utility_FAT_flush+0x2aa>
 8017d7c:	e6da      	b.n	8017b34 <_fx_utility_FAT_flush+0xa4>
                    return(FX_MEDIA_INVALID);
 8017d7e:	2002      	movs	r0, #2
}
 8017d80:	b005      	add	sp, #20
 8017d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d86:	bf00      	nop

08017d88 <_fx_utility_logical_sector_read>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8017d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d8c:	b08b      	sub	sp, #44	; 0x2c
 8017d8e:	4604      	mov	r4, r0
 8017d90:	4616      	mov	r6, r2
 8017d92:	461f      	mov	r7, r3
 8017d94:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8017d98:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8017d9c:	2902      	cmp	r1, #2
{
 8017d9e:	9106      	str	r1, [sp, #24]
 8017da0:	9d15      	ldr	r5, [sp, #84]	; 0x54
    if (sector_type == FX_FAT_SECTOR)
 8017da2:	d104      	bne.n	8017dae <_fx_utility_logical_sector_read+0x26>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 8017da4:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8017da8:	3301      	adds	r3, #1
 8017daa:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 8017dae:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8017db2:	68a2      	ldr	r2, [r4, #8]
    media_ptr -> fx_media_logical_sector_reads++;
 8017db4:	3301      	adds	r3, #1
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8017db6:	4552      	cmp	r2, sl
    media_ptr -> fx_media_logical_sector_reads++;
 8017db8:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8017dbc:	d803      	bhi.n	8017dc6 <_fx_utility_logical_sector_read+0x3e>
 8017dbe:	69a3      	ldr	r3, [r4, #24]
 8017dc0:	4553      	cmp	r3, sl
 8017dc2:	f080 80fa 	bcs.w	8017fba <_fx_utility_logical_sector_read+0x232>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 8017dc6:	eb16 0805 	adds.w	r8, r6, r5
 8017dca:	f147 0900 	adc.w	r9, r7, #0
 8017dce:	f118 30ff 	adds.w	r0, r8, #4294967295
 8017dd2:	f149 31ff 	adc.w	r1, r9, #4294967295
 8017dd6:	f04f 0900 	mov.w	r9, #0
 8017dda:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8017dde:	4589      	cmp	r9, r1
 8017de0:	bf08      	it	eq
 8017de2:	4282      	cmpeq	r2, r0
 8017de4:	f0c0 80e5 	bcc.w	8017fb2 <_fx_utility_logical_sector_read+0x22a>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
 8017de8:	2d00      	cmp	r5, #0
 8017dea:	f000 80de 	beq.w	8017faa <_fx_utility_logical_sector_read+0x222>
 8017dee:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8017df2:	e00b      	b.n	8017e0c <_fx_utility_logical_sector_read+0x84>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 8017df4:	3601      	adds	r6, #1
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8017df6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017df8:	68a0      	ldr	r0, [r4, #8]
            logical_sector++;
 8017dfa:	f147 0700 	adc.w	r7, r7, #0
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8017dfe:	f000 fa5f 	bl	80182c0 <_fx_utility_memory_copy>
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8017e02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        while (sectors)
 8017e04:	3d01      	subs	r5, #1
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8017e06:	449a      	add	sl, r3
        while (sectors)
 8017e08:	f000 80cf 	beq.w	8017faa <_fx_utility_logical_sector_read+0x222>
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8017e0c:	f8cd b000 	str.w	fp, [sp]
 8017e10:	4632      	mov	r2, r6
 8017e12:	463b      	mov	r3, r7
 8017e14:	4620      	mov	r0, r4
 8017e16:	f001 fea9 	bl	8019b6c <_fx_utility_logical_sector_cache_entry_read>
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector);
 8017e1a:	4651      	mov	r1, sl
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8017e1c:	2800      	cmp	r0, #0
 8017e1e:	d0e9      	beq.n	8017df4 <_fx_utility_logical_sector_read+0x6c>
            sectors--;
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8017e20:	f116 38ff 	adds.w	r8, r6, #4294967295
 8017e24:	f147 39ff 	adc.w	r9, r7, #4294967295
 8017e28:	eb18 0205 	adds.w	r2, r8, r5
 8017e2c:	f149 0300 	adc.w	r3, r9, #0
 8017e30:	4690      	mov	r8, r2
 8017e32:	4699      	mov	r9, r3
 8017e34:	e009      	b.n	8017e4a <_fx_utility_logical_sector_read+0xc2>
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer,
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8017e36:	3d01      	subs	r5, #1
 8017e38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer,
 8017e3a:	68a0      	ldr	r0, [r4, #8]
 8017e3c:	fb02 a105 	mla	r1, r2, r5, sl
 8017e40:	f000 fa3e 	bl	80182c0 <_fx_utility_memory_copy>
        while (sectors)
 8017e44:	2d00      	cmp	r5, #0
 8017e46:	f000 80b0 	beq.w	8017faa <_fx_utility_logical_sector_read+0x222>
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8017e4a:	4642      	mov	r2, r8
                                    media_ptr -> fx_media_bytes_per_sector);

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8017e4c:	f118 38ff 	adds.w	r8, r8, #4294967295
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8017e50:	464b      	mov	r3, r9
 8017e52:	f8cd b000 	str.w	fp, [sp]
 8017e56:	4620      	mov	r0, r4
            end_sector--;
 8017e58:	f149 39ff 	adc.w	r9, r9, #4294967295
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8017e5c:	f001 fe86 	bl	8019b6c <_fx_utility_logical_sector_cache_entry_read>
 8017e60:	2800      	cmp	r0, #0
 8017e62:	d0e8      	beq.n	8017e36 <_fx_utility_logical_sector_read+0xae>
            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8017e64:	f04f 0901 	mov.w	r9, #1
 8017e68:	f04f 0800 	mov.w	r8, #0
 8017e6c:	4632      	mov	r2, r6
 8017e6e:	463b      	mov	r3, r7
 8017e70:	9500      	str	r5, [sp, #0]
 8017e72:	4620      	mov	r0, r4
 8017e74:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e78:	f8cd 8004 	str.w	r8, [sp, #4]
 8017e7c:	f002 f814 	bl	8019ea8 <_fx_utility_logical_sector_flush>

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8017e80:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8017e84:	9906      	ldr	r1, [sp, #24]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017e86:	2290      	movs	r2, #144	; 0x90
        media_ptr -> fx_media_driver_read_requests++;
 8017e88:	444b      	add	r3, r9
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8017e8a:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8017e8e:	2904      	cmp	r1, #4
        media_ptr -> fx_media_driver_sectors =          sectors;
 8017e90:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8017e94:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_read_requests++;
 8017e98:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017e9c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8017ea0:	e9c4 a624 	strd	sl, r6, [r4, #144]	; 0x90
        if (sector_type == FX_DATA_SECTOR)
 8017ea4:	f000 80fc 	beq.w	80180a0 <_fx_utility_logical_sector_read+0x318>

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017ea8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8017eac:	4620      	mov	r0, r4
 8017eae:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8017eb0:	2300      	movs	r3, #0

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8017eb2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8017eb6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8017eba:	2800      	cmp	r0, #0
 8017ebc:	d176      	bne.n	8017fac <_fx_utility_logical_sector_read+0x224>
 8017ebe:	6963      	ldr	r3, [r4, #20]
 8017ec0:	ebb5 0f93 	cmp.w	r5, r3, lsr #2
 8017ec4:	d272      	bcs.n	8017fac <_fx_utility_logical_sector_read+0x224>
 8017ec6:	f116 0801 	adds.w	r8, r6, #1
 8017eca:	f105 31ff 	add.w	r1, r5, #4294967295

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8017ece:	9007      	str	r0, [sp, #28]
 8017ed0:	f147 0900 	adc.w	r9, r7, #0
 8017ed4:	eb18 0201 	adds.w	r2, r8, r1
 8017ed8:	f149 0300 	adc.w	r3, r9, #0
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017edc:	46d1      	mov	r9, sl
 8017ede:	46a2      	mov	sl, r4
 8017ee0:	e9cd 2304 	strd	r2, r3, [sp, #16]
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8017ee4:	f8cd b000 	str.w	fp, [sp]
 8017ee8:	4632      	mov	r2, r6
 8017eea:	463b      	mov	r3, r7
 8017eec:	4650      	mov	r0, sl
 8017eee:	f001 fe3d 	bl	8019b6c <_fx_utility_logical_sector_cache_entry_read>
                if (cache_entry == FX_NULL)
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	2800      	cmp	r0, #0
 8017ef6:	d058      	beq.n	8017faa <_fx_utility_logical_sector_read+0x222>
                if ((cache_entry -> fx_cached_sector_valid) &&
 8017ef8:	7c42      	ldrb	r2, [r0, #17]
 8017efa:	6803      	ldr	r3, [r0, #0]
 8017efc:	b372      	cbz	r2, 8017f5c <_fx_utility_logical_sector_read+0x1d4>
 8017efe:	7c22      	ldrb	r2, [r4, #16]
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017f00:	4650      	mov	r0, sl
                if ((cache_entry -> fx_cached_sector_valid) &&
 8017f02:	b35a      	cbz	r2, 8017f5c <_fx_utility_logical_sector_read+0x1d4>
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8017f04:	2101      	movs	r1, #1
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8017f06:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
                    media_ptr -> fx_media_driver_write_requests++;
 8017f0a:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8017f0e:	68a3      	ldr	r3, [r4, #8]
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8017f10:	f8ca 1088 	str.w	r1, [sl, #136]	; 0x88
                    media_ptr -> fx_media_driver_write_requests++;
 8017f14:	440a      	add	r2, r1
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8017f16:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017f1a:	2190      	movs	r1, #144	; 0x90
                    media_ptr -> fx_media_driver_sectors =          1;
 8017f1c:	2301      	movs	r3, #1
                    media_ptr -> fx_media_driver_write_requests++;
 8017f1e:	f8ca 21b0 	str.w	r2, [sl, #432]	; 0x1b0
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017f22:	f8ca 108c 	str.w	r1, [sl, #140]	; 0x8c
                    media_ptr -> fx_media_driver_sectors =          1;
 8017f26:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8017f2a:	7ca3      	ldrb	r3, [r4, #18]
 8017f2c:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8017f30:	7ca3      	ldrb	r3, [r4, #18]
 8017f32:	2b04      	cmp	r3, #4
 8017f34:	d002      	beq.n	8017f3c <_fx_utility_logical_sector_read+0x1b4>
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8017f36:	2301      	movs	r3, #1
 8017f38:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017f3c:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
 8017f40:	4798      	blx	r3
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8017f42:	9b07      	ldr	r3, [sp, #28]

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8017f44:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8017f48:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                    if (media_ptr -> fx_media_driver_status)
 8017f4c:	bb70      	cbnz	r0, 8017fac <_fx_utility_logical_sector_read+0x224>
                        return(media_ptr -> fx_media_driver_status);
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8017f4e:	7420      	strb	r0, [r4, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8017f50:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8017f54:	6823      	ldr	r3, [r4, #0]
 8017f56:	3a01      	subs	r2, #1
 8017f58:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8017f5c:	f04f 0501 	mov.w	r5, #1

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8017f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
                        media_ptr -> fx_media_sector_cache_list_ptr;
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr,
 8017f62:	4648      	mov	r0, r9
 8017f64:	4619      	mov	r1, r3
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8017f66:	7465      	strb	r5, [r4, #17]
                cache_entry -> fx_cached_sector_type =  sector_type;
 8017f68:	9d06      	ldr	r5, [sp, #24]
                cache_entry -> fx_cached_sector =  logical_sector;
 8017f6a:	e9c4 6702 	strd	r6, r7, [r4, #8]
                cache_entry -> fx_cached_sector_type =  sector_type;
 8017f6e:	74a5      	strb	r5, [r4, #18]
                if (previous_cache_entry)
 8017f70:	2a00      	cmp	r2, #0
 8017f72:	f000 8098 	beq.w	80180a6 <_fx_utility_logical_sector_read+0x31e>
                    cache_entry -> fx_cached_sector_next_used =
 8017f76:	f8da 301c 	ldr.w	r3, [sl, #28]

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8017f7a:	3601      	adds	r6, #1
                    previous_cache_entry -> fx_cached_sector_next_used =
 8017f7c:	6965      	ldr	r5, [r4, #20]
                logical_sector++;
 8017f7e:	f147 0700 	adc.w	r7, r7, #0
                    previous_cache_entry -> fx_cached_sector_next_used =
 8017f82:	6155      	str	r5, [r2, #20]
                _fx_utility_memory_copy(buffer_ptr,
 8017f84:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
                    cache_entry -> fx_cached_sector_next_used =
 8017f88:	6163      	str	r3, [r4, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8017f8a:	f8ca 401c 	str.w	r4, [sl, #28]
                _fx_utility_memory_copy(buffer_ptr,
 8017f8e:	f000 f997 	bl	80182c0 <_fx_utility_memory_copy>
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8017f92:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8017f96:	4499      	add	r9, r3
            while (sectors)
 8017f98:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017f9c:	42a7      	cmp	r7, r4
 8017f9e:	bf08      	it	eq
 8017fa0:	429e      	cmpeq	r6, r3
 8017fa2:	d19f      	bne.n	8017ee4 <_fx_utility_logical_sector_read+0x15c>
 8017fa4:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8017fa8:	e000      	b.n	8017fac <_fx_utility_logical_sector_read+0x224>
            return(FX_SUCCESS);
 8017faa:	2000      	movs	r0, #0
    }
}
 8017fac:	b00b      	add	sp, #44	; 0x2c
 8017fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return(FX_SECTOR_INVALID);
 8017fb2:	2089      	movs	r0, #137	; 0x89
}
 8017fb4:	b00b      	add	sp, #44	; 0x2c
 8017fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8017fba:	a909      	add	r1, sp, #36	; 0x24
 8017fbc:	4632      	mov	r2, r6
 8017fbe:	463b      	mov	r3, r7
 8017fc0:	4620      	mov	r0, r4
 8017fc2:	9100      	str	r1, [sp, #0]
 8017fc4:	f001 fdd2 	bl	8019b6c <_fx_utility_logical_sector_cache_entry_read>
        if (cache_entry == FX_NULL)
 8017fc8:	4605      	mov	r5, r0
 8017fca:	2800      	cmp	r0, #0
 8017fcc:	d0ed      	beq.n	8017faa <_fx_utility_logical_sector_read+0x222>
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8017fce:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 8017fd2:	3301      	adds	r3, #1
 8017fd4:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
        if ((cache_entry -> fx_cached_sector_valid) &&
 8017fd8:	7c43      	ldrb	r3, [r0, #17]
 8017fda:	b35b      	cbz	r3, 8018034 <_fx_utility_logical_sector_read+0x2ac>
 8017fdc:	7c03      	ldrb	r3, [r0, #16]
 8017fde:	b34b      	cbz	r3, 8018034 <_fx_utility_logical_sector_read+0x2ac>
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8017fe0:	2101      	movs	r1, #1
            media_ptr -> fx_media_driver_write_requests++;
 8017fe2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8017fe6:	6802      	ldr	r2, [r0, #0]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017fe8:	2090      	movs	r0, #144	; 0x90
            media_ptr -> fx_media_driver_write_requests++;
 8017fea:	440b      	add	r3, r1
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8017fec:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8017ff0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
            media_ptr -> fx_media_driver_write_requests++;
 8017ff4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8017ff8:	68ab      	ldr	r3, [r5, #8]
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8017ffa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017ffe:	4620      	mov	r0, r4
            media_ptr -> fx_media_driver_sectors =          1;
 8018000:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8018004:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8018008:	7cab      	ldrb	r3, [r5, #18]
 801800a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801800e:	7cab      	ldrb	r3, [r5, #18]
 8018010:	2b04      	cmp	r3, #4
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018012:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8018016:	bf18      	it	ne
 8018018:	f8c4 10b0 	strne.w	r1, [r4, #176]	; 0xb0
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801801c:	4798      	blx	r3
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801801e:	2300      	movs	r3, #0
            if (media_ptr -> fx_media_driver_status)
 8018020:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8018024:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
            if (media_ptr -> fx_media_driver_status)
 8018028:	2800      	cmp	r0, #0
 801802a:	d1bf      	bne.n	8017fac <_fx_utility_logical_sector_read+0x224>
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801802c:	7428      	strb	r0, [r5, #16]
            media_ptr -> fx_media_sector_cache_dirty_count--;
 801802e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018030:	3b01      	subs	r3, #1
 8018032:	6263      	str	r3, [r4, #36]	; 0x24
        if (logical_sector >= (ULONG)media_ptr -> fx_media_total_sectors)
 8018034:	2100      	movs	r1, #0
 8018036:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801803a:	428f      	cmp	r7, r1
 801803c:	bf08      	it	eq
 801803e:	4296      	cmpeq	r6, r2
 8018040:	d2b7      	bcs.n	8017fb2 <_fx_utility_logical_sector_read+0x22a>
        media_ptr -> fx_media_driver_read_requests++;
 8018042:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8018046:	2100      	movs	r1, #0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018048:	2290      	movs	r2, #144	; 0x90
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801804a:	4620      	mov	r0, r4
        media_ptr -> fx_media_driver_read_requests++;
 801804c:	3301      	adds	r3, #1
 801804e:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8018052:	682b      	ldr	r3, [r5, #0]
 8018054:	e9c4 3624 	strd	r3, r6, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8018058:	9b06      	ldr	r3, [sp, #24]
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801805a:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
        if (sector_type == FX_DATA_SECTOR)
 801805e:	2b04      	cmp	r3, #4
        media_ptr -> fx_media_driver_sectors =          1;
 8018060:	f04f 0201 	mov.w	r2, #1
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8018064:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_sectors =          1;
 8018068:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 801806c:	bf08      	it	eq
 801806e:	f8c4 20b4 	streq.w	r2, [r4, #180]	; 0xb4
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018072:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8018076:	4798      	blx	r3
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8018078:	2300      	movs	r3, #0
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 801807a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 801807e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8018082:	bb12      	cbnz	r2, 80180ca <_fx_utility_logical_sector_read+0x342>
            cache_entry -> fx_cached_sector_type =  sector_type;
 8018084:	9b06      	ldr	r3, [sp, #24]
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8018086:	2201      	movs	r2, #1
            cache_entry -> fx_cached_sector_type =  sector_type;
 8018088:	74ab      	strb	r3, [r5, #18]
            if (previous_cache_entry)
 801808a:	9b09      	ldr	r3, [sp, #36]	; 0x24
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801808c:	746a      	strb	r2, [r5, #17]
            cache_entry -> fx_cached_sector =  logical_sector;
 801808e:	e9c5 6702 	strd	r6, r7, [r5, #8]
            if (previous_cache_entry)
 8018092:	b30b      	cbz	r3, 80180d8 <_fx_utility_logical_sector_read+0x350>
                    cache_entry -> fx_cached_sector_next_used;
 8018094:	6969      	ldr	r1, [r5, #20]
                cache_entry -> fx_cached_sector_next_used =
 8018096:	69e2      	ldr	r2, [r4, #28]
                previous_cache_entry -> fx_cached_sector_next_used =
 8018098:	6159      	str	r1, [r3, #20]
                cache_entry -> fx_cached_sector_next_used =
 801809a:	616a      	str	r2, [r5, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801809c:	61e5      	str	r5, [r4, #28]
 801809e:	e01b      	b.n	80180d8 <_fx_utility_logical_sector_read+0x350>
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 80180a0:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
 80180a4:	e700      	b.n	8017ea8 <_fx_utility_logical_sector_read+0x120>
                logical_sector++;
 80180a6:	3601      	adds	r6, #1
                _fx_utility_memory_copy(buffer_ptr,
 80180a8:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
                logical_sector++;
 80180ac:	f147 0700 	adc.w	r7, r7, #0
                _fx_utility_memory_copy(buffer_ptr,
 80180b0:	f000 f906 	bl	80182c0 <_fx_utility_memory_copy>
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 80180b4:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 80180b8:	4499      	add	r9, r3
            while (sectors)
 80180ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80180be:	42bc      	cmp	r4, r7
 80180c0:	bf08      	it	eq
 80180c2:	42b3      	cmpeq	r3, r6
 80180c4:	f47f af0e 	bne.w	8017ee4 <_fx_utility_logical_sector_read+0x15c>
 80180c8:	e76c      	b.n	8017fa4 <_fx_utility_logical_sector_read+0x21c>
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80180ca:	f04f 30ff 	mov.w	r0, #4294967295
 80180ce:	f04f 31ff 	mov.w	r1, #4294967295
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80180d2:	746b      	strb	r3, [r5, #17]
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80180d4:	e9c5 0102 	strd	r0, r1, [r5, #8]
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 80180d8:	682b      	ldr	r3, [r5, #0]
        return(media_ptr -> fx_media_driver_status);
 80180da:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 80180de:	60a3      	str	r3, [r4, #8]
        return(media_ptr -> fx_media_driver_status);
 80180e0:	e764      	b.n	8017fac <_fx_utility_logical_sector_read+0x224>
 80180e2:	bf00      	nop

080180e4 <_fx_utility_logical_sector_write>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80180e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180e8:	b085      	sub	sp, #20
 80180ea:	4604      	mov	r4, r0
 80180ec:	4616      	mov	r6, r2
 80180ee:	461f      	mov	r7, r3
 80180f0:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80180f4:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80180f8:	2d02      	cmp	r5, #2
 80180fa:	d104      	bne.n	8018106 <_fx_utility_logical_sector_write+0x22>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 80180fc:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
 8018100:	3301      	adds	r3, #1
 8018102:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 8018106:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801810a:	68a2      	ldr	r2, [r4, #8]
    media_ptr -> fx_media_logical_sector_writes++;
 801810c:	3301      	adds	r3, #1
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801810e:	4552      	cmp	r2, sl
    media_ptr -> fx_media_logical_sector_writes++;
 8018110:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8018114:	d802      	bhi.n	801811c <_fx_utility_logical_sector_write+0x38>
 8018116:	69a3      	ldr	r3, [r4, #24]
 8018118:	4553      	cmp	r3, sl
 801811a:	d24b      	bcs.n	80181b4 <_fx_utility_logical_sector_write+0xd0>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801811c:	ea56 0307 	orrs.w	r3, r6, r7
 8018120:	d044      	beq.n	80181ac <_fx_utility_logical_sector_write+0xc8>
 8018122:	2f00      	cmp	r7, #0
 8018124:	bf08      	it	eq
 8018126:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 801812a:	d03f      	beq.n	80181ac <_fx_utility_logical_sector_write+0xc8>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= (ULONG)media_ptr -> fx_media_total_sectors)
 801812c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801812e:	f04f 0900 	mov.w	r9, #0
 8018132:	2100      	movs	r1, #0
 8018134:	4698      	mov	r8, r3
 8018136:	eb18 0b06 	adds.w	fp, r8, r6
 801813a:	eb49 0c07 	adc.w	ip, r9, r7
 801813e:	f11b 30ff 	adds.w	r0, fp, #4294967295
 8018142:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8018146:	460b      	mov	r3, r1
 8018148:	f14c 31ff 	adc.w	r1, ip, #4294967295
 801814c:	4299      	cmp	r1, r3
 801814e:	bf08      	it	eq
 8018150:	4290      	cmpeq	r0, r2
 8018152:	d22b      	bcs.n	80181ac <_fx_utility_logical_sector_write+0xc8>
        {
            return(FX_SECTOR_INVALID);
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8018154:	f04f 0b01 	mov.w	fp, #1
 8018158:	4632      	mov	r2, r6
 801815a:	463b      	mov	r3, r7
 801815c:	4620      	mov	r0, r4
 801815e:	f8cd b008 	str.w	fp, [sp, #8]
 8018162:	e9cd 8900 	strd	r8, r9, [sp]
 8018166:	f001 fe9f 	bl	8019ea8 <_fx_utility_logical_sector_flush>

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 801816a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801816e:	2290      	movs	r2, #144	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8018170:	990f      	ldr	r1, [sp, #60]	; 0x3c
        media_ptr -> fx_media_driver_write_requests++;
 8018172:	445b      	add	r3, fp
        media_ptr -> fx_media_driver_sector_type =      sector_type;

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8018174:	2d04      	cmp	r5, #4
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8018176:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
        media_ptr -> fx_media_driver_sectors =          sectors;
 801817a:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801817e:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_write_requests++;
 8018182:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018186:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801818a:	bf18      	it	ne
 801818c:	f8c4 b0b0 	strne.w	fp, [r4, #176]	; 0xb0
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8018190:	e9c4 a624 	strd	sl, r6, [r4, #144]	; 0x90

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018194:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8018198:	4620      	mov	r0, r4
 801819a:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801819c:	2300      	movs	r3, #0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 801819e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80181a2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    }
}
 80181a6:	b005      	add	sp, #20
 80181a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return(FX_SECTOR_INVALID);
 80181ac:	2089      	movs	r0, #137	; 0x89
}
 80181ae:	b005      	add	sp, #20
 80181b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (media_ptr -> fx_media_sector_cache_hashed)
 80181b4:	6923      	ldr	r3, [r4, #16]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d062      	beq.n	8018280 <_fx_utility_logical_sector_write+0x19c>
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 80181ba:	f242 43a0 	movw	r3, #9376	; 0x24a0
 80181be:	58e1      	ldr	r1, [r4, r3]
 80181c0:	4031      	ands	r1, r6
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80181c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80181c6:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 80181ca:	f501 614a 	add.w	r1, r1, #3232	; 0xca0
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80181ce:	7c4b      	ldrb	r3, [r1, #17]
 80181d0:	b12b      	cbz	r3, 80181de <_fx_utility_logical_sector_write+0xfa>
 80181d2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80181d6:	429f      	cmp	r7, r3
 80181d8:	bf08      	it	eq
 80181da:	4296      	cmpeq	r6, r2
 80181dc:	d063      	beq.n	80182a6 <_fx_utility_logical_sector_write+0x1c2>
 80181de:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 80181e2:	f101 0018 	add.w	r0, r1, #24
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80181e6:	b12b      	cbz	r3, 80181f4 <_fx_utility_logical_sector_write+0x110>
 80181e8:	e9d1 2308 	ldrd	r2, r3, [r1, #32]
 80181ec:	429f      	cmp	r7, r3
 80181ee:	bf08      	it	eq
 80181f0:	4296      	cmpeq	r6, r2
 80181f2:	d062      	beq.n	80182ba <_fx_utility_logical_sector_write+0x1d6>
 80181f4:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 80181f8:	f101 0030 	add.w	r0, r1, #48	; 0x30
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80181fc:	b12b      	cbz	r3, 801820a <_fx_utility_logical_sector_write+0x126>
 80181fe:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8018202:	429f      	cmp	r7, r3
 8018204:	bf08      	it	eq
 8018206:	4296      	cmpeq	r6, r2
 8018208:	d057      	beq.n	80182ba <_fx_utility_logical_sector_write+0x1d6>
 801820a:	f891 3059 	ldrb.w	r3, [r1, #89]	; 0x59
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801820e:	f101 0248 	add.w	r2, r1, #72	; 0x48
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8018212:	b12b      	cbz	r3, 8018220 <_fx_utility_logical_sector_write+0x13c>
 8018214:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8018218:	42b9      	cmp	r1, r7
 801821a:	bf08      	it	eq
 801821c:	42b0      	cmpeq	r0, r6
 801821e:	d041      	beq.n	80182a4 <_fx_utility_logical_sector_write+0x1c0>
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8018220:	ea56 0307 	orrs.w	r3, r6, r7
 8018224:	d0c2      	beq.n	80181ac <_fx_utility_logical_sector_write+0xc8>
 8018226:	2f00      	cmp	r7, #0
 8018228:	bf08      	it	eq
 801822a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 801822e:	d0bd      	beq.n	80181ac <_fx_utility_logical_sector_write+0xc8>
        if ((logical_sector + sectors - 1) >= (ULONG)media_ptr -> fx_media_total_sectors)
 8018230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018232:	eb16 0803 	adds.w	r8, r6, r3
 8018236:	f147 0900 	adc.w	r9, r7, #0
 801823a:	f118 30ff 	adds.w	r0, r8, #4294967295
 801823e:	f149 31ff 	adc.w	r1, r9, #4294967295
 8018242:	f04f 0900 	mov.w	r9, #0
 8018246:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801824a:	4549      	cmp	r1, r9
 801824c:	bf08      	it	eq
 801824e:	4290      	cmpeq	r0, r2
 8018250:	d2ac      	bcs.n	80181ac <_fx_utility_logical_sector_write+0xc8>
        media_ptr -> fx_media_driver_write_requests++;
 8018252:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8018256:	2201      	movs	r2, #1
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018258:	2190      	movs	r1, #144	; 0x90
        media_ptr -> fx_media_driver_sectors =          sectors;
 801825a:	980f      	ldr	r0, [sp, #60]	; 0x3c
        media_ptr -> fx_media_driver_write_requests++;
 801825c:	4413      	add	r3, r2
        if (sector_type != FX_DATA_SECTOR)
 801825e:	2d04      	cmp	r5, #4
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8018260:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8018264:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          sectors;
 8018268:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801826c:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
        media_ptr -> fx_media_driver_write_requests++;
 8018270:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018274:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
        if (sector_type != FX_DATA_SECTOR)
 8018278:	d08c      	beq.n	8018194 <_fx_utility_logical_sector_write+0xb0>
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801827a:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 801827e:	e789      	b.n	8018194 <_fx_utility_logical_sector_write+0xb0>
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8018280:	6960      	ldr	r0, [r4, #20]
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8018282:	69e1      	ldr	r1, [r4, #28]
            while (cache_size--)
 8018284:	2800      	cmp	r0, #0
 8018286:	d0cb      	beq.n	8018220 <_fx_utility_logical_sector_write+0x13c>
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8018288:	7c4b      	ldrb	r3, [r1, #17]
 801828a:	3801      	subs	r0, #1
 801828c:	b12b      	cbz	r3, 801829a <_fx_utility_logical_sector_write+0x1b6>
 801828e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8018292:	42bb      	cmp	r3, r7
 8018294:	bf08      	it	eq
 8018296:	42b2      	cmpeq	r2, r6
 8018298:	d005      	beq.n	80182a6 <_fx_utility_logical_sector_write+0x1c2>
                if (cache_entry -> fx_cached_sector_next_used)
 801829a:	694b      	ldr	r3, [r1, #20]
 801829c:	2b00      	cmp	r3, #0
 801829e:	bf18      	it	ne
 80182a0:	4619      	movne	r1, r3
 80182a2:	e7ef      	b.n	8018284 <_fx_utility_logical_sector_write+0x1a0>
 80182a4:	4611      	mov	r1, r2
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 80182a6:	7c08      	ldrb	r0, [r1, #16]
 80182a8:	b108      	cbz	r0, 80182ae <_fx_utility_logical_sector_write+0x1ca>
            return(FX_SUCCESS);
 80182aa:	2000      	movs	r0, #0
 80182ac:	e77f      	b.n	80181ae <_fx_utility_logical_sector_write+0xca>
                media_ptr -> fx_media_sector_cache_dirty_count++;
 80182ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 80182b0:	2201      	movs	r2, #1
                media_ptr -> fx_media_sector_cache_dirty_count++;
 80182b2:	4413      	add	r3, r2
 80182b4:	6263      	str	r3, [r4, #36]	; 0x24
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 80182b6:	740a      	strb	r2, [r1, #16]
 80182b8:	e779      	b.n	80181ae <_fx_utility_logical_sector_write+0xca>
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80182ba:	4601      	mov	r1, r0
 80182bc:	e7f3      	b.n	80182a6 <_fx_utility_logical_sector_write+0x1c2>
 80182be:	bf00      	nop

080182c0 <_fx_utility_memory_copy>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 80182c0:	460b      	mov	r3, r1

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size);
 80182c2:	4601      	mov	r1, r0
 80182c4:	4618      	mov	r0, r3
 80182c6:	f006 b944 	b.w	801e552 <memcpy>
 80182ca:	bf00      	nop

080182cc <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 80182cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d0:	461f      	mov	r7, r3


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 80182d2:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
 80182d6:	b091      	sub	sp, #68	; 0x44
ULONG  cluster, next_cluster = 0;
 80182d8:	f04f 0c00 	mov.w	ip, #0

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 80182dc:	468b      	mov	fp, r1
    media_ptr -> fx_media_directory_entry_reads++;
 80182de:	3301      	adds	r3, #1
ULONG  entry = *entry_ptr;
 80182e0:	6811      	ldr	r1, [r2, #0]
{
 80182e2:	4606      	mov	r6, r0
 80182e4:	9207      	str	r2, [sp, #28]
ULONG  entry = *entry_ptr;
 80182e6:	9106      	str	r1, [sp, #24]
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 80182e8:	ea4f 1841 	mov.w	r8, r1, lsl #5
 80182ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
ULONG  cluster, next_cluster = 0;
 80182ee:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    media_ptr -> fx_media_directory_entry_reads++;
 80182f2:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 80182f6:	f1bb 0f00 	cmp.w	fp, #0
 80182fa:	f000 8098 	beq.w	801842e <_fx_directory_entry_read+0x162>

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 80182fe:	6d40      	ldr	r0, [r0, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8018300:	fb00 f302 	mul.w	r3, r0, r2

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8018304:	2b00      	cmp	r3, #0
 8018306:	f000 809a 	beq.w	801843e <_fx_directory_entry_read+0x172>
        /* Determine if there is a sub-directory.  */
        if (source_dir)
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 801830a:	f8db 1050 	ldr.w	r1, [fp, #80]	; 0x50
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 801830e:	fbb8 faf3 	udiv	sl, r8, r3
        byte_offset =  byte_offset % bytes_per_cluster;
 8018312:	fb03 881a 	mls	r8, r3, sl, r8
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8018316:	fbb8 f3f2 	udiv	r3, r8, r2
 801831a:	9305      	str	r3, [sp, #20]
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 801831c:	b121      	cbz	r1, 8018328 <_fx_directory_entry_read+0x5c>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 801831e:	f8db 9054 	ldr.w	r9, [fp, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8018322:	45d1      	cmp	r9, sl
 8018324:	f240 80a9 	bls.w	801847a <_fx_directory_entry_read+0x1ae>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 8018328:	f8db 1034 	ldr.w	r1, [fp, #52]	; 0x34

                /* Setup the relative cluster index to zero.  */
                i =  0;
 801832c:	f04f 0900 	mov.w	r9, #0
            /* Setup the relative cluster index to zero.  */
            i =  0;
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 8018330:	45d1      	cmp	r9, sl
 8018332:	d21d      	bcs.n	8018370 <_fx_directory_entry_read+0xa4>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8018334:	2901      	cmp	r1, #1
 8018336:	f240 8092 	bls.w	801845e <_fx_directory_entry_read+0x192>
 801833a:	f242 45a8 	movw	r5, #9384	; 0x24a8
 801833e:	5973      	ldr	r3, [r6, r5]
 8018340:	428b      	cmp	r3, r1
 8018342:	f240 808c 	bls.w	801845e <_fx_directory_entry_read+0x192>
 8018346:	4435      	add	r5, r6
 8018348:	e006      	b.n	8018358 <_fx_directory_entry_read+0x8c>
 801834a:	2901      	cmp	r1, #1
 801834c:	f240 8087 	bls.w	801845e <_fx_directory_entry_read+0x192>
 8018350:	682b      	ldr	r3, [r5, #0]
 8018352:	428b      	cmp	r3, r1
 8018354:	f240 8083 	bls.w	801845e <_fx_directory_entry_read+0x192>
                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8018358:	aa0f      	add	r2, sp, #60	; 0x3c
 801835a:	4630      	mov	r0, r6

            /* Setup the actual cluster.  */
            cluster = next_cluster;

            /* Increment the relative cluster number.  */
            i++;
 801835c:	f109 0901 	add.w	r9, r9, #1
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8018360:	f7ff f9ac 	bl	80176bc <_fx_utility_FAT_entry_read>
            if (status != FX_SUCCESS)
 8018364:	2800      	cmp	r0, #0
 8018366:	d16b      	bne.n	8018440 <_fx_directory_entry_read+0x174>
        while (i < relative_cluster)
 8018368:	45d1      	cmp	r9, sl
            cluster = next_cluster;
 801836a:	990f      	ldr	r1, [sp, #60]	; 0x3c
        while (i < relative_cluster)
 801836c:	d1ed      	bne.n	801834a <_fx_directory_entry_read+0x7e>
 801836e:	6d70      	ldr	r0, [r6, #84]	; 0x54
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8018370:	6d32      	ldr	r2, [r6, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8018372:	1e8c      	subs	r4, r1, #2
 8018374:	9108      	str	r1, [sp, #32]
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8018376:	2303      	movs	r3, #3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8018378:	9905      	ldr	r1, [sp, #20]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801837a:	2500      	movs	r5, #0
 801837c:	9302      	str	r3, [sp, #8]
 801837e:	f04f 0c01 	mov.w	ip, #1
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8018382:	440a      	add	r2, r1
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8018384:	462b      	mov	r3, r5
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8018386:	fb00 2904 	mla	r9, r0, r4, r2
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801838a:	68b4      	ldr	r4, [r6, #8]
 801838c:	4630      	mov	r0, r6
 801838e:	f8cd c004 	str.w	ip, [sp, #4]
 8018392:	464a      	mov	r2, r9
 8018394:	9400      	str	r4, [sp, #0]
 8018396:	f7ff fcf7 	bl	8017d88 <_fx_utility_logical_sector_read>
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 801839a:	2800      	cmp	r0, #0
 801839c:	d150      	bne.n	8018440 <_fx_directory_entry_read+0x174>
            /* Return error code.  */
            return(status);
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 801839e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80183a0:	9908      	ldr	r1, [sp, #32]
 80183a2:	fbb8 f0f3 	udiv	r0, r8, r3
 80183a6:	fb03 8010 	mls	r0, r3, r0, r8
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
             media_ptr -> fx_media_bytes_per_sector);
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80183aa:	68b3      	ldr	r3, [r6, #8]
    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 80183ac:	f04f 0e00 	mov.w	lr, #0
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 80183b0:	647d      	str	r5, [r7, #68]	; 0x44
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80183b2:	181c      	adds	r4, r3, r0
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 80183b4:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 80183b8:	64b8      	str	r0, [r7, #72]	; 0x48
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 80183ba:	f8c7 e018 	str.w	lr, [r7, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 80183be:	f887 e004 	strb.w	lr, [r7, #4]
    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;

    /* Check if long file name exists.  */
    get_short_name =  0;
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80183c2:	f894 c00b 	ldrb.w	ip, [r4, #11]
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80183c6:	683d      	ldr	r5, [r7, #0]
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80183c8:	f1bc 0f0f 	cmp.w	ip, #15
 80183cc:	f000 8174 	beq.w	80186b8 <_fx_directory_entry_read+0x3ec>
    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 80183d0:	2300      	movs	r3, #0
 80183d2:	2201      	movs	r2, #1
 80183d4:	617b      	str	r3, [r7, #20]
 80183d6:	920b      	str	r2, [sp, #44]	; 0x2c
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 80183d8:	2300      	movs	r3, #0
 80183da:	1e62      	subs	r2, r4, #1
 80183dc:	f104 0e0a 	add.w	lr, r4, #10

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 80183e0:	f04f 092e 	mov.w	r9, #46	; 0x2e
    dotflag =  0;
 80183e4:	469c      	mov	ip, r3
    short_name_ptr[0] =  0;
 80183e6:	702b      	strb	r3, [r5, #0]
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 80183e8:	4618      	mov	r0, r3
 80183ea:	e017      	b.n	801841c <_fx_directory_entry_read+0x150>
        if ((CHAR)read_ptr[i] == ' ')
 80183ec:	2b20      	cmp	r3, #32
 80183ee:	f000 813b 	beq.w	8018668 <_fx_directory_entry_read+0x39c>
        if (i == FX_DIR_NAME_SIZE)
 80183f2:	eba2 0804 	sub.w	r8, r2, r4
            if (dotflag == 0)
 80183f6:	f1b8 0f08 	cmp.w	r8, #8
 80183fa:	d102      	bne.n	8018402 <_fx_directory_entry_read+0x136>
 80183fc:	f1bc 0f00 	cmp.w	ip, #0
 8018400:	d002      	beq.n	8018408 <_fx_directory_entry_read+0x13c>
        if (dotflag == 1)
 8018402:	f1bc 0f01 	cmp.w	ip, #1
 8018406:	d105      	bne.n	8018414 <_fx_directory_entry_read+0x148>
            short_name_ptr[j++] =  '.';
 8018408:	f805 9000 	strb.w	r9, [r5, r0]
            dotflag =  2;    /* no more dot for spaces */
 801840c:	f04f 0c02 	mov.w	ip, #2
            short_name_ptr[j++] =  '.';
 8018410:	3001      	adds	r0, #1
 8018412:	7813      	ldrb	r3, [r2, #0]
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8018414:	542b      	strb	r3, [r5, r0]

        /* Increment size.  */
        j++;
 8018416:	3001      	adds	r0, #1
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8018418:	4572      	cmp	r2, lr
 801841a:	d041      	beq.n	80184a0 <_fx_directory_entry_read+0x1d4>
        if ((CHAR)read_ptr[i] == 0)
 801841c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018420:	2b00      	cmp	r3, #0
 8018422:	d03d      	beq.n	80184a0 <_fx_directory_entry_read+0x1d4>
        if ((CHAR)read_ptr[i] == '.')
 8018424:	2b2e      	cmp	r3, #46	; 0x2e
 8018426:	d1e1      	bne.n	80183ec <_fx_directory_entry_read+0x120>
            dotflag =  2;
 8018428:	f04f 0c02 	mov.w	ip, #2
 801842c:	e7f2      	b.n	8018414 <_fx_directory_entry_read+0x148>
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 801842e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8018430:	2b00      	cmp	r3, #0
 8018432:	f000 80fb 	beq.w	801862c <_fx_directory_entry_read+0x360>
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8018436:	6d40      	ldr	r0, [r0, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8018438:	fb02 f300 	mul.w	r3, r2, r0
        if (bytes_per_cluster == 0)
 801843c:	b99b      	cbnz	r3, 8018466 <_fx_directory_entry_read+0x19a>
            return(FX_MEDIA_INVALID);
 801843e:	2002      	movs	r0, #2
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 8018440:	b011      	add	sp, #68	; 0x44
 8018442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8018446:	6e73      	ldr	r3, [r6, #100]	; 0x64
 8018448:	2b00      	cmp	r3, #0
 801844a:	f040 815b 	bne.w	8018704 <_fx_directory_entry_read+0x438>
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 801844e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
                    logical_sector++;
 8018450:	f109 0901 	add.w	r9, r9, #1
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8018454:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8018456:	4413      	add	r3, r2
 8018458:	454b      	cmp	r3, r9
 801845a:	f200 815c 	bhi.w	8018716 <_fx_directory_entry_read+0x44a>
                return(FX_FILE_CORRUPT);
 801845e:	2008      	movs	r0, #8
}
 8018460:	b011      	add	sp, #68	; 0x44
 8018462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8018466:	fbb8 faf3 	udiv	sl, r8, r3
        byte_offset =  byte_offset % bytes_per_cluster;
 801846a:	fb03 881a 	mls	r8, r3, sl, r8
            cluster =  media_ptr -> fx_media_root_cluster_32;
 801846e:	6f71      	ldr	r1, [r6, #116]	; 0x74
            i =  0;
 8018470:	46d9      	mov	r9, fp
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8018472:	fbb8 f3f2 	udiv	r3, r8, r2
 8018476:	9305      	str	r3, [sp, #20]
 8018478:	e75a      	b.n	8018330 <_fx_directory_entry_read+0x64>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 801847a:	e9db 2310 	ldrd	r2, r3, [fp, #64]	; 0x40
 801847e:	e9db 4516 	ldrd	r4, r5, [fp, #88]	; 0x58
 8018482:	429d      	cmp	r5, r3
 8018484:	bf08      	it	eq
 8018486:	4294      	cmpeq	r4, r2
 8018488:	f47f af4e 	bne.w	8018328 <_fx_directory_entry_read+0x5c>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 801848c:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8018490:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8018494:	429a      	cmp	r2, r3
 8018496:	f47f af47 	bne.w	8018328 <_fx_directory_entry_read+0x5c>
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 801849a:	f8cb c050 	str.w	ip, [fp, #80]	; 0x50
 801849e:	e747      	b.n	8018330 <_fx_directory_entry_read+0x64>
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 80184a0:	697b      	ldr	r3, [r7, #20]
 80184a2:	782a      	ldrb	r2, [r5, #0]
 80184a4:	b113      	cbz	r3, 80184ac <_fx_directory_entry_read+0x1e0>
 80184a6:	2ae5      	cmp	r2, #229	; 0xe5
 80184a8:	f000 80e4 	beq.w	8018674 <_fx_directory_entry_read+0x3a8>
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 80184ac:	2a00      	cmp	r2, #0
 80184ae:	f000 80e7 	beq.w	8018680 <_fx_directory_entry_read+0x3b4>
    short_name_ptr[j] = 0;
 80184b2:	2300      	movs	r3, #0
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 80184b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    short_name_ptr[j] = 0;
 80184b6:	542b      	strb	r3, [r5, r0]
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 80184b8:	7ae3      	ldrb	r3, [r4, #11]
 80184ba:	773b      	strb	r3, [r7, #28]
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 80184bc:	7b23      	ldrb	r3, [r4, #12]
 80184be:	777b      	strb	r3, [r7, #29]
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 80184c0:	2a00      	cmp	r2, #0
 80184c2:	d066      	beq.n	8018592 <_fx_directory_entry_read+0x2c6>
 80184c4:	071b      	lsls	r3, r3, #28
 80184c6:	d564      	bpl.n	8018592 <_fx_directory_entry_read+0x2c6>
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80184c8:	782b      	ldrb	r3, [r5, #0]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d061      	beq.n	8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 80184ce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80184d2:	2a19      	cmp	r2, #25
 80184d4:	d801      	bhi.n	80184da <_fx_directory_entry_read+0x20e>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80184d6:	3320      	adds	r3, #32
 80184d8:	702b      	strb	r3, [r5, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80184da:	786b      	ldrb	r3, [r5, #1]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d058      	beq.n	8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 80184e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80184e4:	2a19      	cmp	r2, #25
 80184e6:	d801      	bhi.n	80184ec <_fx_directory_entry_read+0x220>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80184e8:	3320      	adds	r3, #32
 80184ea:	706b      	strb	r3, [r5, #1]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80184ec:	78ab      	ldrb	r3, [r5, #2]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d04f      	beq.n	8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 80184f2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80184f6:	2a19      	cmp	r2, #25
 80184f8:	d801      	bhi.n	80184fe <_fx_directory_entry_read+0x232>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 80184fa:	3320      	adds	r3, #32
 80184fc:	70ab      	strb	r3, [r5, #2]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80184fe:	78eb      	ldrb	r3, [r5, #3]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d046      	beq.n	8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018504:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8018508:	2a19      	cmp	r2, #25
 801850a:	d801      	bhi.n	8018510 <_fx_directory_entry_read+0x244>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801850c:	3320      	adds	r3, #32
 801850e:	70eb      	strb	r3, [r5, #3]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8018510:	792b      	ldrb	r3, [r5, #4]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d03d      	beq.n	8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018516:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801851a:	2a19      	cmp	r2, #25
 801851c:	d801      	bhi.n	8018522 <_fx_directory_entry_read+0x256>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801851e:	3320      	adds	r3, #32
 8018520:	712b      	strb	r3, [r5, #4]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8018522:	796b      	ldrb	r3, [r5, #5]
 8018524:	b3ab      	cbz	r3, 8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018526:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801852a:	2a19      	cmp	r2, #25
 801852c:	d801      	bhi.n	8018532 <_fx_directory_entry_read+0x266>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801852e:	3320      	adds	r3, #32
 8018530:	716b      	strb	r3, [r5, #5]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8018532:	79ab      	ldrb	r3, [r5, #6]
 8018534:	b36b      	cbz	r3, 8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018536:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801853a:	2a19      	cmp	r2, #25
 801853c:	d801      	bhi.n	8018542 <_fx_directory_entry_read+0x276>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801853e:	3320      	adds	r3, #32
 8018540:	71ab      	strb	r3, [r5, #6]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8018542:	79eb      	ldrb	r3, [r5, #7]
 8018544:	b32b      	cbz	r3, 8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018546:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801854a:	2a19      	cmp	r2, #25
 801854c:	d801      	bhi.n	8018552 <_fx_directory_entry_read+0x286>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801854e:	3320      	adds	r3, #32
 8018550:	71eb      	strb	r3, [r5, #7]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8018552:	7a2b      	ldrb	r3, [r5, #8]
 8018554:	b1eb      	cbz	r3, 8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018556:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801855a:	2a19      	cmp	r2, #25
 801855c:	d801      	bhi.n	8018562 <_fx_directory_entry_read+0x296>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801855e:	3320      	adds	r3, #32
 8018560:	722b      	strb	r3, [r5, #8]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8018562:	7a6b      	ldrb	r3, [r5, #9]
 8018564:	b1ab      	cbz	r3, 8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018566:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801856a:	2a19      	cmp	r2, #25
 801856c:	d801      	bhi.n	8018572 <_fx_directory_entry_read+0x2a6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801856e:	3320      	adds	r3, #32
 8018570:	726b      	strb	r3, [r5, #9]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8018572:	7aab      	ldrb	r3, [r5, #10]
 8018574:	b16b      	cbz	r3, 8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018576:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801857a:	2a19      	cmp	r2, #25
 801857c:	d801      	bhi.n	8018582 <_fx_directory_entry_read+0x2b6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801857e:	3320      	adds	r3, #32
 8018580:	72ab      	strb	r3, [r5, #10]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8018582:	7aeb      	ldrb	r3, [r5, #11]
 8018584:	b12b      	cbz	r3, 8018592 <_fx_directory_entry_read+0x2c6>
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8018586:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801858a:	2a19      	cmp	r2, #25
 801858c:	d801      	bhi.n	8018592 <_fx_directory_entry_read+0x2c6>
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 801858e:	3320      	adds	r3, #32
 8018590:	72eb      	strb	r3, [r5, #11]
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 8018592:	7b63      	ldrb	r3, [r4, #13]
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 8018594:	f104 000e 	add.w	r0, r4, #14
 8018598:	9105      	str	r1, [sp, #20]
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 801859a:	77bb      	strb	r3, [r7, #30]
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 801859c:	f001 fac8 	bl	8019b30 <_fx_utility_16_unsigned_read>
 80185a0:	6238      	str	r0, [r7, #32]
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 80185a2:	f104 0010 	add.w	r0, r4, #16
 80185a6:	f001 fac3 	bl	8019b30 <_fx_utility_16_unsigned_read>
 80185aa:	6278      	str	r0, [r7, #36]	; 0x24
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 80185ac:	f104 0012 	add.w	r0, r4, #18
 80185b0:	f001 fabe 	bl	8019b30 <_fx_utility_16_unsigned_read>
    if (media_ptr -> fx_media_32_bit_FAT)
 80185b4:	6e73      	ldr	r3, [r6, #100]	; 0x64
 80185b6:	9905      	ldr	r1, [sp, #20]
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 80185b8:	62b8      	str	r0, [r7, #40]	; 0x28
    if (media_ptr -> fx_media_32_bit_FAT)
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	f040 8125 	bne.w	801880a <_fx_directory_entry_read+0x53e>
        destination_ptr -> fx_dir_entry_cluster =  0;
 80185c0:	637b      	str	r3, [r7, #52]	; 0x34
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 80185c2:	f104 0016 	add.w	r0, r4, #22
 80185c6:	9105      	str	r1, [sp, #20]
 80185c8:	f001 fab2 	bl	8019b30 <_fx_utility_16_unsigned_read>
 80185cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 80185ce:	f104 0018 	add.w	r0, r4, #24
 80185d2:	f001 faad 	bl	8019b30 <_fx_utility_16_unsigned_read>
 80185d6:	6338      	str	r0, [r7, #48]	; 0x30
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 80185d8:	f104 001a 	add.w	r0, r4, #26
 80185dc:	f001 faa8 	bl	8019b30 <_fx_utility_16_unsigned_read>
 80185e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185e2:	4403      	add	r3, r0
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 80185e4:	f104 001c 	add.w	r0, r4, #28
 80185e8:	2400      	movs	r4, #0
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 80185ea:	637b      	str	r3, [r7, #52]	; 0x34
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 80185ec:	f001 faaa 	bl	8019b44 <_fx_utility_32_unsigned_read>
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 80185f0:	2300      	movs	r3, #0
 80185f2:	2200      	movs	r2, #0
    destination_ptr -> fx_dir_entry_number =  entry;
 80185f4:	9906      	ldr	r1, [sp, #24]
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 80185f6:	63b8      	str	r0, [r7, #56]	; 0x38
    destination_ptr -> fx_dir_entry_number =  entry;
 80185f8:	64f9      	str	r1, [r7, #76]	; 0x4c
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 80185fa:	63fc      	str	r4, [r7, #60]	; 0x3c
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 80185fc:	663c      	str	r4, [r7, #96]	; 0x60
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 80185fe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    *entry_ptr =  entry;
 8018602:	9b07      	ldr	r3, [sp, #28]
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8018604:	e9c7 4414 	strd	r4, r4, [r7, #80]	; 0x50
    *entry_ptr =  entry;
 8018608:	6019      	str	r1, [r3, #0]
    if (source_dir)
 801860a:	f1bb 0f00 	cmp.w	fp, #0
 801860e:	f000 8105 	beq.w	801881c <_fx_directory_entry_read+0x550>
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8018612:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
    return(FX_SUCCESS);
 8018616:	4620      	mov	r0, r4
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 8018618:	9905      	ldr	r1, [sp, #20]
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 801861a:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 801861e:	e9db 2310 	ldrd	r2, r3, [fp, #64]	; 0x40
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8018622:	e9cb 1a14 	strd	r1, sl, [fp, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8018626:	e9cb 2316 	strd	r2, r3, [fp, #88]	; 0x58
 801862a:	e709      	b.n	8018440 <_fx_directory_entry_read+0x174>
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801862c:	fbb8 f1f2 	udiv	r1, r8, r2
 8018630:	6c83      	ldr	r3, [r0, #72]	; 0x48
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8018632:	2203      	movs	r2, #3
 8018634:	2501      	movs	r5, #1
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8018636:	eb01 0903 	add.w	r9, r1, r3
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801863a:	6881      	ldr	r1, [r0, #8]
 801863c:	465b      	mov	r3, fp
 801863e:	9202      	str	r2, [sp, #8]
 8018640:	464a      	mov	r2, r9
 8018642:	e9cd 1500 	strd	r1, r5, [sp]
 8018646:	465d      	mov	r5, fp
 8018648:	f7ff fb9e 	bl	8017d88 <_fx_utility_logical_sector_read>
        if (status != FX_SUCCESS)
 801864c:	2800      	cmp	r0, #0
 801864e:	f47f aef7 	bne.w	8018440 <_fx_directory_entry_read+0x174>
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8018652:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        relative_cluster =  relative_sector =  cluster =  0;
 8018654:	46da      	mov	sl, fp
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8018656:	6ab0      	ldr	r0, [r6, #40]	; 0x28
        relative_cluster =  relative_sector =  cluster =  0;
 8018658:	4659      	mov	r1, fp
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 801865a:	eba9 0303 	sub.w	r3, r9, r3
        relative_cluster =  relative_sector =  cluster =  0;
 801865e:	f8cd b014 	str.w	fp, [sp, #20]
        byte_offset =  byte_offset -
 8018662:	fb00 8013 	mls	r0, r0, r3, r8
 8018666:	e6a0      	b.n	80183aa <_fx_directory_entry_read+0xde>
                dotflag =  1;
 8018668:	f1bc 0f00 	cmp.w	ip, #0
 801866c:	bf08      	it	eq
 801866e:	f04f 0c01 	moveq.w	ip, #1
 8018672:	e6d1      	b.n	8018418 <_fx_directory_entry_read+0x14c>
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8018674:	683b      	ldr	r3, [r7, #0]
        short_name_ptr[0] =  (CHAR)0;
 8018676:	f04f 0c00 	mov.w	ip, #0
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 801867a:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 801867c:	f885 c000 	strb.w	ip, [r5]
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8018680:	7823      	ldrb	r3, [r4, #0]
 8018682:	2b20      	cmp	r3, #32
 8018684:	f47f af15 	bne.w	80184b2 <_fx_directory_entry_read+0x1e6>
 8018688:	1d2b      	adds	r3, r5, #4
 801868a:	1d22      	adds	r2, r4, #4
 801868c:	4295      	cmp	r5, r2
 801868e:	bf38      	it	cc
 8018690:	429c      	cmpcc	r4, r3
 8018692:	f0c0 80e8 	bcc.w	8018866 <_fx_directory_entry_read+0x59a>
 8018696:	ea45 0304 	orr.w	r3, r5, r4
 801869a:	079a      	lsls	r2, r3, #30
 801869c:	f040 80e3 	bne.w	8018866 <_fx_directory_entry_read+0x59a>
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 80186a0:	6823      	ldr	r3, [r4, #0]
 80186a2:	602b      	str	r3, [r5, #0]
 80186a4:	6863      	ldr	r3, [r4, #4]
 80186a6:	606b      	str	r3, [r5, #4]
 80186a8:	7a23      	ldrb	r3, [r4, #8]
                dotflag =  1;
 80186aa:	200b      	movs	r0, #11
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 80186ac:	722b      	strb	r3, [r5, #8]
 80186ae:	7a63      	ldrb	r3, [r4, #9]
 80186b0:	726b      	strb	r3, [r5, #9]
 80186b2:	7aa3      	ldrb	r3, [r4, #10]
 80186b4:	72ab      	strb	r3, [r5, #10]
 80186b6:	e6fc      	b.n	80184b2 <_fx_directory_entry_read+0x1e6>
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80186b8:	5c1b      	ldrb	r3, [r3, r0]
 80186ba:	2be5      	cmp	r3, #229	; 0xe5
 80186bc:	f43f ae88 	beq.w	80183d0 <_fx_directory_entry_read+0x104>
 80186c0:	f003 031f 	and.w	r3, r3, #31
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 80186c4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80186c8:	9309      	str	r3, [sp, #36]	; 0x24
 80186ca:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80186ce:	f1ac 080d 	sub.w	r8, ip, #13
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 80186d2:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 80186d6:	f240 80b4 	bls.w	8018842 <_fx_directory_entry_read+0x576>
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 80186da:	61bb      	str	r3, [r7, #24]
            get_short_name = 1;
 80186dc:	2301      	movs	r3, #1
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80186de:	9508      	str	r5, [sp, #32]
 80186e0:	4698      	mov	r8, r3
            get_short_name = 1;
 80186e2:	930b      	str	r3, [sp, #44]	; 0x2c
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80186e4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80186e8:	910c      	str	r1, [sp, #48]	; 0x30
 80186ea:	f8dd a018 	ldr.w	sl, [sp, #24]
 80186ee:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80186f2:	e024      	b.n	801873e <_fx_directory_entry_read+0x472>
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 80186f4:	3020      	adds	r0, #32
 80186f6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80186f8:	4298      	cmp	r0, r3
 80186fa:	d31a      	bcc.n	8018732 <_fx_directory_entry_read+0x466>
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 80186fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186fe:	2b00      	cmp	r3, #0
 8018700:	f43f aea1 	beq.w	8018446 <_fx_directory_entry_read+0x17a>
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8018704:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8018706:	9a05      	ldr	r2, [sp, #20]
 8018708:	3b01      	subs	r3, #1
 801870a:	4293      	cmp	r3, r2
 801870c:	d957      	bls.n	80187be <_fx_directory_entry_read+0x4f2>
                        relative_sector++;
 801870e:	3201      	adds	r2, #1
                        logical_sector++;
 8018710:	f109 0901 	add.w	r9, r9, #1
                        relative_sector++;
 8018714:	9205      	str	r2, [sp, #20]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8018716:	68b1      	ldr	r1, [r6, #8]
 8018718:	2303      	movs	r3, #3
 801871a:	2001      	movs	r0, #1
 801871c:	464a      	mov	r2, r9
 801871e:	9302      	str	r3, [sp, #8]
 8018720:	2300      	movs	r3, #0
 8018722:	9001      	str	r0, [sp, #4]
 8018724:	4630      	mov	r0, r6
 8018726:	9100      	str	r1, [sp, #0]
 8018728:	f7ff fb2e 	bl	8017d88 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 801872c:	2800      	cmp	r0, #0
 801872e:	f47f ae87 	bne.w	8018440 <_fx_directory_entry_read+0x174>
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8018732:	68b4      	ldr	r4, [r6, #8]
            entry++;
 8018734:	f10a 0a01 	add.w	sl, sl, #1
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8018738:	4404      	add	r4, r0
        } while (card > 0);
 801873a:	2d00      	cmp	r5, #0
 801873c:	d070      	beq.n	8018820 <_fx_directory_entry_read+0x554>
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 801873e:	7825      	ldrb	r5, [r4, #0]
 8018740:	f005 051f 	and.w	r5, r5, #31
 8018744:	3d01      	subs	r5, #1
            if (get_short_name == 0)
 8018746:	f1b8 0f00 	cmp.w	r8, #0
 801874a:	d1d3      	bne.n	80186f4 <_fx_directory_entry_read+0x428>
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 801874c:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8018750:	4641      	mov	r1, r8
 8018752:	2301      	movs	r3, #1
 8018754:	9006      	str	r0, [sp, #24]
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8018756:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
                    if ((i == 11) || (i == 26))
 801875a:	2b0b      	cmp	r3, #11
 801875c:	d022      	beq.n	80187a4 <_fx_directory_entry_read+0x4d8>
 801875e:	2b1a      	cmp	r3, #26
 8018760:	d020      	beq.n	80187a4 <_fx_directory_entry_read+0x4d8>
                    if (i == 13)
 8018762:	2b0d      	cmp	r3, #13
 8018764:	d023      	beq.n	80187ae <_fx_directory_entry_read+0x4e2>
                    if (read_ptr[i + 1])
 8018766:	18e2      	adds	r2, r4, r3
 8018768:	f892 c001 	ldrb.w	ip, [r2, #1]
 801876c:	f1bc 0f00 	cmp.w	ip, #0
 8018770:	d008      	beq.n	8018784 <_fx_directory_entry_read+0x4b8>
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 8018772:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018776:	d01c      	beq.n	80187b2 <_fx_directory_entry_read+0x4e6>
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8018778:	6838      	ldr	r0, [r7, #0]
                            get_short_name = 1;
 801877a:	f04f 0801 	mov.w	r8, #1
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 801877e:	9008      	str	r0, [sp, #32]
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8018780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018782:	61b8      	str	r0, [r7, #24]
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 8018784:	f892 c000 	ldrb.w	ip, [r2]
 8018788:	f10c 32ff 	add.w	r2, ip, #4294967295
 801878c:	b2d2      	uxtb	r2, r2
 801878e:	2afd      	cmp	r2, #253	; 0xfd
 8018790:	d808      	bhi.n	80187a4 <_fx_directory_entry_read+0x4d8>
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8018792:	eb0e 0201 	add.w	r2, lr, r1
 8018796:	f8d7 b000 	ldr.w	fp, [r7]
 801879a:	2afe      	cmp	r2, #254	; 0xfe
 801879c:	d82d      	bhi.n	80187fa <_fx_directory_entry_read+0x52e>
                    j++;
 801879e:	3101      	adds	r1, #1
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 80187a0:	f80b c002 	strb.w	ip, [fp, r2]
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 80187a4:	3302      	adds	r3, #2
 80187a6:	2b1f      	cmp	r3, #31
 80187a8:	d9d7      	bls.n	801875a <_fx_directory_entry_read+0x48e>
 80187aa:	9806      	ldr	r0, [sp, #24]
 80187ac:	e7a2      	b.n	80186f4 <_fx_directory_entry_read+0x428>
 80187ae:	230e      	movs	r3, #14
 80187b0:	e7d3      	b.n	801875a <_fx_directory_entry_read+0x48e>
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 80187b2:	f892 c000 	ldrb.w	ip, [r2]
 80187b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80187ba:	d1dd      	bne.n	8018778 <_fx_directory_entry_read+0x4ac>
 80187bc:	e7f2      	b.n	80187a4 <_fx_directory_entry_read+0x4d8>
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80187be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80187c0:	aa0f      	add	r2, sp, #60	; 0x3c
 80187c2:	4630      	mov	r0, r6
 80187c4:	f7fe ff7a 	bl	80176bc <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 80187c8:	9005      	str	r0, [sp, #20]
 80187ca:	2800      	cmp	r0, #0
 80187cc:	f47f ae38 	bne.w	8018440 <_fx_directory_entry_read+0x174>
                        cluster =  next_cluster;
 80187d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80187d2:	2a01      	cmp	r2, #1
                        cluster =  next_cluster;
 80187d4:	920c      	str	r2, [sp, #48]	; 0x30
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80187d6:	f67f ae42 	bls.w	801845e <_fx_directory_entry_read+0x192>
 80187da:	f242 43a8 	movw	r3, #9384	; 0x24a8
 80187de:	58f3      	ldr	r3, [r6, r3]
 80187e0:	4293      	cmp	r3, r2
 80187e2:	f67f ae3c 	bls.w	801845e <_fx_directory_entry_read+0x192>
                        relative_cluster++;
 80187e6:	990d      	ldr	r1, [sp, #52]	; 0x34
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80187e8:	f1a2 0902 	sub.w	r9, r2, #2
                        relative_cluster++;
 80187ec:	3101      	adds	r1, #1
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80187ee:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
                        relative_cluster++;
 80187f2:	910d      	str	r1, [sp, #52]	; 0x34
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80187f4:	fb02 3909 	mla	r9, r2, r9, r3
 80187f8:	e78d      	b.n	8018716 <_fx_directory_entry_read+0x44a>
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 80187fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
                        get_short_name =  1;
 80187fc:	f04f 0801 	mov.w	r8, #1
 8018800:	9806      	ldr	r0, [sp, #24]
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8018802:	61bb      	str	r3, [r7, #24]
                        break;
 8018804:	f8cd b020 	str.w	fp, [sp, #32]
 8018808:	e774      	b.n	80186f4 <_fx_directory_entry_read+0x428>
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 801880a:	f104 0014 	add.w	r0, r4, #20
 801880e:	9105      	str	r1, [sp, #20]
 8018810:	f001 f98e 	bl	8019b30 <_fx_utility_16_unsigned_read>
 8018814:	9905      	ldr	r1, [sp, #20]
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8018816:	0400      	lsls	r0, r0, #16
 8018818:	6378      	str	r0, [r7, #52]	; 0x34
 801881a:	e6d2      	b.n	80185c2 <_fx_directory_entry_read+0x2f6>
    return(FX_SUCCESS);
 801881c:	4658      	mov	r0, fp
 801881e:	e60f      	b.n	8018440 <_fx_directory_entry_read+0x174>
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8018820:	2301      	movs	r3, #1
 8018822:	f8cd a018 	str.w	sl, [sp, #24]
 8018826:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801882a:	617b      	str	r3, [r7, #20]
    if (get_short_name == 1)
 801882c:	4643      	mov	r3, r8
 801882e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018830:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8018834:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018838:	9d08      	ldr	r5, [sp, #32]
 801883a:	2b00      	cmp	r3, #0
 801883c:	f43f adcc 	beq.w	80183d8 <_fx_directory_entry_read+0x10c>
 8018840:	e5c6      	b.n	80183d0 <_fx_directory_entry_read+0x104>
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8018842:	1d3b      	adds	r3, r7, #4
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8018844:	f10c 0c01 	add.w	ip, ip, #1
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8018848:	4672      	mov	r2, lr
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 801884a:	9308      	str	r3, [sp, #32]
 801884c:	4643      	mov	r3, r8
 801884e:	e002      	b.n	8018856 <_fx_directory_entry_read+0x58a>
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 8018850:	2bff      	cmp	r3, #255	; 0xff
 8018852:	d804      	bhi.n	801885e <_fx_directory_entry_read+0x592>
 8018854:	683d      	ldr	r5, [r7, #0]
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8018856:	54ea      	strb	r2, [r5, r3]
                i++;
 8018858:	3301      	adds	r3, #1
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 801885a:	459c      	cmp	ip, r3
 801885c:	d8f8      	bhi.n	8018850 <_fx_directory_entry_read+0x584>
    get_short_name =  0;
 801885e:	2300      	movs	r3, #0
 8018860:	930b      	str	r3, [sp, #44]	; 0x2c
 8018862:	4698      	mov	r8, r3
 8018864:	e73e      	b.n	80186e4 <_fx_directory_entry_read+0x418>
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8018866:	2320      	movs	r3, #32
 8018868:	702b      	strb	r3, [r5, #0]
 801886a:	7863      	ldrb	r3, [r4, #1]
 801886c:	706b      	strb	r3, [r5, #1]
 801886e:	78a3      	ldrb	r3, [r4, #2]
 8018870:	70ab      	strb	r3, [r5, #2]
 8018872:	78e3      	ldrb	r3, [r4, #3]
 8018874:	70eb      	strb	r3, [r5, #3]
 8018876:	7923      	ldrb	r3, [r4, #4]
 8018878:	712b      	strb	r3, [r5, #4]
 801887a:	7963      	ldrb	r3, [r4, #5]
 801887c:	716b      	strb	r3, [r5, #5]
 801887e:	79a3      	ldrb	r3, [r4, #6]
 8018880:	71ab      	strb	r3, [r5, #6]
 8018882:	79e3      	ldrb	r3, [r4, #7]
 8018884:	71eb      	strb	r3, [r5, #7]
 8018886:	e70f      	b.n	80186a8 <_fx_directory_entry_read+0x3dc>

08018888 <_fx_directory_entry_write>:


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8018888:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 801888c:	680a      	ldr	r2, [r1, #0]
    media_ptr -> fx_media_directory_entry_writes++;
 801888e:	3301      	adds	r3, #1
{
 8018890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_directory_entry_writes++;
 8018894:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
{
 8018898:	b095      	sub	sp, #84	; 0x54
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 801889a:	7813      	ldrb	r3, [r2, #0]
{
 801889c:	4606      	mov	r6, r0
 801889e:	460d      	mov	r5, r1
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 80188a0:	2be5      	cmp	r3, #229	; 0xe5
 80188a2:	f000 848c 	beq.w	80191be <_fx_directory_entry_write+0x936>
 80188a6:	2301      	movs	r3, #1
 80188a8:	9307      	str	r3, [sp, #28]

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80188aa:	6d33      	ldr	r3, [r6, #80]	; 0x50
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 80188ac:	f8d5 b048 	ldr.w	fp, [r5, #72]	; 0x48
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 80188b0:	e9d5 8910 	ldrd	r8, r9, [r5, #64]	; 0x40
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80188b4:	4543      	cmp	r3, r8
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 80188b6:	f8cd 8018 	str.w	r8, [sp, #24]
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80188ba:	f200 8388 	bhi.w	8018fce <_fx_directory_entry_write+0x746>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 80188be:	eba8 0303 	sub.w	r3, r8, r3
 80188c2:	6d71      	ldr	r1, [r6, #84]	; 0x54
 80188c4:	fbb3 f2f1 	udiv	r2, r3, r1
 80188c8:	fb01 3312 	mls	r3, r1, r2, r3
 80188cc:	9309      	str	r3, [sp, #36]	; 0x24
 80188ce:	1c93      	adds	r3, r2, #2
 80188d0:	930b      	str	r3, [sp, #44]	; 0x2c
        cluster =  0;
        relative_sector =  0;
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 80188d2:	68b4      	ldr	r4, [r6, #8]
 80188d4:	2101      	movs	r1, #1
 80188d6:	f04f 0a03 	mov.w	sl, #3
 80188da:	4642      	mov	r2, r8
 80188dc:	4630      	mov	r0, r6
 80188de:	464b      	mov	r3, r9
 80188e0:	f8cd a008 	str.w	sl, [sp, #8]
 80188e4:	9101      	str	r1, [sp, #4]
 80188e6:	9400      	str	r4, [sp, #0]
 80188e8:	f7ff fa4e 	bl	8017d88 <_fx_utility_logical_sector_read>
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 80188ec:	4602      	mov	r2, r0
 80188ee:	900a      	str	r0, [sp, #40]	; 0x28
 80188f0:	2800      	cmp	r0, #0
 80188f2:	f040 8368 	bne.w	8018fc6 <_fx_directory_entry_write+0x73e>
        /* Return the error status.  */
        return(status);
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80188f6:	68b3      	ldr	r3, [r6, #8]
 80188f8:	4640      	mov	r0, r8
 80188fa:	2100      	movs	r1, #0
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 80188fc:	6cac      	ldr	r4, [r5, #72]	; 0x48
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 80188fe:	696f      	ldr	r7, [r5, #20]
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8018900:	9308      	str	r3, [sp, #32]
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8018902:	441c      	add	r4, r3
 8018904:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8018908:	2f00      	cmp	r7, #0
 801890a:	f000 8364 	beq.w	8018fd6 <_fx_directory_entry_write+0x74e>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 801890e:	682b      	ldr	r3, [r5, #0]
 8018910:	f893 9000 	ldrb.w	r9, [r3]
 8018914:	f1b9 0f00 	cmp.w	r9, #0
 8018918:	f000 85a5 	beq.w	8019466 <_fx_directory_entry_write+0xbde>
 801891c:	9205      	str	r2, [sp, #20]
 801891e:	4611      	mov	r1, r2
 8018920:	920e      	str	r2, [sp, #56]	; 0x38
 8018922:	4690      	mov	r8, r2
 8018924:	1c5f      	adds	r7, r3, #1
 8018926:	464a      	mov	r2, r9
 8018928:	e00e      	b.n	8018948 <_fx_directory_entry_write+0xc0>
                dotpos   = len + 1;
                continue;
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 801892a:	f1b8 0f07 	cmp.w	r8, #7
 801892e:	d807      	bhi.n	8018940 <_fx_directory_entry_write+0xb8>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8018930:	a914      	add	r1, sp, #80	; 0x50
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8018932:	2a20      	cmp	r2, #32
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8018934:	4441      	add	r1, r8
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8018936:	d003      	beq.n	8018940 <_fx_directory_entry_write+0xb8>
                i++;
 8018938:	f108 0801 	add.w	r8, r8, #1
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 801893c:	f801 2c0c 	strb.w	r2, [r1, #-12]
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8018940:	f817 2b01 	ldrb.w	r2, [r7], #1
 8018944:	4601      	mov	r1, r0
 8018946:	b16a      	cbz	r2, 8018964 <_fx_directory_entry_write+0xdc>
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 8018948:	2a2e      	cmp	r2, #46	; 0x2e
 801894a:	f101 0001 	add.w	r0, r1, #1
 801894e:	d1ec      	bne.n	801892a <_fx_directory_entry_write+0xa2>
                if (len == 0)
 8018950:	2900      	cmp	r1, #0
 8018952:	d0f5      	beq.n	8018940 <_fx_directory_entry_write+0xb8>
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8018954:	f817 2b01 	ldrb.w	r2, [r7], #1
 8018958:	4601      	mov	r1, r0
 801895a:	9005      	str	r0, [sp, #20]
 801895c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8018960:	2a00      	cmp	r2, #0
 8018962:	d1f1      	bne.n	8018948 <_fx_directory_entry_write+0xc0>
 8018964:	4abc      	ldr	r2, [pc, #752]	; (8018c58 <_fx_directory_entry_write+0x3d0>)
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8018966:	f1b8 0f0a 	cmp.w	r8, #10
 801896a:	fba2 2a00 	umull	r2, sl, r2, r0
 801896e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8018972:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8018976:	4657      	mov	r7, sl
 8018978:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801897c:	eba0 0a02 	sub.w	sl, r0, r2
 8018980:	d80f      	bhi.n	80189a2 <_fx_directory_entry_write+0x11a>
        {
            shortname[j] =  ' ';
 8018982:	f108 0001 	add.w	r0, r8, #1
 8018986:	930f      	str	r3, [sp, #60]	; 0x3c
 8018988:	ab11      	add	r3, sp, #68	; 0x44
 801898a:	f1c8 020b 	rsb	r2, r8, #11
 801898e:	280b      	cmp	r0, #11
 8018990:	f04f 0120 	mov.w	r1, #32
 8018994:	eb03 0008 	add.w	r0, r3, r8
 8018998:	bf88      	it	hi
 801899a:	2201      	movhi	r2, #1
 801899c:	f005 fdfd 	bl	801e59a <memset>
 80189a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 80189a2:	9905      	ldr	r1, [sp, #20]
 80189a4:	b331      	cbz	r1, 80189f4 <_fx_directory_entry_write+0x16c>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 80189a6:	5c5a      	ldrb	r2, [r3, r1]
 80189a8:	b19a      	cbz	r2, 80189d2 <_fx_directory_entry_write+0x14a>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 80189aa:	3101      	adds	r1, #1
 80189ac:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 80189b0:	5c58      	ldrb	r0, [r3, r1]
 80189b2:	2800      	cmp	r0, #0
 80189b4:	f000 85dc 	beq.w	8019570 <_fx_directory_entry_write+0xce8>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 80189b8:	9905      	ldr	r1, [sp, #20]
 80189ba:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
 80189be:	1c8a      	adds	r2, r1, #2
 80189c0:	5c99      	ldrb	r1, [r3, r2]
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 80189c2:	2900      	cmp	r1, #0
 80189c4:	f000 85d1 	beq.w	801956a <_fx_directory_entry_write+0xce2>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 80189c8:	9a05      	ldr	r2, [sp, #20]
 80189ca:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
 80189ce:	3203      	adds	r2, #3
 80189d0:	9205      	str	r2, [sp, #20]
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;

            for (; dotfound <= 7; dotfound++)
 80189d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80189d4:	f893 9000 	ldrb.w	r9, [r3]
 80189d8:	2a07      	cmp	r2, #7
 80189da:	f200 8552 	bhi.w	8019482 <_fx_directory_entry_write+0xbfa>
 80189de:	930e      	str	r3, [sp, #56]	; 0x38
 80189e0:	a811      	add	r0, sp, #68	; 0x44
 80189e2:	4613      	mov	r3, r2
 80189e4:	2120      	movs	r1, #32
 80189e6:	f1c2 0208 	rsb	r2, r2, #8
 80189ea:	4418      	add	r0, r3
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 80189ec:	4698      	mov	r8, r3
 80189ee:	f005 fdd4 	bl	801e59a <memset>
 80189f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 80189f4:	f1ba 0f00 	cmp.w	sl, #0
 80189f8:	f040 846b 	bne.w	80192d2 <_fx_directory_entry_write+0xa4a>
        /* Default the name match to true.  */
        match =  TX_TRUE;

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 80189fc:	2100      	movs	r1, #0
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 80189fe:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
        k =  0;
 8018a02:	460a      	mov	r2, r1
            if (shortname[k] == ' ')
 8018a04:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 8018a08:	4494      	add	ip, r2
 8018a0a:	f81c cc0c 	ldrb.w	ip, [ip, #-12]
 8018a0e:	f1bc 0f20 	cmp.w	ip, #32
 8018a12:	f040 853c 	bne.w	801948e <_fx_directory_entry_write+0xc06>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 8018a16:	f1b9 0f00 	cmp.w	r9, #0
 8018a1a:	f000 8548 	beq.w	80194ae <_fx_directory_entry_write+0xc26>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8018a1e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8018a22:	f000 84fd 	beq.w	8019420 <_fx_directory_entry_write+0xb98>
            l++;
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 8018a26:	9a05      	ldr	r2, [sp, #20]
 8018a28:	2a00      	cmp	r2, #0
 8018a2a:	f040 8457 	bne.w	80192dc <_fx_directory_entry_write+0xa54>
 8018a2e:	f1b8 0f03 	cmp.w	r8, #3
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 8018a32:	f8d5 904c 	ldr.w	r9, [r5, #76]	; 0x4c
            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
            {
                i = 3;
            }
            shortname[i++] = '~';
 8018a36:	aa14      	add	r2, sp, #80	; 0x50
 8018a38:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8018a3c:	bf28      	it	cs
 8018a3e:	f04f 0803 	movcs.w	r8, #3
            entry = entry % 0x10000;
 8018a42:	fa1f f389 	uxth.w	r3, r9
                {
                     temp = ((entry >> 4) & 0xf);
                }
                else
                {
                     temp = ((entry) & 0xf);
 8018a46:	f009 090f 	and.w	r9, r9, #15
            shortname[i++] = '~';
 8018a4a:	eb02 0108 	add.w	r1, r2, r8
                    temp =  ((entry >> 12) & 0xf);
 8018a4e:	0b18      	lsrs	r0, r3, #12
                     temp = ((entry >> 4) & 0xf);
 8018a50:	f3c3 1c03 	ubfx	ip, r3, #4, #4
            shortname[i++] = '~';
 8018a54:	f108 0201 	add.w	r2, r8, #1
 8018a58:	f801 ec0c 	strb.w	lr, [r1, #-12]
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 8018a5c:	2809      	cmp	r0, #9
 8018a5e:	fa5f fe80 	uxtb.w	lr, r0
                     temp = ((entry >> 8) & 0xf);
 8018a62:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8018a66:	a814      	add	r0, sp, #80	; 0x50
 8018a68:	f108 0102 	add.w	r1, r8, #2
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 8018a6c:	bf8c      	ite	hi
 8018a6e:	f10e 0e37 	addhi.w	lr, lr, #55	; 0x37
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 8018a72:	f10e 0e30 	addls.w	lr, lr, #48	; 0x30
 8018a76:	4402      	add	r2, r0
                if (temp > 9)
 8018a78:	2b09      	cmp	r3, #9
 8018a7a:	b2d8      	uxtb	r0, r3
 8018a7c:	ab14      	add	r3, sp, #80	; 0x50
 8018a7e:	f802 ec0c 	strb.w	lr, [r2, #-12]
 8018a82:	f108 0203 	add.w	r2, r8, #3
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 8018a86:	bf8c      	ite	hi
 8018a88:	3037      	addhi	r0, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 8018a8a:	3030      	addls	r0, #48	; 0x30
 8018a8c:	4419      	add	r1, r3
                if (temp > 9)
 8018a8e:	f1bc 0f09 	cmp.w	ip, #9
 8018a92:	fa5f f38c 	uxtb.w	r3, ip
 8018a96:	f108 0804 	add.w	r8, r8, #4
 8018a9a:	f801 0c0c 	strb.w	r0, [r1, #-12]
 8018a9e:	a914      	add	r1, sp, #80	; 0x50
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 8018aa0:	bf8c      	ite	hi
 8018aa2:	3337      	addhi	r3, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 8018aa4:	3330      	addls	r3, #48	; 0x30
 8018aa6:	440a      	add	r2, r1
                if (temp > 9)
 8018aa8:	f1b9 0f09 	cmp.w	r9, #9
 8018aac:	f802 3c0c 	strb.w	r3, [r2, #-12]
 8018ab0:	fa5f f389 	uxtb.w	r3, r9
 8018ab4:	aa14      	add	r2, sp, #80	; 0x50
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 8018ab6:	bf8c      	ite	hi
 8018ab8:	3337      	addhi	r3, #55	; 0x37
                    shortname[i++] =  (CHAR)('0' + temp);
 8018aba:	3330      	addls	r3, #48	; 0x30
 8018abc:	4490      	add	r8, r2
 8018abe:	f808 3c0c 	strb.w	r3, [r8, #-12]
 8018ac2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
        /* Set end of short string to NULL.   */
        shortname[11] = 0;

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8018ac6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        shortname[11] = 0;
 8018aca:	2200      	movs	r2, #0
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8018acc:	2be5      	cmp	r3, #229	; 0xe5
        shortname[11] = 0;
 8018ace:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8018ad2:	f040 837d 	bne.w	80191d0 <_fx_directory_entry_write+0x948>
 8018ad6:	9a07      	ldr	r2, [sp, #28]
 8018ad8:	2a00      	cmp	r2, #0
 8018ada:	f000 8379 	beq.w	80191d0 <_fx_directory_entry_write+0x948>
        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 8018ade:	238f      	movs	r3, #143	; 0x8f
 8018ae0:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 8018ae4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018ae8:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8018aec:	2b19      	cmp	r3, #25
 8018aee:	d801      	bhi.n	8018af4 <_fx_directory_entry_write+0x26c>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018af0:	3a20      	subs	r2, #32
 8018af2:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 8018af4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
            shortname[i] =  alpha;
 8018af8:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018afc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018b00:	2a19      	cmp	r2, #25
 8018b02:	d801      	bhi.n	8018b08 <_fx_directory_entry_write+0x280>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018b04:	3b20      	subs	r3, #32
 8018b06:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8018b08:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
            shortname[i] =  alpha;
 8018b0c:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b10:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8018b14:	2b19      	cmp	r3, #25
 8018b16:	d801      	bhi.n	8018b1c <_fx_directory_entry_write+0x294>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018b18:	3a20      	subs	r2, #32
 8018b1a:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 8018b1c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
            shortname[i] =  alpha;
 8018b20:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b24:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018b28:	2a19      	cmp	r2, #25
 8018b2a:	d801      	bhi.n	8018b30 <_fx_directory_entry_write+0x2a8>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018b2c:	3b20      	subs	r3, #32
 8018b2e:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8018b30:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
            shortname[i] =  alpha;
 8018b34:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b38:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8018b3c:	2b19      	cmp	r3, #25
 8018b3e:	d801      	bhi.n	8018b44 <_fx_directory_entry_write+0x2bc>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018b40:	3a20      	subs	r2, #32
 8018b42:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 8018b44:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
            shortname[i] =  alpha;
 8018b48:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b4c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018b50:	2a19      	cmp	r2, #25
 8018b52:	d801      	bhi.n	8018b58 <_fx_directory_entry_write+0x2d0>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018b54:	3b20      	subs	r3, #32
 8018b56:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8018b58:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
            shortname[i] =  alpha;
 8018b5c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b60:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8018b64:	2b19      	cmp	r3, #25
 8018b66:	d801      	bhi.n	8018b6c <_fx_directory_entry_write+0x2e4>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018b68:	3a20      	subs	r2, #32
 8018b6a:	b2d2      	uxtb	r2, r2
            shortname[i] =  alpha;
 8018b6c:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b70:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
            alpha = shortname[i];
 8018b74:	4603      	mov	r3, r0
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b76:	2a19      	cmp	r2, #25
 8018b78:	d802      	bhi.n	8018b80 <_fx_directory_entry_write+0x2f8>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018b7a:	f1a0 0320 	sub.w	r3, r0, #32
 8018b7e:	b2db      	uxtb	r3, r3
            alpha = shortname[i];
 8018b80:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
            shortname[i] =  alpha;
 8018b84:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b88:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8018b8c:	2b19      	cmp	r3, #25
 8018b8e:	d801      	bhi.n	8018b94 <_fx_directory_entry_write+0x30c>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018b90:	3a20      	subs	r2, #32
 8018b92:	b2d2      	uxtb	r2, r2
            alpha = shortname[i];
 8018b94:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            shortname[i] =  alpha;
 8018b98:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
            if ((alpha >= 'a') && (alpha <= 'z'))
 8018b9c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018ba0:	2a19      	cmp	r2, #25
 8018ba2:	d801      	bhi.n	8018ba8 <_fx_directory_entry_write+0x320>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018ba4:	3b20      	subs	r3, #32
 8018ba6:	b2db      	uxtb	r3, r3
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8018ba8:	792a      	ldrb	r2, [r5, #4]
            shortname[i] =  alpha;
 8018baa:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8018bae:	2a00      	cmp	r2, #0
 8018bb0:	f000 80c7 	beq.w	8018d42 <_fx_directory_entry_write+0x4ba>
 8018bb4:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8018bb8:	2a2e      	cmp	r2, #46	; 0x2e
 8018bba:	9312      	str	r3, [sp, #72]	; 0x48
 8018bbc:	9311      	str	r3, [sp, #68]	; 0x44
 8018bbe:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8018bc2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 8018bc6:	f000 83fd 	beq.w	80193c4 <_fx_directory_entry_write+0xb3c>
 8018bca:	796b      	ldrb	r3, [r5, #5]

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];

                /* Copy file name character.  */
                shortname[j] =  alpha;
 8018bcc:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	f000 8475 	beq.w	80194c0 <_fx_directory_entry_write+0xc38>
 8018bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8018bd8:	f000 8472 	beq.w	80194c0 <_fx_directory_entry_write+0xc38>
                shortname[j] =  alpha;
 8018bdc:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8018be0:	79ab      	ldrb	r3, [r5, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	f000 8469 	beq.w	80194ba <_fx_directory_entry_write+0xc32>
 8018be8:	2b2e      	cmp	r3, #46	; 0x2e
 8018bea:	f000 8466 	beq.w	80194ba <_fx_directory_entry_write+0xc32>
                shortname[j] =  alpha;
 8018bee:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8018bf2:	79eb      	ldrb	r3, [r5, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	f000 846a 	beq.w	80194ce <_fx_directory_entry_write+0xc46>
 8018bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8018bfc:	f000 8467 	beq.w	80194ce <_fx_directory_entry_write+0xc46>
                shortname[j] =  alpha;
 8018c00:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8018c04:	7a2b      	ldrb	r3, [r5, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	f000 8484 	beq.w	8019514 <_fx_directory_entry_write+0xc8c>
 8018c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8018c0e:	f000 8481 	beq.w	8019514 <_fx_directory_entry_write+0xc8c>
                shortname[j] =  alpha;
 8018c12:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8018c16:	7a6b      	ldrb	r3, [r5, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	f000 8478 	beq.w	801950e <_fx_directory_entry_write+0xc86>
 8018c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8018c20:	f000 8475 	beq.w	801950e <_fx_directory_entry_write+0xc86>
                shortname[j] =  alpha;
 8018c24:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8018c28:	7aab      	ldrb	r3, [r5, #10]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	f000 846c 	beq.w	8019508 <_fx_directory_entry_write+0xc80>
 8018c30:	2b2e      	cmp	r3, #46	; 0x2e
 8018c32:	f000 8469 	beq.w	8019508 <_fx_directory_entry_write+0xc80>
                shortname[j] =  alpha;
 8018c36:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8018c3a:	7aeb      	ldrb	r3, [r5, #11]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8018c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8018c3e:	f000 8460 	beq.w	8019502 <_fx_directory_entry_write+0xc7a>
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	f000 845d 	beq.w	8019502 <_fx_directory_entry_write+0xc7a>
                shortname[j] =  alpha;
 8018c48:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 8018c4c:	2208      	movs	r2, #8
 8018c4e:	7b2b      	ldrb	r3, [r5, #12]
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	f040 83b8 	bne.w	80193c6 <_fx_directory_entry_write+0xb3e>
 8018c56:	e001      	b.n	8018c5c <_fx_directory_entry_write+0x3d4>
 8018c58:	4ec4ec4f 	.word	0x4ec4ec4f
            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 8018c5c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018c60:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018c64:	2a19      	cmp	r2, #25
 8018c66:	d801      	bhi.n	8018c6c <_fx_directory_entry_write+0x3e4>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018c68:	3b20      	subs	r3, #32
 8018c6a:	b2db      	uxtb	r3, r3
                alpha =  shortname[j];
 8018c6c:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 8018c70:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018c74:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8018c78:	2a19      	cmp	r2, #25
 8018c7a:	d801      	bhi.n	8018c80 <_fx_directory_entry_write+0x3f8>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018c7c:	3920      	subs	r1, #32
 8018c7e:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8018c80:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
                shortname[j] =  alpha;
 8018c84:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018c88:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8018c8c:	2919      	cmp	r1, #25
 8018c8e:	d801      	bhi.n	8018c94 <_fx_directory_entry_write+0x40c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018c90:	3a20      	subs	r2, #32
 8018c92:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 8018c94:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
                shortname[j] =  alpha;
 8018c98:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018c9c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8018ca0:	2a19      	cmp	r2, #25
 8018ca2:	d801      	bhi.n	8018ca8 <_fx_directory_entry_write+0x420>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018ca4:	3920      	subs	r1, #32
 8018ca6:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8018ca8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
                shortname[j] =  alpha;
 8018cac:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018cb0:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8018cb4:	2919      	cmp	r1, #25
 8018cb6:	d801      	bhi.n	8018cbc <_fx_directory_entry_write+0x434>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018cb8:	3a20      	subs	r2, #32
 8018cba:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 8018cbc:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
                shortname[j] =  alpha;
 8018cc0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018cc4:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8018cc8:	2a19      	cmp	r2, #25
 8018cca:	d801      	bhi.n	8018cd0 <_fx_directory_entry_write+0x448>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018ccc:	3920      	subs	r1, #32
 8018cce:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8018cd0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
                shortname[j] =  alpha;
 8018cd4:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018cd8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8018cdc:	2919      	cmp	r1, #25
 8018cde:	d801      	bhi.n	8018ce4 <_fx_directory_entry_write+0x45c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018ce0:	3a20      	subs	r2, #32
 8018ce2:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 8018ce4:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
                shortname[j] =  alpha;
 8018ce8:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018cec:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8018cf0:	2a19      	cmp	r2, #25
 8018cf2:	d801      	bhi.n	8018cf8 <_fx_directory_entry_write+0x470>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018cf4:	3920      	subs	r1, #32
 8018cf6:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8018cf8:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
                shortname[j] =  alpha;
 8018cfc:	f88d 104b 	strb.w	r1, [sp, #75]	; 0x4b
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018d00:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8018d04:	2919      	cmp	r1, #25
 8018d06:	d801      	bhi.n	8018d0c <_fx_directory_entry_write+0x484>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018d08:	3a20      	subs	r2, #32
 8018d0a:	b2d2      	uxtb	r2, r2
                alpha =  shortname[j];
 8018d0c:	f89d 104d 	ldrb.w	r1, [sp, #77]	; 0x4d
                shortname[j] =  alpha;
 8018d10:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018d14:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 8018d18:	2a19      	cmp	r2, #25
 8018d1a:	d801      	bhi.n	8018d20 <_fx_directory_entry_write+0x498>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018d1c:	3920      	subs	r1, #32
 8018d1e:	b2c9      	uxtb	r1, r1
                alpha =  shortname[j];
 8018d20:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
                shortname[j] =  alpha;
 8018d24:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018d28:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8018d2c:	2919      	cmp	r1, #25
 8018d2e:	d801      	bhi.n	8018d34 <_fx_directory_entry_write+0x4ac>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018d30:	3a20      	subs	r2, #32
 8018d32:	b2d2      	uxtb	r2, r2
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 8018d34:	2be5      	cmp	r3, #229	; 0xe5
                shortname[j] =  alpha;
 8018d36:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 8018d3a:	d102      	bne.n	8018d42 <_fx_directory_entry_write+0x4ba>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 8018d3c:	238f      	movs	r3, #143	; 0x8f
 8018d3e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 8018d42:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 8018d46:	f047 0040 	orr.w	r0, r7, #64	; 0x40
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 8018d4a:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
 8018d4e:	01da      	lsls	r2, r3, #7
 8018d50:	f89d c046 	ldrb.w	ip, [sp, #70]	; 0x46
        work_ptr[0] =  (UCHAR)(0x40 | card);
 8018d54:	7020      	strb	r0, [r4, #0]
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 8018d56:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8018d5a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
 8018d5e:	440a      	add	r2, r1
 8018d60:	b2d1      	uxtb	r1, r2
 8018d62:	01ca      	lsls	r2, r1, #7
 8018d64:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 8018d68:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8018d6c:	fa5c f282 	uxtab	r2, ip, r2
 8018d70:	fa5f fc82 	uxtb.w	ip, r2
 8018d74:	ea4f 12cc 	mov.w	r2, ip, lsl #7
 8018d78:	ea42 025c 	orr.w	r2, r2, ip, lsr #1
 8018d7c:	f89d c049 	ldrb.w	ip, [sp, #73]	; 0x49
 8018d80:	fa50 f282 	uxtab	r2, r0, r2
 8018d84:	b2d0      	uxtb	r0, r2
 8018d86:	01c2      	lsls	r2, r0, #7
 8018d88:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 8018d8c:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
 8018d90:	fa51 f282 	uxtab	r2, r1, r2
 8018d94:	b2d1      	uxtb	r1, r2
 8018d96:	01ca      	lsls	r2, r1, #7
 8018d98:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 8018d9c:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8018da0:	fa5c f282 	uxtab	r2, ip, r2
 8018da4:	fa5f fc82 	uxtb.w	ip, r2
 8018da8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018dac:	ea42 12cc 	orr.w	r2, r2, ip, lsl #7
 8018db0:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 8018db4:	fa50 f282 	uxtab	r2, r0, r2
 8018db8:	b2d0      	uxtb	r0, r2
 8018dba:	0842      	lsrs	r2, r0, #1
 8018dbc:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8018dc0:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
 8018dc4:	fa51 f282 	uxtab	r2, r1, r2
 8018dc8:	b2d1      	uxtb	r1, r2
 8018dca:	084a      	lsrs	r2, r1, #1
 8018dcc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8018dd0:	f89d 104e 	ldrb.w	r1, [sp, #78]	; 0x4e
 8018dd4:	fa5c f282 	uxtab	r2, ip, r2
 8018dd8:	fa5f fc82 	uxtb.w	ip, r2
 8018ddc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018de0:	ea42 12cc 	orr.w	r2, r2, ip, lsl #7
 8018de4:	fa50 f282 	uxtab	r2, r0, r2
 8018de8:	b2d2      	uxtb	r2, r2
 8018dea:	0850      	lsrs	r0, r2, #1
 8018dec:	ea40 12c2 	orr.w	r2, r0, r2, lsl #7
 8018df0:	fa51 f182 	uxtab	r1, r1, r2
 8018df4:	b2ca      	uxtb	r2, r1
 8018df6:	9207      	str	r2, [sp, #28]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 8018df8:	2f00      	cmp	r7, #0
 8018dfa:	f000 8241 	beq.w	8019280 <_fx_directory_entry_write+0x9f8>
 8018dfe:	eb07 0847 	add.w	r8, r7, r7, lsl #1
 8018e02:	9906      	ldr	r1, [sp, #24]
 8018e04:	f04f 0a00 	mov.w	sl, #0
 8018e08:	4622      	mov	r2, r4
 8018e0a:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 8018e0e:	460c      	mov	r4, r1

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
                {

                    work_ptr[i] = eof_marker;
 8018e10:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8018e14:	4658      	mov	r0, fp
 8018e16:	f1a8 080d 	sub.w	r8, r8, #13
 8018e1a:	4651      	mov	r1, sl
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8018e1c:	2be5      	cmp	r3, #229	; 0xe5
            work_ptr[12] = 0;
 8018e1e:	f04f 0a00 	mov.w	sl, #0
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8018e22:	46c6      	mov	lr, r8
 8018e24:	9105      	str	r1, [sp, #20]
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 8018e26:	bf08      	it	eq
 8018e28:	7013      	strbeq	r3, [r2, #0]
            work_ptr[11] = FX_LONG_NAME;
 8018e2a:	f04f 030f 	mov.w	r3, #15
            eof_marker = 0;
 8018e2e:	46d4      	mov	ip, sl
            work_ptr[12] = 0;
 8018e30:	f882 a00c 	strb.w	sl, [r2, #12]
            work_ptr[11] = FX_LONG_NAME;
 8018e34:	72d3      	strb	r3, [r2, #11]
            work_ptr[13] = checksum;
 8018e36:	9b07      	ldr	r3, [sp, #28]
            work_ptr[26] = 0;
 8018e38:	f882 a01a 	strb.w	sl, [r2, #26]
            work_ptr[13] = checksum;
 8018e3c:	7353      	strb	r3, [r2, #13]
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8018e3e:	2301      	movs	r3, #1
            work_ptr[27] = 0;
 8018e40:	f882 a01b 	strb.w	sl, [r2, #27]
                if ((i == 11) || (i == 26))
 8018e44:	2b0b      	cmp	r3, #11
 8018e46:	f103 0a01 	add.w	sl, r3, #1
 8018e4a:	d016      	beq.n	8018e7a <_fx_directory_entry_write+0x5f2>
 8018e4c:	2b1a      	cmp	r3, #26
 8018e4e:	d014      	beq.n	8018e7a <_fx_directory_entry_write+0x5f2>
                if (i == 13)
 8018e50:	2b0d      	cmp	r3, #13
 8018e52:	f000 81d6 	beq.w	8019202 <_fx_directory_entry_write+0x97a>
                if (eof_marker)
 8018e56:	f1bc 0f00 	cmp.w	ip, #0
 8018e5a:	f000 81ca 	beq.w	80191f2 <_fx_directory_entry_write+0x96a>
                    work_ptr[i] = eof_marker;
 8018e5e:	f802 9003 	strb.w	r9, [r2, r3]
                    work_ptr[i + 1] = eof_marker;
 8018e62:	f802 900a 	strb.w	r9, [r2, sl]
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
                    work_ptr[i + 1] = 0;
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 8018e66:	6829      	ldr	r1, [r5, #0]
 8018e68:	f811 a00e 	ldrb.w	sl, [r1, lr]

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
                }

                j++;
 8018e6c:	f10e 0e01 	add.w	lr, lr, #1
                    eof_marker =  (UCHAR)0xff;
 8018e70:	f1ba 0f00 	cmp.w	sl, #0
 8018e74:	bf08      	it	eq
 8018e76:	f04f 0cff 	moveq.w	ip, #255	; 0xff
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8018e7a:	3302      	adds	r3, #2
 8018e7c:	2b1f      	cmp	r3, #31
 8018e7e:	d9e1      	bls.n	8018e44 <_fx_directory_entry_write+0x5bc>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
            byte_offset += FX_DIR_ENTRY_SIZE;
 8018e80:	3020      	adds	r0, #32
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 8018e82:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8018e84:	9905      	ldr	r1, [sp, #20]
 8018e86:	46a2      	mov	sl, r4
 8018e88:	4283      	cmp	r3, r0
 8018e8a:	468b      	mov	fp, r1
 8018e8c:	f240 81bb 	bls.w	8019206 <_fx_directory_entry_write+0x97e>
            work_ptr += FX_DIR_ENTRY_SIZE;
 8018e90:	3220      	adds	r2, #32
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 8018e92:	3f01      	subs	r7, #1
 8018e94:	f1a8 080d 	sub.w	r8, r8, #13
            work_ptr[0] = (UCHAR)card;
 8018e98:	7017      	strb	r7, [r2, #0]
        while (card > 0)
 8018e9a:	2f00      	cmp	r7, #0
 8018e9c:	f000 81ed 	beq.w	801927a <_fx_directory_entry_write+0x9f2>
 8018ea0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8018ea4:	e7ba      	b.n	8018e1c <_fx_directory_entry_write+0x594>
        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8018ea6:	2304      	movs	r3, #4
                work_ptr[j] =  (UCHAR)alpha;
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8018ea8:	b1f9      	cbz	r1, 8018eea <_fx_directory_entry_write+0x662>
            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8018eaa:	441a      	add	r2, r3
 8018eac:	7852      	ldrb	r2, [r2, #1]
 8018eae:	b1e2      	cbz	r2, 8018eea <_fx_directory_entry_write+0x662>

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018eb0:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8018eb4:	2919      	cmp	r1, #25
 8018eb6:	d801      	bhi.n	8018ebc <_fx_directory_entry_write+0x634>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018eb8:	3a20      	subs	r2, #32
 8018eba:	b2d2      	uxtb	r2, r2
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 8018ebc:	7222      	strb	r2, [r4, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8018ebe:	682a      	ldr	r2, [r5, #0]
 8018ec0:	441a      	add	r2, r3
 8018ec2:	7892      	ldrb	r2, [r2, #2]
 8018ec4:	b18a      	cbz	r2, 8018eea <_fx_directory_entry_write+0x662>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018ec6:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8018eca:	2919      	cmp	r1, #25
 8018ecc:	d801      	bhi.n	8018ed2 <_fx_directory_entry_write+0x64a>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018ece:	3a20      	subs	r2, #32
 8018ed0:	b2d2      	uxtb	r2, r2
                work_ptr[j] =  (UCHAR)alpha;
 8018ed2:	7262      	strb	r2, [r4, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8018ed4:	682a      	ldr	r2, [r5, #0]
 8018ed6:	4413      	add	r3, r2
 8018ed8:	78db      	ldrb	r3, [r3, #3]
 8018eda:	b133      	cbz	r3, 8018eea <_fx_directory_entry_write+0x662>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8018edc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018ee0:	2a19      	cmp	r2, #25
 8018ee2:	d801      	bhi.n	8018ee8 <_fx_directory_entry_write+0x660>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8018ee4:	3b20      	subs	r3, #32
 8018ee6:	b2db      	uxtb	r3, r3
                work_ptr[j] =  (UCHAR)alpha;
 8018ee8:	72a3      	strb	r3, [r4, #10]
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8018eea:	340b      	adds	r4, #11
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8018eec:	7f2b      	ldrb	r3, [r5, #28]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 8018eee:	1ce0      	adds	r0, r4, #3
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8018ef0:	7023      	strb	r3, [r4, #0]
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 8018ef2:	7f6b      	ldrb	r3, [r5, #29]
 8018ef4:	7063      	strb	r3, [r4, #1]
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 8018ef6:	7fab      	ldrb	r3, [r5, #30]
 8018ef8:	70a3      	strb	r3, [r4, #2]
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 8018efa:	6a29      	ldr	r1, [r5, #32]
 8018efc:	f000 fe1e 	bl	8019b3c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 8018f00:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8018f02:	1d60      	adds	r0, r4, #5
 8018f04:	f000 fe1a 	bl	8019b3c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 8018f08:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8018f0a:	1de0      	adds	r0, r4, #7
 8018f0c:	f000 fe16 	bl	8019b3c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 8018f10:	6e71      	ldr	r1, [r6, #100]	; 0x64
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8018f12:	f104 0009 	add.w	r0, r4, #9
    if (media_ptr -> fx_media_32_bit_FAT)
 8018f16:	2900      	cmp	r1, #0
 8018f18:	f000 81ef 	beq.w	80192fa <_fx_directory_entry_write+0xa72>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
        _fx_utility_16_unsigned_write(work_ptr, temp);
 8018f1c:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 8018f1e:	f000 fe0d 	bl	8019b3c <_fx_utility_16_unsigned_write>

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 8018f22:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8018f24:	f104 000b 	add.w	r0, r4, #11
 8018f28:	f000 fe08 	bl	8019b3c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 8018f2c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8018f2e:	f104 000d 	add.w	r0, r4, #13
 8018f32:	f000 fe03 	bl	8019b3c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 8018f36:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8018f38:	f104 000f 	add.w	r0, r4, #15
 8018f3c:	f000 fdfe 	bl	8019b3c <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 8018f40:	f104 0011 	add.w	r0, r4, #17
 8018f44:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8018f46:	f000 fe09 	bl	8019b5c <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8018f4a:	9b08      	ldr	r3, [sp, #32]
 8018f4c:	2003      	movs	r0, #3
 8018f4e:	2101      	movs	r1, #1
 8018f50:	9300      	str	r3, [sp, #0]
 8018f52:	9002      	str	r0, [sp, #8]
 8018f54:	4630      	mov	r0, r6
 8018f56:	9101      	str	r1, [sp, #4]
 8018f58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018f5c:	f7ff f8c2 	bl	80180e4 <_fx_utility_logical_sector_write>
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8018f60:	900a      	str	r0, [sp, #40]	; 0x28
 8018f62:	2800      	cmp	r0, #0
 8018f64:	d12f      	bne.n	8018fc6 <_fx_directory_entry_write+0x73e>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 8018f66:	f896 33e0 	ldrb.w	r3, [r6, #992]	; 0x3e0
 8018f6a:	b363      	cbz	r3, 8018fc6 <_fx_directory_entry_write+0x73e>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 8018f6c:	f506 712c 	add.w	r1, r6, #688	; 0x2b0
 8018f70:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 8018f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f78:	428b      	cmp	r3, r1
 8018f7a:	bf08      	it	eq
 8018f7c:	4282      	cmpeq	r2, r0
 8018f7e:	d122      	bne.n	8018fc6 <_fx_directory_entry_write+0x73e>
 8018f80:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8018f82:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8018f86:	429a      	cmp	r2, r3
 8018f88:	d11d      	bne.n	8018fc6 <_fx_directory_entry_write+0x73e>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 8018f8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 8018f8c:	f506 702a 	add.w	r0, r6, #680	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 8018f90:	f506 7124 	add.w	r1, r6, #656	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 8018f94:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 8018f98:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 8018f9c:	e9c0 2300 	strd	r2, r3, [r0]
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 8018fa0:	7f2b      	ldrb	r3, [r5, #28]
 8018fa2:	f886 328c 	strb.w	r3, [r6, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 8018fa6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 8018fa8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 8018faa:	f8c6 229c 	str.w	r2, [r6, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 8018fae:	f8c6 32a0 	str.w	r3, [r6, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 8018fb2:	7f6b      	ldrb	r3, [r5, #29]
 8018fb4:	f886 328d 	strb.w	r3, [r6, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 8018fb8:	7fab      	ldrb	r3, [r5, #30]
 8018fba:	f886 328e 	strb.w	r3, [r6, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 8018fbe:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8018fc2:	e9c1 2300 	strd	r2, r3, [r1]
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
}
 8018fc6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018fc8:	b015      	add	sp, #84	; 0x54
 8018fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cluster =  0;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	930b      	str	r3, [sp, #44]	; 0x2c
        relative_sector =  0;
 8018fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8018fd4:	e47d      	b.n	80188d2 <_fx_directory_entry_write+0x4a>
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 8018fd6:	69ab      	ldr	r3, [r5, #24]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d062      	beq.n	80190a2 <_fx_directory_entry_write+0x81a>
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 8018fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fe0:	7822      	ldrb	r2, [r4, #0]
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d15c      	bne.n	80190a2 <_fx_directory_entry_write+0x81a>
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8018fe8:	f242 49a8 	movw	r9, #9384	; 0x24a8
 8018fec:	9a06      	ldr	r2, [sp, #24]
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8018fee:	46d0      	mov	r8, sl
 8018ff0:	f04f 0a00 	mov.w	sl, #0
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8018ff4:	44b1      	add	r9, r6
 8018ff6:	4658      	mov	r0, fp
 8018ff8:	4651      	mov	r1, sl
 8018ffa:	4623      	mov	r3, r4
 8018ffc:	f8cd 9018 	str.w	r9, [sp, #24]
 8019000:	4693      	mov	fp, r2
 8019002:	f8dd c020 	ldr.w	ip, [sp, #32]
 8019006:	4691      	mov	r9, r2
 8019008:	46aa      	mov	sl, r5
 801900a:	e005      	b.n	8019018 <_fx_directory_entry_write+0x790>
                    work_ptr += FX_DIR_ENTRY_SIZE;
 801900c:	3320      	adds	r3, #32
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 801900e:	3701      	adds	r7, #1
 8019010:	f8da 2018 	ldr.w	r2, [sl, #24]
 8019014:	42ba      	cmp	r2, r7
 8019016:	d93e      	bls.n	8019096 <_fx_directory_entry_write+0x80e>
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8019018:	f8da 2000 	ldr.w	r2, [sl]
                    byte_offset += FX_DIR_ENTRY_SIZE;
 801901c:	3020      	adds	r0, #32
 801901e:	464c      	mov	r4, r9
 8019020:	460d      	mov	r5, r1
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8019022:	7812      	ldrb	r2, [r2, #0]
 8019024:	2ae5      	cmp	r2, #229	; 0xe5
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 8019026:	bf08      	it	eq
 8019028:	701a      	strbeq	r2, [r3, #0]
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 801902a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 801902c:	4282      	cmp	r2, r0
 801902e:	d8ed      	bhi.n	801900c <_fx_directory_entry_write+0x784>
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8019030:	2001      	movs	r0, #1
 8019032:	f8cd 8008 	str.w	r8, [sp, #8]
 8019036:	f8cd c000 	str.w	ip, [sp]
 801903a:	464a      	mov	r2, r9
 801903c:	9001      	str	r0, [sp, #4]
 801903e:	460b      	mov	r3, r1
 8019040:	4630      	mov	r0, r6
 8019042:	f7ff f84f 	bl	80180e4 <_fx_utility_logical_sector_write>
                        if (status != FX_SUCCESS)
 8019046:	2800      	cmp	r0, #0
 8019048:	f040 8160 	bne.w	801930c <_fx_directory_entry_write+0xa84>
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 801904c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801904e:	455b      	cmp	r3, fp
 8019050:	f200 8156 	bhi.w	8019300 <_fx_directory_entry_write+0xa78>
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8019054:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8019056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019058:	3b01      	subs	r3, #1
 801905a:	4293      	cmp	r3, r2
 801905c:	f240 81c7 	bls.w	80193ee <_fx_directory_entry_write+0xb66>
                                relative_sector++;
 8019060:	3201      	adds	r2, #1
                                logical_sector++;
 8019062:	f10b 0b01 	add.w	fp, fp, #1
                                relative_sector++;
 8019066:	9209      	str	r2, [sp, #36]	; 0x24
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8019068:	68b3      	ldr	r3, [r6, #8]
 801906a:	2100      	movs	r1, #0
 801906c:	2001      	movs	r0, #1
 801906e:	f8cd 8008 	str.w	r8, [sp, #8]
 8019072:	9300      	str	r3, [sp, #0]
 8019074:	465a      	mov	r2, fp
 8019076:	9001      	str	r0, [sp, #4]
 8019078:	460b      	mov	r3, r1
 801907a:	4630      	mov	r0, r6
 801907c:	46d9      	mov	r9, fp
 801907e:	465c      	mov	r4, fp
 8019080:	460d      	mov	r5, r1
 8019082:	9105      	str	r1, [sp, #20]
 8019084:	f7fe fe80 	bl	8017d88 <_fx_utility_logical_sector_read>
                        if (status != FX_SUCCESS)
 8019088:	2800      	cmp	r0, #0
 801908a:	f040 813f 	bne.w	801930c <_fx_directory_entry_write+0xa84>
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 801908e:	68b3      	ldr	r3, [r6, #8]
 8019090:	9905      	ldr	r1, [sp, #20]
 8019092:	469c      	mov	ip, r3
 8019094:	e7bb      	b.n	801900e <_fx_directory_entry_write+0x786>
 8019096:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 801909a:	461c      	mov	r4, r3
 801909c:	4655      	mov	r5, sl
 801909e:	f8cd c020 	str.w	ip, [sp, #32]
 80190a2:	220b      	movs	r2, #11
 80190a4:	2120      	movs	r1, #32
 80190a6:	4620      	mov	r0, r4
 80190a8:	f005 fa77 	bl	801e59a <memset>
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 80190ac:	682a      	ldr	r2, [r5, #0]
 80190ae:	7811      	ldrb	r1, [r2, #0]
 80190b0:	292e      	cmp	r1, #46	; 0x2e
 80190b2:	f040 81e1 	bne.w	8019478 <_fx_directory_entry_write+0xbf0>
            work_ptr[i] = '.';
 80190b6:	460f      	mov	r7, r1
 80190b8:	1e60      	subs	r0, r4, #1
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 80190ba:	2300      	movs	r3, #0
            work_ptr[i] = '.';
 80190bc:	f800 7f01 	strb.w	r7, [r0, #1]!
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 80190c0:	3301      	adds	r3, #1
 80190c2:	682a      	ldr	r2, [r5, #0]
 80190c4:	5cd1      	ldrb	r1, [r2, r3]
 80190c6:	292e      	cmp	r1, #46	; 0x2e
 80190c8:	d0f8      	beq.n	80190bc <_fx_directory_entry_write+0x834>
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 80190ca:	2900      	cmp	r1, #0
 80190cc:	f000 8104 	beq.w	80192d8 <_fx_directory_entry_write+0xa50>
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 80190d0:	7811      	ldrb	r1, [r2, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 80190d2:	2900      	cmp	r1, #0
 80190d4:	f000 81f9 	beq.w	80194ca <_fx_directory_entry_write+0xc42>
 80190d8:	292e      	cmp	r1, #46	; 0x2e
 80190da:	f000 81f6 	beq.w	80194ca <_fx_directory_entry_write+0xc42>
                if ((alpha >= 'a') && (alpha <= 'z'))
 80190de:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80190e2:	2b19      	cmp	r3, #25
 80190e4:	d801      	bhi.n	80190ea <_fx_directory_entry_write+0x862>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80190e6:	3920      	subs	r1, #32
 80190e8:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 80190ea:	7021      	strb	r1, [r4, #0]
 80190ec:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 80190ee:	7851      	ldrb	r1, [r2, #1]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 80190f0:	2900      	cmp	r1, #0
 80190f2:	f000 81e8 	beq.w	80194c6 <_fx_directory_entry_write+0xc3e>
 80190f6:	292e      	cmp	r1, #46	; 0x2e
 80190f8:	f000 81e5 	beq.w	80194c6 <_fx_directory_entry_write+0xc3e>
                if ((alpha >= 'a') && (alpha <= 'z'))
 80190fc:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8019100:	2b19      	cmp	r3, #25
 8019102:	d801      	bhi.n	8019108 <_fx_directory_entry_write+0x880>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8019104:	3920      	subs	r1, #32
 8019106:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 8019108:	7061      	strb	r1, [r4, #1]
 801910a:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 801910c:	7891      	ldrb	r1, [r2, #2]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 801910e:	2900      	cmp	r1, #0
 8019110:	f000 81e2 	beq.w	80194d8 <_fx_directory_entry_write+0xc50>
 8019114:	292e      	cmp	r1, #46	; 0x2e
 8019116:	f000 81df 	beq.w	80194d8 <_fx_directory_entry_write+0xc50>
                if ((alpha >= 'a') && (alpha <= 'z'))
 801911a:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 801911e:	2b19      	cmp	r3, #25
 8019120:	d801      	bhi.n	8019126 <_fx_directory_entry_write+0x89e>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8019122:	3920      	subs	r1, #32
 8019124:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 8019126:	70a1      	strb	r1, [r4, #2]
 8019128:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 801912a:	78d1      	ldrb	r1, [r2, #3]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 801912c:	2900      	cmp	r1, #0
 801912e:	f000 81d1 	beq.w	80194d4 <_fx_directory_entry_write+0xc4c>
 8019132:	292e      	cmp	r1, #46	; 0x2e
 8019134:	f000 81ce 	beq.w	80194d4 <_fx_directory_entry_write+0xc4c>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8019138:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 801913c:	2b19      	cmp	r3, #25
 801913e:	f240 8180 	bls.w	8019442 <_fx_directory_entry_write+0xbba>
                work_ptr[j] =  (UCHAR)alpha;
 8019142:	70e1      	strb	r1, [r4, #3]
 8019144:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8019146:	7911      	ldrb	r1, [r2, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8019148:	2900      	cmp	r1, #0
 801914a:	f43f aeac 	beq.w	8018ea6 <_fx_directory_entry_write+0x61e>
 801914e:	292e      	cmp	r1, #46	; 0x2e
 8019150:	f43f aea9 	beq.w	8018ea6 <_fx_directory_entry_write+0x61e>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8019154:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8019158:	2b19      	cmp	r3, #25
 801915a:	f240 8175 	bls.w	8019448 <_fx_directory_entry_write+0xbc0>
                work_ptr[j] =  (UCHAR)alpha;
 801915e:	7121      	strb	r1, [r4, #4]
 8019160:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8019162:	7951      	ldrb	r1, [r2, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8019164:	2900      	cmp	r1, #0
 8019166:	f000 81b9 	beq.w	80194dc <_fx_directory_entry_write+0xc54>
 801916a:	292e      	cmp	r1, #46	; 0x2e
 801916c:	f000 81b6 	beq.w	80194dc <_fx_directory_entry_write+0xc54>
                if ((alpha >= 'a') && (alpha <= 'z'))
 8019170:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8019174:	2b19      	cmp	r3, #25
 8019176:	f240 816a 	bls.w	801944e <_fx_directory_entry_write+0xbc6>
                work_ptr[j] =  (UCHAR)alpha;
 801917a:	7161      	strb	r1, [r4, #5]
 801917c:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 801917e:	7991      	ldrb	r1, [r2, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8019180:	2900      	cmp	r1, #0
 8019182:	f000 81ad 	beq.w	80194e0 <_fx_directory_entry_write+0xc58>
 8019186:	292e      	cmp	r1, #46	; 0x2e
 8019188:	f000 81aa 	beq.w	80194e0 <_fx_directory_entry_write+0xc58>
                if ((alpha >= 'a') && (alpha <= 'z'))
 801918c:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8019190:	2b19      	cmp	r3, #25
 8019192:	f240 815f 	bls.w	8019454 <_fx_directory_entry_write+0xbcc>
                work_ptr[j] =  (UCHAR)alpha;
 8019196:	71a1      	strb	r1, [r4, #6]
 8019198:	682a      	ldr	r2, [r5, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 801919a:	79d1      	ldrb	r1, [r2, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 801919c:	292e      	cmp	r1, #46	; 0x2e
 801919e:	f000 81bc 	beq.w	801951a <_fx_directory_entry_write+0xc92>
 80191a2:	2900      	cmp	r1, #0
 80191a4:	f000 81b9 	beq.w	801951a <_fx_directory_entry_write+0xc92>
                if ((alpha >= 'a') && (alpha <= 'z'))
 80191a8:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80191ac:	2b19      	cmp	r3, #25
 80191ae:	d801      	bhi.n	80191b4 <_fx_directory_entry_write+0x92c>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80191b0:	3920      	subs	r1, #32
 80191b2:	b2c9      	uxtb	r1, r1
                work_ptr[j] =  (UCHAR)alpha;
 80191b4:	71e1      	strb	r1, [r4, #7]
 80191b6:	2308      	movs	r3, #8
 80191b8:	682a      	ldr	r2, [r5, #0]
 80191ba:	7a11      	ldrb	r1, [r2, #8]
 80191bc:	e674      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 80191be:	790b      	ldrb	r3, [r1, #4]
 80191c0:	2be5      	cmp	r3, #229	; 0xe5
 80191c2:	f47f ab70 	bne.w	80188a6 <_fx_directory_entry_write+0x1e>
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 80191c6:	2300      	movs	r3, #0
 80191c8:	710b      	strb	r3, [r1, #4]
 80191ca:	9307      	str	r3, [sp, #28]
 80191cc:	f7ff bb6d 	b.w	80188aa <_fx_directory_entry_write+0x22>
            if ((alpha >= 'a') && (alpha <= 'z'))
 80191d0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80191d4:	2a19      	cmp	r2, #25
 80191d6:	f63f ac83 	bhi.w	8018ae0 <_fx_directory_entry_write+0x258>
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80191da:	3b20      	subs	r3, #32
            alpha = shortname[i];
 80191dc:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80191e0:	b2db      	uxtb	r3, r3
            shortname[i] =  alpha;
 80191e2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            if ((alpha >= 'a') && (alpha <= 'z'))
 80191e6:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 80191ea:	2b19      	cmp	r3, #25
 80191ec:	f63f ac82 	bhi.w	8018af4 <_fx_directory_entry_write+0x26c>
 80191f0:	e47e      	b.n	8018af0 <_fx_directory_entry_write+0x268>
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 80191f2:	6829      	ldr	r1, [r5, #0]
 80191f4:	f811 b00e 	ldrb.w	fp, [r1, lr]
 80191f8:	f802 b003 	strb.w	fp, [r2, r3]
                    work_ptr[i + 1] = 0;
 80191fc:	f802 c00a 	strb.w	ip, [r2, sl]
 8019200:	e631      	b.n	8018e66 <_fx_directory_entry_write+0x5de>
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8019202:	230e      	movs	r3, #14
 8019204:	e61e      	b.n	8018e44 <_fx_directory_entry_write+0x5bc>
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8019206:	9b08      	ldr	r3, [sp, #32]
 8019208:	2001      	movs	r0, #1
 801920a:	f04f 0c03 	mov.w	ip, #3
 801920e:	4622      	mov	r2, r4
 8019210:	9300      	str	r3, [sp, #0]
 8019212:	460b      	mov	r3, r1
 8019214:	9001      	str	r0, [sp, #4]
 8019216:	4630      	mov	r0, r6
 8019218:	f8cd c008 	str.w	ip, [sp, #8]
 801921c:	f7fe ff62 	bl	80180e4 <_fx_utility_logical_sector_write>
                if (status != FX_SUCCESS)
 8019220:	2800      	cmp	r0, #0
 8019222:	d173      	bne.n	801930c <_fx_directory_entry_write+0xa84>
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8019224:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8019226:	9a06      	ldr	r2, [sp, #24]
 8019228:	4293      	cmp	r3, r2
 801922a:	d833      	bhi.n	8019294 <_fx_directory_entry_write+0xa0c>
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 801922c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 801922e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019230:	3b01      	subs	r3, #1
 8019232:	428b      	cmp	r3, r1
 8019234:	d935      	bls.n	80192a2 <_fx_directory_entry_write+0xa1a>
                        logical_sector++;
 8019236:	3201      	adds	r2, #1
                        relative_sector++;
 8019238:	3101      	adds	r1, #1
                        logical_sector++;
 801923a:	9206      	str	r2, [sp, #24]
                        relative_sector++;
 801923c:	9109      	str	r1, [sp, #36]	; 0x24
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801923e:	68b3      	ldr	r3, [r6, #8]
 8019240:	2100      	movs	r1, #0
 8019242:	9c06      	ldr	r4, [sp, #24]
 8019244:	2001      	movs	r0, #1
 8019246:	f04f 0c03 	mov.w	ip, #3
 801924a:	9300      	str	r3, [sp, #0]
 801924c:	9001      	str	r0, [sp, #4]
 801924e:	4622      	mov	r2, r4
 8019250:	460b      	mov	r3, r1
 8019252:	f8cd c008 	str.w	ip, [sp, #8]
 8019256:	4630      	mov	r0, r6
 8019258:	46a2      	mov	sl, r4
 801925a:	468b      	mov	fp, r1
 801925c:	9105      	str	r1, [sp, #20]
 801925e:	f7fe fd93 	bl	8017d88 <_fx_utility_logical_sector_read>
                if (status != FX_SUCCESS)
 8019262:	2800      	cmp	r0, #0
 8019264:	d152      	bne.n	801930c <_fx_directory_entry_write+0xa84>
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 8019266:	68b2      	ldr	r2, [r6, #8]
            card--;
 8019268:	3f01      	subs	r7, #1
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 801926a:	9905      	ldr	r1, [sp, #20]
 801926c:	f1a8 080d 	sub.w	r8, r8, #13
 8019270:	9208      	str	r2, [sp, #32]
            work_ptr[0] = (UCHAR)card;
 8019272:	7017      	strb	r7, [r2, #0]
        while (card > 0)
 8019274:	2f00      	cmp	r7, #0
 8019276:	f47f ae13 	bne.w	8018ea0 <_fx_directory_entry_write+0x618>
 801927a:	4614      	mov	r4, r2
 801927c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 8019280:	792b      	ldrb	r3, [r5, #4]
 8019282:	220b      	movs	r2, #11
 8019284:	2b00      	cmp	r3, #0
 8019286:	d146      	bne.n	8019316 <_fx_directory_entry_write+0xa8e>
 8019288:	a911      	add	r1, sp, #68	; 0x44
 801928a:	4620      	mov	r0, r4
 801928c:	4414      	add	r4, r2
 801928e:	f005 f960 	bl	801e552 <memcpy>
 8019292:	e62b      	b.n	8018eec <_fx_directory_entry_write+0x664>
                    logical_sector++;
 8019294:	3201      	adds	r2, #1
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8019296:	4293      	cmp	r3, r2
                    logical_sector++;
 8019298:	9206      	str	r2, [sp, #24]
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 801929a:	d8d0      	bhi.n	801923e <_fx_directory_entry_write+0x9b6>
                            return(FX_FILE_CORRUPT);
 801929c:	2308      	movs	r3, #8
 801929e:	930a      	str	r3, [sp, #40]	; 0x28
 80192a0:	e691      	b.n	8018fc6 <_fx_directory_entry_write+0x73e>
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80192a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80192a4:	aa10      	add	r2, sp, #64	; 0x40
 80192a6:	4630      	mov	r0, r6
 80192a8:	f7fe fa08 	bl	80176bc <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 80192ac:	bb70      	cbnz	r0, 801930c <_fx_directory_entry_write+0xa84>
                        cluster =  next_cluster;
 80192ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80192b0:	2b01      	cmp	r3, #1
                        cluster =  next_cluster;
 80192b2:	930b      	str	r3, [sp, #44]	; 0x2c
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80192b4:	d9f2      	bls.n	801929c <_fx_directory_entry_write+0xa14>
 80192b6:	461a      	mov	r2, r3
 80192b8:	f242 43a8 	movw	r3, #9384	; 0x24a8
 80192bc:	58f3      	ldr	r3, [r6, r3]
 80192be:	4293      	cmp	r3, r2
 80192c0:	d9ec      	bls.n	801929c <_fx_directory_entry_write+0xa14>
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80192c2:	1e93      	subs	r3, r2, #2
                        relative_sector =  0;
 80192c4:	9009      	str	r0, [sp, #36]	; 0x24
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80192c6:	e9d6 2114 	ldrd	r2, r1, [r6, #80]	; 0x50
 80192ca:	fb01 2303 	mla	r3, r1, r3, r2
 80192ce:	9306      	str	r3, [sp, #24]
 80192d0:	e7b5      	b.n	801923e <_fx_directory_entry_write+0x9b6>
            card =  len / 13 + 1;
 80192d2:	3701      	adds	r7, #1
 80192d4:	f7ff bb92 	b.w	80189fc <_fx_directory_entry_write+0x174>
 80192d8:	5cd1      	ldrb	r1, [r2, r3]
 80192da:	e5e5      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
        if ((dotpos) && (shortname[8] == ' '))
 80192dc:	f04f 0c01 	mov.w	ip, #1
 80192e0:	2820      	cmp	r0, #32
 80192e2:	f43f aba4 	beq.w	8018a2e <_fx_directory_entry_write+0x1a6>
 80192e6:	5c5b      	ldrb	r3, [r3, r1]
        if (match == FX_FALSE)
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	f47f aba0 	bne.w	8018a2e <_fx_directory_entry_write+0x1a6>
 80192ee:	f1bc 0f00 	cmp.w	ip, #0
 80192f2:	f43f abe8 	beq.w	8018ac6 <_fx_directory_entry_write+0x23e>
 80192f6:	f7ff bb9a 	b.w	8018a2e <_fx_directory_entry_write+0x1a6>
        _fx_utility_16_unsigned_write(work_ptr, 0);
 80192fa:	f000 fc1f 	bl	8019b3c <_fx_utility_16_unsigned_write>
 80192fe:	e610      	b.n	8018f22 <_fx_directory_entry_write+0x69a>
                            logical_sector++;
 8019300:	f10b 0b01 	add.w	fp, fp, #1
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8019304:	455b      	cmp	r3, fp
 8019306:	f63f aeaf 	bhi.w	8019068 <_fx_directory_entry_write+0x7e0>
 801930a:	e7c7      	b.n	801929c <_fx_directory_entry_write+0xa14>
 801930c:	900a      	str	r0, [sp, #40]	; 0x28
}
 801930e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019310:	b015      	add	sp, #84	; 0x54
 8019312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019316:	2120      	movs	r1, #32
 8019318:	4620      	mov	r0, r4
 801931a:	f005 f93e 	bl	801e59a <memset>
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 801931e:	792b      	ldrb	r3, [r5, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8019320:	2b2e      	cmp	r3, #46	; 0x2e
 8019322:	d03b      	beq.n	801939c <_fx_directory_entry_write+0xb14>
 8019324:	2b00      	cmp	r3, #0
 8019326:	d039      	beq.n	801939c <_fx_directory_entry_write+0xb14>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8019328:	7023      	strb	r3, [r4, #0]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 801932a:	796b      	ldrb	r3, [r5, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 801932c:	2b2e      	cmp	r3, #46	; 0x2e
 801932e:	f000 80fc 	beq.w	801952a <_fx_directory_entry_write+0xca2>
 8019332:	2b00      	cmp	r3, #0
 8019334:	f000 80f9 	beq.w	801952a <_fx_directory_entry_write+0xca2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8019338:	7063      	strb	r3, [r4, #1]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 801933a:	79ab      	ldrb	r3, [r5, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 801933c:	2b2e      	cmp	r3, #46	; 0x2e
 801933e:	f000 8102 	beq.w	8019546 <_fx_directory_entry_write+0xcbe>
 8019342:	2b00      	cmp	r3, #0
 8019344:	f000 80ff 	beq.w	8019546 <_fx_directory_entry_write+0xcbe>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8019348:	70a3      	strb	r3, [r4, #2]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 801934a:	79eb      	ldrb	r3, [r5, #7]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 801934c:	2b2e      	cmp	r3, #46	; 0x2e
 801934e:	f000 80f4 	beq.w	801953a <_fx_directory_entry_write+0xcb2>
 8019352:	2b00      	cmp	r3, #0
 8019354:	f000 80f1 	beq.w	801953a <_fx_directory_entry_write+0xcb2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8019358:	70e3      	strb	r3, [r4, #3]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 801935a:	7a2b      	ldrb	r3, [r5, #8]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 801935c:	2b2e      	cmp	r3, #46	; 0x2e
 801935e:	d07c      	beq.n	801945a <_fx_directory_entry_write+0xbd2>
 8019360:	2b00      	cmp	r3, #0
 8019362:	d07a      	beq.n	801945a <_fx_directory_entry_write+0xbd2>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8019364:	7123      	strb	r3, [r4, #4]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8019366:	7a6b      	ldrb	r3, [r5, #9]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8019368:	2b2e      	cmp	r3, #46	; 0x2e
 801936a:	f000 80f8 	beq.w	801955e <_fx_directory_entry_write+0xcd6>
 801936e:	2b00      	cmp	r3, #0
 8019370:	f000 80f5 	beq.w	801955e <_fx_directory_entry_write+0xcd6>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8019374:	7163      	strb	r3, [r4, #5]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8019376:	7aab      	ldrb	r3, [r5, #10]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8019378:	2b2e      	cmp	r3, #46	; 0x2e
 801937a:	f000 80ea 	beq.w	8019552 <_fx_directory_entry_write+0xcca>
 801937e:	2b00      	cmp	r3, #0
 8019380:	f000 80e7 	beq.w	8019552 <_fx_directory_entry_write+0xcca>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8019384:	71a3      	strb	r3, [r4, #6]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8019386:	7aeb      	ldrb	r3, [r5, #11]
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8019388:	2b2e      	cmp	r3, #46	; 0x2e
 801938a:	f000 80c8 	beq.w	801951e <_fx_directory_entry_write+0xc96>
 801938e:	2b00      	cmp	r3, #0
 8019390:	f000 80c5 	beq.w	801951e <_fx_directory_entry_write+0xc96>
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8019394:	71e3      	strb	r3, [r4, #7]
 8019396:	2308      	movs	r3, #8
 8019398:	930a      	str	r3, [sp, #40]	; 0x28
 801939a:	7b2b      	ldrb	r3, [r5, #12]
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 801939c:	2b00      	cmp	r3, #0
 801939e:	f43f ada4 	beq.w	8018eea <_fx_directory_entry_write+0x662>
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80193a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193a4:	442b      	add	r3, r5
 80193a6:	795a      	ldrb	r2, [r3, #5]
 80193a8:	2a00      	cmp	r2, #0
 80193aa:	f43f ad9e 	beq.w	8018eea <_fx_directory_entry_write+0x662>
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80193ae:	7222      	strb	r2, [r4, #8]
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80193b0:	799a      	ldrb	r2, [r3, #6]
 80193b2:	2a00      	cmp	r2, #0
 80193b4:	f43f ad99 	beq.w	8018eea <_fx_directory_entry_write+0x662>
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80193b8:	7262      	strb	r2, [r4, #9]
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80193ba:	79db      	ldrb	r3, [r3, #7]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	f47f ad93 	bne.w	8018ee8 <_fx_directory_entry_write+0x660>
 80193c2:	e592      	b.n	8018eea <_fx_directory_entry_write+0x662>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80193c4:	2200      	movs	r2, #0
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80193c6:	442a      	add	r2, r5
 80193c8:	7953      	ldrb	r3, [r2, #5]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	f43f ac46 	beq.w	8018c5c <_fx_directory_entry_write+0x3d4>
 80193d0:	7991      	ldrb	r1, [r2, #6]
                    shortname[j] =  alpha;
 80193d2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80193d6:	2900      	cmp	r1, #0
 80193d8:	f43f ac40 	beq.w	8018c5c <_fx_directory_entry_write+0x3d4>
 80193dc:	79d3      	ldrb	r3, [r2, #7]
                    shortname[j] =  alpha;
 80193de:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	f43f ac3a 	beq.w	8018c5c <_fx_directory_entry_write+0x3d4>
                    shortname[j] =  alpha;
 80193e8:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 80193ec:	e436      	b.n	8018c5c <_fx_directory_entry_write+0x3d4>
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80193ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80193f0:	aa10      	add	r2, sp, #64	; 0x40
 80193f2:	4630      	mov	r0, r6
 80193f4:	f7fe f962 	bl	80176bc <_fx_utility_FAT_entry_read>
                                if (status != FX_SUCCESS)
 80193f8:	2800      	cmp	r0, #0
 80193fa:	d187      	bne.n	801930c <_fx_directory_entry_write+0xa84>
                                cluster =  next_cluster;
 80193fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80193fe:	2a01      	cmp	r2, #1
                                cluster =  next_cluster;
 8019400:	920b      	str	r2, [sp, #44]	; 0x2c
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8019402:	f67f af4b 	bls.w	801929c <_fx_directory_entry_write+0xa14>
 8019406:	9b06      	ldr	r3, [sp, #24]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	4293      	cmp	r3, r2
 801940c:	f67f af46 	bls.w	801929c <_fx_directory_entry_write+0xa14>
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8019410:	f1a2 0b02 	sub.w	fp, r2, #2
                                relative_sector =  0;
 8019414:	9009      	str	r0, [sp, #36]	; 0x24
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8019416:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 801941a:	fb02 3b0b 	mla	fp, r2, fp, r3
 801941e:	e623      	b.n	8019068 <_fx_directory_entry_write+0x7e0>
 8019420:	2820      	cmp	r0, #32
 8019422:	d15f      	bne.n	80194e4 <_fx_directory_entry_write+0xc5c>
 8019424:	4419      	add	r1, r3
 8019426:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 801942a:	2b00      	cmp	r3, #0
 801942c:	f000 8083 	beq.w	8019536 <_fx_directory_entry_write+0xcae>
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8019430:	2b2e      	cmp	r3, #46	; 0x2e
 8019432:	d0f8      	beq.n	8019426 <_fx_directory_entry_write+0xb9e>
 8019434:	f04f 0c01 	mov.w	ip, #1
        if ((dotpos) && (shortname[8] == ' '))
 8019438:	9a05      	ldr	r2, [sp, #20]
 801943a:	2a00      	cmp	r2, #0
 801943c:	f47f aaf7 	bne.w	8018a2e <_fx_directory_entry_write+0x1a6>
 8019440:	e752      	b.n	80192e8 <_fx_directory_entry_write+0xa60>
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8019442:	3920      	subs	r1, #32
 8019444:	b2c9      	uxtb	r1, r1
 8019446:	e67c      	b.n	8019142 <_fx_directory_entry_write+0x8ba>
 8019448:	3920      	subs	r1, #32
 801944a:	b2c9      	uxtb	r1, r1
 801944c:	e687      	b.n	801915e <_fx_directory_entry_write+0x8d6>
 801944e:	3920      	subs	r1, #32
 8019450:	b2c9      	uxtb	r1, r1
 8019452:	e692      	b.n	801917a <_fx_directory_entry_write+0x8f2>
 8019454:	3920      	subs	r1, #32
 8019456:	b2c9      	uxtb	r1, r1
 8019458:	e69d      	b.n	8019196 <_fx_directory_entry_write+0x90e>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801945a:	2204      	movs	r2, #4
 801945c:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 801945e:	2b00      	cmp	r3, #0
 8019460:	f43f ad43 	beq.w	8018eea <_fx_directory_entry_write+0x662>
 8019464:	e79d      	b.n	80193a2 <_fx_directory_entry_write+0xb1a>
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8019466:	464f      	mov	r7, r9
 8019468:	46ca      	mov	sl, r9
 801946a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801946e:	46c8      	mov	r8, r9
 8019470:	f8cd 9014 	str.w	r9, [sp, #20]
 8019474:	f7ff ba85 	b.w	8018982 <_fx_directory_entry_write+0xfa>
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8019478:	2300      	movs	r3, #0
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 801947a:	2900      	cmp	r1, #0
 801947c:	f43f af2c 	beq.w	80192d8 <_fx_directory_entry_write+0xa50>
 8019480:	e626      	b.n	80190d0 <_fx_directory_entry_write+0x848>
 8019482:	4690      	mov	r8, r2
        if (len % 13 == 0)
 8019484:	f1ba 0f00 	cmp.w	sl, #0
 8019488:	f43f aab8 	beq.w	80189fc <_fx_directory_entry_write+0x174>
 801948c:	e721      	b.n	80192d2 <_fx_directory_entry_write+0xa4a>
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 801948e:	2a08      	cmp	r2, #8
 8019490:	d02c      	beq.n	80194ec <_fx_directory_entry_write+0xc64>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8019492:	45cc      	cmp	ip, r9
 8019494:	f47f aac7 	bne.w	8018a26 <_fx_directory_entry_write+0x19e>
            k++;
 8019498:	3201      	adds	r2, #1
            l++;
 801949a:	3101      	adds	r1, #1
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 801949c:	2a0b      	cmp	r2, #11
 801949e:	d12c      	bne.n	80194fa <_fx_directory_entry_write+0xc72>
 80194a0:	f04f 0c00 	mov.w	ip, #0
        if ((dotpos) && (shortname[8] == ' '))
 80194a4:	9a05      	ldr	r2, [sp, #20]
 80194a6:	2a00      	cmp	r2, #0
 80194a8:	f47f af1a 	bne.w	80192e0 <_fx_directory_entry_write+0xa58>
 80194ac:	e71b      	b.n	80192e6 <_fx_directory_entry_write+0xa5e>
 80194ae:	9a05      	ldr	r2, [sp, #20]
 80194b0:	2a00      	cmp	r2, #0
 80194b2:	f43f ab08 	beq.w	8018ac6 <_fx_directory_entry_write+0x23e>
 80194b6:	46cc      	mov	ip, r9
 80194b8:	e712      	b.n	80192e0 <_fx_directory_entry_write+0xa58>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80194ba:	2202      	movs	r2, #2
 80194bc:	f7ff bbc8 	b.w	8018c50 <_fx_directory_entry_write+0x3c8>
 80194c0:	2201      	movs	r2, #1
 80194c2:	f7ff bbc5 	b.w	8018c50 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80194c6:	2301      	movs	r3, #1
 80194c8:	e4ee      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
 80194ca:	2300      	movs	r3, #0
 80194cc:	e4ec      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80194ce:	2203      	movs	r2, #3
 80194d0:	f7ff bbbe 	b.w	8018c50 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80194d4:	2303      	movs	r3, #3
 80194d6:	e4e7      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
 80194d8:	2302      	movs	r3, #2
 80194da:	e4e5      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
 80194dc:	2305      	movs	r3, #5
 80194de:	e4e3      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
 80194e0:	2306      	movs	r3, #6
 80194e2:	e4e1      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
                l++;
 80194e4:	3101      	adds	r1, #1
 80194e6:	4684      	mov	ip, r0
 80194e8:	f813 9001 	ldrb.w	r9, [r3, r1]
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 80194ec:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 80194f0:	d044      	beq.n	801957c <_fx_directory_entry_write+0xcf4>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 80194f2:	45cc      	cmp	ip, r9
 80194f4:	d13f      	bne.n	8019576 <_fx_directory_entry_write+0xcee>
            l++;
 80194f6:	3101      	adds	r1, #1
            k++;
 80194f8:	2209      	movs	r2, #9
 80194fa:	f813 9001 	ldrb.w	r9, [r3, r1]
 80194fe:	f7ff ba81 	b.w	8018a04 <_fx_directory_entry_write+0x17c>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8019502:	2207      	movs	r2, #7
 8019504:	f7ff bba4 	b.w	8018c50 <_fx_directory_entry_write+0x3c8>
 8019508:	2206      	movs	r2, #6
 801950a:	f7ff bba1 	b.w	8018c50 <_fx_directory_entry_write+0x3c8>
 801950e:	2205      	movs	r2, #5
 8019510:	f7ff bb9e 	b.w	8018c50 <_fx_directory_entry_write+0x3c8>
 8019514:	2204      	movs	r2, #4
 8019516:	f7ff bb9b 	b.w	8018c50 <_fx_directory_entry_write+0x3c8>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801951a:	2307      	movs	r3, #7
 801951c:	e4c4      	b.n	8018ea8 <_fx_directory_entry_write+0x620>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801951e:	2207      	movs	r2, #7
 8019520:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8019522:	2b00      	cmp	r3, #0
 8019524:	f43f ace1 	beq.w	8018eea <_fx_directory_entry_write+0x662>
 8019528:	e73b      	b.n	80193a2 <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801952a:	2201      	movs	r2, #1
 801952c:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 801952e:	2b00      	cmp	r3, #0
 8019530:	f43f acdb 	beq.w	8018eea <_fx_directory_entry_write+0x662>
 8019534:	e735      	b.n	80193a2 <_fx_directory_entry_write+0xb1a>
 8019536:	469c      	mov	ip, r3
 8019538:	e77e      	b.n	8019438 <_fx_directory_entry_write+0xbb0>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801953a:	2203      	movs	r2, #3
 801953c:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 801953e:	2b00      	cmp	r3, #0
 8019540:	f43f acd3 	beq.w	8018eea <_fx_directory_entry_write+0x662>
 8019544:	e72d      	b.n	80193a2 <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8019546:	2202      	movs	r2, #2
 8019548:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 801954a:	2b00      	cmp	r3, #0
 801954c:	f43f accd 	beq.w	8018eea <_fx_directory_entry_write+0x662>
 8019550:	e727      	b.n	80193a2 <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8019552:	2206      	movs	r2, #6
 8019554:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8019556:	2b00      	cmp	r3, #0
 8019558:	f43f acc7 	beq.w	8018eea <_fx_directory_entry_write+0x662>
 801955c:	e721      	b.n	80193a2 <_fx_directory_entry_write+0xb1a>
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801955e:	2205      	movs	r2, #5
 8019560:	920a      	str	r2, [sp, #40]	; 0x28
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8019562:	2b00      	cmp	r3, #0
 8019564:	f43f acc1 	beq.w	8018eea <_fx_directory_entry_write+0x662>
 8019568:	e71b      	b.n	80193a2 <_fx_directory_entry_write+0xb1a>
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 801956a:	9205      	str	r2, [sp, #20]
 801956c:	f7ff ba31 	b.w	80189d2 <_fx_directory_entry_write+0x14a>
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8019570:	9105      	str	r1, [sp, #20]
 8019572:	f7ff ba2e 	b.w	80189d2 <_fx_directory_entry_write+0x14a>
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8019576:	f04f 0c01 	mov.w	ip, #1
 801957a:	e793      	b.n	80194a4 <_fx_directory_entry_write+0xc1c>
                l++;
 801957c:	3101      	adds	r1, #1
 801957e:	f813 9001 	ldrb.w	r9, [r3, r1]
 8019582:	e7b6      	b.n	80194f2 <_fx_directory_entry_write+0xc6a>

08019584 <_fx_directory_free_search>:
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 8019584:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
{
 8019588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    media_ptr -> fx_media_directory_free_searches++;
 801958c:	3301      	adds	r3, #1

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 801958e:	6814      	ldr	r4, [r2, #0]
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8019590:	2500      	movs	r5, #0
{
 8019592:	b095      	sub	sp, #84	; 0x54
    media_ptr -> fx_media_directory_free_searches++;
 8019594:	f8c0 3174 	str.w	r3, [r0, #372]	; 0x174
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8019598:	6155      	str	r5, [r2, #20]
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 801959a:	7823      	ldrb	r3, [r4, #0]
 801959c:	2b2e      	cmp	r3, #46	; 0x2e
 801959e:	f000 8147 	beq.w	8019830 <_fx_directory_free_search+0x2ac>
            return(FX_INVALID_NAME);
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	f000 81df 	beq.w	8019966 <_fx_directory_free_search+0x3e2>
{
 80195a8:	f04f 0c00 	mov.w	ip, #0
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 80195ac:	2701      	movs	r7, #1
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 80195ae:	f8df 8324 	ldr.w	r8, [pc, #804]	; 80198d4 <_fx_directory_free_search+0x350>
{
 80195b2:	4665      	mov	r5, ip
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 80195b4:	f8df e320 	ldr.w	lr, [pc, #800]	; 80198d8 <_fx_directory_free_search+0x354>
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 80195b8:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 80195bc:	2e19      	cmp	r6, #25
 80195be:	d92e      	bls.n	801961e <_fx_directory_free_search+0x9a>
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 80195c0:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80195c4:	2e09      	cmp	r6, #9
 80195c6:	d92a      	bls.n	801961e <_fx_directory_free_search+0x9a>
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 80195c8:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
 80195cc:	2e19      	cmp	r6, #25
 80195ce:	f240 80cf 	bls.w	8019770 <_fx_directory_free_search+0x1ec>
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 80195d2:	2b20      	cmp	r3, #32
 80195d4:	f000 80cc 	beq.w	8019770 <_fx_directory_free_search+0x1ec>
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 80195d8:	2b2e      	cmp	r3, #46	; 0x2e
 80195da:	f000 80cb 	beq.w	8019774 <_fx_directory_free_search+0x1f0>
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 80195de:	2be5      	cmp	r3, #229	; 0xe5
 80195e0:	f000 80c6 	beq.w	8019770 <_fx_directory_free_search+0x1ec>
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 80195e4:	061e      	lsls	r6, r3, #24
 80195e6:	d41a      	bmi.n	801961e <_fx_directory_free_search+0x9a>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 80195e8:	f1a3 097d 	sub.w	r9, r3, #125	; 0x7d
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 80195ec:	f1a3 0621 	sub.w	r6, r3, #33	; 0x21
 80195f0:	2b7b      	cmp	r3, #123	; 0x7b
 80195f2:	bf18      	it	ne
 80195f4:	f1b9 0f01 	cmpne.w	r9, #1
 80195f8:	b2f6      	uxtb	r6, r6
 80195fa:	bf94      	ite	ls
 80195fc:	f04f 0901 	movls.w	r9, #1
 8019600:	f04f 0900 	movhi.w	r9, #0
 8019604:	2e1f      	cmp	r6, #31
 8019606:	f240 809b 	bls.w	8019740 <_fx_directory_free_search+0x1bc>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 801960a:	f1a3 065e 	sub.w	r6, r3, #94	; 0x5e
 801960e:	2e02      	cmp	r6, #2
 8019610:	bf8c      	ite	hi
 8019612:	464e      	movhi	r6, r9
 8019614:	f049 0601 	orrls.w	r6, r9, #1
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 8019618:	2e00      	cmp	r6, #0
 801961a:	f000 8098 	beq.w	801974e <_fx_directory_free_search+0x1ca>
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 801961e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019622:	3501      	adds	r5, #1
 8019624:	2b00      	cmp	r3, #0
 8019626:	d1c7      	bne.n	80195b8 <_fx_directory_free_search+0x34>
            return(FX_INVALID_NAME);
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 8019628:	f1bc 0f00 	cmp.w	ip, #0
 801962c:	d06f      	beq.n	801970e <_fx_directory_free_search+0x18a>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 801962e:	eba5 030c 	sub.w	r3, r5, ip
 8019632:	2b04      	cmp	r3, #4
 8019634:	d96b      	bls.n	801970e <_fx_directory_free_search+0x18a>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8019636:	2301      	movs	r3, #1
 8019638:	6153      	str	r3, [r2, #20]
 801963a:	4ba5      	ldr	r3, [pc, #660]	; (80198d0 <_fx_directory_free_search+0x34c>)
 801963c:	fba3 4305 	umull	r4, r3, r3, r5
 8019640:	089b      	lsrs	r3, r3, #2
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 8019642:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8019646:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801964a:	42a5      	cmp	r5, r4
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 801964c:	bf0c      	ite	eq
 801964e:	3301      	addeq	r3, #1
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 8019650:	3302      	addne	r3, #2
 8019652:	9305      	str	r3, [sp, #20]
 8019654:	015b      	lsls	r3, r3, #5
 8019656:	9307      	str	r3, [sp, #28]
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 8019658:	680b      	ldr	r3, [r1, #0]
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d169      	bne.n	8019734 <_fx_directory_free_search+0x1b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8019660:	6f87      	ldr	r7, [r0, #120]	; 0x78

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 8019662:	9304      	str	r3, [sp, #16]
 8019664:	4682      	mov	sl, r0
 8019666:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801966a:	910f      	str	r1, [sp, #60]	; 0x3c
 801966c:	4693      	mov	fp, r2
                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 801966e:	f242 41ac 	movw	r1, #9388	; 0x24ac
    entry_sector = entry_offset = 0;
 8019672:	2200      	movs	r2, #0
 8019674:	f848 3d04 	str.w	r3, [r8, #-4]!
 8019678:	f242 40a8 	movw	r0, #9384	; 0x24a8
 801967c:	4643      	mov	r3, r8
 801967e:	9209      	str	r2, [sp, #36]	; 0x24
 8019680:	9208      	str	r2, [sp, #32]
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8019682:	eb0a 0201 	add.w	r2, sl, r1
        search_dir_ptr =  FX_NULL;
 8019686:	46b9      	mov	r9, r7
 8019688:	46b8      	mov	r8, r7
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 801968a:	920d      	str	r2, [sp, #52]	; 0x34
 801968c:	461f      	mov	r7, r3
 801968e:	eb0a 0200 	add.w	r2, sl, r0
 8019692:	920e      	str	r2, [sp, #56]	; 0x38
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 8019694:	465b      	mov	r3, fp
 8019696:	463a      	mov	r2, r7
 8019698:	9904      	ldr	r1, [sp, #16]
 801969a:	4650      	mov	r0, sl
 801969c:	f7fe fe16 	bl	80182cc <_fx_directory_entry_read>
        if (status != FX_SUCCESS)
 80196a0:	4604      	mov	r4, r0
 80196a2:	2800      	cmp	r0, #0
 80196a4:	f040 8158 	bne.w	8019958 <_fx_directory_free_search+0x3d4>
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 80196a8:	f8db 2000 	ldr.w	r2, [fp]
 80196ac:	7813      	ldrb	r3, [r2, #0]
 80196ae:	2be5      	cmp	r3, #229	; 0xe5
 80196b0:	d069      	beq.n	8019786 <_fx_directory_free_search+0x202>
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d16f      	bne.n	8019796 <_fx_directory_free_search+0x212>
            if (total_entries > 1)
 80196b6:	9b05      	ldr	r3, [sp, #20]
 80196b8:	2b01      	cmp	r3, #1
 80196ba:	f040 80a6 	bne.w	801980a <_fx_directory_free_search+0x286>
 80196be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80196c0:	1c53      	adds	r3, r2, #1
            if (free_entry_start == directory_entries)
 80196c2:	45c1      	cmp	r9, r8
 80196c4:	d06b      	beq.n	801979e <_fx_directory_free_search+0x21a>
 80196c6:	eba3 0208 	sub.w	r2, r3, r8
            if ((directory_index - free_entry_start + 1) >= total_entries)
 80196ca:	9905      	ldr	r1, [sp, #20]
 80196cc:	4291      	cmp	r1, r2
 80196ce:	f240 814f 	bls.w	8019970 <_fx_directory_free_search+0x3ec>
        if (directory_index >= directory_entries)
 80196d2:	4599      	cmp	r9, r3
        directory_index++;
 80196d4:	9313      	str	r3, [sp, #76]	; 0x4c
        if (directory_index >= directory_entries)
 80196d6:	d8dd      	bhi.n	8019694 <_fx_directory_free_search+0x110>
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 80196d8:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80196dc:	9c07      	ldr	r4, [sp, #28]
 80196de:	1e4b      	subs	r3, r1, #1
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 80196e0:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 80196e4:	4423      	add	r3, r4
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 80196e6:	1e50      	subs	r0, r2, #1
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 80196e8:	fbb3 f3f1 	udiv	r3, r3, r1
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 80196ec:	4403      	add	r3, r0
 80196ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80196f2:	9306      	str	r3, [sp, #24]
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters > clusters_needed))
 80196f4:	9b04      	ldr	r3, [sp, #16]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d05a      	beq.n	80197b0 <_fx_directory_free_search+0x22c>
 80196fa:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
 80196fe:	9a06      	ldr	r2, [sp, #24]
 8019700:	4293      	cmp	r3, r2
 8019702:	d85e      	bhi.n	80197c2 <_fx_directory_free_search+0x23e>
            }
        }
    } while (directory_index < directory_entries);

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 8019704:	230a      	movs	r3, #10
}
 8019706:	4618      	mov	r0, r3
 8019708:	b015      	add	sp, #84	; 0x54
 801970a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 801970e:	2d0c      	cmp	r5, #12
 8019710:	d893      	bhi.n	801963a <_fx_directory_free_search+0xb6>
 8019712:	6953      	ldr	r3, [r2, #20]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d190      	bne.n	801963a <_fx_directory_free_search+0xb6>
        if ((j >= 9) || ((i - j) >= 9))
 8019718:	f1bc 0f08 	cmp.w	ip, #8
 801971c:	f240 811e 	bls.w	801995c <_fx_directory_free_search+0x3d8>
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8019720:	2301      	movs	r3, #1
 8019722:	2440      	movs	r4, #64	; 0x40
 8019724:	6153      	str	r3, [r2, #20]
    if (directory_ptr -> fx_dir_entry_name[0])
 8019726:	680b      	ldr	r3, [r1, #0]
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8019728:	9407      	str	r4, [sp, #28]
            total_entries = 2;
 801972a:	2402      	movs	r4, #2
    if (directory_ptr -> fx_dir_entry_name[0])
 801972c:	781b      	ldrb	r3, [r3, #0]
            total_entries = 2;
 801972e:	9405      	str	r4, [sp, #20]
    if (directory_ptr -> fx_dir_entry_name[0])
 8019730:	2b00      	cmp	r3, #0
 8019732:	d095      	beq.n	8019660 <_fx_directory_free_search+0xdc>
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8019734:	2400      	movs	r4, #0
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 8019736:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8019738:	9104      	str	r1, [sp, #16]
        directory_index =  2;
 801973a:	2302      	movs	r3, #2
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 801973c:	650c      	str	r4, [r1, #80]	; 0x50
 801973e:	e791      	b.n	8019664 <_fx_directory_free_search+0xe0>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8019740:	fa2e f606 	lsr.w	r6, lr, r6
 8019744:	f006 0601 	and.w	r6, r6, #1
 8019748:	ea49 0906 	orr.w	r9, r9, r6
 801974c:	e75d      	b.n	801960a <_fx_directory_free_search+0x86>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 801974e:	f1a3 092b 	sub.w	r9, r3, #43	; 0x2b
 8019752:	fa5f f989 	uxtb.w	r9, r9
 8019756:	f1b9 0f12 	cmp.w	r9, #18
 801975a:	d803      	bhi.n	8019764 <_fx_directory_free_search+0x1e0>
 801975c:	fa28 f909 	lsr.w	r9, r8, r9
 8019760:	f009 0601 	and.w	r6, r9, #1
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 8019764:	2b5d      	cmp	r3, #93	; 0x5d
 8019766:	bf18      	it	ne
 8019768:	2b5b      	cmpne	r3, #91	; 0x5b
 801976a:	d001      	beq.n	8019770 <_fx_directory_free_search+0x1ec>
 801976c:	2e00      	cmp	r6, #0
 801976e:	d063      	beq.n	8019838 <_fx_directory_free_search+0x2b4>
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8019770:	6157      	str	r7, [r2, #20]
 8019772:	e754      	b.n	801961e <_fx_directory_free_search+0x9a>
            if (j == 0)
 8019774:	f1bc 0f00 	cmp.w	ip, #0
 8019778:	d1fa      	bne.n	8019770 <_fx_directory_free_search+0x1ec>
                if (i == 0)
 801977a:	2d00      	cmp	r5, #0
 801977c:	f040 80a5 	bne.w	80198ca <_fx_directory_free_search+0x346>
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 8019780:	6157      	str	r7, [r2, #20]
 8019782:	46ac      	mov	ip, r5
 8019784:	e74b      	b.n	801961e <_fx_directory_free_search+0x9a>
 8019786:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8019788:	f89b 1004 	ldrb.w	r1, [fp, #4]
 801978c:	1c53      	adds	r3, r2, #1
 801978e:	2900      	cmp	r1, #0
 8019790:	d097      	beq.n	80196c2 <_fx_directory_free_search+0x13e>
 8019792:	46c8      	mov	r8, r9
 8019794:	e79d      	b.n	80196d2 <_fx_directory_free_search+0x14e>
 8019796:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019798:	46c8      	mov	r8, r9
 801979a:	3301      	adds	r3, #1
 801979c:	e799      	b.n	80196d2 <_fx_directory_free_search+0x14e>
                free_entry_start =  directory_index;
 801979e:	4690      	mov	r8, r2
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 80197a0:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 80197a4:	9208      	str	r2, [sp, #32]
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 80197a6:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 80197aa:	9209      	str	r2, [sp, #36]	; 0x24
 80197ac:	2201      	movs	r2, #1
 80197ae:	e78c      	b.n	80196ca <_fx_directory_free_search+0x146>
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters > clusters_needed))
 80197b0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d0a5      	beq.n	8019704 <_fx_directory_free_search+0x180>
 80197b8:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
 80197bc:	9a06      	ldr	r2, [sp, #24]
 80197be:	4293      	cmp	r3, r2
 80197c0:	d9a0      	bls.n	8019704 <_fx_directory_free_search+0x180>
                total_clusters =     media_ptr -> fx_media_total_clusters;
 80197c2:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
                while (clusters)
 80197c6:	4613      	mov	r3, r2
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 80197c8:	f8da 6080 	ldr.w	r6, [sl, #128]	; 0x80
                while (clusters)
 80197cc:	2a00      	cmp	r2, #0
 80197ce:	f000 80f1 	beq.w	80199b4 <_fx_directory_free_search+0x430>
                last_cluster =       0;
 80197d2:	2200      	movs	r2, #0
                while (clusters)
 80197d4:	930c      	str	r3, [sp, #48]	; 0x30
 80197d6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
                last_cluster =       0;
 80197da:	920a      	str	r2, [sp, #40]	; 0x28
                first_new_cluster =  0;
 80197dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80197de:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
                        if (!total_clusters)
 80197e2:	2d00      	cmp	r5, #0
 80197e4:	d08e      	beq.n	8019704 <_fx_directory_free_search+0x180>
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 80197e6:	aa12      	add	r2, sp, #72	; 0x48
 80197e8:	4631      	mov	r1, r6
 80197ea:	4650      	mov	r0, sl
                        total_clusters--;
 80197ec:	3d01      	subs	r5, #1
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 80197ee:	f7fd ff65 	bl	80176bc <_fx_utility_FAT_entry_read>
                        if (status != FX_SUCCESS)
 80197f2:	b9c0      	cbnz	r0, 8019826 <_fx_directory_free_search+0x2a2>
 80197f4:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 80197f8:	1c72      	adds	r2, r6, #1
                        if (FAT_value == FX_FREE_CLUSTER)
 80197fa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80197fc:	3302      	adds	r3, #2
 80197fe:	b1e9      	cbz	r1, 801983c <_fx_directory_free_search+0x2b8>
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8019800:	4293      	cmp	r3, r2
 8019802:	bf8c      	ite	hi
 8019804:	4616      	movhi	r6, r2
 8019806:	2602      	movls	r6, #2
 8019808:	e7eb      	b.n	80197e2 <_fx_directory_free_search+0x25e>
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 801980a:	23e5      	movs	r3, #229	; 0xe5
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 801980c:	f8cb 4014 	str.w	r4, [fp, #20]
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 8019810:	4659      	mov	r1, fp
 8019812:	4650      	mov	r0, sl
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 8019814:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 8019816:	f8db 3000 	ldr.w	r3, [fp]
 801981a:	705c      	strb	r4, [r3, #1]
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 801981c:	f7ff f834 	bl	8018888 <_fx_directory_entry_write>
                    if(status != FX_SUCCESS)
 8019820:	2800      	cmp	r0, #0
 8019822:	f43f af4c 	beq.w	80196be <_fx_directory_free_search+0x13a>
 8019826:	4603      	mov	r3, r0
}
 8019828:	4618      	mov	r0, r3
 801982a:	b015      	add	sp, #84	; 0x54
 801982c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 8019830:	7865      	ldrb	r5, [r4, #1]
 8019832:	2d2e      	cmp	r5, #46	; 0x2e
 8019834:	f47f aeb8 	bne.w	80195a8 <_fx_directory_free_search+0x24>
            return(FX_INVALID_NAME);
 8019838:	230c      	movs	r3, #12
 801983a:	e764      	b.n	8019706 <_fx_directory_free_search+0x182>
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 801983c:	4293      	cmp	r3, r2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 801983e:	f8da 8054 	ldr.w	r8, [sl, #84]	; 0x54
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 8019842:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 8019846:	f1a6 0902 	sub.w	r9, r6, #2
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 801984a:	bf98      	it	ls
 801984c:	2202      	movls	r2, #2
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801984e:	f8da 1008 	ldr.w	r1, [sl, #8]
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 8019852:	fb08 3909 	mla	r9, r8, r9, r3
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8019856:	2401      	movs	r4, #1
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8019858:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801985c:	2203      	movs	r2, #3
 801985e:	2300      	movs	r3, #0
 8019860:	4650      	mov	r0, sl
 8019862:	9202      	str	r2, [sp, #8]
 8019864:	464a      	mov	r2, r9
 8019866:	e9cd 1400 	strd	r1, r4, [sp]
 801986a:	f7fe fa8d 	bl	8017d88 <_fx_utility_logical_sector_read>
                    if (status != FX_SUCCESS)
 801986e:	2800      	cmp	r0, #0
 8019870:	d1d9      	bne.n	8019826 <_fx_directory_free_search+0x2a2>
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8019872:	f8da 4028 	ldr.w	r4, [sl, #40]	; 0x28
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8019876:	f8da 1008 	ldr.w	r1, [sl, #8]
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 801987a:	b12c      	cbz	r4, 8019888 <_fx_directory_free_search+0x304>
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 801987c:	460b      	mov	r3, r1
                        *((ULONG *)work_ptr) =  (ULONG)0;
 801987e:	f843 0b04 	str.w	r0, [r3], #4
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8019882:	1a5a      	subs	r2, r3, r1
 8019884:	4294      	cmp	r4, r2
 8019886:	d8fa      	bhi.n	801987e <_fx_directory_free_search+0x2fa>
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8019888:	2303      	movs	r3, #3
 801988a:	2401      	movs	r4, #1
 801988c:	9100      	str	r1, [sp, #0]
 801988e:	464a      	mov	r2, r9
 8019890:	9302      	str	r3, [sp, #8]
 8019892:	4650      	mov	r0, sl
 8019894:	9401      	str	r4, [sp, #4]
 8019896:	2300      	movs	r3, #0
 8019898:	f7fe fc24 	bl	80180e4 <_fx_utility_logical_sector_write>
                    if (status != FX_SUCCESS)
 801989c:	2800      	cmp	r0, #0
 801989e:	d1c2      	bne.n	8019826 <_fx_directory_free_search+0x2a2>
                    if (sectors > 1)
 80198a0:	45a0      	cmp	r8, r4
 80198a2:	d81b      	bhi.n	80198dc <_fx_directory_free_search+0x358>
 80198a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198a6:	461a      	mov	r2, r3
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	bf08      	it	eq
 80198ac:	4632      	moveq	r2, r6
                    if (last_cluster)
 80198ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d147      	bne.n	8019946 <_fx_directory_free_search+0x3c2>
                while (clusters)
 80198b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80198b8:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
                while (clusters)
 80198bc:	3a01      	subs	r2, #1
 80198be:	960a      	str	r6, [sp, #40]	; 0x28
 80198c0:	920c      	str	r2, [sp, #48]	; 0x30
 80198c2:	f000 80d2 	beq.w	8019a6a <_fx_directory_free_search+0x4e6>
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80198c6:	461e      	mov	r6, r3
 80198c8:	e78b      	b.n	80197e2 <_fx_directory_free_search+0x25e>
 80198ca:	46ac      	mov	ip, r5
 80198cc:	e6a7      	b.n	801961e <_fx_directory_free_search+0x9a>
 80198ce:	bf00      	nop
 80198d0:	4ec4ec4f 	.word	0x4ec4ec4f
 80198d4:	00050003 	.word	0x00050003
 80198d8:	800011fd 	.word	0x800011fd
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 80198dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80198e0:	9001      	str	r0, [sp, #4]
 80198e2:	4603      	mov	r3, r0
 80198e4:	9402      	str	r4, [sp, #8]
 80198e6:	f8cd 8000 	str.w	r8, [sp]
 80198ea:	eb09 0204 	add.w	r2, r9, r4
 80198ee:	4650      	mov	r0, sl
 80198f0:	f000 fada 	bl	8019ea8 <_fx_utility_logical_sector_flush>
                        if (status != FX_SUCCESS)
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d196      	bne.n	8019826 <_fx_directory_free_search+0x2a2>
                            media_ptr -> fx_media_driver_write_requests++;
 80198f8:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80198fc:	2090      	movs	r0, #144	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 80198fe:	eb09 0108 	add.w	r1, r9, r8
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8019902:	f8da 2008 	ldr.w	r2, [sl, #8]
                            media_ptr -> fx_media_driver_write_requests++;
 8019906:	3301      	adds	r3, #1
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8019908:	f8ca 008c 	str.w	r0, [sl, #140]	; 0x8c
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 801990c:	2003      	movs	r0, #3
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801990e:	f8ca 4088 	str.w	r4, [sl, #136]	; 0x88
                            media_ptr -> fx_media_driver_write_requests++;
 8019912:	f8ca 31b0 	str.w	r3, [sl, #432]	; 0x1b0
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8019916:	f8ca 00b8 	str.w	r0, [sl, #184]	; 0xb8
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801991a:	4650      	mov	r0, sl
 801991c:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
                            media_ptr -> fx_media_driver_sectors =          1;
 8019920:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8019924:	f8ca 40b0 	str.w	r4, [sl, #176]	; 0xb0
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8019928:	e9ca 2124 	strd	r2, r1, [sl, #144]	; 0x90
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801992c:	4798      	blx	r3
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801992e:	2300      	movs	r3, #0
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8019930:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8019934:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8019938:	2800      	cmp	r0, #0
 801993a:	f47f af74 	bne.w	8019826 <_fx_directory_free_search+0x2a2>
                        while (sectors)
 801993e:	f1b8 0801 	subs.w	r8, r8, #1
 8019942:	d1d9      	bne.n	80198f8 <_fx_directory_free_search+0x374>
 8019944:	e7ae      	b.n	80198a4 <_fx_directory_free_search+0x320>
 8019946:	4619      	mov	r1, r3
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 8019948:	4632      	mov	r2, r6
 801994a:	4650      	mov	r0, sl
 801994c:	f7fe f816 	bl	801797c <_fx_utility_FAT_entry_write>
                        if (status !=  FX_SUCCESS)
 8019950:	2800      	cmp	r0, #0
 8019952:	d0b0      	beq.n	80198b6 <_fx_directory_free_search+0x332>
 8019954:	4603      	mov	r3, r0
 8019956:	e767      	b.n	8019828 <_fx_directory_free_search+0x2a4>
 8019958:	4623      	mov	r3, r4
 801995a:	e6d4      	b.n	8019706 <_fx_directory_free_search+0x182>
        if ((j >= 9) || ((i - j) >= 9))
 801995c:	eba5 050c 	sub.w	r5, r5, ip
 8019960:	2d08      	cmp	r5, #8
 8019962:	f63f aedd 	bhi.w	8019720 <_fx_directory_free_search+0x19c>
 8019966:	2320      	movs	r3, #32
 8019968:	9307      	str	r3, [sp, #28]
        total_entries = 1;
 801996a:	2301      	movs	r3, #1
 801996c:	9305      	str	r3, [sp, #20]
 801996e:	e673      	b.n	8019658 <_fx_directory_free_search+0xd4>
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 8019970:	9908      	ldr	r1, [sp, #32]
 8019972:	2200      	movs	r2, #0
 8019974:	4623      	mov	r3, r4
 8019976:	f8cb 1040 	str.w	r1, [fp, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 801997a:	9909      	ldr	r1, [sp, #36]	; 0x24
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 801997c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8019980:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
                entry_ptr -> fx_dir_entry_reserved =            0;
 8019984:	f88b 201d 	strb.w	r2, [fp, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 8019988:	f88b 201e 	strb.w	r2, [fp, #30]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801998c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8019990:	b672      	cpsid	i
                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8019992:	4c3e      	ldr	r4, [pc, #248]	; (8019a8c <_fx_directory_free_search+0x508>)
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 8019994:	493e      	ldr	r1, [pc, #248]	; (8019a90 <_fx_directory_free_search+0x50c>)
                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8019996:	6824      	ldr	r4, [r4, #0]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 8019998:	6809      	ldr	r1, [r1, #0]
 801999a:	e9cb 4108 	strd	r4, r1, [fp, #32]
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 801999e:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80199a2:	f380 8810 	msr	PRIMASK, r0
                if (total_entries == 1)
 80199a6:	9905      	ldr	r1, [sp, #20]
 80199a8:	2901      	cmp	r1, #1
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 80199aa:	bf18      	it	ne
 80199ac:	2201      	movne	r2, #1
 80199ae:	f8cb 2014 	str.w	r2, [fp, #20]
 80199b2:	e6a8      	b.n	8019706 <_fx_directory_free_search+0x182>
                last_cluster =       0;
 80199b4:	4616      	mov	r6, r2
                first_new_cluster =  0;
 80199b6:	920b      	str	r2, [sp, #44]	; 0x2c
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 80199b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199ba:	4631      	mov	r1, r6
 80199bc:	4650      	mov	r0, sl
 80199be:	681a      	ldr	r2, [r3, #0]
 80199c0:	f7fd ffdc 	bl	801797c <_fx_utility_FAT_entry_write>
                if (status !=  FX_SUCCESS)
 80199c4:	4604      	mov	r4, r0
 80199c6:	2800      	cmp	r0, #0
 80199c8:	d1c6      	bne.n	8019958 <_fx_directory_free_search+0x3d4>
                if (search_dir_ptr)
 80199ca:	9b04      	ldr	r3, [sp, #16]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d051      	beq.n	8019a74 <_fx_directory_free_search+0x4f0>
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 80199d0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                first_new_cluster =  0;
 80199d2:	f04f 0c00 	mov.w	ip, #0
 80199d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80199d8:	4666      	mov	r6, ip
 80199da:	e00f      	b.n	80199fc <_fx_directory_free_search+0x478>
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 80199dc:	f7fd fe6e 	bl	80176bc <_fx_utility_FAT_entry_read>
 80199e0:	46ac      	mov	ip, r5
                    if (status != FX_SUCCESS)
 80199e2:	2800      	cmp	r0, #0
 80199e4:	f47f af1f 	bne.w	8019826 <_fx_directory_free_search+0x2a2>
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 80199e8:	2d01      	cmp	r5, #1
 80199ea:	d93c      	bls.n	8019a66 <_fx_directory_free_search+0x4e2>
 80199ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80199ee:	42ab      	cmp	r3, r5
 80199f0:	461d      	mov	r5, r3
 80199f2:	d038      	beq.n	8019a66 <_fx_directory_free_search+0x4e2>
 80199f4:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 80199f8:	42b3      	cmp	r3, r6
 80199fa:	d334      	bcc.n	8019a66 <_fx_directory_free_search+0x4e2>
                while (cluster < media_ptr -> fx_media_fat_reserved)
 80199fc:	6823      	ldr	r3, [r4, #0]
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 80199fe:	4629      	mov	r1, r5
 8019a00:	aa12      	add	r2, sp, #72	; 0x48
 8019a02:	4650      	mov	r0, sl
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8019a04:	42ab      	cmp	r3, r5
                    i++;
 8019a06:	f106 0601 	add.w	r6, r6, #1
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8019a0a:	d8e7      	bhi.n	80199dc <_fx_directory_free_search+0x458>
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8019a0c:	f8da 207c 	ldr.w	r2, [sl, #124]	; 0x7c
 8019a10:	9c06      	ldr	r4, [sp, #24]
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8019a12:	f8db 0000 	ldr.w	r0, [fp]
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8019a16:	1b12      	subs	r2, r2, r4
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8019a18:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
 8019a1c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 8019a20:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8019a24:	fb03 f301 	mul.w	r3, r3, r1
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8019a28:	7802      	ldrb	r2, [r0, #0]
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8019a2a:	fb04 f303 	mul.w	r3, r4, r3
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8019a2e:	2ae5      	cmp	r2, #229	; 0xe5
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8019a30:	eb09 1953 	add.w	r9, r9, r3, lsr #5
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8019a34:	d021      	beq.n	8019a7a <_fx_directory_free_search+0x4f6>
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8019a36:	46c8      	mov	r8, r9
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 8019a38:	2200      	movs	r2, #0
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 8019a3a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 8019a3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019a40:	e9c1 920e 	strd	r9, r2, [r1, #56]	; 0x38
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 8019a44:	b10b      	cbz	r3, 8019a4a <_fx_directory_free_search+0x4c6>
 8019a46:	9b04      	ldr	r3, [sp, #16]
 8019a48:	b1eb      	cbz	r3, 8019a86 <_fx_directory_free_search+0x502>
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 8019a4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019a4c:	4661      	mov	r1, ip
 8019a4e:	4650      	mov	r0, sl
 8019a50:	f7fd ff94 	bl	801797c <_fx_utility_FAT_entry_write>
                if (status != FX_SUCCESS)
 8019a54:	4604      	mov	r4, r0
 8019a56:	2800      	cmp	r0, #0
 8019a58:	f47f af7e 	bne.w	8019958 <_fx_directory_free_search+0x3d4>
    } while (directory_index < directory_entries);
 8019a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019a5e:	454b      	cmp	r3, r9
 8019a60:	f4ff ae18 	bcc.w	8019694 <_fx_directory_free_search+0x110>
 8019a64:	e64e      	b.n	8019704 <_fx_directory_free_search+0x180>
                        return(FX_FAT_READ_ERROR);
 8019a66:	2303      	movs	r3, #3
 8019a68:	e64d      	b.n	8019706 <_fx_directory_free_search+0x182>
 8019a6a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8019a6e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8019a72:	e7a1      	b.n	80199b8 <_fx_directory_free_search+0x434>
                    cluster = media_ptr -> fx_media_root_cluster_32;
 8019a74:	f8da 5074 	ldr.w	r5, [sl, #116]	; 0x74
 8019a78:	e7ab      	b.n	80199d2 <_fx_directory_free_search+0x44e>
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 8019a7a:	f89b 3004 	ldrb.w	r3, [fp, #4]
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	bf18      	it	ne
 8019a82:	46c8      	movne	r8, r9
 8019a84:	e7d8      	b.n	8019a38 <_fx_directory_free_search+0x4b4>
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 8019a86:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
 8019a8a:	e7de      	b.n	8019a4a <_fx_directory_free_search+0x4c6>
 8019a8c:	20007910 	.word	0x20007910
 8019a90:	200078f8 	.word	0x200078f8

08019a94 <_fx_directory_name_extract>:

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 8019a94:	2300      	movs	r3, #0
{
 8019a96:	b4f0      	push	{r4, r5, r6, r7}
    dest_ptr[0] = 0;
 8019a98:	700b      	strb	r3, [r1, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8019a9a:	7803      	ldrb	r3, [r0, #0]
 8019a9c:	2b5c      	cmp	r3, #92	; 0x5c
 8019a9e:	d03b      	beq.n	8019b18 <_fx_directory_name_extract+0x84>
 8019aa0:	2b2f      	cmp	r3, #47	; 0x2f
 8019aa2:	d102      	bne.n	8019aaa <_fx_directory_name_extract+0x16>
 8019aa4:	e038      	b.n	8019b18 <_fx_directory_name_extract+0x84>
        /* Advance the string pointer.  */
        source_ptr++;
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 8019aa6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8019aaa:	2b20      	cmp	r3, #32
 8019aac:	d0fb      	beq.n	8019aa6 <_fx_directory_name_extract+0x12>
        source_ptr++;
    }

    /* Loop to extract the name.  */
    i = 0;
    while (*source_ptr)
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d039      	beq.n	8019b26 <_fx_directory_name_extract+0x92>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8019ab2:	2b5c      	cmp	r3, #92	; 0x5c
 8019ab4:	d039      	beq.n	8019b2a <_fx_directory_name_extract+0x96>
 8019ab6:	f1a3 022f 	sub.w	r2, r3, #47	; 0x2f
 8019aba:	fab2 f282 	clz	r2, r2
 8019abe:	0952      	lsrs	r2, r2, #5
 8019ac0:	bb9a      	cbnz	r2, 8019b2a <_fx_directory_name_extract+0x96>
 8019ac2:	1e4d      	subs	r5, r1, #1
 8019ac4:	e00b      	b.n	8019ade <_fx_directory_name_extract+0x4a>
 8019ac6:	2b5c      	cmp	r3, #92	; 0x5c
 8019ac8:	d010      	beq.n	8019aec <_fx_directory_name_extract+0x58>
 8019aca:	f1a3 072f 	sub.w	r7, r3, #47	; 0x2f
 8019ace:	fab7 f787 	clz	r7, r7
 8019ad2:	097f      	lsrs	r7, r7, #5
 8019ad4:	b957      	cbnz	r7, 8019aec <_fx_directory_name_extract+0x58>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 8019ad6:	2eff      	cmp	r6, #255	; 0xff
 8019ad8:	4632      	mov	r2, r6
 8019ada:	d020      	beq.n	8019b1e <_fx_directory_name_extract+0x8a>
 8019adc:	4620      	mov	r0, r4
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 8019ade:	f805 3f01 	strb.w	r3, [r5, #1]!
 8019ae2:	1c44      	adds	r4, r0, #1
    while (*source_ptr)
 8019ae4:	7843      	ldrb	r3, [r0, #1]

        /* Increment the character counter.  */
        i++;
 8019ae6:	1c56      	adds	r6, r2, #1
    while (*source_ptr)
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d1ec      	bne.n	8019ac6 <_fx_directory_name_extract+0x32>
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 8019aec:	2300      	movs	r3, #0
 8019aee:	558b      	strb	r3, [r1, r6]
        /* Yes, we can move backwards.  */
        i--;
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 8019af0:	5c8d      	ldrb	r5, [r1, r2]
 8019af2:	188b      	adds	r3, r1, r2
 8019af4:	2d20      	cmp	r5, #32
 8019af6:	d108      	bne.n	8019b0a <_fx_directory_name_extract+0x76>
 8019af8:	3a01      	subs	r2, #1
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 8019afa:	2500      	movs	r5, #0
 8019afc:	4411      	add	r1, r2
 8019afe:	701d      	strb	r5, [r3, #0]
    while (dest_ptr[i] == ' ')
 8019b00:	460b      	mov	r3, r1
 8019b02:	3901      	subs	r1, #1
 8019b04:	781a      	ldrb	r2, [r3, #0]
 8019b06:	2a20      	cmp	r2, #32
 8019b08:	d0f9      	beq.n	8019afe <_fx_directory_name_extract+0x6a>
 8019b0a:	7843      	ldrb	r3, [r0, #1]
    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	bf08      	it	eq
 8019b10:	2400      	moveq	r4, #0
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
}
 8019b12:	4620      	mov	r0, r4
 8019b14:	bcf0      	pop	{r4, r5, r6, r7}
 8019b16:	4770      	bx	lr
 8019b18:	7843      	ldrb	r3, [r0, #1]
        source_ptr++;
 8019b1a:	3001      	adds	r0, #1
 8019b1c:	e7c5      	b.n	8019aaa <_fx_directory_name_extract+0x16>
    dest_ptr[i] =  0;
 8019b1e:	f881 70ff 	strb.w	r7, [r1, #255]	; 0xff
 8019b22:	22fe      	movs	r2, #254	; 0xfe
 8019b24:	e7e4      	b.n	8019af0 <_fx_directory_name_extract+0x5c>
        source_ptr = FX_NULL;
 8019b26:	461c      	mov	r4, r3
 8019b28:	e7f3      	b.n	8019b12 <_fx_directory_name_extract+0x7e>
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8019b2a:	4604      	mov	r4, r0
 8019b2c:	e7f1      	b.n	8019b12 <_fx_directory_name_extract+0x7e>
 8019b2e:	bf00      	nop

08019b30 <_fx_utility_16_unsigned_read>:
{

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8019b30:	7803      	ldrb	r3, [r0, #0]
 8019b32:	7840      	ldrb	r0, [r0, #1]
              ((UINT)*(source_ptr) & 0xFF);

    /* Return value to caller.  */
    return(value);
}
 8019b34:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8019b38:	4770      	bx	lr
 8019b3a:	bf00      	nop

08019b3c <_fx_utility_16_unsigned_write>:
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8019b3c:	0a0b      	lsrs	r3, r1, #8
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8019b3e:	7001      	strb	r1, [r0, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8019b40:	7043      	strb	r3, [r0, #1]
}
 8019b42:	4770      	bx	lr

08019b44 <_fx_utility_32_unsigned_read>:
{

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8019b44:	7803      	ldrb	r3, [r0, #0]
 8019b46:	7841      	ldrb	r1, [r0, #1]
 8019b48:	7882      	ldrb	r2, [r0, #2]
 8019b4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019b4e:	78c0      	ldrb	r0, [r0, #3]
 8019b50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
              (((ULONG) *(source_ptr)) & 0xFF);

    /* Return value to caller.  */
    return(value);
}
 8019b54:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8019b58:	4770      	bx	lr
 8019b5a:	bf00      	nop

08019b5c <_fx_utility_32_unsigned_write>:
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8019b5c:	0a0a      	lsrs	r2, r1, #8
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8019b5e:	7001      	strb	r1, [r0, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8019b60:	0c0b      	lsrs	r3, r1, #16
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8019b62:	0e09      	lsrs	r1, r1, #24
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8019b64:	7042      	strb	r2, [r0, #1]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8019b66:	7083      	strb	r3, [r0, #2]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8019b68:	70c1      	strb	r1, [r0, #3]
}
 8019b6a:	4770      	bx	lr

08019b6c <_fx_utility_logical_sector_cache_entry_read>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 8019b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 8019b70:	6904      	ldr	r4, [r0, #16]
{
 8019b72:	4616      	mov	r6, r2
 8019b74:	461f      	mov	r7, r3
 8019b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if (media_ptr -> fx_media_sector_cache_hashed)
 8019b78:	2c00      	cmp	r4, #0
 8019b7a:	f000 808d 	beq.w	8019c98 <_fx_utility_logical_sector_cache_entry_read+0x12c>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8019b7e:	f242 43a0 	movw	r3, #9376	; 0x24a0

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8019b82:	2501      	movs	r5, #1
 8019b84:	6a04      	ldr	r4, [r0, #32]
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8019b86:	58c3      	ldr	r3, [r0, r3]
 8019b88:	4033      	ands	r3, r6

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 8019b8a:	0099      	lsls	r1, r3, #2
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8019b8c:	f003 0c1f 	and.w	ip, r3, #31

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8019b90:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8019b94:	fa05 f50c 	lsl.w	r5, r5, ip
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8019b98:	00db      	lsls	r3, r3, #3
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8019b9a:	432c      	orrs	r4, r5

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8019b9c:	eb00 0e03 	add.w	lr, r0, r3
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8019ba0:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8019ba4:	6204      	str	r4, [r0, #32]
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8019ba6:	f89e ccb1 	ldrb.w	ip, [lr, #3249]	; 0xcb1
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8019baa:	4403      	add	r3, r0
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8019bac:	f1bc 0f00 	cmp.w	ip, #0
 8019bb0:	f040 8086 	bne.w	8019cc0 <_fx_utility_logical_sector_cache_entry_read+0x154>
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 8019bb4:	f893 e029 	ldrb.w	lr, [r3, #41]	; 0x29
 8019bb8:	f1be 0f00 	cmp.w	lr, #0
 8019bbc:	d006      	beq.n	8019bcc <_fx_utility_logical_sector_cache_entry_read+0x60>
 8019bbe:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8019bc2:	42bd      	cmp	r5, r7
 8019bc4:	bf08      	it	eq
 8019bc6:	42b4      	cmpeq	r4, r6
 8019bc8:	f000 80f5 	beq.w	8019db6 <_fx_utility_logical_sector_cache_entry_read+0x24a>
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;

            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8019bcc:	f893 9041 	ldrb.w	r9, [r3, #65]	; 0x41
 8019bd0:	f1b9 0f00 	cmp.w	r9, #0
 8019bd4:	d006      	beq.n	8019be4 <_fx_utility_logical_sector_cache_entry_read+0x78>
 8019bd6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8019bda:	42bd      	cmp	r5, r7
 8019bdc:	bf08      	it	eq
 8019bde:	42b4      	cmpeq	r4, r6
 8019be0:	f000 811c 	beq.w	8019e1c <_fx_utility_logical_sector_cache_entry_read+0x2b0>
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;

            /* Success, return to caller immediately!  */
            return(FX_NULL);
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8019be4:	f893 a059 	ldrb.w	sl, [r3, #89]	; 0x59
 8019be8:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8019bec:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8019bf0:	f1ba 0f00 	cmp.w	sl, #0
 8019bf4:	d004      	beq.n	8019c00 <_fx_utility_logical_sector_cache_entry_read+0x94>
 8019bf6:	42af      	cmp	r7, r5
 8019bf8:	bf08      	it	eq
 8019bfa:	42a6      	cmpeq	r6, r4
 8019bfc:	f000 8085 	beq.w	8019d0a <_fx_utility_logical_sector_cache_entry_read+0x19e>
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8019c00:	eb01 0741 	add.w	r7, r1, r1, lsl #1
        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8019c04:	6b1e      	ldr	r6, [r3, #48]	; 0x30
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8019c06:	f883 9059 	strb.w	r9, [r3, #89]	; 0x59
        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8019c0a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019c0e:	699f      	ldr	r7, [r3, #24]
        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8019c10:	649e      	str	r6, [r3, #72]	; 0x48
        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019c12:	631f      	str	r7, [r3, #48]	; 0x30
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8019c14:	f893 c040 	ldrb.w	ip, [r3, #64]	; 0x40
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8019c18:	f893 b042 	ldrb.w	fp, [r3, #66]	; 0x42
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8019c1c:	f893 9028 	ldrb.w	r9, [r3, #40]	; 0x28
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8019c20:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8019c24:	f600 4ea8 	addw	lr, r0, #3240	; 0xca8
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8019c28:	f883 9040 	strb.w	r9, [r3, #64]	; 0x40
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8019c2c:	f893 902a 	ldrb.w	r9, [r3, #42]	; 0x2a
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8019c30:	e9d3 670e 	ldrd	r6, r7, [r3, #56]	; 0x38
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8019c34:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8019c38:	e9c3 6714 	strd	r6, r7, [r3, #80]	; 0x50
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8019c3c:	f893 705a 	ldrb.w	r7, [r3, #90]	; 0x5a
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8019c40:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8019c44:	f883 b05a 	strb.w	fp, [r3, #90]	; 0x5a
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8019c48:	f883 c058 	strb.w	ip, [r3, #88]	; 0x58
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8019c4c:	e9d3 bc08 	ldrd	fp, ip, [r3, #32]
 8019c50:	e9c3 bc0e 	strd	fp, ip, [r3, #56]	; 0x38
        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8019c54:	f8d0 1ca0 	ldr.w	r1, [r0, #3232]	; 0xca0
 8019c58:	6199      	str	r1, [r3, #24]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8019c5a:	2100      	movs	r1, #0
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8019c5c:	e9de bc00 	ldrd	fp, ip, [lr]
 8019c60:	e9c3 bc08 	strd	fp, ip, [r3, #32]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 8019c64:	f890 ccb0 	ldrb.w	ip, [r0, #3248]	; 0xcb0
 8019c68:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8019c6c:	f890 ccb1 	ldrb.w	ip, [r0, #3249]	; 0xcb1
 8019c70:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8019c74:	f890 ccb2 	ldrb.w	ip, [r0, #3250]	; 0xcb2
 8019c78:	f883 c02a 	strb.w	ip, [r3, #42]	; 0x2a
        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 8019c7c:	f8c0 8ca0 	str.w	r8, [r0, #3232]	; 0xca0
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8019c80:	e9ce 4500 	strd	r4, r5, [lr]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 8019c84:	f880 6cb0 	strb.w	r6, [r0, #3248]	; 0xcb0
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8019c88:	f880 acb1 	strb.w	sl, [r0, #3249]	; 0xcb1
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8019c8c:	f880 7cb2 	strb.w	r7, [r0, #3250]	; 0xcb2
        *previous_cache_entry =  FX_NULL;
 8019c90:	6011      	str	r1, [r2, #0]
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8019c98:	6941      	ldr	r1, [r0, #20]
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8019c9a:	69c3      	ldr	r3, [r0, #28]
        *previous_cache_entry =  FX_NULL;
 8019c9c:	6014      	str	r4, [r2, #0]
        while (cache_size--)
 8019c9e:	2900      	cmp	r1, #0
 8019ca0:	d0f7      	beq.n	8019c92 <_fx_utility_logical_sector_cache_entry_read+0x126>
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8019ca2:	7c5c      	ldrb	r4, [r3, #17]
 8019ca4:	3901      	subs	r1, #1
 8019ca6:	b12c      	cbz	r4, 8019cb4 <_fx_utility_logical_sector_cache_entry_read+0x148>
 8019ca8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8019cac:	42bd      	cmp	r5, r7
 8019cae:	bf08      	it	eq
 8019cb0:	42b4      	cmpeq	r4, r6
 8019cb2:	d018      	beq.n	8019ce6 <_fx_utility_logical_sector_cache_entry_read+0x17a>
            if (cache_entry -> fx_cached_sector_next_used)
 8019cb4:	695c      	ldr	r4, [r3, #20]
 8019cb6:	2c00      	cmp	r4, #0
 8019cb8:	d0f1      	beq.n	8019c9e <_fx_utility_logical_sector_cache_entry_read+0x132>
                *previous_cache_entry =  cache_entry;
 8019cba:	6013      	str	r3, [r2, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8019cbc:	695b      	ldr	r3, [r3, #20]
 8019cbe:	e7ee      	b.n	8019c9e <_fx_utility_logical_sector_cache_entry_read+0x132>
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8019cc0:	f60e 44a8 	addw	r4, lr, #3240	; 0xca8
 8019cc4:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019cc8:	42bd      	cmp	r5, r7
 8019cca:	bf08      	it	eq
 8019ccc:	42b4      	cmpeq	r4, r6
 8019cce:	f47f af71 	bne.w	8019bb4 <_fx_utility_logical_sector_cache_entry_read+0x48>
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019cd2:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
            return(FX_NULL);
 8019cd6:	2300      	movs	r3, #0
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8019cd8:	f8de 1ca0 	ldr.w	r1, [lr, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019cdc:	3201      	adds	r2, #1
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8019cde:	6081      	str	r1, [r0, #8]
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019ce0:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
            return(FX_NULL);
 8019ce4:	e7d5      	b.n	8019c92 <_fx_utility_logical_sector_cache_entry_read+0x126>
                if (*previous_cache_entry)
 8019ce6:	6812      	ldr	r2, [r2, #0]
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8019ce8:	6819      	ldr	r1, [r3, #0]
 8019cea:	6081      	str	r1, [r0, #8]
                if (*previous_cache_entry)
 8019cec:	b122      	cbz	r2, 8019cf8 <_fx_utility_logical_sector_cache_entry_read+0x18c>
                        cache_entry -> fx_cached_sector_next_used;
 8019cee:	695c      	ldr	r4, [r3, #20]
                    cache_entry -> fx_cached_sector_next_used =
 8019cf0:	69c1      	ldr	r1, [r0, #28]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8019cf2:	6154      	str	r4, [r2, #20]
                    cache_entry -> fx_cached_sector_next_used =
 8019cf4:	6159      	str	r1, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8019cf6:	61c3      	str	r3, [r0, #28]
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019cf8:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
                return(FX_NULL);
 8019cfc:	2300      	movs	r3, #0
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019cfe:	3201      	adds	r2, #1
 8019d00:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
}
 8019d04:	4618      	mov	r0, r3
 8019d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019d0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019d0e:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8019d12:	f8c0 8008 	str.w	r8, [r0, #8]
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019d16:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019d1a:	3201      	adds	r2, #1
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8019d1c:	f60e 49a8 	addw	r9, lr, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019d20:	f8de 6ca0 	ldr.w	r6, [lr, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019d24:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8019d28:	f89e 7cb0 	ldrb.w	r7, [lr, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8019d2c:	f89e 2cb2 	ldrb.w	r2, [lr, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8019d30:	e9d9 4500 	ldrd	r4, r5, [r9]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8019d34:	f8ce 8ca0 	str.w	r8, [lr, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8019d38:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8019d3c:	e9c9 0100 	strd	r0, r1, [r9]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8019d40:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 8019d44:	f88e 1cb0 	strb.w	r1, [lr, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 8019d48:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
 8019d4c:	f88e 1cb1 	strb.w	r1, [lr, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8019d50:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 8019d54:	f88e 1cb2 	strb.w	r1, [lr, #3250]	; 0xcb2
            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8019d58:	6b18      	ldr	r0, [r3, #48]	; 0x30
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8019d5a:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8019d5e:	f893 8041 	ldrb.w	r8, [r3, #65]	; 0x41
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019d62:	6999      	ldr	r1, [r3, #24]
            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8019d64:	6498      	str	r0, [r3, #72]	; 0x48
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8019d66:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8019d6a:	f893 e042 	ldrb.w	lr, [r3, #66]	; 0x42
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8019d6e:	f883 9058 	strb.w	r9, [r3, #88]	; 0x58
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8019d72:	f883 8059 	strb.w	r8, [r3, #89]	; 0x59
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019d76:	6319      	str	r1, [r3, #48]	; 0x30
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8019d78:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8019d7c:	f883 e05a 	strb.w	lr, [r3, #90]	; 0x5a
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8019d80:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8019d84:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8019d88:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8019d8c:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8019d90:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8019d94:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8019d98:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8019d9c:	619e      	str	r6, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8019d9e:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8019da2:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8019da6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8019daa:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8019dae:	e9c3 4508 	strd	r4, r5, [r3, #32]
            return(FX_NULL);
 8019db2:	2300      	movs	r3, #0
 8019db4:	e76d      	b.n	8019c92 <_fx_utility_logical_sector_cache_entry_read+0x126>
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019db6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019dba:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019dbe:	6999      	ldr	r1, [r3, #24]
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019dc0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019dc4:	3401      	adds	r4, #1
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019dc6:	6081      	str	r1, [r0, #8]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8019dc8:	f602 45a8 	addw	r5, r2, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019dcc:	f8d2 8ca0 	ldr.w	r8, [r2, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019dd0:	f8c0 41a4 	str.w	r4, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8019dd4:	f892 ecb0 	ldrb.w	lr, [r2, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8019dd8:	f892 4cb2 	ldrb.w	r4, [r2, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8019ddc:	e9d5 6700 	ldrd	r6, r7, [r5]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019de0:	f8c2 1ca0 	str.w	r1, [r2, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 8019de4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8019de8:	e9c5 0100 	strd	r0, r1, [r5]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8019dec:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8019df0:	f882 1cb0 	strb.w	r1, [r2, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8019df4:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8019df8:	f882 1cb1 	strb.w	r1, [r2, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8019dfc:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8019e00:	f882 1cb2 	strb.w	r1, [r2, #3250]	; 0xcb2
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8019e04:	f8c3 8018 	str.w	r8, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8019e08:	f883 e028 	strb.w	lr, [r3, #40]	; 0x28
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8019e0c:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8019e10:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8019e14:	e9c3 6708 	strd	r6, r7, [r3, #32]
            return(FX_NULL);
 8019e18:	2300      	movs	r3, #0
 8019e1a:	e73a      	b.n	8019c92 <_fx_utility_logical_sector_cache_entry_read+0x126>
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019e1c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019e20:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8019e24:	6b19      	ldr	r1, [r3, #48]	; 0x30
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019e26:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019e2a:	3401      	adds	r4, #1
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8019e2c:	6081      	str	r1, [r0, #8]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8019e2e:	f602 45a8 	addw	r5, r2, #3240	; 0xca8
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8019e32:	f8d2 eca0 	ldr.w	lr, [r2, #3232]	; 0xca0
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8019e36:	f8c0 41a4 	str.w	r4, [r0, #420]	; 0x1a4
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8019e3a:	f892 8cb0 	ldrb.w	r8, [r2, #3248]	; 0xcb0
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8019e3e:	f892 4cb2 	ldrb.w	r4, [r2, #3250]	; 0xcb2
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8019e42:	e9d5 6700 	ldrd	r6, r7, [r5]
            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8019e46:	f8c2 1ca0 	str.w	r1, [r2, #3232]	; 0xca0
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 8019e4a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8019e4e:	e9c5 0100 	strd	r0, r1, [r5]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8019e52:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8019e56:	f882 1cb0 	strb.w	r1, [r2, #3248]	; 0xcb0
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8019e5a:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8019e5e:	f882 1cb1 	strb.w	r1, [r2, #3249]	; 0xcb1
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 8019e62:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8019e66:	f882 1cb2 	strb.w	r1, [r2, #3250]	; 0xcb2
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019e6a:	6999      	ldr	r1, [r3, #24]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8019e6c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8019e70:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8019e74:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8019e78:	6319      	str	r1, [r3, #48]	; 0x30
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8019e7a:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8019e7e:	f8c3 e018 	str.w	lr, [r3, #24]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8019e82:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8019e86:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8019e8a:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8019e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8019e92:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8019e96:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8019e9a:	e9c3 6708 	strd	r6, r7, [r3, #32]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8019e9e:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
            return(FX_NULL);
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	e6f5      	b.n	8019c92 <_fx_utility_logical_sector_cache_entry_read+0x126>
 8019ea6:	bf00      	nop

08019ea8 <_fx_utility_logical_sector_flush>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 8019ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eac:	b08b      	sub	sp, #44	; 0x2c
 8019eae:	461e      	mov	r6, r3
 8019eb0:	4615      	mov	r5, r2
 8019eb2:	4681      	mov	r9, r0
 8019eb4:	2000      	movs	r0, #0
 8019eb6:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 8019eba:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
 8019ebe:	4601      	mov	r1, r0
 8019ec0:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
{
 8019ec4:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8019ec8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8019ecc:	f144 34ff 	adc.w	r4, r4, #4294967295
 8019ed0:	18ef      	adds	r7, r5, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8019ed2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019ed6:	eb56 0804 	adcs.w	r8, r6, r4
 8019eda:	bf28      	it	cs
 8019edc:	2001      	movcs	r0, #1
 8019ede:	4602      	mov	r2, r0
 8019ee0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8019ee4:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8019ee8:	9007      	str	r0, [sp, #28]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f040 8097 	bne.w	801a01e <_fx_utility_logical_sector_flush+0x176>
        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8019ef0:	f8d9 401c 	ldr.w	r4, [r9, #28]

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8019ef4:	1e45      	subs	r5, r0, #1
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	f000 808d 	beq.w	801a016 <_fx_utility_logical_sector_flush+0x16e>
 8019efc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8019f00:	ea52 0103 	orrs.w	r1, r2, r3
 8019f04:	f000 8087 	beq.w	801a016 <_fx_utility_logical_sector_flush+0x16e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 8019f08:	ea5a 010b 	orrs.w	r1, sl, fp
 8019f0c:	f000 8083 	beq.w	801a016 <_fx_utility_logical_sector_flush+0x16e>
 8019f10:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
 8019f14:	4301      	orrs	r1, r0
 8019f16:	bf0c      	ite	eq
 8019f18:	2601      	moveq	r6, #1
 8019f1a:	2600      	movne	r6, #0
 8019f1c:	2e00      	cmp	r6, #0
 8019f1e:	d17a      	bne.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
                /* Determine if the invalidate option is specified.  */
                if (invalidate)
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8019f20:	9600      	str	r6, [sp, #0]
 8019f22:	4649      	mov	r1, r9
 8019f24:	4616      	mov	r6, r2
 8019f26:	461f      	mov	r7, r3
 8019f28:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8019f2c:	e00f      	b.n	8019f4e <_fx_utility_logical_sector_flush+0xa6>
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8019f2e:	3d01      	subs	r5, #1
                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8019f30:	6964      	ldr	r4, [r4, #20]
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8019f32:	1c6e      	adds	r6, r5, #1
 8019f34:	d06f      	beq.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
 8019f36:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8019f3a:	461f      	mov	r7, r3
 8019f3c:	4313      	orrs	r3, r2
 8019f3e:	4616      	mov	r6, r2
 8019f40:	d069      	beq.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
            if (sectors == 0)
 8019f42:	ea5a 030b 	orrs.w	r3, sl, fp
 8019f46:	d066      	beq.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
 8019f48:	ea58 0309 	orrs.w	r3, r8, r9
 8019f4c:	d063      	beq.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
            if ((cache_entry -> fx_cached_sector_valid) &&
 8019f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019f52:	429f      	cmp	r7, r3
 8019f54:	bf08      	it	eq
 8019f56:	4296      	cmpeq	r6, r2
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8019f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8019f5c:	bf2c      	ite	cs
 8019f5e:	2001      	movcs	r0, #1
 8019f60:	2000      	movcc	r0, #0
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8019f62:	42bb      	cmp	r3, r7
 8019f64:	f000 0001 	and.w	r0, r0, #1
 8019f68:	bf08      	it	eq
 8019f6a:	42b2      	cmpeq	r2, r6
 8019f6c:	bf38      	it	cc
 8019f6e:	2000      	movcc	r0, #0
 8019f70:	2800      	cmp	r0, #0
 8019f72:	d0dc      	beq.n	8019f2e <_fx_utility_logical_sector_flush+0x86>
            if ((cache_entry -> fx_cached_sector_valid) &&
 8019f74:	7c60      	ldrb	r0, [r4, #17]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8019f76:	2800      	cmp	r0, #0
 8019f78:	d0d9      	beq.n	8019f2e <_fx_utility_logical_sector_flush+0x86>
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8019f7a:	7c20      	ldrb	r0, [r4, #16]
 8019f7c:	b370      	cbz	r0, 8019fdc <_fx_utility_logical_sector_flush+0x134>
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8019f7e:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
 8019f82:	bb58      	cbnz	r0, 8019fdc <_fx_utility_logical_sector_flush+0x134>
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8019f84:	2201      	movs	r2, #1
                        media_ptr -> fx_media_driver_write_requests++;
 8019f86:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8019f8a:	2090      	movs	r0, #144	; 0x90
                        media_ptr -> fx_media_driver_write_requests++;
 8019f8c:	4413      	add	r3, r2
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8019f8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8019f92:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8019f96:	6820      	ldr	r0, [r4, #0]
                        media_ptr -> fx_media_driver_write_requests++;
 8019f98:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8019f9c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8019fa0:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
                        media_ptr -> fx_media_driver_sectors =          1;
 8019fa4:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8019fa8:	7ca3      	ldrb	r3, [r4, #18]
 8019faa:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8019fae:	7ca3      	ldrb	r3, [r4, #18]
 8019fb0:	2b04      	cmp	r3, #4
 8019fb2:	d001      	beq.n	8019fb8 <_fx_utility_logical_sector_flush+0x110>
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8019fb4:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8019fb8:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8019fbc:	4608      	mov	r0, r1
 8019fbe:	9106      	str	r1, [sp, #24]
 8019fc0:	4798      	blx	r3
                        if (media_ptr -> fx_media_driver_status)
 8019fc2:	9906      	ldr	r1, [sp, #24]
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8019fc4:	9b00      	ldr	r3, [sp, #0]
                        if (media_ptr -> fx_media_driver_status)
 8019fc6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8019fca:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
                        if (media_ptr -> fx_media_driver_status)
 8019fce:	bb18      	cbnz	r0, 801a018 <_fx_utility_logical_sector_flush+0x170>
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8019fd0:	7420      	strb	r0, [r4, #16]
                        remaining_dirty--;
 8019fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8019fd6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8019fd8:	3b01      	subs	r3, #1
 8019fda:	624b      	str	r3, [r1, #36]	; 0x24
                if (invalidate)
 8019fdc:	f1bb 0f00 	cmp.w	fp, #0
 8019fe0:	d010      	beq.n	801a004 <_fx_utility_logical_sector_flush+0x15c>
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8019fe2:	9b00      	ldr	r3, [sp, #0]
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8019fe4:	f04f 32ff 	mov.w	r2, #4294967295
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8019fe8:	7c20      	ldrb	r0, [r4, #16]
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8019fea:	7463      	strb	r3, [r4, #17]
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8019fec:	f04f 33ff 	mov.w	r3, #4294967295
 8019ff0:	e9c4 2302 	strd	r2, r3, [r4, #8]
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8019ff4:	b130      	cbz	r0, 801a004 <_fx_utility_logical_sector_flush+0x15c>
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8019ff6:	9b00      	ldr	r3, [sp, #0]
                        remaining_dirty--;
 8019ff8:	f10a 3aff 	add.w	sl, sl, #4294967295
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8019ffc:	7423      	strb	r3, [r4, #16]
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8019ffe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801a000:	3b01      	subs	r3, #1
 801a002:	624b      	str	r3, [r1, #36]	; 0x24
                sectors--;
 801a004:	f118 38ff 	adds.w	r8, r8, #4294967295
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801a008:	f105 35ff 	add.w	r5, r5, #4294967295
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 801a00c:	6964      	ldr	r4, [r4, #20]
                sectors--;
 801a00e:	f149 39ff 	adc.w	r9, r9, #4294967295
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801a012:	1c6e      	adds	r6, r5, #1
 801a014:	d18f      	bne.n	8019f36 <_fx_utility_logical_sector_flush+0x8e>
            }
        }
    }

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 801a016:	2000      	movs	r0, #0
}
 801a018:	b00b      	add	sp, #44	; 0x2c
 801a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 801a01e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801a022:	9309      	str	r3, [sp, #36]	; 0x24
        while (valid_bit_map)
 801a024:	2b00      	cmp	r3, #0
 801a026:	d0f6      	beq.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801a028:	fabb f38b 	clz	r3, fp
 801a02c:	095b      	lsrs	r3, r3, #5
 801a02e:	9306      	str	r3, [sp, #24]
 801a030:	ea5a 030b 	orrs.w	r3, sl, fp
 801a034:	d0ef      	beq.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
            if ((sectors == 0) || (starting_sector > ending_sector))
 801a036:	e9dd 3014 	ldrd	r3, r0, [sp, #80]	; 0x50
 801a03a:	4303      	orrs	r3, r0
 801a03c:	d0eb      	beq.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
 801a03e:	ea52 0301 	orrs.w	r3, r2, r1
 801a042:	bf14      	ite	ne
 801a044:	2301      	movne	r3, #1
 801a046:	2300      	moveq	r3, #0
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d1e4      	bne.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
 801a04c:	9308      	str	r3, [sp, #32]
            if (use_starting_sector)
 801a04e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
            if ((sectors == 0) || (starting_sector > ending_sector))
 801a052:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
            if (use_starting_sector)
 801a056:	2c00      	cmp	r4, #0
 801a058:	bf08      	it	eq
 801a05a:	2b20      	cmpeq	r3, #32
 801a05c:	f080 80b4 	bcs.w	801a1c8 <_fx_utility_logical_sector_flush+0x320>
                bit_set =  (index % 32);
 801a060:	f242 43a0 	movw	r3, #9376	; 0x24a0
 801a064:	9a02      	ldr	r2, [sp, #8]
 801a066:	f859 3003 	ldr.w	r3, [r9, r3]
 801a06a:	f003 031f 	and.w	r3, r3, #31
 801a06e:	4013      	ands	r3, r2
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 801a070:	009e      	lsls	r6, r3, #2
                bit_set =  (index % 32);
 801a072:	9308      	str	r3, [sp, #32]
 801a074:	eb06 0446 	add.w	r4, r6, r6, lsl #1
            remaining_valid =  0;
 801a078:	2500      	movs	r5, #0
 801a07a:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
 801a07e:	f504 644a 	add.w	r4, r4, #3232	; 0xca0
 801a082:	e9cd 7800 	strd	r7, r8, [sp]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801a086:	7c63      	ldrb	r3, [r4, #17]
 801a088:	b183      	cbz	r3, 801a0ac <_fx_utility_logical_sector_flush+0x204>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801a08a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 801a08e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a092:	4607      	mov	r7, r0
 801a094:	4299      	cmp	r1, r3
 801a096:	bf08      	it	eq
 801a098:	4290      	cmpeq	r0, r2
 801a09a:	d306      	bcc.n	801a0aa <_fx_utility_logical_sector_flush+0x202>
 801a09c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a0a0:	428b      	cmp	r3, r1
 801a0a2:	bf08      	it	eq
 801a0a4:	4282      	cmpeq	r2, r0
 801a0a6:	f080 809f 	bcs.w	801a1e8 <_fx_utility_logical_sector_flush+0x340>
                            remaining_valid++;
 801a0aa:	3501      	adds	r5, #1
 801a0ac:	ea4b 030a 	orr.w	r3, fp, sl
 801a0b0:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	f000 8096 	beq.w	801a1e4 <_fx_utility_logical_sector_flush+0x33c>
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801a0b8:	e9dd 2000 	ldrd	r2, r0, [sp]
 801a0bc:	4310      	orrs	r0, r2
 801a0be:	d103      	bne.n	801a0c8 <_fx_utility_logical_sector_flush+0x220>
 801a0c0:	9a06      	ldr	r2, [sp, #24]
 801a0c2:	2a00      	cmp	r2, #0
 801a0c4:	f040 81a6 	bne.w	801a414 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801a0c8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 801a0cc:	b17b      	cbz	r3, 801a0ee <_fx_utility_logical_sector_flush+0x246>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801a0ce:	e9d4 7808 	ldrd	r7, r8, [r4, #32]
 801a0d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a0d6:	4598      	cmp	r8, r3
 801a0d8:	bf08      	it	eq
 801a0da:	4297      	cmpeq	r7, r2
 801a0dc:	d306      	bcc.n	801a0ec <_fx_utility_logical_sector_flush+0x244>
 801a0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a0e2:	4543      	cmp	r3, r8
 801a0e4:	bf08      	it	eq
 801a0e6:	42ba      	cmpeq	r2, r7
 801a0e8:	f080 80d0 	bcs.w	801a28c <_fx_utility_logical_sector_flush+0x3e4>
                            remaining_valid++;
 801a0ec:	3501      	adds	r5, #1
 801a0ee:	460b      	mov	r3, r1
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801a0f0:	b918      	cbnz	r0, 801a0fa <_fx_utility_logical_sector_flush+0x252>
 801a0f2:	9a06      	ldr	r2, [sp, #24]
 801a0f4:	2a00      	cmp	r2, #0
 801a0f6:	f040 818d 	bne.w	801a414 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801a0fa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 801a0fe:	b17b      	cbz	r3, 801a120 <_fx_utility_logical_sector_flush+0x278>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801a100:	e9d4 780e 	ldrd	r7, r8, [r4, #56]	; 0x38
 801a104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a108:	4598      	cmp	r8, r3
 801a10a:	bf08      	it	eq
 801a10c:	4297      	cmpeq	r7, r2
 801a10e:	d306      	bcc.n	801a11e <_fx_utility_logical_sector_flush+0x276>
 801a110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a114:	4543      	cmp	r3, r8
 801a116:	bf08      	it	eq
 801a118:	42ba      	cmpeq	r2, r7
 801a11a:	f080 8119 	bcs.w	801a350 <_fx_utility_logical_sector_flush+0x4a8>
                            remaining_valid++;
 801a11e:	3501      	adds	r5, #1
 801a120:	460b      	mov	r3, r1
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801a122:	b918      	cbnz	r0, 801a12c <_fx_utility_logical_sector_flush+0x284>
 801a124:	9a06      	ldr	r2, [sp, #24]
 801a126:	2a00      	cmp	r2, #0
 801a128:	f040 8174 	bne.w	801a414 <_fx_utility_logical_sector_flush+0x56c>
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801a12c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801a130:	b17b      	cbz	r3, 801a152 <_fx_utility_logical_sector_flush+0x2aa>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801a132:	e9d4 7814 	ldrd	r7, r8, [r4, #80]	; 0x50
 801a136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a13a:	4598      	cmp	r8, r3
 801a13c:	bf08      	it	eq
 801a13e:	4297      	cmpeq	r7, r2
 801a140:	d306      	bcc.n	801a150 <_fx_utility_logical_sector_flush+0x2a8>
 801a142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a146:	4543      	cmp	r3, r8
 801a148:	bf08      	it	eq
 801a14a:	42ba      	cmpeq	r2, r7
 801a14c:	f080 8167 	bcs.w	801a41e <_fx_utility_logical_sector_flush+0x576>
                            remaining_valid++;
 801a150:	3501      	adds	r5, #1
 801a152:	460b      	mov	r3, r1
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 801a154:	3680      	adds	r6, #128	; 0x80
            } while (index < cache_size);
 801a156:	9a07      	ldr	r2, [sp, #28]
 801a158:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 801a15c:	4296      	cmp	r6, r2
 801a15e:	d392      	bcc.n	801a086 <_fx_utility_logical_sector_flush+0x1de>
 801a160:	e9dd 7800 	ldrd	r7, r8, [sp]
            if ((invalidate) && (remaining_valid == 0))
 801a164:	f1bb 0f00 	cmp.w	fp, #0
 801a168:	d009      	beq.n	801a17e <_fx_utility_logical_sector_flush+0x2d6>
 801a16a:	b945      	cbnz	r5, 801a17e <_fx_utility_logical_sector_flush+0x2d6>
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 801a16c:	2101      	movs	r1, #1
 801a16e:	9808      	ldr	r0, [sp, #32]
 801a170:	f8d9 2020 	ldr.w	r2, [r9, #32]
 801a174:	4081      	lsls	r1, r0
 801a176:	ea22 0201 	bic.w	r2, r2, r1
 801a17a:	f8c9 2020 	str.w	r2, [r9, #32]
            if (use_starting_sector)
 801a17e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 801a182:	2a00      	cmp	r2, #0
 801a184:	bf08      	it	eq
 801a186:	2920      	cmpeq	r1, #32
 801a188:	f080 81a6 	bcs.w	801a4d8 <_fx_utility_logical_sector_flush+0x630>
                starting_sector++;
 801a18c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a190:	3101      	adds	r1, #1
 801a192:	f142 0200 	adc.w	r2, r2, #0
 801a196:	e9cd 1202 	strd	r1, r2, [sp, #8]
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	f43f af3b 	beq.w	801a016 <_fx_utility_logical_sector_flush+0x16e>
            if ((sectors == 0) || (starting_sector > ending_sector))
 801a1a0:	ea57 0308 	orrs.w	r3, r7, r8
 801a1a4:	f43f af37 	beq.w	801a016 <_fx_utility_logical_sector_flush+0x16e>
 801a1a8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801a1ac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a1b0:	4294      	cmp	r4, r2
 801a1b2:	bf08      	it	eq
 801a1b4:	428b      	cmpeq	r3, r1
 801a1b6:	f4ff af2e 	bcc.w	801a016 <_fx_utility_logical_sector_flush+0x16e>
            if (use_starting_sector)
 801a1ba:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 801a1be:	2c00      	cmp	r4, #0
 801a1c0:	bf08      	it	eq
 801a1c2:	2b20      	cmpeq	r3, #32
 801a1c4:	f4ff af4c 	bcc.w	801a060 <_fx_utility_logical_sector_flush+0x1b8>
                while ((valid_bit_map & 1) == 0)
 801a1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1ca:	07d8      	lsls	r0, r3, #31
 801a1cc:	f100 818d 	bmi.w	801a4ea <_fx_utility_logical_sector_flush+0x642>
 801a1d0:	9a08      	ldr	r2, [sp, #32]
                    valid_bit_map =  valid_bit_map >> 1;
 801a1d2:	085b      	lsrs	r3, r3, #1
                    bit_set++;
 801a1d4:	3201      	adds	r2, #1
                while ((valid_bit_map & 1) == 0)
 801a1d6:	07d9      	lsls	r1, r3, #31
 801a1d8:	d5fb      	bpl.n	801a1d2 <_fx_utility_logical_sector_flush+0x32a>
 801a1da:	9309      	str	r3, [sp, #36]	; 0x24
 801a1dc:	4613      	mov	r3, r2
 801a1de:	9208      	str	r2, [sp, #32]
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 801a1e0:	009e      	lsls	r6, r3, #2
 801a1e2:	e747      	b.n	801a074 <_fx_utility_logical_sector_flush+0x1cc>
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801a1e4:	469a      	mov	sl, r3
 801a1e6:	e7b5      	b.n	801a154 <_fx_utility_logical_sector_flush+0x2ac>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a1e8:	7c21      	ldrb	r1, [r4, #16]
 801a1ea:	b389      	cbz	r1, 801a250 <_fx_utility_logical_sector_flush+0x3a8>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801a1ec:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 801a1f0:	bb71      	cbnz	r1, 801a250 <_fx_utility_logical_sector_flush+0x3a8>
                                media_ptr -> fx_media_driver_write_requests++;
 801a1f2:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a1f6:	f04f 0801 	mov.w	r8, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801a1fa:	6821      	ldr	r1, [r4, #0]
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a1fc:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 801a1fe:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801a200:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801a204:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 801a208:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 801a20c:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a20e:	e9c9 8222 	strd	r8, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 801a212:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801a216:	7ca3      	ldrb	r3, [r4, #18]
 801a218:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801a21c:	7ca3      	ldrb	r3, [r4, #18]
 801a21e:	2b04      	cmp	r3, #4
 801a220:	d002      	beq.n	801a228 <_fx_utility_logical_sector_flush+0x380>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801a222:	2301      	movs	r3, #1
 801a224:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801a228:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 801a22c:	4648      	mov	r0, r9
 801a22e:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801a230:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 801a232:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801a236:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 801a23a:	2800      	cmp	r0, #0
 801a23c:	f47f aeec 	bne.w	801a018 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801a240:	7420      	strb	r0, [r4, #16]
                                remaining_dirty--;
 801a242:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801a246:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 801a24a:	3b01      	subs	r3, #1
 801a24c:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 801a250:	f1bb 0f00 	cmp.w	fp, #0
 801a254:	d011      	beq.n	801a27a <_fx_utility_logical_sector_flush+0x3d2>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801a256:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801a258:	f04f 30ff 	mov.w	r0, #4294967295
 801a25c:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a260:	7c22      	ldrb	r2, [r4, #16]
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801a262:	7463      	strb	r3, [r4, #17]
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801a264:	e9c4 0102 	strd	r0, r1, [r4, #8]
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a268:	b13a      	cbz	r2, 801a27a <_fx_utility_logical_sector_flush+0x3d2>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801a26a:	7423      	strb	r3, [r4, #16]
                                remaining_dirty--;
 801a26c:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801a270:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 801a274:	3b01      	subs	r3, #1
 801a276:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        sectors--;
 801a27a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a27e:	f112 32ff 	adds.w	r2, r2, #4294967295
 801a282:	f143 33ff 	adc.w	r3, r3, #4294967295
 801a286:	e9cd 2300 	strd	r2, r3, [sp]
 801a28a:	e70f      	b.n	801a0ac <_fx_utility_logical_sector_flush+0x204>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a28c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a290:	b3a1      	cbz	r1, 801a2fc <_fx_utility_logical_sector_flush+0x454>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801a292:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 801a296:	bb89      	cbnz	r1, 801a2fc <_fx_utility_logical_sector_flush+0x454>
                                media_ptr -> fx_media_driver_write_requests++;
 801a298:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a29c:	f04f 0e01 	mov.w	lr, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801a2a0:	69a1      	ldr	r1, [r4, #24]
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a2a2:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 801a2a4:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801a2a6:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801a2aa:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 801a2ae:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 801a2b2:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a2b4:	e9c9 e222 	strd	lr, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 801a2b8:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801a2bc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801a2c0:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801a2c4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801a2c8:	2b04      	cmp	r3, #4
 801a2ca:	d002      	beq.n	801a2d2 <_fx_utility_logical_sector_flush+0x42a>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801a2cc:	2301      	movs	r3, #1
 801a2ce:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801a2d2:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 801a2d6:	4648      	mov	r0, r9
 801a2d8:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801a2da:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 801a2dc:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801a2e0:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 801a2e4:	2800      	cmp	r0, #0
 801a2e6:	f47f ae97 	bne.w	801a018 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801a2ea:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
                                remaining_dirty--;
 801a2ee:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801a2f2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 801a2f6:	3b01      	subs	r3, #1
 801a2f8:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 801a2fc:	f1bb 0f00 	cmp.w	fp, #0
 801a300:	d014      	beq.n	801a32c <_fx_utility_logical_sector_flush+0x484>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801a302:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801a304:	f04f 30ff 	mov.w	r0, #4294967295
 801a308:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a30c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801a310:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801a314:	e9c4 0108 	strd	r0, r1, [r4, #32]
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a318:	b142      	cbz	r2, 801a32c <_fx_utility_logical_sector_flush+0x484>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801a31a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                                remaining_dirty--;
 801a31e:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801a322:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 801a326:	3b01      	subs	r3, #1
 801a328:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 801a32c:	ea4b 030a 	orr.w	r3, fp, sl
                        sectors--;
 801a330:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a334:	f111 31ff 	adds.w	r1, r1, #4294967295
 801a338:	f142 32ff 	adc.w	r2, r2, #4294967295
 801a33c:	e9cd 1200 	strd	r1, r2, [sp]
 801a340:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801a342:	2b00      	cmp	r3, #0
 801a344:	f43f af4e 	beq.w	801a1e4 <_fx_utility_logical_sector_flush+0x33c>
 801a348:	e9dd 2000 	ldrd	r2, r0, [sp]
 801a34c:	4310      	orrs	r0, r2
 801a34e:	e6cf      	b.n	801a0f0 <_fx_utility_logical_sector_flush+0x248>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a350:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 801a354:	b3a1      	cbz	r1, 801a3c0 <_fx_utility_logical_sector_flush+0x518>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801a356:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 801a35a:	bb89      	cbnz	r1, 801a3c0 <_fx_utility_logical_sector_flush+0x518>
                                media_ptr -> fx_media_driver_write_requests++;
 801a35c:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a360:	f04f 0c01 	mov.w	ip, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801a364:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a366:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 801a368:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801a36a:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801a36e:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 801a372:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 801a376:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a378:	e9c9 c222 	strd	ip, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 801a37c:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801a380:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801a384:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801a388:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801a38c:	2b04      	cmp	r3, #4
 801a38e:	d002      	beq.n	801a396 <_fx_utility_logical_sector_flush+0x4ee>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801a390:	2301      	movs	r3, #1
 801a392:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801a396:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 801a39a:	4648      	mov	r0, r9
 801a39c:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801a39e:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 801a3a0:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801a3a4:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 801a3a8:	2800      	cmp	r0, #0
 801a3aa:	f47f ae35 	bne.w	801a018 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801a3ae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
                                remaining_dirty--;
 801a3b2:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801a3b6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 801a3ba:	3b01      	subs	r3, #1
 801a3bc:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 801a3c0:	f1bb 0f00 	cmp.w	fp, #0
 801a3c4:	d014      	beq.n	801a3f0 <_fx_utility_logical_sector_flush+0x548>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801a3c6:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801a3c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3cc:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a3d0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801a3d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801a3d8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a3dc:	b142      	cbz	r2, 801a3f0 <_fx_utility_logical_sector_flush+0x548>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801a3de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
                                remaining_dirty--;
 801a3e2:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801a3e6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 801a3ea:	3b01      	subs	r3, #1
 801a3ec:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 801a3f0:	ea4a 030b 	orr.w	r3, sl, fp
                        sectors--;
 801a3f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a3f8:	f111 31ff 	adds.w	r1, r1, #4294967295
 801a3fc:	f142 32ff 	adc.w	r2, r2, #4294967295
 801a400:	e9cd 1200 	strd	r1, r2, [sp]
 801a404:	4619      	mov	r1, r3
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801a406:	2b00      	cmp	r3, #0
 801a408:	f43f aeec 	beq.w	801a1e4 <_fx_utility_logical_sector_flush+0x33c>
 801a40c:	e9dd 2000 	ldrd	r2, r0, [sp]
 801a410:	4310      	orrs	r0, r2
 801a412:	e686      	b.n	801a122 <_fx_utility_logical_sector_flush+0x27a>
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801a414:	2100      	movs	r1, #0
 801a416:	2200      	movs	r2, #0
 801a418:	e9cd 1200 	strd	r1, r2, [sp]
 801a41c:	e69a      	b.n	801a154 <_fx_utility_logical_sector_flush+0x2ac>
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a41e:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 801a422:	b399      	cbz	r1, 801a48c <_fx_utility_logical_sector_flush+0x5e4>
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801a424:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 801a428:	bb81      	cbnz	r1, 801a48c <_fx_utility_logical_sector_flush+0x5e4>
                                media_ptr -> fx_media_driver_write_requests++;
 801a42a:	f8d9 31b0 	ldr.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a42e:	2001      	movs	r0, #1
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801a430:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a432:	2290      	movs	r2, #144	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 801a434:	3301      	adds	r3, #1
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801a436:	f8c9 7094 	str.w	r7, [r9, #148]	; 0x94
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801a43a:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
                                media_ptr -> fx_media_driver_write_requests++;
 801a43e:	f8c9 31b0 	str.w	r3, [r9, #432]	; 0x1b0
                                media_ptr -> fx_media_driver_sectors =          1;
 801a442:	2301      	movs	r3, #1
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801a444:	e9c9 0222 	strd	r0, r2, [r9, #136]	; 0x88
                                media_ptr -> fx_media_driver_sectors =          1;
 801a448:	f8c9 3098 	str.w	r3, [r9, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801a44c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 801a450:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801a454:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 801a458:	2b04      	cmp	r3, #4
 801a45a:	d002      	beq.n	801a462 <_fx_utility_logical_sector_flush+0x5ba>
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801a45c:	2301      	movs	r3, #1
 801a45e:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801a462:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 801a466:	4648      	mov	r0, r9
 801a468:	4798      	blx	r3
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801a46a:	2300      	movs	r3, #0
                                if (media_ptr -> fx_media_driver_status)
 801a46c:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801a470:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
                                if (media_ptr -> fx_media_driver_status)
 801a474:	2800      	cmp	r0, #0
 801a476:	f47f adcf 	bne.w	801a018 <_fx_utility_logical_sector_flush+0x170>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801a47a:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
                                remaining_dirty--;
 801a47e:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801a482:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 801a486:	3b01      	subs	r3, #1
 801a488:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        if (invalidate)
 801a48c:	f1bb 0f00 	cmp.w	fp, #0
 801a490:	d014      	beq.n	801a4bc <_fx_utility_logical_sector_flush+0x614>
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801a492:	2300      	movs	r3, #0
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801a494:	f04f 30ff 	mov.w	r0, #4294967295
 801a498:	f04f 31ff 	mov.w	r1, #4294967295
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a49c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801a4a0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801a4a4:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801a4a8:	b142      	cbz	r2, 801a4bc <_fx_utility_logical_sector_flush+0x614>
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801a4aa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
                                remaining_dirty--;
 801a4ae:	f10a 3aff 	add.w	sl, sl, #4294967295
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801a4b2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 801a4b6:	3b01      	subs	r3, #1
 801a4b8:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
                        sectors--;
 801a4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a4c0:	f112 32ff 	adds.w	r2, r2, #4294967295
 801a4c4:	f143 33ff 	adc.w	r3, r3, #4294967295
 801a4c8:	e9cd 2300 	strd	r2, r3, [sp]
 801a4cc:	ea5a 030b 	orrs.w	r3, sl, fp
 801a4d0:	bf08      	it	eq
 801a4d2:	f04f 0a00 	moveq.w	sl, #0
 801a4d6:	e63d      	b.n	801a154 <_fx_utility_logical_sector_flush+0x2ac>
                bit_set++;
 801a4d8:	9a08      	ldr	r2, [sp, #32]
 801a4da:	3201      	adds	r2, #1
 801a4dc:	9208      	str	r2, [sp, #32]
        while (valid_bit_map)
 801a4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4e0:	0852      	lsrs	r2, r2, #1
 801a4e2:	9209      	str	r2, [sp, #36]	; 0x24
 801a4e4:	f47f ae59 	bne.w	801a19a <_fx_utility_logical_sector_flush+0x2f2>
 801a4e8:	e595      	b.n	801a016 <_fx_utility_logical_sector_flush+0x16e>
 801a4ea:	9b08      	ldr	r3, [sp, #32]
 801a4ec:	e678      	b.n	801a1e0 <_fx_utility_logical_sector_flush+0x338>
 801a4ee:	bf00      	nop

0801a4f0 <BSP_SDRAM_MspInit>:
{
	static DMA_HandleTypeDef dma_handle;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 801a4f0:	4b53      	ldr	r3, [pc, #332]	; (801a640 <BSP_SDRAM_MspInit+0x150>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Common GPIO configuration */
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 801a4f2:	2102      	movs	r1, #2
	__HAL_RCC_FMC_CLK_ENABLE();
 801a4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a4f6:	f042 0201 	orr.w	r2, r2, #1
{
 801a4fa:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_FMC_CLK_ENABLE();
 801a4fc:	639a      	str	r2, [r3, #56]	; 0x38
{
 801a4fe:	4606      	mov	r6, r0
	__HAL_RCC_FMC_CLK_ENABLE();
 801a500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	gpio_init_structure.Pull = GPIO_PULLUP;
 801a502:	2001      	movs	r0, #1
{
 801a504:	b08e      	sub	sp, #56	; 0x38
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Alternate = GPIO_AF12_FMC;

	/* GPIOC configuration */
	gpio_init_structure.Pin = GPIO_PIN_3;
 801a506:	2508      	movs	r5, #8
	__HAL_RCC_FMC_CLK_ENABLE();
 801a508:	4002      	ands	r2, r0
	gpio_init_structure.Pin = GPIO_PIN_3;
 801a50a:	ac0e      	add	r4, sp, #56	; 0x38
	__HAL_RCC_FMC_CLK_ENABLE();
 801a50c:	9201      	str	r2, [sp, #4]
 801a50e:	9a01      	ldr	r2, [sp, #4]
	__DMAx_CLK_ENABLE()
 801a510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a512:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801a516:	631a      	str	r2, [r3, #48]	; 0x30
 801a518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a51a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 801a51e:	9202      	str	r2, [sp, #8]
 801a520:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801a522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a524:	f042 0204 	orr.w	r2, r2, #4
 801a528:	631a      	str	r2, [r3, #48]	; 0x30
 801a52a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a52c:	f002 0204 	and.w	r2, r2, #4
 801a530:	9203      	str	r2, [sp, #12]
 801a532:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801a534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a536:	432a      	orrs	r2, r5
 801a538:	631a      	str	r2, [r3, #48]	; 0x30
 801a53a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a53c:	402a      	ands	r2, r5
 801a53e:	9204      	str	r2, [sp, #16]
 801a540:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801a542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a544:	f042 0210 	orr.w	r2, r2, #16
 801a548:	631a      	str	r2, [r3, #48]	; 0x30
 801a54a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a54c:	f002 0210 	and.w	r2, r2, #16
 801a550:	9205      	str	r2, [sp, #20]
 801a552:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801a554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a556:	f042 0220 	orr.w	r2, r2, #32
 801a55a:	631a      	str	r2, [r3, #48]	; 0x30
 801a55c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a55e:	f002 0220 	and.w	r2, r2, #32
 801a562:	9206      	str	r2, [sp, #24]
 801a564:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801a566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a56c:	631a      	str	r2, [r3, #48]	; 0x30
 801a56e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a570:	f002 0240 	and.w	r2, r2, #64	; 0x40
 801a574:	9207      	str	r2, [sp, #28]
 801a576:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801a578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a57a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801a57e:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 801a580:	220c      	movs	r2, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801a582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_init_structure.Pin = GPIO_PIN_3;
 801a584:	f844 5d14 	str.w	r5, [r4, #-20]!
	/* GPIOH configuration */
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);

	/* Configure common DMA parameters */
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 801a588:	2500      	movs	r5, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801a58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 801a58e:	910a      	str	r1, [sp, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 801a590:	910c      	str	r1, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 801a592:	4621      	mov	r1, r4
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801a594:	9308      	str	r3, [sp, #32]
	gpio_init_structure.Pull = GPIO_PULLUP;
 801a596:	900b      	str	r0, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 801a598:	482a      	ldr	r0, [pc, #168]	; (801a644 <BSP_SDRAM_MspInit+0x154>)
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 801a59a:	920d      	str	r2, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801a59c:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 801a59e:	f000 fd83 	bl	801b0a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 801a5a2:	f24c 7303 	movw	r3, #50947	; 0xc703
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 801a5a6:	4621      	mov	r1, r4
 801a5a8:	4827      	ldr	r0, [pc, #156]	; (801a648 <BSP_SDRAM_MspInit+0x158>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 801a5aa:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 801a5ac:	f000 fd7c 	bl	801b0a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 801a5b0:	f64f 7383 	movw	r3, #65411	; 0xff83
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 801a5b4:	4621      	mov	r1, r4
 801a5b6:	4825      	ldr	r0, [pc, #148]	; (801a64c <BSP_SDRAM_MspInit+0x15c>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 801a5b8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 801a5ba:	f000 fd75 	bl	801b0a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin =
 801a5be:	f64f 033f 	movw	r3, #63551	; 0xf83f
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 801a5c2:	4621      	mov	r1, r4
 801a5c4:	4822      	ldr	r0, [pc, #136]	; (801a650 <BSP_SDRAM_MspInit+0x160>)
	gpio_init_structure.Pin =
 801a5c6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 801a5c8:	f000 fd6e 	bl	801b0a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 801a5cc:	f248 1333 	movw	r3, #33075	; 0x8133
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 801a5d0:	4621      	mov	r1, r4
 801a5d2:	4820      	ldr	r0, [pc, #128]	; (801a654 <BSP_SDRAM_MspInit+0x164>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 801a5d4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 801a5d6:	f000 fd67 	bl	801b0a8 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 801a5da:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 801a5dc:	4621      	mov	r1, r4
 801a5de:	481e      	ldr	r0, [pc, #120]	; (801a658 <BSP_SDRAM_MspInit+0x168>)
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 801a5e0:	4c1e      	ldr	r4, [pc, #120]	; (801a65c <BSP_SDRAM_MspInit+0x16c>)
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 801a5e2:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 801a5e4:	f000 fd60 	bl	801b0a8 <HAL_GPIO_Init>
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 801a5e8:	f44f 7300 	mov.w	r3, #512	; 0x200
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 801a5ec:	2180      	movs	r1, #128	; 0x80
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 801a5ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801a5f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 801a5f6:	60e3      	str	r3, [r4, #12]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	dma_handle.Init.Mode = DMA_NORMAL;
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 801a5f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 801a5fc:	60a1      	str	r1, [r4, #8]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801a5fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 801a602:	6122      	str	r2, [r4, #16]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801a604:	2203      	movs	r2, #3
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 801a606:	6223      	str	r3, [r4, #32]
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;

	dma_handle.Instance = SDRAM_DMAx_STREAM;
 801a608:	4b15      	ldr	r3, [pc, #84]	; (801a660 <BSP_SDRAM_MspInit+0x170>)
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 801a60a:	6325      	str	r5, [r4, #48]	; 0x30
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801a60c:	6160      	str	r0, [r4, #20]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsdram, hdma, dma_handle);

	/* Deinitialize the stream for new transfer */
	HAL_DMA_DeInit(&dma_handle);
 801a60e:	4620      	mov	r0, r4
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 801a610:	6334      	str	r4, [r6, #48]	; 0x30
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801a612:	61a1      	str	r1, [r4, #24]
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801a614:	62a2      	str	r2, [r4, #40]	; 0x28
	dma_handle.Init.Mode = DMA_NORMAL;
 801a616:	61e5      	str	r5, [r4, #28]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801a618:	6265      	str	r5, [r4, #36]	; 0x24
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 801a61a:	62e5      	str	r5, [r4, #44]	; 0x2c
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 801a61c:	63a6      	str	r6, [r4, #56]	; 0x38
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 801a61e:	e9c4 3500 	strd	r3, r5, [r4]
	HAL_DMA_DeInit(&dma_handle);
 801a622:	f000 fa1b 	bl	801aa5c <HAL_DMA_DeInit>

	/* Configure the DMA stream */
	HAL_DMA_Init(&dma_handle);
 801a626:	4620      	mov	r0, r4
 801a628:	f000 f97c 	bl	801a924 <HAL_DMA_Init>

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 801a62c:	462a      	mov	r2, r5
 801a62e:	210f      	movs	r1, #15
 801a630:	2038      	movs	r0, #56	; 0x38
 801a632:	f000 f8e9 	bl	801a808 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 801a636:	2038      	movs	r0, #56	; 0x38
 801a638:	f000 f91c 	bl	801a874 <HAL_NVIC_EnableIRQ>
}
 801a63c:	b00e      	add	sp, #56	; 0x38
 801a63e:	bd70      	pop	{r4, r5, r6, pc}
 801a640:	40023800 	.word	0x40023800
 801a644:	40020800 	.word	0x40020800
 801a648:	40020c00 	.word	0x40020c00
 801a64c:	40021000 	.word	0x40021000
 801a650:	40021400 	.word	0x40021400
 801a654:	40021800 	.word	0x40021800
 801a658:	40021c00 	.word	0x40021c00
 801a65c:	20001a98 	.word	0x20001a98
 801a660:	40026410 	.word	0x40026410

0801a664 <BSP_SDRAM_Init>:
{
 801a664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 801a668:	483d      	ldr	r0, [pc, #244]	; (801a760 <BSP_SDRAM_Init+0xfc>)
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 801a66a:	2600      	movs	r6, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 801a66c:	4d3d      	ldr	r5, [pc, #244]	; (801a764 <BSP_SDRAM_Init+0x100>)
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801a66e:	2140      	movs	r1, #64	; 0x40
	Timing.LoadToActiveDelay = 2;
 801a670:	4c3d      	ldr	r4, [pc, #244]	; (801a768 <BSP_SDRAM_Init+0x104>)
	sdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 801a672:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 801a676:	f04f 0810 	mov.w	r8, #16
	Timing.LoadToActiveDelay = 2;
 801a67a:	f04f 0902 	mov.w	r9, #2
	Timing.ExitSelfRefreshDelay = 7;
 801a67e:	2307      	movs	r3, #7
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801a680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	Timing.SelfRefreshTime = 4;
 801a684:	f04f 0a04 	mov.w	sl, #4
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 801a688:	f44f 7780 	mov.w	r7, #256	; 0x100
{
 801a68c:	b083      	sub	sp, #12
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 801a68e:	6028      	str	r0, [r5, #0]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801a690:	6169      	str	r1, [r5, #20]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 801a692:	4628      	mov	r0, r5
 801a694:	4631      	mov	r1, r6
	Timing.ExitSelfRefreshDelay = 7;
 801a696:	6063      	str	r3, [r4, #4]
	Timing.RowCycleDelay = 7;
 801a698:	60e3      	str	r3, [r4, #12]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 801a69a:	61af      	str	r7, [r5, #24]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 801a69c:	2701      	movs	r7, #1
	Timing.SelfRefreshTime = 4;
 801a69e:	f8c4 a008 	str.w	sl, [r4, #8]
	Timing.LoadToActiveDelay = 2;
 801a6a2:	f8c4 9000 	str.w	r9, [r4]
	Timing.RCDDelay = 2;
 801a6a6:	f8c4 9018 	str.w	r9, [r4, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801a6aa:	61ee      	str	r6, [r5, #28]
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801a6ac:	62ae      	str	r6, [r5, #40]	; 0x28
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801a6ae:	f8c5 a00c 	str.w	sl, [r5, #12]
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 801a6b2:	f8c5 8010 	str.w	r8, [r5, #16]
 801a6b6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 801a770 <BSP_SDRAM_Init+0x10c>
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801a6ba:	e9c5 c208 	strd	ip, r2, [r5, #32]
	Timing.RPDelay = 2;
 801a6be:	e9c4 9904 	strd	r9, r9, [r4, #16]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 801a6c2:	e9c5 6601 	strd	r6, r6, [r5, #4]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 801a6c6:	f7ff ff13 	bl	801a4f0 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 801a6ca:	4621      	mov	r1, r4
 801a6cc:	4628      	mov	r0, r5
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 801a6ce:	4c27      	ldr	r4, [pc, #156]	; (801a76c <BSP_SDRAM_Init+0x108>)
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 801a6d0:	f001 f9da 	bl	801ba88 <HAL_SDRAM_Init>
 801a6d4:	1b83      	subs	r3, r0, r6
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a6d6:	4621      	mov	r1, r4
 801a6d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 801a6dc:	bf18      	it	ne
 801a6de:	2301      	movne	r3, #1
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a6e0:	4628      	mov	r0, r5
	__IO uint32_t tmpmrd = 0;
 801a6e2:	9601      	str	r6, [sp, #4]
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 801a6e4:	f88b 3000 	strb.w	r3, [fp]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801a6e8:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 801a6ec:	60e6      	str	r6, [r4, #12]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 801a6ee:	6027      	str	r7, [r4, #0]
	Command.AutoRefreshNumber = 1;
 801a6f0:	60a7      	str	r7, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a6f2:	f001 f9eb 	bl	801bacc <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 801a6f6:	4638      	mov	r0, r7
 801a6f8:	f000 f860 	bl	801a7bc <HAL_Delay>
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a6fc:	4621      	mov	r1, r4
 801a6fe:	4628      	mov	r0, r5
 801a700:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801a704:	e9c4 9800 	strd	r9, r8, [r4]
	Command.ModeRegisterDefinition = 0;
 801a708:	e9c4 7602 	strd	r7, r6, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a70c:	f001 f9de 	bl	801bacc <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801a710:	f04f 0c03 	mov.w	ip, #3
	Command.AutoRefreshNumber = 8;
 801a714:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a716:	4621      	mov	r1, r4
 801a718:	4628      	mov	r0, r5
 801a71a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801a71e:	f8c4 c000 	str.w	ip, [r4]
	Command.AutoRefreshNumber = 8;
 801a722:	60a3      	str	r3, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801a724:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 801a728:	60e6      	str	r6, [r4, #12]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a72a:	f001 f9cf 	bl	801bacc <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 801a72e:	f44f 7308 	mov.w	r3, #544	; 0x220
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a732:	4621      	mov	r1, r4
 801a734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a738:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 801a73a:	9301      	str	r3, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 801a73c:	9b01      	ldr	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801a73e:	e9c4 a800 	strd	sl, r8, [r4]
	Command.ModeRegisterDefinition = tmpmrd;
 801a742:	e9c4 7302 	strd	r7, r3, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801a746:	f001 f9c1 	bl	801bacc <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 801a74a:	4628      	mov	r0, r5
 801a74c:	f240 6103 	movw	r1, #1539	; 0x603
 801a750:	f001 f9d6 	bl	801bb00 <HAL_SDRAM_ProgramRefreshRate>
}
 801a754:	f89b 0000 	ldrb.w	r0, [fp]
 801a758:	b003      	add	sp, #12
 801a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a75e:	bf00      	nop
 801a760:	a0000140 	.word	0xa0000140
 801a764:	20007914 	.word	0x20007914
 801a768:	20001a7c 	.word	0x20001a7c
 801a76c:	20001a6c 	.word	0x20001a6c
 801a770:	200000e0 	.word	0x200000e0

0801a774 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 801a774:	4a07      	ldr	r2, [pc, #28]	; (801a794 <HAL_Init+0x20>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a776:	2003      	movs	r0, #3
{
 801a778:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 801a77a:	6813      	ldr	r3, [r2, #0]
 801a77c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a780:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a782:	f000 f82d 	bl	801a7e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801a786:	200f      	movs	r0, #15
 801a788:	f001 f9ce 	bl	801bb28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 801a78c:	f000 fd92 	bl	801b2b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 801a790:	2000      	movs	r0, #0
 801a792:	bd08      	pop	{r3, pc}
 801a794:	40023c00 	.word	0x40023c00

0801a798 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 801a798:	4a03      	ldr	r2, [pc, #12]	; (801a7a8 <HAL_IncTick+0x10>)
 801a79a:	4b04      	ldr	r3, [pc, #16]	; (801a7ac <HAL_IncTick+0x14>)
 801a79c:	6811      	ldr	r1, [r2, #0]
 801a79e:	781b      	ldrb	r3, [r3, #0]
 801a7a0:	440b      	add	r3, r1
 801a7a2:	6013      	str	r3, [r2, #0]
}
 801a7a4:	4770      	bx	lr
 801a7a6:	bf00      	nop
 801a7a8:	20007948 	.word	0x20007948
 801a7ac:	200000e1 	.word	0x200000e1

0801a7b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801a7b0:	4b01      	ldr	r3, [pc, #4]	; (801a7b8 <HAL_GetTick+0x8>)
 801a7b2:	6818      	ldr	r0, [r3, #0]
}
 801a7b4:	4770      	bx	lr
 801a7b6:	bf00      	nop
 801a7b8:	20007948 	.word	0x20007948

0801a7bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a7bc:	b538      	push	{r3, r4, r5, lr}
 801a7be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801a7c0:	f7ff fff6 	bl	801a7b0 <HAL_GetTick>
 801a7c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a7c6:	1c63      	adds	r3, r4, #1
 801a7c8:	d002      	beq.n	801a7d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 801a7ca:	4b04      	ldr	r3, [pc, #16]	; (801a7dc <HAL_Delay+0x20>)
 801a7cc:	781b      	ldrb	r3, [r3, #0]
 801a7ce:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a7d0:	f7ff ffee 	bl	801a7b0 <HAL_GetTick>
 801a7d4:	1b40      	subs	r0, r0, r5
 801a7d6:	42a0      	cmp	r0, r4
 801a7d8:	d3fa      	bcc.n	801a7d0 <HAL_Delay+0x14>
  {
  }
}
 801a7da:	bd38      	pop	{r3, r4, r5, pc}
 801a7dc:	200000e1 	.word	0x200000e1

0801a7e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a7e0:	4907      	ldr	r1, [pc, #28]	; (801a800 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a7e2:	0200      	lsls	r0, r0, #8
 801a7e4:	4b07      	ldr	r3, [pc, #28]	; (801a804 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a7e6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a7e8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a7ec:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a7ee:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 801a7f2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801a7f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7f8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801a7fa:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 801a7fc:	60c8      	str	r0, [r1, #12]
 801a7fe:	4770      	bx	lr
 801a800:	e000ed00 	.word	0xe000ed00
 801a804:	05fa0000 	.word	0x05fa0000

0801a808 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a808:	4b17      	ldr	r3, [pc, #92]	; (801a868 <HAL_NVIC_SetPriority+0x60>)
 801a80a:	68db      	ldr	r3, [r3, #12]
 801a80c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801a810:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a812:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a816:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a818:	2d04      	cmp	r5, #4
 801a81a:	bf28      	it	cs
 801a81c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a81e:	2c06      	cmp	r4, #6
 801a820:	d918      	bls.n	801a854 <HAL_NVIC_SetPriority+0x4c>
 801a822:	3b03      	subs	r3, #3
 801a824:	f04f 34ff 	mov.w	r4, #4294967295
 801a828:	409c      	lsls	r4, r3
 801a82a:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a82e:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 801a832:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a834:	fa02 f205 	lsl.w	r2, r2, r5
 801a838:	ea21 0102 	bic.w	r1, r1, r2
 801a83c:	fa01 f203 	lsl.w	r2, r1, r3
 801a840:	ea42 0204 	orr.w	r2, r2, r4
 801a844:	ea4f 1202 	mov.w	r2, r2, lsl #4
 801a848:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 801a84a:	db06      	blt.n	801a85a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a84c:	4b07      	ldr	r3, [pc, #28]	; (801a86c <HAL_NVIC_SetPriority+0x64>)
 801a84e:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 801a850:	bc30      	pop	{r4, r5}
 801a852:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a854:	2400      	movs	r4, #0
 801a856:	4623      	mov	r3, r4
 801a858:	e7e9      	b.n	801a82e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a85a:	f000 000f 	and.w	r0, r0, #15
 801a85e:	4b04      	ldr	r3, [pc, #16]	; (801a870 <HAL_NVIC_SetPriority+0x68>)
 801a860:	541a      	strb	r2, [r3, r0]
 801a862:	bc30      	pop	{r4, r5}
 801a864:	4770      	bx	lr
 801a866:	bf00      	nop
 801a868:	e000ed00 	.word	0xe000ed00
 801a86c:	e000e400 	.word	0xe000e400
 801a870:	e000ed14 	.word	0xe000ed14

0801a874 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 801a874:	2800      	cmp	r0, #0
 801a876:	db07      	blt.n	801a888 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a878:	f000 011f 	and.w	r1, r0, #31
 801a87c:	2301      	movs	r3, #1
 801a87e:	0940      	lsrs	r0, r0, #5
 801a880:	4a02      	ldr	r2, [pc, #8]	; (801a88c <HAL_NVIC_EnableIRQ+0x18>)
 801a882:	408b      	lsls	r3, r1
 801a884:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 801a888:	4770      	bx	lr
 801a88a:	bf00      	nop
 801a88c:	e000e100 	.word	0xe000e100

0801a890 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801a890:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801a894:	4a04      	ldr	r2, [pc, #16]	; (801a8a8 <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801a896:	2000      	movs	r0, #0
 801a898:	4904      	ldr	r1, [pc, #16]	; (801a8ac <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801a89a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801a89c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a8a0:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 801a8a2:	6048      	str	r0, [r1, #4]
}
 801a8a4:	4770      	bx	lr
 801a8a6:	bf00      	nop
 801a8a8:	e000ed00 	.word	0xe000ed00
 801a8ac:	e000ed90 	.word	0xe000ed90

0801a8b0 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801a8b0:	4a06      	ldr	r2, [pc, #24]	; (801a8cc <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801a8b2:	f040 0001 	orr.w	r0, r0, #1
 801a8b6:	4b06      	ldr	r3, [pc, #24]	; (801a8d0 <HAL_MPU_Enable+0x20>)
 801a8b8:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801a8ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801a8bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a8c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801a8c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801a8c6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801a8ca:	4770      	bx	lr
 801a8cc:	e000ed00 	.word	0xe000ed00
 801a8d0:	e000ed90 	.word	0xe000ed90

0801a8d4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801a8d4:	4a12      	ldr	r2, [pc, #72]	; (801a920 <HAL_MPU_ConfigRegion+0x4c>)
 801a8d6:	7843      	ldrb	r3, [r0, #1]
 801a8d8:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 801a8da:	7801      	ldrb	r1, [r0, #0]
 801a8dc:	b911      	cbnz	r1, 801a8e4 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 801a8de:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 801a8e0:	6111      	str	r1, [r2, #16]
 801a8e2:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 801a8e4:	6843      	ldr	r3, [r0, #4]
{
 801a8e6:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 801a8e8:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a8ea:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a8ec:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a8ee:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a8f0:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a8f2:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a8f4:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a8f8:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a8fa:	430b      	orrs	r3, r1
 801a8fc:	7a01      	ldrb	r1, [r0, #8]
 801a8fe:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a902:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a904:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a908:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a90a:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 801a90e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 801a912:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 801a916:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 801a91a:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a91c:	6113      	str	r3, [r2, #16]
}
 801a91e:	4770      	bx	lr
 801a920:	e000ed90 	.word	0xe000ed90

0801a924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a926:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 801a928:	f7ff ff42 	bl	801a7b0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801a92c:	2c00      	cmp	r4, #0
 801a92e:	d053      	beq.n	801a9d8 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801a930:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801a932:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 801a934:	2100      	movs	r1, #0
 801a936:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 801a938:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 801a93c:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 801a93e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 801a942:	f022 0201 	bic.w	r2, r2, #1
 801a946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801a948:	e005      	b.n	801a956 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801a94a:	f7ff ff31 	bl	801a7b0 <HAL_GetTick>
 801a94e:	1b40      	subs	r0, r0, r5
 801a950:	2805      	cmp	r0, #5
 801a952:	d83a      	bhi.n	801a9ca <HAL_DMA_Init+0xa6>
 801a954:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801a956:	681a      	ldr	r2, [r3, #0]
 801a958:	07d1      	lsls	r1, r2, #31
 801a95a:	d4f6      	bmi.n	801a94a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801a95c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 801a960:	68e1      	ldr	r1, [r4, #12]
 801a962:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 801a964:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a966:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801a96a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a96c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 801a96e:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a970:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a974:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801a976:	4d35      	ldr	r5, [pc, #212]	; (801aa4c <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a978:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801a97a:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a97c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a97e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 801a980:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a982:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801a984:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a988:	d028      	beq.n	801a9dc <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801a98a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801a98c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801a98e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801a992:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801a994:	b2da      	uxtb	r2, r3
 801a996:	4d2e      	ldr	r5, [pc, #184]	; (801aa50 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 801a998:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801a99a:	3a10      	subs	r2, #16
 801a99c:	492d      	ldr	r1, [pc, #180]	; (801aa54 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801a99e:	482e      	ldr	r0, [pc, #184]	; (801aa58 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801a9a0:	fba5 5202 	umull	r5, r2, r5, r2
 801a9a4:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 801a9a6:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801a9a8:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a9aa:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801a9ac:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 801a9ae:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801a9b0:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801a9b4:	bf88      	it	hi
 801a9b6:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801a9b8:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801a9ba:	4083      	lsls	r3, r0
  return HAL_OK;
 801a9bc:	4610      	mov	r0, r2
 801a9be:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801a9c0:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a9c2:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 801a9c4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 801a9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801a9ca:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801a9cc:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 801a9ce:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801a9d0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801a9d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 801a9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 801a9d8:	2001      	movs	r0, #1
}
 801a9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801a9dc:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 801a9e0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801a9e2:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 801a9e6:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801a9ea:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 801a9ec:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 801a9ee:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801a9f0:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 801a9f4:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801a9f6:	2d00      	cmp	r5, #0
 801a9f8:	d0cc      	beq.n	801a994 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801a9fa:	b17e      	cbz	r6, 801aa1c <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801a9fc:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 801aa00:	d016      	beq.n	801aa30 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801aa02:	2f02      	cmp	r7, #2
 801aa04:	d903      	bls.n	801aa0e <HAL_DMA_Init+0xea>
 801aa06:	2f03      	cmp	r7, #3
 801aa08:	d1c4      	bne.n	801a994 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801aa0a:	01ea      	lsls	r2, r5, #7
 801aa0c:	d5c2      	bpl.n	801a994 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 801aa0e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801aa10:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 801aa12:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801aa14:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 801aa16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 801aa1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 801aa1c:	2f01      	cmp	r7, #1
 801aa1e:	d003      	beq.n	801aa28 <HAL_DMA_Init+0x104>
 801aa20:	d3f3      	bcc.n	801aa0a <HAL_DMA_Init+0xe6>
 801aa22:	2f02      	cmp	r7, #2
 801aa24:	d1b6      	bne.n	801a994 <HAL_DMA_Init+0x70>
 801aa26:	e7f0      	b.n	801aa0a <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801aa28:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 801aa2c:	d1b2      	bne.n	801a994 <HAL_DMA_Init+0x70>
 801aa2e:	e7ee      	b.n	801aa0e <HAL_DMA_Init+0xea>
    switch (tmp)
 801aa30:	2f03      	cmp	r7, #3
 801aa32:	d8af      	bhi.n	801a994 <HAL_DMA_Init+0x70>
 801aa34:	a201      	add	r2, pc, #4	; (adr r2, 801aa3c <HAL_DMA_Init+0x118>)
 801aa36:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 801aa3a:	bf00      	nop
 801aa3c:	0801aa0f 	.word	0x0801aa0f
 801aa40:	0801aa0b 	.word	0x0801aa0b
 801aa44:	0801aa0f 	.word	0x0801aa0f
 801aa48:	0801aa29 	.word	0x0801aa29
 801aa4c:	f010803f 	.word	0xf010803f
 801aa50:	aaaaaaab 	.word	0xaaaaaaab
 801aa54:	fffffc00 	.word	0xfffffc00
 801aa58:	080258f8 	.word	0x080258f8

0801aa5c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	d035      	beq.n	801aacc <HAL_DMA_DeInit+0x70>
 801aa60:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 801aa62:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 801aa66:	b2c0      	uxtb	r0, r0
 801aa68:	2802      	cmp	r0, #2
 801aa6a:	d031      	beq.n	801aad0 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 801aa6c:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 801aa6e:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801aa70:	b2d1      	uxtb	r1, r2
{
 801aa72:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801aa74:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 801aa76:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801aa78:	4d16      	ldr	r5, [pc, #88]	; (801aad4 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 801aa7a:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 801aa7c:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801aa80:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801aa84:	4d14      	ldr	r5, [pc, #80]	; (801aad8 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 801aa86:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801aa88:	0909      	lsrs	r1, r1, #4
 801aa8a:	4c14      	ldr	r4, [pc, #80]	; (801aadc <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 801aa8c:	6010      	str	r0, [r2, #0]
 801aa8e:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801aa90:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 801aa92:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801aa94:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 801aa98:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801aa9a:	bf88      	it	hi
 801aa9c:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 801aa9e:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801aaa0:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 801aaa2:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 801aaa4:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 801aaa6:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 801aaa8:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801aaaa:	65dd      	str	r5, [r3, #92]	; 0x5c
 801aaac:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 801aaae:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801aab0:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801aab2:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 801aab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 801aab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 801aabc:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 801aac0:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 801aac4:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 801aac8:	bc70      	pop	{r4, r5, r6}
 801aaca:	4770      	bx	lr
    return HAL_ERROR;
 801aacc:	2001      	movs	r0, #1
 801aace:	4770      	bx	lr
}
 801aad0:	4770      	bx	lr
 801aad2:	bf00      	nop
 801aad4:	aaaaaaab 	.word	0xaaaaaaab
 801aad8:	080258f8 	.word	0x080258f8
 801aadc:	fffffc00 	.word	0xfffffc00

0801aae0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 801aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aae2:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 801aae4:	2900      	cmp	r1, #0
 801aae6:	d164      	bne.n	801abb2 <ETH_MACDMAConfig+0xd2>
 801aae8:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 801aaec:	430b      	orrs	r3, r1
 801aaee:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 801aaf2:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801aaf4:	2001      	movs	r0, #1
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 801aaf6:	69e5      	ldr	r5, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 801aaf8:	6816      	ldr	r6, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 801aafa:	4b32      	ldr	r3, [pc, #200]	; (801abc4 <ETH_MACDMAConfig+0xe4>)
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 801aafc:	2d00      	cmp	r5, #0
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
    dmainit.DescriptorSkipLength = 0x0;
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 801aafe:	f241 0518 	movw	r5, #4120	; 0x1018
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 801ab02:	ea03 0306 	and.w	r3, r3, r6
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 801ab06:	f04f 0600 	mov.w	r6, #0
 801ab0a:	ea43 0301 	orr.w	r3, r3, r1
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 801ab0e:	bf14      	ite	ne
 801ab10:	4631      	movne	r1, r6
 801ab12:	f44f 6180 	moveq.w	r1, #1024	; 0x400
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 801ab16:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 801ab18:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 801ab1a:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab1c:	f7ff fe4e 	bl	801a7bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 801ab20:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 801ab22:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab24:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 801ab26:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 801ab28:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 801ab2a:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab2c:	f7ff fe46 	bl	801a7bc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 801ab30:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 801ab32:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab36:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 801ab38:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 801ab3a:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 801ab3c:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 801ab3e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 801ab40:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 801ab42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 801ab46:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 801ab48:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab4a:	f7ff fe37 	bl	801a7bc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 801ab4e:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab50:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 801ab52:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 801ab54:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 801ab56:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab58:	f7ff fe30 	bl	801a7bc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 801ab5c:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab5e:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 801ab60:	4919      	ldr	r1, [pc, #100]	; (801abc8 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 801ab62:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 801ab64:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 801ab66:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 801ab68:	4a18      	ldr	r2, [pc, #96]	; (801abcc <ETH_MACDMAConfig+0xec>)
 801ab6a:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 801ab6c:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 801ab6e:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab70:	f7ff fe24 	bl	801a7bc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 801ab74:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab76:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 801ab78:	4a15      	ldr	r2, [pc, #84]	; (801abd0 <ETH_MACDMAConfig+0xf0>)
    (heth->Instance)->DMAOMR = tmpreg;
 801ab7a:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 801ab7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ab80:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 801ab82:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 801ab84:	f7ff fe1a 	bl	801a7bc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 801ab88:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 801ab8a:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 801ab8c:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 801ab90:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 801ab92:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 801ab94:	d105      	bne.n	801aba2 <ETH_MACDMAConfig+0xc2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 801ab96:	f241 011c 	movw	r1, #4124	; 0x101c
 801ab9a:	4a0e      	ldr	r2, [pc, #56]	; (801abd4 <ETH_MACDMAConfig+0xf4>)
 801ab9c:	5858      	ldr	r0, [r3, r1]
 801ab9e:	4302      	orrs	r2, r0
 801aba0:	505a      	str	r2, [r3, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 801aba2:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 801aba4:	490c      	ldr	r1, [pc, #48]	; (801abd8 <ETH_MACDMAConfig+0xf8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 801aba6:	8898      	ldrh	r0, [r3, #4]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 801aba8:	4a0c      	ldr	r2, [pc, #48]	; (801abdc <ETH_MACDMAConfig+0xfc>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 801abaa:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 801abac:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 801abae:	6013      	str	r3, [r2, #0]
}
 801abb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 801abb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 801abb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801abba:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 801abbe:	e9c0 3202 	strd	r3, r2, [r0, #8]
 801abc2:	e796      	b.n	801aaf2 <ETH_MACDMAConfig+0x12>
 801abc4:	ff20810f 	.word	0xff20810f
 801abc8:	f8de3f23 	.word	0xf8de3f23
 801abcc:	02200004 	.word	0x02200004
 801abd0:	02c12080 	.word	0x02c12080
 801abd4:	00010040 	.word	0x00010040
 801abd8:	40028040 	.word	0x40028040
 801abdc:	40028044 	.word	0x40028044

0801abe0 <HAL_ETH_Init>:
  if(heth == NULL)
 801abe0:	2800      	cmp	r0, #0
 801abe2:	f000 8088 	beq.w	801acf6 <HAL_ETH_Init+0x116>
  if(heth->State == HAL_ETH_STATE_RESET)
 801abe6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 801abea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(heth->State == HAL_ETH_STATE_RESET)
 801abee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
{
 801abf2:	b082      	sub	sp, #8
 801abf4:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d06f      	beq.n	801acda <HAL_ETH_Init+0xfa>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801abfa:	4aae      	ldr	r2, [pc, #696]	; (801aeb4 <HAL_ETH_Init+0x2d4>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 801abfc:	6823      	ldr	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801abfe:	6c51      	ldr	r1, [r2, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 801ac00:	48ad      	ldr	r0, [pc, #692]	; (801aeb8 <HAL_ETH_Init+0x2d8>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 801ac02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ac06:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 801ac0a:	6451      	str	r1, [r2, #68]	; 0x44
 801ac0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801ac0e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801ac12:	9201      	str	r2, [sp, #4]
 801ac14:	9a01      	ldr	r2, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 801ac16:	6842      	ldr	r2, [r0, #4]
 801ac18:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801ac1c:	6042      	str	r2, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 801ac1e:	6842      	ldr	r2, [r0, #4]
 801ac20:	6a21      	ldr	r1, [r4, #32]
 801ac22:	430a      	orrs	r2, r1
 801ac24:	6042      	str	r2, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 801ac26:	681a      	ldr	r2, [r3, #0]
 801ac28:	f042 0201 	orr.w	r2, r2, #1
 801ac2c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 801ac2e:	f7ff fdbf 	bl	801a7b0 <HAL_GetTick>
 801ac32:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 801ac34:	e005      	b.n	801ac42 <HAL_ETH_Init+0x62>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 801ac36:	f7ff fdbb 	bl	801a7b0 <HAL_GetTick>
 801ac3a:	1b40      	subs	r0, r0, r5
 801ac3c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 801ac40:	d850      	bhi.n	801ace4 <HAL_ETH_Init+0x104>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 801ac42:	6823      	ldr	r3, [r4, #0]
 801ac44:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801ac48:	6812      	ldr	r2, [r2, #0]
 801ac4a:	07d1      	lsls	r1, r2, #31
 801ac4c:	d4f3      	bmi.n	801ac36 <HAL_ETH_Init+0x56>
  tempreg = (heth->Instance)->MACMIIAR;
 801ac4e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 801ac50:	f000 fed0 	bl	801b9f4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 801ac54:	4b99      	ldr	r3, [pc, #612]	; (801aebc <HAL_ETH_Init+0x2dc>)
 801ac56:	4a9a      	ldr	r2, [pc, #616]	; (801aec0 <HAL_ETH_Init+0x2e0>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 801ac58:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 801ac5c:	4403      	add	r3, r0
 801ac5e:	4293      	cmp	r3, r2
 801ac60:	d94b      	bls.n	801acfa <HAL_ETH_Init+0x11a>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 801ac62:	4b98      	ldr	r3, [pc, #608]	; (801aec4 <HAL_ETH_Init+0x2e4>)
 801ac64:	4a98      	ldr	r2, [pc, #608]	; (801aec8 <HAL_ETH_Init+0x2e8>)
 801ac66:	4403      	add	r3, r0
 801ac68:	4293      	cmp	r3, r2
 801ac6a:	d87b      	bhi.n	801ad64 <HAL_ETH_Init+0x184>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 801ac6c:	f045 050c 	orr.w	r5, r5, #12
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 801ac70:	6821      	ldr	r1, [r4, #0]
 801ac72:	610d      	str	r5, [r1, #16]
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 801ac74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ac78:	2b42      	cmp	r3, #66	; 0x42
 801ac7a:	d024      	beq.n	801acc6 <HAL_ETH_Init+0xe6>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 801ac7c:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801ac7e:	8a23      	ldrh	r3, [r4, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801ac80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  heth->State = HAL_ETH_STATE_BUSY_WR;
 801ac84:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801ac88:	02db      	lsls	r3, r3, #11
  tmpreg = heth->Instance->MACMIIAR;
 801ac8a:	690a      	ldr	r2, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801ac8c:	b29b      	uxth	r3, r3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801ac8e:	6148      	str	r0, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 801ac90:	f002 021c 	and.w	r2, r2, #28
 801ac94:	f042 0203 	orr.w	r2, r2, #3
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 801ac98:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 801ac9a:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 801ac9c:	f7ff fd88 	bl	801a7b0 <HAL_GetTick>
 801aca0:	4606      	mov	r6, r0
 801aca2:	e004      	b.n	801acae <HAL_ETH_Init+0xce>
    tmpreg = heth->Instance->MACMIIAR;
 801aca4:	6823      	ldr	r3, [r4, #0]
 801aca6:	691d      	ldr	r5, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801aca8:	f015 0501 	ands.w	r5, r5, #1
 801acac:	d028      	beq.n	801ad00 <HAL_ETH_Init+0x120>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 801acae:	f7ff fd7f 	bl	801a7b0 <HAL_GetTick>
 801acb2:	1b80      	subs	r0, r0, r6
 801acb4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801acb8:	d3f4      	bcc.n	801aca4 <HAL_ETH_Init+0xc4>
      heth->State= HAL_ETH_STATE_READY;
 801acba:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 801acbc:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_READY;
 801acbe:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 801acc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      ETH_MACDMAConfig(heth, err);
 801acc6:	4620      	mov	r0, r4
 801acc8:	2101      	movs	r1, #1
 801acca:	f7ff ff09 	bl	801aae0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 801acce:	2001      	movs	r0, #1
 801acd0:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
}
 801acd4:	b002      	add	sp, #8
 801acd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    heth->Lock = HAL_UNLOCKED;
 801acda:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 801acde:	f000 faeb 	bl	801b2b8 <HAL_ETH_MspInit>
 801ace2:	e78a      	b.n	801abfa <HAL_ETH_Init+0x1a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 801ace4:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 801ace6:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 801ace8:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 801acec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 801acf0:	b002      	add	sp, #8
 801acf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 801acf6:	2001      	movs	r0, #1
}
 801acf8:	4770      	bx	lr
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801acfa:	f045 0508 	orr.w	r5, r5, #8
 801acfe:	e7b7      	b.n	801ac70 <HAL_ETH_Init+0x90>
  heth->State = HAL_ETH_STATE_READY;
 801ad00:	2701      	movs	r7, #1
  HAL_Delay(PHY_RESET_DELAY);
 801ad02:	f640 70ff 	movw	r0, #4095	; 0xfff
  heth->State = HAL_ETH_STATE_READY;
 801ad06:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  HAL_Delay(PHY_RESET_DELAY);
 801ad0a:	f7ff fd57 	bl	801a7bc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 801ad0e:	6863      	ldr	r3, [r4, #4]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d136      	bne.n	801ad82 <HAL_ETH_Init+0x1a2>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 801ad14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ad18:	2b42      	cmp	r3, #66	; 0x42
 801ad1a:	d0d4      	beq.n	801acc6 <HAL_ETH_Init+0xe6>
  tmpreg = heth->Instance->MACMIIAR;
 801ad1c:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 801ad1e:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801ad20:	8a23      	ldrh	r3, [r4, #16]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 801ad22:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 801ad26:	68a2      	ldr	r2, [r4, #8]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801ad28:	02db      	lsls	r3, r3, #11
  tmpreg = heth->Instance->MACMIIAR;
 801ad2a:	6901      	ldr	r1, [r0, #16]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 801ad2c:	68e5      	ldr	r5, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 801ad2e:	0852      	lsrs	r2, r2, #1
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 801ad30:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801ad34:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 801ad36:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 801ad3a:	f041 0103 	orr.w	r1, r1, #3
 801ad3e:	b292      	uxth	r2, r2
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 801ad40:	430b      	orrs	r3, r1
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801ad42:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg;
 801ad44:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 801ad46:	f7ff fd33 	bl	801a7b0 <HAL_GetTick>
 801ad4a:	4605      	mov	r5, r0
 801ad4c:	e003      	b.n	801ad56 <HAL_ETH_Init+0x176>
    tmpreg = heth->Instance->MACMIIAR;
 801ad4e:	6823      	ldr	r3, [r4, #0]
 801ad50:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801ad52:	07db      	lsls	r3, r3, #31
 801ad54:	d573      	bpl.n	801ae3e <HAL_ETH_Init+0x25e>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 801ad56:	f7ff fd2b 	bl	801a7b0 <HAL_GetTick>
 801ad5a:	1b40      	subs	r0, r0, r5
 801ad5c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801ad60:	d3f5      	bcc.n	801ad4e <HAL_ETH_Init+0x16e>
 801ad62:	e7aa      	b.n	801acba <HAL_ETH_Init+0xda>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 801ad64:	4b59      	ldr	r3, [pc, #356]	; (801aecc <HAL_ETH_Init+0x2ec>)
 801ad66:	4a5a      	ldr	r2, [pc, #360]	; (801aed0 <HAL_ETH_Init+0x2f0>)
 801ad68:	4403      	add	r3, r0
 801ad6a:	4293      	cmp	r3, r2
 801ad6c:	d980      	bls.n	801ac70 <HAL_ETH_Init+0x90>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 801ad6e:	4b59      	ldr	r3, [pc, #356]	; (801aed4 <HAL_ETH_Init+0x2f4>)
 801ad70:	4a59      	ldr	r2, [pc, #356]	; (801aed8 <HAL_ETH_Init+0x2f8>)
 801ad72:	4403      	add	r3, r0
 801ad74:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801ad76:	bf94      	ite	ls
 801ad78:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 801ad7c:	f045 0510 	orrhi.w	r5, r5, #16
 801ad80:	e776      	b.n	801ac70 <HAL_ETH_Init+0x90>
    tickstart = HAL_GetTick();
 801ad82:	f7ff fd15 	bl	801a7b0 <HAL_GetTick>
      __HAL_UNLOCK(heth);
 801ad86:	46aa      	mov	sl, r5
    tickstart = HAL_GetTick();
 801ad88:	4680      	mov	r8, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 801ad8a:	f04f 0982 	mov.w	r9, #130	; 0x82
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 801ad8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ad92:	2b82      	cmp	r3, #130	; 0x82
 801ad94:	d01e      	beq.n	801add4 <HAL_ETH_Init+0x1f4>
  tmpreg = heth->Instance->MACMIIAR;
 801ad96:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 801ad98:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801ad9c:	8a23      	ldrh	r3, [r4, #16]
  tmpreg = heth->Instance->MACMIIAR;
 801ad9e:	690a      	ldr	r2, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801ada0:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 801ada2:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801ada6:	b29b      	uxth	r3, r3
 801ada8:	f042 0241 	orr.w	r2, r2, #65	; 0x41
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 801adac:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 801adae:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 801adb0:	f7ff fcfe 	bl	801a7b0 <HAL_GetTick>
 801adb4:	4606      	mov	r6, r0
 801adb6:	e003      	b.n	801adc0 <HAL_ETH_Init+0x1e0>
    tmpreg = heth->Instance->MACMIIAR;
 801adb8:	6823      	ldr	r3, [r4, #0]
 801adba:	691a      	ldr	r2, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801adbc:	07d2      	lsls	r2, r2, #31
 801adbe:	d539      	bpl.n	801ae34 <HAL_ETH_Init+0x254>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 801adc0:	f7ff fcf6 	bl	801a7b0 <HAL_GetTick>
 801adc4:	1b80      	subs	r0, r0, r6
 801adc6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801adca:	d3f5      	bcc.n	801adb8 <HAL_ETH_Init+0x1d8>
      heth->State= HAL_ETH_STATE_READY;
 801adcc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 801add0:	f884 a045 	strb.w	sl, [r4, #69]	; 0x45
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 801add4:	f7ff fcec 	bl	801a7b0 <HAL_GetTick>
 801add8:	f241 3388 	movw	r3, #5000	; 0x1388
 801addc:	eba0 0008 	sub.w	r0, r0, r8
 801ade0:	4298      	cmp	r0, r3
 801ade2:	d83c      	bhi.n	801ae5e <HAL_ETH_Init+0x27e>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 801ade4:	076e      	lsls	r6, r5, #29
 801ade6:	d5d2      	bpl.n	801ad8e <HAL_ETH_Init+0x1ae>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 801ade8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801adec:	2b42      	cmp	r3, #66	; 0x42
 801adee:	f43f af6a 	beq.w	801acc6 <HAL_ETH_Init+0xe6>
  tmpreg = heth->Instance->MACMIIAR;
 801adf2:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 801adf4:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801adf6:	8a23      	ldrh	r3, [r4, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801adf8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  heth->State = HAL_ETH_STATE_BUSY_WR;
 801adfc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 801ae00:	690a      	ldr	r2, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801ae02:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801ae04:	6148      	str	r0, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 801ae06:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801ae0a:	b29b      	uxth	r3, r3
 801ae0c:	f042 0203 	orr.w	r2, r2, #3
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 801ae10:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 801ae12:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 801ae14:	f7ff fccc 	bl	801a7b0 <HAL_GetTick>
 801ae18:	4606      	mov	r6, r0
 801ae1a:	e004      	b.n	801ae26 <HAL_ETH_Init+0x246>
    tmpreg = heth->Instance->MACMIIAR;
 801ae1c:	6823      	ldr	r3, [r4, #0]
 801ae1e:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801ae20:	f013 0301 	ands.w	r3, r3, #1
 801ae24:	d027      	beq.n	801ae76 <HAL_ETH_Init+0x296>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 801ae26:	f7ff fcc3 	bl	801a7b0 <HAL_GetTick>
 801ae2a:	1b80      	subs	r0, r0, r6
 801ae2c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801ae30:	d3f4      	bcc.n	801ae1c <HAL_ETH_Init+0x23c>
 801ae32:	e742      	b.n	801acba <HAL_ETH_Init+0xda>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801ae34:	695d      	ldr	r5, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 801ae36:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 801ae3a:	b2ad      	uxth	r5, r5
 801ae3c:	e7ca      	b.n	801add4 <HAL_ETH_Init+0x1f4>
  heth->State = HAL_ETH_STATE_READY;
 801ae3e:	2301      	movs	r3, #1
    HAL_Delay(PHY_CONFIG_DELAY);
 801ae40:	f640 70ff 	movw	r0, #4095	; 0xfff
  heth->State = HAL_ETH_STATE_READY;
 801ae44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    HAL_Delay(PHY_CONFIG_DELAY);
 801ae48:	f7ff fcb8 	bl	801a7bc <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	2100      	movs	r1, #0
 801ae50:	f7ff fe46 	bl	801aae0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 801ae54:	2301      	movs	r3, #1
  return HAL_OK;
 801ae56:	2000      	movs	r0, #0
  heth->State= HAL_ETH_STATE_READY;
 801ae58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 801ae5c:	e748      	b.n	801acf0 <HAL_ETH_Init+0x110>
        ETH_MACDMAConfig(heth, err);
 801ae5e:	4620      	mov	r0, r4
 801ae60:	2101      	movs	r1, #1
 801ae62:	f7ff fe3d 	bl	801aae0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 801ae66:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 801ae68:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 801ae6a:	2003      	movs	r0, #3
        heth->State= HAL_ETH_STATE_READY;
 801ae6c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 801ae70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 801ae74:	e73c      	b.n	801acf0 <HAL_ETH_Init+0x110>
  heth->State = HAL_ETH_STATE_READY;
 801ae76:	f04f 0901 	mov.w	r9, #1
      __HAL_UNLOCK(heth);
 801ae7a:	461e      	mov	r6, r3
  heth->State = HAL_ETH_STATE_BUSY_RD;
 801ae7c:	f04f 0a82 	mov.w	sl, #130	; 0x82
  heth->State = HAL_ETH_STATE_READY;
 801ae80:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
    tickstart = HAL_GetTick();
 801ae84:	f7ff fc94 	bl	801a7b0 <HAL_GetTick>
 801ae88:	4680      	mov	r8, r0
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 801ae8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ae8e:	2b82      	cmp	r3, #130	; 0x82
 801ae90:	d032      	beq.n	801aef8 <HAL_ETH_Init+0x318>
  tmpreg = heth->Instance->MACMIIAR;
 801ae92:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 801ae94:	f884 a044 	strb.w	sl, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801ae98:	8a23      	ldrh	r3, [r4, #16]
  tmpreg = heth->Instance->MACMIIAR;
 801ae9a:	690a      	ldr	r2, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801ae9c:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 801ae9e:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801aea2:	b29b      	uxth	r3, r3
 801aea4:	f042 0241 	orr.w	r2, r2, #65	; 0x41
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 801aea8:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 801aeaa:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 801aeac:	f7ff fc80 	bl	801a7b0 <HAL_GetTick>
 801aeb0:	4607      	mov	r7, r0
 801aeb2:	e017      	b.n	801aee4 <HAL_ETH_Init+0x304>
 801aeb4:	40023800 	.word	0x40023800
 801aeb8:	40013800 	.word	0x40013800
 801aebc:	feced300 	.word	0xfeced300
 801aec0:	00e4e1bf 	.word	0x00e4e1bf
 801aec4:	fde9f140 	.word	0xfde9f140
 801aec8:	017d783f 	.word	0x017d783f
 801aecc:	fc6c7900 	.word	0xfc6c7900
 801aed0:	026259ff 	.word	0x026259ff
 801aed4:	fa0a1f00 	.word	0xfa0a1f00
 801aed8:	02faf07f 	.word	0x02faf07f
    tmpreg = heth->Instance->MACMIIAR;
 801aedc:	6823      	ldr	r3, [r4, #0]
 801aede:	691a      	ldr	r2, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801aee0:	07d0      	lsls	r0, r2, #31
 801aee2:	d537      	bpl.n	801af54 <HAL_ETH_Init+0x374>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 801aee4:	f7ff fc64 	bl	801a7b0 <HAL_GetTick>
 801aee8:	1bc0      	subs	r0, r0, r7
 801aeea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801aeee:	d3f5      	bcc.n	801aedc <HAL_ETH_Init+0x2fc>
      heth->State= HAL_ETH_STATE_READY;
 801aef0:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 801aef4:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 801aef8:	f7ff fc5a 	bl	801a7b0 <HAL_GetTick>
 801aefc:	f241 3388 	movw	r3, #5000	; 0x1388
 801af00:	eba0 0008 	sub.w	r0, r0, r8
 801af04:	4298      	cmp	r0, r3
 801af06:	d8aa      	bhi.n	801ae5e <HAL_ETH_Init+0x27e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801af08:	06a9      	lsls	r1, r5, #26
 801af0a:	d5be      	bpl.n	801ae8a <HAL_ETH_Init+0x2aa>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 801af0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801af10:	2b82      	cmp	r3, #130	; 0x82
 801af12:	f43f aed8 	beq.w	801acc6 <HAL_ETH_Init+0xe6>
  tmpreg = heth->Instance->MACMIIAR;
 801af16:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 801af18:	2182      	movs	r1, #130	; 0x82
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801af1a:	8a23      	ldrh	r3, [r4, #16]
 801af1c:	f240 72c1 	movw	r2, #1985	; 0x7c1
  heth->State = HAL_ETH_STATE_BUSY_RD;
 801af20:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 801af24:	6901      	ldr	r1, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801af26:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 801af28:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801af2c:	b29b      	uxth	r3, r3
 801af2e:	430a      	orrs	r2, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 801af30:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 801af32:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 801af34:	f7ff fc3c 	bl	801a7b0 <HAL_GetTick>
 801af38:	4605      	mov	r5, r0
 801af3a:	e004      	b.n	801af46 <HAL_ETH_Init+0x366>
    tmpreg = heth->Instance->MACMIIAR;
 801af3c:	6822      	ldr	r2, [r4, #0]
 801af3e:	6913      	ldr	r3, [r2, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801af40:	f013 0301 	ands.w	r3, r3, #1
 801af44:	d00b      	beq.n	801af5e <HAL_ETH_Init+0x37e>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 801af46:	f7ff fc33 	bl	801a7b0 <HAL_GetTick>
 801af4a:	1b40      	subs	r0, r0, r5
 801af4c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801af50:	d3f4      	bcc.n	801af3c <HAL_ETH_Init+0x35c>
 801af52:	e6b2      	b.n	801acba <HAL_ETH_Init+0xda>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801af54:	695d      	ldr	r5, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 801af56:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 801af5a:	b2ad      	uxth	r5, r5
 801af5c:	e7cc      	b.n	801aef8 <HAL_ETH_Init+0x318>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801af5e:	6952      	ldr	r2, [r2, #20]
  heth->State = HAL_ETH_STATE_READY;
 801af60:	2001      	movs	r0, #1
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 801af62:	f012 0110 	ands.w	r1, r2, #16
  heth->State = HAL_ETH_STATE_READY;
 801af66:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 801af6a:	bf18      	it	ne
 801af6c:	f44f 6100 	movne.w	r1, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 801af70:	0752      	lsls	r2, r2, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 801af72:	bf58      	it	pl
 801af74:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 801af78:	60e1      	str	r1, [r4, #12]
 801af7a:	60a3      	str	r3, [r4, #8]
 801af7c:	e766      	b.n	801ae4c <HAL_ETH_Init+0x26c>
 801af7e:	bf00      	nop

0801af80 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 801af80:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 801af84:	2b01      	cmp	r3, #1
 801af86:	d042      	beq.n	801b00e <HAL_ETH_Start+0x8e>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 801af88:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 801af8a:	2202      	movs	r2, #2
{  
 801af8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t tmpreg = 0;
 801af8e:	2600      	movs	r6, #0
{  
 801af90:	b085      	sub	sp, #20
  heth->State = HAL_ETH_STATE_BUSY;
 801af92:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801af96:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 801af98:	9603      	str	r6, [sp, #12]
  __HAL_LOCK(heth);
 801af9a:	2701      	movs	r7, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 801af9c:	681a      	ldr	r2, [r3, #0]
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801af9e:	f241 0518 	movw	r5, #4120	; 0x1018
  __HAL_LOCK(heth);
 801afa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801afa6:	4638      	mov	r0, r7
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 801afa8:	f042 0208 	orr.w	r2, r2, #8
 801afac:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801afb2:	f7ff fc03 	bl	801a7bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 801afb6:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801afb8:	4638      	mov	r0, r7
  (heth->Instance)->MACCR = tmpreg;
 801afba:	6823      	ldr	r3, [r4, #0]
 801afbc:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 801afbe:	9602      	str	r6, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 801afc0:	681a      	ldr	r2, [r3, #0]
 801afc2:	f042 0204 	orr.w	r2, r2, #4
 801afc6:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801afcc:	f7ff fbf6 	bl	801a7bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 801afd0:	9a02      	ldr	r2, [sp, #8]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801afd2:	4638      	mov	r0, r7
  (heth->Instance)->MACCR = tmpreg;
 801afd4:	6823      	ldr	r3, [r4, #0]
 801afd6:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 801afd8:	9601      	str	r6, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801afda:	595a      	ldr	r2, [r3, r5]
 801afdc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801afe0:	515a      	str	r2, [r3, r5]
  tmpreg = (heth->Instance)->DMAOMR;
 801afe2:	595b      	ldr	r3, [r3, r5]
 801afe4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801afe6:	f7ff fbe9 	bl	801a7bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801afea:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 801afec:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 801afee:	6823      	ldr	r3, [r4, #0]
 801aff0:	515a      	str	r2, [r3, r5]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 801aff2:	595a      	ldr	r2, [r3, r5]
 801aff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801aff8:	515a      	str	r2, [r3, r5]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 801affa:	595a      	ldr	r2, [r3, r5]
 801affc:	f042 0202 	orr.w	r2, r2, #2
 801b000:	515a      	str	r2, [r3, r5]
  heth->State= HAL_ETH_STATE_READY;
 801b002:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 801b006:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
}
 801b00a:	b005      	add	sp, #20
 801b00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 801b00e:	2002      	movs	r0, #2
}
 801b010:	4770      	bx	lr
 801b012:	bf00      	nop

0801b014 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 801b014:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 801b018:	2b01      	cmp	r3, #1
 801b01a:	d042      	beq.n	801b0a2 <HAL_ETH_Stop+0x8e>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 801b01c:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 801b01e:	2202      	movs	r2, #2
{  
 801b020:	b5f0      	push	{r4, r5, r6, r7, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 801b022:	f241 0518 	movw	r5, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 801b026:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801b02a:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 801b02c:	2701      	movs	r7, #1
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 801b02e:	595a      	ldr	r2, [r3, r5]
{  
 801b030:	b085      	sub	sp, #20
  __HAL_LOCK(heth);
 801b032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 801b036:	2600      	movs	r6, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 801b038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b03c:	4638      	mov	r0, r7
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 801b03e:	515a      	str	r2, [r3, r5]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 801b040:	595a      	ldr	r2, [r3, r5]
 801b042:	f022 0202 	bic.w	r2, r2, #2
 801b046:	515a      	str	r2, [r3, r5]
  __IO uint32_t tmpreg = 0;
 801b048:	9603      	str	r6, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 801b04a:	681a      	ldr	r2, [r3, #0]
 801b04c:	f022 0204 	bic.w	r2, r2, #4
 801b050:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b056:	f7ff fbb1 	bl	801a7bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 801b05a:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b05c:	4638      	mov	r0, r7
  (heth->Instance)->MACCR = tmpreg;
 801b05e:	6823      	ldr	r3, [r4, #0]
 801b060:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 801b062:	9602      	str	r6, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801b064:	595a      	ldr	r2, [r3, r5]
 801b066:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801b06a:	515a      	str	r2, [r3, r5]
  tmpreg = (heth->Instance)->DMAOMR;
 801b06c:	595b      	ldr	r3, [r3, r5]
 801b06e:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b070:	f7ff fba4 	bl	801a7bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801b074:	9a02      	ldr	r2, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b076:	4638      	mov	r0, r7
  (heth->Instance)->DMAOMR = tmpreg;
 801b078:	6823      	ldr	r3, [r4, #0]
 801b07a:	515a      	str	r2, [r3, r5]
  __IO uint32_t tmpreg = 0;
 801b07c:	9601      	str	r6, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 801b07e:	681a      	ldr	r2, [r3, #0]
 801b080:	f022 0208 	bic.w	r2, r2, #8
 801b084:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b08a:	f7ff fb97 	bl	801a7bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 801b08e:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 801b090:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 801b092:	6823      	ldr	r3, [r4, #0]
 801b094:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 801b096:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 801b09a:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
}
 801b09e:	b005      	add	sp, #20
 801b0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 801b0a2:	2002      	movs	r0, #2
}
 801b0a4:	4770      	bx	lr
 801b0a6:	bf00      	nop

0801b0a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0ac:	4688      	mov	r8, r1
 801b0ae:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801b0b0:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801b0b2:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801b0b6:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 801b2b0 <HAL_GPIO_Init+0x208>
 801b0ba:	e003      	b.n	801b0c4 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 801b0bc:	3401      	adds	r4, #1
 801b0be:	2c10      	cmp	r4, #16
 801b0c0:	f000 80b6 	beq.w	801b230 <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 801b0c4:	2301      	movs	r3, #1
 801b0c6:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801b0c8:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 801b0cc:	4293      	cmp	r3, r2
 801b0ce:	d1f5      	bne.n	801b0bc <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801b0d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b0d4:	0067      	lsls	r7, r4, #1
 801b0d6:	2103      	movs	r1, #3
 801b0d8:	f025 0c10 	bic.w	ip, r5, #16
 801b0dc:	40b9      	lsls	r1, r7
 801b0de:	f10c 33ff 	add.w	r3, ip, #4294967295
 801b0e2:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801b0e4:	2b01      	cmp	r3, #1
 801b0e6:	d810      	bhi.n	801b10a <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 801b0e8:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801b0ea:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801b0ee:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 801b0f2:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801b0f6:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 801b0f8:	40be      	lsls	r6, r7
 801b0fa:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 801b0fe:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 801b100:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801b102:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801b106:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 801b108:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 801b10a:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801b10c:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 801b110:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801b114:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 801b118:	fa06 f607 	lsl.w	r6, r6, r7
 801b11c:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 801b120:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801b122:	d115      	bne.n	801b150 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 801b124:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801b126:	f004 0c07 	and.w	ip, r4, #7
 801b12a:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801b12e:	f8d8 6010 	ldr.w	r6, [r8, #16]
 801b132:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801b136:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 801b13a:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801b13e:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801b142:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801b146:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801b14a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 801b14e:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 801b150:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801b152:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801b156:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801b158:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801b15a:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801b15c:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 801b160:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801b162:	d5ab      	bpl.n	801b0bc <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b164:	4b48      	ldr	r3, [pc, #288]	; (801b288 <HAL_GPIO_Init+0x1e0>)
 801b166:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801b16a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b16e:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801b170:	4619      	mov	r1, r3
 801b172:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801b176:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b17a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 801b17e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801b182:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b184:	644f      	str	r7, [r1, #68]	; 0x44
 801b186:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801b188:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b18c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 801b190:	9701      	str	r7, [sp, #4]
 801b192:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 801b194:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801b196:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801b19a:	4f3c      	ldr	r7, [pc, #240]	; (801b28c <HAL_GPIO_Init+0x1e4>)
 801b19c:	42b8      	cmp	r0, r7
 801b19e:	d020      	beq.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b1a0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 801b1a4:	42b8      	cmp	r0, r7
 801b1a6:	d046      	beq.n	801b236 <HAL_GPIO_Init+0x18e>
 801b1a8:	4f39      	ldr	r7, [pc, #228]	; (801b290 <HAL_GPIO_Init+0x1e8>)
 801b1aa:	42b8      	cmp	r0, r7
 801b1ac:	d048      	beq.n	801b240 <HAL_GPIO_Init+0x198>
 801b1ae:	4f39      	ldr	r7, [pc, #228]	; (801b294 <HAL_GPIO_Init+0x1ec>)
 801b1b0:	42b8      	cmp	r0, r7
 801b1b2:	d04a      	beq.n	801b24a <HAL_GPIO_Init+0x1a2>
 801b1b4:	4f38      	ldr	r7, [pc, #224]	; (801b298 <HAL_GPIO_Init+0x1f0>)
 801b1b6:	42b8      	cmp	r0, r7
 801b1b8:	d04c      	beq.n	801b254 <HAL_GPIO_Init+0x1ac>
 801b1ba:	4f38      	ldr	r7, [pc, #224]	; (801b29c <HAL_GPIO_Init+0x1f4>)
 801b1bc:	42b8      	cmp	r0, r7
 801b1be:	d053      	beq.n	801b268 <HAL_GPIO_Init+0x1c0>
 801b1c0:	4f37      	ldr	r7, [pc, #220]	; (801b2a0 <HAL_GPIO_Init+0x1f8>)
 801b1c2:	42b8      	cmp	r0, r7
 801b1c4:	d055      	beq.n	801b272 <HAL_GPIO_Init+0x1ca>
 801b1c6:	4f37      	ldr	r7, [pc, #220]	; (801b2a4 <HAL_GPIO_Init+0x1fc>)
 801b1c8:	42b8      	cmp	r0, r7
 801b1ca:	d048      	beq.n	801b25e <HAL_GPIO_Init+0x1b6>
 801b1cc:	4f36      	ldr	r7, [pc, #216]	; (801b2a8 <HAL_GPIO_Init+0x200>)
 801b1ce:	42b8      	cmp	r0, r7
 801b1d0:	d054      	beq.n	801b27c <HAL_GPIO_Init+0x1d4>
 801b1d2:	4f36      	ldr	r7, [pc, #216]	; (801b2ac <HAL_GPIO_Init+0x204>)
 801b1d4:	42b8      	cmp	r0, r7
 801b1d6:	bf0c      	ite	eq
 801b1d8:	2709      	moveq	r7, #9
 801b1da:	270a      	movne	r7, #10
 801b1dc:	fa07 f303 	lsl.w	r3, r7, r3
 801b1e0:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 801b1e2:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 801b1e4:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 801b1e6:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801b1ea:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 801b1ec:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 801b1f0:	bf54      	ite	pl
 801b1f2:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 801b1f4:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801b1f6:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 801b1f8:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 801b1fc:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 801b200:	bf54      	ite	pl
 801b202:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 801b204:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801b206:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 801b208:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 801b20c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 801b210:	bf54      	ite	pl
 801b212:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 801b214:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801b216:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 801b218:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 801b21c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 801b220:	bf54      	ite	pl
 801b222:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 801b224:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 801b226:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 801b228:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 801b22c:	f47f af4a 	bne.w	801b0c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801b230:	b003      	add	sp, #12
 801b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b236:	2701      	movs	r7, #1
 801b238:	fa07 f303 	lsl.w	r3, r7, r3
 801b23c:	4319      	orrs	r1, r3
 801b23e:	e7d0      	b.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b240:	2702      	movs	r7, #2
 801b242:	fa07 f303 	lsl.w	r3, r7, r3
 801b246:	4319      	orrs	r1, r3
 801b248:	e7cb      	b.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b24a:	2703      	movs	r7, #3
 801b24c:	fa07 f303 	lsl.w	r3, r7, r3
 801b250:	4319      	orrs	r1, r3
 801b252:	e7c6      	b.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b254:	2704      	movs	r7, #4
 801b256:	fa07 f303 	lsl.w	r3, r7, r3
 801b25a:	4319      	orrs	r1, r3
 801b25c:	e7c1      	b.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b25e:	2707      	movs	r7, #7
 801b260:	fa07 f303 	lsl.w	r3, r7, r3
 801b264:	4319      	orrs	r1, r3
 801b266:	e7bc      	b.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b268:	2705      	movs	r7, #5
 801b26a:	fa07 f303 	lsl.w	r3, r7, r3
 801b26e:	4319      	orrs	r1, r3
 801b270:	e7b7      	b.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b272:	2706      	movs	r7, #6
 801b274:	fa07 f303 	lsl.w	r3, r7, r3
 801b278:	4319      	orrs	r1, r3
 801b27a:	e7b2      	b.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b27c:	2708      	movs	r7, #8
 801b27e:	fa07 f303 	lsl.w	r3, r7, r3
 801b282:	4319      	orrs	r1, r3
 801b284:	e7ad      	b.n	801b1e2 <HAL_GPIO_Init+0x13a>
 801b286:	bf00      	nop
 801b288:	40023800 	.word	0x40023800
 801b28c:	40020000 	.word	0x40020000
 801b290:	40020800 	.word	0x40020800
 801b294:	40020c00 	.word	0x40020c00
 801b298:	40021000 	.word	0x40021000
 801b29c:	40021400 	.word	0x40021400
 801b2a0:	40021800 	.word	0x40021800
 801b2a4:	40021c00 	.word	0x40021c00
 801b2a8:	40022000 	.word	0x40022000
 801b2ac:	40022400 	.word	0x40022400
 801b2b0:	40013c00 	.word	0x40013c00

0801b2b4 <HAL_MspInit>:
  * @retval None
  */
void HAL_MspInit(void)
{
 
}
 801b2b4:	4770      	bx	lr
 801b2b6:	bf00      	nop

0801b2b8 <HAL_ETH_MspInit>:

}


void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 801b2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801b2ba:	4c2f      	ldr	r4, [pc, #188]	; (801b378 <HAL_ETH_MspInit+0xc0>)
{
 801b2bc:	b08d      	sub	sp, #52	; 0x34
  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 801b2be:	2086      	movs	r0, #134	; 0x86
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 801b2c0:	2103      	movs	r1, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801b2c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 801b2c4:	ad0c      	add	r5, sp, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 801b2c6:	2202      	movs	r2, #2
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 801b2c8:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801b2ca:	f043 0301 	orr.w	r3, r3, #1
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 801b2ce:	270b      	movs	r7, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801b2d0:	6323      	str	r3, [r4, #48]	; 0x30
 801b2d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2d4:	f003 0301 	and.w	r3, r3, #1
 801b2d8:	9301      	str	r3, [sp, #4]
 801b2da:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801b2dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2de:	f043 0304 	orr.w	r3, r3, #4
 801b2e2:	6323      	str	r3, [r4, #48]	; 0x30
 801b2e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2e6:	f003 0304 	and.w	r3, r3, #4
 801b2ea:	9302      	str	r3, [sp, #8]
 801b2ec:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801b2ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2f4:	6323      	str	r3, [r4, #48]	; 0x30
 801b2f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 801b2f8:	f845 0d14 	str.w	r0, [r5, #-20]!
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801b2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 801b300:	910a      	str	r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 801b302:	481e      	ldr	r0, [pc, #120]	; (801b37c <HAL_ETH_MspInit+0xc4>)
 801b304:	4629      	mov	r1, r5
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801b306:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 801b308:	9208      	str	r2, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801b30a:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 801b30c:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 801b30e:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 801b310:	f7ff feca 	bl	801b0a8 <HAL_GPIO_Init>
  
  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 801b314:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 801b316:	4629      	mov	r1, r5
 801b318:	4819      	ldr	r0, [pc, #100]	; (801b380 <HAL_ETH_MspInit+0xc8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 801b31a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 801b31c:	f7ff fec4 	bl	801b0a8 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 801b320:	f646 0304 	movw	r3, #26628	; 0x6804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 801b324:	4629      	mov	r1, r5
 801b326:	4817      	ldr	r0, [pc, #92]	; (801b384 <HAL_ETH_MspInit+0xcc>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 801b328:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 801b32a:	f7ff febd 	bl	801b0a8 <HAL_GPIO_Init>
  
  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 801b32e:	4632      	mov	r2, r6
 801b330:	2107      	movs	r1, #7
 801b332:	203d      	movs	r0, #61	; 0x3d
 801b334:	f7ff fa68 	bl	801a808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 801b338:	203d      	movs	r0, #61	; 0x3d
 801b33a:	f7ff fa9b 	bl	801a874 <HAL_NVIC_EnableIRQ>
  
  /* Enable ETHERNET clock  */
  __HAL_RCC_ETH_CLK_ENABLE();
 801b33e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801b344:	6323      	str	r3, [r4, #48]	; 0x30
 801b346:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b34c:	9304      	str	r3, [sp, #16]
 801b34e:	9b04      	ldr	r3, [sp, #16]
 801b350:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801b356:	6323      	str	r3, [r4, #48]	; 0x30
 801b358:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b35a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b35e:	9305      	str	r3, [sp, #20]
 801b360:	9b05      	ldr	r3, [sp, #20]
 801b362:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801b368:	6323      	str	r3, [r4, #48]	; 0x30
 801b36a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b36c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b370:	9306      	str	r3, [sp, #24]
 801b372:	9b06      	ldr	r3, [sp, #24]
}
 801b374:	b00d      	add	sp, #52	; 0x34
 801b376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b378:	40023800 	.word	0x40023800
 801b37c:	40020000 	.word	0x40020000
 801b380:	40020800 	.word	0x40020800
 801b384:	40021800 	.word	0x40021800

0801b388 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 801b388:	4a1b      	ldr	r2, [pc, #108]	; (801b3f8 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801b38a:	4b1c      	ldr	r3, [pc, #112]	; (801b3fc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 801b38c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801b38e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 801b392:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 801b394:	6411      	str	r1, [r2, #64]	; 0x40
{
 801b396:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 801b398:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b39a:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 801b39c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801b3a0:	9201      	str	r2, [sp, #4]
 801b3a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 801b3a4:	681a      	ldr	r2, [r3, #0]
 801b3a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801b3aa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 801b3ac:	f7ff fa00 	bl	801a7b0 <HAL_GetTick>
 801b3b0:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b3b2:	e005      	b.n	801b3c0 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b3b4:	f7ff f9fc 	bl	801a7b0 <HAL_GetTick>
 801b3b8:	1b40      	subs	r0, r0, r5
 801b3ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801b3be:	d817      	bhi.n	801b3f0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b3c0:	6863      	ldr	r3, [r4, #4]
 801b3c2:	03da      	lsls	r2, r3, #15
 801b3c4:	d5f6      	bpl.n	801b3b4 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b3c6:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b3c8:	4d0c      	ldr	r5, [pc, #48]	; (801b3fc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b3ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b3ce:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801b3d0:	f7ff f9ee 	bl	801a7b0 <HAL_GetTick>
 801b3d4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b3d6:	e005      	b.n	801b3e4 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b3d8:	f7ff f9ea 	bl	801a7b0 <HAL_GetTick>
 801b3dc:	1b00      	subs	r0, r0, r4
 801b3de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801b3e2:	d805      	bhi.n	801b3f0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b3e4:	686b      	ldr	r3, [r5, #4]
 801b3e6:	039b      	lsls	r3, r3, #14
 801b3e8:	d5f6      	bpl.n	801b3d8 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 801b3ea:	2000      	movs	r0, #0
}
 801b3ec:	b003      	add	sp, #12
 801b3ee:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 801b3f0:	2003      	movs	r0, #3
}
 801b3f2:	b003      	add	sp, #12
 801b3f4:	bd30      	pop	{r4, r5, pc}
 801b3f6:	bf00      	nop
 801b3f8:	40023800 	.word	0x40023800
 801b3fc:	40007000 	.word	0x40007000

0801b400 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b400:	2800      	cmp	r0, #0
 801b402:	f000 814c 	beq.w	801b69e <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b406:	6803      	ldr	r3, [r0, #0]
{
 801b408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b40c:	07dd      	lsls	r5, r3, #31
{
 801b40e:	b082      	sub	sp, #8
 801b410:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b412:	d535      	bpl.n	801b480 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b414:	49ac      	ldr	r1, [pc, #688]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b416:	688a      	ldr	r2, [r1, #8]
 801b418:	f002 020c 	and.w	r2, r2, #12
 801b41c:	2a04      	cmp	r2, #4
 801b41e:	f000 80ff 	beq.w	801b620 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801b422:	688a      	ldr	r2, [r1, #8]
 801b424:	f002 020c 	and.w	r2, r2, #12
 801b428:	2a08      	cmp	r2, #8
 801b42a:	f000 80f5 	beq.w	801b618 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b42e:	6863      	ldr	r3, [r4, #4]
 801b430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b434:	d010      	beq.n	801b458 <HAL_RCC_OscConfig+0x58>
 801b436:	2b00      	cmp	r3, #0
 801b438:	f000 811a 	beq.w	801b670 <HAL_RCC_OscConfig+0x270>
 801b43c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b440:	4ba1      	ldr	r3, [pc, #644]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b442:	681a      	ldr	r2, [r3, #0]
 801b444:	f000 8164 	beq.w	801b710 <HAL_RCC_OscConfig+0x310>
 801b448:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801b44c:	601a      	str	r2, [r3, #0]
 801b44e:	681a      	ldr	r2, [r3, #0]
 801b450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801b454:	601a      	str	r2, [r3, #0]
 801b456:	e004      	b.n	801b462 <HAL_RCC_OscConfig+0x62>
 801b458:	4a9b      	ldr	r2, [pc, #620]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b45a:	6813      	ldr	r3, [r2, #0]
 801b45c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b460:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b462:	f7ff f9a5 	bl	801a7b0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b466:	4d98      	ldr	r5, [pc, #608]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 801b468:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b46a:	e005      	b.n	801b478 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b46c:	f7ff f9a0 	bl	801a7b0 <HAL_GetTick>
 801b470:	1b80      	subs	r0, r0, r6
 801b472:	2864      	cmp	r0, #100	; 0x64
 801b474:	f200 80ef 	bhi.w	801b656 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b478:	682b      	ldr	r3, [r5, #0]
 801b47a:	039a      	lsls	r2, r3, #14
 801b47c:	d5f6      	bpl.n	801b46c <HAL_RCC_OscConfig+0x6c>
 801b47e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b480:	079f      	lsls	r7, r3, #30
 801b482:	d442      	bmi.n	801b50a <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b484:	071a      	lsls	r2, r3, #28
 801b486:	d517      	bpl.n	801b4b8 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b488:	6963      	ldr	r3, [r4, #20]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	f000 80b1 	beq.w	801b5f2 <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b490:	4b8d      	ldr	r3, [pc, #564]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b492:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b494:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 801b496:	f042 0201 	orr.w	r2, r2, #1
 801b49a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 801b49c:	f7ff f988 	bl	801a7b0 <HAL_GetTick>
 801b4a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b4a2:	e005      	b.n	801b4b0 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b4a4:	f7ff f984 	bl	801a7b0 <HAL_GetTick>
 801b4a8:	1b80      	subs	r0, r0, r6
 801b4aa:	2802      	cmp	r0, #2
 801b4ac:	f200 80d3 	bhi.w	801b656 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b4b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b4b2:	079b      	lsls	r3, r3, #30
 801b4b4:	d5f6      	bpl.n	801b4a4 <HAL_RCC_OscConfig+0xa4>
 801b4b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b4b8:	075d      	lsls	r5, r3, #29
 801b4ba:	d56b      	bpl.n	801b594 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b4bc:	4b82      	ldr	r3, [pc, #520]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b4be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b4c0:	00d0      	lsls	r0, r2, #3
 801b4c2:	f100 80ee 	bmi.w	801b6a2 <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801b4c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 801b4c8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 801b4ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801b4ce:	641a      	str	r2, [r3, #64]	; 0x40
 801b4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b4d6:	9301      	str	r3, [sp, #4]
 801b4d8:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b4da:	4b7c      	ldr	r3, [pc, #496]	; (801b6cc <HAL_RCC_OscConfig+0x2cc>)
 801b4dc:	681a      	ldr	r2, [r3, #0]
 801b4de:	05d1      	lsls	r1, r2, #23
 801b4e0:	f140 80a8 	bpl.w	801b634 <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b4e4:	68a3      	ldr	r3, [r4, #8]
 801b4e6:	2b01      	cmp	r3, #1
 801b4e8:	d039      	beq.n	801b55e <HAL_RCC_OscConfig+0x15e>
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	f000 80db 	beq.w	801b6a6 <HAL_RCC_OscConfig+0x2a6>
 801b4f0:	2b05      	cmp	r3, #5
 801b4f2:	4b75      	ldr	r3, [pc, #468]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b4f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b4f6:	f000 8113 	beq.w	801b720 <HAL_RCC_OscConfig+0x320>
 801b4fa:	f022 0201 	bic.w	r2, r2, #1
 801b4fe:	671a      	str	r2, [r3, #112]	; 0x70
 801b500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b502:	f022 0204 	bic.w	r2, r2, #4
 801b506:	671a      	str	r2, [r3, #112]	; 0x70
 801b508:	e02e      	b.n	801b568 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b50a:	4a6f      	ldr	r2, [pc, #444]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b50c:	6891      	ldr	r1, [r2, #8]
 801b50e:	f011 0f0c 	tst.w	r1, #12
 801b512:	d063      	beq.n	801b5dc <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801b514:	6891      	ldr	r1, [r2, #8]
 801b516:	f001 010c 	and.w	r1, r1, #12
 801b51a:	2908      	cmp	r1, #8
 801b51c:	d05b      	beq.n	801b5d6 <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b51e:	68e3      	ldr	r3, [r4, #12]
 801b520:	2b00      	cmp	r3, #0
 801b522:	f000 80e1 	beq.w	801b6e8 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 801b526:	4b68      	ldr	r3, [pc, #416]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b528:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b52a:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 801b52c:	f042 0201 	orr.w	r2, r2, #1
 801b530:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801b532:	f7ff f93d 	bl	801a7b0 <HAL_GetTick>
 801b536:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b538:	e005      	b.n	801b546 <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b53a:	f7ff f939 	bl	801a7b0 <HAL_GetTick>
 801b53e:	1b80      	subs	r0, r0, r6
 801b540:	2802      	cmp	r0, #2
 801b542:	f200 8088 	bhi.w	801b656 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b546:	682b      	ldr	r3, [r5, #0]
 801b548:	0798      	lsls	r0, r3, #30
 801b54a:	d5f6      	bpl.n	801b53a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b54c:	682b      	ldr	r3, [r5, #0]
 801b54e:	6922      	ldr	r2, [r4, #16]
 801b550:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801b554:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b558:	602b      	str	r3, [r5, #0]
 801b55a:	6823      	ldr	r3, [r4, #0]
 801b55c:	e792      	b.n	801b484 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b55e:	4a5a      	ldr	r2, [pc, #360]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b560:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801b562:	f043 0301 	orr.w	r3, r3, #1
 801b566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b568:	f7ff f922 	bl	801a7b0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b56c:	4e56      	ldr	r6, [pc, #344]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 801b56e:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b570:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b574:	e005      	b.n	801b582 <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b576:	f7ff f91b 	bl	801a7b0 <HAL_GetTick>
 801b57a:	eba0 0008 	sub.w	r0, r0, r8
 801b57e:	42b8      	cmp	r0, r7
 801b580:	d869      	bhi.n	801b656 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b582:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801b584:	079b      	lsls	r3, r3, #30
 801b586:	d5f6      	bpl.n	801b576 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801b588:	b125      	cbz	r5, 801b594 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b58a:	4a4f      	ldr	r2, [pc, #316]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b58c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801b58e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b594:	69a0      	ldr	r0, [r4, #24]
 801b596:	b1d0      	cbz	r0, 801b5ce <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b598:	4b4b      	ldr	r3, [pc, #300]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b59a:	689a      	ldr	r2, [r3, #8]
 801b59c:	f002 020c 	and.w	r2, r2, #12
 801b5a0:	2a08      	cmp	r2, #8
 801b5a2:	f000 80c5 	beq.w	801b730 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b5a6:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b5a8:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b5aa:	f000 80eb 	beq.w	801b784 <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b5ae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b5b2:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 801b5b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801b5b6:	f7ff f8fb 	bl	801a7b0 <HAL_GetTick>
 801b5ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b5bc:	e004      	b.n	801b5c8 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b5be:	f7ff f8f7 	bl	801a7b0 <HAL_GetTick>
 801b5c2:	1b40      	subs	r0, r0, r5
 801b5c4:	2802      	cmp	r0, #2
 801b5c6:	d846      	bhi.n	801b656 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b5c8:	6823      	ldr	r3, [r4, #0]
 801b5ca:	019b      	lsls	r3, r3, #6
 801b5cc:	d4f7      	bmi.n	801b5be <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 801b5ce:	2000      	movs	r0, #0
}
 801b5d0:	b002      	add	sp, #8
 801b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801b5d6:	6852      	ldr	r2, [r2, #4]
 801b5d8:	0256      	lsls	r6, r2, #9
 801b5da:	d4a0      	bmi.n	801b51e <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b5dc:	4a3a      	ldr	r2, [pc, #232]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b5de:	6812      	ldr	r2, [r2, #0]
 801b5e0:	0795      	lsls	r5, r2, #30
 801b5e2:	d53c      	bpl.n	801b65e <HAL_RCC_OscConfig+0x25e>
 801b5e4:	68e2      	ldr	r2, [r4, #12]
 801b5e6:	2a01      	cmp	r2, #1
 801b5e8:	d039      	beq.n	801b65e <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 801b5ea:	2001      	movs	r0, #1
}
 801b5ec:	b002      	add	sp, #8
 801b5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 801b5f2:	4b35      	ldr	r3, [pc, #212]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b5f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801b5f6:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 801b5f8:	f022 0201 	bic.w	r2, r2, #1
 801b5fc:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 801b5fe:	f7ff f8d7 	bl	801a7b0 <HAL_GetTick>
 801b602:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801b604:	e004      	b.n	801b610 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b606:	f7ff f8d3 	bl	801a7b0 <HAL_GetTick>
 801b60a:	1b80      	subs	r0, r0, r6
 801b60c:	2802      	cmp	r0, #2
 801b60e:	d822      	bhi.n	801b656 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801b610:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b612:	079f      	lsls	r7, r3, #30
 801b614:	d4f7      	bmi.n	801b606 <HAL_RCC_OscConfig+0x206>
 801b616:	e74e      	b.n	801b4b6 <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801b618:	684a      	ldr	r2, [r1, #4]
 801b61a:	0250      	lsls	r0, r2, #9
 801b61c:	f57f af07 	bpl.w	801b42e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b620:	4a29      	ldr	r2, [pc, #164]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b622:	6812      	ldr	r2, [r2, #0]
 801b624:	0391      	lsls	r1, r2, #14
 801b626:	f57f af2b 	bpl.w	801b480 <HAL_RCC_OscConfig+0x80>
 801b62a:	6862      	ldr	r2, [r4, #4]
 801b62c:	2a00      	cmp	r2, #0
 801b62e:	f47f af27 	bne.w	801b480 <HAL_RCC_OscConfig+0x80>
 801b632:	e7da      	b.n	801b5ea <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 801b634:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b636:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 801b638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b63c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 801b63e:	f7ff f8b7 	bl	801a7b0 <HAL_GetTick>
 801b642:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b644:	6833      	ldr	r3, [r6, #0]
 801b646:	05da      	lsls	r2, r3, #23
 801b648:	f53f af4c 	bmi.w	801b4e4 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b64c:	f7ff f8b0 	bl	801a7b0 <HAL_GetTick>
 801b650:	1bc0      	subs	r0, r0, r7
 801b652:	2864      	cmp	r0, #100	; 0x64
 801b654:	d9f6      	bls.n	801b644 <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 801b656:	2003      	movs	r0, #3
}
 801b658:	b002      	add	sp, #8
 801b65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b65e:	491a      	ldr	r1, [pc, #104]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b660:	6920      	ldr	r0, [r4, #16]
 801b662:	680a      	ldr	r2, [r1, #0]
 801b664:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 801b668:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 801b66c:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b66e:	e709      	b.n	801b484 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b670:	4b15      	ldr	r3, [pc, #84]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
 801b672:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b674:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b676:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801b67a:	601a      	str	r2, [r3, #0]
 801b67c:	681a      	ldr	r2, [r3, #0]
 801b67e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801b682:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801b684:	f7ff f894 	bl	801a7b0 <HAL_GetTick>
 801b688:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b68a:	e004      	b.n	801b696 <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b68c:	f7ff f890 	bl	801a7b0 <HAL_GetTick>
 801b690:	1b80      	subs	r0, r0, r6
 801b692:	2864      	cmp	r0, #100	; 0x64
 801b694:	d8df      	bhi.n	801b656 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b696:	682b      	ldr	r3, [r5, #0]
 801b698:	039b      	lsls	r3, r3, #14
 801b69a:	d4f7      	bmi.n	801b68c <HAL_RCC_OscConfig+0x28c>
 801b69c:	e6ef      	b.n	801b47e <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 801b69e:	2001      	movs	r0, #1
}
 801b6a0:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 801b6a2:	2500      	movs	r5, #0
 801b6a4:	e719      	b.n	801b4da <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b6a6:	4b08      	ldr	r3, [pc, #32]	; (801b6c8 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b6a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b6ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801b6ae:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b6b0:	f022 0201 	bic.w	r2, r2, #1
 801b6b4:	671a      	str	r2, [r3, #112]	; 0x70
 801b6b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b6b8:	f022 0204 	bic.w	r2, r2, #4
 801b6bc:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 801b6be:	f7ff f877 	bl	801a7b0 <HAL_GetTick>
 801b6c2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801b6c4:	e009      	b.n	801b6da <HAL_RCC_OscConfig+0x2da>
 801b6c6:	bf00      	nop
 801b6c8:	40023800 	.word	0x40023800
 801b6cc:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b6d0:	f7ff f86e 	bl	801a7b0 <HAL_GetTick>
 801b6d4:	1bc0      	subs	r0, r0, r7
 801b6d6:	4540      	cmp	r0, r8
 801b6d8:	d8bd      	bhi.n	801b656 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801b6da:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801b6dc:	0798      	lsls	r0, r3, #30
 801b6de:	d4f7      	bmi.n	801b6d0 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 801b6e0:	2d00      	cmp	r5, #0
 801b6e2:	f43f af57 	beq.w	801b594 <HAL_RCC_OscConfig+0x194>
 801b6e6:	e750      	b.n	801b58a <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 801b6e8:	4b41      	ldr	r3, [pc, #260]	; (801b7f0 <HAL_RCC_OscConfig+0x3f0>)
 801b6ea:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b6ec:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 801b6ee:	f022 0201 	bic.w	r2, r2, #1
 801b6f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801b6f4:	f7ff f85c 	bl	801a7b0 <HAL_GetTick>
 801b6f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b6fa:	e004      	b.n	801b706 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b6fc:	f7ff f858 	bl	801a7b0 <HAL_GetTick>
 801b700:	1b80      	subs	r0, r0, r6
 801b702:	2802      	cmp	r0, #2
 801b704:	d8a7      	bhi.n	801b656 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b706:	682b      	ldr	r3, [r5, #0]
 801b708:	0799      	lsls	r1, r3, #30
 801b70a:	d4f7      	bmi.n	801b6fc <HAL_RCC_OscConfig+0x2fc>
 801b70c:	6823      	ldr	r3, [r4, #0]
 801b70e:	e6b9      	b.n	801b484 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b710:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801b714:	601a      	str	r2, [r3, #0]
 801b716:	681a      	ldr	r2, [r3, #0]
 801b718:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801b71c:	601a      	str	r2, [r3, #0]
 801b71e:	e6a0      	b.n	801b462 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b720:	f042 0204 	orr.w	r2, r2, #4
 801b724:	671a      	str	r2, [r3, #112]	; 0x70
 801b726:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b728:	f042 0201 	orr.w	r2, r2, #1
 801b72c:	671a      	str	r2, [r3, #112]	; 0x70
 801b72e:	e71b      	b.n	801b568 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b730:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 801b732:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b734:	f43f af5a 	beq.w	801b5ec <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b738:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b73c:	69e1      	ldr	r1, [r4, #28]
 801b73e:	428b      	cmp	r3, r1
 801b740:	f47f af53 	bne.w	801b5ea <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801b744:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b748:	6a21      	ldr	r1, [r4, #32]
 801b74a:	428b      	cmp	r3, r1
 801b74c:	f47f af4d 	bne.w	801b5ea <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801b750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801b754:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b756:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801b758:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 801b75c:	f47f af45 	bne.w	801b5ea <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801b760:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b762:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 801b766:	085b      	lsrs	r3, r3, #1
 801b768:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801b76a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 801b76e:	f47f af3c 	bne.w	801b5ea <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801b772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b774:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801b778:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 801b77c:	bf14      	ite	ne
 801b77e:	2001      	movne	r0, #1
 801b780:	2000      	moveq	r0, #0
 801b782:	e733      	b.n	801b5ec <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 801b784:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b788:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 801b78a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801b78c:	f7ff f810 	bl	801a7b0 <HAL_GetTick>
 801b790:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b792:	e005      	b.n	801b7a0 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b794:	f7ff f80c 	bl	801a7b0 <HAL_GetTick>
 801b798:	1b80      	subs	r0, r0, r6
 801b79a:	2802      	cmp	r0, #2
 801b79c:	f63f af5b 	bhi.w	801b656 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b7a0:	682b      	ldr	r3, [r5, #0]
 801b7a2:	0199      	lsls	r1, r3, #6
 801b7a4:	d4f6      	bmi.n	801b794 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b7a6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 801b7aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b7ac:	4313      	orrs	r3, r2
 801b7ae:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 801b7b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b7b6:	4c0e      	ldr	r4, [pc, #56]	; (801b7f0 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b7b8:	0852      	lsrs	r2, r2, #1
 801b7ba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 801b7be:	3a01      	subs	r2, #1
 801b7c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801b7c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b7c8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 801b7ca:	682b      	ldr	r3, [r5, #0]
 801b7cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b7d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801b7d2:	f7fe ffed 	bl	801a7b0 <HAL_GetTick>
 801b7d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b7d8:	e005      	b.n	801b7e6 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b7da:	f7fe ffe9 	bl	801a7b0 <HAL_GetTick>
 801b7de:	1b40      	subs	r0, r0, r5
 801b7e0:	2802      	cmp	r0, #2
 801b7e2:	f63f af38 	bhi.w	801b656 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b7e6:	6823      	ldr	r3, [r4, #0]
 801b7e8:	019a      	lsls	r2, r3, #6
 801b7ea:	d5f6      	bpl.n	801b7da <HAL_RCC_OscConfig+0x3da>
 801b7ec:	e6ef      	b.n	801b5ce <HAL_RCC_OscConfig+0x1ce>
 801b7ee:	bf00      	nop
 801b7f0:	40023800 	.word	0x40023800

0801b7f4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b7f4:	b178      	cbz	r0, 801b816 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b7f6:	4a5e      	ldr	r2, [pc, #376]	; (801b970 <HAL_RCC_ClockConfig+0x17c>)
 801b7f8:	6813      	ldr	r3, [r2, #0]
 801b7fa:	f003 030f 	and.w	r3, r3, #15
 801b7fe:	428b      	cmp	r3, r1
 801b800:	d20b      	bcs.n	801b81a <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b802:	6813      	ldr	r3, [r2, #0]
 801b804:	f023 030f 	bic.w	r3, r3, #15
 801b808:	430b      	orrs	r3, r1
 801b80a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b80c:	6813      	ldr	r3, [r2, #0]
 801b80e:	f003 030f 	and.w	r3, r3, #15
 801b812:	428b      	cmp	r3, r1
 801b814:	d001      	beq.n	801b81a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 801b816:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 801b818:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b81a:	6803      	ldr	r3, [r0, #0]
{
 801b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b820:	079d      	lsls	r5, r3, #30
 801b822:	d514      	bpl.n	801b84e <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b824:	075c      	lsls	r4, r3, #29
 801b826:	d504      	bpl.n	801b832 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b828:	4c52      	ldr	r4, [pc, #328]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
 801b82a:	68a2      	ldr	r2, [r4, #8]
 801b82c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 801b830:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b832:	071a      	lsls	r2, r3, #28
 801b834:	d504      	bpl.n	801b840 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b836:	4c4f      	ldr	r4, [pc, #316]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
 801b838:	68a2      	ldr	r2, [r4, #8]
 801b83a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 801b83e:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b840:	4c4c      	ldr	r4, [pc, #304]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
 801b842:	6885      	ldr	r5, [r0, #8]
 801b844:	68a2      	ldr	r2, [r4, #8]
 801b846:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 801b84a:	432a      	orrs	r2, r5
 801b84c:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b84e:	07df      	lsls	r7, r3, #31
 801b850:	4604      	mov	r4, r0
 801b852:	460d      	mov	r5, r1
 801b854:	d521      	bpl.n	801b89a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b856:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b858:	4b46      	ldr	r3, [pc, #280]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b85a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b85c:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b85e:	d063      	beq.n	801b928 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b860:	2a02      	cmp	r2, #2
 801b862:	d079      	beq.n	801b958 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b864:	0799      	lsls	r1, r3, #30
 801b866:	d528      	bpl.n	801b8ba <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b868:	4942      	ldr	r1, [pc, #264]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b86a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b86e:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b870:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b872:	f023 0303 	bic.w	r3, r3, #3
 801b876:	4313      	orrs	r3, r2
 801b878:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 801b87a:	f7fe ff99 	bl	801a7b0 <HAL_GetTick>
 801b87e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b880:	e004      	b.n	801b88c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b882:	f7fe ff95 	bl	801a7b0 <HAL_GetTick>
 801b886:	1bc0      	subs	r0, r0, r7
 801b888:	4540      	cmp	r0, r8
 801b88a:	d863      	bhi.n	801b954 <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b88c:	68b3      	ldr	r3, [r6, #8]
 801b88e:	6862      	ldr	r2, [r4, #4]
 801b890:	f003 030c 	and.w	r3, r3, #12
 801b894:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801b898:	d1f3      	bne.n	801b882 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b89a:	4a35      	ldr	r2, [pc, #212]	; (801b970 <HAL_RCC_ClockConfig+0x17c>)
 801b89c:	6813      	ldr	r3, [r2, #0]
 801b89e:	f003 030f 	and.w	r3, r3, #15
 801b8a2:	42ab      	cmp	r3, r5
 801b8a4:	d90c      	bls.n	801b8c0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b8a6:	6813      	ldr	r3, [r2, #0]
 801b8a8:	f023 030f 	bic.w	r3, r3, #15
 801b8ac:	432b      	orrs	r3, r5
 801b8ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b8b0:	6813      	ldr	r3, [r2, #0]
 801b8b2:	f003 030f 	and.w	r3, r3, #15
 801b8b6:	42ab      	cmp	r3, r5
 801b8b8:	d002      	beq.n	801b8c0 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 801b8ba:	2001      	movs	r0, #1
}
 801b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b8c0:	6823      	ldr	r3, [r4, #0]
 801b8c2:	075a      	lsls	r2, r3, #29
 801b8c4:	d506      	bpl.n	801b8d4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b8c6:	492b      	ldr	r1, [pc, #172]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
 801b8c8:	68e0      	ldr	r0, [r4, #12]
 801b8ca:	688a      	ldr	r2, [r1, #8]
 801b8cc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 801b8d0:	4302      	orrs	r2, r0
 801b8d2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b8d4:	071b      	lsls	r3, r3, #28
 801b8d6:	d507      	bpl.n	801b8e8 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801b8d8:	4a26      	ldr	r2, [pc, #152]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
 801b8da:	6921      	ldr	r1, [r4, #16]
 801b8dc:	6893      	ldr	r3, [r2, #8]
 801b8de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801b8e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801b8e6:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b8e8:	4922      	ldr	r1, [pc, #136]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
 801b8ea:	688b      	ldr	r3, [r1, #8]
 801b8ec:	f003 030c 	and.w	r3, r3, #12
 801b8f0:	2b04      	cmp	r3, #4
 801b8f2:	d01c      	beq.n	801b92e <HAL_RCC_ClockConfig+0x13a>
 801b8f4:	2b08      	cmp	r3, #8
 801b8f6:	d12b      	bne.n	801b950 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b8f8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801b8fa:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b8fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b900:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801b902:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 801b906:	d12a      	bne.n	801b95e <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b908:	481b      	ldr	r0, [pc, #108]	; (801b978 <HAL_RCC_ClockConfig+0x184>)
 801b90a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801b90e:	fba1 0100 	umull	r0, r1, r1, r0
 801b912:	f7e4 fe15 	bl	8000540 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801b916:	4b17      	ldr	r3, [pc, #92]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
 801b918:	685b      	ldr	r3, [r3, #4]
 801b91a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801b91e:	3301      	adds	r3, #1
 801b920:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 801b922:	fbb0 f3f3 	udiv	r3, r0, r3
 801b926:	e003      	b.n	801b930 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b928:	039e      	lsls	r6, r3, #14
 801b92a:	d49d      	bmi.n	801b868 <HAL_RCC_ClockConfig+0x74>
 801b92c:	e7c5      	b.n	801b8ba <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 801b92e:	4b13      	ldr	r3, [pc, #76]	; (801b97c <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801b930:	4a10      	ldr	r2, [pc, #64]	; (801b974 <HAL_RCC_ClockConfig+0x180>)
 801b932:	4c13      	ldr	r4, [pc, #76]	; (801b980 <HAL_RCC_ClockConfig+0x18c>)
 801b934:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 801b936:	4813      	ldr	r0, [pc, #76]	; (801b984 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801b938:	f3c2 1203 	ubfx	r2, r2, #4, #4
 801b93c:	4912      	ldr	r1, [pc, #72]	; (801b988 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 801b93e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801b940:	5ca2      	ldrb	r2, [r4, r2]
 801b942:	40d3      	lsrs	r3, r2
 801b944:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 801b946:	f000 f8ef 	bl	801bb28 <HAL_InitTick>
  return HAL_OK;
 801b94a:	2000      	movs	r0, #0
}
 801b94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 801b950:	4b09      	ldr	r3, [pc, #36]	; (801b978 <HAL_RCC_ClockConfig+0x184>)
 801b952:	e7ed      	b.n	801b930 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 801b954:	2003      	movs	r0, #3
 801b956:	e7b1      	b.n	801b8bc <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b958:	0198      	lsls	r0, r3, #6
 801b95a:	d485      	bmi.n	801b868 <HAL_RCC_ClockConfig+0x74>
 801b95c:	e7ad      	b.n	801b8ba <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b95e:	4807      	ldr	r0, [pc, #28]	; (801b97c <HAL_RCC_ClockConfig+0x188>)
 801b960:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801b964:	2300      	movs	r3, #0
 801b966:	fba1 0100 	umull	r0, r1, r1, r0
 801b96a:	f7e4 fde9 	bl	8000540 <__aeabi_uldivmod>
 801b96e:	e7d2      	b.n	801b916 <HAL_RCC_ClockConfig+0x122>
 801b970:	40023c00 	.word	0x40023c00
 801b974:	40023800 	.word	0x40023800
 801b978:	00f42400 	.word	0x00f42400
 801b97c:	017d7840 	.word	0x017d7840
 801b980:	08025914 	.word	0x08025914
 801b984:	200000e4 	.word	0x200000e4
 801b988:	200000e8 	.word	0x200000e8

0801b98c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b98c:	4916      	ldr	r1, [pc, #88]	; (801b9e8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 801b98e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b990:	688b      	ldr	r3, [r1, #8]
 801b992:	f003 030c 	and.w	r3, r3, #12
 801b996:	2b04      	cmp	r3, #4
 801b998:	d01b      	beq.n	801b9d2 <HAL_RCC_GetSysClockFreq+0x46>
 801b99a:	2b08      	cmp	r3, #8
 801b99c:	d117      	bne.n	801b9ce <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b99e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801b9a0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b9a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9a6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801b9a8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 801b9ac:	d113      	bne.n	801b9d6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9ae:	480f      	ldr	r0, [pc, #60]	; (801b9ec <HAL_RCC_GetSysClockFreq+0x60>)
 801b9b0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801b9b4:	fba1 0100 	umull	r0, r1, r1, r0
 801b9b8:	f7e4 fdc2 	bl	8000540 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801b9bc:	4b0a      	ldr	r3, [pc, #40]	; (801b9e8 <HAL_RCC_GetSysClockFreq+0x5c>)
 801b9be:	685b      	ldr	r3, [r3, #4]
 801b9c0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801b9c4:	3301      	adds	r3, #1
 801b9c6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 801b9c8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801b9cc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 801b9ce:	4807      	ldr	r0, [pc, #28]	; (801b9ec <HAL_RCC_GetSysClockFreq+0x60>)
}
 801b9d0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 801b9d2:	4807      	ldr	r0, [pc, #28]	; (801b9f0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 801b9d4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9d6:	4806      	ldr	r0, [pc, #24]	; (801b9f0 <HAL_RCC_GetSysClockFreq+0x64>)
 801b9d8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801b9dc:	2300      	movs	r3, #0
 801b9de:	fba1 0100 	umull	r0, r1, r1, r0
 801b9e2:	f7e4 fdad 	bl	8000540 <__aeabi_uldivmod>
 801b9e6:	e7e9      	b.n	801b9bc <HAL_RCC_GetSysClockFreq+0x30>
 801b9e8:	40023800 	.word	0x40023800
 801b9ec:	00f42400 	.word	0x00f42400
 801b9f0:	017d7840 	.word	0x017d7840

0801b9f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 801b9f4:	4b01      	ldr	r3, [pc, #4]	; (801b9fc <HAL_RCC_GetHCLKFreq+0x8>)
}
 801b9f6:	6818      	ldr	r0, [r3, #0]
 801b9f8:	4770      	bx	lr
 801b9fa:	bf00      	nop
 801b9fc:	200000e8 	.word	0x200000e8

0801ba00 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801ba00:	4b04      	ldr	r3, [pc, #16]	; (801ba14 <HAL_RCC_GetPCLK1Freq+0x14>)
 801ba02:	4a05      	ldr	r2, [pc, #20]	; (801ba18 <HAL_RCC_GetPCLK1Freq+0x18>)
 801ba04:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 801ba06:	4905      	ldr	r1, [pc, #20]	; (801ba1c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801ba08:	f3c3 2382 	ubfx	r3, r3, #10, #3
 801ba0c:	6808      	ldr	r0, [r1, #0]
 801ba0e:	5cd3      	ldrb	r3, [r2, r3]
}
 801ba10:	40d8      	lsrs	r0, r3
 801ba12:	4770      	bx	lr
 801ba14:	40023800 	.word	0x40023800
 801ba18:	08025924 	.word	0x08025924
 801ba1c:	200000e8 	.word	0x200000e8

0801ba20 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801ba20:	4b04      	ldr	r3, [pc, #16]	; (801ba34 <HAL_RCC_GetPCLK2Freq+0x14>)
 801ba22:	4a05      	ldr	r2, [pc, #20]	; (801ba38 <HAL_RCC_GetPCLK2Freq+0x18>)
 801ba24:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 801ba26:	4905      	ldr	r1, [pc, #20]	; (801ba3c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801ba28:	f3c3 3342 	ubfx	r3, r3, #13, #3
 801ba2c:	6808      	ldr	r0, [r1, #0]
 801ba2e:	5cd3      	ldrb	r3, [r2, r3]
}
 801ba30:	40d8      	lsrs	r0, r3
 801ba32:	4770      	bx	lr
 801ba34:	40023800 	.word	0x40023800
 801ba38:	08025924 	.word	0x08025924
 801ba3c:	200000e8 	.word	0x200000e8

0801ba40 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801ba40:	4b0e      	ldr	r3, [pc, #56]	; (801ba7c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801ba42:	220f      	movs	r2, #15
 801ba44:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801ba46:	689a      	ldr	r2, [r3, #8]
 801ba48:	f002 0203 	and.w	r2, r2, #3
 801ba4c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801ba4e:	689a      	ldr	r2, [r3, #8]
 801ba50:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 801ba54:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801ba56:	689a      	ldr	r2, [r3, #8]
 801ba58:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 801ba5c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801ba5e:	689b      	ldr	r3, [r3, #8]
 801ba60:	08db      	lsrs	r3, r3, #3
{
 801ba62:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801ba64:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801ba68:	4c05      	ldr	r4, [pc, #20]	; (801ba80 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801ba6a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801ba6c:	6823      	ldr	r3, [r4, #0]
}
 801ba6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801ba72:	f003 030f 	and.w	r3, r3, #15
 801ba76:	600b      	str	r3, [r1, #0]
}
 801ba78:	4770      	bx	lr
 801ba7a:	bf00      	nop
 801ba7c:	40023800 	.word	0x40023800
 801ba80:	40023c00 	.word	0x40023c00

0801ba84 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 801ba84:	4770      	bx	lr
 801ba86:	bf00      	nop

0801ba88 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 801ba88:	b1e8      	cbz	r0, 801bac6 <HAL_SDRAM_Init+0x3e>
{   
 801ba8a:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 801ba8c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801ba90:	4604      	mov	r4, r0
 801ba92:	460d      	mov	r5, r1
 801ba94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801ba98:	b183      	cbz	r3, 801babc <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801ba9a:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801ba9c:	1d21      	adds	r1, r4, #4
 801ba9e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801baa0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801baa4:	f000 fb88 	bl	801c1b8 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 801baa8:	4629      	mov	r1, r5
 801baaa:	e9d4 0200 	ldrd	r0, r2, [r4]
 801baae:	f000 fbc1 	bl	801c234 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 801bab2:	2301      	movs	r3, #1
  return HAL_OK;
 801bab4:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 801bab6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 801baba:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 801babc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 801bac0:	f7ff ffe0 	bl	801ba84 <HAL_SDRAM_MspInit>
 801bac4:	e7e9      	b.n	801ba9a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 801bac6:	2001      	movs	r0, #1
}
 801bac8:	4770      	bx	lr
 801baca:	bf00      	nop

0801bacc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801bacc:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 801bace:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801bad2:	b2db      	uxtb	r3, r3
 801bad4:	2b02      	cmp	r3, #2
 801bad6:	d010      	beq.n	801bafa <HAL_SDRAM_SendCommand+0x2e>
 801bad8:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801bada:	2302      	movs	r3, #2
 801badc:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801bade:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801bae0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801bae4:	f000 fbf8 	bl	801c2d8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801bae8:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 801baea:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801baec:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801baee:	bf0c      	ite	eq
 801baf0:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 801baf2:	2301      	movne	r3, #1
 801baf4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 801baf8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 801bafa:	4618      	mov	r0, r3
}
 801bafc:	bd38      	pop	{r3, r4, r5, pc}
 801bafe:	bf00      	nop

0801bb00 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 801bb00:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801bb04:	b2db      	uxtb	r3, r3
 801bb06:	2b02      	cmp	r3, #2
 801bb08:	d00c      	beq.n	801bb24 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801bb0a:	2302      	movs	r3, #2
{
 801bb0c:	b510      	push	{r4, lr}
 801bb0e:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 801bb10:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801bb12:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 801bb16:	f000 fbf5 	bl	801c304 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801bb1a:	2301      	movs	r3, #1
  
  return HAL_OK;   
 801bb1c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 801bb1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 801bb22:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 801bb24:	4618      	mov	r0, r3
}
 801bb26:	4770      	bx	lr

0801bb28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 801bb28:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 801bb2a:	4601      	mov	r1, r0
{
 801bb2c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 801bb2e:	2200      	movs	r2, #0
 801bb30:	2036      	movs	r0, #54	; 0x36
 801bb32:	f7fe fe69 	bl	801a808 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801bb36:	2036      	movs	r0, #54	; 0x36
 801bb38:	f7fe fe9c 	bl	801a874 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801bb3c:	4b18      	ldr	r3, [pc, #96]	; (801bba0 <HAL_InitTick+0x78>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801bb3e:	a901      	add	r1, sp, #4
 801bb40:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 801bb42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bb44:	f042 0210 	orr.w	r2, r2, #16
 801bb48:	641a      	str	r2, [r3, #64]	; 0x40
 801bb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb4c:	f003 0310 	and.w	r3, r3, #16
 801bb50:	9302      	str	r3, [sp, #8]
 801bb52:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801bb54:	f7ff ff74 	bl	801ba40 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 801bb58:	9b06      	ldr	r3, [sp, #24]
 801bb5a:	b9c3      	cbnz	r3, 801bb8e <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 801bb5c:	f7ff ff50 	bl	801ba00 <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801bb60:	4b10      	ldr	r3, [pc, #64]	; (801bba4 <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 801bb62:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 801bb64:	4c10      	ldr	r4, [pc, #64]	; (801bba8 <HAL_InitTick+0x80>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 801bb66:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801bb6a:	fba3 1300 	umull	r1, r3, r3, r0
  TimHandle.Instance = TIM6;
 801bb6e:	490f      	ldr	r1, [pc, #60]	; (801bbac <HAL_InitTick+0x84>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 801bb70:	4620      	mov	r0, r4
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 801bb72:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801bb74:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 801bb76:	6021      	str	r1, [r4, #0]
  TimHandle.Init.ClockDivision = 0;
 801bb78:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801bb7a:	3b01      	subs	r3, #1
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bb7c:	60a2      	str	r2, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801bb7e:	61a2      	str	r2, [r4, #24]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 801bb80:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 801bb82:	f000 fbd7 	bl	801c334 <HAL_TIM_Base_Init>
 801bb86:	b130      	cbz	r0, 801bb96 <HAL_InitTick+0x6e>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
 801bb88:	2001      	movs	r0, #1
}
 801bb8a:	b009      	add	sp, #36	; 0x24
 801bb8c:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 801bb8e:	f7ff ff37 	bl	801ba00 <HAL_RCC_GetPCLK1Freq>
 801bb92:	0040      	lsls	r0, r0, #1
 801bb94:	e7e4      	b.n	801bb60 <HAL_InitTick+0x38>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 801bb96:	4620      	mov	r0, r4
 801bb98:	f000 fc50 	bl	801c43c <HAL_TIM_Base_Start_IT>
}
 801bb9c:	b009      	add	sp, #36	; 0x24
 801bb9e:	bd30      	pop	{r4, r5, pc}
 801bba0:	40023800 	.word	0x40023800
 801bba4:	431bde83 	.word	0x431bde83
 801bba8:	2000794c 	.word	0x2000794c
 801bbac:	40001000 	.word	0x40001000

0801bbb0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 801bbb0:	f7fe bdf2 	b.w	801a798 <HAL_IncTick>

0801bbb4 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 801bbb4:	4801      	ldr	r0, [pc, #4]	; (801bbbc <TIM6_DAC_IRQHandler+0x8>)
 801bbb6:	f000 bc5f 	b.w	801c478 <HAL_TIM_IRQHandler>
 801bbba:	bf00      	nop
 801bbbc:	2000794c 	.word	0x2000794c

0801bbc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bbc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bbc4:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801bbc6:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 801bbc8:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 801bbca:	2b20      	cmp	r3, #32
 801bbcc:	d147      	bne.n	801bc5e <HAL_UART_Transmit+0x9e>
 801bbce:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 801bbd0:	2900      	cmp	r1, #0
 801bbd2:	d048      	beq.n	801bc66 <HAL_UART_Transmit+0xa6>
 801bbd4:	fab2 f782 	clz	r7, r2
 801bbd8:	9201      	str	r2, [sp, #4]
 801bbda:	097f      	lsrs	r7, r7, #5
 801bbdc:	2f00      	cmp	r7, #0
 801bbde:	d142      	bne.n	801bc66 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 801bbe0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 801bbe4:	4605      	mov	r5, r0
 801bbe6:	2b01      	cmp	r3, #1
 801bbe8:	d039      	beq.n	801bc5e <HAL_UART_Transmit+0x9e>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bbea:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 801bbec:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bbee:	67c7      	str	r7, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 801bbf0:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bbf4:	6743      	str	r3, [r0, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 801bbf6:	f7fe fddb 	bl	801a7b0 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bbfa:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 801bbfc:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 801bbfe:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bc00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 801bc04:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 801bc08:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bc0c:	f000 8083 	beq.w	801bd16 <HAL_UART_Transmit+0x156>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 801bc10:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    __HAL_UNLOCK(huart);
 801bc14:	2200      	movs	r2, #0
 801bc16:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 801bc18:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 801bc1a:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 801bc1e:	b1ab      	cbz	r3, 801bc4c <HAL_UART_Transmit+0x8c>
 801bc20:	1c71      	adds	r1, r6, #1
 801bc22:	d124      	bne.n	801bc6e <HAL_UART_Transmit+0xae>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bc24:	69e2      	ldr	r2, [r4, #28]
 801bc26:	0612      	lsls	r2, r2, #24
 801bc28:	d5fc      	bpl.n	801bc24 <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 801bc2a:	f1b9 0f00 	cmp.w	r9, #0
 801bc2e:	d034      	beq.n	801bc9a <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801bc30:	f819 3b01 	ldrb.w	r3, [r9], #1
 801bc34:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 801bc36:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 801bc3a:	3b01      	subs	r3, #1
 801bc3c:	b29b      	uxth	r3, r3
 801bc3e:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801bc42:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 801bc46:	b29b      	uxth	r3, r3
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d1e9      	bne.n	801bc20 <HAL_UART_Transmit+0x60>
 801bc4c:	1c71      	adds	r1, r6, #1
 801bc4e:	d129      	bne.n	801bca4 <HAL_UART_Transmit+0xe4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bc50:	69e3      	ldr	r3, [r4, #28]
 801bc52:	065a      	lsls	r2, r3, #25
 801bc54:	d5fc      	bpl.n	801bc50 <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_READY;
 801bc56:	2320      	movs	r3, #32
    return HAL_OK;
 801bc58:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 801bc5a:	676b      	str	r3, [r5, #116]	; 0x74
    return HAL_OK;
 801bc5c:	e000      	b.n	801bc60 <HAL_UART_Transmit+0xa0>
    return HAL_BUSY;
 801bc5e:	2002      	movs	r0, #2
}
 801bc60:	b003      	add	sp, #12
 801bc62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 801bc66:	2001      	movs	r0, #1
}
 801bc68:	b003      	add	sp, #12
 801bc6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bc6e:	69e3      	ldr	r3, [r4, #28]
 801bc70:	061b      	lsls	r3, r3, #24
 801bc72:	d4da      	bmi.n	801bc2a <HAL_UART_Transmit+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bc74:	f7fe fd9c 	bl	801a7b0 <HAL_GetTick>
 801bc78:	eba0 0008 	sub.w	r0, r0, r8
 801bc7c:	4286      	cmp	r6, r0
 801bc7e:	d339      	bcc.n	801bcf4 <HAL_UART_Transmit+0x134>
 801bc80:	fab6 f386 	clz	r3, r6
 801bc84:	095b      	lsrs	r3, r3, #5
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d134      	bne.n	801bcf4 <HAL_UART_Transmit+0x134>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801bc8a:	682c      	ldr	r4, [r5, #0]
 801bc8c:	6822      	ldr	r2, [r4, #0]
 801bc8e:	0752      	lsls	r2, r2, #29
 801bc90:	d5c6      	bpl.n	801bc20 <HAL_UART_Transmit+0x60>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bc92:	69e2      	ldr	r2, [r4, #28]
 801bc94:	0510      	lsls	r0, r2, #20
 801bc96:	d5c3      	bpl.n	801bc20 <HAL_UART_Transmit+0x60>
 801bc98:	e019      	b.n	801bcce <HAL_UART_Transmit+0x10e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bc9a:	f837 3b02 	ldrh.w	r3, [r7], #2
 801bc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bca2:	e7c7      	b.n	801bc34 <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bca4:	69e3      	ldr	r3, [r4, #28]
 801bca6:	065b      	lsls	r3, r3, #25
 801bca8:	d4d5      	bmi.n	801bc56 <HAL_UART_Transmit+0x96>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bcaa:	f7fe fd81 	bl	801a7b0 <HAL_GetTick>
 801bcae:	eba0 0008 	sub.w	r0, r0, r8
 801bcb2:	fab6 f386 	clz	r3, r6
 801bcb6:	4286      	cmp	r6, r0
 801bcb8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801bcbc:	d31a      	bcc.n	801bcf4 <HAL_UART_Transmit+0x134>
 801bcbe:	b9cb      	cbnz	r3, 801bcf4 <HAL_UART_Transmit+0x134>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801bcc0:	682c      	ldr	r4, [r5, #0]
 801bcc2:	6822      	ldr	r2, [r4, #0]
 801bcc4:	0757      	lsls	r7, r2, #29
 801bcc6:	d5c1      	bpl.n	801bc4c <HAL_UART_Transmit+0x8c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bcc8:	69e2      	ldr	r2, [r4, #28]
 801bcca:	0510      	lsls	r0, r2, #20
 801bccc:	d5be      	bpl.n	801bc4c <HAL_UART_Transmit+0x8c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bcce:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 801bcd2:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 801bcd4:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bcd6:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bcd8:	6821      	ldr	r1, [r4, #0]
 801bcda:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 801bcde:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bce0:	68a1      	ldr	r1, [r4, #8]
 801bce2:	f021 0101 	bic.w	r1, r1, #1
 801bce6:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 801bce8:	676a      	str	r2, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bcea:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 801bcee:	67aa      	str	r2, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bcf0:	67ea      	str	r2, [r5, #124]	; 0x7c
 801bcf2:	e7b5      	b.n	801bc60 <HAL_UART_Transmit+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bcf4:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 801bcf6:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 801bcf8:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 801bcfa:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bcfc:	681a      	ldr	r2, [r3, #0]
 801bcfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801bd02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bd04:	689a      	ldr	r2, [r3, #8]
 801bd06:	f022 0201 	bic.w	r2, r2, #1
 801bd0a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 801bd0c:	6769      	str	r1, [r5, #116]	; 0x74
        __HAL_UNLOCK(huart);
 801bd0e:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 801bd12:	67a9      	str	r1, [r5, #120]	; 0x78
 801bd14:	e7a4      	b.n	801bc60 <HAL_UART_Transmit+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bd16:	692b      	ldr	r3, [r5, #16]
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	f47f af79 	bne.w	801bc10 <HAL_UART_Transmit+0x50>
 801bd1e:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 801bd20:	4699      	mov	r9, r3
 801bd22:	e775      	b.n	801bc10 <HAL_UART_Transmit+0x50>

0801bd24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801bd24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801bd26:	07da      	lsls	r2, r3, #31
{
 801bd28:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801bd2a:	d506      	bpl.n	801bd3a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801bd2c:	6801      	ldr	r1, [r0, #0]
 801bd2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801bd30:	684a      	ldr	r2, [r1, #4]
 801bd32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801bd36:	4322      	orrs	r2, r4
 801bd38:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801bd3a:	079c      	lsls	r4, r3, #30
 801bd3c:	d506      	bpl.n	801bd4c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801bd3e:	6801      	ldr	r1, [r0, #0]
 801bd40:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801bd42:	684a      	ldr	r2, [r1, #4]
 801bd44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801bd48:	4322      	orrs	r2, r4
 801bd4a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801bd4c:	0759      	lsls	r1, r3, #29
 801bd4e:	d506      	bpl.n	801bd5e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801bd50:	6801      	ldr	r1, [r0, #0]
 801bd52:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801bd54:	684a      	ldr	r2, [r1, #4]
 801bd56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801bd5a:	4322      	orrs	r2, r4
 801bd5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801bd5e:	071a      	lsls	r2, r3, #28
 801bd60:	d506      	bpl.n	801bd70 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801bd62:	6801      	ldr	r1, [r0, #0]
 801bd64:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801bd66:	684a      	ldr	r2, [r1, #4]
 801bd68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801bd6c:	4322      	orrs	r2, r4
 801bd6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801bd70:	06dc      	lsls	r4, r3, #27
 801bd72:	d506      	bpl.n	801bd82 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801bd74:	6801      	ldr	r1, [r0, #0]
 801bd76:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801bd78:	688a      	ldr	r2, [r1, #8]
 801bd7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801bd7e:	4322      	orrs	r2, r4
 801bd80:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801bd82:	0699      	lsls	r1, r3, #26
 801bd84:	d506      	bpl.n	801bd94 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801bd86:	6801      	ldr	r1, [r0, #0]
 801bd88:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 801bd8a:	688a      	ldr	r2, [r1, #8]
 801bd8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801bd90:	4322      	orrs	r2, r4
 801bd92:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801bd94:	065a      	lsls	r2, r3, #25
 801bd96:	d50a      	bpl.n	801bdae <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801bd98:	6801      	ldr	r1, [r0, #0]
 801bd9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801bd9c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bd9e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801bda2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 801bda6:	ea42 0204 	orr.w	r2, r2, r4
 801bdaa:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bdac:	d00b      	beq.n	801bdc6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801bdae:	061b      	lsls	r3, r3, #24
 801bdb0:	d506      	bpl.n	801bdc0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801bdb2:	6802      	ldr	r2, [r0, #0]
 801bdb4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801bdb6:	6853      	ldr	r3, [r2, #4]
 801bdb8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801bdbc:	430b      	orrs	r3, r1
 801bdbe:	6053      	str	r3, [r2, #4]
}
 801bdc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdc4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bdc6:	684a      	ldr	r2, [r1, #4]
 801bdc8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 801bdca:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 801bdce:	4322      	orrs	r2, r4
 801bdd0:	604a      	str	r2, [r1, #4]
 801bdd2:	e7ec      	b.n	801bdae <UART_AdvFeatureConfig+0x8a>

0801bdd4 <HAL_UART_Init>:
  if (huart == NULL)
 801bdd4:	2800      	cmp	r0, #0
 801bdd6:	d04f      	beq.n	801be78 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 801bdd8:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 801bdda:	b570      	push	{r4, r5, r6, lr}
 801bddc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d045      	beq.n	801be6e <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 801bde2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801bde4:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bde6:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 801bde8:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bdea:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 801bdec:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bdee:	4302      	orrs	r2, r0
 801bdf0:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 801bdf2:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801bdf6:	4dbc      	ldr	r5, [pc, #752]	; (801c0e8 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bdf8:	4302      	orrs	r2, r0
 801bdfa:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 801bdfc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801bdfe:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801be00:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801be02:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801be04:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801be06:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801be08:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 801be0a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801be0c:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 801be0e:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801be12:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801be14:	4db5      	ldr	r5, [pc, #724]	; (801c0ec <HAL_UART_Init+0x318>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801be16:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 801be1a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801be1c:	ea41 0106 	orr.w	r1, r1, r6
 801be20:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801be22:	6899      	ldr	r1, [r3, #8]
 801be24:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801be28:	ea42 0201 	orr.w	r2, r2, r1
 801be2c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801be2e:	d025      	beq.n	801be7c <HAL_UART_Init+0xa8>
 801be30:	4aaf      	ldr	r2, [pc, #700]	; (801c0f0 <HAL_UART_Init+0x31c>)
 801be32:	4293      	cmp	r3, r2
 801be34:	d044      	beq.n	801bec0 <HAL_UART_Init+0xec>
 801be36:	4aaf      	ldr	r2, [pc, #700]	; (801c0f4 <HAL_UART_Init+0x320>)
 801be38:	4293      	cmp	r3, r2
 801be3a:	f000 80f3 	beq.w	801c024 <HAL_UART_Init+0x250>
 801be3e:	4aae      	ldr	r2, [pc, #696]	; (801c0f8 <HAL_UART_Init+0x324>)
 801be40:	4293      	cmp	r3, r2
 801be42:	d045      	beq.n	801bed0 <HAL_UART_Init+0xfc>
 801be44:	4aad      	ldr	r2, [pc, #692]	; (801c0fc <HAL_UART_Init+0x328>)
 801be46:	4293      	cmp	r3, r2
 801be48:	f000 80d8 	beq.w	801bffc <HAL_UART_Init+0x228>
 801be4c:	4aac      	ldr	r2, [pc, #688]	; (801c100 <HAL_UART_Init+0x32c>)
 801be4e:	4293      	cmp	r3, r2
 801be50:	f000 8188 	beq.w	801c164 <HAL_UART_Init+0x390>
 801be54:	4aab      	ldr	r2, [pc, #684]	; (801c104 <HAL_UART_Init+0x330>)
 801be56:	4293      	cmp	r3, r2
 801be58:	f000 8198 	beq.w	801c18c <HAL_UART_Init+0x3b8>
 801be5c:	4aaa      	ldr	r2, [pc, #680]	; (801c108 <HAL_UART_Init+0x334>)
 801be5e:	4293      	cmp	r3, r2
 801be60:	f000 815e 	beq.w	801c120 <HAL_UART_Init+0x34c>
  huart->RxISR = NULL;
 801be64:	2300      	movs	r3, #0
    return HAL_ERROR;
 801be66:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 801be68:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 801be6c:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 801be6e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 801be72:	f7e4 fd87 	bl	8000984 <HAL_UART_MspInit>
 801be76:	e7b4      	b.n	801bde2 <HAL_UART_Init+0xe>
    return HAL_ERROR;
 801be78:	2001      	movs	r0, #1
}
 801be7a:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 801be7c:	4ba3      	ldr	r3, [pc, #652]	; (801c10c <HAL_UART_Init+0x338>)
 801be7e:	4aa4      	ldr	r2, [pc, #656]	; (801c110 <HAL_UART_Init+0x33c>)
 801be80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be84:	f003 0303 	and.w	r3, r3, #3
 801be88:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801be8a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801be8e:	d02f      	beq.n	801bef0 <HAL_UART_Init+0x11c>
    switch (clocksource)
 801be90:	2b08      	cmp	r3, #8
 801be92:	d8e7      	bhi.n	801be64 <HAL_UART_Init+0x90>
 801be94:	a201      	add	r2, pc, #4	; (adr r2, 801be9c <HAL_UART_Init+0xc8>)
 801be96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be9a:	bf00      	nop
 801be9c:	0801bfeb 	.word	0x0801bfeb
 801bea0:	0801bf2d 	.word	0x0801bf2d
 801bea4:	0801c03f 	.word	0x0801c03f
 801bea8:	0801be65 	.word	0x0801be65
 801beac:	0801c013 	.word	0x0801c013
 801beb0:	0801be65 	.word	0x0801be65
 801beb4:	0801be65 	.word	0x0801be65
 801beb8:	0801be65 	.word	0x0801be65
 801bebc:	0801c04f 	.word	0x0801c04f
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bec0:	4b92      	ldr	r3, [pc, #584]	; (801c10c <HAL_UART_Init+0x338>)
 801bec2:	4a94      	ldr	r2, [pc, #592]	; (801c114 <HAL_UART_Init+0x340>)
 801bec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bec8:	f003 030c 	and.w	r3, r3, #12
 801becc:	5cd3      	ldrb	r3, [r2, r3]
 801bece:	e7dc      	b.n	801be8a <HAL_UART_Init+0xb6>
 801bed0:	4b8e      	ldr	r3, [pc, #568]	; (801c10c <HAL_UART_Init+0x338>)
 801bed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801beda:	2b40      	cmp	r3, #64	; 0x40
 801bedc:	f000 8096 	beq.w	801c00c <HAL_UART_Init+0x238>
 801bee0:	d97d      	bls.n	801bfde <HAL_UART_Init+0x20a>
 801bee2:	2b80      	cmp	r3, #128	; 0x80
 801bee4:	f000 80a8 	beq.w	801c038 <HAL_UART_Init+0x264>
 801bee8:	2bc0      	cmp	r3, #192	; 0xc0
 801beea:	f000 80c5 	beq.w	801c078 <HAL_UART_Init+0x2a4>
 801beee:	e7b9      	b.n	801be64 <HAL_UART_Init+0x90>
    switch (clocksource)
 801bef0:	2b08      	cmp	r3, #8
 801bef2:	d8b7      	bhi.n	801be64 <HAL_UART_Init+0x90>
 801bef4:	a201      	add	r2, pc, #4	; (adr r2, 801befc <HAL_UART_Init+0x128>)
 801bef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801befa:	bf00      	nop
 801befc:	0801c0e1 	.word	0x0801c0e1
 801bf00:	0801c0b7 	.word	0x0801c0b7
 801bf04:	0801c0d1 	.word	0x0801c0d1
 801bf08:	0801be65 	.word	0x0801be65
 801bf0c:	0801c0cb 	.word	0x0801c0cb
 801bf10:	0801be65 	.word	0x0801be65
 801bf14:	0801be65 	.word	0x0801be65
 801bf18:	0801be65 	.word	0x0801be65
 801bf1c:	0801c07f 	.word	0x0801c07f
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d19f      	bne.n	801be64 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bf24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801bf28:	f000 80c5 	beq.w	801c0b6 <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 801bf2c:	f7ff fd78 	bl	801ba20 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801bf30:	6863      	ldr	r3, [r4, #4]
 801bf32:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 801bf36:	fbb2 f2f3 	udiv	r2, r2, r3
 801bf3a:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bf3c:	f1a2 0110 	sub.w	r1, r2, #16
 801bf40:	f64f 73ef 	movw	r3, #65519	; 0xffef
 801bf44:	4299      	cmp	r1, r3
 801bf46:	d88d      	bhi.n	801be64 <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 801bf48:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 801bf4a:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 801bf4c:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 801bf4e:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801bf52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801bf54:	2a00      	cmp	r2, #0
 801bf56:	f040 8082 	bne.w	801c05e <HAL_UART_Init+0x28a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801bf5a:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bf5c:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801bf5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801bf62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801bf64:	689a      	ldr	r2, [r3, #8]
 801bf66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801bf6a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801bf6c:	681a      	ldr	r2, [r3, #0]
 801bf6e:	f042 0201 	orr.w	r2, r2, #1
 801bf72:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bf74:	67e1      	str	r1, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 801bf76:	f7fe fc1b 	bl	801a7b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bf7a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801bf7c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bf7e:	681a      	ldr	r2, [r3, #0]
 801bf80:	0710      	lsls	r0, r2, #28
 801bf82:	d407      	bmi.n	801bf94 <HAL_UART_Init+0x1c0>
  huart->gState = HAL_UART_STATE_READY;
 801bf84:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 801bf86:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 801bf88:	6762      	str	r2, [r4, #116]	; 0x74
  return HAL_OK;
 801bf8a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 801bf8c:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 801bf8e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 801bf92:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bf94:	69dd      	ldr	r5, [r3, #28]
 801bf96:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 801bf9a:	d1f3      	bne.n	801bf84 <HAL_UART_Init+0x1b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bf9c:	f7fe fc08 	bl	801a7b0 <HAL_GetTick>
 801bfa0:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bfa2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bfa4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 801bfa8:	f080 80cd 	bcs.w	801c146 <HAL_UART_Init+0x372>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801bfac:	681a      	ldr	r2, [r3, #0]
 801bfae:	0751      	lsls	r1, r2, #29
 801bfb0:	d5f0      	bpl.n	801bf94 <HAL_UART_Init+0x1c0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bfb2:	69da      	ldr	r2, [r3, #28]
 801bfb4:	0512      	lsls	r2, r2, #20
 801bfb6:	d5ed      	bpl.n	801bf94 <HAL_UART_Init+0x1c0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bfb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 801bfbc:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 801bfbe:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bfc0:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bfc2:	6819      	ldr	r1, [r3, #0]
 801bfc4:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 801bfc8:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bfca:	6899      	ldr	r1, [r3, #8]
 801bfcc:	f021 0101 	bic.w	r1, r1, #1
 801bfd0:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 801bfd2:	6762      	str	r2, [r4, #116]	; 0x74
          __HAL_UNLOCK(huart);
 801bfd4:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 801bfd8:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bfda:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 801bfdc:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f47f af40 	bne.w	801be64 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bfe4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801bfe8:	d07a      	beq.n	801c0e0 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 801bfea:	f7ff fd09 	bl	801ba00 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801bfee:	6863      	ldr	r3, [r4, #4]
 801bff0:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 801bff4:	fbb2 f2f3 	udiv	r2, r2, r3
 801bff8:	b292      	uxth	r2, r2
 801bffa:	e79f      	b.n	801bf3c <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bffc:	4b43      	ldr	r3, [pc, #268]	; (801c10c <HAL_UART_Init+0x338>)
 801bffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c00a:	d12d      	bne.n	801c068 <HAL_UART_Init+0x294>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c00c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801c010:	d05b      	beq.n	801c0ca <HAL_UART_Init+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 801c012:	f7ff fcbb 	bl	801b98c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801c016:	6863      	ldr	r3, [r4, #4]
 801c018:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 801c01c:	fbb2 f2f3 	udiv	r2, r2, r3
 801c020:	b292      	uxth	r2, r2
 801c022:	e78b      	b.n	801bf3c <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c024:	4b39      	ldr	r3, [pc, #228]	; (801c10c <HAL_UART_Init+0x338>)
 801c026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c02a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c02e:	2b10      	cmp	r3, #16
 801c030:	d0ec      	beq.n	801c00c <HAL_UART_Init+0x238>
 801c032:	d9d4      	bls.n	801bfde <HAL_UART_Init+0x20a>
 801c034:	2b20      	cmp	r3, #32
 801c036:	d13b      	bne.n	801c0b0 <HAL_UART_Init+0x2dc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c038:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801c03c:	d048      	beq.n	801c0d0 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 801c03e:	6863      	ldr	r3, [r4, #4]
 801c040:	4a35      	ldr	r2, [pc, #212]	; (801c118 <HAL_UART_Init+0x344>)
 801c042:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 801c046:	fbb2 f2f3 	udiv	r2, r2, r3
 801c04a:	b292      	uxth	r2, r2
 801c04c:	e776      	b.n	801bf3c <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 801c04e:	6863      	ldr	r3, [r4, #4]
 801c050:	085a      	lsrs	r2, r3, #1
 801c052:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c056:	fbb2 f2f3 	udiv	r2, r2, r3
 801c05a:	b292      	uxth	r2, r2
 801c05c:	e76e      	b.n	801bf3c <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 801c05e:	4620      	mov	r0, r4
 801c060:	f7ff fe60 	bl	801bd24 <UART_AdvFeatureConfig>
 801c064:	6823      	ldr	r3, [r4, #0]
 801c066:	e778      	b.n	801bf5a <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c068:	d9b9      	bls.n	801bfde <HAL_UART_Init+0x20a>
 801c06a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c06e:	d0e3      	beq.n	801c038 <HAL_UART_Init+0x264>
 801c070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c074:	f47f aef6 	bne.w	801be64 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c078:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801c07c:	d1e7      	bne.n	801c04e <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801c07e:	6862      	ldr	r2, [r4, #4]
 801c080:	0853      	lsrs	r3, r2, #1
 801c082:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801c086:	fbb3 f3f2 	udiv	r3, r3, r2
 801c08a:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c08c:	f1a3 0110 	sub.w	r1, r3, #16
 801c090:	f64f 72ef 	movw	r2, #65519	; 0xffef
 801c094:	4291      	cmp	r1, r2
 801c096:	f63f aee5 	bhi.w	801be64 <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801c09a:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801c09e:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 801c0a2:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 801c0a4:	6823      	ldr	r3, [r4, #0]
 801c0a6:	430a      	orrs	r2, r1
 801c0a8:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 801c0aa:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 801c0ae:	e750      	b.n	801bf52 <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c0b0:	2b30      	cmp	r3, #48	; 0x30
 801c0b2:	d0e1      	beq.n	801c078 <HAL_UART_Init+0x2a4>
 801c0b4:	e6d6      	b.n	801be64 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 801c0b6:	f7ff fcb3 	bl	801ba20 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801c0ba:	6862      	ldr	r2, [r4, #4]
 801c0bc:	0853      	lsrs	r3, r2, #1
 801c0be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801c0c2:	fbb3 f3f2 	udiv	r3, r3, r2
 801c0c6:	b29b      	uxth	r3, r3
 801c0c8:	e7e0      	b.n	801c08c <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 801c0ca:	f7ff fc5f 	bl	801b98c <HAL_RCC_GetSysClockFreq>
 801c0ce:	e7f4      	b.n	801c0ba <HAL_UART_Init+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801c0d0:	6862      	ldr	r2, [r4, #4]
 801c0d2:	4b12      	ldr	r3, [pc, #72]	; (801c11c <HAL_UART_Init+0x348>)
 801c0d4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801c0d8:	fbb3 f3f2 	udiv	r3, r3, r2
 801c0dc:	b29b      	uxth	r3, r3
 801c0de:	e7d5      	b.n	801c08c <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 801c0e0:	f7ff fc8e 	bl	801ba00 <HAL_RCC_GetPCLK1Freq>
 801c0e4:	e7e9      	b.n	801c0ba <HAL_UART_Init+0x2e6>
 801c0e6:	bf00      	nop
 801c0e8:	efff69f3 	.word	0xefff69f3
 801c0ec:	40011000 	.word	0x40011000
 801c0f0:	40004400 	.word	0x40004400
 801c0f4:	40004800 	.word	0x40004800
 801c0f8:	40004c00 	.word	0x40004c00
 801c0fc:	40005000 	.word	0x40005000
 801c100:	40011400 	.word	0x40011400
 801c104:	40007800 	.word	0x40007800
 801c108:	40007c00 	.word	0x40007c00
 801c10c:	40023800 	.word	0x40023800
 801c110:	08025900 	.word	0x08025900
 801c114:	08025904 	.word	0x08025904
 801c118:	00f42400 	.word	0x00f42400
 801c11c:	01e84800 	.word	0x01e84800
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c120:	4b24      	ldr	r3, [pc, #144]	; (801c1b4 <HAL_UART_Init+0x3e0>)
 801c122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c126:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801c12a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c12e:	f43f af6d 	beq.w	801c00c <HAL_UART_Init+0x238>
 801c132:	f67f af54 	bls.w	801bfde <HAL_UART_Init+0x20a>
 801c136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c13a:	f43f af7d 	beq.w	801c038 <HAL_UART_Init+0x264>
 801c13e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801c142:	d099      	beq.n	801c078 <HAL_UART_Init+0x2a4>
 801c144:	e68e      	b.n	801be64 <HAL_UART_Init+0x90>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c146:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 801c148:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 801c14a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c14c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801c150:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c152:	689a      	ldr	r2, [r3, #8]
 801c154:	f022 0201 	bic.w	r2, r2, #1
 801c158:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 801c15a:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 801c15c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 801c160:	67a1      	str	r1, [r4, #120]	; 0x78
}
 801c162:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c164:	4b13      	ldr	r3, [pc, #76]	; (801c1b4 <HAL_UART_Init+0x3e0>)
 801c166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c16a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801c16e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c172:	f43f af4b 	beq.w	801c00c <HAL_UART_Init+0x238>
 801c176:	f67f aed3 	bls.w	801bf20 <HAL_UART_Init+0x14c>
 801c17a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c17e:	f43f af5b 	beq.w	801c038 <HAL_UART_Init+0x264>
 801c182:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c186:	f43f af77 	beq.w	801c078 <HAL_UART_Init+0x2a4>
 801c18a:	e66b      	b.n	801be64 <HAL_UART_Init+0x90>
 801c18c:	4b09      	ldr	r3, [pc, #36]	; (801c1b4 <HAL_UART_Init+0x3e0>)
 801c18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c192:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801c196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c19a:	f43f af37 	beq.w	801c00c <HAL_UART_Init+0x238>
 801c19e:	f67f af1e 	bls.w	801bfde <HAL_UART_Init+0x20a>
 801c1a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c1a6:	f43f af47 	beq.w	801c038 <HAL_UART_Init+0x264>
 801c1aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c1ae:	f43f af63 	beq.w	801c078 <HAL_UART_Init+0x2a4>
 801c1b2:	e657      	b.n	801be64 <HAL_UART_Init+0x90>
 801c1b4:	40023800 	.word	0x40023800

0801c1b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801c1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 801c1bc:	680f      	ldr	r7, [r1, #0]
 801c1be:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 801c1c2:	2f01      	cmp	r7, #1
 801c1c4:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 801c1c8:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 801c1cc:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 801c1d0:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 801c1d4:	d012      	beq.n	801c1fc <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c1d6:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801c1d8:	4f15      	ldr	r7, [pc, #84]	; (801c230 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801c1da:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c1dc:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801c1e0:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c1e2:	4322      	orrs	r2, r4
 801c1e4:	ea42 0308 	orr.w	r3, r2, r8
 801c1e8:	ea43 030c 	orr.w	r3, r3, ip
 801c1ec:	4333      	orrs	r3, r6
 801c1ee:	432b      	orrs	r3, r5
 801c1f0:	430b      	orrs	r3, r1
 801c1f2:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801c1f4:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 801c1f6:	2000      	movs	r0, #0
 801c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c1fc:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801c200:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801c202:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c204:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 801c208:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801c20c:	4c08      	ldr	r4, [pc, #32]	; (801c230 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801c20e:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c212:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 801c214:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801c218:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c21c:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801c21e:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c220:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801c222:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801c224:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801c226:	6043      	str	r3, [r0, #4]
}
 801c228:	2000      	movs	r0, #0
 801c22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c22e:	bf00      	nop
 801c230:	ffff8000 	.word	0xffff8000

0801c234 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801c234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c238:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 801c23a:	2a01      	cmp	r2, #1
 801c23c:	68cf      	ldr	r7, [r1, #12]
 801c23e:	694e      	ldr	r6, [r1, #20]
 801c240:	f103 33ff 	add.w	r3, r3, #4294967295
 801c244:	684d      	ldr	r5, [r1, #4]
 801c246:	f107 37ff 	add.w	r7, r7, #4294967295
 801c24a:	688c      	ldr	r4, [r1, #8]
 801c24c:	f106 36ff 	add.w	r6, r6, #4294967295
 801c250:	f8d1 c018 	ldr.w	ip, [r1, #24]
 801c254:	f105 35ff 	add.w	r5, r5, #4294967295
 801c258:	6809      	ldr	r1, [r1, #0]
 801c25a:	f104 34ff 	add.w	r4, r4, #4294967295
 801c25e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c262:	ea4f 3707 	mov.w	r7, r7, lsl #12
 801c266:	f101 38ff 	add.w	r8, r1, #4294967295
 801c26a:	ea4f 5606 	mov.w	r6, r6, lsl #20
 801c26e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 801c272:	ea4f 2104 	mov.w	r1, r4, lsl #8
 801c276:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 801c27a:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 801c27e:	d012      	beq.n	801c2a6 <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801c280:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801c284:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801c286:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801c28a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801c28e:	ea42 0305 	orr.w	r3, r2, r5
 801c292:	430b      	orrs	r3, r1
 801c294:	ea43 030e 	orr.w	r3, r3, lr
 801c298:	ea43 030c 	orr.w	r3, r3, ip
 801c29c:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801c29e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 801c2a0:	2000      	movs	r0, #0
 801c2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801c2a6:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801c2a8:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801c2ac:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801c2ae:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 801c2b2:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801c2b4:	4e07      	ldr	r6, [pc, #28]	; (801c2d4 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801c2b6:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801c2ba:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801c2be:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801c2c0:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801c2c4:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801c2c6:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801c2c8:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801c2ca:	60c3      	str	r3, [r0, #12]
}
 801c2cc:	2000      	movs	r0, #0
 801c2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2d2:	bf00      	nop
 801c2d4:	ff0f0fff 	.word	0xff0f0fff

0801c2d8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801c2d8:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 801c2da:	2200      	movs	r2, #0
{
 801c2dc:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801c2de:	684d      	ldr	r5, [r1, #4]
{
 801c2e0:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801c2e2:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 801c2e4:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 801c2e6:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801c2e8:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 801c2ea:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801c2ee:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 801c2f2:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801c2f4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801c2f8:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 801c2fa:	9b01      	ldr	r3, [sp, #4]
 801c2fc:	6123      	str	r3, [r4, #16]
}
 801c2fe:	b002      	add	sp, #8
 801c300:	bc30      	pop	{r4, r5}
 801c302:	4770      	bx	lr

0801c304 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801c304:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 801c306:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 801c308:	6953      	ldr	r3, [r2, #20]
 801c30a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 801c30e:	6151      	str	r1, [r2, #20]
}
 801c310:	4770      	bx	lr
 801c312:	bf00      	nop

0801c314 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801c314:	4b05      	ldr	r3, [pc, #20]	; (801c32c <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801c316:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801c31a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801c31e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 801c322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801c326:	6099      	str	r1, [r3, #8]
#endif
}
 801c328:	4770      	bx	lr
 801c32a:	bf00      	nop
 801c32c:	e000ed00 	.word	0xe000ed00

0801c330 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801c330:	4770      	bx	lr
 801c332:	bf00      	nop

0801c334 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 801c334:	2800      	cmp	r0, #0
 801c336:	d065      	beq.n	801c404 <HAL_TIM_Base_Init+0xd0>
{
 801c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 801c33a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801c33e:	4604      	mov	r4, r0
 801c340:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801c344:	2b00      	cmp	r3, #0
 801c346:	d03b      	beq.n	801c3c0 <HAL_TIM_Base_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801c348:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801c34a:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c34c:	4e36      	ldr	r6, [pc, #216]	; (801c428 <HAL_TIM_Base_Init+0xf4>)
 801c34e:	4f37      	ldr	r7, [pc, #220]	; (801c42c <HAL_TIM_Base_Init+0xf8>)
 801c350:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801c354:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 801c358:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 801c35c:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 801c360:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c362:	fab6 f686 	clz	r6, r6
 801c366:	fab7 f787 	clz	r7, r7
 801c36a:	ea4f 1656 	mov.w	r6, r6, lsr #5
 801c36e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 801c372:	d02a      	beq.n	801c3ca <HAL_TIM_Base_Init+0x96>
 801c374:	bb4e      	cbnz	r6, 801c3ca <HAL_TIM_Base_Init+0x96>
 801c376:	492e      	ldr	r1, [pc, #184]	; (801c430 <HAL_TIM_Base_Init+0xfc>)
 801c378:	428a      	cmp	r2, r1
 801c37a:	d045      	beq.n	801c408 <HAL_TIM_Base_Init+0xd4>
 801c37c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801c380:	428a      	cmp	r2, r1
 801c382:	d041      	beq.n	801c408 <HAL_TIM_Base_Init+0xd4>
 801c384:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801c388:	428a      	cmp	r2, r1
 801c38a:	d042      	beq.n	801c412 <HAL_TIM_Base_Init+0xde>
 801c38c:	2f00      	cmp	r7, #0
 801c38e:	d140      	bne.n	801c412 <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c390:	4928      	ldr	r1, [pc, #160]	; (801c434 <HAL_TIM_Base_Init+0x100>)
 801c392:	428a      	cmp	r2, r1
 801c394:	d01e      	beq.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
 801c396:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801c39a:	428a      	cmp	r2, r1
 801c39c:	d01a      	beq.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
 801c39e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801c3a2:	428a      	cmp	r2, r1
 801c3a4:	d016      	beq.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
 801c3a6:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 801c3aa:	428a      	cmp	r2, r1
 801c3ac:	d012      	beq.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
 801c3ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801c3b2:	428a      	cmp	r2, r1
 801c3b4:	d00e      	beq.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
 801c3b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801c3ba:	428a      	cmp	r2, r1
 801c3bc:	d10e      	bne.n	801c3dc <HAL_TIM_Base_Init+0xa8>
 801c3be:	e009      	b.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 801c3c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 801c3c4:	f7ff ffb4 	bl	801c330 <HAL_TIM_Base_MspInit>
 801c3c8:	e7be      	b.n	801c348 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c3ca:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801c3ce:	68a0      	ldr	r0, [r4, #8]
 801c3d0:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801c3d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801c3d8:	6920      	ldr	r0, [r4, #16]
 801c3da:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c3dc:	69a1      	ldr	r1, [r4, #24]
 801c3de:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c3e2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c3e4:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801c3e6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 801c3e8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c3ea:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801c3ec:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801c3ee:	b936      	cbnz	r6, 801c3fe <HAL_TIM_Base_Init+0xca>
 801c3f0:	b92f      	cbnz	r7, 801c3fe <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801c3f2:	2301      	movs	r3, #1
  return HAL_OK;
 801c3f4:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 801c3f6:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 801c3f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 801c3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 801c3fe:	6963      	ldr	r3, [r4, #20]
 801c400:	6313      	str	r3, [r2, #48]	; 0x30
 801c402:	e7f6      	b.n	801c3f2 <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 801c404:	2001      	movs	r0, #1
}
 801c406:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801c40c:	68a1      	ldr	r1, [r4, #8]
 801c40e:	430b      	orrs	r3, r1
 801c410:	e7e0      	b.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c412:	4909      	ldr	r1, [pc, #36]	; (801c438 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801c418:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c41a:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 801c41c:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c420:	d0d8      	beq.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
 801c422:	2f00      	cmp	r7, #0
 801c424:	d1d6      	bne.n	801c3d4 <HAL_TIM_Base_Init+0xa0>
 801c426:	e7b3      	b.n	801c390 <HAL_TIM_Base_Init+0x5c>
 801c428:	40010000 	.word	0x40010000
 801c42c:	40010400 	.word	0x40010400
 801c430:	40000400 	.word	0x40000400
 801c434:	40014000 	.word	0x40014000
 801c438:	40000c00 	.word	0x40000c00

0801c43c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801c43c:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801c43e:	4a09      	ldr	r2, [pc, #36]	; (801c464 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801c440:	68d9      	ldr	r1, [r3, #12]
 801c442:	f041 0101 	orr.w	r1, r1, #1
 801c446:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801c448:	6899      	ldr	r1, [r3, #8]
 801c44a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c44c:	2a06      	cmp	r2, #6
 801c44e:	d006      	beq.n	801c45e <HAL_TIM_Base_Start_IT+0x22>
 801c450:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801c454:	d003      	beq.n	801c45e <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 801c456:	681a      	ldr	r2, [r3, #0]
 801c458:	f042 0201 	orr.w	r2, r2, #1
 801c45c:	601a      	str	r2, [r3, #0]
}
 801c45e:	2000      	movs	r0, #0
 801c460:	4770      	bx	lr
 801c462:	bf00      	nop
 801c464:	00010007 	.word	0x00010007

0801c468 <HAL_TIM_OC_DelayElapsedCallback>:
 801c468:	4770      	bx	lr
 801c46a:	bf00      	nop

0801c46c <HAL_TIM_IC_CaptureCallback>:
 801c46c:	4770      	bx	lr
 801c46e:	bf00      	nop

0801c470 <HAL_TIM_PWM_PulseFinishedCallback>:
 801c470:	4770      	bx	lr
 801c472:	bf00      	nop

0801c474 <HAL_TIM_TriggerCallback>:
 801c474:	4770      	bx	lr
 801c476:	bf00      	nop

0801c478 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801c478:	6803      	ldr	r3, [r0, #0]
 801c47a:	691a      	ldr	r2, [r3, #16]
 801c47c:	0791      	lsls	r1, r2, #30
{
 801c47e:	b510      	push	{r4, lr}
 801c480:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801c482:	d502      	bpl.n	801c48a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801c484:	68da      	ldr	r2, [r3, #12]
 801c486:	0792      	lsls	r2, r2, #30
 801c488:	d468      	bmi.n	801c55c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801c48a:	691a      	ldr	r2, [r3, #16]
 801c48c:	0752      	lsls	r2, r2, #29
 801c48e:	d502      	bpl.n	801c496 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801c490:	68da      	ldr	r2, [r3, #12]
 801c492:	0750      	lsls	r0, r2, #29
 801c494:	d44f      	bmi.n	801c536 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801c496:	691a      	ldr	r2, [r3, #16]
 801c498:	0711      	lsls	r1, r2, #28
 801c49a:	d502      	bpl.n	801c4a2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801c49c:	68da      	ldr	r2, [r3, #12]
 801c49e:	0712      	lsls	r2, r2, #28
 801c4a0:	d437      	bmi.n	801c512 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801c4a2:	691a      	ldr	r2, [r3, #16]
 801c4a4:	06d0      	lsls	r0, r2, #27
 801c4a6:	d502      	bpl.n	801c4ae <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801c4a8:	68da      	ldr	r2, [r3, #12]
 801c4aa:	06d1      	lsls	r1, r2, #27
 801c4ac:	d41e      	bmi.n	801c4ec <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801c4ae:	691a      	ldr	r2, [r3, #16]
 801c4b0:	07d2      	lsls	r2, r2, #31
 801c4b2:	d502      	bpl.n	801c4ba <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801c4b4:	68da      	ldr	r2, [r3, #12]
 801c4b6:	07d0      	lsls	r0, r2, #31
 801c4b8:	d469      	bmi.n	801c58e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801c4ba:	691a      	ldr	r2, [r3, #16]
 801c4bc:	0611      	lsls	r1, r2, #24
 801c4be:	d502      	bpl.n	801c4c6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801c4c0:	68da      	ldr	r2, [r3, #12]
 801c4c2:	0612      	lsls	r2, r2, #24
 801c4c4:	d46b      	bmi.n	801c59e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801c4c6:	691a      	ldr	r2, [r3, #16]
 801c4c8:	05d0      	lsls	r0, r2, #23
 801c4ca:	d502      	bpl.n	801c4d2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801c4cc:	68da      	ldr	r2, [r3, #12]
 801c4ce:	0611      	lsls	r1, r2, #24
 801c4d0:	d46d      	bmi.n	801c5ae <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801c4d2:	691a      	ldr	r2, [r3, #16]
 801c4d4:	0652      	lsls	r2, r2, #25
 801c4d6:	d502      	bpl.n	801c4de <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801c4d8:	68da      	ldr	r2, [r3, #12]
 801c4da:	0650      	lsls	r0, r2, #25
 801c4dc:	d46f      	bmi.n	801c5be <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801c4de:	691a      	ldr	r2, [r3, #16]
 801c4e0:	0691      	lsls	r1, r2, #26
 801c4e2:	d502      	bpl.n	801c4ea <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801c4e4:	68da      	ldr	r2, [r3, #12]
 801c4e6:	0692      	lsls	r2, r2, #26
 801c4e8:	d449      	bmi.n	801c57e <HAL_TIM_IRQHandler+0x106>
}
 801c4ea:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801c4ec:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801c4f0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 801c4f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801c4f4:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801c4f6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801c4f8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801c4fa:	f413 7f40 	tst.w	r3, #768	; 0x300
 801c4fe:	d16f      	bne.n	801c5e0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801c500:	f7ff ffb2 	bl	801c468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801c504:	4620      	mov	r0, r4
 801c506:	f7ff ffb3 	bl	801c470 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801c50a:	2200      	movs	r2, #0
 801c50c:	6823      	ldr	r3, [r4, #0]
 801c50e:	7722      	strb	r2, [r4, #28]
 801c510:	e7cd      	b.n	801c4ae <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801c512:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801c516:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 801c518:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801c51a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801c51c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801c51e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801c520:	079b      	lsls	r3, r3, #30
 801c522:	d15a      	bne.n	801c5da <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801c524:	f7ff ffa0 	bl	801c468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801c528:	4620      	mov	r0, r4
 801c52a:	f7ff ffa1 	bl	801c470 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801c52e:	2200      	movs	r2, #0
 801c530:	6823      	ldr	r3, [r4, #0]
 801c532:	7722      	strb	r2, [r4, #28]
 801c534:	e7b5      	b.n	801c4a2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801c536:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801c53a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 801c53c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801c53e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801c540:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801c542:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801c544:	f413 7f40 	tst.w	r3, #768	; 0x300
 801c548:	d144      	bne.n	801c5d4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801c54a:	f7ff ff8d 	bl	801c468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801c54e:	4620      	mov	r0, r4
 801c550:	f7ff ff8e 	bl	801c470 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801c554:	2200      	movs	r2, #0
 801c556:	6823      	ldr	r3, [r4, #0]
 801c558:	7722      	strb	r2, [r4, #28]
 801c55a:	e79c      	b.n	801c496 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801c55c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801c560:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801c562:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801c564:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801c566:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801c568:	0799      	lsls	r1, r3, #30
 801c56a:	d130      	bne.n	801c5ce <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801c56c:	f7ff ff7c 	bl	801c468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801c570:	4620      	mov	r0, r4
 801c572:	f7ff ff7d 	bl	801c470 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801c576:	2200      	movs	r2, #0
 801c578:	6823      	ldr	r3, [r4, #0]
 801c57a:	7722      	strb	r2, [r4, #28]
 801c57c:	e785      	b.n	801c48a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801c57e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801c582:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801c584:	611a      	str	r2, [r3, #16]
}
 801c586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 801c58a:	f000 b82d 	b.w	801c5e8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801c58e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 801c592:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801c594:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801c596:	f7ff fb0b 	bl	801bbb0 <HAL_TIM_PeriodElapsedCallback>
 801c59a:	6823      	ldr	r3, [r4, #0]
 801c59c:	e78d      	b.n	801c4ba <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801c59e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 801c5a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801c5a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801c5a6:	f000 f821 	bl	801c5ec <HAL_TIMEx_BreakCallback>
 801c5aa:	6823      	ldr	r3, [r4, #0]
 801c5ac:	e78b      	b.n	801c4c6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801c5ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 801c5b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801c5b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801c5b6:	f000 f81b 	bl	801c5f0 <HAL_TIMEx_Break2Callback>
 801c5ba:	6823      	ldr	r3, [r4, #0]
 801c5bc:	e789      	b.n	801c4d2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801c5be:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 801c5c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801c5c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801c5c6:	f7ff ff55 	bl	801c474 <HAL_TIM_TriggerCallback>
 801c5ca:	6823      	ldr	r3, [r4, #0]
 801c5cc:	e787      	b.n	801c4de <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 801c5ce:	f7ff ff4d 	bl	801c46c <HAL_TIM_IC_CaptureCallback>
 801c5d2:	e7d0      	b.n	801c576 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 801c5d4:	f7ff ff4a 	bl	801c46c <HAL_TIM_IC_CaptureCallback>
 801c5d8:	e7bc      	b.n	801c554 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 801c5da:	f7ff ff47 	bl	801c46c <HAL_TIM_IC_CaptureCallback>
 801c5de:	e7a6      	b.n	801c52e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 801c5e0:	f7ff ff44 	bl	801c46c <HAL_TIM_IC_CaptureCallback>
 801c5e4:	e791      	b.n	801c50a <HAL_TIM_IRQHandler+0x92>
 801c5e6:	bf00      	nop

0801c5e8 <HAL_TIMEx_CommutCallback>:
 801c5e8:	4770      	bx	lr
 801c5ea:	bf00      	nop

0801c5ec <HAL_TIMEx_BreakCallback>:
 801c5ec:	4770      	bx	lr
 801c5ee:	bf00      	nop

0801c5f0 <HAL_TIMEx_Break2Callback>:
 801c5f0:	4770      	bx	lr
 801c5f2:	bf00      	nop

0801c5f4 <_tx_event_flags_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 801c5f4:	b538      	push	{r3, r4, r5, lr}
 801c5f6:	460c      	mov	r4, r1
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 801c5f8:	2228      	movs	r2, #40	; 0x28
 801c5fa:	2100      	movs	r1, #0
 801c5fc:	f001 ffcd 	bl	801e59a <memset>
 801c600:	4603      	mov	r3, r0

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 801c602:	6044      	str	r4, [r0, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c604:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c608:	b672      	cpsid	i
    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 801c60a:	490b      	ldr	r1, [pc, #44]	; (801c638 <_tx_event_flags_create+0x44>)
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 801c60c:	480b      	ldr	r0, [pc, #44]	; (801c63c <_tx_event_flags_create+0x48>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 801c60e:	680a      	ldr	r2, [r1, #0]
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 801c610:	6018      	str	r0, [r3, #0]
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 801c612:	480b      	ldr	r0, [pc, #44]	; (801c640 <_tx_event_flags_create+0x4c>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 801c614:	b15a      	cbz	r2, 801c62e <_tx_event_flags_create+0x3a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 801c616:	6800      	ldr	r0, [r0, #0]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 801c618:	69c5      	ldr	r5, [r0, #28]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 801c61a:	61c3      	str	r3, [r0, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 801c61c:	61ab      	str	r3, [r5, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 801c61e:	e9c3 0506 	strd	r0, r5, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 801c622:	3201      	adds	r2, #1
 801c624:	600a      	str	r2, [r1, #0]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c626:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 801c62a:	2000      	movs	r0, #0
 801c62c:	bd38      	pop	{r3, r4, r5, pc}
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 801c62e:	e9c3 3306 	strd	r3, r3, [r3, #24]
        _tx_event_flags_created_ptr =                         group_ptr;
 801c632:	6003      	str	r3, [r0, #0]
 801c634:	e7f5      	b.n	801c622 <_tx_event_flags_create+0x2e>
 801c636:	bf00      	nop
 801c638:	200079d4 	.word	0x200079d4
 801c63c:	4456444e 	.word	0x4456444e
 801c640:	200079b0 	.word	0x200079b0

0801c644 <_tx_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 801c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c646:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c64a:	b672      	cpsid	i
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 801c64c:	6a06      	ldr	r6, [r0, #32]
    and_request =  (get_option & TX_AND);
 801c64e:	f002 0702 	and.w	r7, r2, #2
    current_flags =  group_ptr -> tx_event_flags_group_current;
 801c652:	6884      	ldr	r4, [r0, #8]

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 801c654:	b10e      	cbz	r6, 801c65a <_tx_event_flags_get+0x16>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 801c656:	ea24 0406 	bic.w	r4, r4, r6
 801c65a:	ea04 0601 	and.w	r6, r4, r1
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 801c65e:	2f00      	cmp	r7, #0
 801c660:	d03c      	beq.n	801c6dc <_tx_event_flags_get+0x98>
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 801c662:	42b1      	cmp	r1, r6
 801c664:	d03a      	beq.n	801c6dc <_tx_event_flags_get+0x98>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801c666:	9c06      	ldr	r4, [sp, #24]
 801c668:	2c00      	cmp	r4, #0
 801c66a:	d04a      	beq.n	801c702 <_tx_event_flags_get+0xbe>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801c66c:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 801c720 <_tx_event_flags_get+0xdc>
 801c670:	f8dc 4000 	ldr.w	r4, [ip]
 801c674:	2c00      	cmp	r4, #0
 801c676:	d144      	bne.n	801c702 <_tx_event_flags_get+0xbe>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 801c678:	4c28      	ldr	r4, [pc, #160]	; (801c71c <_tx_event_flags_get+0xd8>)
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801c67a:	6946      	ldr	r6, [r0, #20]
                TX_THREAD_GET_CURRENT(thread_ptr)
 801c67c:	6824      	ldr	r4, [r4, #0]
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 801c67e:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 801c724 <_tx_event_flags_get+0xe0>
                thread_ptr -> tx_thread_suspension_sequence++;
 801c682:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 801c686:	67a1      	str	r1, [r4, #120]	; 0x78
                thread_ptr -> tx_thread_suspension_sequence++;
 801c688:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 801c68a:	e9c4 321f 	strd	r3, r2, [r4, #124]	; 0x7c
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 801c68e:	e9c4 e01a 	strd	lr, r0, [r4, #104]	; 0x68
                thread_ptr -> tx_thread_suspension_sequence++;
 801c692:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 801c696:	2e00      	cmp	r6, #0
 801c698:	d038      	beq.n	801c70c <_tx_event_flags_get+0xc8>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 801c69a:	6903      	ldr	r3, [r0, #16]
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801c69c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801c69e:	e9c4 321c 	strd	r3, r2, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801c6a2:	6714      	str	r4, [r2, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801c6a4:	675c      	str	r4, [r3, #116]	; 0x74

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801c6a6:	f8dc 3000 	ldr.w	r3, [ip]
                group_ptr -> tx_event_flags_group_suspended_count++;
 801c6aa:	3601      	adds	r6, #1
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 801c6ac:	2107      	movs	r1, #7
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801c6ae:	2201      	movs	r2, #1
                group_ptr -> tx_event_flags_group_suspended_count++;
 801c6b0:	6146      	str	r6, [r0, #20]
                _tx_thread_preempt_disable++;
 801c6b2:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801c6b4:	9806      	ldr	r0, [sp, #24]
                _tx_thread_preempt_disable++;
 801c6b6:	f8cc 3000 	str.w	r3, [ip]
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801c6ba:	64e0      	str	r0, [r4, #76]	; 0x4c
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 801c6bc:	6321      	str	r1, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801c6be:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c6c0:	f385 8810 	msr	PRIMASK, r5

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801c6c4:	4620      	mov	r0, r4
 801c6c6:	f000 fe79 	bl	801d3bc <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c6ca:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c6ce:	b672      	cpsid	i
    
                /* Disable interrupts.  */
                TX_DISABLE
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801c6d0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c6d4:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
}
 801c6d8:	4610      	mov	r0, r2
 801c6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (flags_satisfied != ((ULONG) 0))
 801c6dc:	2e00      	cmp	r6, #0
 801c6de:	d0c2      	beq.n	801c666 <_tx_event_flags_get+0x22>
        if (clear_request == TX_TRUE)
 801c6e0:	f012 0201 	ands.w	r2, r2, #1
        *actual_flags_ptr =  current_flags;
 801c6e4:	601c      	str	r4, [r3, #0]
        if (clear_request == TX_TRUE)
 801c6e6:	d00d      	beq.n	801c704 <_tx_event_flags_get+0xc0>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801c6e8:	6943      	ldr	r3, [r0, #20]
 801c6ea:	b10b      	cbz	r3, 801c6f0 <_tx_event_flags_get+0xac>
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 801c6ec:	6902      	ldr	r2, [r0, #16]
 801c6ee:	b18a      	cbz	r2, 801c714 <_tx_event_flags_get+0xd0>
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801c6f0:	6883      	ldr	r3, [r0, #8]
        status =  TX_SUCCESS;
 801c6f2:	2200      	movs	r2, #0
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801c6f4:	ea23 0101 	bic.w	r1, r3, r1
                group_ptr -> tx_event_flags_group_current =
 801c6f8:	6081      	str	r1, [r0, #8]
 801c6fa:	f385 8810 	msr	PRIMASK, r5
}
 801c6fe:	4610      	mov	r0, r2
 801c700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                status =  TX_NO_EVENTS;
 801c702:	2207      	movs	r2, #7
 801c704:	f385 8810 	msr	PRIMASK, r5
}
 801c708:	4610      	mov	r0, r2
 801c70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 801c70c:	6104      	str	r4, [r0, #16]
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 801c70e:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 801c712:	e7c8      	b.n	801c6a6 <_tx_event_flags_get+0x62>
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 801c714:	6a03      	ldr	r3, [r0, #32]
 801c716:	4319      	orrs	r1, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 801c718:	6201      	str	r1, [r0, #32]
 801c71a:	e7f3      	b.n	801c704 <_tx_event_flags_get+0xc0>
 801c71c:	20007a80 	.word	0x20007a80
 801c720:	20007a7c 	.word	0x20007a7c
 801c724:	0801df29 	.word	0x0801df29

0801c728 <_tx_event_flags_set>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 801c728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c72c:	b083      	sub	sp, #12
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c72e:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c732:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 801c734:	0794      	lsls	r4, r2, #30
 801c736:	d50c      	bpl.n	801c752 <_tx_event_flags_set+0x2a>
        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801c738:	6943      	ldr	r3, [r0, #20]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	f040 80ba 	bne.w	801c8b4 <_tx_event_flags_set+0x18c>

            /* Previous set operation was not interrupted, simply clear the 
               specified flags by "ANDing" the flags into the current events 
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 801c740:	6883      	ldr	r3, [r0, #8]
 801c742:	4019      	ands	r1, r3
            group_ptr -> tx_event_flags_group_current =
 801c744:	6081      	str	r1, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c746:	f386 8810 	msr	PRIMASK, r6
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 801c74a:	2000      	movs	r0, #0
 801c74c:	b003      	add	sp, #12
 801c74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 801c752:	6885      	ldr	r5, [r0, #8]
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 801c754:	6a42      	ldr	r2, [r0, #36]	; 0x24
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 801c756:	430d      	orrs	r5, r1
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 801c758:	6a03      	ldr	r3, [r0, #32]
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 801c75a:	9201      	str	r2, [sp, #4]
        group_ptr -> tx_event_flags_group_current =
 801c75c:	6085      	str	r5, [r0, #8]
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 801c75e:	b113      	cbz	r3, 801c766 <_tx_event_flags_set+0x3e>
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 801c760:	ea23 0101 	bic.w	r1, r3, r1
            group_ptr -> tx_event_flags_group_delayed_clear =  
 801c764:	6201      	str	r1, [r0, #32]
 801c766:	4604      	mov	r4, r0
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801c768:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	f000 80ad 	beq.w	801c8cc <_tx_event_flags_set+0x1a4>
            if (suspended_count == ((UINT) 1))
 801c772:	2a01      	cmp	r2, #1
 801c774:	f000 80af 	beq.w	801c8d6 <_tx_event_flags_set+0x1ae>
                _tx_thread_preempt_disable++;
 801c778:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c92c <_tx_event_flags_set+0x204>
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801c77c:	2000      	movs	r0, #0
                _tx_thread_preempt_disable++;
 801c77e:	469c      	mov	ip, r3
 801c780:	46ae      	mov	lr, r5
 801c782:	f8d8 1000 	ldr.w	r1, [r8]
        preempt_check =  TX_FALSE;
 801c786:	4607      	mov	r7, r0
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801c788:	6120      	str	r0, [r4, #16]
                _tx_thread_preempt_disable++;
 801c78a:	4681      	mov	r9, r0
 801c78c:	3101      	adds	r1, #1
                last_satisfied =  TX_NULL;
 801c78e:	9000      	str	r0, [sp, #0]
                _tx_thread_preempt_disable++;
 801c790:	f8c8 1000 	str.w	r1, [r8]
 801c794:	e01b      	b.n	801c7ce <_tx_event_flags_set+0xa6>
                        if (flags_satisfied != requested_flags)
 801c796:	455d      	cmp	r5, fp
 801c798:	d032      	beq.n	801c800 <_tx_event_flags_set+0xd8>
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 801c79a:	f1ba 0f07 	cmp.w	sl, #7
 801c79e:	d013      	beq.n	801c7c8 <_tx_event_flags_set+0xa0>
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801c7a0:	428b      	cmp	r3, r1
 801c7a2:	d042      	beq.n	801c82a <_tx_event_flags_set+0x102>
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801c7a4:	6f58      	ldr	r0, [r3, #116]	; 0x74
                            if (suspended_list == thread_ptr)
 801c7a6:	4563      	cmp	r3, ip
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801c7a8:	6748      	str	r0, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 801c7aa:	6701      	str	r1, [r0, #112]	; 0x70
                            if (suspended_list == thread_ptr)
 801c7ac:	f000 808b 	beq.w	801c8c6 <_tx_event_flags_set+0x19e>
                        group_ptr -> tx_event_flags_group_suspended_count--;
 801c7b0:	6967      	ldr	r7, [r4, #20]
 801c7b2:	3f01      	subs	r7, #1
 801c7b4:	6167      	str	r7, [r4, #20]
                        if (satisfied_list == TX_NULL)
 801c7b6:	f1b9 0f00 	cmp.w	r9, #0
 801c7ba:	d03e      	beq.n	801c83a <_tx_event_flags_set+0x112>
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 801c7bc:	9800      	ldr	r0, [sp, #0]
                        preempt_check =  TX_TRUE;
 801c7be:	2701      	movs	r7, #1
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 801c7c0:	9300      	str	r3, [sp, #0]
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 801c7c2:	6703      	str	r3, [r0, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 801c7c4:	2000      	movs	r0, #0
 801c7c6:	6718      	str	r0, [r3, #112]	; 0x70
                } while (suspended_count != TX_NO_SUSPENSIONS);
 801c7c8:	3a01      	subs	r2, #1
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801c7ca:	460b      	mov	r3, r1
                } while (suspended_count != TX_NO_SUSPENSIONS);
 801c7cc:	d03e      	beq.n	801c84c <_tx_event_flags_set+0x124>
 801c7ce:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c7d2:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c7d6:	b672      	cpsid	i
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 801c7d8:	68e1      	ldr	r1, [r4, #12]
 801c7da:	b131      	cbz	r1, 801c7ea <_tx_event_flags_set+0xc2>
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 801c7dc:	68a1      	ldr	r1, [r4, #8]
 801c7de:	4663      	mov	r3, ip
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801c7e0:	6962      	ldr	r2, [r4, #20]
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 801c7e2:	ea4e 0e01 	orr.w	lr, lr, r1
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 801c7e6:	2100      	movs	r1, #0
 801c7e8:	60e1      	str	r1, [r4, #12]
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 801c7ea:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 801c7ee:	6f9d      	ldr	r5, [r3, #120]	; 0x78
                    if (and_request == TX_AND)
 801c7f0:	f010 0f02 	tst.w	r0, #2
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801c7f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c7f6:	ea0e 0b05 	and.w	fp, lr, r5
 801c7fa:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
                    if (and_request == TX_AND)
 801c7fe:	d1ca      	bne.n	801c796 <_tx_event_flags_set+0x6e>
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 801c800:	f1ba 0f07 	cmp.w	sl, #7
 801c804:	d1cc      	bne.n	801c7a0 <_tx_event_flags_set+0x78>
                    if (flags_satisfied != ((ULONG) 0))
 801c806:	f1bb 0f00 	cmp.w	fp, #0
 801c80a:	d0dd      	beq.n	801c7c8 <_tx_event_flags_set+0xa0>
                            *suspend_info_ptr =  current_event_flags;
 801c80c:	6fdf      	ldr	r7, [r3, #124]	; 0x7c
                            if (clear_request == TX_TRUE)
 801c80e:	07c0      	lsls	r0, r0, #31
                            *suspend_info_ptr =  current_event_flags;
 801c810:	f8c7 e000 	str.w	lr, [r7]
                            if (clear_request == TX_TRUE)
 801c814:	d503      	bpl.n	801c81e <_tx_event_flags_set+0xf6>
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801c816:	68a7      	ldr	r7, [r4, #8]
 801c818:	ea27 0505 	bic.w	r5, r7, r5
 801c81c:	60a5      	str	r5, [r4, #8]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c81e:	2000      	movs	r0, #0
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801c820:	428b      	cmp	r3, r1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c822:	6698      	str	r0, [r3, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801c824:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801c828:	d1bc      	bne.n	801c7a4 <_tx_event_flags_set+0x7c>
                        group_ptr -> tx_event_flags_group_suspended_count--;
 801c82a:	6967      	ldr	r7, [r4, #20]
                            suspended_list =  TX_NULL;
 801c82c:	f04f 0c00 	mov.w	ip, #0
                        group_ptr -> tx_event_flags_group_suspended_count--;
 801c830:	3f01      	subs	r7, #1
 801c832:	6167      	str	r7, [r4, #20]
                        if (satisfied_list == TX_NULL)
 801c834:	f1b9 0f00 	cmp.w	r9, #0
 801c838:	d1c0      	bne.n	801c7bc <_tx_event_flags_set+0x94>
                } while (suspended_count != TX_NO_SUSPENSIONS);
 801c83a:	3a01      	subs	r2, #1
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 801c83c:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
 801c840:	9300      	str	r3, [sp, #0]
 801c842:	4699      	mov	r9, r3
                        preempt_check =  TX_TRUE;
 801c844:	f04f 0701 	mov.w	r7, #1
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801c848:	460b      	mov	r3, r1
                } while (suspended_count != TX_NO_SUSPENSIONS);
 801c84a:	d1c0      	bne.n	801c7ce <_tx_event_flags_set+0xa6>
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 801c84c:	6a21      	ldr	r1, [r4, #32]
 801c84e:	4648      	mov	r0, r9
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 801c850:	f8c4 c010 	str.w	ip, [r4, #16]
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 801c854:	b121      	cbz	r1, 801c860 <_tx_event_flags_set+0x138>
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 801c856:	68a3      	ldr	r3, [r4, #8]
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 801c858:	6222      	str	r2, [r4, #32]
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 801c85a:	ea23 0301 	bic.w	r3, r3, r1
                    group_ptr -> tx_event_flags_group_current =
 801c85e:	60a3      	str	r3, [r4, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c860:	f386 8810 	msr	PRIMASK, r6
                while(thread_ptr != TX_NULL)
 801c864:	b178      	cbz	r0, 801c886 <_tx_event_flags_set+0x15e>
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801c866:	6f05      	ldr	r5, [r0, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c868:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c86c:	b672      	cpsid	i
                    _tx_thread_preempt_disable++;
 801c86e:	f8d8 3000 	ldr.w	r3, [r8]
 801c872:	3301      	adds	r3, #1
 801c874:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c878:	f382 8810 	msr	PRIMASK, r2
                    _tx_thread_system_resume(thread_ptr);
 801c87c:	f000 fd18 	bl	801d2b0 <_tx_thread_system_resume>
                while(thread_ptr != TX_NULL)
 801c880:	4628      	mov	r0, r5
 801c882:	2d00      	cmp	r5, #0
 801c884:	d1ef      	bne.n	801c866 <_tx_event_flags_set+0x13e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c886:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c88a:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 801c88c:	f8d8 3000 	ldr.w	r3, [r8]
 801c890:	3b01      	subs	r3, #1
 801c892:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c896:	f386 8810 	msr	PRIMASK, r6
        if (events_set_notify != TX_NULL)
 801c89a:	9b01      	ldr	r3, [sp, #4]
 801c89c:	b10b      	cbz	r3, 801c8a2 <_tx_event_flags_set+0x17a>
            (events_set_notify)(group_ptr);
 801c89e:	4620      	mov	r0, r4
 801c8a0:	4798      	blx	r3
        if (preempt_check == TX_TRUE)
 801c8a2:	2f00      	cmp	r7, #0
 801c8a4:	f43f af51 	beq.w	801c74a <_tx_event_flags_set+0x22>
            _tx_thread_system_preempt_check();
 801c8a8:	f000 fce4 	bl	801d274 <_tx_thread_system_preempt_check>
}
 801c8ac:	2000      	movs	r0, #0
 801c8ae:	b003      	add	sp, #12
 801c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 801c8b4:	6903      	ldr	r3, [r0, #16]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	f47f af42 	bne.w	801c740 <_tx_event_flags_set+0x18>
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 801c8bc:	6a03      	ldr	r3, [r0, #32]
 801c8be:	ea63 0101 	orn	r1, r3, r1
            group_ptr -> tx_event_flags_group_delayed_clear =  
 801c8c2:	6201      	str	r1, [r0, #32]
 801c8c4:	e73f      	b.n	801c746 <_tx_event_flags_set+0x1e>
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 801c8c6:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
 801c8ca:	e771      	b.n	801c7b0 <_tx_event_flags_set+0x88>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801c8cc:	b362      	cbz	r2, 801c928 <_tx_event_flags_set+0x200>
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801c8ce:	2201      	movs	r2, #1
        preempt_check =  TX_FALSE;
 801c8d0:	461f      	mov	r7, r3
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801c8d2:	60c2      	str	r2, [r0, #12]
 801c8d4:	e7df      	b.n	801c896 <_tx_event_flags_set+0x16e>
                get_option =  thread_ptr -> tx_thread_suspend_option;
 801c8d6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 801c8da:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                if (and_request == TX_AND)
 801c8dc:	0788      	lsls	r0, r1, #30
 801c8de:	ea05 0702 	and.w	r7, r5, r2
 801c8e2:	d503      	bpl.n	801c8ec <_tx_event_flags_set+0x1c4>
                    if (flags_satisfied != requested_flags)
 801c8e4:	42ba      	cmp	r2, r7
 801c8e6:	d001      	beq.n	801c8ec <_tx_event_flags_set+0x1c4>
        preempt_check =  TX_FALSE;
 801c8e8:	2700      	movs	r7, #0
 801c8ea:	e7d4      	b.n	801c896 <_tx_event_flags_set+0x16e>
                if (flags_satisfied != ((ULONG) 0))
 801c8ec:	2f00      	cmp	r7, #0
 801c8ee:	d0d2      	beq.n	801c896 <_tx_event_flags_set+0x16e>
                    *suspend_info_ptr =  current_event_flags;
 801c8f0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
                    if (clear_request == TX_TRUE)
 801c8f2:	07c9      	lsls	r1, r1, #31
                    *suspend_info_ptr =  current_event_flags;
 801c8f4:	6005      	str	r5, [r0, #0]
                    if (clear_request == TX_TRUE)
 801c8f6:	d503      	bpl.n	801c900 <_tx_event_flags_set+0x1d8>
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 801c8f8:	68a1      	ldr	r1, [r4, #8]
 801c8fa:	ea21 0202 	bic.w	r2, r1, r2
 801c8fe:	60a2      	str	r2, [r4, #8]
                    _tx_thread_preempt_disable++;
 801c900:	480a      	ldr	r0, [pc, #40]	; (801c92c <_tx_event_flags_set+0x204>)
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801c902:	2200      	movs	r2, #0
                    _tx_thread_preempt_disable++;
 801c904:	6801      	ldr	r1, [r0, #0]
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801c906:	6122      	str	r2, [r4, #16]
                    _tx_thread_preempt_disable++;
 801c908:	3101      	adds	r1, #1
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 801c90a:	6162      	str	r2, [r4, #20]
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c90c:	669a      	str	r2, [r3, #104]	; 0x68
                    _tx_thread_preempt_disable++;
 801c90e:	6001      	str	r1, [r0, #0]
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801c910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801c914:	f386 8810 	msr	PRIMASK, r6
                    _tx_thread_system_resume(thread_ptr);
 801c918:	4618      	mov	r0, r3
 801c91a:	f000 fcc9 	bl	801d2b0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c91e:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c922:	b672      	cpsid	i
                    preempt_check =  TX_TRUE;
 801c924:	2701      	movs	r7, #1
 801c926:	e7b6      	b.n	801c896 <_tx_event_flags_set+0x16e>
        preempt_check =  TX_FALSE;
 801c928:	4617      	mov	r7, r2
 801c92a:	e7b4      	b.n	801c896 <_tx_event_flags_set+0x16e>
 801c92c:	20007a7c 	.word	0x20007a7c

0801c930 <_tx_execution_thread_total_time_reset>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_execution_thread_total_time_reset(void)
{
 801c930:	b470      	push	{r4, r5, r6}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c932:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c936:	b672      	cpsid	i

    /* Reset the total time to 0.  */
    _tx_execution_thread_time_total =  0;

    /* Loop through threads to clear their accumulated time.  */
    total_threads =      _tx_thread_created_count;
 801c938:	4a0b      	ldr	r2, [pc, #44]	; (801c968 <_tx_execution_thread_total_time_reset+0x38>)
    _tx_execution_thread_time_total =  0;
 801c93a:	2000      	movs	r0, #0
 801c93c:	4b0b      	ldr	r3, [pc, #44]	; (801c96c <_tx_execution_thread_total_time_reset+0x3c>)
    thread_ptr =         _tx_thread_created_ptr;
 801c93e:	4e0c      	ldr	r6, [pc, #48]	; (801c970 <_tx_execution_thread_total_time_reset+0x40>)
    total_threads =      _tx_thread_created_count;
 801c940:	6814      	ldr	r4, [r2, #0]
    _tx_execution_thread_time_total =  0;
 801c942:	e9c3 0000 	strd	r0, r0, [r3]
    thread_ptr =         _tx_thread_created_ptr;
 801c946:	6833      	ldr	r3, [r6, #0]
    while (total_threads--)
 801c948:	b144      	cbz	r4, 801c95c <_tx_execution_thread_total_time_reset+0x2c>
 801c94a:	4601      	mov	r1, r0
 801c94c:	1e62      	subs	r2, r4, #1
 801c94e:	3a01      	subs	r2, #1
 801c950:	1c54      	adds	r4, r2, #1
    {
        thread_ptr -> tx_thread_execution_time_total =  0;
 801c952:	e9c3 012c 	strd	r0, r1, [r3, #176]	; 0xb0
        thread_ptr =  thread_ptr -> tx_thread_created_next;
 801c956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    while (total_threads--)
 801c95a:	d1f8      	bne.n	801c94e <_tx_execution_thread_total_time_reset+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c95c:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success.  */
    return(TX_SUCCESS);
}
 801c960:	2000      	movs	r0, #0
 801c962:	bc70      	pop	{r4, r5, r6}
 801c964:	4770      	bx	lr
 801c966:	bf00      	nop
 801c968:	20007a74 	.word	0x20007a74
 801c96c:	20007998 	.word	0x20007998
 801c970:	20007a6c 	.word	0x20007a6c

0801c974 <_tx_execution_isr_time_reset>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_execution_isr_time_reset(void)
{
 801c974:	b430      	push	{r4, r5}

    /* Reset the total time to 0.  */
    _tx_execution_isr_time_total =  0;
 801c976:	4b04      	ldr	r3, [pc, #16]	; (801c988 <_tx_execution_isr_time_reset+0x14>)
 801c978:	2400      	movs	r4, #0
 801c97a:	2500      	movs	r5, #0

    /* Return success.  */
    return(TX_SUCCESS);
}
 801c97c:	2000      	movs	r0, #0
    _tx_execution_isr_time_total =  0;
 801c97e:	e9c3 4500 	strd	r4, r5, [r3]
}
 801c982:	bc30      	pop	{r4, r5}
 801c984:	4770      	bx	lr
 801c986:	bf00      	nop
 801c988:	20007990 	.word	0x20007990

0801c98c <_tx_execution_idle_time_reset>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_execution_idle_time_reset(void)
{
 801c98c:	b430      	push	{r4, r5}

    /* Reset the total time to 0.  */
    _tx_execution_idle_time_total =  0;
 801c98e:	4b04      	ldr	r3, [pc, #16]	; (801c9a0 <_tx_execution_idle_time_reset+0x14>)
 801c990:	2400      	movs	r4, #0
 801c992:	2500      	movs	r5, #0

    /* Return success.  */
    return(TX_SUCCESS);
}
 801c994:	2000      	movs	r0, #0
    _tx_execution_idle_time_total =  0;
 801c996:	e9c3 4500 	strd	r4, r5, [r3]
}
 801c99a:	bc30      	pop	{r4, r5}
 801c99c:	4770      	bx	lr
 801c99e:	bf00      	nop
 801c9a0:	200079a0 	.word	0x200079a0

0801c9a4 <_tx_execution_thread_total_time_get>:
/**************************************************************************/
UINT  _tx_execution_thread_total_time_get(EXECUTION_TIME *total_time)
{

    /* Return the total time.  */
    *total_time =  _tx_execution_thread_time_total;
 801c9a4:	4b03      	ldr	r3, [pc, #12]	; (801c9b4 <_tx_execution_thread_total_time_get+0x10>)
 801c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9aa:	e9c0 2300 	strd	r2, r3, [r0]

    /* Return success.  */
    return(TX_SUCCESS);
}
 801c9ae:	2000      	movs	r0, #0
 801c9b0:	4770      	bx	lr
 801c9b2:	bf00      	nop
 801c9b4:	20007998 	.word	0x20007998

0801c9b8 <_tx_execution_isr_time_get>:
/**************************************************************************/
UINT  _tx_execution_isr_time_get(EXECUTION_TIME *total_time)
{

    /* Return the total time.  */
    *total_time =  _tx_execution_isr_time_total;
 801c9b8:	4b03      	ldr	r3, [pc, #12]	; (801c9c8 <_tx_execution_isr_time_get+0x10>)
 801c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9be:	e9c0 2300 	strd	r2, r3, [r0]

    /* Return success.  */
    return(TX_SUCCESS);
}
 801c9c2:	2000      	movs	r0, #0
 801c9c4:	4770      	bx	lr
 801c9c6:	bf00      	nop
 801c9c8:	20007990 	.word	0x20007990

0801c9cc <_tx_execution_idle_time_get>:
/**************************************************************************/
UINT  _tx_execution_idle_time_get(EXECUTION_TIME *total_time)
{

    /* Return the total time.  */
    *total_time =  _tx_execution_idle_time_total;
 801c9cc:	4b03      	ldr	r3, [pc, #12]	; (801c9dc <_tx_execution_idle_time_get+0x10>)
 801c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9d2:	e9c0 2300 	strd	r2, r3, [r0]

    /* Return success.  */
    return(TX_SUCCESS);
}
 801c9d6:	2000      	movs	r0, #0
 801c9d8:	4770      	bx	lr
 801c9da:	bf00      	nop
 801c9dc:	200079a0 	.word	0x200079a0

0801c9e0 <_tx_initialize_high_level>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 801c9e0:	b538      	push	{r3, r4, r5, lr}

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 801c9e2:	f000 fb4f 	bl	801d084 <_tx_thread_initialize>

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 801c9e6:	4d0e      	ldr	r5, [pc, #56]	; (801ca20 <_tx_initialize_high_level+0x40>)
    _tx_timer_initialize();
 801c9e8:	f000 fe14 	bl	801d614 <_tx_timer_initialize>
    _tx_semaphore_initialize();
 801c9ec:	2300      	movs	r3, #0
 801c9ee:	490d      	ldr	r1, [pc, #52]	; (801ca24 <_tx_initialize_high_level+0x44>)
 801c9f0:	4a0d      	ldr	r2, [pc, #52]	; (801ca28 <_tx_initialize_high_level+0x48>)
 801c9f2:	600b      	str	r3, [r1, #0]
 801c9f4:	6013      	str	r3, [r2, #0]
    _tx_queue_initialize();
 801c9f6:	4c0d      	ldr	r4, [pc, #52]	; (801ca2c <_tx_initialize_high_level+0x4c>)

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 801c9f8:	480d      	ldr	r0, [pc, #52]	; (801ca30 <_tx_initialize_high_level+0x50>)
 801c9fa:	490e      	ldr	r1, [pc, #56]	; (801ca34 <_tx_initialize_high_level+0x54>)

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801c9fc:	4a0e      	ldr	r2, [pc, #56]	; (801ca38 <_tx_initialize_high_level+0x58>)
    _tx_queue_initialize();
 801c9fe:	602b      	str	r3, [r5, #0]
 801ca00:	6023      	str	r3, [r4, #0]
    _tx_event_flags_initialize();
 801ca02:	6003      	str	r3, [r0, #0]
 801ca04:	600b      	str	r3, [r1, #0]
    _tx_block_pool_initialize();
 801ca06:	6013      	str	r3, [r2, #0]
 801ca08:	4d0c      	ldr	r5, [pc, #48]	; (801ca3c <_tx_initialize_high_level+0x5c>)

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801ca0a:	4c0d      	ldr	r4, [pc, #52]	; (801ca40 <_tx_initialize_high_level+0x60>)
 801ca0c:	480d      	ldr	r0, [pc, #52]	; (801ca44 <_tx_initialize_high_level+0x64>)

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 801ca0e:	490e      	ldr	r1, [pc, #56]	; (801ca48 <_tx_initialize_high_level+0x68>)
 801ca10:	4a0e      	ldr	r2, [pc, #56]	; (801ca4c <_tx_initialize_high_level+0x6c>)
    _tx_block_pool_initialize();
 801ca12:	602b      	str	r3, [r5, #0]
    _tx_byte_pool_initialize();
 801ca14:	6023      	str	r3, [r4, #0]
 801ca16:	6003      	str	r3, [r0, #0]
    _tx_mutex_initialize();
 801ca18:	600b      	str	r3, [r1, #0]
 801ca1a:	6013      	str	r3, [r2, #0]
#endif
}
 801ca1c:	bd38      	pop	{r3, r4, r5, pc}
 801ca1e:	bf00      	nop
 801ca20:	200079dc 	.word	0x200079dc
 801ca24:	200079c0 	.word	0x200079c0
 801ca28:	200079d0 	.word	0x200079d0
 801ca2c:	200079bc 	.word	0x200079bc
 801ca30:	200079b0 	.word	0x200079b0
 801ca34:	200079d4 	.word	0x200079d4
 801ca38:	200079d8 	.word	0x200079d8
 801ca3c:	200079cc 	.word	0x200079cc
 801ca40:	200079c4 	.word	0x200079c4
 801ca44:	200079e0 	.word	0x200079e0
 801ca48:	200079b8 	.word	0x200079b8
 801ca4c:	200079b4 	.word	0x200079b4

0801ca50 <_tx_initialize_kernel_enter>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_kernel_enter(VOID)
{
 801ca50:	b510      	push	{r4, lr}
	/* Determine if the compiler has pre-initialized ThreadX.  */
	if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801ca52:	4c0e      	ldr	r4, [pc, #56]	; (801ca8c <_tx_initialize_kernel_enter+0x3c>)
 801ca54:	6823      	ldr	r3, [r4, #0]
 801ca56:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 801ca5a:	d00a      	beq.n	801ca72 <_tx_initialize_kernel_enter+0x22>
		/* No, the initialization still needs to take place.  */

		/* Ensure that the system state variable is set to indicate 
		 initialization is in progress.  Note that this variable is 
		 later used to represent interrupt nesting.  */
		_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 801ca5c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 801ca60:	6023      	str	r3, [r4, #0]
		/* Call any port specific preprocessing.  */
		TX_PORT_SPECIFIC_PRE_INITIALIZATION

		/* Invoke the low-level initialization to handle all processor specific
		 initialization issues.  */
		_tx_initialize_low_level();
 801ca62:	f7e3 fbdd 	bl	8000220 <_tx_initialize_low_level>

		/* Invoke the high-level initialization to exercise all of the 
		 ThreadX components and the application's initialization 
		 function.  */
		_tx_initialize_high_level();
 801ca66:	f7ff ffbb 	bl	801c9e0 <_tx_initialize_high_level>

		/* Call any port specific post-processing.  */
		TX_PORT_SPECIFIC_POST_INITIALIZATION
 801ca6a:	4a09      	ldr	r2, [pc, #36]	; (801ca90 <_tx_initialize_kernel_enter+0x40>)
 801ca6c:	6813      	ldr	r3, [r2, #0]
 801ca6e:	3301      	adds	r3, #1
 801ca70:	6013      	str	r3, [r2, #0]
	 later used to represent interrupt nesting.  */
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;

	/* Call the application provided initialization function. Pass the
	 * first available memory address to it.  */
	tx_application_define(_tx_initialize_unused_memory);
 801ca72:	4a08      	ldr	r2, [pc, #32]	; (801ca94 <_tx_initialize_kernel_enter+0x44>)
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 801ca74:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
	tx_application_define(_tx_initialize_unused_memory);
 801ca78:	6810      	ldr	r0, [r2, #0]
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 801ca7a:	6023      	str	r3, [r4, #0]
	tx_application_define(_tx_initialize_unused_memory);
 801ca7c:	f7e4 f8fe 	bl	8000c7c <tx_application_define>

	/* Set the system state in preparation for entering the thread scheduler. */
	_tx_thread_system_state = TX_INITIALIZE_IS_FINISHED;
 801ca80:	2300      	movs	r3, #0
 801ca82:	6023      	str	r3, [r4, #0]
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception. */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801ca84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_tx_thread_schedule();
 801ca88:	f7e3 bc1a 	b.w	80002c0 <_tx_thread_schedule>
 801ca8c:	200000ec 	.word	0x200000ec
 801ca90:	20007a7c 	.word	0x20007a7c
 801ca94:	200079c8 	.word	0x200079c8

0801ca98 <_tx_mutex_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 801ca98:	b570      	push	{r4, r5, r6, lr}
 801ca9a:	460d      	mov	r5, r1
 801ca9c:	4614      	mov	r4, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 801ca9e:	2100      	movs	r1, #0
 801caa0:	2234      	movs	r2, #52	; 0x34
 801caa2:	f001 fd7a 	bl	801e59a <memset>
 801caa6:	4603      	mov	r3, r0

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 801caa8:	6045      	str	r5, [r0, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 801caaa:	6104      	str	r4, [r0, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801caac:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cab0:	b672      	cpsid	i
    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801cab2:	490c      	ldr	r1, [pc, #48]	; (801cae4 <_tx_mutex_create+0x4c>)
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 801cab4:	480c      	ldr	r0, [pc, #48]	; (801cae8 <_tx_mutex_create+0x50>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801cab6:	4e0d      	ldr	r6, [pc, #52]	; (801caec <_tx_mutex_create+0x54>)
    if (_tx_mutex_created_count == TX_EMPTY)
 801cab8:	680a      	ldr	r2, [r1, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 801caba:	4d0d      	ldr	r5, [pc, #52]	; (801caf0 <_tx_mutex_create+0x58>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801cabc:	601e      	str	r6, [r3, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 801cabe:	6005      	str	r5, [r0, #0]
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 801cac0:	480c      	ldr	r0, [pc, #48]	; (801caf4 <_tx_mutex_create+0x5c>)
    if (_tx_mutex_created_count == TX_EMPTY)
 801cac2:	b15a      	cbz	r2, 801cadc <_tx_mutex_create+0x44>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 801cac4:	6800      	ldr	r0, [r0, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 801cac6:	6a45      	ldr	r5, [r0, #36]	; 0x24

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 801cac8:	6243      	str	r3, [r0, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 801caca:	622b      	str	r3, [r5, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 801cacc:	e9c3 0508 	strd	r0, r5, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 801cad0:	3201      	adds	r2, #1
 801cad2:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cad4:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 801cad8:	2000      	movs	r0, #0
 801cada:	bd70      	pop	{r4, r5, r6, pc}
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801cadc:	e9c3 3308 	strd	r3, r3, [r3, #32]
        _tx_mutex_created_ptr =                   mutex_ptr;
 801cae0:	6003      	str	r3, [r0, #0]
 801cae2:	e7f5      	b.n	801cad0 <_tx_mutex_create+0x38>
 801cae4:	200079b4 	.word	0x200079b4
 801cae8:	20007a64 	.word	0x20007a64
 801caec:	4d555445 	.word	0x4d555445
 801caf0:	0801e02d 	.word	0x0801e02d
 801caf4:	200079b8 	.word	0x200079b8

0801caf8 <_tx_mutex_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cafa:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cafe:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801cb00:	4a3b      	ldr	r2, [pc, #236]	; (801cbf0 <_tx_mutex_get+0xf8>)

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 801cb02:	6883      	ldr	r3, [r0, #8]
    TX_THREAD_GET_CURRENT(thread_ptr)
 801cb04:	6814      	ldr	r4, [r2, #0]
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 801cb06:	b9e3      	cbnz	r3, 801cb42 <_tx_mutex_get+0x4a>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801cb08:	2301      	movs	r3, #1
 801cb0a:	e9c0 3402 	strd	r3, r4, [r0, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 801cb0e:	b1a4      	cbz	r4, 801cb3a <_tx_mutex_get+0x42>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cb10:	6903      	ldr	r3, [r0, #16]
 801cb12:	2b01      	cmp	r3, #1
 801cb14:	d103      	bne.n	801cb1e <_tx_mutex_get+0x26>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801cb16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 801cb18:	2320      	movs	r3, #32
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801cb1a:	6142      	str	r2, [r0, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 801cb1c:	6283      	str	r3, [r0, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801cb1e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d044      	beq.n	801cbb0 <_tx_mutex_get+0xb8>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 801cb26:	6b1a      	ldr	r2, [r3, #48]	; 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801cb28:	6318      	str	r0, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801cb2a:	62d0      	str	r0, [r2, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 801cb2c:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 801cb30:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801cb34:	3301      	adds	r3, #1
 801cb36:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cb3a:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801cb3e:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 801cb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 801cb42:	68c2      	ldr	r2, [r0, #12]
 801cb44:	42a2      	cmp	r2, r4
 801cb46:	d029      	beq.n	801cb9c <_tx_mutex_get+0xa4>
        if (wait_option != TX_NO_WAIT)
 801cb48:	b371      	cbz	r1, 801cba8 <_tx_mutex_get+0xb0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801cb4a:	4e2a      	ldr	r6, [pc, #168]	; (801cbf4 <_tx_mutex_get+0xfc>)
 801cb4c:	6833      	ldr	r3, [r6, #0]
 801cb4e:	bb5b      	cbnz	r3, 801cba8 <_tx_mutex_get+0xb0>
                thread_ptr -> tx_thread_suspension_sequence++;
 801cb50:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 801cb54:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801cbf8 <_tx_mutex_get+0x100>
                thread_ptr -> tx_thread_suspension_sequence++;
 801cb58:	1c5f      	adds	r7, r3, #1
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 801cb5a:	69c3      	ldr	r3, [r0, #28]
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 801cb5c:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 801cb5e:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 801cb62:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 801cb66:	bb43      	cbnz	r3, 801cbba <_tx_mutex_get+0xc2>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801cb68:	6184      	str	r4, [r0, #24]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801cb6a:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
                _tx_thread_preempt_disable++;
 801cb6e:	6837      	ldr	r7, [r6, #0]
                mutex_ptr -> tx_mutex_suspended_count++;
 801cb70:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801cb72:	f04f 0c0d 	mov.w	ip, #13
                mutex_ptr -> tx_mutex_suspended_count++;
 801cb76:	61c3      	str	r3, [r0, #28]
                _tx_thread_preempt_disable++;
 801cb78:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801cb7a:	2301      	movs	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801cb7c:	64e1      	str	r1, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 801cb7e:	6037      	str	r7, [r6, #0]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801cb80:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801cb84:	63a3      	str	r3, [r4, #56]	; 0x38
 801cb86:	f385 8810 	msr	PRIMASK, r5
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cb8a:	6903      	ldr	r3, [r0, #16]
 801cb8c:	2b01      	cmp	r3, #1
 801cb8e:	d01d      	beq.n	801cbcc <_tx_mutex_get+0xd4>
                _tx_thread_system_suspend(thread_ptr);
 801cb90:	4620      	mov	r0, r4
 801cb92:	f000 fc13 	bl	801d3bc <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 801cb96:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 801cb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mutex_ptr -> tx_mutex_ownership_count++;
 801cb9c:	3301      	adds	r3, #1
 801cb9e:	6083      	str	r3, [r0, #8]
 801cba0:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 801cba4:	2000      	movs	r0, #0
 801cba6:	e7cb      	b.n	801cb40 <_tx_mutex_get+0x48>
 801cba8:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NOT_AVAILABLE;
 801cbac:	201d      	movs	r0, #29
}
 801cbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801cbb0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 801cbb4:	e9c0 000b 	strd	r0, r0, [r0, #44]	; 0x2c
 801cbb8:	e7ba      	b.n	801cb30 <_tx_mutex_get+0x38>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 801cbba:	6987      	ldr	r7, [r0, #24]
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801cbbc:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801cbc0:	e9c4 7c1c 	strd	r7, ip, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801cbc4:	f8cc 4070 	str.w	r4, [ip, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801cbc8:	677c      	str	r4, [r7, #116]	; 0x74
 801cbca:	e7d0      	b.n	801cb6e <_tx_mutex_get+0x76>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 801cbcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801cbce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801cbd0:	428b      	cmp	r3, r1
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 801cbd2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 801cbd6:	bf88      	it	hi
 801cbd8:	6281      	strhi	r1, [r0, #40]	; 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 801cbda:	4299      	cmp	r1, r3
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 801cbdc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 801cbde:	bf38      	it	cc
 801cbe0:	f8c2 109c 	strcc.w	r1, [r2, #156]	; 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 801cbe4:	4299      	cmp	r1, r3
 801cbe6:	d2d3      	bcs.n	801cb90 <_tx_mutex_get+0x98>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 801cbe8:	4610      	mov	r0, r2
 801cbea:	f000 f807 	bl	801cbfc <_tx_mutex_priority_change>
 801cbee:	e7cf      	b.n	801cb90 <_tx_mutex_get+0x98>
 801cbf0:	20007a80 	.word	0x20007a80
 801cbf4:	20007a7c 	.word	0x20007a7c
 801cbf8:	0801dfad 	.word	0x0801dfad

0801cbfc <_tx_mutex_priority_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 801cbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc00:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cc02:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cc06:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 801cc08:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801cc0a:	b152      	cbz	r2, 801cc22 <_tx_mutex_priority_change+0x26>
 801cc0c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801cc10:	62c1      	str	r1, [r0, #44]	; 0x2c
 801cc12:	428a      	cmp	r2, r1
 801cc14:	bf28      	it	cs
 801cc16:	460a      	movcs	r2, r1
 801cc18:	63c2      	str	r2, [r0, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cc1a:	f386 8810 	msr	PRIMASK, r6
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801cc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc22:	460d      	mov	r5, r1
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 801cc24:	4925      	ldr	r1, [pc, #148]	; (801ccbc <_tx_mutex_priority_change+0xc0>)
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 801cc26:	f04f 0c03 	mov.w	ip, #3
        execute_ptr =  _tx_thread_execute_ptr;
 801cc2a:	4f25      	ldr	r7, [pc, #148]	; (801ccc0 <_tx_mutex_priority_change+0xc4>)
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 801cc2c:	680b      	ldr	r3, [r1, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801cc2e:	f04f 0a01 	mov.w	sl, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801cc32:	64c2      	str	r2, [r0, #76]	; 0x4c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 801cc34:	3302      	adds	r3, #2
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 801cc36:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801cc3a:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 801cc3e:	600b      	str	r3, [r1, #0]
        execute_ptr =  _tx_thread_execute_ptr;
 801cc40:	f8d7 8000 	ldr.w	r8, [r7]
        original_priority =  thread_ptr -> tx_thread_priority;
 801cc44:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 801cc48:	f386 8810 	msr	PRIMASK, r6
        _tx_thread_system_suspend(thread_ptr);
 801cc4c:	f000 fbb6 	bl	801d3bc <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cc50:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cc54:	b672      	cpsid	i
 801cc56:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        thread_ptr -> tx_thread_priority =  new_priority;
 801cc5a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801cc5c:	42ab      	cmp	r3, r5
 801cc5e:	bf28      	it	cs
 801cc60:	462b      	movcs	r3, r5
 801cc62:	63e3      	str	r3, [r4, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cc64:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 801cc68:	4620      	mov	r0, r4
 801cc6a:	f000 fb21 	bl	801d2b0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cc6e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cc72:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 801cc74:	683b      	ldr	r3, [r7, #0]
        if (thread_ptr != next_execute_ptr)
 801cc76:	429c      	cmp	r4, r3
 801cc78:	d007      	beq.n	801cc8a <_tx_mutex_priority_change+0x8e>
            if (thread_ptr -> tx_thread_state == TX_READY)
 801cc7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cc7c:	b92a      	cbnz	r2, 801cc8a <_tx_mutex_priority_change+0x8e>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 801cc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cc80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cc82:	4293      	cmp	r3, r2
 801cc84:	d805      	bhi.n	801cc92 <_tx_mutex_priority_change+0x96>
                    if (thread_ptr == execute_ptr)
 801cc86:	4544      	cmp	r4, r8
 801cc88:	d010      	beq.n	801ccac <_tx_mutex_priority_change+0xb0>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cc8a:	f381 8810 	msr	PRIMASK, r1
}
 801cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 801cc92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801cc94:	4283      	cmp	r3, r0
 801cc96:	d9f8      	bls.n	801cc8a <_tx_mutex_priority_change+0x8e>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 801cc98:	4282      	cmp	r2, r0
 801cc9a:	d207      	bcs.n	801ccac <_tx_mutex_priority_change+0xb0>
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 801cc9c:	4809      	ldr	r0, [pc, #36]	; (801ccc4 <_tx_mutex_priority_change+0xc8>)
                            TX_MOD32_BIT_SET(next_execute_ptr -> tx_thread_priority, priority_bit)
 801cc9e:	fa0a fa02 	lsl.w	sl, sl, r2
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 801cca2:	6803      	ldr	r3, [r0, #0]
 801cca4:	ea43 030a 	orr.w	r3, r3, sl
 801cca8:	6003      	str	r3, [r0, #0]
 801ccaa:	e7ee      	b.n	801cc8a <_tx_mutex_priority_change+0x8e>
                            if (original_priority < new_priority)
 801ccac:	45a9      	cmp	r9, r5
                            _tx_thread_execute_ptr =  thread_ptr;
 801ccae:	603c      	str	r4, [r7, #0]
                            if (original_priority < new_priority)
 801ccb0:	d2eb      	bcs.n	801cc8a <_tx_mutex_priority_change+0x8e>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801ccb2:	4a05      	ldr	r2, [pc, #20]	; (801ccc8 <_tx_mutex_priority_change+0xcc>)
 801ccb4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801ccb8:	e7e7      	b.n	801cc8a <_tx_mutex_priority_change+0x8e>
 801ccba:	bf00      	nop
 801ccbc:	20007a7c 	.word	0x20007a7c
 801ccc0:	20007a84 	.word	0x20007a84
 801ccc4:	20007a8c 	.word	0x20007a8c
 801ccc8:	200079e4 	.word	0x200079e4

0801cccc <_tx_mutex_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 801cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801ccd0:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801ccd4:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 801ccd6:	6882      	ldr	r2, [r0, #8]
 801ccd8:	2a00      	cmp	r2, #0
 801ccda:	d056      	beq.n	801cd8a <_tx_mutex_put+0xbe>

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801ccdc:	497e      	ldr	r1, [pc, #504]	; (801ced8 <_tx_mutex_put+0x20c>)
 801ccde:	46a4      	mov	ip, r4
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 801cce0:	68c3      	ldr	r3, [r0, #12]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 801cce2:	6809      	ldr	r1, [r1, #0]
 801cce4:	428b      	cmp	r3, r1
 801cce6:	d003      	beq.n	801ccf0 <_tx_mutex_put+0x24>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 801cce8:	4e7c      	ldr	r6, [pc, #496]	; (801cedc <_tx_mutex_put+0x210>)
 801ccea:	6831      	ldr	r1, [r6, #0]
 801ccec:	2900      	cmp	r1, #0
 801ccee:	d04c      	beq.n	801cd8a <_tx_mutex_put+0xbe>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 801ccf0:	3a01      	subs	r2, #1
 801ccf2:	6082      	str	r2, [r0, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 801ccf4:	2a00      	cmp	r2, #0
 801ccf6:	d143      	bne.n	801cd80 <_tx_mutex_put+0xb4>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d041      	beq.n	801cd80 <_tx_mutex_put+0xb4>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 801ccfc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801cd00:	3a01      	subs	r2, #1
 801cd02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 801cd06:	2a00      	cmp	r2, #0
 801cd08:	d144      	bne.n	801cd94 <_tx_mutex_put+0xc8>
                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 801cd0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 801cd0e:	6987      	ldr	r7, [r0, #24]
 801cd10:	6902      	ldr	r2, [r0, #16]
 801cd12:	2f00      	cmp	r7, #0
 801cd14:	f000 8082 	beq.w	801ce1c <_tx_mutex_put+0x150>
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cd18:	2a01      	cmp	r2, #1
 801cd1a:	4605      	mov	r5, r0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 801cd1c:	f8d3 8094 	ldr.w	r8, [r3, #148]	; 0x94
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cd20:	f000 8084 	beq.w	801ce2c <_tx_mutex_put+0x160>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 801cd24:	69c3      	ldr	r3, [r0, #28]
 801cd26:	4e6d      	ldr	r6, [pc, #436]	; (801cedc <_tx_mutex_put+0x210>)
 801cd28:	2b01      	cmp	r3, #1
 801cd2a:	d95d      	bls.n	801cde8 <_tx_mutex_put+0x11c>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 801cd2c:	2f00      	cmp	r7, #0
 801cd2e:	f000 8097 	beq.w	801ce60 <_tx_mutex_put+0x194>
                        old_owner =      TX_NULL;
 801cd32:	2400      	movs	r4, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 801cd34:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 801cd38:	2a00      	cmp	r2, #0
 801cd3a:	d167      	bne.n	801ce0c <_tx_mutex_put+0x140>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801cd3c:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 801cd40:	e9c5 550b 	strd	r5, r5, [r5, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 801cd44:	3201      	adds	r2, #1
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 801cd46:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 801cd48:	2101      	movs	r1, #1
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 801cd4a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
                            mutex_ptr -> tx_mutex_suspended_count--;
 801cd4e:	61eb      	str	r3, [r5, #28]
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 801cd50:	e9c5 1702 	strd	r1, r7, [r5, #8]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d153      	bne.n	801ce00 <_tx_mutex_put+0x134>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801cd58:	61ab      	str	r3, [r5, #24]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801cd5a:	6833      	ldr	r3, [r6, #0]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801cd5c:	2200      	movs	r2, #0
                            _tx_thread_preempt_disable++;
 801cd5e:	3301      	adds	r3, #1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801cd60:	66ba      	str	r2, [r7, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801cd62:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 801cd66:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cd68:	f38c 8810 	msr	PRIMASK, ip

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cd6c:	692b      	ldr	r3, [r5, #16]
 801cd6e:	2b01      	cmp	r3, #1
 801cd70:	f000 8097 	beq.w	801cea2 <_tx_mutex_put+0x1d6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 801cd74:	4638      	mov	r0, r7
 801cd76:	f000 fa9b 	bl	801d2b0 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 801cd7a:	2000      	movs	r0, #0
        status =  TX_NOT_OWNED;
    }

    /* Return the completion status.  */
    return(status);
}
 801cd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd80:	f384 8810 	msr	PRIMASK, r4
                status =  TX_SUCCESS;
 801cd84:	2000      	movs	r0, #0
}
 801cd86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd8a:	f384 8810 	msr	PRIMASK, r4
        status =  TX_NOT_OWNED;
 801cd8e:	201e      	movs	r0, #30
}
 801cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801cd94:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 801cd98:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801cd9c:	4285      	cmp	r5, r0
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 801cd9e:	6311      	str	r1, [r2, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 801cda0:	62ca      	str	r2, [r1, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801cda2:	d1b4      	bne.n	801cd0e <_tx_mutex_put+0x42>
 801cda4:	e7b1      	b.n	801cd0a <_tx_mutex_put+0x3e>
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 801cda6:	2420      	movs	r4, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cda8:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cdac:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 801cdae:	6832      	ldr	r2, [r6, #0]
 801cdb0:	45a0      	cmp	r8, r4
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801cdb2:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 801cdb6:	69eb      	ldr	r3, [r5, #28]
 801cdb8:	bf28      	it	cs
 801cdba:	46a0      	movcs	r8, r4
                            _tx_thread_preempt_disable--;
 801cdbc:	3a01      	subs	r2, #1
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 801cdbe:	2b01      	cmp	r3, #1
                            _tx_thread_preempt_disable--;
 801cdc0:	6032      	str	r2, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 801cdc2:	d969      	bls.n	801ce98 <_tx_mutex_put+0x1cc>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cdc4:	692a      	ldr	r2, [r5, #16]
 801cdc6:	2a01      	cmp	r2, #1
 801cdc8:	d176      	bne.n	801ceb8 <_tx_mutex_put+0x1ec>
                                _tx_thread_preempt_disable++;
 801cdca:	6833      	ldr	r3, [r6, #0]
 801cdcc:	3301      	adds	r3, #1
 801cdce:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cdd0:	f38c 8810 	msr	PRIMASK, ip
                                _tx_mutex_prioritize(mutex_ptr);
 801cdd4:	4628      	mov	r0, r5
 801cdd6:	f001 f9a5 	bl	801e124 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cdda:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cdde:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 801cde0:	6833      	ldr	r3, [r6, #0]
 801cde2:	69af      	ldr	r7, [r5, #24]
 801cde4:	3b01      	subs	r3, #1
 801cde6:	6033      	str	r3, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 801cde8:	2f00      	cmp	r7, #0
 801cdea:	d039      	beq.n	801ce60 <_tx_mutex_put+0x194>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cdec:	692b      	ldr	r3, [r5, #16]
 801cdee:	2b01      	cmp	r3, #1
 801cdf0:	d154      	bne.n	801ce9c <_tx_mutex_put+0x1d0>
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801cdf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801cdf4:	2320      	movs	r3, #32
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801cdf6:	68ec      	ldr	r4, [r5, #12]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801cdf8:	62ab      	str	r3, [r5, #40]	; 0x28
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801cdfa:	616a      	str	r2, [r5, #20]
 801cdfc:	69eb      	ldr	r3, [r5, #28]
 801cdfe:	e799      	b.n	801cd34 <_tx_mutex_put+0x68>
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801ce00:	e9d7 321c 	ldrd	r3, r2, [r7, #112]	; 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 801ce04:	61ab      	str	r3, [r5, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801ce06:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801ce08:	6713      	str	r3, [r2, #112]	; 0x70
 801ce0a:	e7a6      	b.n	801cd5a <_tx_mutex_put+0x8e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 801ce0c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 801ce10:	6b08      	ldr	r0, [r1, #48]	; 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801ce12:	630d      	str	r5, [r1, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801ce14:	62c5      	str	r5, [r0, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 801ce16:	e9c5 100b 	strd	r1, r0, [r5, #44]	; 0x2c
 801ce1a:	e793      	b.n	801cd44 <_tx_mutex_put+0x78>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 801ce1c:	2a00      	cmp	r2, #0
 801ce1e:	f47f af7b 	bne.w	801cd18 <_tx_mutex_put+0x4c>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 801ce22:	60c2      	str	r2, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801ce24:	f384 8810 	msr	PRIMASK, r4
                            status =  TX_SUCCESS;
 801ce28:	4610      	mov	r0, r2
 801ce2a:	e7ac      	b.n	801cd86 <_tx_mutex_put+0xba>
                            _tx_thread_preempt_disable++;
 801ce2c:	4e2b      	ldr	r6, [pc, #172]	; (801cedc <_tx_mutex_put+0x210>)
 801ce2e:	6832      	ldr	r2, [r6, #0]
 801ce30:	3201      	adds	r2, #1
 801ce32:	6032      	str	r2, [r6, #0]
 801ce34:	f384 8810 	msr	PRIMASK, r4
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801ce38:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                            while (next_mutex != TX_NULL)
 801ce3c:	2900      	cmp	r1, #0
 801ce3e:	d0b2      	beq.n	801cda6 <_tx_mutex_put+0xda>
 801ce40:	460a      	mov	r2, r1
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 801ce42:	2420      	movs	r4, #32
 801ce44:	e001      	b.n	801ce4a <_tx_mutex_put+0x17e>
                            while (next_mutex != TX_NULL)
 801ce46:	2a00      	cmp	r2, #0
 801ce48:	d0ae      	beq.n	801cda8 <_tx_mutex_put+0xdc>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 801ce4a:	6910      	ldr	r0, [r2, #16]
 801ce4c:	2801      	cmp	r0, #1
 801ce4e:	d103      	bne.n	801ce58 <_tx_mutex_put+0x18c>
 801ce50:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801ce52:	4284      	cmp	r4, r0
 801ce54:	bf28      	it	cs
 801ce56:	4604      	movcs	r4, r0
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 801ce58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 801ce5a:	4291      	cmp	r1, r2
 801ce5c:	d1f3      	bne.n	801ce46 <_tx_mutex_put+0x17a>
 801ce5e:	e7a3      	b.n	801cda8 <_tx_mutex_put+0xdc>
                            _tx_thread_preempt_disable++;
 801ce60:	6833      	ldr	r3, [r6, #0]
 801ce62:	3301      	adds	r3, #1
 801ce64:	6033      	str	r3, [r6, #0]
 801ce66:	f38c 8810 	msr	PRIMASK, ip
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 801ce6a:	68e8      	ldr	r0, [r5, #12]
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801ce6c:	2220      	movs	r2, #32
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 801ce6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801ce70:	62aa      	str	r2, [r5, #40]	; 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 801ce72:	4543      	cmp	r3, r8
 801ce74:	d002      	beq.n	801ce7c <_tx_mutex_put+0x1b0>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 801ce76:	4641      	mov	r1, r8
 801ce78:	f7ff fec0 	bl	801cbfc <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801ce7c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801ce80:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 801ce82:	6833      	ldr	r3, [r6, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 801ce84:	2400      	movs	r4, #0
                            _tx_thread_preempt_disable--;
 801ce86:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 801ce88:	60ec      	str	r4, [r5, #12]
                            _tx_thread_preempt_disable--;
 801ce8a:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801ce8c:	f382 8810 	msr	PRIMASK, r2
                            _tx_thread_system_preempt_check();
 801ce90:	f000 f9f0 	bl	801d274 <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 801ce94:	4620      	mov	r0, r4
 801ce96:	e776      	b.n	801cd86 <_tx_mutex_put+0xba>
 801ce98:	69af      	ldr	r7, [r5, #24]
 801ce9a:	e7a5      	b.n	801cde8 <_tx_mutex_put+0x11c>
                        old_owner =      TX_NULL;
 801ce9c:	2400      	movs	r4, #0
 801ce9e:	69eb      	ldr	r3, [r5, #28]
 801cea0:	e748      	b.n	801cd34 <_tx_mutex_put+0x68>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801cea2:	69eb      	ldr	r3, [r5, #28]
 801cea4:	b953      	cbnz	r3, 801cebc <_tx_mutex_put+0x1f0>
                                if (old_owner -> tx_thread_priority != old_priority)
 801cea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cea8:	4543      	cmp	r3, r8
 801ceaa:	f43f af63 	beq.w	801cd74 <_tx_mutex_put+0xa8>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 801ceae:	4641      	mov	r1, r8
 801ceb0:	4620      	mov	r0, r4
 801ceb2:	f7ff fea3 	bl	801cbfc <_tx_mutex_priority_change>
 801ceb6:	e75d      	b.n	801cd74 <_tx_mutex_put+0xa8>
 801ceb8:	69af      	ldr	r7, [r5, #24]
 801ceba:	e737      	b.n	801cd2c <_tx_mutex_put+0x60>
                                    _tx_mutex_prioritize(mutex_ptr);
 801cebc:	4628      	mov	r0, r5
 801cebe:	f001 f931 	bl	801e124 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cec2:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cec6:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801cec8:	69ab      	ldr	r3, [r5, #24]
                                    if (suspended_thread != TX_NULL)
 801ceca:	b10b      	cbz	r3, 801ced0 <_tx_mutex_put+0x204>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cece:	62ab      	str	r3, [r5, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801ced0:	f382 8810 	msr	PRIMASK, r2
 801ced4:	e7e7      	b.n	801cea6 <_tx_mutex_put+0x1da>
 801ced6:	bf00      	nop
 801ced8:	20007a80 	.word	0x20007a80
 801cedc:	20007a7c 	.word	0x20007a7c

0801cee0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 801cee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cee4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801cee6:	4604      	mov	r4, r0
 801cee8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ceea:	468b      	mov	fp, r1
 801ceec:	4692      	mov	sl, r2
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801ceee:	4630      	mov	r0, r6
 801cef0:	462a      	mov	r2, r5
 801cef2:	21ef      	movs	r1, #239	; 0xef
{
 801cef4:	4698      	mov	r8, r3
 801cef6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801cefa:	f001 fb4e 	bl	801e59a <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 801cefe:	4620      	mov	r0, r4
 801cf00:	22c8      	movs	r2, #200	; 0xc8
 801cf02:	2100      	movs	r1, #0
 801cf04:	f001 fb49 	bl	801e59a <memset>
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
    thread_ptr -> tx_thread_stack_start =       stack_start;
    thread_ptr -> tx_thread_stack_size =        stack_size;
    thread_ptr -> tx_thread_priority =          priority;
    thread_ptr -> tx_thread_user_priority =     priority;
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801cf08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801cf0a:	1e6a      	subs	r2, r5, #1
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801cf0c:	f04f 0c20 	mov.w	ip, #32
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801cf10:	2103      	movs	r1, #3

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801cf12:	4f36      	ldr	r7, [pc, #216]	; (801cfec <_tx_thread_create+0x10c>)
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801cf14:	4432      	add	r2, r6
    thread_ptr -> tx_thread_name =              name_ptr;
 801cf16:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801cf1a:	6321      	str	r1, [r4, #48]	; 0x30
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801cf1c:	4620      	mov	r0, r4
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801cf1e:	60e6      	str	r6, [r4, #12]
    thread_ptr -> tx_thread_priority =          priority;
 801cf20:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801cf24:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801cf28:	65a4      	str	r4, [r4, #88]	; 0x58
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801cf2a:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801cf2e:	6567      	str	r7, [r4, #84]	; 0x54
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801cf30:	492f      	ldr	r1, [pc, #188]	; (801cff0 <_tx_thread_create+0x110>)
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 801cf32:	e9c4 3306 	strd	r3, r3, [r4, #24]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 801cf36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801cf38:	e9c4 a811 	strd	sl, r8, [r4, #68]	; 0x44
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801cf3c:	e9c4 2504 	strd	r2, r5, [r4, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 801cf40:	63e3      	str	r3, [r4, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 801cf42:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801cf46:	f7e3 fa0b 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cf4a:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cf4e:	b672      	cpsid	i
    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 801cf50:	4828      	ldr	r0, [pc, #160]	; (801cff4 <_tx_thread_create+0x114>)
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801cf52:	4a29      	ldr	r2, [pc, #164]	; (801cff8 <_tx_thread_create+0x118>)
    if (_tx_thread_created_count == TX_EMPTY)
 801cf54:	6803      	ldr	r3, [r0, #0]
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801cf56:	6022      	str	r2, [r4, #0]
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 801cf58:	4a28      	ldr	r2, [pc, #160]	; (801cffc <_tx_thread_create+0x11c>)
    if (_tx_thread_created_count == TX_EMPTY)
 801cf5a:	b9db      	cbnz	r3, 801cf94 <_tx_thread_create+0xb4>
        _tx_thread_created_ptr =                    thread_ptr;
 801cf5c:	6014      	str	r4, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801cf5e:	e9c4 4422 	strd	r4, r4, [r4, #136]	; 0x88
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801cf62:	4927      	ldr	r1, [pc, #156]	; (801d000 <_tx_thread_create+0x120>)
    _tx_thread_created_count++;
 801cf64:	3301      	adds	r3, #1
    _tx_thread_preempt_disable++;
 801cf66:	680a      	ldr	r2, [r1, #0]
    _tx_thread_created_count++;
 801cf68:	6003      	str	r3, [r0, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801cf6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    _tx_thread_preempt_disable++;
 801cf6c:	3201      	adds	r2, #1
    if (auto_start == TX_AUTO_START)
 801cf6e:	2b01      	cmp	r3, #1
    _tx_thread_preempt_disable++;
 801cf70:	600a      	str	r2, [r1, #0]
    if (auto_start == TX_AUTO_START)
 801cf72:	d12a      	bne.n	801cfca <_tx_thread_create+0xea>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801cf74:	f3ef 8205 	mrs	r2, IPSR
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801cf78:	4b22      	ldr	r3, [pc, #136]	; (801d004 <_tx_thread_create+0x124>)
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	4313      	orrs	r3, r2
 801cf7e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801cf82:	d211      	bcs.n	801cfa8 <_tx_thread_create+0xc8>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cf84:	f385 8810 	msr	PRIMASK, r5

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801cf88:	4620      	mov	r0, r4
 801cf8a:	f000 f991 	bl	801d2b0 <_tx_thread_system_resume>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
}
 801cf8e:	2000      	movs	r0, #0
 801cf90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        next_thread =  _tx_thread_created_ptr;
 801cf94:	6812      	ldr	r2, [r2, #0]
        previous_thread =  next_thread -> tx_thread_created_previous;
 801cf96:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801cf9a:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801cf9e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
        thread_ptr -> tx_thread_created_next =      next_thread;
 801cfa2:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
 801cfa6:	e7dc      	b.n	801cf62 <_tx_thread_create+0x82>
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801cfa8:	4b17      	ldr	r3, [pc, #92]	; (801d008 <_tx_thread_create+0x128>)
 801cfaa:	681e      	ldr	r6, [r3, #0]
            if (saved_thread_ptr != TX_NULL)
 801cfac:	b1e6      	cbz	r6, 801cfe8 <_tx_thread_create+0x108>
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801cfae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801cfb0:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801cfb2:	63f3      	str	r3, [r6, #60]	; 0x3c
 801cfb4:	f385 8810 	msr	PRIMASK, r5
        _tx_thread_system_resume(thread_ptr);
 801cfb8:	4620      	mov	r0, r4
 801cfba:	f000 f979 	bl	801d2b0 <_tx_thread_system_resume>
        if (saved_thread_ptr != TX_NULL)
 801cfbe:	2e00      	cmp	r6, #0
 801cfc0:	d0e5      	beq.n	801cf8e <_tx_thread_create+0xae>
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801cfc2:	63f7      	str	r7, [r6, #60]	; 0x3c
}
 801cfc4:	2000      	movs	r0, #0
 801cfc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfca:	f385 8810 	msr	PRIMASK, r5
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801cfce:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801cfd2:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 801cfd4:	680b      	ldr	r3, [r1, #0]
 801cfd6:	3b01      	subs	r3, #1
 801cfd8:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801cfda:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 801cfde:	f000 f949 	bl	801d274 <_tx_thread_system_preempt_check>
}
 801cfe2:	2000      	movs	r0, #0
 801cfe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
UINT                    saved_threshold =  ((UINT) 0);
 801cfe8:	4637      	mov	r7, r6
 801cfea:	e7e3      	b.n	801cfb4 <_tx_thread_create+0xd4>
 801cfec:	0801d545 	.word	0x0801d545
 801cff0:	0801d1a1 	.word	0x0801d1a1
 801cff4:	20007a74 	.word	0x20007a74
 801cff8:	54485244 	.word	0x54485244
 801cffc:	20007a6c 	.word	0x20007a6c
 801d000:	20007a7c 	.word	0x20007a7c
 801d004:	200000ec 	.word	0x200000ec
 801d008:	20007a84 	.word	0x20007a84

0801d00c <_tx_thread_identify>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d00c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d010:	b672      	cpsid	i

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801d012:	4a02      	ldr	r2, [pc, #8]	; (801d01c <_tx_thread_identify+0x10>)
 801d014:	6810      	ldr	r0, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d016:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
}
 801d01a:	4770      	bx	lr
 801d01c:	20007a80 	.word	0x20007a80

0801d020 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 801d020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d024:	469c      	mov	ip, r3
 801d026:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d028:	e9dd 8706 	ldrd	r8, r7, [sp, #24]
 801d02c:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d030:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d034:	b672      	cpsid	i

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 801d036:	b109      	cbz	r1, 801d03c <_tx_thread_info_get+0x1c>
    {
    
        *name =  thread_ptr -> tx_thread_name;
 801d038:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d03a:	600b      	str	r3, [r1, #0]
    }
    
    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 801d03c:	b10a      	cbz	r2, 801d042 <_tx_thread_info_get+0x22>
    {
    
        *state =  thread_ptr -> tx_thread_state;
 801d03e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d040:	6011      	str	r1, [r2, #0]
    }
    
    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 801d042:	f1bc 0f00 	cmp.w	ip, #0
 801d046:	d002      	beq.n	801d04e <_tx_thread_info_get+0x2e>
    {
    
        *run_count =  thread_ptr -> tx_thread_run_count;
 801d048:	6842      	ldr	r2, [r0, #4]
 801d04a:	f8cc 2000 	str.w	r2, [ip]
    }
    
    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 801d04e:	f1b8 0f00 	cmp.w	r8, #0
 801d052:	d003      	beq.n	801d05c <_tx_thread_info_get+0x3c>
    {
    
        *priority =  thread_ptr -> tx_thread_user_priority;
 801d054:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 801d058:	f8c8 2000 	str.w	r2, [r8]
    }
    
    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 801d05c:	b117      	cbz	r7, 801d064 <_tx_thread_info_get+0x44>
    {
    
        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801d05e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 801d062:	603b      	str	r3, [r7, #0]
    }
    
    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 801d064:	b10e      	cbz	r6, 801d06a <_tx_thread_info_get+0x4a>
    {
    
        *time_slice =  thread_ptr -> tx_thread_time_slice;
 801d066:	6983      	ldr	r3, [r0, #24]
 801d068:	6033      	str	r3, [r6, #0]
    }
    
    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 801d06a:	b115      	cbz	r5, 801d072 <_tx_thread_info_get+0x52>
    {
    
        *next_thread =  thread_ptr -> tx_thread_created_next;
 801d06c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801d070:	602b      	str	r3, [r5, #0]
    }
    
    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 801d072:	b10c      	cbz	r4, 801d078 <_tx_thread_info_get+0x58>
    {
    
        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 801d074:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801d076:	6023      	str	r3, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d078:	f38e 8810 	msr	PRIMASK, lr
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 801d07c:	2000      	movs	r0, #0
 801d07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d082:	bf00      	nop

0801d084 <_tx_thread_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 801d084:	b538      	push	{r3, r4, r5, lr}

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801d086:	480f      	ldr	r0, [pc, #60]	; (801d0c4 <_tx_thread_initialize+0x40>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 801d088:	2400      	movs	r4, #0

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 801d08a:	4b0f      	ldr	r3, [pc, #60]	; (801d0c8 <_tx_thread_initialize+0x44>)
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801d08c:	2520      	movs	r5, #32
    _tx_thread_execute_ptr =  TX_NULL;
 801d08e:	6004      	str	r4, [r0, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801d090:	4621      	mov	r1, r4
    TX_THREAD_SET_CURRENT(TX_NULL)
 801d092:	4a0e      	ldr	r2, [pc, #56]	; (801d0cc <_tx_thread_initialize+0x48>)
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 801d094:	480e      	ldr	r0, [pc, #56]	; (801d0d0 <_tx_thread_initialize+0x4c>)
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 801d096:	601c      	str	r4, [r3, #0]
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801d098:	4b0e      	ldr	r3, [pc, #56]	; (801d0d4 <_tx_thread_initialize+0x50>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 801d09a:	6014      	str	r4, [r2, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801d09c:	2280      	movs	r2, #128	; 0x80
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 801d09e:	6004      	str	r4, [r0, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801d0a0:	480d      	ldr	r0, [pc, #52]	; (801d0d8 <_tx_thread_initialize+0x54>)
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801d0a2:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801d0a4:	f001 fa79 	bl	801e59a <memset>
    TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log)));
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
 801d0a8:	4a0c      	ldr	r2, [pc, #48]	; (801d0dc <_tx_thread_initialize+0x58>)
    _tx_thread_created_ptr =        TX_NULL;
 801d0aa:	490d      	ldr	r1, [pc, #52]	; (801d0e0 <_tx_thread_initialize+0x5c>)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
                            | (((ULONG) 1) << 7)
 801d0ac:	6810      	ldr	r0, [r2, #0]
 801d0ae:	4b0d      	ldr	r3, [pc, #52]	; (801d0e4 <_tx_thread_initialize+0x60>)
    _tx_thread_created_ptr =        TX_NULL;
 801d0b0:	600c      	str	r4, [r1, #0]
                            | (((ULONG) 1) << 7)
 801d0b2:	4303      	orrs	r3, r0
    _tx_thread_created_count =      TX_EMPTY;
 801d0b4:	4d0c      	ldr	r5, [pc, #48]	; (801d0e8 <_tx_thread_initialize+0x64>)
    _tx_thread_preempt_disable =    ((UINT) 0);
 801d0b6:	480d      	ldr	r0, [pc, #52]	; (801d0ec <_tx_thread_initialize+0x68>)
    _tx_thread_mutex_release =      TX_NULL;
 801d0b8:	490d      	ldr	r1, [pc, #52]	; (801d0f0 <_tx_thread_initialize+0x6c>)
    _tx_thread_created_count =      TX_EMPTY;
 801d0ba:	602c      	str	r4, [r5, #0]
    _tx_thread_preempt_disable =    ((UINT) 0);
 801d0bc:	6004      	str	r4, [r0, #0]
    _tx_thread_mutex_release =      TX_NULL;
 801d0be:	600c      	str	r4, [r1, #0]
    _tx_build_options =  _tx_build_options 
 801d0c0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801d0c2:	bd38      	pop	{r3, r4, r5, pc}
 801d0c4:	20007a84 	.word	0x20007a84
 801d0c8:	20007a68 	.word	0x20007a68
 801d0cc:	20007a80 	.word	0x20007a80
 801d0d0:	20007a8c 	.word	0x20007a8c
 801d0d4:	20007a88 	.word	0x20007a88
 801d0d8:	200079e4 	.word	0x200079e4
 801d0dc:	20007a70 	.word	0x20007a70
 801d0e0:	20007a6c 	.word	0x20007a6c
 801d0e4:	01000080 	.word	0x01000080
 801d0e8:	20007a74 	.word	0x20007a74
 801d0ec:	20007a7c 	.word	0x20007a7c
 801d0f0:	20007a64 	.word	0x20007a64

0801d0f4 <_tx_thread_preemption_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 801d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d0f6:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d0fa:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 801d0fc:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 801d100:	428b      	cmp	r3, r1
 801d102:	d341      	bcc.n	801d188 <_tx_thread_preemption_change+0x94>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 801d104:	d017      	beq.n	801d136 <_tx_thread_preemption_change+0x42>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801d106:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 801d10a:	4d21      	ldr	r5, [pc, #132]	; (801d190 <_tx_thread_preemption_change+0x9c>)
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801d10c:	6013      	str	r3, [r2, #0]
 801d10e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 801d112:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801d114:	428b      	cmp	r3, r1
 801d116:	682d      	ldr	r5, [r5, #0]
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 801d118:	4616      	mov	r6, r2
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 801d11a:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 801d11e:	bf28      	it	cs
 801d120:	460b      	movcs	r3, r1
            if (_tx_thread_highest_priority < new_threshold)
 801d122:	428a      	cmp	r2, r1
 801d124:	bf28      	it	cs
 801d126:	460e      	movcs	r6, r1
 801d128:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d12a:	42b5      	cmp	r5, r6
 801d12c:	d312      	bcc.n	801d154 <_tx_thread_preemption_change+0x60>
    status =  TX_SUCCESS;
 801d12e:	2000      	movs	r0, #0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d130:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
}
 801d134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 801d136:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801d138:	4d16      	ldr	r5, [pc, #88]	; (801d194 <_tx_thread_preemption_change+0xa0>)
 801d13a:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 801d13e:	4285      	cmp	r5, r0
 801d140:	d1e1      	bne.n	801d106 <_tx_thread_preemption_change+0x12>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 801d142:	4f15      	ldr	r7, [pc, #84]	; (801d198 <_tx_thread_preemption_change+0xa4>)
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 801d144:	2601      	movs	r6, #1
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 801d146:	683d      	ldr	r5, [r7, #0]
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 801d148:	fa06 f303 	lsl.w	r3, r6, r3
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 801d14c:	ea25 0503 	bic.w	r5, r5, r3
 801d150:	603d      	str	r5, [r7, #0]
 801d152:	e7d8      	b.n	801d106 <_tx_thread_preemption_change+0x12>
                if (_tx_thread_execute_ptr == thread_ptr)
 801d154:	4911      	ldr	r1, [pc, #68]	; (801d19c <_tx_thread_preemption_change+0xa8>)
 801d156:	680e      	ldr	r6, [r1, #0]
 801d158:	4286      	cmp	r6, r0
 801d15a:	d1e8      	bne.n	801d12e <_tx_thread_preemption_change+0x3a>
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 801d15c:	429a      	cmp	r2, r3
 801d15e:	d006      	beq.n	801d16e <_tx_thread_preemption_change+0x7a>
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 801d160:	4e0d      	ldr	r6, [pc, #52]	; (801d198 <_tx_thread_preemption_change+0xa4>)
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 801d162:	2001      	movs	r0, #1
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 801d164:	6833      	ldr	r3, [r6, #0]
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 801d166:	fa00 f202 	lsl.w	r2, r0, r2
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 801d16a:	4313      	orrs	r3, r2
 801d16c:	6033      	str	r3, [r6, #0]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801d16e:	4b09      	ldr	r3, [pc, #36]	; (801d194 <_tx_thread_preemption_change+0xa0>)
 801d170:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801d174:	600b      	str	r3, [r1, #0]
 801d176:	f384 8810 	msr	PRIMASK, r4
                    _tx_thread_system_preempt_check();
 801d17a:	f000 f87b 	bl	801d274 <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d17e:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d182:	b672      	cpsid	i
    status =  TX_SUCCESS;
 801d184:	2000      	movs	r0, #0
 801d186:	e7d3      	b.n	801d130 <_tx_thread_preemption_change+0x3c>
        status =  TX_THRESH_ERROR;
 801d188:	2018      	movs	r0, #24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d18a:	f384 8810 	msr	PRIMASK, r4
}
 801d18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d190:	20007a88 	.word	0x20007a88
 801d194:	200079e4 	.word	0x200079e4
 801d198:	20007a8c 	.word	0x20007a8c
 801d19c:	20007a84 	.word	0x20007a84

0801d1a0 <_tx_thread_shell_entry>:
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801d1a0:	4b16      	ldr	r3, [pc, #88]	; (801d1fc <_tx_thread_shell_entry+0x5c>)
{
 801d1a2:	b570      	push	{r4, r5, r6, lr}
    TX_THREAD_GET_CURRENT(thread_ptr)
 801d1a4:	681c      	ldr	r4, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d1a6:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d1aa:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 801d1ac:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d1b0:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 801d1b4:	b113      	cbz	r3, 801d1bc <_tx_thread_shell_entry+0x1c>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 801d1b6:	2100      	movs	r1, #0
 801d1b8:	4620      	mov	r0, r4
 801d1ba:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801d1bc:	e9d4 3011 	ldrd	r3, r0, [r4, #68]	; 0x44
 801d1c0:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801d1c2:	4b0f      	ldr	r3, [pc, #60]	; (801d200 <_tx_thread_shell_entry+0x60>)
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	b10b      	cbz	r3, 801d1cc <_tx_thread_shell_entry+0x2c>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801d1c8:	4620      	mov	r0, r4
 801d1ca:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d1cc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d1d0:	b672      	cpsid	i

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801d1d2:	4a0c      	ldr	r2, [pc, #48]	; (801d204 <_tx_thread_shell_entry+0x64>)
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 801d1d4:	2101      	movs	r1, #1
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801d1d6:	2600      	movs	r6, #0
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 801d1d8:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
    _tx_thread_preempt_disable++;
 801d1dc:	6813      	ldr	r3, [r2, #0]
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801d1de:	64e6      	str	r6, [r4, #76]	; 0x4c
    _tx_thread_preempt_disable++;
 801d1e0:	440b      	add	r3, r1
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 801d1e2:	6321      	str	r1, [r4, #48]	; 0x30
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d1e4:	63a1      	str	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable++;
 801d1e6:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d1e8:	f380 8810 	msr	PRIMASK, r0
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 801d1ec:	b10d      	cbz	r5, 801d1f2 <_tx_thread_shell_entry+0x52>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 801d1ee:	4620      	mov	r0, r4
 801d1f0:	47a8      	blx	r5
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801d1f2:	4620      	mov	r0, r4
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801d1f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _tx_thread_system_suspend(thread_ptr);
 801d1f8:	f000 b8e0 	b.w	801d3bc <_tx_thread_system_suspend>
 801d1fc:	20007a80 	.word	0x20007a80
 801d200:	20007a64 	.word	0x20007a64
 801d204:	20007a7c 	.word	0x20007a7c

0801d208 <_tx_thread_sleep>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 801d208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d20a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d20e:	b672      	cpsid	i

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801d210:	4b14      	ldr	r3, [pc, #80]	; (801d264 <_tx_thread_sleep+0x5c>)
 801d212:	681c      	ldr	r4, [r3, #0]

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 801d214:	b1f4      	cbz	r4, 801d254 <_tx_thread_sleep+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d216:	f3ef 8305 	mrs	r3, IPSR
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801d21a:	4913      	ldr	r1, [pc, #76]	; (801d268 <_tx_thread_sleep+0x60>)
 801d21c:	6809      	ldr	r1, [r1, #0]
 801d21e:	430b      	orrs	r3, r1
 801d220:	d118      	bne.n	801d254 <_tx_thread_sleep+0x4c>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801d222:	4b12      	ldr	r3, [pc, #72]	; (801d26c <_tx_thread_sleep+0x64>)
 801d224:	429c      	cmp	r4, r3
 801d226:	d015      	beq.n	801d254 <_tx_thread_sleep+0x4c>
        status =  TX_CALLER_ERROR;
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 801d228:	b1c0      	cbz	r0, 801d25c <_tx_thread_sleep+0x54>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801d22a:	4b11      	ldr	r3, [pc, #68]	; (801d270 <_tx_thread_sleep+0x68>)
 801d22c:	6819      	ldr	r1, [r3, #0]
 801d22e:	b989      	cbnz	r1, 801d254 <_tx_thread_sleep+0x4c>

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801d230:	681d      	ldr	r5, [r3, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d232:	2601      	movs	r6, #1
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801d234:	2704      	movs	r7, #4
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801d236:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
            _tx_thread_preempt_disable++;
 801d23a:	4435      	add	r5, r6
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 801d23c:	64e0      	str	r0, [r4, #76]	; 0x4c
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801d23e:	6327      	str	r7, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 801d240:	601d      	str	r5, [r3, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d242:	63a6      	str	r6, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d244:	f382 8810 	msr	PRIMASK, r2

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801d248:	4620      	mov	r0, r4
 801d24a:	f000 f8b7 	bl	801d3bc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 801d24e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        }
    }
    
    /* Return completion status.  */
    return(status);
}
 801d252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d254:	f382 8810 	msr	PRIMASK, r2
            status =  TX_CALLER_ERROR;
 801d258:	2013      	movs	r0, #19
}
 801d25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d25c:	f382 8810 	msr	PRIMASK, r2
 801d260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d262:	bf00      	nop
 801d264:	20007a80 	.word	0x20007a80
 801d268:	200000ec 	.word	0x200000ec
 801d26c:	20007b28 	.word	0x20007b28
 801d270:	20007a7c 	.word	0x20007a7c

0801d274 <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d274:	4b0a      	ldr	r3, [pc, #40]	; (801d2a0 <_tx_thread_system_preempt_check+0x2c>)
 801d276:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 801d278:	b98b      	cbnz	r3, 801d29e <_tx_thread_system_preempt_check+0x2a>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801d27a:	4a0a      	ldr	r2, [pc, #40]	; (801d2a4 <_tx_thread_system_preempt_check+0x30>)

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801d27c:	4b0a      	ldr	r3, [pc, #40]	; (801d2a8 <_tx_thread_system_preempt_check+0x34>)

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801d27e:	6812      	ldr	r2, [r2, #0]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	429a      	cmp	r2, r3
 801d284:	d00b      	beq.n	801d29e <_tx_thread_system_preempt_check+0x2a>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801d286:	4b09      	ldr	r3, [pc, #36]	; (801d2ac <_tx_thread_system_preempt_check+0x38>)
 801d288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d28c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d28e:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 801d292:	b923      	cbnz	r3, 801d29e <_tx_thread_system_preempt_check+0x2a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d294:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801d298:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d29a:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801d29e:	4770      	bx	lr
 801d2a0:	20007a7c 	.word	0x20007a7c
 801d2a4:	20007a80 	.word	0x20007a80
 801d2a8:	20007a84 	.word	0x20007a84
 801d2ac:	e000ed04 	.word	0xe000ed04

0801d2b0 <_tx_thread_system_resume>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801d2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2b2:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d2b4:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d2b8:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 801d2ba:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d03f      	beq.n	801d340 <_tx_thread_system_resume+0x90>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801d2c0:	304c      	adds	r0, #76	; 0x4c
 801d2c2:	f000 fa47 	bl	801d754 <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801d2c6:	4a35      	ldr	r2, [pc, #212]	; (801d39c <_tx_thread_system_resume+0xec>)

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 801d2c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 801d2ca:	6813      	ldr	r3, [r2, #0]
 801d2cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d2ce:	3b01      	subs	r3, #1
 801d2d0:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 801d2d2:	b9b8      	cbnz	r0, 801d304 <_tx_thread_system_resume+0x54>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801d2d4:	b9f9      	cbnz	r1, 801d316 <_tx_thread_system_resume+0x66>
 801d2d6:	4b32      	ldr	r3, [pc, #200]	; (801d3a0 <_tx_thread_system_resume+0xf0>)
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801d2d8:	4932      	ldr	r1, [pc, #200]	; (801d3a4 <_tx_thread_system_resume+0xf4>)
 801d2da:	6809      	ldr	r1, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d2dc:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	428b      	cmp	r3, r1
 801d2e4:	d00d      	beq.n	801d302 <_tx_thread_system_resume+0x52>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d2e6:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 801d2e8:	b95b      	cbnz	r3, 801d302 <_tx_thread_system_resume+0x52>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801d2ea:	4b2f      	ldr	r3, [pc, #188]	; (801d3a8 <_tx_thread_system_resume+0xf8>)
 801d2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d2f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d2f2:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 801d2f6:	b923      	cbnz	r3, 801d302 <_tx_thread_system_resume+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d2f8:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801d2fc:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d2fe:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 801d302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801d304:	3901      	subs	r1, #1
 801d306:	2901      	cmp	r1, #1
 801d308:	d9e5      	bls.n	801d2d6 <_tx_thread_system_resume+0x26>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801d30a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d30c:	b991      	cbnz	r1, 801d334 <_tx_thread_system_resume+0x84>
 801d30e:	4b24      	ldr	r3, [pc, #144]	; (801d3a0 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801d310:	63a1      	str	r1, [r4, #56]	; 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 801d312:	6321      	str	r1, [r4, #48]	; 0x30
 801d314:	e7e0      	b.n	801d2d8 <_tx_thread_system_resume+0x28>
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801d316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d318:	b963      	cbnz	r3, 801d334 <_tx_thread_system_resume+0x84>
                priority =  thread_ptr -> tx_thread_priority;
 801d31a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                head_ptr =  _tx_thread_priority_list[priority];
 801d31c:	4e23      	ldr	r6, [pc, #140]	; (801d3ac <_tx_thread_system_resume+0xfc>)
                thread_ptr -> tx_thread_state =  TX_READY;
 801d31e:	6323      	str	r3, [r4, #48]	; 0x30
                head_ptr =  _tx_thread_priority_list[priority];
 801d320:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
                if (head_ptr == TX_NULL)
 801d324:	b171      	cbz	r1, 801d344 <_tx_thread_system_resume+0x94>
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801d326:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801d328:	4b1d      	ldr	r3, [pc, #116]	; (801d3a0 <_tx_thread_system_resume+0xf0>)
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 801d32a:	6204      	str	r4, [r0, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801d32c:	624c      	str	r4, [r1, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801d32e:	e9c4 1008 	strd	r1, r0, [r4, #32]
 801d332:	e7d1      	b.n	801d2d8 <_tx_thread_system_resume+0x28>
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801d334:	2000      	movs	r0, #0
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801d336:	2103      	movs	r1, #3
 801d338:	4b19      	ldr	r3, [pc, #100]	; (801d3a0 <_tx_thread_system_resume+0xf0>)
 801d33a:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
 801d33e:	e7cb      	b.n	801d2d8 <_tx_thread_system_resume+0x28>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801d340:	64c3      	str	r3, [r0, #76]	; 0x4c
 801d342:	e7c0      	b.n	801d2c6 <_tx_thread_system_resume+0x16>
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801d344:	491a      	ldr	r1, [pc, #104]	; (801d3b0 <_tx_thread_system_resume+0x100>)
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801d346:	f04f 0c01 	mov.w	ip, #1
                    if (priority < _tx_thread_highest_priority)
 801d34a:	4f1a      	ldr	r7, [pc, #104]	; (801d3b4 <_tx_thread_system_resume+0x104>)
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801d34c:	680b      	ldr	r3, [r1, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801d34e:	fa0c fe00 	lsl.w	lr, ip, r0
                    _tx_thread_priority_list[priority] =       thread_ptr;
 801d352:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
                    if (priority < _tx_thread_highest_priority)
 801d356:	683e      	ldr	r6, [r7, #0]
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801d358:	ea43 030e 	orr.w	r3, r3, lr
                    if (priority < _tx_thread_highest_priority)
 801d35c:	4286      	cmp	r6, r0
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801d35e:	600b      	str	r3, [r1, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 801d360:	4b0f      	ldr	r3, [pc, #60]	; (801d3a0 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 801d362:	e9c4 4408 	strd	r4, r4, [r4, #32]
                    if (priority < _tx_thread_highest_priority)
 801d366:	d9b7      	bls.n	801d2d8 <_tx_thread_system_resume+0x28>
                        execute_ptr =  _tx_thread_execute_ptr;
 801d368:	6819      	ldr	r1, [r3, #0]
                        _tx_thread_highest_priority =  priority;
 801d36a:	6038      	str	r0, [r7, #0]
                        if (execute_ptr == TX_NULL)
 801d36c:	b199      	cbz	r1, 801d396 <_tx_thread_system_resume+0xe6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 801d36e:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 801d370:	4286      	cmp	r6, r0
 801d372:	d9b1      	bls.n	801d2d8 <_tx_thread_system_resume+0x28>
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 801d374:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801d376:	428e      	cmp	r6, r1
 801d378:	d006      	beq.n	801d388 <_tx_thread_system_resume+0xd8>
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 801d37a:	480f      	ldr	r0, [pc, #60]	; (801d3b8 <_tx_thread_system_resume+0x108>)
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 801d37c:	fa0c fc01 	lsl.w	ip, ip, r1
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 801d380:	6801      	ldr	r1, [r0, #0]
 801d382:	ea41 010c 	orr.w	r1, r1, ip
 801d386:	6001      	str	r1, [r0, #0]
                                _tx_thread_execute_ptr =  thread_ptr;
 801d388:	601c      	str	r4, [r3, #0]
 801d38a:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d38e:	6813      	ldr	r3, [r2, #0]
                                if (combined_flags == ((ULONG) 0))
 801d390:	2b00      	cmp	r3, #0
 801d392:	d0aa      	beq.n	801d2ea <_tx_thread_system_resume+0x3a>
}
 801d394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            _tx_thread_execute_ptr =  thread_ptr;
 801d396:	601c      	str	r4, [r3, #0]
 801d398:	e79e      	b.n	801d2d8 <_tx_thread_system_resume+0x28>
 801d39a:	bf00      	nop
 801d39c:	20007a7c 	.word	0x20007a7c
 801d3a0:	20007a84 	.word	0x20007a84
 801d3a4:	20007a80 	.word	0x20007a80
 801d3a8:	e000ed04 	.word	0xe000ed04
 801d3ac:	200079e4 	.word	0x200079e4
 801d3b0:	20007a68 	.word	0x20007a68
 801d3b4:	20007a88 	.word	0x20007a88
 801d3b8:	20007a8c 	.word	0x20007a8c

0801d3bc <_tx_thread_system_suspend>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801d3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801d3c0:	4b57      	ldr	r3, [pc, #348]	; (801d520 <_tx_thread_system_suspend+0x164>)
{
 801d3c2:	4604      	mov	r4, r0
    TX_THREAD_GET_CURRENT(current_thread)
 801d3c4:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d3c6:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d3ca:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801d3cc:	4285      	cmp	r5, r0
 801d3ce:	d060      	beq.n	801d492 <_tx_thread_system_suspend+0xd6>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801d3d0:	4a54      	ldr	r2, [pc, #336]	; (801d524 <_tx_thread_system_suspend+0x168>)
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801d3d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 801d3d4:	6813      	ldr	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801d3d6:	2901      	cmp	r1, #1
    _tx_thread_preempt_disable--;
 801d3d8:	f103 33ff 	add.w	r3, r3, #4294967295
 801d3dc:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801d3de:	d015      	beq.n	801d40c <_tx_thread_system_suspend+0x50>
 801d3e0:	4b51      	ldr	r3, [pc, #324]	; (801d528 <_tx_thread_system_suspend+0x16c>)
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d3e2:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	42ab      	cmp	r3, r5
 801d3ea:	d00d      	beq.n	801d408 <_tx_thread_system_suspend+0x4c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d3ec:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 801d3ee:	b95b      	cbnz	r3, 801d408 <_tx_thread_system_suspend+0x4c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801d3f0:	4b4e      	ldr	r3, [pc, #312]	; (801d52c <_tx_thread_system_suspend+0x170>)
 801d3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d3f6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d3f8:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 801d3fc:	b923      	cbnz	r3, 801d408 <_tx_thread_system_suspend+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d3fe:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801d402:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d404:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 801d408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ready_next =      thread_ptr -> tx_thread_ready_next;
 801d40c:	6a23      	ldr	r3, [r4, #32]
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801d40e:	f04f 0c00 	mov.w	ip, #0
        priority =  thread_ptr -> tx_thread_priority;
 801d412:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        if (ready_next != thread_ptr)
 801d414:	429c      	cmp	r4, r3
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801d416:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
        if (ready_next != thread_ptr)
 801d41a:	d050      	beq.n	801d4be <_tx_thread_system_suspend+0x102>
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801d41c:	4f44      	ldr	r7, [pc, #272]	; (801d530 <_tx_thread_system_suspend+0x174>)
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801d41e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801d422:	f857 e020 	ldr.w	lr, [r7, r0, lsl #2]
            ready_next -> tx_thread_ready_previous =    ready_previous;
 801d426:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801d42a:	45a6      	cmp	lr, r4
            ready_previous -> tx_thread_ready_next =    ready_next;
 801d42c:	f8cc 3020 	str.w	r3, [ip, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801d430:	d037      	beq.n	801d4a2 <_tx_thread_system_suspend+0xe6>
        if (thread_ptr == _tx_thread_execute_ptr)
 801d432:	4b3d      	ldr	r3, [pc, #244]	; (801d528 <_tx_thread_system_suspend+0x16c>)
 801d434:	6819      	ldr	r1, [r3, #0]
 801d436:	42a1      	cmp	r1, r4
 801d438:	d1d3      	bne.n	801d3e2 <_tx_thread_system_suspend+0x26>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801d43a:	483e      	ldr	r0, [pc, #248]	; (801d534 <_tx_thread_system_suspend+0x178>)
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 801d43c:	493e      	ldr	r1, [pc, #248]	; (801d538 <_tx_thread_system_suspend+0x17c>)
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801d43e:	6805      	ldr	r5, [r0, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 801d440:	680c      	ldr	r4, [r1, #0]
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801d442:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801d446:	601d      	str	r5, [r3, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 801d448:	b1ec      	cbz	r4, 801d486 <_tx_thread_system_suspend+0xca>
                _tx_thread_preempt_disable++;
 801d44a:	6814      	ldr	r4, [r2, #0]
 801d44c:	3401      	adds	r4, #1
 801d44e:	6014      	str	r4, [r2, #0]
 801d450:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d454:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d458:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 801d45a:	6814      	ldr	r4, [r2, #0]
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 801d45c:	680d      	ldr	r5, [r1, #0]
                _tx_thread_preempt_disable--;
 801d45e:	3c01      	subs	r4, #1
 801d460:	6014      	str	r4, [r2, #0]
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801d462:	fa95 f4a5 	rbit	r4, r5
 801d466:	fab4 f484 	clz	r4, r4
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 801d46a:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 801d46e:	f8d0 c000 	ldr.w	ip, [r0]
 801d472:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801d474:	4560      	cmp	r0, ip
 801d476:	d806      	bhi.n	801d486 <_tx_thread_system_suspend+0xca>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801d478:	2001      	movs	r0, #1
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 801d47a:	601f      	str	r7, [r3, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801d47c:	fa00 f404 	lsl.w	r4, r0, r4
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 801d480:	ea25 0504 	bic.w	r5, r5, r4
 801d484:	600d      	str	r5, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d486:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d48a:	6813      	ldr	r3, [r2, #0]
            if (combined_flags == ((ULONG) 0))
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d0af      	beq.n	801d3f0 <_tx_thread_system_suspend+0x34>
 801d490:	e7ba      	b.n	801d408 <_tx_thread_system_suspend+0x4c>
            if (timeout != TX_WAIT_FOREVER)
 801d492:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801d494:	3b01      	subs	r3, #1
 801d496:	3303      	adds	r3, #3
 801d498:	d935      	bls.n	801d506 <_tx_thread_system_suspend+0x14a>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801d49a:	4b28      	ldr	r3, [pc, #160]	; (801d53c <_tx_thread_system_suspend+0x180>)
 801d49c:	69e2      	ldr	r2, [r4, #28]
 801d49e:	601a      	str	r2, [r3, #0]
 801d4a0:	e796      	b.n	801d3d0 <_tx_thread_system_suspend+0x14>
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 801d4a2:	f8df c094 	ldr.w	ip, [pc, #148]	; 801d538 <_tx_thread_system_suspend+0x17c>
                _tx_thread_priority_list[priority] =  ready_next;
 801d4a6:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 801d4aa:	f8dc 3000 	ldr.w	r3, [ip]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d0bf      	beq.n	801d432 <_tx_thread_system_suspend+0x76>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801d4b2:	4081      	lsls	r1, r0
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 801d4b4:	ea23 0301 	bic.w	r3, r3, r1
 801d4b8:	f8cc 3000 	str.w	r3, [ip]
 801d4bc:	e7b9      	b.n	801d432 <_tx_thread_system_suspend+0x76>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801d4be:	f8df e080 	ldr.w	lr, [pc, #128]	; 801d540 <_tx_thread_system_suspend+0x184>
            TX_MOD32_BIT_SET(priority, priority_bit)
 801d4c2:	4081      	lsls	r1, r0
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 801d4c4:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801d538 <_tx_thread_system_suspend+0x17c>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801d4c8:	f8de 3000 	ldr.w	r3, [lr]
 801d4cc:	43c9      	mvns	r1, r1
            _tx_thread_priority_list[priority] =    TX_NULL;
 801d4ce:	4f18      	ldr	r7, [pc, #96]	; (801d530 <_tx_thread_system_suspend+0x174>)
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801d4d0:	400b      	ands	r3, r1
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 801d4d2:	f8d8 9000 	ldr.w	r9, [r8]
            _tx_thread_priority_list[priority] =    TX_NULL;
 801d4d6:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801d4da:	f8ce 3000 	str.w	r3, [lr]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 801d4de:	f1b9 0f00 	cmp.w	r9, #0
 801d4e2:	d003      	beq.n	801d4ec <_tx_thread_system_suspend+0x130>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 801d4e4:	ea01 0109 	and.w	r1, r1, r9
 801d4e8:	f8c8 1000 	str.w	r1, [r8]
            if (priority_map == ((ULONG) 0))
 801d4ec:	b983      	cbnz	r3, 801d510 <_tx_thread_system_suspend+0x154>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801d4ee:	4811      	ldr	r0, [pc, #68]	; (801d534 <_tx_thread_system_suspend+0x178>)
 801d4f0:	2420      	movs	r4, #32
                _tx_thread_execute_ptr =       TX_NULL;
 801d4f2:	490d      	ldr	r1, [pc, #52]	; (801d528 <_tx_thread_system_suspend+0x16c>)
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801d4f4:	6004      	str	r4, [r0, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801d4f6:	600b      	str	r3, [r1, #0]
 801d4f8:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d4fc:	6813      	ldr	r3, [r2, #0]
                if (combined_flags == ((ULONG) 0))
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	f43f af76 	beq.w	801d3f0 <_tx_thread_system_suspend+0x34>
 801d504:	e780      	b.n	801d408 <_tx_thread_system_suspend+0x4c>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 801d506:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 801d50a:	f000 f8f9 	bl	801d700 <_tx_timer_system_activate>
 801d50e:	e7c4      	b.n	801d49a <_tx_thread_system_suspend+0xde>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801d510:	fa93 f3a3 	rbit	r3, r3
 801d514:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 801d518:	4906      	ldr	r1, [pc, #24]	; (801d534 <_tx_thread_system_suspend+0x178>)
 801d51a:	600b      	str	r3, [r1, #0]
 801d51c:	e789      	b.n	801d432 <_tx_thread_system_suspend+0x76>
 801d51e:	bf00      	nop
 801d520:	20007a80 	.word	0x20007a80
 801d524:	20007a7c 	.word	0x20007a7c
 801d528:	20007a84 	.word	0x20007a84
 801d52c:	e000ed04 	.word	0xe000ed04
 801d530:	200079e4 	.word	0x200079e4
 801d534:	20007a88 	.word	0x20007a88
 801d538:	20007a8c 	.word	0x20007a8c
 801d53c:	20007b18 	.word	0x20007b18
 801d540:	20007a68 	.word	0x20007a68

0801d544 <_tx_thread_timeout>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801d544:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d546:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d54a:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 801d54c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801d54e:	2a04      	cmp	r2, #4
 801d550:	d008      	beq.n	801d564 <_tx_thread_timeout+0x20>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif
    
        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801d552:	6e82      	ldr	r2, [r0, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801d554:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d558:	f384 8810 	msr	PRIMASK, r4
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 801d55c:	b162      	cbz	r2, 801d578 <_tx_thread_timeout+0x34>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801d55e:	f85d 4b04 	ldr.w	r4, [sp], #4
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801d562:	4710      	bx	r2
        _tx_thread_preempt_disable++;
 801d564:	4a06      	ldr	r2, [pc, #24]	; (801d580 <_tx_thread_timeout+0x3c>)
 801d566:	6813      	ldr	r3, [r2, #0]
 801d568:	3301      	adds	r3, #1
 801d56a:	6013      	str	r3, [r2, #0]
 801d56c:	f384 8810 	msr	PRIMASK, r4
}
 801d570:	f85d 4b04 	ldr.w	r4, [sp], #4
        _tx_thread_system_resume(thread_ptr);
 801d574:	f7ff be9c 	b.w	801d2b0 <_tx_thread_system_resume>
}
 801d578:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d57c:	4770      	bx	lr
 801d57e:	bf00      	nop
 801d580:	20007a7c 	.word	0x20007a7c

0801d584 <_tx_time_get>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d584:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d588:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 801d58a:	4a02      	ldr	r2, [pc, #8]	; (801d594 <_tx_time_get+0x10>)
 801d58c:	6810      	ldr	r0, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d58e:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
}
 801d592:	4770      	bx	lr
 801d594:	2000800c 	.word	0x2000800c

0801d598 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 801d598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d59a:	460f      	mov	r7, r1
 801d59c:	4616      	mov	r6, r2
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 801d59e:	2100      	movs	r1, #0
 801d5a0:	222c      	movs	r2, #44	; 0x2c
{
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	461d      	mov	r5, r3
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 801d5a6:	f000 fff8 	bl	801e59a <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 801d5aa:	9b06      	ldr	r3, [sp, #24]
    timer_ptr -> tx_timer_name =                                            name_ptr;
 801d5ac:	6067      	str	r7, [r4, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 801d5ae:	60a3      	str	r3, [r4, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 801d5b0:	9b07      	ldr	r3, [sp, #28]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 801d5b2:	6165      	str	r5, [r4, #20]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 801d5b4:	e9c4 3603 	strd	r3, r6, [r4, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d5b8:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d5bc:	b672      	cpsid	i
    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 801d5be:	4a12      	ldr	r2, [pc, #72]	; (801d608 <_tx_timer_create+0x70>)
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 801d5c0:	4912      	ldr	r1, [pc, #72]	; (801d60c <_tx_timer_create+0x74>)
    if (_tx_timer_created_count == TX_EMPTY)
 801d5c2:	6813      	ldr	r3, [r2, #0]
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 801d5c4:	6021      	str	r1, [r4, #0]
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 801d5c6:	4912      	ldr	r1, [pc, #72]	; (801d610 <_tx_timer_create+0x78>)
    if (_tx_timer_created_count == TX_EMPTY)
 801d5c8:	b95b      	cbnz	r3, 801d5e2 <_tx_timer_create+0x4a>
        timer_ptr -> tx_timer_created_previous =  previous_timer;
        timer_ptr -> tx_timer_created_next =      next_timer;
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 801d5ca:	3301      	adds	r3, #1
        _tx_timer_created_ptr =                   timer_ptr;
 801d5cc:	600c      	str	r4, [r1, #0]
    _tx_timer_created_count++;
 801d5ce:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 801d5d0:	9b08      	ldr	r3, [sp, #32]
 801d5d2:	2b01      	cmp	r3, #1
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 801d5d4:	e9c4 4409 	strd	r4, r4, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 801d5d8:	d00e      	beq.n	801d5f8 <_tx_timer_create+0x60>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d5da:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 801d5de:	2000      	movs	r0, #0
 801d5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _tx_timer_created_count++;
 801d5e2:	3301      	adds	r3, #1
        next_timer =  _tx_timer_created_ptr;
 801d5e4:	6809      	ldr	r1, [r1, #0]
    _tx_timer_created_count++;
 801d5e6:	6013      	str	r3, [r2, #0]
    if (auto_activate == TX_AUTO_ACTIVATE)
 801d5e8:	9b08      	ldr	r3, [sp, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801d5ea:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if (auto_activate == TX_AUTO_ACTIVATE)
 801d5ec:	2b01      	cmp	r3, #1
        next_timer -> tx_timer_created_previous =  timer_ptr;
 801d5ee:	628c      	str	r4, [r1, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 801d5f0:	6244      	str	r4, [r0, #36]	; 0x24
        timer_ptr -> tx_timer_created_next =      next_timer;
 801d5f2:	e9c4 1009 	strd	r1, r0, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 801d5f6:	d1f0      	bne.n	801d5da <_tx_timer_create+0x42>
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 801d5f8:	f104 0008 	add.w	r0, r4, #8
 801d5fc:	f000 f880 	bl	801d700 <_tx_timer_system_activate>
 801d600:	f386 8810 	msr	PRIMASK, r6
}
 801d604:	2000      	movs	r0, #0
 801d606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d608:	20008004 	.word	0x20008004
 801d60c:	4154494d 	.word	0x4154494d
 801d610:	20007bf8 	.word	0x20007bf8

0801d614 <_tx_timer_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 801d614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801d618:	2500      	movs	r5, #0
    _tx_timer_expired_timer_ptr =  TX_NULL;

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801d61a:	4c26      	ldr	r4, [pc, #152]	; (801d6b4 <_tx_timer_initialize+0xa0>)
    _tx_timer_system_clock =  ((ULONG) 0);
 801d61c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 801d6ec <_tx_timer_initialize+0xd8>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801d620:	2280      	movs	r2, #128	; 0x80
    _tx_timer_time_slice =  ((ULONG) 0);
 801d622:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 801d6f0 <_tx_timer_initialize+0xdc>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801d626:	4629      	mov	r1, r5
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801d628:	4b23      	ldr	r3, [pc, #140]	; (801d6b8 <_tx_timer_initialize+0xa4>)
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801d62a:	4620      	mov	r0, r4
    _tx_timer_expired_time_slice =  TX_FALSE;
 801d62c:	4f23      	ldr	r7, [pc, #140]	; (801d6bc <_tx_timer_initialize+0xa8>)
{
 801d62e:	b087      	sub	sp, #28
    _tx_timer_expired =             TX_FALSE;
 801d630:	4e23      	ldr	r6, [pc, #140]	; (801d6c0 <_tx_timer_initialize+0xac>)
    _tx_timer_system_clock =  ((ULONG) 0);
 801d632:	f8ce 5000 	str.w	r5, [lr]
    _tx_timer_time_slice =  ((ULONG) 0);
 801d636:	f8cc 5000 	str.w	r5, [ip]
    _tx_timer_expired_time_slice =  TX_FALSE;
 801d63a:	603d      	str	r5, [r7, #0]
    _tx_timer_expired =             TX_FALSE;
 801d63c:	6035      	str	r5, [r6, #0]
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801d63e:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801d640:	f000 ffab 	bl	801e59a <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801d644:	4e1f      	ldr	r6, [pc, #124]	; (801d6c4 <_tx_timer_initialize+0xb0>)
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801d646:	f44f 6080 	mov.w	r0, #1024	; 0x400
    _tx_timer_list_start =   &_tx_timer_list[0];
 801d64a:	4a1f      	ldr	r2, [pc, #124]	; (801d6c8 <_tx_timer_initialize+0xb4>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801d64c:	f104 0e80 	add.w	lr, r4, #128	; 0x80
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801d650:	6034      	str	r4, [r6, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801d652:	462b      	mov	r3, r5
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801d654:	f8df c09c 	ldr.w	ip, [pc, #156]	; 801d6f4 <_tx_timer_initialize+0xe0>
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801d658:	4f1c      	ldr	r7, [pc, #112]	; (801d6cc <_tx_timer_initialize+0xb8>)
    _tx_timer_list_start =   &_tx_timer_list[0];
 801d65a:	6014      	str	r4, [r2, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801d65c:	4661      	mov	r1, ip
 801d65e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 801d6f8 <_tx_timer_initialize+0xe4>
 801d662:	4602      	mov	r2, r0
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801d664:	4e1a      	ldr	r6, [pc, #104]	; (801d6d0 <_tx_timer_initialize+0xbc>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801d666:	4c1b      	ldr	r4, [pc, #108]	; (801d6d4 <_tx_timer_initialize+0xc0>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801d668:	f8c7 e000 	str.w	lr, [r7]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801d66c:	f8c8 5000 	str.w	r5, [r8]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 801d670:	f8df 9088 	ldr.w	r9, [pc, #136]	; 801d6fc <_tx_timer_initialize+0xe8>
 801d674:	4f18      	ldr	r7, [pc, #96]	; (801d6d8 <_tx_timer_initialize+0xc4>)
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801d676:	f8c6 c000 	str.w	ip, [r6]
        status =  _tx_thread_create(&_tx_timer_thread, 
 801d67a:	4d18      	ldr	r5, [pc, #96]	; (801d6dc <_tx_timer_initialize+0xc8>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801d67c:	6020      	str	r0, [r4, #0]
 801d67e:	e003      	b.n	801d688 <_tx_timer_initialize+0x74>
 801d680:	6831      	ldr	r1, [r6, #0]
 801d682:	6822      	ldr	r2, [r4, #0]
 801d684:	f8d8 3000 	ldr.w	r3, [r8]
        status =  _tx_thread_create(&_tx_timer_thread, 
 801d688:	2000      	movs	r0, #0
 801d68a:	9201      	str	r2, [sp, #4]
 801d68c:	9100      	str	r1, [sp, #0]
 801d68e:	463a      	mov	r2, r7
 801d690:	4629      	mov	r1, r5
 801d692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d696:	e9cd 0004 	strd	r0, r0, [sp, #16]
 801d69a:	464b      	mov	r3, r9
 801d69c:	4810      	ldr	r0, [pc, #64]	; (801d6e0 <_tx_timer_initialize+0xcc>)
 801d69e:	f7ff fc1f 	bl	801cee0 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 801d6a2:	2800      	cmp	r0, #0
 801d6a4:	d1ec      	bne.n	801d680 <_tx_timer_initialize+0x6c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801d6a6:	4a0f      	ldr	r2, [pc, #60]	; (801d6e4 <_tx_timer_initialize+0xd0>)

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801d6a8:	4b0f      	ldr	r3, [pc, #60]	; (801d6e8 <_tx_timer_initialize+0xd4>)
    _tx_timer_created_ptr =  TX_NULL;
 801d6aa:	6010      	str	r0, [r2, #0]
    _tx_timer_created_count =  TX_EMPTY;
 801d6ac:	6018      	str	r0, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801d6ae:	b007      	add	sp, #28
 801d6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6b4:	20007a94 	.word	0x20007a94
 801d6b8:	20007bf0 	.word	0x20007bf0
 801d6bc:	20008008 	.word	0x20008008
 801d6c0:	20007b14 	.word	0x20007b14
 801d6c4:	20007a90 	.word	0x20007a90
 801d6c8:	20007bf4 	.word	0x20007bf4
 801d6cc:	20007b20 	.word	0x20007b20
 801d6d0:	20008000 	.word	0x20008000
 801d6d4:	20007bfc 	.word	0x20007bfc
 801d6d8:	0801d785 	.word	0x0801d785
 801d6dc:	0802592c 	.word	0x0802592c
 801d6e0:	20007b28 	.word	0x20007b28
 801d6e4:	20007bf8 	.word	0x20007bf8
 801d6e8:	20008004 	.word	0x20008004
 801d6ec:	2000800c 	.word	0x2000800c
 801d6f0:	20007b18 	.word	0x20007b18
 801d6f4:	20007c00 	.word	0x20007c00
 801d6f8:	20007b1c 	.word	0x20007b1c
 801d6fc:	4154494d 	.word	0x4154494d

0801d700 <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801d700:	6802      	ldr	r2, [r0, #0]
    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801d702:	1e53      	subs	r3, r2, #1
 801d704:	1cd9      	adds	r1, r3, #3
 801d706:	d900      	bls.n	801d70a <_tx_timer_system_activate+0xa>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 801d708:	4770      	bx	lr
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801d70a:	6981      	ldr	r1, [r0, #24]
 801d70c:	2900      	cmp	r1, #0
 801d70e:	d1fb      	bne.n	801d708 <_tx_timer_system_activate+0x8>
                if (remaining_ticks > TX_TIMER_ENTRIES)
 801d710:	2a20      	cmp	r2, #32
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801d712:	4a0d      	ldr	r2, [pc, #52]	; (801d748 <_tx_timer_system_activate+0x48>)
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801d714:	490d      	ldr	r1, [pc, #52]	; (801d74c <_tx_timer_system_activate+0x4c>)
 801d716:	bf94      	ite	ls
 801d718:	009b      	lslls	r3, r3, #2
 801d71a:	237c      	movhi	r3, #124	; 0x7c
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801d71c:	6812      	ldr	r2, [r2, #0]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801d71e:	6809      	ldr	r1, [r1, #0]
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801d720:	4413      	add	r3, r2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801d722:	4299      	cmp	r1, r3
 801d724:	d803      	bhi.n	801d72e <_tx_timer_system_activate+0x2e>
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801d726:	4a0a      	ldr	r2, [pc, #40]	; (801d750 <_tx_timer_system_activate+0x50>)
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801d728:	1a5b      	subs	r3, r3, r1
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801d72a:	6812      	ldr	r2, [r2, #0]
 801d72c:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 801d72e:	681a      	ldr	r2, [r3, #0]
 801d730:	b132      	cbz	r2, 801d740 <_tx_timer_system_activate+0x40>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801d732:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 801d734:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801d736:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801d738:	e9c0 2104 	strd	r2, r1, [r0, #16]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 801d73c:	6183      	str	r3, [r0, #24]
}
 801d73e:	4770      	bx	lr
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801d740:	e9c0 0004 	strd	r0, r0, [r0, #16]
                    *timer_list =  timer_ptr;
 801d744:	6018      	str	r0, [r3, #0]
 801d746:	e7f9      	b.n	801d73c <_tx_timer_system_activate+0x3c>
 801d748:	20007a90 	.word	0x20007a90
 801d74c:	20007b20 	.word	0x20007b20
 801d750:	20007bf4 	.word	0x20007bf4

0801d754 <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 801d754:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801d756:	b153      	cbz	r3, 801d76e <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 801d758:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801d75a:	4290      	cmp	r0, r2
 801d75c:	d008      	beq.n	801d770 <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 801d75e:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801d760:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 801d762:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801d764:	6819      	ldr	r1, [r3, #0]
 801d766:	4281      	cmp	r1, r0
 801d768:	d008      	beq.n	801d77c <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801d76a:	2300      	movs	r3, #0
 801d76c:	6183      	str	r3, [r0, #24]
    }
}
 801d76e:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 801d770:	681a      	ldr	r2, [r3, #0]
 801d772:	4282      	cmp	r2, r0
 801d774:	d1f9      	bne.n	801d76a <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 801d776:	2200      	movs	r2, #0
 801d778:	601a      	str	r2, [r3, #0]
 801d77a:	e7f6      	b.n	801d76a <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 801d77c:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 801d77e:	601a      	str	r2, [r3, #0]
 801d780:	e7f3      	b.n	801d76a <_tx_timer_system_deactivate+0x16>
 801d782:	bf00      	nop

0801d784 <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 801d784:	4b40      	ldr	r3, [pc, #256]	; (801d888 <_tx_timer_thread_entry+0x104>)
 801d786:	4298      	cmp	r0, r3
 801d788:	d000      	beq.n	801d78c <_tx_timer_thread_entry+0x8>
 801d78a:	4770      	bx	lr
{
 801d78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d790:	b083      	sub	sp, #12
 801d792:	f8df b10c 	ldr.w	fp, [pc, #268]	; 801d8a0 <_tx_timer_thread_entry+0x11c>
 801d796:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801d8a4 <_tx_timer_thread_entry+0x120>
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801d79a:	2600      	movs	r6, #0
 801d79c:	ad01      	add	r5, sp, #4
 801d79e:	4c3b      	ldr	r4, [pc, #236]	; (801d88c <_tx_timer_thread_entry+0x108>)
 801d7a0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 801d898 <_tx_timer_thread_entry+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d7a4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d7a8:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 801d7aa:	f8db 3000 	ldr.w	r3, [fp]
 801d7ae:	681a      	ldr	r2, [r3, #0]
 801d7b0:	9200      	str	r2, [sp, #0]
            if (expired_timers != TX_NULL)
 801d7b2:	b10a      	cbz	r2, 801d7b8 <_tx_timer_thread_entry+0x34>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801d7b4:	f8c2 d018 	str.w	sp, [r2, #24]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801d7b8:	f8d8 2000 	ldr.w	r2, [r8]
            *_tx_timer_current_ptr =  TX_NULL;
 801d7bc:	f843 6b04 	str.w	r6, [r3], #4
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801d7c0:	4293      	cmp	r3, r2
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 801d7c2:	f8cb 3000 	str.w	r3, [fp]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801d7c6:	d059      	beq.n	801d87c <_tx_timer_thread_entry+0xf8>
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801d7c8:	4b31      	ldr	r3, [pc, #196]	; (801d890 <_tx_timer_thread_entry+0x10c>)
 801d7ca:	601e      	str	r6, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d7cc:	f380 8810 	msr	PRIMASK, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d7d0:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d7d4:	b672      	cpsid	i
            /* Disable interrupts again.  */
            TX_DISABLE

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 801d7d6:	9f00      	ldr	r7, [sp, #0]
 801d7d8:	b9b7      	cbnz	r7, 801d808 <_tx_timer_thread_entry+0x84>
 801d7da:	e034      	b.n	801d846 <_tx_timer_thread_entry+0xc2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801d7dc:	3a20      	subs	r2, #32
                    timeout_function =  TX_NULL;

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801d7de:	61bd      	str	r5, [r7, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 801d7e0:	613f      	str	r7, [r7, #16]
                    current_timer -> tx_timer_internal_remaining_ticks =  
 801d7e2:	603a      	str	r2, [r7, #0]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801d7e4:	9701      	str	r7, [sp, #4]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801d7e6:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d7e8:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d7ec:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d7f0:	b672      	cpsid	i

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801d7f2:	9801      	ldr	r0, [sp, #4]
                _tx_timer_expired_timer_ptr =  TX_NULL;
 801d7f4:	6026      	str	r6, [r4, #0]
                if (reactivate_timer == current_timer)
 801d7f6:	42b8      	cmp	r0, r7
 801d7f8:	d02b      	beq.n	801d852 <_tx_timer_thread_entry+0xce>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d7fa:	f389 8810 	msr	PRIMASK, r9
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d7fe:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d802:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 801d804:	9f00      	ldr	r7, [sp, #0]
 801d806:	b1f7      	cbz	r7, 801d846 <_tx_timer_thread_entry+0xc2>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801d808:	693a      	ldr	r2, [r7, #16]
                reactivate_timer =  TX_NULL;
 801d80a:	9601      	str	r6, [sp, #4]
                if (current_timer == next_timer)
 801d80c:	42ba      	cmp	r2, r7
 801d80e:	d018      	beq.n	801d842 <_tx_timer_thread_entry+0xbe>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801d810:	6978      	ldr	r0, [r7, #20]
                    expired_timers =  next_timer;
 801d812:	9200      	str	r2, [sp, #0]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801d814:	6150      	str	r0, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801d816:	6102      	str	r2, [r0, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801d818:	f8c2 d018 	str.w	sp, [r2, #24]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801d81c:	683a      	ldr	r2, [r7, #0]
 801d81e:	2a20      	cmp	r2, #32
 801d820:	d8dc      	bhi.n	801d7dc <_tx_timer_thread_entry+0x58>
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801d822:	68f8      	ldr	r0, [r7, #12]
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 801d824:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801d828:	603b      	str	r3, [r7, #0]
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 801d82a:	b113      	cbz	r3, 801d832 <_tx_timer_thread_entry+0xae>
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801d82c:	462b      	mov	r3, r5
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 801d82e:	613f      	str	r7, [r7, #16]
                        reactivate_timer =  current_timer;
 801d830:	9701      	str	r7, [sp, #4]
 801d832:	61bb      	str	r3, [r7, #24]
                _tx_timer_expired_timer_ptr =  current_timer;
 801d834:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d836:	f38c 8810 	msr	PRIMASK, ip
                if (timeout_function != TX_NULL)
 801d83a:	2a00      	cmp	r2, #0
 801d83c:	d0d6      	beq.n	801d7ec <_tx_timer_thread_entry+0x68>
                    (timeout_function) (timeout_param);
 801d83e:	4790      	blx	r2
 801d840:	e7d4      	b.n	801d7ec <_tx_timer_thread_entry+0x68>
                    expired_timers =  TX_NULL;
 801d842:	9600      	str	r6, [sp, #0]
 801d844:	e7ea      	b.n	801d81c <_tx_timer_thread_entry+0x98>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801d846:	4b12      	ldr	r3, [pc, #72]	; (801d890 <_tx_timer_thread_entry+0x10c>)
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	b13b      	cbz	r3, 801d85c <_tx_timer_thread_entry+0xd8>
 801d84c:	f38c 8810 	msr	PRIMASK, ip
 801d850:	e7a8      	b.n	801d7a4 <_tx_timer_thread_entry+0x20>
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801d852:	61be      	str	r6, [r7, #24]
                    _tx_timer_system_activate(current_timer);
 801d854:	4638      	mov	r0, r7
 801d856:	f7ff ff53 	bl	801d700 <_tx_timer_system_activate>
 801d85a:	e7ce      	b.n	801d7fa <_tx_timer_thread_entry+0x76>

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801d85c:	490d      	ldr	r1, [pc, #52]	; (801d894 <_tx_timer_thread_entry+0x110>)
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d85e:	2201      	movs	r2, #1
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801d860:	2003      	movs	r0, #3
                _tx_thread_preempt_disable++;
 801d862:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801d864:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
                _tx_thread_preempt_disable++;
 801d868:	4413      	add	r3, r2
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d86a:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
                _tx_thread_preempt_disable++;
 801d86e:	600b      	str	r3, [r1, #0]
 801d870:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801d874:	4808      	ldr	r0, [pc, #32]	; (801d898 <_tx_timer_thread_entry+0x114>)
 801d876:	f7ff fda1 	bl	801d3bc <_tx_thread_system_suspend>
 801d87a:	e793      	b.n	801d7a4 <_tx_timer_thread_entry+0x20>
                _tx_timer_current_ptr =  _tx_timer_list_start;
 801d87c:	4b07      	ldr	r3, [pc, #28]	; (801d89c <_tx_timer_thread_entry+0x118>)
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	f8cb 3000 	str.w	r3, [fp]
 801d884:	e7a0      	b.n	801d7c8 <_tx_timer_thread_entry+0x44>
 801d886:	bf00      	nop
 801d888:	4154494d 	.word	0x4154494d
 801d88c:	20007bf0 	.word	0x20007bf0
 801d890:	20007b14 	.word	0x20007b14
 801d894:	20007a7c 	.word	0x20007a7c
 801d898:	20007b28 	.word	0x20007b28
 801d89c:	20007bf4 	.word	0x20007bf4
 801d8a0:	20007a90 	.word	0x20007a90
 801d8a4:	20007b20 	.word	0x20007b20

0801d8a8 <_txe_event_flags_create>:
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 801d8a8:	2a28      	cmp	r2, #40	; 0x28
 801d8aa:	d140      	bne.n	801d92e <_txe_event_flags_create+0x86>
 801d8ac:	2800      	cmp	r0, #0
 801d8ae:	d03e      	beq.n	801d92e <_txe_event_flags_create+0x86>
{
 801d8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d8b2:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d8b6:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801d8b8:	4f23      	ldr	r7, [pc, #140]	; (801d948 <_txe_event_flags_create+0xa0>)
 801d8ba:	683b      	ldr	r3, [r7, #0]
 801d8bc:	3301      	adds	r3, #1
 801d8be:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d8c0:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 801d8c4:	4a21      	ldr	r2, [pc, #132]	; (801d94c <_txe_event_flags_create+0xa4>)
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 801d8c6:	4b22      	ldr	r3, [pc, #136]	; (801d950 <_txe_event_flags_create+0xa8>)
        next_group =   _tx_event_flags_created_ptr;
 801d8c8:	6814      	ldr	r4, [r2, #0]
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 801d8ca:	681a      	ldr	r2, [r3, #0]
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 801d8cc:	42a0      	cmp	r0, r4
 801d8ce:	d00a      	beq.n	801d8e6 <_txe_event_flags_create+0x3e>
 801d8d0:	fab2 f382 	clz	r3, r2
 801d8d4:	095b      	lsrs	r3, r3, #5
 801d8d6:	b113      	cbz	r3, 801d8de <_txe_event_flags_create+0x36>
 801d8d8:	e005      	b.n	801d8e6 <_txe_event_flags_create+0x3e>
 801d8da:	42a0      	cmp	r0, r4
 801d8dc:	d003      	beq.n	801d8e6 <_txe_event_flags_create+0x3e>
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 801d8de:	3301      	adds	r3, #1
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 801d8e0:	69a4      	ldr	r4, [r4, #24]
            if (group_ptr == next_group)
 801d8e2:	4293      	cmp	r3, r2
 801d8e4:	d3f9      	bcc.n	801d8da <_txe_event_flags_create+0x32>
 801d8e6:	460e      	mov	r6, r1
 801d8e8:	4605      	mov	r5, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d8ea:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d8ee:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801d8f0:	683b      	ldr	r3, [r7, #0]
 801d8f2:	3b01      	subs	r3, #1
 801d8f4:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d8f6:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801d8fa:	f7ff fcbb 	bl	801d274 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 801d8fe:	42a5      	cmp	r5, r4
 801d900:	d01f      	beq.n	801d942 <_txe_event_flags_create+0x9a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801d902:	4b14      	ldr	r3, [pc, #80]	; (801d954 <_txe_event_flags_create+0xac>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801d904:	4814      	ldr	r0, [pc, #80]	; (801d958 <_txe_event_flags_create+0xb0>)
 801d906:	681b      	ldr	r3, [r3, #0]
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801d908:	4283      	cmp	r3, r0
 801d90a:	bf0c      	ite	eq
 801d90c:	2013      	moveq	r0, #19
 801d90e:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d910:	f3ef 8205 	mrs	r2, IPSR
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801d914:	4b11      	ldr	r3, [pc, #68]	; (801d95c <_txe_event_flags_create+0xb4>)
 801d916:	6819      	ldr	r1, [r3, #0]
 801d918:	430a      	orrs	r2, r1
 801d91a:	d00a      	beq.n	801d932 <_txe_event_flags_create+0x8a>
 801d91c:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	4313      	orrs	r3, r2
 801d924:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801d928:	d203      	bcs.n	801d932 <_txe_event_flags_create+0x8a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801d92a:	2013      	movs	r0, #19
        status =  _tx_event_flags_create(group_ptr, name_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 801d92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status =  TX_GROUP_ERROR;
 801d92e:	2006      	movs	r0, #6
}
 801d930:	4770      	bx	lr
    if (status == TX_SUCCESS)
 801d932:	2800      	cmp	r0, #0
 801d934:	d1fa      	bne.n	801d92c <_txe_event_flags_create+0x84>
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 801d936:	4631      	mov	r1, r6
 801d938:	4628      	mov	r0, r5
}
 801d93a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 801d93e:	f7fe be59 	b.w	801c5f4 <_tx_event_flags_create>
        status =  TX_GROUP_ERROR;
 801d942:	2006      	movs	r0, #6
}
 801d944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d946:	bf00      	nop
 801d948:	20007a7c 	.word	0x20007a7c
 801d94c:	200079b0 	.word	0x200079b0
 801d950:	200079d4 	.word	0x200079d4
 801d954:	20007a80 	.word	0x20007a80
 801d958:	20007b28 	.word	0x20007b28
 801d95c:	200000ec 	.word	0x200000ec

0801d960 <_txe_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 801d960:	b470      	push	{r4, r5, r6}
 801d962:	9c03      	ldr	r4, [sp, #12]

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 801d964:	b118      	cbz	r0, 801d96e <_txe_event_flags_get+0xe>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 801d966:	4d10      	ldr	r5, [pc, #64]	; (801d9a8 <_txe_event_flags_get+0x48>)
 801d968:	6806      	ldr	r6, [r0, #0]
 801d96a:	42ae      	cmp	r6, r5
 801d96c:	d002      	beq.n	801d974 <_txe_event_flags_get+0x14>
        status =  TX_GROUP_ERROR;
 801d96e:	2006      	movs	r0, #6
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 801d970:	bc70      	pop	{r4, r5, r6}
 801d972:	4770      	bx	lr
    else if (actual_flags_ptr == TX_NULL)
 801d974:	b143      	cbz	r3, 801d988 <_txe_event_flags_get+0x28>
        if (wait_option != TX_NO_WAIT)
 801d976:	b174      	cbz	r4, 801d996 <_txe_event_flags_get+0x36>
 801d978:	f3ef 8505 	mrs	r5, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801d97c:	4e0b      	ldr	r6, [pc, #44]	; (801d9ac <_txe_event_flags_get+0x4c>)
 801d97e:	6836      	ldr	r6, [r6, #0]
 801d980:	4335      	orrs	r5, r6
 801d982:	d003      	beq.n	801d98c <_txe_event_flags_get+0x2c>
                status =  TX_WAIT_ERROR;
 801d984:	2004      	movs	r0, #4
 801d986:	e7f3      	b.n	801d970 <_txe_event_flags_get+0x10>
        status =  TX_PTR_ERROR;
 801d988:	2003      	movs	r0, #3
 801d98a:	e7f1      	b.n	801d970 <_txe_event_flags_get+0x10>
                TX_THREAD_GET_CURRENT(current_thread)
 801d98c:	4e08      	ldr	r6, [pc, #32]	; (801d9b0 <_txe_event_flags_get+0x50>)
                if (current_thread == &_tx_timer_thread)
 801d98e:	4d09      	ldr	r5, [pc, #36]	; (801d9b4 <_txe_event_flags_get+0x54>)
 801d990:	6836      	ldr	r6, [r6, #0]
 801d992:	42ae      	cmp	r6, r5
 801d994:	d0f6      	beq.n	801d984 <_txe_event_flags_get+0x24>
        if (get_option > TX_AND_CLEAR)
 801d996:	2a03      	cmp	r2, #3
 801d998:	d803      	bhi.n	801d9a2 <_txe_event_flags_get+0x42>
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 801d99a:	9403      	str	r4, [sp, #12]
}
 801d99c:	bc70      	pop	{r4, r5, r6}
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 801d99e:	f7fe be51 	b.w	801c644 <_tx_event_flags_get>
            status =  TX_OPTION_ERROR;
 801d9a2:	2008      	movs	r0, #8
    return(status);
 801d9a4:	e7e4      	b.n	801d970 <_txe_event_flags_get+0x10>
 801d9a6:	bf00      	nop
 801d9a8:	4456444e 	.word	0x4456444e
 801d9ac:	200000ec 	.word	0x200000ec
 801d9b0:	20007a80 	.word	0x20007a80
 801d9b4:	20007b28 	.word	0x20007b28

0801d9b8 <_txe_event_flags_set>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 801d9b8:	b168      	cbz	r0, 801d9d6 <_txe_event_flags_set+0x1e>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 801d9ba:	4b09      	ldr	r3, [pc, #36]	; (801d9e0 <_txe_event_flags_set+0x28>)
{
 801d9bc:	b430      	push	{r4, r5}
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 801d9be:	6804      	ldr	r4, [r0, #0]
 801d9c0:	429c      	cmp	r4, r3
 801d9c2:	d105      	bne.n	801d9d0 <_txe_event_flags_set+0x18>

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
        {

            if (set_option != TX_OR)
 801d9c4:	f032 0302 	bics.w	r3, r2, #2
 801d9c8:	d107      	bne.n	801d9da <_txe_event_flags_set+0x22>
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
    }

    /* Return completion status.  */
    return(status);
}
 801d9ca:	bc30      	pop	{r4, r5}
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 801d9cc:	f7fe beac 	b.w	801c728 <_tx_event_flags_set>
        status =  TX_GROUP_ERROR;
 801d9d0:	2006      	movs	r0, #6
}
 801d9d2:	bc30      	pop	{r4, r5}
 801d9d4:	4770      	bx	lr
        status =  TX_GROUP_ERROR;
 801d9d6:	2006      	movs	r0, #6
}
 801d9d8:	4770      	bx	lr
                status =  TX_OPTION_ERROR;
 801d9da:	2008      	movs	r0, #8
}
 801d9dc:	bc30      	pop	{r4, r5}
 801d9de:	4770      	bx	lr
 801d9e0:	4456444e 	.word	0x4456444e

0801d9e4 <_txe_mutex_create>:
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 801d9e4:	b108      	cbz	r0, 801d9ea <_txe_mutex_create+0x6>
 801d9e6:	2b34      	cmp	r3, #52	; 0x34
 801d9e8:	d001      	beq.n	801d9ee <_txe_mutex_create+0xa>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801d9ea:	201c      	movs	r0, #28
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
    }

    /* Return completion status.  */
    return(status);
}
 801d9ec:	4770      	bx	lr
{
 801d9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d9f2:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d9f6:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 801d9f8:	4f29      	ldr	r7, [pc, #164]	; (801daa0 <_txe_mutex_create+0xbc>)
 801d9fa:	683b      	ldr	r3, [r7, #0]
 801d9fc:	3301      	adds	r3, #1
 801d9fe:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801da00:	f384 8810 	msr	PRIMASK, r4
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801da04:	4c27      	ldr	r4, [pc, #156]	; (801daa4 <_txe_mutex_create+0xc0>)
        next_mutex =   _tx_mutex_created_ptr;
 801da06:	4b28      	ldr	r3, [pc, #160]	; (801daa8 <_txe_mutex_create+0xc4>)
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801da08:	6825      	ldr	r5, [r4, #0]
        next_mutex =   _tx_mutex_created_ptr;
 801da0a:	681c      	ldr	r4, [r3, #0]
            if (mutex_ptr == next_mutex)
 801da0c:	b15d      	cbz	r5, 801da26 <_txe_mutex_create+0x42>
 801da0e:	1b03      	subs	r3, r0, r4
 801da10:	fab3 f383 	clz	r3, r3
 801da14:	095b      	lsrs	r3, r3, #5
 801da16:	b113      	cbz	r3, 801da1e <_txe_mutex_create+0x3a>
 801da18:	e005      	b.n	801da26 <_txe_mutex_create+0x42>
 801da1a:	42ab      	cmp	r3, r5
 801da1c:	d203      	bcs.n	801da26 <_txe_mutex_create+0x42>
                next_mutex =  next_mutex -> tx_mutex_created_next;
 801da1e:	6a24      	ldr	r4, [r4, #32]
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801da20:	3301      	adds	r3, #1
            if (mutex_ptr == next_mutex)
 801da22:	42a0      	cmp	r0, r4
 801da24:	d1f9      	bne.n	801da1a <_txe_mutex_create+0x36>
 801da26:	4605      	mov	r5, r0
 801da28:	4616      	mov	r6, r2
 801da2a:	4688      	mov	r8, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801da2c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801da30:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 801da32:	683b      	ldr	r3, [r7, #0]
 801da34:	3b01      	subs	r3, #1
 801da36:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801da38:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 801da3c:	f7ff fc1a 	bl	801d274 <_tx_thread_system_preempt_check>
        if (mutex_ptr == next_mutex)
 801da40:	42a5      	cmp	r5, r4
 801da42:	d015      	beq.n	801da70 <_txe_mutex_create+0x8c>
                if (inherit != TX_NO_INHERIT)
 801da44:	2e01      	cmp	r6, #1
 801da46:	d81d      	bhi.n	801da84 <_txe_mutex_create+0xa0>
        TX_THREAD_GET_CURRENT(thread_ptr)
 801da48:	4a18      	ldr	r2, [pc, #96]	; (801daac <_txe_mutex_create+0xc8>)
        if (thread_ptr == &_tx_timer_thread)
 801da4a:	4b19      	ldr	r3, [pc, #100]	; (801dab0 <_txe_mutex_create+0xcc>)
 801da4c:	6812      	ldr	r2, [r2, #0]
 801da4e:	429a      	cmp	r2, r3
 801da50:	d01a      	beq.n	801da88 <_txe_mutex_create+0xa4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801da52:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801da56:	4b17      	ldr	r3, [pc, #92]	; (801dab4 <_txe_mutex_create+0xd0>)
 801da58:	681a      	ldr	r2, [r3, #0]
 801da5a:	430a      	orrs	r2, r1
 801da5c:	d00b      	beq.n	801da76 <_txe_mutex_create+0x92>
 801da5e:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	4313      	orrs	r3, r2
 801da66:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801da6a:	d204      	bcs.n	801da76 <_txe_mutex_create+0x92>
            status =  TX_CALLER_ERROR;
 801da6c:	2013      	movs	r0, #19
    return(status);
 801da6e:	e000      	b.n	801da72 <_txe_mutex_create+0x8e>
        status =  TX_MUTEX_ERROR;
 801da70:	201c      	movs	r0, #28
}
 801da72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 801da76:	4632      	mov	r2, r6
 801da78:	4641      	mov	r1, r8
 801da7a:	4628      	mov	r0, r5
}
 801da7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 801da80:	f7ff b80a 	b.w	801ca98 <_tx_mutex_create>
                    status =  TX_INHERIT_ERROR;
 801da84:	201f      	movs	r0, #31
 801da86:	e7f4      	b.n	801da72 <_txe_mutex_create+0x8e>
 801da88:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801da8c:	4b09      	ldr	r3, [pc, #36]	; (801dab4 <_txe_mutex_create+0xd0>)
 801da8e:	681a      	ldr	r2, [r3, #0]
 801da90:	430a      	orrs	r2, r1
 801da92:	d0eb      	beq.n	801da6c <_txe_mutex_create+0x88>
 801da94:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
 801da98:	2013      	movs	r0, #19
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	e7e9      	b.n	801da72 <_txe_mutex_create+0x8e>
 801da9e:	bf00      	nop
 801daa0:	20007a7c 	.word	0x20007a7c
 801daa4:	200079b4 	.word	0x200079b4
 801daa8:	200079b8 	.word	0x200079b8
 801daac:	20007a80 	.word	0x20007a80
 801dab0:	20007b28 	.word	0x20007b28
 801dab4:	200000ec 	.word	0x200000ec

0801dab8 <_txe_mutex_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif
    
    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801dab8:	b180      	cbz	r0, 801dadc <_txe_mutex_delete+0x24>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801daba:	6802      	ldr	r2, [r0, #0]
 801dabc:	4b09      	ldr	r3, [pc, #36]	; (801dae4 <_txe_mutex_delete+0x2c>)
 801dabe:	429a      	cmp	r2, r3
 801dac0:	d10c      	bne.n	801dadc <_txe_mutex_delete+0x24>
 801dac2:	f3ef 8305 	mrs	r3, IPSR
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801dac6:	4a08      	ldr	r2, [pc, #32]	; (801dae8 <_txe_mutex_delete+0x30>)
 801dac8:	6812      	ldr	r2, [r2, #0]
 801daca:	4313      	orrs	r3, r2
 801dacc:	d108      	bne.n	801dae0 <_txe_mutex_delete+0x28>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801dace:	4a07      	ldr	r2, [pc, #28]	; (801daec <_txe_mutex_delete+0x34>)

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 801dad0:	4b07      	ldr	r3, [pc, #28]	; (801daf0 <_txe_mutex_delete+0x38>)
 801dad2:	6812      	ldr	r2, [r2, #0]
 801dad4:	429a      	cmp	r2, r3
 801dad6:	d003      	beq.n	801dae0 <_txe_mutex_delete+0x28>
        if (status == TX_SUCCESS)
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 801dad8:	f000 baca 	b.w	801e070 <_tx_mutex_delete>
        status =  TX_MUTEX_ERROR;
 801dadc:	201c      	movs	r0, #28
 801dade:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 801dae0:	2013      	movs	r0, #19
#endif
    }

    /* Return completion status.  */
    return(status);
}
 801dae2:	4770      	bx	lr
 801dae4:	4d555445 	.word	0x4d555445
 801dae8:	200000ec 	.word	0x200000ec
 801daec:	20007a80 	.word	0x20007a80
 801daf0:	20007b28 	.word	0x20007b28

0801daf4 <_txe_mutex_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801daf4:	b118      	cbz	r0, 801dafe <_txe_mutex_get+0xa>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801daf6:	4b15      	ldr	r3, [pc, #84]	; (801db4c <_txe_mutex_get+0x58>)
 801daf8:	6802      	ldr	r2, [r0, #0]
 801dafa:	429a      	cmp	r2, r3
 801dafc:	d001      	beq.n	801db02 <_txe_mutex_get+0xe>
        status =  TX_MUTEX_ERROR;
 801dafe:	201c      	movs	r0, #28
        status =  _tx_mutex_get(mutex_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 801db00:	4770      	bx	lr
{
 801db02:	b410      	push	{r4}
        if (wait_option != TX_NO_WAIT)
 801db04:	b981      	cbnz	r1, 801db28 <_txe_mutex_get+0x34>
 801db06:	4b12      	ldr	r3, [pc, #72]	; (801db50 <_txe_mutex_get+0x5c>)
 801db08:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801db0c:	681c      	ldr	r4, [r3, #0]
 801db0e:	4322      	orrs	r2, r4
 801db10:	d006      	beq.n	801db20 <_txe_mutex_get+0x2c>
 801db12:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	4313      	orrs	r3, r2
 801db1a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801db1e:	d312      	bcc.n	801db46 <_txe_mutex_get+0x52>
}
 801db20:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 801db24:	f7fe bfe8 	b.w	801caf8 <_tx_mutex_get>
 801db28:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801db2c:	4b08      	ldr	r3, [pc, #32]	; (801db50 <_txe_mutex_get+0x5c>)
 801db2e:	681c      	ldr	r4, [r3, #0]
 801db30:	4322      	orrs	r2, r4
 801db32:	d104      	bne.n	801db3e <_txe_mutex_get+0x4a>
                TX_THREAD_GET_CURRENT(current_thread)
 801db34:	4c07      	ldr	r4, [pc, #28]	; (801db54 <_txe_mutex_get+0x60>)
                if (current_thread == &_tx_timer_thread)
 801db36:	4a08      	ldr	r2, [pc, #32]	; (801db58 <_txe_mutex_get+0x64>)
 801db38:	6824      	ldr	r4, [r4, #0]
 801db3a:	4294      	cmp	r4, r2
 801db3c:	d1e4      	bne.n	801db08 <_txe_mutex_get+0x14>
                status =  TX_WAIT_ERROR;
 801db3e:	2004      	movs	r0, #4
}
 801db40:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db44:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 801db46:	2013      	movs	r0, #19
    return(status);
 801db48:	e7fa      	b.n	801db40 <_txe_mutex_get+0x4c>
 801db4a:	bf00      	nop
 801db4c:	4d555445 	.word	0x4d555445
 801db50:	200000ec 	.word	0x200000ec
 801db54:	20007a80 	.word	0x20007a80
 801db58:	20007b28 	.word	0x20007b28

0801db5c <_txe_mutex_put>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801db5c:	b190      	cbz	r0, 801db84 <_txe_mutex_put+0x28>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801db5e:	4b0b      	ldr	r3, [pc, #44]	; (801db8c <_txe_mutex_put+0x30>)
 801db60:	6802      	ldr	r2, [r0, #0]
 801db62:	429a      	cmp	r2, r3
 801db64:	d10e      	bne.n	801db84 <_txe_mutex_put+0x28>
 801db66:	f3ef 8305 	mrs	r3, IPSR
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801db6a:	4a09      	ldr	r2, [pc, #36]	; (801db90 <_txe_mutex_put+0x34>)
 801db6c:	6811      	ldr	r1, [r2, #0]
 801db6e:	430b      	orrs	r3, r1
 801db70:	d006      	beq.n	801db80 <_txe_mutex_put+0x24>
 801db72:	f3ef 8105 	mrs	r1, IPSR
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801db76:	6813      	ldr	r3, [r2, #0]
 801db78:	430b      	orrs	r3, r1
 801db7a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801db7e:	d303      	bcc.n	801db88 <_txe_mutex_put+0x2c>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 801db80:	f7ff b8a4 	b.w	801cccc <_tx_mutex_put>
        status =  TX_MUTEX_ERROR;
 801db84:	201c      	movs	r0, #28
 801db86:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 801db88:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 801db8a:	4770      	bx	lr
 801db8c:	4d555445 	.word	0x4d555445
 801db90:	200000ec 	.word	0x200000ec

0801db94 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 801db94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db98:	b085      	sub	sp, #20
 801db9a:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
 801db9e:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 801dba2:	9401      	str	r4, [sp, #4]
 801dba4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dba6:	9403      	str	r4, [sp, #12]
 801dba8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dbaa:	9402      	str	r4, [sp, #8]
 801dbac:	9c14      	ldr	r4, [sp, #80]	; 0x50
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801dbae:	2800      	cmp	r0, #0
 801dbb0:	d079      	beq.n	801dca6 <_txe_thread_create+0x112>
 801dbb2:	2cc8      	cmp	r4, #200	; 0xc8
 801dbb4:	d177      	bne.n	801dca6 <_txe_thread_create+0x112>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801dbb6:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801dbba:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801dbbc:	f8df e140 	ldr.w	lr, [pc, #320]	; 801dd00 <_txe_thread_create+0x16c>
 801dbc0:	f8de 4000 	ldr.w	r4, [lr]
 801dbc4:	3401      	adds	r4, #1
 801dbc6:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801dbca:	f385 8810 	msr	PRIMASK, r5
        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
        next_thread =  _tx_thread_created_ptr;
 801dbce:	4c47      	ldr	r4, [pc, #284]	; (801dcec <_txe_thread_create+0x158>)
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801dbd0:	f108 3cff 	add.w	ip, r8, #4294967295
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801dbd4:	4d46      	ldr	r5, [pc, #280]	; (801dcf0 <_txe_thread_create+0x15c>)
        next_thread =  _tx_thread_created_ptr;
 801dbd6:	6824      	ldr	r4, [r4, #0]
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801dbd8:	44bc      	add	ip, r7
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801dbda:	f8d5 b000 	ldr.w	fp, [r5]
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801dbde:	1b05      	subs	r5, r0, r4
 801dbe0:	fab5 f585 	clz	r5, r5
 801dbe4:	096d      	lsrs	r5, r5, #5
 801dbe6:	f1bb 0f00 	cmp.w	fp, #0
 801dbea:	bf08      	it	eq
 801dbec:	2501      	moveq	r5, #1
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801dbee:	b985      	cbnz	r5, 801dc12 <_txe_thread_create+0x7e>
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801dbf0:	469a      	mov	sl, r3
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801dbf2:	68e6      	ldr	r6, [r4, #12]
 801dbf4:	42be      	cmp	r6, r7
 801dbf6:	d865      	bhi.n	801dcc4 <_txe_thread_create+0x130>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801dbf8:	6923      	ldr	r3, [r4, #16]
 801dbfa:	42bb      	cmp	r3, r7
 801dbfc:	d962      	bls.n	801dcc4 <_txe_thread_create+0x130>
                    break_flag =  TX_TRUE;
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 801dbfe:	4566      	cmp	r6, ip
 801dc00:	d803      	bhi.n	801dc0a <_txe_thread_create+0x76>
 801dc02:	2601      	movs	r6, #1
                    stack_start =  TX_NULL;
 801dc04:	2700      	movs	r7, #0
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801dc06:	4563      	cmp	r3, ip
 801dc08:	d951      	bls.n	801dcae <_txe_thread_create+0x11a>
 801dc0a:	4653      	mov	r3, sl
                    break_flag =  TX_TRUE;
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801dc0c:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
                    stack_start =  TX_NULL;
 801dc10:	2700      	movs	r7, #0
 801dc12:	4605      	mov	r5, r0
 801dc14:	469a      	mov	sl, r3
 801dc16:	4616      	mov	r6, r2
 801dc18:	468b      	mov	fp, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801dc1a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801dc1e:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801dc20:	f8de 3000 	ldr.w	r3, [lr]
 801dc24:	3b01      	subs	r3, #1
 801dc26:	f8ce 3000 	str.w	r3, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801dc2a:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801dc2e:	f7ff fb21 	bl	801d274 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801dc32:	42a5      	cmp	r5, r4
 801dc34:	d037      	beq.n	801dca6 <_txe_thread_create+0x112>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 801dc36:	2e00      	cmp	r6, #0
 801dc38:	d04c      	beq.n	801dcd4 <_txe_thread_create+0x140>
 801dc3a:	2f00      	cmp	r7, #0
 801dc3c:	d04a      	beq.n	801dcd4 <_txe_thread_create+0x140>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801dc3e:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
 801dc42:	d945      	bls.n	801dcd0 <_txe_thread_create+0x13c>
            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 801dc44:	f1b9 0f1f 	cmp.w	r9, #31
 801dc48:	d848      	bhi.n	801dcdc <_txe_thread_create+0x148>
            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 801dc4a:	9b01      	ldr	r3, [sp, #4]
 801dc4c:	4599      	cmp	r9, r3
 801dc4e:	d34b      	bcc.n	801dce8 <_txe_thread_create+0x154>
            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 801dc50:	9b02      	ldr	r3, [sp, #8]
 801dc52:	2b01      	cmp	r3, #1
 801dc54:	d844      	bhi.n	801dce0 <_txe_thread_create+0x14c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801dc56:	4a27      	ldr	r2, [pc, #156]	; (801dcf4 <_txe_thread_create+0x160>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 801dc58:	4b27      	ldr	r3, [pc, #156]	; (801dcf8 <_txe_thread_create+0x164>)
 801dc5a:	6810      	ldr	r0, [r2, #0]
    status =  TX_SUCCESS;
 801dc5c:	4298      	cmp	r0, r3
 801dc5e:	bf0c      	ite	eq
 801dc60:	2013      	moveq	r0, #19
 801dc62:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801dc64:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801dc68:	4b24      	ldr	r3, [pc, #144]	; (801dcfc <_txe_thread_create+0x168>)
 801dc6a:	6819      	ldr	r1, [r3, #0]
 801dc6c:	430a      	orrs	r2, r1
 801dc6e:	d006      	beq.n	801dc7e <_txe_thread_create+0xea>
 801dc70:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	4313      	orrs	r3, r2
 801dc78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801dc7c:	d332      	bcc.n	801dce4 <_txe_thread_create+0x150>
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801dc7e:	b998      	cbnz	r0, 801dca8 <_txe_thread_create+0x114>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801dc80:	9b02      	ldr	r3, [sp, #8]
 801dc82:	4628      	mov	r0, r5
 801dc84:	9a03      	ldr	r2, [sp, #12]
 801dc86:	9901      	ldr	r1, [sp, #4]
 801dc88:	9313      	str	r3, [sp, #76]	; 0x4c
 801dc8a:	4653      	mov	r3, sl
 801dc8c:	9212      	str	r2, [sp, #72]	; 0x48
 801dc8e:	4632      	mov	r2, r6
 801dc90:	9111      	str	r1, [sp, #68]	; 0x44
 801dc92:	4659      	mov	r1, fp
 801dc94:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801dc98:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
}
 801dc9c:	b005      	add	sp, #20
 801dc9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801dca2:	f7ff b91d 	b.w	801cee0 <_tx_thread_create>
        status =  TX_THREAD_ERROR;
 801dca6:	200e      	movs	r0, #14
}
 801dca8:	b005      	add	sp, #20
 801dcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            next_thread =  next_thread -> tx_thread_created_next;
 801dcae:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801dcb2:	3501      	adds	r5, #1
            if (break_flag == TX_TRUE)
 801dcb4:	42a0      	cmp	r0, r4
 801dcb6:	bf18      	it	ne
 801dcb8:	455d      	cmpne	r5, fp
 801dcba:	d201      	bcs.n	801dcc0 <_txe_thread_create+0x12c>
 801dcbc:	2e00      	cmp	r6, #0
 801dcbe:	d098      	beq.n	801dbf2 <_txe_thread_create+0x5e>
 801dcc0:	4653      	mov	r3, sl
 801dcc2:	e7a6      	b.n	801dc12 <_txe_thread_create+0x7e>
            if (stack_end >= next_thread -> tx_thread_stack_start)
 801dcc4:	4566      	cmp	r6, ip
 801dcc6:	f04f 0600 	mov.w	r6, #0
 801dcca:	d8f0      	bhi.n	801dcae <_txe_thread_create+0x11a>
 801dccc:	6923      	ldr	r3, [r4, #16]
 801dcce:	e79a      	b.n	801dc06 <_txe_thread_create+0x72>
            status =  TX_SIZE_ERROR;
 801dcd0:	2005      	movs	r0, #5
 801dcd2:	e7e9      	b.n	801dca8 <_txe_thread_create+0x114>
            status =  TX_PTR_ERROR;
 801dcd4:	2003      	movs	r0, #3
}
 801dcd6:	b005      	add	sp, #20
 801dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            status =  TX_PRIORITY_ERROR;
 801dcdc:	200f      	movs	r0, #15
 801dcde:	e7e3      	b.n	801dca8 <_txe_thread_create+0x114>
            status =  TX_START_ERROR;
 801dce0:	2010      	movs	r0, #16
 801dce2:	e7e1      	b.n	801dca8 <_txe_thread_create+0x114>
                    status =  TX_CALLER_ERROR;
 801dce4:	2013      	movs	r0, #19
    return(status);
 801dce6:	e7df      	b.n	801dca8 <_txe_thread_create+0x114>
            status =  TX_THRESH_ERROR;
 801dce8:	2018      	movs	r0, #24
 801dcea:	e7dd      	b.n	801dca8 <_txe_thread_create+0x114>
 801dcec:	20007a6c 	.word	0x20007a6c
 801dcf0:	20007a74 	.word	0x20007a74
 801dcf4:	20007a80 	.word	0x20007a80
 801dcf8:	20007b28 	.word	0x20007b28
 801dcfc:	200000ec 	.word	0x200000ec
 801dd00:	20007a7c 	.word	0x20007a7c

0801dd04 <_txe_thread_delete>:
 801dd04:	f3ef 8205 	mrs	r2, IPSR

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801dd08:	4907      	ldr	r1, [pc, #28]	; (801dd28 <_txe_thread_delete+0x24>)
 801dd0a:	6809      	ldr	r1, [r1, #0]
 801dd0c:	430a      	orrs	r2, r1
 801dd0e:	d108      	bne.n	801dd22 <_txe_thread_delete+0x1e>
        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 801dd10:	b118      	cbz	r0, 801dd1a <_txe_thread_delete+0x16>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801dd12:	6802      	ldr	r2, [r0, #0]
 801dd14:	4b05      	ldr	r3, [pc, #20]	; (801dd2c <_txe_thread_delete+0x28>)
 801dd16:	429a      	cmp	r2, r3
 801dd18:	d001      	beq.n	801dd1e <_txe_thread_delete+0x1a>
        status =  TX_THREAD_ERROR;
 801dd1a:	200e      	movs	r0, #14
        status =  _tx_thread_delete(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 801dd1c:	4770      	bx	lr
        status =  _tx_thread_delete(thread_ptr);
 801dd1e:	f000 ba53 	b.w	801e1c8 <_tx_thread_delete>
        status =  TX_CALLER_ERROR;
 801dd22:	2013      	movs	r0, #19
 801dd24:	4770      	bx	lr
 801dd26:	bf00      	nop
 801dd28:	200000ec 	.word	0x200000ec
 801dd2c:	54485244 	.word	0x54485244

0801dd30 <_txe_thread_preemption_change>:

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801dd30:	b1c0      	cbz	r0, 801dd64 <_txe_thread_preemption_change+0x34>
{
 801dd32:	b4f0      	push	{r4, r5, r6, r7}
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801dd34:	4c0f      	ldr	r4, [pc, #60]	; (801dd74 <_txe_thread_preemption_change+0x44>)
 801dd36:	6805      	ldr	r5, [r0, #0]
 801dd38:	42a5      	cmp	r5, r4
 801dd3a:	d10d      	bne.n	801dd58 <_txe_thread_preemption_change+0x28>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Check for a valid old threshold pointer.  */
    else if (old_threshold == TX_NULL)
 801dd3c:	b1ba      	cbz	r2, 801dd6e <_txe_thread_preemption_change+0x3e>
 801dd3e:	f3ef 8405 	mrs	r4, IPSR
        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801dd42:	4d0d      	ldr	r5, [pc, #52]	; (801dd78 <_txe_thread_preemption_change+0x48>)
 801dd44:	682d      	ldr	r5, [r5, #0]
 801dd46:	432c      	orrs	r4, r5
 801dd48:	d10e      	bne.n	801dd68 <_txe_thread_preemption_change+0x38>
        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
    }

    /* Determine if the preemption-threshold is valid.  */
    else if (new_threshold > thread_ptr -> tx_thread_user_priority)
 801dd4a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 801dd4e:	428b      	cmp	r3, r1
 801dd50:	d305      	bcc.n	801dd5e <_txe_thread_preemption_change+0x2e>
        status =  _tx_thread_preemption_change(thread_ptr, new_threshold, old_threshold);
    }

    /* Return completion status.  */
    return(status);
}
 801dd52:	bcf0      	pop	{r4, r5, r6, r7}
        status =  _tx_thread_preemption_change(thread_ptr, new_threshold, old_threshold);
 801dd54:	f7ff b9ce 	b.w	801d0f4 <_tx_thread_preemption_change>
        status =  TX_THREAD_ERROR;
 801dd58:	200e      	movs	r0, #14
}
 801dd5a:	bcf0      	pop	{r4, r5, r6, r7}
 801dd5c:	4770      	bx	lr
        status =  TX_THRESH_ERROR;
 801dd5e:	2018      	movs	r0, #24
}
 801dd60:	bcf0      	pop	{r4, r5, r6, r7}
 801dd62:	4770      	bx	lr
        status =  TX_THREAD_ERROR;
 801dd64:	200e      	movs	r0, #14
}
 801dd66:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 801dd68:	2013      	movs	r0, #19
}
 801dd6a:	bcf0      	pop	{r4, r5, r6, r7}
 801dd6c:	4770      	bx	lr
        status =  TX_PTR_ERROR;
 801dd6e:	2003      	movs	r0, #3
 801dd70:	e7f3      	b.n	801dd5a <_txe_thread_preemption_change+0x2a>
 801dd72:	bf00      	nop
 801dd74:	54485244 	.word	0x54485244
 801dd78:	200000ec 	.word	0x200000ec

0801dd7c <_txe_thread_resume>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801dd7c:	b118      	cbz	r0, 801dd86 <_txe_thread_resume+0xa>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801dd7e:	6802      	ldr	r2, [r0, #0]
 801dd80:	4b03      	ldr	r3, [pc, #12]	; (801dd90 <_txe_thread_resume+0x14>)
 801dd82:	429a      	cmp	r2, r3
 801dd84:	d001      	beq.n	801dd8a <_txe_thread_resume+0xe>
        status =  _tx_thread_resume(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 801dd86:	200e      	movs	r0, #14
 801dd88:	4770      	bx	lr
        status =  _tx_thread_resume(thread_ptr);
 801dd8a:	f000 ba4b 	b.w	801e224 <_tx_thread_resume>
 801dd8e:	bf00      	nop
 801dd90:	54485244 	.word	0x54485244

0801dd94 <_txe_thread_suspend>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801dd94:	b118      	cbz	r0, 801dd9e <_txe_thread_suspend+0xa>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801dd96:	6802      	ldr	r2, [r0, #0]
 801dd98:	4b03      	ldr	r3, [pc, #12]	; (801dda8 <_txe_thread_suspend+0x14>)
 801dd9a:	429a      	cmp	r2, r3
 801dd9c:	d001      	beq.n	801dda2 <_txe_thread_suspend+0xe>
        status =  _tx_thread_suspend(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 801dd9e:	200e      	movs	r0, #14
 801dda0:	4770      	bx	lr
        status =  _tx_thread_suspend(thread_ptr);
 801dda2:	f000 ba81 	b.w	801e2a8 <_tx_thread_suspend>
 801dda6:	bf00      	nop
 801dda8:	54485244 	.word	0x54485244

0801ddac <_txe_thread_terminate>:

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801ddac:	b158      	cbz	r0, 801ddc6 <_txe_thread_terminate+0x1a>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801ddae:	6802      	ldr	r2, [r0, #0]
 801ddb0:	4b07      	ldr	r3, [pc, #28]	; (801ddd0 <_txe_thread_terminate+0x24>)
 801ddb2:	429a      	cmp	r2, r3
 801ddb4:	d107      	bne.n	801ddc6 <_txe_thread_terminate+0x1a>
 801ddb6:	f3ef 8305 	mrs	r3, IPSR
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801ddba:	4a06      	ldr	r2, [pc, #24]	; (801ddd4 <_txe_thread_terminate+0x28>)
 801ddbc:	6812      	ldr	r2, [r2, #0]
 801ddbe:	4313      	orrs	r3, r2
 801ddc0:	d103      	bne.n	801ddca <_txe_thread_terminate+0x1e>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 801ddc2:	f000 baad 	b.w	801e320 <_tx_thread_terminate>
        status =  TX_THREAD_ERROR;
 801ddc6:	200e      	movs	r0, #14
 801ddc8:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 801ddca:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 801ddcc:	4770      	bx	lr
 801ddce:	bf00      	nop
 801ddd0:	54485244 	.word	0x54485244
 801ddd4:	200000ec 	.word	0x200000ec

0801ddd8 <_txe_timer_activate>:

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 801ddd8:	b118      	cbz	r0, 801dde2 <_txe_timer_activate+0xa>
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 801ddda:	6802      	ldr	r2, [r0, #0]
 801dddc:	4b03      	ldr	r3, [pc, #12]	; (801ddec <_txe_timer_activate+0x14>)
 801ddde:	429a      	cmp	r2, r3
 801dde0:	d001      	beq.n	801dde6 <_txe_timer_activate+0xe>
        status =  _tx_timer_activate(timer_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 801dde2:	2015      	movs	r0, #21
 801dde4:	4770      	bx	lr
        status =  _tx_timer_activate(timer_ptr);
 801dde6:	f000 bb35 	b.w	801e454 <_tx_timer_activate>
 801ddea:	bf00      	nop
 801ddec:	4154494d 	.word	0x4154494d

0801ddf0 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 801ddf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddf4:	b081      	sub	sp, #4
 801ddf6:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ddfa:	e9dd 840c 	ldrd	r8, r4, [sp, #48]	; 0x30
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
    }
    
    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 801ddfe:	b108      	cbz	r0, 801de04 <_txe_timer_create+0x14>
 801de00:	2c2c      	cmp	r4, #44	; 0x2c
 801de02:	d003      	beq.n	801de0c <_txe_timer_create+0x1c>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801de04:	2015      	movs	r0, #21
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
}
 801de06:	b001      	add	sp, #4
 801de08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801de0c:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801de10:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 801de12:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 801dee8 <_txe_timer_create+0xf8>
 801de16:	f8de 4000 	ldr.w	r4, [lr]
 801de1a:	3401      	adds	r4, #1
 801de1c:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801de20:	f385 8810 	msr	PRIMASK, r5
        next_timer =  _tx_timer_created_ptr;
 801de24:	4d2b      	ldr	r5, [pc, #172]	; (801ded4 <_txe_timer_create+0xe4>)
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 801de26:	4c2c      	ldr	r4, [pc, #176]	; (801ded8 <_txe_timer_create+0xe8>)
        next_timer =  _tx_timer_created_ptr;
 801de28:	682d      	ldr	r5, [r5, #0]
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 801de2a:	f8d4 c000 	ldr.w	ip, [r4]
            if (timer_ptr == next_timer)
 801de2e:	42a8      	cmp	r0, r5
 801de30:	d00a      	beq.n	801de48 <_txe_timer_create+0x58>
 801de32:	fabc f48c 	clz	r4, ip
 801de36:	0964      	lsrs	r4, r4, #5
 801de38:	b114      	cbz	r4, 801de40 <_txe_timer_create+0x50>
 801de3a:	e005      	b.n	801de48 <_txe_timer_create+0x58>
 801de3c:	4564      	cmp	r4, ip
 801de3e:	d203      	bcs.n	801de48 <_txe_timer_create+0x58>
                next_timer =  next_timer -> tx_timer_created_next;
 801de40:	6a6d      	ldr	r5, [r5, #36]	; 0x24
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 801de42:	3401      	adds	r4, #1
            if (timer_ptr == next_timer)
 801de44:	42a8      	cmp	r0, r5
 801de46:	d1f9      	bne.n	801de3c <_txe_timer_create+0x4c>
 801de48:	4604      	mov	r4, r0
 801de4a:	469b      	mov	fp, r3
 801de4c:	4692      	mov	sl, r2
 801de4e:	4689      	mov	r9, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801de50:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801de54:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 801de56:	f8de 0000 	ldr.w	r0, [lr]
 801de5a:	3801      	subs	r0, #1
 801de5c:	f8ce 0000 	str.w	r0, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801de60:	f383 8810 	msr	PRIMASK, r3
        _tx_thread_system_preempt_check();
 801de64:	f7ff fa06 	bl	801d274 <_tx_thread_system_preempt_check>
        if (timer_ptr == next_timer)
 801de68:	42ac      	cmp	r4, r5
 801de6a:	d0cb      	beq.n	801de04 <_txe_timer_create+0x14>
        else if (initial_ticks == ((ULONG) 0))
 801de6c:	b30e      	cbz	r6, 801deb2 <_txe_timer_create+0xc2>
                if (auto_activate != TX_NO_ACTIVATE)
 801de6e:	f1b8 0f01 	cmp.w	r8, #1
 801de72:	d82b      	bhi.n	801decc <_txe_timer_create+0xdc>
        TX_THREAD_GET_CURRENT(thread_ptr)
 801de74:	4a19      	ldr	r2, [pc, #100]	; (801dedc <_txe_timer_create+0xec>)
        if (thread_ptr == &_tx_timer_thread)
 801de76:	4b1a      	ldr	r3, [pc, #104]	; (801dee0 <_txe_timer_create+0xf0>)
 801de78:	6812      	ldr	r2, [r2, #0]
 801de7a:	429a      	cmp	r2, r3
 801de7c:	d01b      	beq.n	801deb6 <_txe_timer_create+0xc6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801de7e:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801de82:	4b18      	ldr	r3, [pc, #96]	; (801dee4 <_txe_timer_create+0xf4>)
 801de84:	681a      	ldr	r2, [r3, #0]
 801de86:	430a      	orrs	r2, r1
 801de88:	d006      	beq.n	801de98 <_txe_timer_create+0xa8>
 801de8a:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801de8e:	681b      	ldr	r3, [r3, #0]
 801de90:	4313      	orrs	r3, r2
 801de92:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801de96:	d31b      	bcc.n	801ded0 <_txe_timer_create+0xe0>
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 801de98:	465b      	mov	r3, fp
 801de9a:	4652      	mov	r2, sl
 801de9c:	4649      	mov	r1, r9
 801de9e:	4620      	mov	r0, r4
 801dea0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801dea4:	970b      	str	r7, [sp, #44]	; 0x2c
 801dea6:	960a      	str	r6, [sp, #40]	; 0x28
}
 801dea8:	b001      	add	sp, #4
 801deaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 801deae:	f7ff bb73 	b.w	801d598 <_tx_timer_create>
            status =  TX_TICK_ERROR;
 801deb2:	2016      	movs	r0, #22
 801deb4:	e7a7      	b.n	801de06 <_txe_timer_create+0x16>
 801deb6:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801deba:	4b0a      	ldr	r3, [pc, #40]	; (801dee4 <_txe_timer_create+0xf4>)
 801debc:	681a      	ldr	r2, [r3, #0]
 801debe:	430a      	orrs	r2, r1
 801dec0:	d006      	beq.n	801ded0 <_txe_timer_create+0xe0>
 801dec2:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
 801dec6:	2013      	movs	r0, #19
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	e79c      	b.n	801de06 <_txe_timer_create+0x16>
                    status =  TX_ACTIVATE_ERROR;
 801decc:	2017      	movs	r0, #23
 801dece:	e79a      	b.n	801de06 <_txe_timer_create+0x16>
            status =  TX_CALLER_ERROR;
 801ded0:	2013      	movs	r0, #19
    return(status);
 801ded2:	e798      	b.n	801de06 <_txe_timer_create+0x16>
 801ded4:	20007bf8 	.word	0x20007bf8
 801ded8:	20008004 	.word	0x20008004
 801dedc:	20007a80 	.word	0x20007a80
 801dee0:	20007b28 	.word	0x20007b28
 801dee4:	200000ec 	.word	0x200000ec
 801dee8:	20007a7c 	.word	0x20007a7c

0801deec <_txe_timer_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif
    
    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 801deec:	b180      	cbz	r0, 801df10 <_txe_timer_delete+0x24>
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 801deee:	6802      	ldr	r2, [r0, #0]
 801def0:	4b09      	ldr	r3, [pc, #36]	; (801df18 <_txe_timer_delete+0x2c>)
 801def2:	429a      	cmp	r2, r3
 801def4:	d10c      	bne.n	801df10 <_txe_timer_delete+0x24>
 801def6:	f3ef 8305 	mrs	r3, IPSR
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801defa:	4a08      	ldr	r2, [pc, #32]	; (801df1c <_txe_timer_delete+0x30>)
 801defc:	6812      	ldr	r2, [r2, #0]
 801defe:	4313      	orrs	r3, r2
 801df00:	d108      	bne.n	801df14 <_txe_timer_delete+0x28>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801df02:	4a07      	ldr	r2, [pc, #28]	; (801df20 <_txe_timer_delete+0x34>)

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 801df04:	4b07      	ldr	r3, [pc, #28]	; (801df24 <_txe_timer_delete+0x38>)
 801df06:	6812      	ldr	r2, [r2, #0]
 801df08:	429a      	cmp	r2, r3
 801df0a:	d003      	beq.n	801df14 <_txe_timer_delete+0x28>
        if (status == TX_SUCCESS)
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 801df0c:	f000 bab6 	b.w	801e47c <_tx_timer_delete>
        status =  TX_TIMER_ERROR;
 801df10:	2015      	movs	r0, #21
 801df12:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 801df14:	2013      	movs	r0, #19
#endif
    }

    /* Return completion status.  */
    return(status);
}
 801df16:	4770      	bx	lr
 801df18:	4154494d 	.word	0x4154494d
 801df1c:	200000ec 	.word	0x200000ec
 801df20:	20007a80 	.word	0x20007a80
 801df24:	20007b28 	.word	0x20007b28

0801df28 <_tx_event_flags_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 801df28:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801df2a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801df2e:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 801df30:	4a1b      	ldr	r2, [pc, #108]	; (801dfa0 <_tx_event_flags_cleanup+0x78>)
 801df32:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801df34:	4294      	cmp	r4, r2
 801df36:	d002      	beq.n	801df3e <_tx_event_flags_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801df38:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801df3c:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801df3e:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 801df42:	428a      	cmp	r2, r1
 801df44:	d1f8      	bne.n	801df38 <_tx_event_flags_cleanup+0x10>
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801df46:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (group_ptr != TX_NULL)
 801df48:	2a00      	cmp	r2, #0
 801df4a:	d0f5      	beq.n	801df38 <_tx_event_flags_cleanup+0x10>
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 801df4c:	4915      	ldr	r1, [pc, #84]	; (801dfa4 <_tx_event_flags_cleanup+0x7c>)
 801df4e:	6814      	ldr	r4, [r2, #0]
 801df50:	428c      	cmp	r4, r1
 801df52:	d1f1      	bne.n	801df38 <_tx_event_flags_cleanup+0x10>
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801df54:	6951      	ldr	r1, [r2, #20]
 801df56:	2900      	cmp	r1, #0
 801df58:	d0ee      	beq.n	801df38 <_tx_event_flags_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801df5a:	2500      	movs	r5, #0
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 801df5c:	6914      	ldr	r4, [r2, #16]
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801df5e:	6685      	str	r5, [r0, #104]	; 0x68
                        if (suspension_head != TX_NULL)
 801df60:	b1dc      	cbz	r4, 801df9a <_tx_event_flags_cleanup+0x72>
                            suspended_count--;
 801df62:	3901      	subs	r1, #1
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 801df64:	6151      	str	r1, [r2, #20]
                            if (suspended_count == TX_NO_SUSPENSIONS)
 801df66:	b1b1      	cbz	r1, 801df96 <_tx_event_flags_cleanup+0x6e>
                                if (suspension_head == thread_ptr)
 801df68:	42a0      	cmp	r0, r4
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801df6a:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801df6e:	674d      	str	r5, [r1, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801df70:	6729      	str	r1, [r5, #112]	; 0x70
                                if (suspension_head == thread_ptr)
 801df72:	d010      	beq.n	801df96 <_tx_event_flags_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801df74:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801df76:	2a07      	cmp	r2, #7
 801df78:	d1de      	bne.n	801df38 <_tx_event_flags_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 801df7a:	490b      	ldr	r1, [pc, #44]	; (801dfa8 <_tx_event_flags_cleanup+0x80>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 801df7c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 801df80:	680a      	ldr	r2, [r1, #0]
 801df82:	3201      	adds	r2, #1
 801df84:	600a      	str	r2, [r1, #0]
 801df86:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 801df8a:	f7ff f991 	bl	801d2b0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801df8e:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801df92:	b672      	cpsid	i
 801df94:	e7d0      	b.n	801df38 <_tx_event_flags_cleanup+0x10>
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 801df96:	6111      	str	r1, [r2, #16]
 801df98:	e7ec      	b.n	801df74 <_tx_event_flags_cleanup+0x4c>
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801df9a:	2101      	movs	r1, #1
 801df9c:	60d1      	str	r1, [r2, #12]
 801df9e:	e7e9      	b.n	801df74 <_tx_event_flags_cleanup+0x4c>
 801dfa0:	0801df29 	.word	0x0801df29
 801dfa4:	4456444e 	.word	0x4456444e
 801dfa8:	20007a7c 	.word	0x20007a7c

0801dfac <_tx_mutex_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 801dfac:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801dfae:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801dfb2:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 801dfb4:	4a1a      	ldr	r2, [pc, #104]	; (801e020 <_tx_mutex_cleanup+0x74>)
 801dfb6:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801dfb8:	4294      	cmp	r4, r2
 801dfba:	d002      	beq.n	801dfc2 <_tx_mutex_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801dfbc:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801dfc0:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801dfc2:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 801dfc6:	428a      	cmp	r2, r1
 801dfc8:	d1f8      	bne.n	801dfbc <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801dfca:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (mutex_ptr != TX_NULL)
 801dfcc:	2a00      	cmp	r2, #0
 801dfce:	d0f5      	beq.n	801dfbc <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 801dfd0:	4914      	ldr	r1, [pc, #80]	; (801e024 <_tx_mutex_cleanup+0x78>)
 801dfd2:	6814      	ldr	r4, [r2, #0]
 801dfd4:	428c      	cmp	r4, r1
 801dfd6:	d1f1      	bne.n	801dfbc <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801dfd8:	69d1      	ldr	r1, [r2, #28]
 801dfda:	2900      	cmp	r1, #0
 801dfdc:	d0ee      	beq.n	801dfbc <_tx_mutex_cleanup+0x10>
                        mutex_ptr -> tx_mutex_suspended_count--;
 801dfde:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801dfe0:	2400      	movs	r4, #0
 801dfe2:	6684      	str	r4, [r0, #104]	; 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 801dfe4:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801dfe6:	b1c1      	cbz	r1, 801e01a <_tx_mutex_cleanup+0x6e>
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 801dfe8:	6995      	ldr	r5, [r2, #24]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801dfea:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 801dfee:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801dff0:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801dff2:	6721      	str	r1, [r4, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 801dff4:	d011      	beq.n	801e01a <_tx_mutex_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 801dff6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801dff8:	2a0d      	cmp	r2, #13
 801dffa:	d1df      	bne.n	801dfbc <_tx_mutex_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 801dffc:	490a      	ldr	r1, [pc, #40]	; (801e028 <_tx_mutex_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801dffe:	241d      	movs	r4, #29
                            _tx_thread_preempt_disable++;
 801e000:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801e002:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 801e006:	3201      	adds	r2, #1
 801e008:	600a      	str	r2, [r1, #0]
 801e00a:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 801e00e:	f7ff f94f 	bl	801d2b0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e012:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e016:	b672      	cpsid	i
 801e018:	e7d0      	b.n	801dfbc <_tx_mutex_cleanup+0x10>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 801e01a:	6191      	str	r1, [r2, #24]
 801e01c:	e7eb      	b.n	801dff6 <_tx_mutex_cleanup+0x4a>
 801e01e:	bf00      	nop
 801e020:	0801dfad 	.word	0x0801dfad
 801e024:	4d555445 	.word	0x4d555445
 801e028:	20007a7c 	.word	0x20007a7c

0801e02c <_tx_mutex_thread_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 801e02c:	b570      	push	{r4, r5, r6, lr}
 801e02e:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e030:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e034:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801e036:	4d0d      	ldr	r5, [pc, #52]	; (801e06c <_tx_mutex_thread_release+0x40>)
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801e038:	2601      	movs	r6, #1
 801e03a:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    _tx_thread_preempt_disable++;
 801e03e:	682a      	ldr	r2, [r5, #0]
 801e040:	4432      	add	r2, r6
 801e042:	602a      	str	r2, [r5, #0]
        if (mutex_ptr != TX_NULL)
 801e044:	b158      	cbz	r0, 801e05e <_tx_mutex_thread_release+0x32>
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801e046:	6086      	str	r6, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e048:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 801e04c:	f7fe fe3e 	bl	801cccc <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e050:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e054:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801e056:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 801e05a:	2800      	cmp	r0, #0
 801e05c:	d1f2      	bne.n	801e044 <_tx_mutex_thread_release+0x18>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 801e05e:	682a      	ldr	r2, [r5, #0]
 801e060:	3a01      	subs	r2, #1
 801e062:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e064:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 801e068:	bd70      	pop	{r4, r5, r6, pc}
 801e06a:	bf00      	nop
 801e06c:	20007a7c 	.word	0x20007a7c

0801e070 <_tx_mutex_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 801e070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e074:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e078:	b672      	cpsid	i

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 801e07a:	4927      	ldr	r1, [pc, #156]	; (801e118 <_tx_mutex_delete+0xa8>)
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 801e07c:	2400      	movs	r4, #0
    _tx_mutex_created_count--;
 801e07e:	680b      	ldr	r3, [r1, #0]
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 801e080:	6004      	str	r4, [r0, #0]
    _tx_mutex_created_count--;
 801e082:	3b01      	subs	r3, #1
 801e084:	600b      	str	r3, [r1, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801e086:	2b00      	cmp	r3, #0
 801e088:	d13c      	bne.n	801e104 <_tx_mutex_delete+0x94>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 801e08a:	4924      	ldr	r1, [pc, #144]	; (801e11c <_tx_mutex_delete+0xac>)
 801e08c:	600b      	str	r3, [r1, #0]
            _tx_mutex_created_ptr =  next_mutex;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801e08e:	4e24      	ldr	r6, [pc, #144]	; (801e120 <_tx_mutex_delete+0xb0>)

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801e090:	2700      	movs	r7, #0

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 801e092:	68c1      	ldr	r1, [r0, #12]
    _tx_thread_preempt_disable++;
 801e094:	6833      	ldr	r3, [r6, #0]
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 801e096:	6984      	ldr	r4, [r0, #24]
    _tx_thread_preempt_disable++;
 801e098:	3301      	adds	r3, #1
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 801e09a:	69c5      	ldr	r5, [r0, #28]
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801e09c:	6187      	str	r7, [r0, #24]
    _tx_thread_preempt_disable++;
 801e09e:	6033      	str	r3, [r6, #0]
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 801e0a0:	61c7      	str	r7, [r0, #28]
    if (owner_thread != TX_NULL)
 801e0a2:	b141      	cbz	r1, 801e0b6 <_tx_mutex_delete+0x46>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801e0a4:	2301      	movs	r3, #1
 801e0a6:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e0a8:	f382 8810 	msr	PRIMASK, r2
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 801e0ac:	f7fe fe0e 	bl	801cccc <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e0b0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e0b4:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e0b6:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 801e0ba:	b1b5      	cbz	r5, 801e0ea <_tx_mutex_delete+0x7a>
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801e0bc:	f04f 0800 	mov.w	r8, #0

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801e0c0:	2701      	movs	r7, #1
        suspended_count--;
 801e0c2:	3d01      	subs	r5, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e0c4:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e0c8:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801e0ca:	6833      	ldr	r3, [r6, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801e0cc:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
        _tx_thread_preempt_disable++;
 801e0d0:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801e0d2:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 801e0d6:	6f22      	ldr	r2, [r4, #112]	; 0x70
        _tx_thread_preempt_disable++;
 801e0d8:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e0da:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801e0de:	4620      	mov	r0, r4
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801e0e0:	4614      	mov	r4, r2
        _tx_thread_system_resume(thread_ptr);
 801e0e2:	f7ff f8e5 	bl	801d2b0 <_tx_thread_system_resume>
    while (suspended_count != ((ULONG) 0))
 801e0e6:	2d00      	cmp	r5, #0
 801e0e8:	d1eb      	bne.n	801e0c2 <_tx_mutex_delete+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e0ea:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e0ee:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 801e0f0:	6833      	ldr	r3, [r6, #0]
 801e0f2:	3b01      	subs	r3, #1
 801e0f4:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e0f6:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801e0fa:	f7ff f8bb 	bl	801d274 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 801e0fe:	2000      	movs	r0, #0
 801e100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_mutex_created_ptr == mutex_ptr)
 801e104:	4c05      	ldr	r4, [pc, #20]	; (801e11c <_tx_mutex_delete+0xac>)
 801e106:	6825      	ldr	r5, [r4, #0]
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 801e108:	e9d0 3108 	ldrd	r3, r1, [r0, #32]
        if (_tx_mutex_created_ptr == mutex_ptr)
 801e10c:	4285      	cmp	r5, r0
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 801e10e:	6259      	str	r1, [r3, #36]	; 0x24
            _tx_mutex_created_ptr =  next_mutex;
 801e110:	bf08      	it	eq
 801e112:	6023      	streq	r3, [r4, #0]
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 801e114:	620b      	str	r3, [r1, #32]
 801e116:	e7ba      	b.n	801e08e <_tx_mutex_delete+0x1e>
 801e118:	200079b4 	.word	0x200079b4
 801e11c:	200079b8 	.word	0x200079b8
 801e120:	20007a7c 	.word	0x20007a7c

0801e124 <_tx_mutex_prioritize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 801e124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e126:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e12a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801e12c:	69c7      	ldr	r7, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 801e12e:	2f01      	cmp	r7, #1
 801e130:	d92a      	bls.n	801e188 <_tx_mutex_prioritize+0x64>
 801e132:	6982      	ldr	r2, [r0, #24]
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 801e134:	2f02      	cmp	r7, #2
 801e136:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801e138:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801e13a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 801e13c:	d021      	beq.n	801e182 <_tx_mutex_prioritize+0x5e>

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 801e13e:	f8df c084 	ldr.w	ip, [pc, #132]	; 801e1c4 <_tx_mutex_prioritize+0xa0>
 801e142:	4616      	mov	r6, r2
 801e144:	f8dc e000 	ldr.w	lr, [ip]
 801e148:	f10e 0e01 	add.w	lr, lr, #1
 801e14c:	f8cc e000 	str.w	lr, [ip]
 801e150:	e007      	b.n	801e162 <_tx_mutex_prioritize+0x3e>
 801e152:	69c7      	ldr	r7, [r0, #28]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 801e154:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801e156:	461a      	mov	r2, r3

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
            }

        } while (thread_ptr != head_ptr);
 801e158:	428b      	cmp	r3, r1
 801e15a:	461e      	mov	r6, r3
 801e15c:	d018      	beq.n	801e190 <_tx_mutex_prioritize+0x6c>
 801e15e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 801e160:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801e162:	42ab      	cmp	r3, r5
 801e164:	bf88      	it	hi
 801e166:	460a      	movhi	r2, r1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e168:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e16c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e170:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 801e172:	6983      	ldr	r3, [r0, #24]
 801e174:	42b3      	cmp	r3, r6
 801e176:	d1ec      	bne.n	801e152 <_tx_mutex_prioritize+0x2e>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 801e178:	69c5      	ldr	r5, [r0, #28]
 801e17a:	42bd      	cmp	r5, r7
 801e17c:	d020      	beq.n	801e1c0 <_tx_mutex_prioritize+0x9c>
 801e17e:	462f      	mov	r7, r5
 801e180:	e7e8      	b.n	801e154 <_tx_mutex_prioritize+0x30>
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801e182:	429d      	cmp	r5, r3
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 801e184:	bf38      	it	cc
 801e186:	6181      	strcc	r1, [r0, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e188:	f384 8810 	msr	PRIMASK, r4
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 801e18c:	2000      	movs	r0, #0
 801e18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _tx_thread_preempt_disable--;
 801e190:	f8dc 1000 	ldr.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 801e194:	4293      	cmp	r3, r2
        _tx_thread_preempt_disable--;
 801e196:	f101 31ff 	add.w	r1, r1, #4294967295
 801e19a:	f8cc 1000 	str.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 801e19e:	d009      	beq.n	801e1b4 <_tx_mutex_prioritize+0x90>
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 801e1a0:	e9d2 651c 	ldrd	r6, r5, [r2, #112]	; 0x70
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801e1a4:	6775      	str	r5, [r6, #116]	; 0x74
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 801e1a6:	6f59      	ldr	r1, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 801e1a8:	672e      	str	r6, [r5, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 801e1aa:	e9c2 311c 	strd	r3, r1, [r2, #112]	; 0x70
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 801e1ae:	670a      	str	r2, [r1, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 801e1b0:	675a      	str	r2, [r3, #116]	; 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 801e1b2:	6182      	str	r2, [r0, #24]
 801e1b4:	f384 8810 	msr	PRIMASK, r4
        _tx_thread_system_preempt_check();
 801e1b8:	f7ff f85c 	bl	801d274 <_tx_thread_system_preempt_check>
}
 801e1bc:	2000      	movs	r0, #0
 801e1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801e1c0:	6f09      	ldr	r1, [r1, #112]	; 0x70
 801e1c2:	e7c9      	b.n	801e158 <_tx_mutex_prioritize+0x34>
 801e1c4:	20007a7c 	.word	0x20007a7c

0801e1c8 <_tx_thread_delete>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e1c8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e1cc:	b672      	cpsid	i
    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801e1ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e1d0:	3b01      	subs	r3, #1
 801e1d2:	2b01      	cmp	r3, #1
 801e1d4:	d81e      	bhi.n	801e214 <_tx_thread_delete+0x4c>

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 801e1d6:	4a11      	ldr	r2, [pc, #68]	; (801e21c <_tx_thread_delete+0x54>)
 801e1d8:	6813      	ldr	r3, [r2, #0]
{
 801e1da:	b430      	push	{r4, r5}
        _tx_thread_created_count--;
 801e1dc:	3b01      	subs	r3, #1
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 801e1de:	2400      	movs	r4, #0
 801e1e0:	6004      	str	r4, [r0, #0]
        _tx_thread_created_count--;
 801e1e2:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 801e1e4:	b17b      	cbz	r3, 801e206 <_tx_thread_delete+0x3e>
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
            next_thread -> tx_thread_created_previous =  previous_thread;
            previous_thread -> tx_thread_created_next =  next_thread;

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 801e1e6:	4c0e      	ldr	r4, [pc, #56]	; (801e220 <_tx_thread_delete+0x58>)
 801e1e8:	6825      	ldr	r5, [r4, #0]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 801e1ea:	e9d0 3222 	ldrd	r3, r2, [r0, #136]	; 0x88
            if (_tx_thread_created_ptr == thread_ptr)
 801e1ee:	4285      	cmp	r5, r0
            next_thread -> tx_thread_created_previous =  previous_thread;
 801e1f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 801e1f4:	bf08      	it	eq
 801e1f6:	6023      	streq	r3, [r4, #0]
            previous_thread -> tx_thread_created_next =  next_thread;
 801e1f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e1fc:	f381 8810 	msr	PRIMASK, r1
 801e200:	2000      	movs	r0, #0
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
}
 801e202:	bc30      	pop	{r4, r5}
 801e204:	4770      	bx	lr
            _tx_thread_created_ptr =  TX_NULL;
 801e206:	4a06      	ldr	r2, [pc, #24]	; (801e220 <_tx_thread_delete+0x58>)
 801e208:	6013      	str	r3, [r2, #0]
 801e20a:	f381 8810 	msr	PRIMASK, r1
 801e20e:	2000      	movs	r0, #0
}
 801e210:	bc30      	pop	{r4, r5}
 801e212:	4770      	bx	lr
 801e214:	f381 8810 	msr	PRIMASK, r1
            status =  TX_DELETE_ERROR;
 801e218:	2011      	movs	r0, #17
}
 801e21a:	4770      	bx	lr
 801e21c:	20007a74 	.word	0x20007a74
 801e220:	20007a6c 	.word	0x20007a6c

0801e224 <_tx_thread_resume>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 801e224:	b538      	push	{r3, r4, r5, lr}
 801e226:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e228:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e22c:	b672      	cpsid	i
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801e22e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e230:	2903      	cmp	r1, #3
 801e232:	d00a      	beq.n	801e24a <_tx_thread_resume+0x26>
        
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 801e234:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801e236:	2901      	cmp	r1, #1
 801e238:	d003      	beq.n	801e242 <_tx_thread_resume+0x1e>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 801e23a:	2012      	movs	r0, #18
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e23c:	f382 8810 	msr	PRIMASK, r2
    }
#endif

    /* Return completion status. */
    return(status);
}
 801e240:	bd38      	pop	{r3, r4, r5, pc}
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801e242:	2100      	movs	r1, #0
        status =  TX_SUSPEND_LIFTED;
 801e244:	2019      	movs	r0, #25
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801e246:	6359      	str	r1, [r3, #52]	; 0x34
 801e248:	e7f8      	b.n	801e23c <_tx_thread_resume+0x18>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e24a:	f3ef 8405 	mrs	r4, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801e24e:	4913      	ldr	r1, [pc, #76]	; (801e29c <_tx_thread_resume+0x78>)
 801e250:	6809      	ldr	r1, [r1, #0]
 801e252:	4321      	orrs	r1, r4
 801e254:	f1b1 3ff0 	cmp.w	r1, #4042322160	; 0xf0f0f0f0
 801e258:	d312      	bcc.n	801e280 <_tx_thread_resume+0x5c>
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801e25a:	4911      	ldr	r1, [pc, #68]	; (801e2a0 <_tx_thread_resume+0x7c>)
 801e25c:	680c      	ldr	r4, [r1, #0]
            if (saved_thread_ptr != TX_NULL)
 801e25e:	b1cc      	cbz	r4, 801e294 <_tx_thread_resume+0x70>
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801e260:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801e262:	6be5      	ldr	r5, [r4, #60]	; 0x3c
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801e264:	63e1      	str	r1, [r4, #60]	; 0x3c
        _tx_thread_preempt_disable++;
 801e266:	480f      	ldr	r0, [pc, #60]	; (801e2a4 <_tx_thread_resume+0x80>)
 801e268:	6801      	ldr	r1, [r0, #0]
 801e26a:	3101      	adds	r1, #1
 801e26c:	6001      	str	r1, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e26e:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 801e272:	4618      	mov	r0, r3
 801e274:	f7ff f81c 	bl	801d2b0 <_tx_thread_system_resume>
        if (saved_thread_ptr != TX_NULL)
 801e278:	b174      	cbz	r4, 801e298 <_tx_thread_resume+0x74>
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801e27a:	63e5      	str	r5, [r4, #60]	; 0x3c
        return(TX_SUCCESS);
 801e27c:	2000      	movs	r0, #0
}
 801e27e:	bd38      	pop	{r3, r4, r5, pc}
        _tx_thread_preempt_disable++;
 801e280:	4908      	ldr	r1, [pc, #32]	; (801e2a4 <_tx_thread_resume+0x80>)
 801e282:	680b      	ldr	r3, [r1, #0]
 801e284:	3301      	adds	r3, #1
 801e286:	600b      	str	r3, [r1, #0]
 801e288:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 801e28c:	f7ff f810 	bl	801d2b0 <_tx_thread_system_resume>
        return(TX_SUCCESS);
 801e290:	2000      	movs	r0, #0
}
 801e292:	bd38      	pop	{r3, r4, r5, pc}
UINT        saved_threshold =  ((UINT) 0);
 801e294:	4625      	mov	r5, r4
 801e296:	e7e6      	b.n	801e266 <_tx_thread_resume+0x42>
        return(TX_SUCCESS);
 801e298:	4620      	mov	r0, r4
}
 801e29a:	bd38      	pop	{r3, r4, r5, pc}
 801e29c:	200000ec 	.word	0x200000ec
 801e2a0:	20007a84 	.word	0x20007a84
 801e2a4:	20007a7c 	.word	0x20007a7c

0801e2a8 <_tx_thread_suspend>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 801e2a8:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e2aa:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e2ae:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 801e2b0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801e2b2:	b9cc      	cbnz	r4, 801e2e8 <_tx_thread_suspend+0x40>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e2b4:	f3ef 8205 	mrs	r2, IPSR

        /* Initialize status to success.  */
        status =  TX_SUCCESS;

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == 0)
 801e2b8:	4916      	ldr	r1, [pc, #88]	; (801e314 <_tx_thread_suspend+0x6c>)
 801e2ba:	6809      	ldr	r1, [r1, #0]
        {
        
            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 801e2bc:	430a      	orrs	r2, r1
 801e2be:	d121      	bne.n	801e304 <_tx_thread_suspend+0x5c>
    TX_THREAD_GET_CURRENT(current_thread)
 801e2c0:	4a15      	ldr	r2, [pc, #84]	; (801e318 <_tx_thread_suspend+0x70>)
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 801e2c2:	4916      	ldr	r1, [pc, #88]	; (801e31c <_tx_thread_suspend+0x74>)
            if (current_thread == thread_ptr)
 801e2c4:	6812      	ldr	r2, [r2, #0]
 801e2c6:	4282      	cmp	r2, r0
 801e2c8:	d01e      	beq.n	801e308 <_tx_thread_suspend+0x60>

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801e2ca:	680a      	ldr	r2, [r1, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801e2cc:	2501      	movs	r5, #1
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 801e2ce:	2603      	movs	r6, #3
            _tx_thread_preempt_disable++;
 801e2d0:	442a      	add	r2, r5
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801e2d2:	6385      	str	r5, [r0, #56]	; 0x38
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801e2d4:	2500      	movs	r5, #0
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 801e2d6:	6306      	str	r6, [r0, #48]	; 0x30
            _tx_thread_preempt_disable++;
 801e2d8:	600a      	str	r2, [r1, #0]
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801e2da:	64c5      	str	r5, [r0, #76]	; 0x4c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e2dc:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801e2e0:	f7ff f86c 	bl	801d3bc <_tx_thread_system_suspend>
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	bd70      	pop	{r4, r5, r6, pc}
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 801e2e8:	1e62      	subs	r2, r4, #1
 801e2ea:	2a01      	cmp	r2, #1
 801e2ec:	d804      	bhi.n	801e2f8 <_tx_thread_suspend+0x50>
                    status =  TX_SUSPEND_ERROR;
 801e2ee:	2414      	movs	r4, #20
 801e2f0:	f383 8810 	msr	PRIMASK, r3
}
 801e2f4:	4620      	mov	r0, r4
 801e2f6:	bd70      	pop	{r4, r5, r6, pc}
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801e2f8:	2c03      	cmp	r4, #3
 801e2fa:	d009      	beq.n	801e310 <_tx_thread_suspend+0x68>
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 801e2fc:	2201      	movs	r2, #1
        status =  TX_SUCCESS;
 801e2fe:	2400      	movs	r4, #0
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 801e300:	6342      	str	r2, [r0, #52]	; 0x34
 801e302:	e7f5      	b.n	801e2f0 <_tx_thread_suspend+0x48>
 801e304:	4905      	ldr	r1, [pc, #20]	; (801e31c <_tx_thread_suspend+0x74>)
 801e306:	e7e0      	b.n	801e2ca <_tx_thread_suspend+0x22>
                if (_tx_thread_preempt_disable != ((UINT) 0))
 801e308:	680a      	ldr	r2, [r1, #0]
 801e30a:	2a00      	cmp	r2, #0
 801e30c:	d1ef      	bne.n	801e2ee <_tx_thread_suspend+0x46>
 801e30e:	e7dc      	b.n	801e2ca <_tx_thread_suspend+0x22>
        status =  TX_SUCCESS;
 801e310:	2400      	movs	r4, #0
 801e312:	e7ed      	b.n	801e2f0 <_tx_thread_suspend+0x48>
 801e314:	200000ec 	.word	0x200000ec
 801e318:	20007a80 	.word	0x20007a80
 801e31c:	20007a7c 	.word	0x20007a7c

0801e320 <_tx_thread_terminate>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 801e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e322:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e324:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e328:	b672      	cpsid	i

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 801e32a:	304c      	adds	r0, #76	; 0x4c
 801e32c:	f7ff fa12 	bl	801d754 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 801e330:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e332:	2b02      	cmp	r3, #2
 801e334:	d02e      	beq.n	801e394 <_tx_thread_terminate+0x74>
        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801e336:	2b01      	cmp	r3, #1
 801e338:	d02c      	beq.n	801e394 <_tx_thread_terminate+0x74>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 801e33a:	4d27      	ldr	r5, [pc, #156]	; (801e3d8 <_tx_thread_terminate+0xb8>)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 801e33c:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
        _tx_thread_preempt_disable++;
 801e340:	682a      	ldr	r2, [r5, #0]
 801e342:	3201      	adds	r2, #1
 801e344:	602a      	str	r2, [r5, #0]
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 801e346:	bb5b      	cbnz	r3, 801e3a0 <_tx_thread_terminate+0x80>

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 801e348:	682a      	ldr	r2, [r5, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801e34a:	2101      	movs	r1, #1
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 801e34c:	2002      	movs	r0, #2
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801e34e:	64e3      	str	r3, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 801e350:	440a      	add	r2, r1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801e352:	63a1      	str	r1, [r4, #56]	; 0x38
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 801e354:	6320      	str	r0, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 801e356:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e358:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 801e35c:	b10f      	cbz	r7, 801e362 <_tx_thread_terminate+0x42>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 801e35e:	4620      	mov	r0, r4
 801e360:	47b8      	blx	r7
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801e362:	4620      	mov	r0, r4
 801e364:	f7ff f82a 	bl	801d3bc <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e368:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e36c:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e36e:	f383 8810 	msr	PRIMASK, r3
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 801e372:	4b1a      	ldr	r3, [pc, #104]	; (801e3dc <_tx_thread_terminate+0xbc>)
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	b10b      	cbz	r3, 801e37c <_tx_thread_terminate+0x5c>
        {

            /* Yes, call the mutex release function via a function pointer that 
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 801e378:	4620      	mov	r0, r4
 801e37a:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e37c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e380:	b672      	cpsid	i
        /* Disable interrupts.  */
        TX_DISABLE
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 801e382:	682b      	ldr	r3, [r5, #0]
 801e384:	3b01      	subs	r3, #1
 801e386:	602b      	str	r3, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e388:	f382 8810 	msr	PRIMASK, r2
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801e38c:	f7fe ff72 	bl	801d274 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
}
 801e390:	2000      	movs	r0, #0
 801e392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e394:	f386 8810 	msr	PRIMASK, r6
    _tx_thread_system_preempt_check();
 801e398:	f7fe ff6c 	bl	801d274 <_tx_thread_system_preempt_check>
}
 801e39c:	2000      	movs	r0, #0
 801e39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 801e3a0:	2102      	movs	r1, #2
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801e3a2:	2201      	movs	r2, #1
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801e3a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 801e3a6:	6321      	str	r1, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801e3a8:	63a2      	str	r2, [r4, #56]	; 0x38
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801e3aa:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 801e3ae:	f386 8810 	msr	PRIMASK, r6
            if (suspend_cleanup != TX_NULL)
 801e3b2:	b10b      	cbz	r3, 801e3b8 <_tx_thread_terminate+0x98>
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 801e3b4:	4620      	mov	r0, r4
 801e3b6:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e3b8:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e3bc:	b672      	cpsid	i
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801e3be:	2200      	movs	r2, #0
 801e3c0:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e3c2:	f383 8810 	msr	PRIMASK, r3
            if (entry_exit_notify != TX_NULL)
 801e3c6:	b117      	cbz	r7, 801e3ce <_tx_thread_terminate+0xae>
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 801e3c8:	2101      	movs	r1, #1
 801e3ca:	4620      	mov	r0, r4
 801e3cc:	47b8      	blx	r7
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e3ce:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e3d2:	b672      	cpsid	i
 801e3d4:	e7cb      	b.n	801e36e <_tx_thread_terminate+0x4e>
 801e3d6:	bf00      	nop
 801e3d8:	20007a7c 	.word	0x20007a7c
 801e3dc:	20007a64 	.word	0x20007a64

0801e3e0 <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801e3e0:	4b16      	ldr	r3, [pc, #88]	; (801e43c <_tx_thread_time_slice+0x5c>)
 801e3e2:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e3e4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e3e8:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801e3ea:	4915      	ldr	r1, [pc, #84]	; (801e440 <_tx_thread_time_slice+0x60>)
 801e3ec:	2000      	movs	r0, #0
 801e3ee:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801e3f0:	b193      	cbz	r3, 801e418 <_tx_thread_time_slice+0x38>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 801e3f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801e3f4:	b981      	cbnz	r1, 801e418 <_tx_thread_time_slice+0x38>
            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801e3f6:	6a18      	ldr	r0, [r3, #32]
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801e3f8:	69d9      	ldr	r1, [r3, #28]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801e3fa:	4298      	cmp	r0, r3
{
 801e3fc:	b410      	push	{r4}
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 801e3fe:	4c11      	ldr	r4, [pc, #68]	; (801e444 <_tx_thread_time_slice+0x64>)
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801e400:	6199      	str	r1, [r3, #24]
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 801e402:	6021      	str	r1, [r4, #0]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801e404:	d003      	beq.n	801e40e <_tx_thread_time_slice+0x2e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801e406:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801e408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e40a:	4299      	cmp	r1, r3
 801e40c:	d007      	beq.n	801e41e <_tx_thread_time_slice+0x3e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e40e:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801e412:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e416:	4770      	bx	lr
 801e418:	f382 8810 	msr	PRIMASK, r2
 801e41c:	4770      	bx	lr
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801e41e:	4c0a      	ldr	r4, [pc, #40]	; (801e448 <_tx_thread_time_slice+0x68>)
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801e420:	4b0a      	ldr	r3, [pc, #40]	; (801e44c <_tx_thread_time_slice+0x6c>)
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801e422:	6824      	ldr	r4, [r4, #0]
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801e424:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801e428:	4909      	ldr	r1, [pc, #36]	; (801e450 <_tx_thread_time_slice+0x70>)
 801e42a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801e42e:	600b      	str	r3, [r1, #0]
 801e430:	f382 8810 	msr	PRIMASK, r2
}
 801e434:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e438:	4770      	bx	lr
 801e43a:	bf00      	nop
 801e43c:	20007a80 	.word	0x20007a80
 801e440:	20008008 	.word	0x20008008
 801e444:	20007b18 	.word	0x20007b18
 801e448:	20007a88 	.word	0x20007a88
 801e44c:	200079e4 	.word	0x200079e4
 801e450:	20007a84 	.word	0x20007a84

0801e454 <_tx_timer_activate>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 801e454:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e456:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e45a:	b672      	cpsid	i
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 801e45c:	6a04      	ldr	r4, [r0, #32]
 801e45e:	b11c      	cbz	r4, 801e468 <_tx_timer_activate+0x14>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 801e460:	2017      	movs	r0, #23
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e462:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
}
 801e466:	bd38      	pop	{r3, r4, r5, pc}
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 801e468:	6883      	ldr	r3, [r0, #8]
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d0f8      	beq.n	801e460 <_tx_timer_activate+0xc>
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 801e46e:	3008      	adds	r0, #8
 801e470:	f7ff f946 	bl	801d700 <_tx_timer_system_activate>
        status =  TX_SUCCESS;
 801e474:	4620      	mov	r0, r4
 801e476:	f385 8810 	msr	PRIMASK, r5
}
 801e47a:	bd38      	pop	{r3, r4, r5, pc}

0801e47c <_tx_timer_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 801e47c:	b538      	push	{r3, r4, r5, lr}
 801e47e:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e480:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e484:	b672      	cpsid	i

    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 801e486:	6a03      	ldr	r3, [r0, #32]
 801e488:	b113      	cbz	r3, 801e490 <_tx_timer_delete+0x14>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 801e48a:	3008      	adds	r0, #8
 801e48c:	f7ff f962 	bl	801d754 <_tx_timer_system_deactivate>

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 801e490:	4a0c      	ldr	r2, [pc, #48]	; (801e4c4 <_tx_timer_delete+0x48>)
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 801e492:	2100      	movs	r1, #0
    _tx_timer_created_count--;
 801e494:	6813      	ldr	r3, [r2, #0]
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 801e496:	6021      	str	r1, [r4, #0]
    _tx_timer_created_count--;
 801e498:	3b01      	subs	r3, #1
 801e49a:	6013      	str	r3, [r2, #0]
    
    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 801e49c:	b163      	cbz	r3, 801e4b8 <_tx_timer_delete+0x3c>
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
        next_timer -> tx_timer_created_previous =  previous_timer;
        previous_timer -> tx_timer_created_next =  next_timer;

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 801e49e:	490a      	ldr	r1, [pc, #40]	; (801e4c8 <_tx_timer_delete+0x4c>)
 801e4a0:	6808      	ldr	r0, [r1, #0]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 801e4a2:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
        if (_tx_timer_created_ptr == timer_ptr)
 801e4a6:	42a0      	cmp	r0, r4
        next_timer -> tx_timer_created_previous =  previous_timer;
 801e4a8:	629a      	str	r2, [r3, #40]	; 0x28
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 801e4aa:	bf08      	it	eq
 801e4ac:	600b      	streq	r3, [r1, #0]
        previous_timer -> tx_timer_created_next =  next_timer;
 801e4ae:	6253      	str	r3, [r2, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e4b0:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 801e4b4:	2000      	movs	r0, #0
 801e4b6:	bd38      	pop	{r3, r4, r5, pc}
        _tx_timer_created_ptr =  TX_NULL;
 801e4b8:	4a03      	ldr	r2, [pc, #12]	; (801e4c8 <_tx_timer_delete+0x4c>)
 801e4ba:	6013      	str	r3, [r2, #0]
 801e4bc:	f385 8810 	msr	PRIMASK, r5
}
 801e4c0:	2000      	movs	r0, #0
 801e4c2:	bd38      	pop	{r3, r4, r5, pc}
 801e4c4:	20008004 	.word	0x20008004
 801e4c8:	20007bf8 	.word	0x20007bf8

0801e4cc <_tx_timer_expiration_process>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801e4cc:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 801e4d0:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801e4d2:	4a04      	ldr	r2, [pc, #16]	; (801e4e4 <_tx_timer_expiration_process+0x18>)
 801e4d4:	6813      	ldr	r3, [r2, #0]
 801e4d6:	3301      	adds	r3, #1
 801e4d8:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801e4da:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801e4de:	4802      	ldr	r0, [pc, #8]	; (801e4e8 <_tx_timer_expiration_process+0x1c>)
 801e4e0:	f7fe bee6 	b.w	801d2b0 <_tx_thread_system_resume>
 801e4e4:	20007a7c 	.word	0x20007a7c
 801e4e8:	20007b28 	.word	0x20007b28

0801e4ec <__libc_init_array>:
 801e4ec:	b570      	push	{r4, r5, r6, lr}
 801e4ee:	4e0d      	ldr	r6, [pc, #52]	; (801e524 <__libc_init_array+0x38>)
 801e4f0:	4c0d      	ldr	r4, [pc, #52]	; (801e528 <__libc_init_array+0x3c>)
 801e4f2:	1ba4      	subs	r4, r4, r6
 801e4f4:	10a4      	asrs	r4, r4, #2
 801e4f6:	2500      	movs	r5, #0
 801e4f8:	42a5      	cmp	r5, r4
 801e4fa:	d109      	bne.n	801e510 <__libc_init_array+0x24>
 801e4fc:	4e0b      	ldr	r6, [pc, #44]	; (801e52c <__libc_init_array+0x40>)
 801e4fe:	4c0c      	ldr	r4, [pc, #48]	; (801e530 <__libc_init_array+0x44>)
 801e500:	f001 f9c0 	bl	801f884 <_init>
 801e504:	1ba4      	subs	r4, r4, r6
 801e506:	10a4      	asrs	r4, r4, #2
 801e508:	2500      	movs	r5, #0
 801e50a:	42a5      	cmp	r5, r4
 801e50c:	d105      	bne.n	801e51a <__libc_init_array+0x2e>
 801e50e:	bd70      	pop	{r4, r5, r6, pc}
 801e510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e514:	4798      	blx	r3
 801e516:	3501      	adds	r5, #1
 801e518:	e7ee      	b.n	801e4f8 <__libc_init_array+0xc>
 801e51a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e51e:	4798      	blx	r3
 801e520:	3501      	adds	r5, #1
 801e522:	e7f2      	b.n	801e50a <__libc_init_array+0x1e>
 801e524:	080259e0 	.word	0x080259e0
 801e528:	080259e0 	.word	0x080259e0
 801e52c:	080259e0 	.word	0x080259e0
 801e530:	080259e4 	.word	0x080259e4

0801e534 <memcmp>:
 801e534:	b530      	push	{r4, r5, lr}
 801e536:	2400      	movs	r4, #0
 801e538:	42a2      	cmp	r2, r4
 801e53a:	d101      	bne.n	801e540 <memcmp+0xc>
 801e53c:	2000      	movs	r0, #0
 801e53e:	e007      	b.n	801e550 <memcmp+0x1c>
 801e540:	5d03      	ldrb	r3, [r0, r4]
 801e542:	3401      	adds	r4, #1
 801e544:	190d      	adds	r5, r1, r4
 801e546:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801e54a:	42ab      	cmp	r3, r5
 801e54c:	d0f4      	beq.n	801e538 <memcmp+0x4>
 801e54e:	1b58      	subs	r0, r3, r5
 801e550:	bd30      	pop	{r4, r5, pc}

0801e552 <memcpy>:
 801e552:	b510      	push	{r4, lr}
 801e554:	1e43      	subs	r3, r0, #1
 801e556:	440a      	add	r2, r1
 801e558:	4291      	cmp	r1, r2
 801e55a:	d100      	bne.n	801e55e <memcpy+0xc>
 801e55c:	bd10      	pop	{r4, pc}
 801e55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e562:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e566:	e7f7      	b.n	801e558 <memcpy+0x6>

0801e568 <memmove>:
 801e568:	4288      	cmp	r0, r1
 801e56a:	b510      	push	{r4, lr}
 801e56c:	eb01 0302 	add.w	r3, r1, r2
 801e570:	d807      	bhi.n	801e582 <memmove+0x1a>
 801e572:	1e42      	subs	r2, r0, #1
 801e574:	4299      	cmp	r1, r3
 801e576:	d00a      	beq.n	801e58e <memmove+0x26>
 801e578:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e57c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801e580:	e7f8      	b.n	801e574 <memmove+0xc>
 801e582:	4283      	cmp	r3, r0
 801e584:	d9f5      	bls.n	801e572 <memmove+0xa>
 801e586:	1881      	adds	r1, r0, r2
 801e588:	1ad2      	subs	r2, r2, r3
 801e58a:	42d3      	cmn	r3, r2
 801e58c:	d100      	bne.n	801e590 <memmove+0x28>
 801e58e:	bd10      	pop	{r4, pc}
 801e590:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e594:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801e598:	e7f7      	b.n	801e58a <memmove+0x22>

0801e59a <memset>:
 801e59a:	4402      	add	r2, r0
 801e59c:	4603      	mov	r3, r0
 801e59e:	4293      	cmp	r3, r2
 801e5a0:	d100      	bne.n	801e5a4 <memset+0xa>
 801e5a2:	4770      	bx	lr
 801e5a4:	f803 1b01 	strb.w	r1, [r3], #1
 801e5a8:	e7f9      	b.n	801e59e <memset+0x4>
	...

0801e5ac <iprintf>:
 801e5ac:	b40f      	push	{r0, r1, r2, r3}
 801e5ae:	4b0a      	ldr	r3, [pc, #40]	; (801e5d8 <iprintf+0x2c>)
 801e5b0:	b513      	push	{r0, r1, r4, lr}
 801e5b2:	681c      	ldr	r4, [r3, #0]
 801e5b4:	b124      	cbz	r4, 801e5c0 <iprintf+0x14>
 801e5b6:	69a3      	ldr	r3, [r4, #24]
 801e5b8:	b913      	cbnz	r3, 801e5c0 <iprintf+0x14>
 801e5ba:	4620      	mov	r0, r4
 801e5bc:	f000 fa88 	bl	801ead0 <__sinit>
 801e5c0:	ab05      	add	r3, sp, #20
 801e5c2:	9a04      	ldr	r2, [sp, #16]
 801e5c4:	68a1      	ldr	r1, [r4, #8]
 801e5c6:	9301      	str	r3, [sp, #4]
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	f000 fd9b 	bl	801f104 <_vfiprintf_r>
 801e5ce:	b002      	add	sp, #8
 801e5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5d4:	b004      	add	sp, #16
 801e5d6:	4770      	bx	lr
 801e5d8:	200000f0 	.word	0x200000f0

0801e5dc <_puts_r>:
 801e5dc:	b570      	push	{r4, r5, r6, lr}
 801e5de:	460e      	mov	r6, r1
 801e5e0:	4605      	mov	r5, r0
 801e5e2:	b118      	cbz	r0, 801e5ec <_puts_r+0x10>
 801e5e4:	6983      	ldr	r3, [r0, #24]
 801e5e6:	b90b      	cbnz	r3, 801e5ec <_puts_r+0x10>
 801e5e8:	f000 fa72 	bl	801ead0 <__sinit>
 801e5ec:	69ab      	ldr	r3, [r5, #24]
 801e5ee:	68ac      	ldr	r4, [r5, #8]
 801e5f0:	b913      	cbnz	r3, 801e5f8 <_puts_r+0x1c>
 801e5f2:	4628      	mov	r0, r5
 801e5f4:	f000 fa6c 	bl	801ead0 <__sinit>
 801e5f8:	4b23      	ldr	r3, [pc, #140]	; (801e688 <_puts_r+0xac>)
 801e5fa:	429c      	cmp	r4, r3
 801e5fc:	d117      	bne.n	801e62e <_puts_r+0x52>
 801e5fe:	686c      	ldr	r4, [r5, #4]
 801e600:	89a3      	ldrh	r3, [r4, #12]
 801e602:	071b      	lsls	r3, r3, #28
 801e604:	d51d      	bpl.n	801e642 <_puts_r+0x66>
 801e606:	6923      	ldr	r3, [r4, #16]
 801e608:	b1db      	cbz	r3, 801e642 <_puts_r+0x66>
 801e60a:	3e01      	subs	r6, #1
 801e60c:	68a3      	ldr	r3, [r4, #8]
 801e60e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e612:	3b01      	subs	r3, #1
 801e614:	60a3      	str	r3, [r4, #8]
 801e616:	b9e9      	cbnz	r1, 801e654 <_puts_r+0x78>
 801e618:	2b00      	cmp	r3, #0
 801e61a:	da2e      	bge.n	801e67a <_puts_r+0x9e>
 801e61c:	4622      	mov	r2, r4
 801e61e:	210a      	movs	r1, #10
 801e620:	4628      	mov	r0, r5
 801e622:	f000 f8a5 	bl	801e770 <__swbuf_r>
 801e626:	3001      	adds	r0, #1
 801e628:	d011      	beq.n	801e64e <_puts_r+0x72>
 801e62a:	200a      	movs	r0, #10
 801e62c:	e011      	b.n	801e652 <_puts_r+0x76>
 801e62e:	4b17      	ldr	r3, [pc, #92]	; (801e68c <_puts_r+0xb0>)
 801e630:	429c      	cmp	r4, r3
 801e632:	d101      	bne.n	801e638 <_puts_r+0x5c>
 801e634:	68ac      	ldr	r4, [r5, #8]
 801e636:	e7e3      	b.n	801e600 <_puts_r+0x24>
 801e638:	4b15      	ldr	r3, [pc, #84]	; (801e690 <_puts_r+0xb4>)
 801e63a:	429c      	cmp	r4, r3
 801e63c:	bf08      	it	eq
 801e63e:	68ec      	ldreq	r4, [r5, #12]
 801e640:	e7de      	b.n	801e600 <_puts_r+0x24>
 801e642:	4621      	mov	r1, r4
 801e644:	4628      	mov	r0, r5
 801e646:	f000 f8e5 	bl	801e814 <__swsetup_r>
 801e64a:	2800      	cmp	r0, #0
 801e64c:	d0dd      	beq.n	801e60a <_puts_r+0x2e>
 801e64e:	f04f 30ff 	mov.w	r0, #4294967295
 801e652:	bd70      	pop	{r4, r5, r6, pc}
 801e654:	2b00      	cmp	r3, #0
 801e656:	da04      	bge.n	801e662 <_puts_r+0x86>
 801e658:	69a2      	ldr	r2, [r4, #24]
 801e65a:	429a      	cmp	r2, r3
 801e65c:	dc06      	bgt.n	801e66c <_puts_r+0x90>
 801e65e:	290a      	cmp	r1, #10
 801e660:	d004      	beq.n	801e66c <_puts_r+0x90>
 801e662:	6823      	ldr	r3, [r4, #0]
 801e664:	1c5a      	adds	r2, r3, #1
 801e666:	6022      	str	r2, [r4, #0]
 801e668:	7019      	strb	r1, [r3, #0]
 801e66a:	e7cf      	b.n	801e60c <_puts_r+0x30>
 801e66c:	4622      	mov	r2, r4
 801e66e:	4628      	mov	r0, r5
 801e670:	f000 f87e 	bl	801e770 <__swbuf_r>
 801e674:	3001      	adds	r0, #1
 801e676:	d1c9      	bne.n	801e60c <_puts_r+0x30>
 801e678:	e7e9      	b.n	801e64e <_puts_r+0x72>
 801e67a:	6823      	ldr	r3, [r4, #0]
 801e67c:	200a      	movs	r0, #10
 801e67e:	1c5a      	adds	r2, r3, #1
 801e680:	6022      	str	r2, [r4, #0]
 801e682:	7018      	strb	r0, [r3, #0]
 801e684:	e7e5      	b.n	801e652 <_puts_r+0x76>
 801e686:	bf00      	nop
 801e688:	08025964 	.word	0x08025964
 801e68c:	08025984 	.word	0x08025984
 801e690:	08025944 	.word	0x08025944

0801e694 <puts>:
 801e694:	4b02      	ldr	r3, [pc, #8]	; (801e6a0 <puts+0xc>)
 801e696:	4601      	mov	r1, r0
 801e698:	6818      	ldr	r0, [r3, #0]
 801e69a:	f7ff bf9f 	b.w	801e5dc <_puts_r>
 801e69e:	bf00      	nop
 801e6a0:	200000f0 	.word	0x200000f0

0801e6a4 <rand>:
 801e6a4:	b538      	push	{r3, r4, r5, lr}
 801e6a6:	4b13      	ldr	r3, [pc, #76]	; (801e6f4 <rand+0x50>)
 801e6a8:	681c      	ldr	r4, [r3, #0]
 801e6aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e6ac:	b97b      	cbnz	r3, 801e6ce <rand+0x2a>
 801e6ae:	2018      	movs	r0, #24
 801e6b0:	f000 fafc 	bl	801ecac <malloc>
 801e6b4:	4a10      	ldr	r2, [pc, #64]	; (801e6f8 <rand+0x54>)
 801e6b6:	4b11      	ldr	r3, [pc, #68]	; (801e6fc <rand+0x58>)
 801e6b8:	63a0      	str	r0, [r4, #56]	; 0x38
 801e6ba:	e9c0 2300 	strd	r2, r3, [r0]
 801e6be:	4b10      	ldr	r3, [pc, #64]	; (801e700 <rand+0x5c>)
 801e6c0:	6083      	str	r3, [r0, #8]
 801e6c2:	230b      	movs	r3, #11
 801e6c4:	8183      	strh	r3, [r0, #12]
 801e6c6:	2201      	movs	r2, #1
 801e6c8:	2300      	movs	r3, #0
 801e6ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e6ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e6d0:	480c      	ldr	r0, [pc, #48]	; (801e704 <rand+0x60>)
 801e6d2:	690a      	ldr	r2, [r1, #16]
 801e6d4:	694b      	ldr	r3, [r1, #20]
 801e6d6:	4c0c      	ldr	r4, [pc, #48]	; (801e708 <rand+0x64>)
 801e6d8:	4350      	muls	r0, r2
 801e6da:	fb04 0003 	mla	r0, r4, r3, r0
 801e6de:	fba2 2304 	umull	r2, r3, r2, r4
 801e6e2:	4403      	add	r3, r0
 801e6e4:	1c54      	adds	r4, r2, #1
 801e6e6:	f143 0500 	adc.w	r5, r3, #0
 801e6ea:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801e6ee:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801e6f2:	bd38      	pop	{r3, r4, r5, pc}
 801e6f4:	200000f0 	.word	0x200000f0
 801e6f8:	abcd330e 	.word	0xabcd330e
 801e6fc:	e66d1234 	.word	0xe66d1234
 801e700:	0005deec 	.word	0x0005deec
 801e704:	5851f42d 	.word	0x5851f42d
 801e708:	4c957f2d 	.word	0x4c957f2d

0801e70c <siprintf>:
 801e70c:	b40e      	push	{r1, r2, r3}
 801e70e:	b500      	push	{lr}
 801e710:	b09c      	sub	sp, #112	; 0x70
 801e712:	ab1d      	add	r3, sp, #116	; 0x74
 801e714:	9002      	str	r0, [sp, #8]
 801e716:	9006      	str	r0, [sp, #24]
 801e718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e71c:	4809      	ldr	r0, [pc, #36]	; (801e744 <siprintf+0x38>)
 801e71e:	9107      	str	r1, [sp, #28]
 801e720:	9104      	str	r1, [sp, #16]
 801e722:	4909      	ldr	r1, [pc, #36]	; (801e748 <siprintf+0x3c>)
 801e724:	f853 2b04 	ldr.w	r2, [r3], #4
 801e728:	9105      	str	r1, [sp, #20]
 801e72a:	6800      	ldr	r0, [r0, #0]
 801e72c:	9301      	str	r3, [sp, #4]
 801e72e:	a902      	add	r1, sp, #8
 801e730:	f000 fbc6 	bl	801eec0 <_svfiprintf_r>
 801e734:	9b02      	ldr	r3, [sp, #8]
 801e736:	2200      	movs	r2, #0
 801e738:	701a      	strb	r2, [r3, #0]
 801e73a:	b01c      	add	sp, #112	; 0x70
 801e73c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e740:	b003      	add	sp, #12
 801e742:	4770      	bx	lr
 801e744:	200000f0 	.word	0x200000f0
 801e748:	ffff0208 	.word	0xffff0208

0801e74c <strncmp>:
 801e74c:	b510      	push	{r4, lr}
 801e74e:	b16a      	cbz	r2, 801e76c <strncmp+0x20>
 801e750:	3901      	subs	r1, #1
 801e752:	1884      	adds	r4, r0, r2
 801e754:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e758:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e75c:	4293      	cmp	r3, r2
 801e75e:	d103      	bne.n	801e768 <strncmp+0x1c>
 801e760:	42a0      	cmp	r0, r4
 801e762:	d001      	beq.n	801e768 <strncmp+0x1c>
 801e764:	2b00      	cmp	r3, #0
 801e766:	d1f5      	bne.n	801e754 <strncmp+0x8>
 801e768:	1a98      	subs	r0, r3, r2
 801e76a:	bd10      	pop	{r4, pc}
 801e76c:	4610      	mov	r0, r2
 801e76e:	e7fc      	b.n	801e76a <strncmp+0x1e>

0801e770 <__swbuf_r>:
 801e770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e772:	460e      	mov	r6, r1
 801e774:	4614      	mov	r4, r2
 801e776:	4605      	mov	r5, r0
 801e778:	b118      	cbz	r0, 801e782 <__swbuf_r+0x12>
 801e77a:	6983      	ldr	r3, [r0, #24]
 801e77c:	b90b      	cbnz	r3, 801e782 <__swbuf_r+0x12>
 801e77e:	f000 f9a7 	bl	801ead0 <__sinit>
 801e782:	4b21      	ldr	r3, [pc, #132]	; (801e808 <__swbuf_r+0x98>)
 801e784:	429c      	cmp	r4, r3
 801e786:	d12a      	bne.n	801e7de <__swbuf_r+0x6e>
 801e788:	686c      	ldr	r4, [r5, #4]
 801e78a:	69a3      	ldr	r3, [r4, #24]
 801e78c:	60a3      	str	r3, [r4, #8]
 801e78e:	89a3      	ldrh	r3, [r4, #12]
 801e790:	071a      	lsls	r2, r3, #28
 801e792:	d52e      	bpl.n	801e7f2 <__swbuf_r+0x82>
 801e794:	6923      	ldr	r3, [r4, #16]
 801e796:	b363      	cbz	r3, 801e7f2 <__swbuf_r+0x82>
 801e798:	6923      	ldr	r3, [r4, #16]
 801e79a:	6820      	ldr	r0, [r4, #0]
 801e79c:	1ac0      	subs	r0, r0, r3
 801e79e:	6963      	ldr	r3, [r4, #20]
 801e7a0:	b2f6      	uxtb	r6, r6
 801e7a2:	4283      	cmp	r3, r0
 801e7a4:	4637      	mov	r7, r6
 801e7a6:	dc04      	bgt.n	801e7b2 <__swbuf_r+0x42>
 801e7a8:	4621      	mov	r1, r4
 801e7aa:	4628      	mov	r0, r5
 801e7ac:	f000 f926 	bl	801e9fc <_fflush_r>
 801e7b0:	bb28      	cbnz	r0, 801e7fe <__swbuf_r+0x8e>
 801e7b2:	68a3      	ldr	r3, [r4, #8]
 801e7b4:	3b01      	subs	r3, #1
 801e7b6:	60a3      	str	r3, [r4, #8]
 801e7b8:	6823      	ldr	r3, [r4, #0]
 801e7ba:	1c5a      	adds	r2, r3, #1
 801e7bc:	6022      	str	r2, [r4, #0]
 801e7be:	701e      	strb	r6, [r3, #0]
 801e7c0:	6963      	ldr	r3, [r4, #20]
 801e7c2:	3001      	adds	r0, #1
 801e7c4:	4283      	cmp	r3, r0
 801e7c6:	d004      	beq.n	801e7d2 <__swbuf_r+0x62>
 801e7c8:	89a3      	ldrh	r3, [r4, #12]
 801e7ca:	07db      	lsls	r3, r3, #31
 801e7cc:	d519      	bpl.n	801e802 <__swbuf_r+0x92>
 801e7ce:	2e0a      	cmp	r6, #10
 801e7d0:	d117      	bne.n	801e802 <__swbuf_r+0x92>
 801e7d2:	4621      	mov	r1, r4
 801e7d4:	4628      	mov	r0, r5
 801e7d6:	f000 f911 	bl	801e9fc <_fflush_r>
 801e7da:	b190      	cbz	r0, 801e802 <__swbuf_r+0x92>
 801e7dc:	e00f      	b.n	801e7fe <__swbuf_r+0x8e>
 801e7de:	4b0b      	ldr	r3, [pc, #44]	; (801e80c <__swbuf_r+0x9c>)
 801e7e0:	429c      	cmp	r4, r3
 801e7e2:	d101      	bne.n	801e7e8 <__swbuf_r+0x78>
 801e7e4:	68ac      	ldr	r4, [r5, #8]
 801e7e6:	e7d0      	b.n	801e78a <__swbuf_r+0x1a>
 801e7e8:	4b09      	ldr	r3, [pc, #36]	; (801e810 <__swbuf_r+0xa0>)
 801e7ea:	429c      	cmp	r4, r3
 801e7ec:	bf08      	it	eq
 801e7ee:	68ec      	ldreq	r4, [r5, #12]
 801e7f0:	e7cb      	b.n	801e78a <__swbuf_r+0x1a>
 801e7f2:	4621      	mov	r1, r4
 801e7f4:	4628      	mov	r0, r5
 801e7f6:	f000 f80d 	bl	801e814 <__swsetup_r>
 801e7fa:	2800      	cmp	r0, #0
 801e7fc:	d0cc      	beq.n	801e798 <__swbuf_r+0x28>
 801e7fe:	f04f 37ff 	mov.w	r7, #4294967295
 801e802:	4638      	mov	r0, r7
 801e804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e806:	bf00      	nop
 801e808:	08025964 	.word	0x08025964
 801e80c:	08025984 	.word	0x08025984
 801e810:	08025944 	.word	0x08025944

0801e814 <__swsetup_r>:
 801e814:	4b32      	ldr	r3, [pc, #200]	; (801e8e0 <__swsetup_r+0xcc>)
 801e816:	b570      	push	{r4, r5, r6, lr}
 801e818:	681d      	ldr	r5, [r3, #0]
 801e81a:	4606      	mov	r6, r0
 801e81c:	460c      	mov	r4, r1
 801e81e:	b125      	cbz	r5, 801e82a <__swsetup_r+0x16>
 801e820:	69ab      	ldr	r3, [r5, #24]
 801e822:	b913      	cbnz	r3, 801e82a <__swsetup_r+0x16>
 801e824:	4628      	mov	r0, r5
 801e826:	f000 f953 	bl	801ead0 <__sinit>
 801e82a:	4b2e      	ldr	r3, [pc, #184]	; (801e8e4 <__swsetup_r+0xd0>)
 801e82c:	429c      	cmp	r4, r3
 801e82e:	d10f      	bne.n	801e850 <__swsetup_r+0x3c>
 801e830:	686c      	ldr	r4, [r5, #4]
 801e832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e836:	b29a      	uxth	r2, r3
 801e838:	0715      	lsls	r5, r2, #28
 801e83a:	d42c      	bmi.n	801e896 <__swsetup_r+0x82>
 801e83c:	06d0      	lsls	r0, r2, #27
 801e83e:	d411      	bmi.n	801e864 <__swsetup_r+0x50>
 801e840:	2209      	movs	r2, #9
 801e842:	6032      	str	r2, [r6, #0]
 801e844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e848:	81a3      	strh	r3, [r4, #12]
 801e84a:	f04f 30ff 	mov.w	r0, #4294967295
 801e84e:	e03e      	b.n	801e8ce <__swsetup_r+0xba>
 801e850:	4b25      	ldr	r3, [pc, #148]	; (801e8e8 <__swsetup_r+0xd4>)
 801e852:	429c      	cmp	r4, r3
 801e854:	d101      	bne.n	801e85a <__swsetup_r+0x46>
 801e856:	68ac      	ldr	r4, [r5, #8]
 801e858:	e7eb      	b.n	801e832 <__swsetup_r+0x1e>
 801e85a:	4b24      	ldr	r3, [pc, #144]	; (801e8ec <__swsetup_r+0xd8>)
 801e85c:	429c      	cmp	r4, r3
 801e85e:	bf08      	it	eq
 801e860:	68ec      	ldreq	r4, [r5, #12]
 801e862:	e7e6      	b.n	801e832 <__swsetup_r+0x1e>
 801e864:	0751      	lsls	r1, r2, #29
 801e866:	d512      	bpl.n	801e88e <__swsetup_r+0x7a>
 801e868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e86a:	b141      	cbz	r1, 801e87e <__swsetup_r+0x6a>
 801e86c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e870:	4299      	cmp	r1, r3
 801e872:	d002      	beq.n	801e87a <__swsetup_r+0x66>
 801e874:	4630      	mov	r0, r6
 801e876:	f000 fa21 	bl	801ecbc <_free_r>
 801e87a:	2300      	movs	r3, #0
 801e87c:	6363      	str	r3, [r4, #52]	; 0x34
 801e87e:	89a3      	ldrh	r3, [r4, #12]
 801e880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e884:	81a3      	strh	r3, [r4, #12]
 801e886:	2300      	movs	r3, #0
 801e888:	6063      	str	r3, [r4, #4]
 801e88a:	6923      	ldr	r3, [r4, #16]
 801e88c:	6023      	str	r3, [r4, #0]
 801e88e:	89a3      	ldrh	r3, [r4, #12]
 801e890:	f043 0308 	orr.w	r3, r3, #8
 801e894:	81a3      	strh	r3, [r4, #12]
 801e896:	6923      	ldr	r3, [r4, #16]
 801e898:	b94b      	cbnz	r3, 801e8ae <__swsetup_r+0x9a>
 801e89a:	89a3      	ldrh	r3, [r4, #12]
 801e89c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e8a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e8a4:	d003      	beq.n	801e8ae <__swsetup_r+0x9a>
 801e8a6:	4621      	mov	r1, r4
 801e8a8:	4630      	mov	r0, r6
 801e8aa:	f000 f9bf 	bl	801ec2c <__smakebuf_r>
 801e8ae:	89a2      	ldrh	r2, [r4, #12]
 801e8b0:	f012 0301 	ands.w	r3, r2, #1
 801e8b4:	d00c      	beq.n	801e8d0 <__swsetup_r+0xbc>
 801e8b6:	2300      	movs	r3, #0
 801e8b8:	60a3      	str	r3, [r4, #8]
 801e8ba:	6963      	ldr	r3, [r4, #20]
 801e8bc:	425b      	negs	r3, r3
 801e8be:	61a3      	str	r3, [r4, #24]
 801e8c0:	6923      	ldr	r3, [r4, #16]
 801e8c2:	b953      	cbnz	r3, 801e8da <__swsetup_r+0xc6>
 801e8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e8c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801e8cc:	d1ba      	bne.n	801e844 <__swsetup_r+0x30>
 801e8ce:	bd70      	pop	{r4, r5, r6, pc}
 801e8d0:	0792      	lsls	r2, r2, #30
 801e8d2:	bf58      	it	pl
 801e8d4:	6963      	ldrpl	r3, [r4, #20]
 801e8d6:	60a3      	str	r3, [r4, #8]
 801e8d8:	e7f2      	b.n	801e8c0 <__swsetup_r+0xac>
 801e8da:	2000      	movs	r0, #0
 801e8dc:	e7f7      	b.n	801e8ce <__swsetup_r+0xba>
 801e8de:	bf00      	nop
 801e8e0:	200000f0 	.word	0x200000f0
 801e8e4:	08025964 	.word	0x08025964
 801e8e8:	08025984 	.word	0x08025984
 801e8ec:	08025944 	.word	0x08025944

0801e8f0 <__sflush_r>:
 801e8f0:	898a      	ldrh	r2, [r1, #12]
 801e8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8f6:	4605      	mov	r5, r0
 801e8f8:	0710      	lsls	r0, r2, #28
 801e8fa:	460c      	mov	r4, r1
 801e8fc:	d458      	bmi.n	801e9b0 <__sflush_r+0xc0>
 801e8fe:	684b      	ldr	r3, [r1, #4]
 801e900:	2b00      	cmp	r3, #0
 801e902:	dc05      	bgt.n	801e910 <__sflush_r+0x20>
 801e904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e906:	2b00      	cmp	r3, #0
 801e908:	dc02      	bgt.n	801e910 <__sflush_r+0x20>
 801e90a:	2000      	movs	r0, #0
 801e90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e912:	2e00      	cmp	r6, #0
 801e914:	d0f9      	beq.n	801e90a <__sflush_r+0x1a>
 801e916:	2300      	movs	r3, #0
 801e918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e91c:	682f      	ldr	r7, [r5, #0]
 801e91e:	6a21      	ldr	r1, [r4, #32]
 801e920:	602b      	str	r3, [r5, #0]
 801e922:	d032      	beq.n	801e98a <__sflush_r+0x9a>
 801e924:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e926:	89a3      	ldrh	r3, [r4, #12]
 801e928:	075a      	lsls	r2, r3, #29
 801e92a:	d505      	bpl.n	801e938 <__sflush_r+0x48>
 801e92c:	6863      	ldr	r3, [r4, #4]
 801e92e:	1ac0      	subs	r0, r0, r3
 801e930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e932:	b10b      	cbz	r3, 801e938 <__sflush_r+0x48>
 801e934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e936:	1ac0      	subs	r0, r0, r3
 801e938:	2300      	movs	r3, #0
 801e93a:	4602      	mov	r2, r0
 801e93c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e93e:	6a21      	ldr	r1, [r4, #32]
 801e940:	4628      	mov	r0, r5
 801e942:	47b0      	blx	r6
 801e944:	1c43      	adds	r3, r0, #1
 801e946:	89a3      	ldrh	r3, [r4, #12]
 801e948:	d106      	bne.n	801e958 <__sflush_r+0x68>
 801e94a:	6829      	ldr	r1, [r5, #0]
 801e94c:	291d      	cmp	r1, #29
 801e94e:	d848      	bhi.n	801e9e2 <__sflush_r+0xf2>
 801e950:	4a29      	ldr	r2, [pc, #164]	; (801e9f8 <__sflush_r+0x108>)
 801e952:	40ca      	lsrs	r2, r1
 801e954:	07d6      	lsls	r6, r2, #31
 801e956:	d544      	bpl.n	801e9e2 <__sflush_r+0xf2>
 801e958:	2200      	movs	r2, #0
 801e95a:	6062      	str	r2, [r4, #4]
 801e95c:	04d9      	lsls	r1, r3, #19
 801e95e:	6922      	ldr	r2, [r4, #16]
 801e960:	6022      	str	r2, [r4, #0]
 801e962:	d504      	bpl.n	801e96e <__sflush_r+0x7e>
 801e964:	1c42      	adds	r2, r0, #1
 801e966:	d101      	bne.n	801e96c <__sflush_r+0x7c>
 801e968:	682b      	ldr	r3, [r5, #0]
 801e96a:	b903      	cbnz	r3, 801e96e <__sflush_r+0x7e>
 801e96c:	6560      	str	r0, [r4, #84]	; 0x54
 801e96e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e970:	602f      	str	r7, [r5, #0]
 801e972:	2900      	cmp	r1, #0
 801e974:	d0c9      	beq.n	801e90a <__sflush_r+0x1a>
 801e976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e97a:	4299      	cmp	r1, r3
 801e97c:	d002      	beq.n	801e984 <__sflush_r+0x94>
 801e97e:	4628      	mov	r0, r5
 801e980:	f000 f99c 	bl	801ecbc <_free_r>
 801e984:	2000      	movs	r0, #0
 801e986:	6360      	str	r0, [r4, #52]	; 0x34
 801e988:	e7c0      	b.n	801e90c <__sflush_r+0x1c>
 801e98a:	2301      	movs	r3, #1
 801e98c:	4628      	mov	r0, r5
 801e98e:	47b0      	blx	r6
 801e990:	1c41      	adds	r1, r0, #1
 801e992:	d1c8      	bne.n	801e926 <__sflush_r+0x36>
 801e994:	682b      	ldr	r3, [r5, #0]
 801e996:	2b00      	cmp	r3, #0
 801e998:	d0c5      	beq.n	801e926 <__sflush_r+0x36>
 801e99a:	2b1d      	cmp	r3, #29
 801e99c:	d001      	beq.n	801e9a2 <__sflush_r+0xb2>
 801e99e:	2b16      	cmp	r3, #22
 801e9a0:	d101      	bne.n	801e9a6 <__sflush_r+0xb6>
 801e9a2:	602f      	str	r7, [r5, #0]
 801e9a4:	e7b1      	b.n	801e90a <__sflush_r+0x1a>
 801e9a6:	89a3      	ldrh	r3, [r4, #12]
 801e9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9ac:	81a3      	strh	r3, [r4, #12]
 801e9ae:	e7ad      	b.n	801e90c <__sflush_r+0x1c>
 801e9b0:	690f      	ldr	r7, [r1, #16]
 801e9b2:	2f00      	cmp	r7, #0
 801e9b4:	d0a9      	beq.n	801e90a <__sflush_r+0x1a>
 801e9b6:	0793      	lsls	r3, r2, #30
 801e9b8:	680e      	ldr	r6, [r1, #0]
 801e9ba:	bf08      	it	eq
 801e9bc:	694b      	ldreq	r3, [r1, #20]
 801e9be:	600f      	str	r7, [r1, #0]
 801e9c0:	bf18      	it	ne
 801e9c2:	2300      	movne	r3, #0
 801e9c4:	eba6 0807 	sub.w	r8, r6, r7
 801e9c8:	608b      	str	r3, [r1, #8]
 801e9ca:	f1b8 0f00 	cmp.w	r8, #0
 801e9ce:	dd9c      	ble.n	801e90a <__sflush_r+0x1a>
 801e9d0:	4643      	mov	r3, r8
 801e9d2:	463a      	mov	r2, r7
 801e9d4:	6a21      	ldr	r1, [r4, #32]
 801e9d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e9d8:	4628      	mov	r0, r5
 801e9da:	47b0      	blx	r6
 801e9dc:	2800      	cmp	r0, #0
 801e9de:	dc06      	bgt.n	801e9ee <__sflush_r+0xfe>
 801e9e0:	89a3      	ldrh	r3, [r4, #12]
 801e9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9e6:	81a3      	strh	r3, [r4, #12]
 801e9e8:	f04f 30ff 	mov.w	r0, #4294967295
 801e9ec:	e78e      	b.n	801e90c <__sflush_r+0x1c>
 801e9ee:	4407      	add	r7, r0
 801e9f0:	eba8 0800 	sub.w	r8, r8, r0
 801e9f4:	e7e9      	b.n	801e9ca <__sflush_r+0xda>
 801e9f6:	bf00      	nop
 801e9f8:	20400001 	.word	0x20400001

0801e9fc <_fflush_r>:
 801e9fc:	b538      	push	{r3, r4, r5, lr}
 801e9fe:	690b      	ldr	r3, [r1, #16]
 801ea00:	4605      	mov	r5, r0
 801ea02:	460c      	mov	r4, r1
 801ea04:	b1db      	cbz	r3, 801ea3e <_fflush_r+0x42>
 801ea06:	b118      	cbz	r0, 801ea10 <_fflush_r+0x14>
 801ea08:	6983      	ldr	r3, [r0, #24]
 801ea0a:	b90b      	cbnz	r3, 801ea10 <_fflush_r+0x14>
 801ea0c:	f000 f860 	bl	801ead0 <__sinit>
 801ea10:	4b0c      	ldr	r3, [pc, #48]	; (801ea44 <_fflush_r+0x48>)
 801ea12:	429c      	cmp	r4, r3
 801ea14:	d109      	bne.n	801ea2a <_fflush_r+0x2e>
 801ea16:	686c      	ldr	r4, [r5, #4]
 801ea18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea1c:	b17b      	cbz	r3, 801ea3e <_fflush_r+0x42>
 801ea1e:	4621      	mov	r1, r4
 801ea20:	4628      	mov	r0, r5
 801ea22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea26:	f7ff bf63 	b.w	801e8f0 <__sflush_r>
 801ea2a:	4b07      	ldr	r3, [pc, #28]	; (801ea48 <_fflush_r+0x4c>)
 801ea2c:	429c      	cmp	r4, r3
 801ea2e:	d101      	bne.n	801ea34 <_fflush_r+0x38>
 801ea30:	68ac      	ldr	r4, [r5, #8]
 801ea32:	e7f1      	b.n	801ea18 <_fflush_r+0x1c>
 801ea34:	4b05      	ldr	r3, [pc, #20]	; (801ea4c <_fflush_r+0x50>)
 801ea36:	429c      	cmp	r4, r3
 801ea38:	bf08      	it	eq
 801ea3a:	68ec      	ldreq	r4, [r5, #12]
 801ea3c:	e7ec      	b.n	801ea18 <_fflush_r+0x1c>
 801ea3e:	2000      	movs	r0, #0
 801ea40:	bd38      	pop	{r3, r4, r5, pc}
 801ea42:	bf00      	nop
 801ea44:	08025964 	.word	0x08025964
 801ea48:	08025984 	.word	0x08025984
 801ea4c:	08025944 	.word	0x08025944

0801ea50 <std>:
 801ea50:	2300      	movs	r3, #0
 801ea52:	b510      	push	{r4, lr}
 801ea54:	4604      	mov	r4, r0
 801ea56:	e9c0 3300 	strd	r3, r3, [r0]
 801ea5a:	6083      	str	r3, [r0, #8]
 801ea5c:	8181      	strh	r1, [r0, #12]
 801ea5e:	6643      	str	r3, [r0, #100]	; 0x64
 801ea60:	81c2      	strh	r2, [r0, #14]
 801ea62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ea66:	6183      	str	r3, [r0, #24]
 801ea68:	4619      	mov	r1, r3
 801ea6a:	2208      	movs	r2, #8
 801ea6c:	305c      	adds	r0, #92	; 0x5c
 801ea6e:	f7ff fd94 	bl	801e59a <memset>
 801ea72:	4b05      	ldr	r3, [pc, #20]	; (801ea88 <std+0x38>)
 801ea74:	6263      	str	r3, [r4, #36]	; 0x24
 801ea76:	4b05      	ldr	r3, [pc, #20]	; (801ea8c <std+0x3c>)
 801ea78:	62a3      	str	r3, [r4, #40]	; 0x28
 801ea7a:	4b05      	ldr	r3, [pc, #20]	; (801ea90 <std+0x40>)
 801ea7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ea7e:	4b05      	ldr	r3, [pc, #20]	; (801ea94 <std+0x44>)
 801ea80:	6224      	str	r4, [r4, #32]
 801ea82:	6323      	str	r3, [r4, #48]	; 0x30
 801ea84:	bd10      	pop	{r4, pc}
 801ea86:	bf00      	nop
 801ea88:	0801f661 	.word	0x0801f661
 801ea8c:	0801f683 	.word	0x0801f683
 801ea90:	0801f6bb 	.word	0x0801f6bb
 801ea94:	0801f6df 	.word	0x0801f6df

0801ea98 <_cleanup_r>:
 801ea98:	4901      	ldr	r1, [pc, #4]	; (801eaa0 <_cleanup_r+0x8>)
 801ea9a:	f000 b885 	b.w	801eba8 <_fwalk_reent>
 801ea9e:	bf00      	nop
 801eaa0:	0801e9fd 	.word	0x0801e9fd

0801eaa4 <__sfmoreglue>:
 801eaa4:	b570      	push	{r4, r5, r6, lr}
 801eaa6:	1e4a      	subs	r2, r1, #1
 801eaa8:	2568      	movs	r5, #104	; 0x68
 801eaaa:	4355      	muls	r5, r2
 801eaac:	460e      	mov	r6, r1
 801eaae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801eab2:	f000 f951 	bl	801ed58 <_malloc_r>
 801eab6:	4604      	mov	r4, r0
 801eab8:	b140      	cbz	r0, 801eacc <__sfmoreglue+0x28>
 801eaba:	2100      	movs	r1, #0
 801eabc:	e9c0 1600 	strd	r1, r6, [r0]
 801eac0:	300c      	adds	r0, #12
 801eac2:	60a0      	str	r0, [r4, #8]
 801eac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801eac8:	f7ff fd67 	bl	801e59a <memset>
 801eacc:	4620      	mov	r0, r4
 801eace:	bd70      	pop	{r4, r5, r6, pc}

0801ead0 <__sinit>:
 801ead0:	6983      	ldr	r3, [r0, #24]
 801ead2:	b510      	push	{r4, lr}
 801ead4:	4604      	mov	r4, r0
 801ead6:	bb33      	cbnz	r3, 801eb26 <__sinit+0x56>
 801ead8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801eadc:	6503      	str	r3, [r0, #80]	; 0x50
 801eade:	4b12      	ldr	r3, [pc, #72]	; (801eb28 <__sinit+0x58>)
 801eae0:	4a12      	ldr	r2, [pc, #72]	; (801eb2c <__sinit+0x5c>)
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	6282      	str	r2, [r0, #40]	; 0x28
 801eae6:	4298      	cmp	r0, r3
 801eae8:	bf04      	itt	eq
 801eaea:	2301      	moveq	r3, #1
 801eaec:	6183      	streq	r3, [r0, #24]
 801eaee:	f000 f81f 	bl	801eb30 <__sfp>
 801eaf2:	6060      	str	r0, [r4, #4]
 801eaf4:	4620      	mov	r0, r4
 801eaf6:	f000 f81b 	bl	801eb30 <__sfp>
 801eafa:	60a0      	str	r0, [r4, #8]
 801eafc:	4620      	mov	r0, r4
 801eafe:	f000 f817 	bl	801eb30 <__sfp>
 801eb02:	2200      	movs	r2, #0
 801eb04:	60e0      	str	r0, [r4, #12]
 801eb06:	2104      	movs	r1, #4
 801eb08:	6860      	ldr	r0, [r4, #4]
 801eb0a:	f7ff ffa1 	bl	801ea50 <std>
 801eb0e:	2201      	movs	r2, #1
 801eb10:	2109      	movs	r1, #9
 801eb12:	68a0      	ldr	r0, [r4, #8]
 801eb14:	f7ff ff9c 	bl	801ea50 <std>
 801eb18:	2202      	movs	r2, #2
 801eb1a:	2112      	movs	r1, #18
 801eb1c:	68e0      	ldr	r0, [r4, #12]
 801eb1e:	f7ff ff97 	bl	801ea50 <std>
 801eb22:	2301      	movs	r3, #1
 801eb24:	61a3      	str	r3, [r4, #24]
 801eb26:	bd10      	pop	{r4, pc}
 801eb28:	08025940 	.word	0x08025940
 801eb2c:	0801ea99 	.word	0x0801ea99

0801eb30 <__sfp>:
 801eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb32:	4b1b      	ldr	r3, [pc, #108]	; (801eba0 <__sfp+0x70>)
 801eb34:	681e      	ldr	r6, [r3, #0]
 801eb36:	69b3      	ldr	r3, [r6, #24]
 801eb38:	4607      	mov	r7, r0
 801eb3a:	b913      	cbnz	r3, 801eb42 <__sfp+0x12>
 801eb3c:	4630      	mov	r0, r6
 801eb3e:	f7ff ffc7 	bl	801ead0 <__sinit>
 801eb42:	3648      	adds	r6, #72	; 0x48
 801eb44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801eb48:	3b01      	subs	r3, #1
 801eb4a:	d503      	bpl.n	801eb54 <__sfp+0x24>
 801eb4c:	6833      	ldr	r3, [r6, #0]
 801eb4e:	b133      	cbz	r3, 801eb5e <__sfp+0x2e>
 801eb50:	6836      	ldr	r6, [r6, #0]
 801eb52:	e7f7      	b.n	801eb44 <__sfp+0x14>
 801eb54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801eb58:	b16d      	cbz	r5, 801eb76 <__sfp+0x46>
 801eb5a:	3468      	adds	r4, #104	; 0x68
 801eb5c:	e7f4      	b.n	801eb48 <__sfp+0x18>
 801eb5e:	2104      	movs	r1, #4
 801eb60:	4638      	mov	r0, r7
 801eb62:	f7ff ff9f 	bl	801eaa4 <__sfmoreglue>
 801eb66:	6030      	str	r0, [r6, #0]
 801eb68:	2800      	cmp	r0, #0
 801eb6a:	d1f1      	bne.n	801eb50 <__sfp+0x20>
 801eb6c:	230c      	movs	r3, #12
 801eb6e:	603b      	str	r3, [r7, #0]
 801eb70:	4604      	mov	r4, r0
 801eb72:	4620      	mov	r0, r4
 801eb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb76:	4b0b      	ldr	r3, [pc, #44]	; (801eba4 <__sfp+0x74>)
 801eb78:	6665      	str	r5, [r4, #100]	; 0x64
 801eb7a:	e9c4 5500 	strd	r5, r5, [r4]
 801eb7e:	60a5      	str	r5, [r4, #8]
 801eb80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801eb84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801eb88:	2208      	movs	r2, #8
 801eb8a:	4629      	mov	r1, r5
 801eb8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801eb90:	f7ff fd03 	bl	801e59a <memset>
 801eb94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801eb98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801eb9c:	e7e9      	b.n	801eb72 <__sfp+0x42>
 801eb9e:	bf00      	nop
 801eba0:	08025940 	.word	0x08025940
 801eba4:	ffff0001 	.word	0xffff0001

0801eba8 <_fwalk_reent>:
 801eba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ebac:	4680      	mov	r8, r0
 801ebae:	4689      	mov	r9, r1
 801ebb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ebb4:	2600      	movs	r6, #0
 801ebb6:	b914      	cbnz	r4, 801ebbe <_fwalk_reent+0x16>
 801ebb8:	4630      	mov	r0, r6
 801ebba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ebbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801ebc2:	3f01      	subs	r7, #1
 801ebc4:	d501      	bpl.n	801ebca <_fwalk_reent+0x22>
 801ebc6:	6824      	ldr	r4, [r4, #0]
 801ebc8:	e7f5      	b.n	801ebb6 <_fwalk_reent+0xe>
 801ebca:	89ab      	ldrh	r3, [r5, #12]
 801ebcc:	2b01      	cmp	r3, #1
 801ebce:	d907      	bls.n	801ebe0 <_fwalk_reent+0x38>
 801ebd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ebd4:	3301      	adds	r3, #1
 801ebd6:	d003      	beq.n	801ebe0 <_fwalk_reent+0x38>
 801ebd8:	4629      	mov	r1, r5
 801ebda:	4640      	mov	r0, r8
 801ebdc:	47c8      	blx	r9
 801ebde:	4306      	orrs	r6, r0
 801ebe0:	3568      	adds	r5, #104	; 0x68
 801ebe2:	e7ee      	b.n	801ebc2 <_fwalk_reent+0x1a>

0801ebe4 <__swhatbuf_r>:
 801ebe4:	b570      	push	{r4, r5, r6, lr}
 801ebe6:	460e      	mov	r6, r1
 801ebe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebec:	2900      	cmp	r1, #0
 801ebee:	b096      	sub	sp, #88	; 0x58
 801ebf0:	4614      	mov	r4, r2
 801ebf2:	461d      	mov	r5, r3
 801ebf4:	da07      	bge.n	801ec06 <__swhatbuf_r+0x22>
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	602b      	str	r3, [r5, #0]
 801ebfa:	89b3      	ldrh	r3, [r6, #12]
 801ebfc:	061a      	lsls	r2, r3, #24
 801ebfe:	d410      	bmi.n	801ec22 <__swhatbuf_r+0x3e>
 801ec00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec04:	e00e      	b.n	801ec24 <__swhatbuf_r+0x40>
 801ec06:	466a      	mov	r2, sp
 801ec08:	f000 fd90 	bl	801f72c <_fstat_r>
 801ec0c:	2800      	cmp	r0, #0
 801ec0e:	dbf2      	blt.n	801ebf6 <__swhatbuf_r+0x12>
 801ec10:	9a01      	ldr	r2, [sp, #4]
 801ec12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ec16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ec1a:	425a      	negs	r2, r3
 801ec1c:	415a      	adcs	r2, r3
 801ec1e:	602a      	str	r2, [r5, #0]
 801ec20:	e7ee      	b.n	801ec00 <__swhatbuf_r+0x1c>
 801ec22:	2340      	movs	r3, #64	; 0x40
 801ec24:	2000      	movs	r0, #0
 801ec26:	6023      	str	r3, [r4, #0]
 801ec28:	b016      	add	sp, #88	; 0x58
 801ec2a:	bd70      	pop	{r4, r5, r6, pc}

0801ec2c <__smakebuf_r>:
 801ec2c:	898b      	ldrh	r3, [r1, #12]
 801ec2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ec30:	079d      	lsls	r5, r3, #30
 801ec32:	4606      	mov	r6, r0
 801ec34:	460c      	mov	r4, r1
 801ec36:	d507      	bpl.n	801ec48 <__smakebuf_r+0x1c>
 801ec38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ec3c:	6023      	str	r3, [r4, #0]
 801ec3e:	6123      	str	r3, [r4, #16]
 801ec40:	2301      	movs	r3, #1
 801ec42:	6163      	str	r3, [r4, #20]
 801ec44:	b002      	add	sp, #8
 801ec46:	bd70      	pop	{r4, r5, r6, pc}
 801ec48:	ab01      	add	r3, sp, #4
 801ec4a:	466a      	mov	r2, sp
 801ec4c:	f7ff ffca 	bl	801ebe4 <__swhatbuf_r>
 801ec50:	9900      	ldr	r1, [sp, #0]
 801ec52:	4605      	mov	r5, r0
 801ec54:	4630      	mov	r0, r6
 801ec56:	f000 f87f 	bl	801ed58 <_malloc_r>
 801ec5a:	b948      	cbnz	r0, 801ec70 <__smakebuf_r+0x44>
 801ec5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec60:	059a      	lsls	r2, r3, #22
 801ec62:	d4ef      	bmi.n	801ec44 <__smakebuf_r+0x18>
 801ec64:	f023 0303 	bic.w	r3, r3, #3
 801ec68:	f043 0302 	orr.w	r3, r3, #2
 801ec6c:	81a3      	strh	r3, [r4, #12]
 801ec6e:	e7e3      	b.n	801ec38 <__smakebuf_r+0xc>
 801ec70:	4b0d      	ldr	r3, [pc, #52]	; (801eca8 <__smakebuf_r+0x7c>)
 801ec72:	62b3      	str	r3, [r6, #40]	; 0x28
 801ec74:	89a3      	ldrh	r3, [r4, #12]
 801ec76:	6020      	str	r0, [r4, #0]
 801ec78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec7c:	81a3      	strh	r3, [r4, #12]
 801ec7e:	9b00      	ldr	r3, [sp, #0]
 801ec80:	6163      	str	r3, [r4, #20]
 801ec82:	9b01      	ldr	r3, [sp, #4]
 801ec84:	6120      	str	r0, [r4, #16]
 801ec86:	b15b      	cbz	r3, 801eca0 <__smakebuf_r+0x74>
 801ec88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec8c:	4630      	mov	r0, r6
 801ec8e:	f000 fd5f 	bl	801f750 <_isatty_r>
 801ec92:	b128      	cbz	r0, 801eca0 <__smakebuf_r+0x74>
 801ec94:	89a3      	ldrh	r3, [r4, #12]
 801ec96:	f023 0303 	bic.w	r3, r3, #3
 801ec9a:	f043 0301 	orr.w	r3, r3, #1
 801ec9e:	81a3      	strh	r3, [r4, #12]
 801eca0:	89a3      	ldrh	r3, [r4, #12]
 801eca2:	431d      	orrs	r5, r3
 801eca4:	81a5      	strh	r5, [r4, #12]
 801eca6:	e7cd      	b.n	801ec44 <__smakebuf_r+0x18>
 801eca8:	0801ea99 	.word	0x0801ea99

0801ecac <malloc>:
 801ecac:	4b02      	ldr	r3, [pc, #8]	; (801ecb8 <malloc+0xc>)
 801ecae:	4601      	mov	r1, r0
 801ecb0:	6818      	ldr	r0, [r3, #0]
 801ecb2:	f000 b851 	b.w	801ed58 <_malloc_r>
 801ecb6:	bf00      	nop
 801ecb8:	200000f0 	.word	0x200000f0

0801ecbc <_free_r>:
 801ecbc:	b538      	push	{r3, r4, r5, lr}
 801ecbe:	4605      	mov	r5, r0
 801ecc0:	2900      	cmp	r1, #0
 801ecc2:	d045      	beq.n	801ed50 <_free_r+0x94>
 801ecc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ecc8:	1f0c      	subs	r4, r1, #4
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	bfb8      	it	lt
 801ecce:	18e4      	addlt	r4, r4, r3
 801ecd0:	f000 fd60 	bl	801f794 <__malloc_lock>
 801ecd4:	4a1f      	ldr	r2, [pc, #124]	; (801ed54 <_free_r+0x98>)
 801ecd6:	6813      	ldr	r3, [r2, #0]
 801ecd8:	4610      	mov	r0, r2
 801ecda:	b933      	cbnz	r3, 801ecea <_free_r+0x2e>
 801ecdc:	6063      	str	r3, [r4, #4]
 801ecde:	6014      	str	r4, [r2, #0]
 801ece0:	4628      	mov	r0, r5
 801ece2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ece6:	f000 bd56 	b.w	801f796 <__malloc_unlock>
 801ecea:	42a3      	cmp	r3, r4
 801ecec:	d90c      	bls.n	801ed08 <_free_r+0x4c>
 801ecee:	6821      	ldr	r1, [r4, #0]
 801ecf0:	1862      	adds	r2, r4, r1
 801ecf2:	4293      	cmp	r3, r2
 801ecf4:	bf04      	itt	eq
 801ecf6:	681a      	ldreq	r2, [r3, #0]
 801ecf8:	685b      	ldreq	r3, [r3, #4]
 801ecfa:	6063      	str	r3, [r4, #4]
 801ecfc:	bf04      	itt	eq
 801ecfe:	1852      	addeq	r2, r2, r1
 801ed00:	6022      	streq	r2, [r4, #0]
 801ed02:	6004      	str	r4, [r0, #0]
 801ed04:	e7ec      	b.n	801ece0 <_free_r+0x24>
 801ed06:	4613      	mov	r3, r2
 801ed08:	685a      	ldr	r2, [r3, #4]
 801ed0a:	b10a      	cbz	r2, 801ed10 <_free_r+0x54>
 801ed0c:	42a2      	cmp	r2, r4
 801ed0e:	d9fa      	bls.n	801ed06 <_free_r+0x4a>
 801ed10:	6819      	ldr	r1, [r3, #0]
 801ed12:	1858      	adds	r0, r3, r1
 801ed14:	42a0      	cmp	r0, r4
 801ed16:	d10b      	bne.n	801ed30 <_free_r+0x74>
 801ed18:	6820      	ldr	r0, [r4, #0]
 801ed1a:	4401      	add	r1, r0
 801ed1c:	1858      	adds	r0, r3, r1
 801ed1e:	4282      	cmp	r2, r0
 801ed20:	6019      	str	r1, [r3, #0]
 801ed22:	d1dd      	bne.n	801ece0 <_free_r+0x24>
 801ed24:	6810      	ldr	r0, [r2, #0]
 801ed26:	6852      	ldr	r2, [r2, #4]
 801ed28:	605a      	str	r2, [r3, #4]
 801ed2a:	4401      	add	r1, r0
 801ed2c:	6019      	str	r1, [r3, #0]
 801ed2e:	e7d7      	b.n	801ece0 <_free_r+0x24>
 801ed30:	d902      	bls.n	801ed38 <_free_r+0x7c>
 801ed32:	230c      	movs	r3, #12
 801ed34:	602b      	str	r3, [r5, #0]
 801ed36:	e7d3      	b.n	801ece0 <_free_r+0x24>
 801ed38:	6820      	ldr	r0, [r4, #0]
 801ed3a:	1821      	adds	r1, r4, r0
 801ed3c:	428a      	cmp	r2, r1
 801ed3e:	bf04      	itt	eq
 801ed40:	6811      	ldreq	r1, [r2, #0]
 801ed42:	6852      	ldreq	r2, [r2, #4]
 801ed44:	6062      	str	r2, [r4, #4]
 801ed46:	bf04      	itt	eq
 801ed48:	1809      	addeq	r1, r1, r0
 801ed4a:	6021      	streq	r1, [r4, #0]
 801ed4c:	605c      	str	r4, [r3, #4]
 801ed4e:	e7c7      	b.n	801ece0 <_free_r+0x24>
 801ed50:	bd38      	pop	{r3, r4, r5, pc}
 801ed52:	bf00      	nop
 801ed54:	20001af8 	.word	0x20001af8

0801ed58 <_malloc_r>:
 801ed58:	b570      	push	{r4, r5, r6, lr}
 801ed5a:	1ccd      	adds	r5, r1, #3
 801ed5c:	f025 0503 	bic.w	r5, r5, #3
 801ed60:	3508      	adds	r5, #8
 801ed62:	2d0c      	cmp	r5, #12
 801ed64:	bf38      	it	cc
 801ed66:	250c      	movcc	r5, #12
 801ed68:	2d00      	cmp	r5, #0
 801ed6a:	4606      	mov	r6, r0
 801ed6c:	db01      	blt.n	801ed72 <_malloc_r+0x1a>
 801ed6e:	42a9      	cmp	r1, r5
 801ed70:	d903      	bls.n	801ed7a <_malloc_r+0x22>
 801ed72:	230c      	movs	r3, #12
 801ed74:	6033      	str	r3, [r6, #0]
 801ed76:	2000      	movs	r0, #0
 801ed78:	bd70      	pop	{r4, r5, r6, pc}
 801ed7a:	f000 fd0b 	bl	801f794 <__malloc_lock>
 801ed7e:	4a21      	ldr	r2, [pc, #132]	; (801ee04 <_malloc_r+0xac>)
 801ed80:	6814      	ldr	r4, [r2, #0]
 801ed82:	4621      	mov	r1, r4
 801ed84:	b991      	cbnz	r1, 801edac <_malloc_r+0x54>
 801ed86:	4c20      	ldr	r4, [pc, #128]	; (801ee08 <_malloc_r+0xb0>)
 801ed88:	6823      	ldr	r3, [r4, #0]
 801ed8a:	b91b      	cbnz	r3, 801ed94 <_malloc_r+0x3c>
 801ed8c:	4630      	mov	r0, r6
 801ed8e:	f000 fc57 	bl	801f640 <_sbrk_r>
 801ed92:	6020      	str	r0, [r4, #0]
 801ed94:	4629      	mov	r1, r5
 801ed96:	4630      	mov	r0, r6
 801ed98:	f000 fc52 	bl	801f640 <_sbrk_r>
 801ed9c:	1c43      	adds	r3, r0, #1
 801ed9e:	d124      	bne.n	801edea <_malloc_r+0x92>
 801eda0:	230c      	movs	r3, #12
 801eda2:	6033      	str	r3, [r6, #0]
 801eda4:	4630      	mov	r0, r6
 801eda6:	f000 fcf6 	bl	801f796 <__malloc_unlock>
 801edaa:	e7e4      	b.n	801ed76 <_malloc_r+0x1e>
 801edac:	680b      	ldr	r3, [r1, #0]
 801edae:	1b5b      	subs	r3, r3, r5
 801edb0:	d418      	bmi.n	801ede4 <_malloc_r+0x8c>
 801edb2:	2b0b      	cmp	r3, #11
 801edb4:	d90f      	bls.n	801edd6 <_malloc_r+0x7e>
 801edb6:	600b      	str	r3, [r1, #0]
 801edb8:	50cd      	str	r5, [r1, r3]
 801edba:	18cc      	adds	r4, r1, r3
 801edbc:	4630      	mov	r0, r6
 801edbe:	f000 fcea 	bl	801f796 <__malloc_unlock>
 801edc2:	f104 000b 	add.w	r0, r4, #11
 801edc6:	1d23      	adds	r3, r4, #4
 801edc8:	f020 0007 	bic.w	r0, r0, #7
 801edcc:	1ac3      	subs	r3, r0, r3
 801edce:	d0d3      	beq.n	801ed78 <_malloc_r+0x20>
 801edd0:	425a      	negs	r2, r3
 801edd2:	50e2      	str	r2, [r4, r3]
 801edd4:	e7d0      	b.n	801ed78 <_malloc_r+0x20>
 801edd6:	428c      	cmp	r4, r1
 801edd8:	684b      	ldr	r3, [r1, #4]
 801edda:	bf16      	itet	ne
 801eddc:	6063      	strne	r3, [r4, #4]
 801edde:	6013      	streq	r3, [r2, #0]
 801ede0:	460c      	movne	r4, r1
 801ede2:	e7eb      	b.n	801edbc <_malloc_r+0x64>
 801ede4:	460c      	mov	r4, r1
 801ede6:	6849      	ldr	r1, [r1, #4]
 801ede8:	e7cc      	b.n	801ed84 <_malloc_r+0x2c>
 801edea:	1cc4      	adds	r4, r0, #3
 801edec:	f024 0403 	bic.w	r4, r4, #3
 801edf0:	42a0      	cmp	r0, r4
 801edf2:	d005      	beq.n	801ee00 <_malloc_r+0xa8>
 801edf4:	1a21      	subs	r1, r4, r0
 801edf6:	4630      	mov	r0, r6
 801edf8:	f000 fc22 	bl	801f640 <_sbrk_r>
 801edfc:	3001      	adds	r0, #1
 801edfe:	d0cf      	beq.n	801eda0 <_malloc_r+0x48>
 801ee00:	6025      	str	r5, [r4, #0]
 801ee02:	e7db      	b.n	801edbc <_malloc_r+0x64>
 801ee04:	20001af8 	.word	0x20001af8
 801ee08:	20001afc 	.word	0x20001afc

0801ee0c <__ssputs_r>:
 801ee0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee10:	688e      	ldr	r6, [r1, #8]
 801ee12:	429e      	cmp	r6, r3
 801ee14:	4682      	mov	sl, r0
 801ee16:	460c      	mov	r4, r1
 801ee18:	4690      	mov	r8, r2
 801ee1a:	4699      	mov	r9, r3
 801ee1c:	d837      	bhi.n	801ee8e <__ssputs_r+0x82>
 801ee1e:	898a      	ldrh	r2, [r1, #12]
 801ee20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ee24:	d031      	beq.n	801ee8a <__ssputs_r+0x7e>
 801ee26:	6825      	ldr	r5, [r4, #0]
 801ee28:	6909      	ldr	r1, [r1, #16]
 801ee2a:	1a6f      	subs	r7, r5, r1
 801ee2c:	6965      	ldr	r5, [r4, #20]
 801ee2e:	2302      	movs	r3, #2
 801ee30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee34:	fb95 f5f3 	sdiv	r5, r5, r3
 801ee38:	f109 0301 	add.w	r3, r9, #1
 801ee3c:	443b      	add	r3, r7
 801ee3e:	429d      	cmp	r5, r3
 801ee40:	bf38      	it	cc
 801ee42:	461d      	movcc	r5, r3
 801ee44:	0553      	lsls	r3, r2, #21
 801ee46:	d530      	bpl.n	801eeaa <__ssputs_r+0x9e>
 801ee48:	4629      	mov	r1, r5
 801ee4a:	f7ff ff85 	bl	801ed58 <_malloc_r>
 801ee4e:	4606      	mov	r6, r0
 801ee50:	b950      	cbnz	r0, 801ee68 <__ssputs_r+0x5c>
 801ee52:	230c      	movs	r3, #12
 801ee54:	f8ca 3000 	str.w	r3, [sl]
 801ee58:	89a3      	ldrh	r3, [r4, #12]
 801ee5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee5e:	81a3      	strh	r3, [r4, #12]
 801ee60:	f04f 30ff 	mov.w	r0, #4294967295
 801ee64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee68:	463a      	mov	r2, r7
 801ee6a:	6921      	ldr	r1, [r4, #16]
 801ee6c:	f7ff fb71 	bl	801e552 <memcpy>
 801ee70:	89a3      	ldrh	r3, [r4, #12]
 801ee72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ee76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ee7a:	81a3      	strh	r3, [r4, #12]
 801ee7c:	6126      	str	r6, [r4, #16]
 801ee7e:	6165      	str	r5, [r4, #20]
 801ee80:	443e      	add	r6, r7
 801ee82:	1bed      	subs	r5, r5, r7
 801ee84:	6026      	str	r6, [r4, #0]
 801ee86:	60a5      	str	r5, [r4, #8]
 801ee88:	464e      	mov	r6, r9
 801ee8a:	454e      	cmp	r6, r9
 801ee8c:	d900      	bls.n	801ee90 <__ssputs_r+0x84>
 801ee8e:	464e      	mov	r6, r9
 801ee90:	4632      	mov	r2, r6
 801ee92:	4641      	mov	r1, r8
 801ee94:	6820      	ldr	r0, [r4, #0]
 801ee96:	f7ff fb67 	bl	801e568 <memmove>
 801ee9a:	68a3      	ldr	r3, [r4, #8]
 801ee9c:	1b9b      	subs	r3, r3, r6
 801ee9e:	60a3      	str	r3, [r4, #8]
 801eea0:	6823      	ldr	r3, [r4, #0]
 801eea2:	441e      	add	r6, r3
 801eea4:	6026      	str	r6, [r4, #0]
 801eea6:	2000      	movs	r0, #0
 801eea8:	e7dc      	b.n	801ee64 <__ssputs_r+0x58>
 801eeaa:	462a      	mov	r2, r5
 801eeac:	f000 fc74 	bl	801f798 <_realloc_r>
 801eeb0:	4606      	mov	r6, r0
 801eeb2:	2800      	cmp	r0, #0
 801eeb4:	d1e2      	bne.n	801ee7c <__ssputs_r+0x70>
 801eeb6:	6921      	ldr	r1, [r4, #16]
 801eeb8:	4650      	mov	r0, sl
 801eeba:	f7ff feff 	bl	801ecbc <_free_r>
 801eebe:	e7c8      	b.n	801ee52 <__ssputs_r+0x46>

0801eec0 <_svfiprintf_r>:
 801eec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eec4:	461d      	mov	r5, r3
 801eec6:	898b      	ldrh	r3, [r1, #12]
 801eec8:	061f      	lsls	r7, r3, #24
 801eeca:	b09d      	sub	sp, #116	; 0x74
 801eecc:	4680      	mov	r8, r0
 801eece:	460c      	mov	r4, r1
 801eed0:	4616      	mov	r6, r2
 801eed2:	d50f      	bpl.n	801eef4 <_svfiprintf_r+0x34>
 801eed4:	690b      	ldr	r3, [r1, #16]
 801eed6:	b96b      	cbnz	r3, 801eef4 <_svfiprintf_r+0x34>
 801eed8:	2140      	movs	r1, #64	; 0x40
 801eeda:	f7ff ff3d 	bl	801ed58 <_malloc_r>
 801eede:	6020      	str	r0, [r4, #0]
 801eee0:	6120      	str	r0, [r4, #16]
 801eee2:	b928      	cbnz	r0, 801eef0 <_svfiprintf_r+0x30>
 801eee4:	230c      	movs	r3, #12
 801eee6:	f8c8 3000 	str.w	r3, [r8]
 801eeea:	f04f 30ff 	mov.w	r0, #4294967295
 801eeee:	e0c8      	b.n	801f082 <_svfiprintf_r+0x1c2>
 801eef0:	2340      	movs	r3, #64	; 0x40
 801eef2:	6163      	str	r3, [r4, #20]
 801eef4:	2300      	movs	r3, #0
 801eef6:	9309      	str	r3, [sp, #36]	; 0x24
 801eef8:	2320      	movs	r3, #32
 801eefa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eefe:	2330      	movs	r3, #48	; 0x30
 801ef00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ef04:	9503      	str	r5, [sp, #12]
 801ef06:	f04f 0b01 	mov.w	fp, #1
 801ef0a:	4637      	mov	r7, r6
 801ef0c:	463d      	mov	r5, r7
 801ef0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ef12:	b10b      	cbz	r3, 801ef18 <_svfiprintf_r+0x58>
 801ef14:	2b25      	cmp	r3, #37	; 0x25
 801ef16:	d13e      	bne.n	801ef96 <_svfiprintf_r+0xd6>
 801ef18:	ebb7 0a06 	subs.w	sl, r7, r6
 801ef1c:	d00b      	beq.n	801ef36 <_svfiprintf_r+0x76>
 801ef1e:	4653      	mov	r3, sl
 801ef20:	4632      	mov	r2, r6
 801ef22:	4621      	mov	r1, r4
 801ef24:	4640      	mov	r0, r8
 801ef26:	f7ff ff71 	bl	801ee0c <__ssputs_r>
 801ef2a:	3001      	adds	r0, #1
 801ef2c:	f000 80a4 	beq.w	801f078 <_svfiprintf_r+0x1b8>
 801ef30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef32:	4453      	add	r3, sl
 801ef34:	9309      	str	r3, [sp, #36]	; 0x24
 801ef36:	783b      	ldrb	r3, [r7, #0]
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	f000 809d 	beq.w	801f078 <_svfiprintf_r+0x1b8>
 801ef3e:	2300      	movs	r3, #0
 801ef40:	f04f 32ff 	mov.w	r2, #4294967295
 801ef44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef48:	9304      	str	r3, [sp, #16]
 801ef4a:	9307      	str	r3, [sp, #28]
 801ef4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ef50:	931a      	str	r3, [sp, #104]	; 0x68
 801ef52:	462f      	mov	r7, r5
 801ef54:	2205      	movs	r2, #5
 801ef56:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ef5a:	4850      	ldr	r0, [pc, #320]	; (801f09c <_svfiprintf_r+0x1dc>)
 801ef5c:	f7e1 faa0 	bl	80004a0 <memchr>
 801ef60:	9b04      	ldr	r3, [sp, #16]
 801ef62:	b9d0      	cbnz	r0, 801ef9a <_svfiprintf_r+0xda>
 801ef64:	06d9      	lsls	r1, r3, #27
 801ef66:	bf44      	itt	mi
 801ef68:	2220      	movmi	r2, #32
 801ef6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ef6e:	071a      	lsls	r2, r3, #28
 801ef70:	bf44      	itt	mi
 801ef72:	222b      	movmi	r2, #43	; 0x2b
 801ef74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ef78:	782a      	ldrb	r2, [r5, #0]
 801ef7a:	2a2a      	cmp	r2, #42	; 0x2a
 801ef7c:	d015      	beq.n	801efaa <_svfiprintf_r+0xea>
 801ef7e:	9a07      	ldr	r2, [sp, #28]
 801ef80:	462f      	mov	r7, r5
 801ef82:	2000      	movs	r0, #0
 801ef84:	250a      	movs	r5, #10
 801ef86:	4639      	mov	r1, r7
 801ef88:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ef8c:	3b30      	subs	r3, #48	; 0x30
 801ef8e:	2b09      	cmp	r3, #9
 801ef90:	d94d      	bls.n	801f02e <_svfiprintf_r+0x16e>
 801ef92:	b1b8      	cbz	r0, 801efc4 <_svfiprintf_r+0x104>
 801ef94:	e00f      	b.n	801efb6 <_svfiprintf_r+0xf6>
 801ef96:	462f      	mov	r7, r5
 801ef98:	e7b8      	b.n	801ef0c <_svfiprintf_r+0x4c>
 801ef9a:	4a40      	ldr	r2, [pc, #256]	; (801f09c <_svfiprintf_r+0x1dc>)
 801ef9c:	1a80      	subs	r0, r0, r2
 801ef9e:	fa0b f000 	lsl.w	r0, fp, r0
 801efa2:	4318      	orrs	r0, r3
 801efa4:	9004      	str	r0, [sp, #16]
 801efa6:	463d      	mov	r5, r7
 801efa8:	e7d3      	b.n	801ef52 <_svfiprintf_r+0x92>
 801efaa:	9a03      	ldr	r2, [sp, #12]
 801efac:	1d11      	adds	r1, r2, #4
 801efae:	6812      	ldr	r2, [r2, #0]
 801efb0:	9103      	str	r1, [sp, #12]
 801efb2:	2a00      	cmp	r2, #0
 801efb4:	db01      	blt.n	801efba <_svfiprintf_r+0xfa>
 801efb6:	9207      	str	r2, [sp, #28]
 801efb8:	e004      	b.n	801efc4 <_svfiprintf_r+0x104>
 801efba:	4252      	negs	r2, r2
 801efbc:	f043 0302 	orr.w	r3, r3, #2
 801efc0:	9207      	str	r2, [sp, #28]
 801efc2:	9304      	str	r3, [sp, #16]
 801efc4:	783b      	ldrb	r3, [r7, #0]
 801efc6:	2b2e      	cmp	r3, #46	; 0x2e
 801efc8:	d10c      	bne.n	801efe4 <_svfiprintf_r+0x124>
 801efca:	787b      	ldrb	r3, [r7, #1]
 801efcc:	2b2a      	cmp	r3, #42	; 0x2a
 801efce:	d133      	bne.n	801f038 <_svfiprintf_r+0x178>
 801efd0:	9b03      	ldr	r3, [sp, #12]
 801efd2:	1d1a      	adds	r2, r3, #4
 801efd4:	681b      	ldr	r3, [r3, #0]
 801efd6:	9203      	str	r2, [sp, #12]
 801efd8:	2b00      	cmp	r3, #0
 801efda:	bfb8      	it	lt
 801efdc:	f04f 33ff 	movlt.w	r3, #4294967295
 801efe0:	3702      	adds	r7, #2
 801efe2:	9305      	str	r3, [sp, #20]
 801efe4:	4d2e      	ldr	r5, [pc, #184]	; (801f0a0 <_svfiprintf_r+0x1e0>)
 801efe6:	7839      	ldrb	r1, [r7, #0]
 801efe8:	2203      	movs	r2, #3
 801efea:	4628      	mov	r0, r5
 801efec:	f7e1 fa58 	bl	80004a0 <memchr>
 801eff0:	b138      	cbz	r0, 801f002 <_svfiprintf_r+0x142>
 801eff2:	2340      	movs	r3, #64	; 0x40
 801eff4:	1b40      	subs	r0, r0, r5
 801eff6:	fa03 f000 	lsl.w	r0, r3, r0
 801effa:	9b04      	ldr	r3, [sp, #16]
 801effc:	4303      	orrs	r3, r0
 801effe:	3701      	adds	r7, #1
 801f000:	9304      	str	r3, [sp, #16]
 801f002:	7839      	ldrb	r1, [r7, #0]
 801f004:	4827      	ldr	r0, [pc, #156]	; (801f0a4 <_svfiprintf_r+0x1e4>)
 801f006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f00a:	2206      	movs	r2, #6
 801f00c:	1c7e      	adds	r6, r7, #1
 801f00e:	f7e1 fa47 	bl	80004a0 <memchr>
 801f012:	2800      	cmp	r0, #0
 801f014:	d038      	beq.n	801f088 <_svfiprintf_r+0x1c8>
 801f016:	4b24      	ldr	r3, [pc, #144]	; (801f0a8 <_svfiprintf_r+0x1e8>)
 801f018:	bb13      	cbnz	r3, 801f060 <_svfiprintf_r+0x1a0>
 801f01a:	9b03      	ldr	r3, [sp, #12]
 801f01c:	3307      	adds	r3, #7
 801f01e:	f023 0307 	bic.w	r3, r3, #7
 801f022:	3308      	adds	r3, #8
 801f024:	9303      	str	r3, [sp, #12]
 801f026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f028:	444b      	add	r3, r9
 801f02a:	9309      	str	r3, [sp, #36]	; 0x24
 801f02c:	e76d      	b.n	801ef0a <_svfiprintf_r+0x4a>
 801f02e:	fb05 3202 	mla	r2, r5, r2, r3
 801f032:	2001      	movs	r0, #1
 801f034:	460f      	mov	r7, r1
 801f036:	e7a6      	b.n	801ef86 <_svfiprintf_r+0xc6>
 801f038:	2300      	movs	r3, #0
 801f03a:	3701      	adds	r7, #1
 801f03c:	9305      	str	r3, [sp, #20]
 801f03e:	4619      	mov	r1, r3
 801f040:	250a      	movs	r5, #10
 801f042:	4638      	mov	r0, r7
 801f044:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f048:	3a30      	subs	r2, #48	; 0x30
 801f04a:	2a09      	cmp	r2, #9
 801f04c:	d903      	bls.n	801f056 <_svfiprintf_r+0x196>
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d0c8      	beq.n	801efe4 <_svfiprintf_r+0x124>
 801f052:	9105      	str	r1, [sp, #20]
 801f054:	e7c6      	b.n	801efe4 <_svfiprintf_r+0x124>
 801f056:	fb05 2101 	mla	r1, r5, r1, r2
 801f05a:	2301      	movs	r3, #1
 801f05c:	4607      	mov	r7, r0
 801f05e:	e7f0      	b.n	801f042 <_svfiprintf_r+0x182>
 801f060:	ab03      	add	r3, sp, #12
 801f062:	9300      	str	r3, [sp, #0]
 801f064:	4622      	mov	r2, r4
 801f066:	4b11      	ldr	r3, [pc, #68]	; (801f0ac <_svfiprintf_r+0x1ec>)
 801f068:	a904      	add	r1, sp, #16
 801f06a:	4640      	mov	r0, r8
 801f06c:	f3af 8000 	nop.w
 801f070:	f1b0 3fff 	cmp.w	r0, #4294967295
 801f074:	4681      	mov	r9, r0
 801f076:	d1d6      	bne.n	801f026 <_svfiprintf_r+0x166>
 801f078:	89a3      	ldrh	r3, [r4, #12]
 801f07a:	065b      	lsls	r3, r3, #25
 801f07c:	f53f af35 	bmi.w	801eeea <_svfiprintf_r+0x2a>
 801f080:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f082:	b01d      	add	sp, #116	; 0x74
 801f084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f088:	ab03      	add	r3, sp, #12
 801f08a:	9300      	str	r3, [sp, #0]
 801f08c:	4622      	mov	r2, r4
 801f08e:	4b07      	ldr	r3, [pc, #28]	; (801f0ac <_svfiprintf_r+0x1ec>)
 801f090:	a904      	add	r1, sp, #16
 801f092:	4640      	mov	r0, r8
 801f094:	f000 f9c2 	bl	801f41c <_printf_i>
 801f098:	e7ea      	b.n	801f070 <_svfiprintf_r+0x1b0>
 801f09a:	bf00      	nop
 801f09c:	080259a4 	.word	0x080259a4
 801f0a0:	080259aa 	.word	0x080259aa
 801f0a4:	080259ae 	.word	0x080259ae
 801f0a8:	00000000 	.word	0x00000000
 801f0ac:	0801ee0d 	.word	0x0801ee0d

0801f0b0 <__sfputc_r>:
 801f0b0:	6893      	ldr	r3, [r2, #8]
 801f0b2:	3b01      	subs	r3, #1
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	b410      	push	{r4}
 801f0b8:	6093      	str	r3, [r2, #8]
 801f0ba:	da08      	bge.n	801f0ce <__sfputc_r+0x1e>
 801f0bc:	6994      	ldr	r4, [r2, #24]
 801f0be:	42a3      	cmp	r3, r4
 801f0c0:	db01      	blt.n	801f0c6 <__sfputc_r+0x16>
 801f0c2:	290a      	cmp	r1, #10
 801f0c4:	d103      	bne.n	801f0ce <__sfputc_r+0x1e>
 801f0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f0ca:	f7ff bb51 	b.w	801e770 <__swbuf_r>
 801f0ce:	6813      	ldr	r3, [r2, #0]
 801f0d0:	1c58      	adds	r0, r3, #1
 801f0d2:	6010      	str	r0, [r2, #0]
 801f0d4:	7019      	strb	r1, [r3, #0]
 801f0d6:	4608      	mov	r0, r1
 801f0d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f0dc:	4770      	bx	lr

0801f0de <__sfputs_r>:
 801f0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0e0:	4606      	mov	r6, r0
 801f0e2:	460f      	mov	r7, r1
 801f0e4:	4614      	mov	r4, r2
 801f0e6:	18d5      	adds	r5, r2, r3
 801f0e8:	42ac      	cmp	r4, r5
 801f0ea:	d101      	bne.n	801f0f0 <__sfputs_r+0x12>
 801f0ec:	2000      	movs	r0, #0
 801f0ee:	e007      	b.n	801f100 <__sfputs_r+0x22>
 801f0f0:	463a      	mov	r2, r7
 801f0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f0f6:	4630      	mov	r0, r6
 801f0f8:	f7ff ffda 	bl	801f0b0 <__sfputc_r>
 801f0fc:	1c43      	adds	r3, r0, #1
 801f0fe:	d1f3      	bne.n	801f0e8 <__sfputs_r+0xa>
 801f100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f104 <_vfiprintf_r>:
 801f104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f108:	460c      	mov	r4, r1
 801f10a:	b09d      	sub	sp, #116	; 0x74
 801f10c:	4617      	mov	r7, r2
 801f10e:	461d      	mov	r5, r3
 801f110:	4606      	mov	r6, r0
 801f112:	b118      	cbz	r0, 801f11c <_vfiprintf_r+0x18>
 801f114:	6983      	ldr	r3, [r0, #24]
 801f116:	b90b      	cbnz	r3, 801f11c <_vfiprintf_r+0x18>
 801f118:	f7ff fcda 	bl	801ead0 <__sinit>
 801f11c:	4b7c      	ldr	r3, [pc, #496]	; (801f310 <_vfiprintf_r+0x20c>)
 801f11e:	429c      	cmp	r4, r3
 801f120:	d158      	bne.n	801f1d4 <_vfiprintf_r+0xd0>
 801f122:	6874      	ldr	r4, [r6, #4]
 801f124:	89a3      	ldrh	r3, [r4, #12]
 801f126:	0718      	lsls	r0, r3, #28
 801f128:	d55e      	bpl.n	801f1e8 <_vfiprintf_r+0xe4>
 801f12a:	6923      	ldr	r3, [r4, #16]
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	d05b      	beq.n	801f1e8 <_vfiprintf_r+0xe4>
 801f130:	2300      	movs	r3, #0
 801f132:	9309      	str	r3, [sp, #36]	; 0x24
 801f134:	2320      	movs	r3, #32
 801f136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f13a:	2330      	movs	r3, #48	; 0x30
 801f13c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f140:	9503      	str	r5, [sp, #12]
 801f142:	f04f 0b01 	mov.w	fp, #1
 801f146:	46b8      	mov	r8, r7
 801f148:	4645      	mov	r5, r8
 801f14a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f14e:	b10b      	cbz	r3, 801f154 <_vfiprintf_r+0x50>
 801f150:	2b25      	cmp	r3, #37	; 0x25
 801f152:	d154      	bne.n	801f1fe <_vfiprintf_r+0xfa>
 801f154:	ebb8 0a07 	subs.w	sl, r8, r7
 801f158:	d00b      	beq.n	801f172 <_vfiprintf_r+0x6e>
 801f15a:	4653      	mov	r3, sl
 801f15c:	463a      	mov	r2, r7
 801f15e:	4621      	mov	r1, r4
 801f160:	4630      	mov	r0, r6
 801f162:	f7ff ffbc 	bl	801f0de <__sfputs_r>
 801f166:	3001      	adds	r0, #1
 801f168:	f000 80c2 	beq.w	801f2f0 <_vfiprintf_r+0x1ec>
 801f16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f16e:	4453      	add	r3, sl
 801f170:	9309      	str	r3, [sp, #36]	; 0x24
 801f172:	f898 3000 	ldrb.w	r3, [r8]
 801f176:	2b00      	cmp	r3, #0
 801f178:	f000 80ba 	beq.w	801f2f0 <_vfiprintf_r+0x1ec>
 801f17c:	2300      	movs	r3, #0
 801f17e:	f04f 32ff 	mov.w	r2, #4294967295
 801f182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f186:	9304      	str	r3, [sp, #16]
 801f188:	9307      	str	r3, [sp, #28]
 801f18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f18e:	931a      	str	r3, [sp, #104]	; 0x68
 801f190:	46a8      	mov	r8, r5
 801f192:	2205      	movs	r2, #5
 801f194:	f818 1b01 	ldrb.w	r1, [r8], #1
 801f198:	485e      	ldr	r0, [pc, #376]	; (801f314 <_vfiprintf_r+0x210>)
 801f19a:	f7e1 f981 	bl	80004a0 <memchr>
 801f19e:	9b04      	ldr	r3, [sp, #16]
 801f1a0:	bb78      	cbnz	r0, 801f202 <_vfiprintf_r+0xfe>
 801f1a2:	06d9      	lsls	r1, r3, #27
 801f1a4:	bf44      	itt	mi
 801f1a6:	2220      	movmi	r2, #32
 801f1a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f1ac:	071a      	lsls	r2, r3, #28
 801f1ae:	bf44      	itt	mi
 801f1b0:	222b      	movmi	r2, #43	; 0x2b
 801f1b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f1b6:	782a      	ldrb	r2, [r5, #0]
 801f1b8:	2a2a      	cmp	r2, #42	; 0x2a
 801f1ba:	d02a      	beq.n	801f212 <_vfiprintf_r+0x10e>
 801f1bc:	9a07      	ldr	r2, [sp, #28]
 801f1be:	46a8      	mov	r8, r5
 801f1c0:	2000      	movs	r0, #0
 801f1c2:	250a      	movs	r5, #10
 801f1c4:	4641      	mov	r1, r8
 801f1c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f1ca:	3b30      	subs	r3, #48	; 0x30
 801f1cc:	2b09      	cmp	r3, #9
 801f1ce:	d969      	bls.n	801f2a4 <_vfiprintf_r+0x1a0>
 801f1d0:	b360      	cbz	r0, 801f22c <_vfiprintf_r+0x128>
 801f1d2:	e024      	b.n	801f21e <_vfiprintf_r+0x11a>
 801f1d4:	4b50      	ldr	r3, [pc, #320]	; (801f318 <_vfiprintf_r+0x214>)
 801f1d6:	429c      	cmp	r4, r3
 801f1d8:	d101      	bne.n	801f1de <_vfiprintf_r+0xda>
 801f1da:	68b4      	ldr	r4, [r6, #8]
 801f1dc:	e7a2      	b.n	801f124 <_vfiprintf_r+0x20>
 801f1de:	4b4f      	ldr	r3, [pc, #316]	; (801f31c <_vfiprintf_r+0x218>)
 801f1e0:	429c      	cmp	r4, r3
 801f1e2:	bf08      	it	eq
 801f1e4:	68f4      	ldreq	r4, [r6, #12]
 801f1e6:	e79d      	b.n	801f124 <_vfiprintf_r+0x20>
 801f1e8:	4621      	mov	r1, r4
 801f1ea:	4630      	mov	r0, r6
 801f1ec:	f7ff fb12 	bl	801e814 <__swsetup_r>
 801f1f0:	2800      	cmp	r0, #0
 801f1f2:	d09d      	beq.n	801f130 <_vfiprintf_r+0x2c>
 801f1f4:	f04f 30ff 	mov.w	r0, #4294967295
 801f1f8:	b01d      	add	sp, #116	; 0x74
 801f1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1fe:	46a8      	mov	r8, r5
 801f200:	e7a2      	b.n	801f148 <_vfiprintf_r+0x44>
 801f202:	4a44      	ldr	r2, [pc, #272]	; (801f314 <_vfiprintf_r+0x210>)
 801f204:	1a80      	subs	r0, r0, r2
 801f206:	fa0b f000 	lsl.w	r0, fp, r0
 801f20a:	4318      	orrs	r0, r3
 801f20c:	9004      	str	r0, [sp, #16]
 801f20e:	4645      	mov	r5, r8
 801f210:	e7be      	b.n	801f190 <_vfiprintf_r+0x8c>
 801f212:	9a03      	ldr	r2, [sp, #12]
 801f214:	1d11      	adds	r1, r2, #4
 801f216:	6812      	ldr	r2, [r2, #0]
 801f218:	9103      	str	r1, [sp, #12]
 801f21a:	2a00      	cmp	r2, #0
 801f21c:	db01      	blt.n	801f222 <_vfiprintf_r+0x11e>
 801f21e:	9207      	str	r2, [sp, #28]
 801f220:	e004      	b.n	801f22c <_vfiprintf_r+0x128>
 801f222:	4252      	negs	r2, r2
 801f224:	f043 0302 	orr.w	r3, r3, #2
 801f228:	9207      	str	r2, [sp, #28]
 801f22a:	9304      	str	r3, [sp, #16]
 801f22c:	f898 3000 	ldrb.w	r3, [r8]
 801f230:	2b2e      	cmp	r3, #46	; 0x2e
 801f232:	d10e      	bne.n	801f252 <_vfiprintf_r+0x14e>
 801f234:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f238:	2b2a      	cmp	r3, #42	; 0x2a
 801f23a:	d138      	bne.n	801f2ae <_vfiprintf_r+0x1aa>
 801f23c:	9b03      	ldr	r3, [sp, #12]
 801f23e:	1d1a      	adds	r2, r3, #4
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	9203      	str	r2, [sp, #12]
 801f244:	2b00      	cmp	r3, #0
 801f246:	bfb8      	it	lt
 801f248:	f04f 33ff 	movlt.w	r3, #4294967295
 801f24c:	f108 0802 	add.w	r8, r8, #2
 801f250:	9305      	str	r3, [sp, #20]
 801f252:	4d33      	ldr	r5, [pc, #204]	; (801f320 <_vfiprintf_r+0x21c>)
 801f254:	f898 1000 	ldrb.w	r1, [r8]
 801f258:	2203      	movs	r2, #3
 801f25a:	4628      	mov	r0, r5
 801f25c:	f7e1 f920 	bl	80004a0 <memchr>
 801f260:	b140      	cbz	r0, 801f274 <_vfiprintf_r+0x170>
 801f262:	2340      	movs	r3, #64	; 0x40
 801f264:	1b40      	subs	r0, r0, r5
 801f266:	fa03 f000 	lsl.w	r0, r3, r0
 801f26a:	9b04      	ldr	r3, [sp, #16]
 801f26c:	4303      	orrs	r3, r0
 801f26e:	f108 0801 	add.w	r8, r8, #1
 801f272:	9304      	str	r3, [sp, #16]
 801f274:	f898 1000 	ldrb.w	r1, [r8]
 801f278:	482a      	ldr	r0, [pc, #168]	; (801f324 <_vfiprintf_r+0x220>)
 801f27a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f27e:	2206      	movs	r2, #6
 801f280:	f108 0701 	add.w	r7, r8, #1
 801f284:	f7e1 f90c 	bl	80004a0 <memchr>
 801f288:	2800      	cmp	r0, #0
 801f28a:	d037      	beq.n	801f2fc <_vfiprintf_r+0x1f8>
 801f28c:	4b26      	ldr	r3, [pc, #152]	; (801f328 <_vfiprintf_r+0x224>)
 801f28e:	bb1b      	cbnz	r3, 801f2d8 <_vfiprintf_r+0x1d4>
 801f290:	9b03      	ldr	r3, [sp, #12]
 801f292:	3307      	adds	r3, #7
 801f294:	f023 0307 	bic.w	r3, r3, #7
 801f298:	3308      	adds	r3, #8
 801f29a:	9303      	str	r3, [sp, #12]
 801f29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f29e:	444b      	add	r3, r9
 801f2a0:	9309      	str	r3, [sp, #36]	; 0x24
 801f2a2:	e750      	b.n	801f146 <_vfiprintf_r+0x42>
 801f2a4:	fb05 3202 	mla	r2, r5, r2, r3
 801f2a8:	2001      	movs	r0, #1
 801f2aa:	4688      	mov	r8, r1
 801f2ac:	e78a      	b.n	801f1c4 <_vfiprintf_r+0xc0>
 801f2ae:	2300      	movs	r3, #0
 801f2b0:	f108 0801 	add.w	r8, r8, #1
 801f2b4:	9305      	str	r3, [sp, #20]
 801f2b6:	4619      	mov	r1, r3
 801f2b8:	250a      	movs	r5, #10
 801f2ba:	4640      	mov	r0, r8
 801f2bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f2c0:	3a30      	subs	r2, #48	; 0x30
 801f2c2:	2a09      	cmp	r2, #9
 801f2c4:	d903      	bls.n	801f2ce <_vfiprintf_r+0x1ca>
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	d0c3      	beq.n	801f252 <_vfiprintf_r+0x14e>
 801f2ca:	9105      	str	r1, [sp, #20]
 801f2cc:	e7c1      	b.n	801f252 <_vfiprintf_r+0x14e>
 801f2ce:	fb05 2101 	mla	r1, r5, r1, r2
 801f2d2:	2301      	movs	r3, #1
 801f2d4:	4680      	mov	r8, r0
 801f2d6:	e7f0      	b.n	801f2ba <_vfiprintf_r+0x1b6>
 801f2d8:	ab03      	add	r3, sp, #12
 801f2da:	9300      	str	r3, [sp, #0]
 801f2dc:	4622      	mov	r2, r4
 801f2de:	4b13      	ldr	r3, [pc, #76]	; (801f32c <_vfiprintf_r+0x228>)
 801f2e0:	a904      	add	r1, sp, #16
 801f2e2:	4630      	mov	r0, r6
 801f2e4:	f3af 8000 	nop.w
 801f2e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801f2ec:	4681      	mov	r9, r0
 801f2ee:	d1d5      	bne.n	801f29c <_vfiprintf_r+0x198>
 801f2f0:	89a3      	ldrh	r3, [r4, #12]
 801f2f2:	065b      	lsls	r3, r3, #25
 801f2f4:	f53f af7e 	bmi.w	801f1f4 <_vfiprintf_r+0xf0>
 801f2f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f2fa:	e77d      	b.n	801f1f8 <_vfiprintf_r+0xf4>
 801f2fc:	ab03      	add	r3, sp, #12
 801f2fe:	9300      	str	r3, [sp, #0]
 801f300:	4622      	mov	r2, r4
 801f302:	4b0a      	ldr	r3, [pc, #40]	; (801f32c <_vfiprintf_r+0x228>)
 801f304:	a904      	add	r1, sp, #16
 801f306:	4630      	mov	r0, r6
 801f308:	f000 f888 	bl	801f41c <_printf_i>
 801f30c:	e7ec      	b.n	801f2e8 <_vfiprintf_r+0x1e4>
 801f30e:	bf00      	nop
 801f310:	08025964 	.word	0x08025964
 801f314:	080259a4 	.word	0x080259a4
 801f318:	08025984 	.word	0x08025984
 801f31c:	08025944 	.word	0x08025944
 801f320:	080259aa 	.word	0x080259aa
 801f324:	080259ae 	.word	0x080259ae
 801f328:	00000000 	.word	0x00000000
 801f32c:	0801f0df 	.word	0x0801f0df

0801f330 <_printf_common>:
 801f330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f334:	4691      	mov	r9, r2
 801f336:	461f      	mov	r7, r3
 801f338:	688a      	ldr	r2, [r1, #8]
 801f33a:	690b      	ldr	r3, [r1, #16]
 801f33c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f340:	4293      	cmp	r3, r2
 801f342:	bfb8      	it	lt
 801f344:	4613      	movlt	r3, r2
 801f346:	f8c9 3000 	str.w	r3, [r9]
 801f34a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f34e:	4606      	mov	r6, r0
 801f350:	460c      	mov	r4, r1
 801f352:	b112      	cbz	r2, 801f35a <_printf_common+0x2a>
 801f354:	3301      	adds	r3, #1
 801f356:	f8c9 3000 	str.w	r3, [r9]
 801f35a:	6823      	ldr	r3, [r4, #0]
 801f35c:	0699      	lsls	r1, r3, #26
 801f35e:	bf42      	ittt	mi
 801f360:	f8d9 3000 	ldrmi.w	r3, [r9]
 801f364:	3302      	addmi	r3, #2
 801f366:	f8c9 3000 	strmi.w	r3, [r9]
 801f36a:	6825      	ldr	r5, [r4, #0]
 801f36c:	f015 0506 	ands.w	r5, r5, #6
 801f370:	d107      	bne.n	801f382 <_printf_common+0x52>
 801f372:	f104 0a19 	add.w	sl, r4, #25
 801f376:	68e3      	ldr	r3, [r4, #12]
 801f378:	f8d9 2000 	ldr.w	r2, [r9]
 801f37c:	1a9b      	subs	r3, r3, r2
 801f37e:	42ab      	cmp	r3, r5
 801f380:	dc28      	bgt.n	801f3d4 <_printf_common+0xa4>
 801f382:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801f386:	6822      	ldr	r2, [r4, #0]
 801f388:	3300      	adds	r3, #0
 801f38a:	bf18      	it	ne
 801f38c:	2301      	movne	r3, #1
 801f38e:	0692      	lsls	r2, r2, #26
 801f390:	d42d      	bmi.n	801f3ee <_printf_common+0xbe>
 801f392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f396:	4639      	mov	r1, r7
 801f398:	4630      	mov	r0, r6
 801f39a:	47c0      	blx	r8
 801f39c:	3001      	adds	r0, #1
 801f39e:	d020      	beq.n	801f3e2 <_printf_common+0xb2>
 801f3a0:	6823      	ldr	r3, [r4, #0]
 801f3a2:	68e5      	ldr	r5, [r4, #12]
 801f3a4:	f8d9 2000 	ldr.w	r2, [r9]
 801f3a8:	f003 0306 	and.w	r3, r3, #6
 801f3ac:	2b04      	cmp	r3, #4
 801f3ae:	bf08      	it	eq
 801f3b0:	1aad      	subeq	r5, r5, r2
 801f3b2:	68a3      	ldr	r3, [r4, #8]
 801f3b4:	6922      	ldr	r2, [r4, #16]
 801f3b6:	bf0c      	ite	eq
 801f3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f3bc:	2500      	movne	r5, #0
 801f3be:	4293      	cmp	r3, r2
 801f3c0:	bfc4      	itt	gt
 801f3c2:	1a9b      	subgt	r3, r3, r2
 801f3c4:	18ed      	addgt	r5, r5, r3
 801f3c6:	f04f 0900 	mov.w	r9, #0
 801f3ca:	341a      	adds	r4, #26
 801f3cc:	454d      	cmp	r5, r9
 801f3ce:	d11a      	bne.n	801f406 <_printf_common+0xd6>
 801f3d0:	2000      	movs	r0, #0
 801f3d2:	e008      	b.n	801f3e6 <_printf_common+0xb6>
 801f3d4:	2301      	movs	r3, #1
 801f3d6:	4652      	mov	r2, sl
 801f3d8:	4639      	mov	r1, r7
 801f3da:	4630      	mov	r0, r6
 801f3dc:	47c0      	blx	r8
 801f3de:	3001      	adds	r0, #1
 801f3e0:	d103      	bne.n	801f3ea <_printf_common+0xba>
 801f3e2:	f04f 30ff 	mov.w	r0, #4294967295
 801f3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3ea:	3501      	adds	r5, #1
 801f3ec:	e7c3      	b.n	801f376 <_printf_common+0x46>
 801f3ee:	18e1      	adds	r1, r4, r3
 801f3f0:	1c5a      	adds	r2, r3, #1
 801f3f2:	2030      	movs	r0, #48	; 0x30
 801f3f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f3f8:	4422      	add	r2, r4
 801f3fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f3fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f402:	3302      	adds	r3, #2
 801f404:	e7c5      	b.n	801f392 <_printf_common+0x62>
 801f406:	2301      	movs	r3, #1
 801f408:	4622      	mov	r2, r4
 801f40a:	4639      	mov	r1, r7
 801f40c:	4630      	mov	r0, r6
 801f40e:	47c0      	blx	r8
 801f410:	3001      	adds	r0, #1
 801f412:	d0e6      	beq.n	801f3e2 <_printf_common+0xb2>
 801f414:	f109 0901 	add.w	r9, r9, #1
 801f418:	e7d8      	b.n	801f3cc <_printf_common+0x9c>
	...

0801f41c <_printf_i>:
 801f41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f420:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801f424:	460c      	mov	r4, r1
 801f426:	7e09      	ldrb	r1, [r1, #24]
 801f428:	b085      	sub	sp, #20
 801f42a:	296e      	cmp	r1, #110	; 0x6e
 801f42c:	4617      	mov	r7, r2
 801f42e:	4606      	mov	r6, r0
 801f430:	4698      	mov	r8, r3
 801f432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f434:	f000 80b3 	beq.w	801f59e <_printf_i+0x182>
 801f438:	d822      	bhi.n	801f480 <_printf_i+0x64>
 801f43a:	2963      	cmp	r1, #99	; 0x63
 801f43c:	d036      	beq.n	801f4ac <_printf_i+0x90>
 801f43e:	d80a      	bhi.n	801f456 <_printf_i+0x3a>
 801f440:	2900      	cmp	r1, #0
 801f442:	f000 80b9 	beq.w	801f5b8 <_printf_i+0x19c>
 801f446:	2958      	cmp	r1, #88	; 0x58
 801f448:	f000 8083 	beq.w	801f552 <_printf_i+0x136>
 801f44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f450:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801f454:	e032      	b.n	801f4bc <_printf_i+0xa0>
 801f456:	2964      	cmp	r1, #100	; 0x64
 801f458:	d001      	beq.n	801f45e <_printf_i+0x42>
 801f45a:	2969      	cmp	r1, #105	; 0x69
 801f45c:	d1f6      	bne.n	801f44c <_printf_i+0x30>
 801f45e:	6820      	ldr	r0, [r4, #0]
 801f460:	6813      	ldr	r3, [r2, #0]
 801f462:	0605      	lsls	r5, r0, #24
 801f464:	f103 0104 	add.w	r1, r3, #4
 801f468:	d52a      	bpl.n	801f4c0 <_printf_i+0xa4>
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	6011      	str	r1, [r2, #0]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	da03      	bge.n	801f47a <_printf_i+0x5e>
 801f472:	222d      	movs	r2, #45	; 0x2d
 801f474:	425b      	negs	r3, r3
 801f476:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801f47a:	486f      	ldr	r0, [pc, #444]	; (801f638 <_printf_i+0x21c>)
 801f47c:	220a      	movs	r2, #10
 801f47e:	e039      	b.n	801f4f4 <_printf_i+0xd8>
 801f480:	2973      	cmp	r1, #115	; 0x73
 801f482:	f000 809d 	beq.w	801f5c0 <_printf_i+0x1a4>
 801f486:	d808      	bhi.n	801f49a <_printf_i+0x7e>
 801f488:	296f      	cmp	r1, #111	; 0x6f
 801f48a:	d020      	beq.n	801f4ce <_printf_i+0xb2>
 801f48c:	2970      	cmp	r1, #112	; 0x70
 801f48e:	d1dd      	bne.n	801f44c <_printf_i+0x30>
 801f490:	6823      	ldr	r3, [r4, #0]
 801f492:	f043 0320 	orr.w	r3, r3, #32
 801f496:	6023      	str	r3, [r4, #0]
 801f498:	e003      	b.n	801f4a2 <_printf_i+0x86>
 801f49a:	2975      	cmp	r1, #117	; 0x75
 801f49c:	d017      	beq.n	801f4ce <_printf_i+0xb2>
 801f49e:	2978      	cmp	r1, #120	; 0x78
 801f4a0:	d1d4      	bne.n	801f44c <_printf_i+0x30>
 801f4a2:	2378      	movs	r3, #120	; 0x78
 801f4a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f4a8:	4864      	ldr	r0, [pc, #400]	; (801f63c <_printf_i+0x220>)
 801f4aa:	e055      	b.n	801f558 <_printf_i+0x13c>
 801f4ac:	6813      	ldr	r3, [r2, #0]
 801f4ae:	1d19      	adds	r1, r3, #4
 801f4b0:	681b      	ldr	r3, [r3, #0]
 801f4b2:	6011      	str	r1, [r2, #0]
 801f4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f4bc:	2301      	movs	r3, #1
 801f4be:	e08c      	b.n	801f5da <_printf_i+0x1be>
 801f4c0:	681b      	ldr	r3, [r3, #0]
 801f4c2:	6011      	str	r1, [r2, #0]
 801f4c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f4c8:	bf18      	it	ne
 801f4ca:	b21b      	sxthne	r3, r3
 801f4cc:	e7cf      	b.n	801f46e <_printf_i+0x52>
 801f4ce:	6813      	ldr	r3, [r2, #0]
 801f4d0:	6825      	ldr	r5, [r4, #0]
 801f4d2:	1d18      	adds	r0, r3, #4
 801f4d4:	6010      	str	r0, [r2, #0]
 801f4d6:	0628      	lsls	r0, r5, #24
 801f4d8:	d501      	bpl.n	801f4de <_printf_i+0xc2>
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	e002      	b.n	801f4e4 <_printf_i+0xc8>
 801f4de:	0668      	lsls	r0, r5, #25
 801f4e0:	d5fb      	bpl.n	801f4da <_printf_i+0xbe>
 801f4e2:	881b      	ldrh	r3, [r3, #0]
 801f4e4:	4854      	ldr	r0, [pc, #336]	; (801f638 <_printf_i+0x21c>)
 801f4e6:	296f      	cmp	r1, #111	; 0x6f
 801f4e8:	bf14      	ite	ne
 801f4ea:	220a      	movne	r2, #10
 801f4ec:	2208      	moveq	r2, #8
 801f4ee:	2100      	movs	r1, #0
 801f4f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f4f4:	6865      	ldr	r5, [r4, #4]
 801f4f6:	60a5      	str	r5, [r4, #8]
 801f4f8:	2d00      	cmp	r5, #0
 801f4fa:	f2c0 8095 	blt.w	801f628 <_printf_i+0x20c>
 801f4fe:	6821      	ldr	r1, [r4, #0]
 801f500:	f021 0104 	bic.w	r1, r1, #4
 801f504:	6021      	str	r1, [r4, #0]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d13d      	bne.n	801f586 <_printf_i+0x16a>
 801f50a:	2d00      	cmp	r5, #0
 801f50c:	f040 808e 	bne.w	801f62c <_printf_i+0x210>
 801f510:	4665      	mov	r5, ip
 801f512:	2a08      	cmp	r2, #8
 801f514:	d10b      	bne.n	801f52e <_printf_i+0x112>
 801f516:	6823      	ldr	r3, [r4, #0]
 801f518:	07db      	lsls	r3, r3, #31
 801f51a:	d508      	bpl.n	801f52e <_printf_i+0x112>
 801f51c:	6923      	ldr	r3, [r4, #16]
 801f51e:	6862      	ldr	r2, [r4, #4]
 801f520:	429a      	cmp	r2, r3
 801f522:	bfde      	ittt	le
 801f524:	2330      	movle	r3, #48	; 0x30
 801f526:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f52a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f52e:	ebac 0305 	sub.w	r3, ip, r5
 801f532:	6123      	str	r3, [r4, #16]
 801f534:	f8cd 8000 	str.w	r8, [sp]
 801f538:	463b      	mov	r3, r7
 801f53a:	aa03      	add	r2, sp, #12
 801f53c:	4621      	mov	r1, r4
 801f53e:	4630      	mov	r0, r6
 801f540:	f7ff fef6 	bl	801f330 <_printf_common>
 801f544:	3001      	adds	r0, #1
 801f546:	d14d      	bne.n	801f5e4 <_printf_i+0x1c8>
 801f548:	f04f 30ff 	mov.w	r0, #4294967295
 801f54c:	b005      	add	sp, #20
 801f54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f552:	4839      	ldr	r0, [pc, #228]	; (801f638 <_printf_i+0x21c>)
 801f554:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801f558:	6813      	ldr	r3, [r2, #0]
 801f55a:	6821      	ldr	r1, [r4, #0]
 801f55c:	1d1d      	adds	r5, r3, #4
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	6015      	str	r5, [r2, #0]
 801f562:	060a      	lsls	r2, r1, #24
 801f564:	d50b      	bpl.n	801f57e <_printf_i+0x162>
 801f566:	07ca      	lsls	r2, r1, #31
 801f568:	bf44      	itt	mi
 801f56a:	f041 0120 	orrmi.w	r1, r1, #32
 801f56e:	6021      	strmi	r1, [r4, #0]
 801f570:	b91b      	cbnz	r3, 801f57a <_printf_i+0x15e>
 801f572:	6822      	ldr	r2, [r4, #0]
 801f574:	f022 0220 	bic.w	r2, r2, #32
 801f578:	6022      	str	r2, [r4, #0]
 801f57a:	2210      	movs	r2, #16
 801f57c:	e7b7      	b.n	801f4ee <_printf_i+0xd2>
 801f57e:	064d      	lsls	r5, r1, #25
 801f580:	bf48      	it	mi
 801f582:	b29b      	uxthmi	r3, r3
 801f584:	e7ef      	b.n	801f566 <_printf_i+0x14a>
 801f586:	4665      	mov	r5, ip
 801f588:	fbb3 f1f2 	udiv	r1, r3, r2
 801f58c:	fb02 3311 	mls	r3, r2, r1, r3
 801f590:	5cc3      	ldrb	r3, [r0, r3]
 801f592:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801f596:	460b      	mov	r3, r1
 801f598:	2900      	cmp	r1, #0
 801f59a:	d1f5      	bne.n	801f588 <_printf_i+0x16c>
 801f59c:	e7b9      	b.n	801f512 <_printf_i+0xf6>
 801f59e:	6813      	ldr	r3, [r2, #0]
 801f5a0:	6825      	ldr	r5, [r4, #0]
 801f5a2:	6961      	ldr	r1, [r4, #20]
 801f5a4:	1d18      	adds	r0, r3, #4
 801f5a6:	6010      	str	r0, [r2, #0]
 801f5a8:	0628      	lsls	r0, r5, #24
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	d501      	bpl.n	801f5b2 <_printf_i+0x196>
 801f5ae:	6019      	str	r1, [r3, #0]
 801f5b0:	e002      	b.n	801f5b8 <_printf_i+0x19c>
 801f5b2:	066a      	lsls	r2, r5, #25
 801f5b4:	d5fb      	bpl.n	801f5ae <_printf_i+0x192>
 801f5b6:	8019      	strh	r1, [r3, #0]
 801f5b8:	2300      	movs	r3, #0
 801f5ba:	6123      	str	r3, [r4, #16]
 801f5bc:	4665      	mov	r5, ip
 801f5be:	e7b9      	b.n	801f534 <_printf_i+0x118>
 801f5c0:	6813      	ldr	r3, [r2, #0]
 801f5c2:	1d19      	adds	r1, r3, #4
 801f5c4:	6011      	str	r1, [r2, #0]
 801f5c6:	681d      	ldr	r5, [r3, #0]
 801f5c8:	6862      	ldr	r2, [r4, #4]
 801f5ca:	2100      	movs	r1, #0
 801f5cc:	4628      	mov	r0, r5
 801f5ce:	f7e0 ff67 	bl	80004a0 <memchr>
 801f5d2:	b108      	cbz	r0, 801f5d8 <_printf_i+0x1bc>
 801f5d4:	1b40      	subs	r0, r0, r5
 801f5d6:	6060      	str	r0, [r4, #4]
 801f5d8:	6863      	ldr	r3, [r4, #4]
 801f5da:	6123      	str	r3, [r4, #16]
 801f5dc:	2300      	movs	r3, #0
 801f5de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f5e2:	e7a7      	b.n	801f534 <_printf_i+0x118>
 801f5e4:	6923      	ldr	r3, [r4, #16]
 801f5e6:	462a      	mov	r2, r5
 801f5e8:	4639      	mov	r1, r7
 801f5ea:	4630      	mov	r0, r6
 801f5ec:	47c0      	blx	r8
 801f5ee:	3001      	adds	r0, #1
 801f5f0:	d0aa      	beq.n	801f548 <_printf_i+0x12c>
 801f5f2:	6823      	ldr	r3, [r4, #0]
 801f5f4:	079b      	lsls	r3, r3, #30
 801f5f6:	d413      	bmi.n	801f620 <_printf_i+0x204>
 801f5f8:	68e0      	ldr	r0, [r4, #12]
 801f5fa:	9b03      	ldr	r3, [sp, #12]
 801f5fc:	4298      	cmp	r0, r3
 801f5fe:	bfb8      	it	lt
 801f600:	4618      	movlt	r0, r3
 801f602:	e7a3      	b.n	801f54c <_printf_i+0x130>
 801f604:	2301      	movs	r3, #1
 801f606:	464a      	mov	r2, r9
 801f608:	4639      	mov	r1, r7
 801f60a:	4630      	mov	r0, r6
 801f60c:	47c0      	blx	r8
 801f60e:	3001      	adds	r0, #1
 801f610:	d09a      	beq.n	801f548 <_printf_i+0x12c>
 801f612:	3501      	adds	r5, #1
 801f614:	68e3      	ldr	r3, [r4, #12]
 801f616:	9a03      	ldr	r2, [sp, #12]
 801f618:	1a9b      	subs	r3, r3, r2
 801f61a:	42ab      	cmp	r3, r5
 801f61c:	dcf2      	bgt.n	801f604 <_printf_i+0x1e8>
 801f61e:	e7eb      	b.n	801f5f8 <_printf_i+0x1dc>
 801f620:	2500      	movs	r5, #0
 801f622:	f104 0919 	add.w	r9, r4, #25
 801f626:	e7f5      	b.n	801f614 <_printf_i+0x1f8>
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d1ac      	bne.n	801f586 <_printf_i+0x16a>
 801f62c:	7803      	ldrb	r3, [r0, #0]
 801f62e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f632:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f636:	e76c      	b.n	801f512 <_printf_i+0xf6>
 801f638:	080259b5 	.word	0x080259b5
 801f63c:	080259c6 	.word	0x080259c6

0801f640 <_sbrk_r>:
 801f640:	b538      	push	{r3, r4, r5, lr}
 801f642:	4c06      	ldr	r4, [pc, #24]	; (801f65c <_sbrk_r+0x1c>)
 801f644:	2300      	movs	r3, #0
 801f646:	4605      	mov	r5, r0
 801f648:	4608      	mov	r0, r1
 801f64a:	6023      	str	r3, [r4, #0]
 801f64c:	f000 f90c 	bl	801f868 <_sbrk>
 801f650:	1c43      	adds	r3, r0, #1
 801f652:	d102      	bne.n	801f65a <_sbrk_r+0x1a>
 801f654:	6823      	ldr	r3, [r4, #0]
 801f656:	b103      	cbz	r3, 801f65a <_sbrk_r+0x1a>
 801f658:	602b      	str	r3, [r5, #0]
 801f65a:	bd38      	pop	{r3, r4, r5, pc}
 801f65c:	20008010 	.word	0x20008010

0801f660 <__sread>:
 801f660:	b510      	push	{r4, lr}
 801f662:	460c      	mov	r4, r1
 801f664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f668:	f000 f8bc 	bl	801f7e4 <_read_r>
 801f66c:	2800      	cmp	r0, #0
 801f66e:	bfab      	itete	ge
 801f670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f672:	89a3      	ldrhlt	r3, [r4, #12]
 801f674:	181b      	addge	r3, r3, r0
 801f676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f67a:	bfac      	ite	ge
 801f67c:	6563      	strge	r3, [r4, #84]	; 0x54
 801f67e:	81a3      	strhlt	r3, [r4, #12]
 801f680:	bd10      	pop	{r4, pc}

0801f682 <__swrite>:
 801f682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f686:	461f      	mov	r7, r3
 801f688:	898b      	ldrh	r3, [r1, #12]
 801f68a:	05db      	lsls	r3, r3, #23
 801f68c:	4605      	mov	r5, r0
 801f68e:	460c      	mov	r4, r1
 801f690:	4616      	mov	r6, r2
 801f692:	d505      	bpl.n	801f6a0 <__swrite+0x1e>
 801f694:	2302      	movs	r3, #2
 801f696:	2200      	movs	r2, #0
 801f698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f69c:	f000 f868 	bl	801f770 <_lseek_r>
 801f6a0:	89a3      	ldrh	r3, [r4, #12]
 801f6a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f6a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f6aa:	81a3      	strh	r3, [r4, #12]
 801f6ac:	4632      	mov	r2, r6
 801f6ae:	463b      	mov	r3, r7
 801f6b0:	4628      	mov	r0, r5
 801f6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f6b6:	f000 b817 	b.w	801f6e8 <_write_r>

0801f6ba <__sseek>:
 801f6ba:	b510      	push	{r4, lr}
 801f6bc:	460c      	mov	r4, r1
 801f6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6c2:	f000 f855 	bl	801f770 <_lseek_r>
 801f6c6:	1c43      	adds	r3, r0, #1
 801f6c8:	89a3      	ldrh	r3, [r4, #12]
 801f6ca:	bf15      	itete	ne
 801f6cc:	6560      	strne	r0, [r4, #84]	; 0x54
 801f6ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f6d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f6d6:	81a3      	strheq	r3, [r4, #12]
 801f6d8:	bf18      	it	ne
 801f6da:	81a3      	strhne	r3, [r4, #12]
 801f6dc:	bd10      	pop	{r4, pc}

0801f6de <__sclose>:
 801f6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6e2:	f000 b813 	b.w	801f70c <_close_r>
	...

0801f6e8 <_write_r>:
 801f6e8:	b538      	push	{r3, r4, r5, lr}
 801f6ea:	4c07      	ldr	r4, [pc, #28]	; (801f708 <_write_r+0x20>)
 801f6ec:	4605      	mov	r5, r0
 801f6ee:	4608      	mov	r0, r1
 801f6f0:	4611      	mov	r1, r2
 801f6f2:	2200      	movs	r2, #0
 801f6f4:	6022      	str	r2, [r4, #0]
 801f6f6:	461a      	mov	r2, r3
 801f6f8:	f7e1 f914 	bl	8000924 <_write>
 801f6fc:	1c43      	adds	r3, r0, #1
 801f6fe:	d102      	bne.n	801f706 <_write_r+0x1e>
 801f700:	6823      	ldr	r3, [r4, #0]
 801f702:	b103      	cbz	r3, 801f706 <_write_r+0x1e>
 801f704:	602b      	str	r3, [r5, #0]
 801f706:	bd38      	pop	{r3, r4, r5, pc}
 801f708:	20008010 	.word	0x20008010

0801f70c <_close_r>:
 801f70c:	b538      	push	{r3, r4, r5, lr}
 801f70e:	4c06      	ldr	r4, [pc, #24]	; (801f728 <_close_r+0x1c>)
 801f710:	2300      	movs	r3, #0
 801f712:	4605      	mov	r5, r0
 801f714:	4608      	mov	r0, r1
 801f716:	6023      	str	r3, [r4, #0]
 801f718:	f000 f87e 	bl	801f818 <_close>
 801f71c:	1c43      	adds	r3, r0, #1
 801f71e:	d102      	bne.n	801f726 <_close_r+0x1a>
 801f720:	6823      	ldr	r3, [r4, #0]
 801f722:	b103      	cbz	r3, 801f726 <_close_r+0x1a>
 801f724:	602b      	str	r3, [r5, #0]
 801f726:	bd38      	pop	{r3, r4, r5, pc}
 801f728:	20008010 	.word	0x20008010

0801f72c <_fstat_r>:
 801f72c:	b538      	push	{r3, r4, r5, lr}
 801f72e:	4c07      	ldr	r4, [pc, #28]	; (801f74c <_fstat_r+0x20>)
 801f730:	2300      	movs	r3, #0
 801f732:	4605      	mov	r5, r0
 801f734:	4608      	mov	r0, r1
 801f736:	4611      	mov	r1, r2
 801f738:	6023      	str	r3, [r4, #0]
 801f73a:	f000 f875 	bl	801f828 <_fstat>
 801f73e:	1c43      	adds	r3, r0, #1
 801f740:	d102      	bne.n	801f748 <_fstat_r+0x1c>
 801f742:	6823      	ldr	r3, [r4, #0]
 801f744:	b103      	cbz	r3, 801f748 <_fstat_r+0x1c>
 801f746:	602b      	str	r3, [r5, #0]
 801f748:	bd38      	pop	{r3, r4, r5, pc}
 801f74a:	bf00      	nop
 801f74c:	20008010 	.word	0x20008010

0801f750 <_isatty_r>:
 801f750:	b538      	push	{r3, r4, r5, lr}
 801f752:	4c06      	ldr	r4, [pc, #24]	; (801f76c <_isatty_r+0x1c>)
 801f754:	2300      	movs	r3, #0
 801f756:	4605      	mov	r5, r0
 801f758:	4608      	mov	r0, r1
 801f75a:	6023      	str	r3, [r4, #0]
 801f75c:	f000 f86c 	bl	801f838 <_isatty>
 801f760:	1c43      	adds	r3, r0, #1
 801f762:	d102      	bne.n	801f76a <_isatty_r+0x1a>
 801f764:	6823      	ldr	r3, [r4, #0]
 801f766:	b103      	cbz	r3, 801f76a <_isatty_r+0x1a>
 801f768:	602b      	str	r3, [r5, #0]
 801f76a:	bd38      	pop	{r3, r4, r5, pc}
 801f76c:	20008010 	.word	0x20008010

0801f770 <_lseek_r>:
 801f770:	b538      	push	{r3, r4, r5, lr}
 801f772:	4c07      	ldr	r4, [pc, #28]	; (801f790 <_lseek_r+0x20>)
 801f774:	4605      	mov	r5, r0
 801f776:	4608      	mov	r0, r1
 801f778:	4611      	mov	r1, r2
 801f77a:	2200      	movs	r2, #0
 801f77c:	6022      	str	r2, [r4, #0]
 801f77e:	461a      	mov	r2, r3
 801f780:	f000 f862 	bl	801f848 <_lseek>
 801f784:	1c43      	adds	r3, r0, #1
 801f786:	d102      	bne.n	801f78e <_lseek_r+0x1e>
 801f788:	6823      	ldr	r3, [r4, #0]
 801f78a:	b103      	cbz	r3, 801f78e <_lseek_r+0x1e>
 801f78c:	602b      	str	r3, [r5, #0]
 801f78e:	bd38      	pop	{r3, r4, r5, pc}
 801f790:	20008010 	.word	0x20008010

0801f794 <__malloc_lock>:
 801f794:	4770      	bx	lr

0801f796 <__malloc_unlock>:
 801f796:	4770      	bx	lr

0801f798 <_realloc_r>:
 801f798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f79a:	4607      	mov	r7, r0
 801f79c:	4614      	mov	r4, r2
 801f79e:	460e      	mov	r6, r1
 801f7a0:	b921      	cbnz	r1, 801f7ac <_realloc_r+0x14>
 801f7a2:	4611      	mov	r1, r2
 801f7a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f7a8:	f7ff bad6 	b.w	801ed58 <_malloc_r>
 801f7ac:	b922      	cbnz	r2, 801f7b8 <_realloc_r+0x20>
 801f7ae:	f7ff fa85 	bl	801ecbc <_free_r>
 801f7b2:	4625      	mov	r5, r4
 801f7b4:	4628      	mov	r0, r5
 801f7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7b8:	f000 f826 	bl	801f808 <_malloc_usable_size_r>
 801f7bc:	42a0      	cmp	r0, r4
 801f7be:	d20f      	bcs.n	801f7e0 <_realloc_r+0x48>
 801f7c0:	4621      	mov	r1, r4
 801f7c2:	4638      	mov	r0, r7
 801f7c4:	f7ff fac8 	bl	801ed58 <_malloc_r>
 801f7c8:	4605      	mov	r5, r0
 801f7ca:	2800      	cmp	r0, #0
 801f7cc:	d0f2      	beq.n	801f7b4 <_realloc_r+0x1c>
 801f7ce:	4631      	mov	r1, r6
 801f7d0:	4622      	mov	r2, r4
 801f7d2:	f7fe febe 	bl	801e552 <memcpy>
 801f7d6:	4631      	mov	r1, r6
 801f7d8:	4638      	mov	r0, r7
 801f7da:	f7ff fa6f 	bl	801ecbc <_free_r>
 801f7de:	e7e9      	b.n	801f7b4 <_realloc_r+0x1c>
 801f7e0:	4635      	mov	r5, r6
 801f7e2:	e7e7      	b.n	801f7b4 <_realloc_r+0x1c>

0801f7e4 <_read_r>:
 801f7e4:	b538      	push	{r3, r4, r5, lr}
 801f7e6:	4c07      	ldr	r4, [pc, #28]	; (801f804 <_read_r+0x20>)
 801f7e8:	4605      	mov	r5, r0
 801f7ea:	4608      	mov	r0, r1
 801f7ec:	4611      	mov	r1, r2
 801f7ee:	2200      	movs	r2, #0
 801f7f0:	6022      	str	r2, [r4, #0]
 801f7f2:	461a      	mov	r2, r3
 801f7f4:	f000 f830 	bl	801f858 <_read>
 801f7f8:	1c43      	adds	r3, r0, #1
 801f7fa:	d102      	bne.n	801f802 <_read_r+0x1e>
 801f7fc:	6823      	ldr	r3, [r4, #0]
 801f7fe:	b103      	cbz	r3, 801f802 <_read_r+0x1e>
 801f800:	602b      	str	r3, [r5, #0]
 801f802:	bd38      	pop	{r3, r4, r5, pc}
 801f804:	20008010 	.word	0x20008010

0801f808 <_malloc_usable_size_r>:
 801f808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f80c:	1f18      	subs	r0, r3, #4
 801f80e:	2b00      	cmp	r3, #0
 801f810:	bfbc      	itt	lt
 801f812:	580b      	ldrlt	r3, [r1, r0]
 801f814:	18c0      	addlt	r0, r0, r3
 801f816:	4770      	bx	lr

0801f818 <_close>:
 801f818:	4b02      	ldr	r3, [pc, #8]	; (801f824 <_close+0xc>)
 801f81a:	2258      	movs	r2, #88	; 0x58
 801f81c:	601a      	str	r2, [r3, #0]
 801f81e:	f04f 30ff 	mov.w	r0, #4294967295
 801f822:	4770      	bx	lr
 801f824:	20008010 	.word	0x20008010

0801f828 <_fstat>:
 801f828:	4b02      	ldr	r3, [pc, #8]	; (801f834 <_fstat+0xc>)
 801f82a:	2258      	movs	r2, #88	; 0x58
 801f82c:	601a      	str	r2, [r3, #0]
 801f82e:	f04f 30ff 	mov.w	r0, #4294967295
 801f832:	4770      	bx	lr
 801f834:	20008010 	.word	0x20008010

0801f838 <_isatty>:
 801f838:	4b02      	ldr	r3, [pc, #8]	; (801f844 <_isatty+0xc>)
 801f83a:	2258      	movs	r2, #88	; 0x58
 801f83c:	601a      	str	r2, [r3, #0]
 801f83e:	2000      	movs	r0, #0
 801f840:	4770      	bx	lr
 801f842:	bf00      	nop
 801f844:	20008010 	.word	0x20008010

0801f848 <_lseek>:
 801f848:	4b02      	ldr	r3, [pc, #8]	; (801f854 <_lseek+0xc>)
 801f84a:	2258      	movs	r2, #88	; 0x58
 801f84c:	601a      	str	r2, [r3, #0]
 801f84e:	f04f 30ff 	mov.w	r0, #4294967295
 801f852:	4770      	bx	lr
 801f854:	20008010 	.word	0x20008010

0801f858 <_read>:
 801f858:	4b02      	ldr	r3, [pc, #8]	; (801f864 <_read+0xc>)
 801f85a:	2258      	movs	r2, #88	; 0x58
 801f85c:	601a      	str	r2, [r3, #0]
 801f85e:	f04f 30ff 	mov.w	r0, #4294967295
 801f862:	4770      	bx	lr
 801f864:	20008010 	.word	0x20008010

0801f868 <_sbrk>:
 801f868:	4b04      	ldr	r3, [pc, #16]	; (801f87c <_sbrk+0x14>)
 801f86a:	6819      	ldr	r1, [r3, #0]
 801f86c:	4602      	mov	r2, r0
 801f86e:	b909      	cbnz	r1, 801f874 <_sbrk+0xc>
 801f870:	4903      	ldr	r1, [pc, #12]	; (801f880 <_sbrk+0x18>)
 801f872:	6019      	str	r1, [r3, #0]
 801f874:	6818      	ldr	r0, [r3, #0]
 801f876:	4402      	add	r2, r0
 801f878:	601a      	str	r2, [r3, #0]
 801f87a:	4770      	bx	lr
 801f87c:	20001b00 	.word	0x20001b00
 801f880:	20008018 	.word	0x20008018

0801f884 <_init>:
 801f884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f886:	bf00      	nop
 801f888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f88a:	bc08      	pop	{r3}
 801f88c:	469e      	mov	lr, r3
 801f88e:	4770      	bx	lr

0801f890 <_fini>:
 801f890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f892:	bf00      	nop
 801f894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f896:	bc08      	pop	{r3}
 801f898:	469e      	mov	lr, r3
 801f89a:	4770      	bx	lr
