
sample_threadx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005244  08005244  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800524c  0800524c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  20000010  20000010  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000fa4  20000fa4  00020010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004dcd0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ac1d  00000000  00000000  0006dd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b8  00000000  00000000  00078930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002010  00000000  00000000  00079ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000352dc  00000000  00000000  0007bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000252ec  00000000  00000000  000b0fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012e060  00000000  00000000  000d62c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00204320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000353c  00000000  00000000  0020439c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000124ac  00000000  00000000  002078d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800513c 	.word	0x0800513c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800513c 	.word	0x0800513c

08000210 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000210:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@     
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000212:	481d      	ldr	r0, [pc, #116]	; (8000288 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 8000214:	491d      	ldr	r1, [pc, #116]	; (800028c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @ 
 8000216:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800021a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000220:	491b      	ldr	r1, [pc, #108]	; (8000290 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address   
 8000222:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000228:	4919      	ldr	r1, [pc, #100]	; (8000290 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800022a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800022c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800022e:	481a      	ldr	r0, [pc, #104]	; (8000298 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000230:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000232:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register 
 8000236:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000238:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800023c:	4917      	ldr	r1, [pc, #92]	; (800029c <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800023e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000240:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000244:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000246:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800024a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800024e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000252:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000256:	4912      	ldr	r1, [pc, #72]	; (80002a0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000258:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
        
@
@    /* Return to caller.  */
@    
    BX      lr 
 800025c:	4770      	bx	lr

0800025e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800025e:	f7ff bffe 	b.w	800025e <__tx_BadHandler>

08000262 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000262:	f7ff bffe 	b.w	8000262 <__tx_HardfaultHandler>

08000266 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000266:	f7ff bffe 	b.w	8000266 <__tx_SVCallHandler>

0800026a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800026a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 800026c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000270:	4770      	bx	lr

08000272 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000272:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             ; Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000274:	f000 f86c 	bl	8000350 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 8000278:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800027c:	4770      	bx	lr

0800027e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler 
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800027e:	f7ff bffe 	b.w	800027e <__tx_NMIHandler>

08000282 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000282:	f7ff bffe 	b.w	8000282 <__tx_DBGHandler>
 8000286:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000288:	20000f88 	.word	0x20000f88
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 800028c:	200015a8 	.word	0x200015a8
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000290:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000294:	200009d4 	.word	0x200009d4
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000298:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 800029c:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002a0:	40ff0000 	.word	0x40ff0000
	...

080002b0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@     
    MOV     r0, #0                                  @ Build value for TX_FALSE
 80002b0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80002b4:	4a22      	ldr	r2, [pc, #136]	; (8000340 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80002b6:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 80002b8:	b662      	cpsie	i
@            
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 80002ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 80002be:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 80002c2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 80002c6:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80002ca:	f3bf 8f6f 	isb	sy

080002ce <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@     
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80002ce:	e7fe      	b.n	80002ce <__tx_wait_here>

080002d0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80002d0:	481c      	ldr	r0, [pc, #112]	; (8000344 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80002d4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80002d8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@       
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80002da:	b169      	cbz	r1, 80002f8 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80002dc:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80002de:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 80002e2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80002e6:	4c19      	ldr	r4, [pc, #100]	; (800034c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 80002e8:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 80002ec:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 80002ee:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 80002f2:	b10d      	cbz	r5, 80002f8 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80002f4:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 80002f6:	6023      	str	r3, [r4, #0]

080002f8 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80002f8:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80002fa:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 80002fc:	b189      	cbz	r1, 8000322 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80002fe:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 8000300:	b662      	cpsie	i

08000302 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 8000302:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000304:	4c11      	ldr	r4, [pc, #68]	; (800034c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000306:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 8000308:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 800030c:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 800030e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 8000310:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 8000314:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore 
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 8000318:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 800031c:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@       
    BX      lr                                      @ Return to thread!
 8000320:	4770      	bx	lr

08000322 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts 
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000322:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000324:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000326:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 8000328:	b909      	cbnz	r1, 800032e <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800032c:	e7f9      	b.n	8000322 <__tx_ts_wait>

0800032e <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are 
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 800032e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000332:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV 
 8000336:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@       
    CPSIE   i                                       @ Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800033c:	e7e1      	b.n	8000302 <__tx_ts_restore>
 800033e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000340:	200009d8 	.word	0x200009d8
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000344:	200009dc 	.word	0x200009dc
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000348:	200009e0 	.word	0x200009e0
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800034c:	20000a78 	.word	0x20000a78

08000350 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000350:	4926      	ldr	r1, [pc, #152]	; (80003ec <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 8000352:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 8000354:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 8000358:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 800035c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 800035e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 8000360:	d008      	beq.n	8000374 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 8000362:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 8000366:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 8000368:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 800036a:	d103      	bne.n	8000374 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 800036e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 8000372:	6018      	str	r0, [r3, #0]

08000374 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000374:	4920      	ldr	r1, [pc, #128]	; (80003f8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 8000376:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 8000378:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 800037a:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 800037c:	d004      	beq.n	8000388 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 8000380:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 8000384:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 8000386:	e008      	b.n	800039a <__tx_timer_done>

08000388 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 8000388:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 800038c:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 800038e:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 8000390:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 8000392:	d101      	bne.n	8000398 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 8000396:	6818      	ldr	r0, [r3, #0]

08000398 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 8000398:	6008      	str	r0, [r1, #0]

0800039a <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 800039c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 800039e:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80003a0:	d103      	bne.n	80003aa <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80003a2:	4916      	ldr	r1, [pc, #88]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80003a4:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80003a6:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80003a8:	d01c      	beq.n	80003e4 <__tx_timer_nothing_expired>

080003aa <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 80003aa:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 80003ae:	4913      	ldr	r1, [pc, #76]	; (80003fc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80003b0:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 80003b2:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 80003b4:	d001      	beq.n	80003ba <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 80003b6:	f004 fcf3 	bl	8004da0 <_tx_timer_expiration_process>

080003ba <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired 
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 80003bc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 80003be:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 80003c0:	d00e      	beq.n	80003e0 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice(); 
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 80003c2:	f004 fc93 	bl	8004cec <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 80003c8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 80003ca:	b949      	cbnz	r1, 80003e0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 80003ce:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80003d0:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 80003d2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 80003d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 80003da:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 80003dc:	d000      	beq.n	80003e0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 80003de:	6002      	str	r2, [r0, #0]

080003e0 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 80003e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003e4 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 80003e4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 80003e8:	4770      	bx	lr
 80003ea:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80003ec:	20000f6c 	.word	0x20000f6c
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 80003f0:	20000a78 	.word	0x20000a78
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80003f4:	20000f68 	.word	0x20000f68
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80003f8:	200009f0 	.word	0x200009f0
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80003fc:	20000a74 	.word	0x20000a74
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000400:	20000a80 	.word	0x20000a80
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000404:	20000b54 	.word	0x20000b54
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000408:	200009d8 	.word	0x200009d8
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800040c:	200009dc 	.word	0x200009dc
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000410:	200009e0 	.word	0x200009e0
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000414:	e000ed04 	.word	0xe000ed04
	...

08000420 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800042e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    LDR     r3, [r0, #12]                           @ Pickup stack starting address
 8000440:	68c3      	ldr	r3, [r0, #12]
    STR     r3, [r2, #28]                           @ Store initial r10 (sl)
 8000442:	61d3      	str	r3, [r2, #28]
    MOV     r3, #0                                  @ Build initial register value
 8000444:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #32]                           @ Store initial r11
 8000448:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800044a:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 800044c:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 800044e:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000452:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 8000458:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800045a:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 800045c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000460:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000462:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <__aeabi_uldivmod>:
 8000468:	b953      	cbnz	r3, 8000480 <__aeabi_uldivmod+0x18>
 800046a:	b94a      	cbnz	r2, 8000480 <__aeabi_uldivmod+0x18>
 800046c:	2900      	cmp	r1, #0
 800046e:	bf08      	it	eq
 8000470:	2800      	cmpeq	r0, #0
 8000472:	bf1c      	itt	ne
 8000474:	f04f 31ff 	movne.w	r1, #4294967295
 8000478:	f04f 30ff 	movne.w	r0, #4294967295
 800047c:	f000 b972 	b.w	8000764 <__aeabi_idiv0>
 8000480:	f1ad 0c08 	sub.w	ip, sp, #8
 8000484:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000488:	f000 f806 	bl	8000498 <__udivmoddi4>
 800048c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000494:	b004      	add	sp, #16
 8000496:	4770      	bx	lr

08000498 <__udivmoddi4>:
 8000498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800049c:	9e08      	ldr	r6, [sp, #32]
 800049e:	4604      	mov	r4, r0
 80004a0:	4688      	mov	r8, r1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d14b      	bne.n	800053e <__udivmoddi4+0xa6>
 80004a6:	428a      	cmp	r2, r1
 80004a8:	4615      	mov	r5, r2
 80004aa:	d967      	bls.n	800057c <__udivmoddi4+0xe4>
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	b14a      	cbz	r2, 80004c6 <__udivmoddi4+0x2e>
 80004b2:	f1c2 0720 	rsb	r7, r2, #32
 80004b6:	fa01 f302 	lsl.w	r3, r1, r2
 80004ba:	fa20 f707 	lsr.w	r7, r0, r7
 80004be:	4095      	lsls	r5, r2
 80004c0:	ea47 0803 	orr.w	r8, r7, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	0c23      	lsrs	r3, r4, #16
 80004cc:	fbb8 f7fe 	udiv	r7, r8, lr
 80004d0:	fa1f fc85 	uxth.w	ip, r5
 80004d4:	fb0e 8817 	mls	r8, lr, r7, r8
 80004d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004dc:	fb07 f10c 	mul.w	r1, r7, ip
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d909      	bls.n	80004f8 <__udivmoddi4+0x60>
 80004e4:	18eb      	adds	r3, r5, r3
 80004e6:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ea:	f080 811b 	bcs.w	8000724 <__udivmoddi4+0x28c>
 80004ee:	4299      	cmp	r1, r3
 80004f0:	f240 8118 	bls.w	8000724 <__udivmoddi4+0x28c>
 80004f4:	3f02      	subs	r7, #2
 80004f6:	442b      	add	r3, r5
 80004f8:	1a5b      	subs	r3, r3, r1
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000500:	fb0e 3310 	mls	r3, lr, r0, r3
 8000504:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000508:	fb00 fc0c 	mul.w	ip, r0, ip
 800050c:	45a4      	cmp	ip, r4
 800050e:	d909      	bls.n	8000524 <__udivmoddi4+0x8c>
 8000510:	192c      	adds	r4, r5, r4
 8000512:	f100 33ff 	add.w	r3, r0, #4294967295
 8000516:	f080 8107 	bcs.w	8000728 <__udivmoddi4+0x290>
 800051a:	45a4      	cmp	ip, r4
 800051c:	f240 8104 	bls.w	8000728 <__udivmoddi4+0x290>
 8000520:	3802      	subs	r0, #2
 8000522:	442c      	add	r4, r5
 8000524:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000528:	eba4 040c 	sub.w	r4, r4, ip
 800052c:	2700      	movs	r7, #0
 800052e:	b11e      	cbz	r6, 8000538 <__udivmoddi4+0xa0>
 8000530:	40d4      	lsrs	r4, r2
 8000532:	2300      	movs	r3, #0
 8000534:	e9c6 4300 	strd	r4, r3, [r6]
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	428b      	cmp	r3, r1
 8000540:	d909      	bls.n	8000556 <__udivmoddi4+0xbe>
 8000542:	2e00      	cmp	r6, #0
 8000544:	f000 80eb 	beq.w	800071e <__udivmoddi4+0x286>
 8000548:	2700      	movs	r7, #0
 800054a:	e9c6 0100 	strd	r0, r1, [r6]
 800054e:	4638      	mov	r0, r7
 8000550:	4639      	mov	r1, r7
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	fab3 f783 	clz	r7, r3
 800055a:	2f00      	cmp	r7, #0
 800055c:	d147      	bne.n	80005ee <__udivmoddi4+0x156>
 800055e:	428b      	cmp	r3, r1
 8000560:	d302      	bcc.n	8000568 <__udivmoddi4+0xd0>
 8000562:	4282      	cmp	r2, r0
 8000564:	f200 80fa 	bhi.w	800075c <__udivmoddi4+0x2c4>
 8000568:	1a84      	subs	r4, r0, r2
 800056a:	eb61 0303 	sbc.w	r3, r1, r3
 800056e:	2001      	movs	r0, #1
 8000570:	4698      	mov	r8, r3
 8000572:	2e00      	cmp	r6, #0
 8000574:	d0e0      	beq.n	8000538 <__udivmoddi4+0xa0>
 8000576:	e9c6 4800 	strd	r4, r8, [r6]
 800057a:	e7dd      	b.n	8000538 <__udivmoddi4+0xa0>
 800057c:	b902      	cbnz	r2, 8000580 <__udivmoddi4+0xe8>
 800057e:	deff      	udf	#255	; 0xff
 8000580:	fab2 f282 	clz	r2, r2
 8000584:	2a00      	cmp	r2, #0
 8000586:	f040 808f 	bne.w	80006a8 <__udivmoddi4+0x210>
 800058a:	1b49      	subs	r1, r1, r5
 800058c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000590:	fa1f f885 	uxth.w	r8, r5
 8000594:	2701      	movs	r7, #1
 8000596:	fbb1 fcfe 	udiv	ip, r1, lr
 800059a:	0c23      	lsrs	r3, r4, #16
 800059c:	fb0e 111c 	mls	r1, lr, ip, r1
 80005a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a4:	fb08 f10c 	mul.w	r1, r8, ip
 80005a8:	4299      	cmp	r1, r3
 80005aa:	d907      	bls.n	80005bc <__udivmoddi4+0x124>
 80005ac:	18eb      	adds	r3, r5, r3
 80005ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005b2:	d202      	bcs.n	80005ba <__udivmoddi4+0x122>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	f200 80cd 	bhi.w	8000754 <__udivmoddi4+0x2bc>
 80005ba:	4684      	mov	ip, r0
 80005bc:	1a59      	subs	r1, r3, r1
 80005be:	b2a3      	uxth	r3, r4
 80005c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80005c4:	fb0e 1410 	mls	r4, lr, r0, r1
 80005c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005cc:	fb08 f800 	mul.w	r8, r8, r0
 80005d0:	45a0      	cmp	r8, r4
 80005d2:	d907      	bls.n	80005e4 <__udivmoddi4+0x14c>
 80005d4:	192c      	adds	r4, r5, r4
 80005d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80005da:	d202      	bcs.n	80005e2 <__udivmoddi4+0x14a>
 80005dc:	45a0      	cmp	r8, r4
 80005de:	f200 80b6 	bhi.w	800074e <__udivmoddi4+0x2b6>
 80005e2:	4618      	mov	r0, r3
 80005e4:	eba4 0408 	sub.w	r4, r4, r8
 80005e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ec:	e79f      	b.n	800052e <__udivmoddi4+0x96>
 80005ee:	f1c7 0c20 	rsb	ip, r7, #32
 80005f2:	40bb      	lsls	r3, r7
 80005f4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005f8:	ea4e 0e03 	orr.w	lr, lr, r3
 80005fc:	fa01 f407 	lsl.w	r4, r1, r7
 8000600:	fa20 f50c 	lsr.w	r5, r0, ip
 8000604:	fa21 f30c 	lsr.w	r3, r1, ip
 8000608:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800060c:	4325      	orrs	r5, r4
 800060e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000612:	0c2c      	lsrs	r4, r5, #16
 8000614:	fb08 3319 	mls	r3, r8, r9, r3
 8000618:	fa1f fa8e 	uxth.w	sl, lr
 800061c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000620:	fb09 f40a 	mul.w	r4, r9, sl
 8000624:	429c      	cmp	r4, r3
 8000626:	fa02 f207 	lsl.w	r2, r2, r7
 800062a:	fa00 f107 	lsl.w	r1, r0, r7
 800062e:	d90b      	bls.n	8000648 <__udivmoddi4+0x1b0>
 8000630:	eb1e 0303 	adds.w	r3, lr, r3
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	f080 8087 	bcs.w	800074a <__udivmoddi4+0x2b2>
 800063c:	429c      	cmp	r4, r3
 800063e:	f240 8084 	bls.w	800074a <__udivmoddi4+0x2b2>
 8000642:	f1a9 0902 	sub.w	r9, r9, #2
 8000646:	4473      	add	r3, lr
 8000648:	1b1b      	subs	r3, r3, r4
 800064a:	b2ad      	uxth	r5, r5
 800064c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000650:	fb08 3310 	mls	r3, r8, r0, r3
 8000654:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000658:	fb00 fa0a 	mul.w	sl, r0, sl
 800065c:	45a2      	cmp	sl, r4
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x1da>
 8000660:	eb1e 0404 	adds.w	r4, lr, r4
 8000664:	f100 33ff 	add.w	r3, r0, #4294967295
 8000668:	d26b      	bcs.n	8000742 <__udivmoddi4+0x2aa>
 800066a:	45a2      	cmp	sl, r4
 800066c:	d969      	bls.n	8000742 <__udivmoddi4+0x2aa>
 800066e:	3802      	subs	r0, #2
 8000670:	4474      	add	r4, lr
 8000672:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	eba4 040a 	sub.w	r4, r4, sl
 800067e:	454c      	cmp	r4, r9
 8000680:	46c2      	mov	sl, r8
 8000682:	464b      	mov	r3, r9
 8000684:	d354      	bcc.n	8000730 <__udivmoddi4+0x298>
 8000686:	d051      	beq.n	800072c <__udivmoddi4+0x294>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d069      	beq.n	8000760 <__udivmoddi4+0x2c8>
 800068c:	ebb1 050a 	subs.w	r5, r1, sl
 8000690:	eb64 0403 	sbc.w	r4, r4, r3
 8000694:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000698:	40fd      	lsrs	r5, r7
 800069a:	40fc      	lsrs	r4, r7
 800069c:	ea4c 0505 	orr.w	r5, ip, r5
 80006a0:	e9c6 5400 	strd	r5, r4, [r6]
 80006a4:	2700      	movs	r7, #0
 80006a6:	e747      	b.n	8000538 <__udivmoddi4+0xa0>
 80006a8:	f1c2 0320 	rsb	r3, r2, #32
 80006ac:	fa20 f703 	lsr.w	r7, r0, r3
 80006b0:	4095      	lsls	r5, r2
 80006b2:	fa01 f002 	lsl.w	r0, r1, r2
 80006b6:	fa21 f303 	lsr.w	r3, r1, r3
 80006ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006be:	4338      	orrs	r0, r7
 80006c0:	0c01      	lsrs	r1, r0, #16
 80006c2:	fbb3 f7fe 	udiv	r7, r3, lr
 80006c6:	fa1f f885 	uxth.w	r8, r5
 80006ca:	fb0e 3317 	mls	r3, lr, r7, r3
 80006ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d2:	fb07 f308 	mul.w	r3, r7, r8
 80006d6:	428b      	cmp	r3, r1
 80006d8:	fa04 f402 	lsl.w	r4, r4, r2
 80006dc:	d907      	bls.n	80006ee <__udivmoddi4+0x256>
 80006de:	1869      	adds	r1, r5, r1
 80006e0:	f107 3cff 	add.w	ip, r7, #4294967295
 80006e4:	d22f      	bcs.n	8000746 <__udivmoddi4+0x2ae>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d92d      	bls.n	8000746 <__udivmoddi4+0x2ae>
 80006ea:	3f02      	subs	r7, #2
 80006ec:	4429      	add	r1, r5
 80006ee:	1acb      	subs	r3, r1, r3
 80006f0:	b281      	uxth	r1, r0
 80006f2:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f6:	fb0e 3310 	mls	r3, lr, r0, r3
 80006fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006fe:	fb00 f308 	mul.w	r3, r0, r8
 8000702:	428b      	cmp	r3, r1
 8000704:	d907      	bls.n	8000716 <__udivmoddi4+0x27e>
 8000706:	1869      	adds	r1, r5, r1
 8000708:	f100 3cff 	add.w	ip, r0, #4294967295
 800070c:	d217      	bcs.n	800073e <__udivmoddi4+0x2a6>
 800070e:	428b      	cmp	r3, r1
 8000710:	d915      	bls.n	800073e <__udivmoddi4+0x2a6>
 8000712:	3802      	subs	r0, #2
 8000714:	4429      	add	r1, r5
 8000716:	1ac9      	subs	r1, r1, r3
 8000718:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800071c:	e73b      	b.n	8000596 <__udivmoddi4+0xfe>
 800071e:	4637      	mov	r7, r6
 8000720:	4630      	mov	r0, r6
 8000722:	e709      	b.n	8000538 <__udivmoddi4+0xa0>
 8000724:	4607      	mov	r7, r0
 8000726:	e6e7      	b.n	80004f8 <__udivmoddi4+0x60>
 8000728:	4618      	mov	r0, r3
 800072a:	e6fb      	b.n	8000524 <__udivmoddi4+0x8c>
 800072c:	4541      	cmp	r1, r8
 800072e:	d2ab      	bcs.n	8000688 <__udivmoddi4+0x1f0>
 8000730:	ebb8 0a02 	subs.w	sl, r8, r2
 8000734:	eb69 020e 	sbc.w	r2, r9, lr
 8000738:	3801      	subs	r0, #1
 800073a:	4613      	mov	r3, r2
 800073c:	e7a4      	b.n	8000688 <__udivmoddi4+0x1f0>
 800073e:	4660      	mov	r0, ip
 8000740:	e7e9      	b.n	8000716 <__udivmoddi4+0x27e>
 8000742:	4618      	mov	r0, r3
 8000744:	e795      	b.n	8000672 <__udivmoddi4+0x1da>
 8000746:	4667      	mov	r7, ip
 8000748:	e7d1      	b.n	80006ee <__udivmoddi4+0x256>
 800074a:	4681      	mov	r9, r0
 800074c:	e77c      	b.n	8000648 <__udivmoddi4+0x1b0>
 800074e:	3802      	subs	r0, #2
 8000750:	442c      	add	r4, r5
 8000752:	e747      	b.n	80005e4 <__udivmoddi4+0x14c>
 8000754:	f1ac 0c02 	sub.w	ip, ip, #2
 8000758:	442b      	add	r3, r5
 800075a:	e72f      	b.n	80005bc <__udivmoddi4+0x124>
 800075c:	4638      	mov	r0, r7
 800075e:	e708      	b.n	8000572 <__udivmoddi4+0xda>
 8000760:	4637      	mov	r7, r6
 8000762:	e6e9      	b.n	8000538 <__udivmoddi4+0xa0>

08000764 <__aeabi_idiv0>:
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000770:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <SCB_EnableICache+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800077c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000780:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <SCB_EnableICache+0x3c>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <SCB_EnableICache+0x3c>)
 800078a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000794:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007c0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	0b5b      	lsrs	r3, r3, #13
 80007c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ca:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007d4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	015a      	lsls	r2, r3, #5
 80007da:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007de:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007e4:	490f      	ldr	r1, [pc, #60]	; (8000824 <SCB_EnableDCache+0x7c>)
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1ef      	bne.n	80007d6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	60fa      	str	r2, [r7, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1e5      	bne.n	80007cc <SCB_EnableDCache+0x24>
 8000800:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <SCB_EnableDCache+0x7c>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <SCB_EnableDCache+0x7c>)
 800080a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080e:	6153      	str	r3, [r2, #20]
 8000810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000814:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <hardware_rand_initialize>:

	return len;
}

void hardware_rand_initialize(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

	/* Enable clock for the RNG.  */
	STM32F7_RCC_AHB2ENR |= STM32F7_RCC_AHB2ENR_RNGEN;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <hardware_rand_initialize+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <hardware_rand_initialize+0x20>)
 8000832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000836:	6013      	str	r3, [r2, #0]

	/* Enable the random number generator.  */
	STM32_RNG_CR = STM32_RNG_CR_RNGEN;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <hardware_rand_initialize+0x24>)
 800083a:	2204      	movs	r2, #4
 800083c:	601a      	str	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023834 	.word	0x40023834
 800084c:	50060800 	.word	0x50060800

08000850 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

	if (huart->Instance == USART1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a3c      	ldr	r2, [pc, #240]	; (8000960 <HAL_UART_MspInit+0x110>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d145      	bne.n	80008fe <HAL_UART_MspInit+0xae>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8000872:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <HAL_UART_MspInit+0x114>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a35      	ldr	r2, [pc, #212]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b33      	ldr	r3, [pc, #204]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <HAL_UART_MspInit+0x114>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

		/**USART1 GPIO Configuration
		 PB7     ------> USART1_RX
		 PA9     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ca:	2307      	movs	r3, #7
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4824      	ldr	r0, [pc, #144]	; (8000968 <HAL_UART_MspInit+0x118>)
 80008d6:	f000 feed 	bl	80016b4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008de:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ec:	2307      	movs	r3, #7
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <HAL_UART_MspInit+0x11c>)
 80008f8:	f000 fedc 	bl	80016b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}
}
 80008fc:	e02c      	b.n	8000958 <HAL_UART_MspInit+0x108>
	else if (huart->Instance == USART6)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_UART_MspInit+0x120>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d127      	bne.n	8000958 <HAL_UART_MspInit+0x108>
		__HAL_RCC_USART6_CLK_ENABLE();
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_UART_MspInit+0x114>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <HAL_UART_MspInit+0x114>)
 800090e:	f043 0320 	orr.w	r3, r3, #32
 8000912:	6453      	str	r3, [r2, #68]	; 0x44
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <HAL_UART_MspInit+0x114>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <HAL_UART_MspInit+0x114>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8000938:	23c0      	movs	r3, #192	; 0xc0
 800093a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000948:	2308      	movs	r3, #8
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <HAL_UART_MspInit+0x124>)
 8000954:	f000 feae 	bl	80016b4 <HAL_GPIO_Init>
}
 8000958:	bf00      	nop
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40011000 	.word	0x40011000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40020000 	.word	0x40020000
 8000970:	40011400 	.word	0x40011400
 8000974:	40020800 	.word	0x40020800

08000978 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <MX_USART1_UART_Init+0x58>)
 8000980:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_USART1_UART_Init+0x54>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x54>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_USART1_UART_Init+0x54>)
 80009bc:	f001 fbee 	bl	800219c <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d000      	beq.n	80009c8 <MX_USART1_UART_Init+0x50>
	{
		while (1);
 80009c6:	e7fe      	b.n	80009c6 <MX_USART1_UART_Init+0x4e>
	}
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000b8 	.word	0x200000b8
 80009d0:	40011000 	.word	0x40011000

080009d4 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b092      	sub	sp, #72	; 0x48
 80009d8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e0:	2301      	movs	r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e8:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 80009f4:	2319      	movs	r3, #25
 80009f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 80009f8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a02:	2309      	movs	r3, #9
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a06:	463b      	mov	r3, r7
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 ff95 	bl	8001938 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d000      	beq.n	8000a1e <SystemClock_Config+0x4a>
	{
		while (1)
 8000a1c:	e7fe      	b.n	8000a1c <SystemClock_Config+0x48>
			;
		}
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 8000a1e:	f000 ff4f 	bl	80018c0 <HAL_PWREx_EnableOverDrive>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d000      	beq.n	8000a32 <SystemClock_Config+0x5e>
	{
		while (1)
 8000a30:	e7fe      	b.n	8000a30 <SystemClock_Config+0x5c>
			;
		}
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1
 8000a32:	230f      	movs	r3, #15
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2302      	movs	r3, #2
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4e:	2107      	movs	r1, #7
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 f96b 	bl	8001d2c <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000a5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d000      	beq.n	8000a66 <SystemClock_Config+0x92>
	{
		while (1)
 8000a64:	e7fe      	b.n	8000a64 <SystemClock_Config+0x90>
		{
			;
		}
	}
}
 8000a66:	bf00      	nop
 8000a68:	3748      	adds	r7, #72	; 0x48
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MPU_Config>:
 *         The Region Size is 256KB, it is related to SRAM1 and SRAM2  memory size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000a76:	f000 fcf5 	bl	8001464 <HAL_MPU_Disable>

	/* Configure the MPU attributes as cacheable for SRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20010000;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MPU_Config+0x84>)
 8000a80:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000a82:	2311      	movs	r3, #17
 8000a84:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a86:	2303      	movs	r3, #3
 8000a88:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fcfd 	bl	80014a8 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8000ab2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ab6:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000ab8:	2316      	movs	r3, #22
 8000aba:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000abc:	2303      	movs	r3, #3
 8000abe:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000adc:	463b      	mov	r3, r7
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fce2 	bl	80014a8 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ae4:	2004      	movs	r0, #4
 8000ae6:	f000 fccd 	bl	8001484 <HAL_MPU_Enable>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20010000 	.word	0x20010000

08000af8 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 8000afc:	f7ff fe34 	bl	8000768 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8000b00:	f7ff fe52 	bl	80007a8 <SCB_EnableDCache>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <hardware_setup>:

void hardware_setup(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	/* Configure the MPU attributes as Write Through */
	MPU_Config();
 8000b0c:	f7ff ffb0 	bl	8000a70 <MPU_Config>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 8000b10:	f7ff fff2 	bl	8000af8 <CPU_CACHE_Enable>

	/* STM32F7xx HAL library initialization */
	HAL_Init();
 8000b14:	f000 fc18 	bl	8001348 <HAL_Init>

	/* Configure the system clock to 216 MHz */
	SystemClock_Config();
 8000b18:	f7ff ff5c 	bl	80009d4 <SystemClock_Config>

	/* Configure the SDRAM.  */
	BSP_SDRAM_Init();
 8000b1c:	f000 fb8a 	bl	8001234 <BSP_SDRAM_Init>

	/* Initialize UART for printf.  */
	MX_USART1_UART_Init();
 8000b20:	f7ff ff2a 	bl	8000978 <MX_USART1_UART_Init>

	/* Initialize the hardware random number generator.  */
	hardware_rand_initialize();
 8000b24:	f7ff fe80 	bl	8000828 <hardware_rand_initialize>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <main>:
void    thread_6_and_7_entry(ULONG thread_input);

VOID hardware_setup(void);

int main(int argc, char ** argv)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    /* Setup the hardware. */
    hardware_setup();
 8000b36:	f7ff ffe7 	bl	8000b08 <hardware_setup>

    /* Enter the ThreadX kernel.  */
    tx_kernel_enter();
 8000b3a:	f001 ff3f 	bl	80029bc <_tx_initialize_kernel_enter>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <tx_application_define>:


/* Define what the initial system looks like.  */

void    tx_application_define(void *first_unused_memory)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af08      	add	r7, sp, #32
 8000b4e:	6078      	str	r0, [r7, #4]

CHAR    *pointer;


    /* Create a byte memory pool from which to allocate the thread stacks.  */
    tx_byte_pool_create(&byte_pool_0, "byte pool 0", first_unused_memory, DEMO_BYTE_POOL_SIZE);
 8000b50:	2334      	movs	r3, #52	; 0x34
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	f242 33a0 	movw	r3, #9120	; 0x23a0
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4999      	ldr	r1, [pc, #612]	; (8000dc0 <tx_application_define+0x278>)
 8000b5c:	4899      	ldr	r0, [pc, #612]	; (8000dc4 <tx_application_define+0x27c>)
 8000b5e:	f002 faa1 	bl	80030a4 <_txe_byte_pool_create>

    /* Put system definition stuff in here, e.g. thread creates and other assorted
       create information.  */

    /* Allocate the stack for thread 0.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8000b62:	f107 010c 	add.w	r1, r7, #12
 8000b66:	2300      	movs	r3, #0
 8000b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6c:	4895      	ldr	r0, [pc, #596]	; (8000dc4 <tx_application_define+0x27c>)
 8000b6e:	f002 fa5b 	bl	8003028 <_txe_byte_allocate>

    /* Create the main thread.  */
    tx_thread_create(&thread_0, "thread 0", thread_0_entry, 0,  
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	22c8      	movs	r2, #200	; 0xc8
 8000b76:	9206      	str	r2, [sp, #24]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	9205      	str	r2, [sp, #20]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	9204      	str	r2, [sp, #16]
 8000b80:	2201      	movs	r2, #1
 8000b82:	9203      	str	r2, [sp, #12]
 8000b84:	2201      	movs	r2, #1
 8000b86:	9202      	str	r2, [sp, #8]
 8000b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b8c:	9201      	str	r2, [sp, #4]
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2300      	movs	r3, #0
 8000b92:	4a8d      	ldr	r2, [pc, #564]	; (8000dc8 <tx_application_define+0x280>)
 8000b94:	498d      	ldr	r1, [pc, #564]	; (8000dcc <tx_application_define+0x284>)
 8000b96:	488e      	ldr	r0, [pc, #568]	; (8000dd0 <tx_application_define+0x288>)
 8000b98:	f002 fd9a 	bl	80036d0 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            1, 1, TX_NO_TIME_SLICE, TX_AUTO_START);


    /* Allocate the stack for thread 1.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8000b9c:	f107 010c 	add.w	r1, r7, #12
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba6:	4887      	ldr	r0, [pc, #540]	; (8000dc4 <tx_application_define+0x27c>)
 8000ba8:	f002 fa3e 	bl	8003028 <_txe_byte_allocate>

    /* Create threads 1 and 2. These threads pass information through a ThreadX 
       message queue.  It is also interesting to note that these threads have a time
       slice.  */
    tx_thread_create(&thread_1, "thread 1", thread_1_entry, 1,  
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	22c8      	movs	r2, #200	; 0xc8
 8000bb0:	9206      	str	r2, [sp, #24]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	9205      	str	r2, [sp, #20]
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	9204      	str	r2, [sp, #16]
 8000bba:	2210      	movs	r2, #16
 8000bbc:	9203      	str	r2, [sp, #12]
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	9202      	str	r2, [sp, #8]
 8000bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc6:	9201      	str	r2, [sp, #4]
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	4a81      	ldr	r2, [pc, #516]	; (8000dd4 <tx_application_define+0x28c>)
 8000bce:	4982      	ldr	r1, [pc, #520]	; (8000dd8 <tx_application_define+0x290>)
 8000bd0:	4882      	ldr	r0, [pc, #520]	; (8000ddc <tx_application_define+0x294>)
 8000bd2:	f002 fd7d 	bl	80036d0 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            16, 16, 4, TX_AUTO_START);

    /* Allocate the stack for thread 2.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8000bd6:	f107 010c 	add.w	r1, r7, #12
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be0:	4878      	ldr	r0, [pc, #480]	; (8000dc4 <tx_application_define+0x27c>)
 8000be2:	f002 fa21 	bl	8003028 <_txe_byte_allocate>

    tx_thread_create(&thread_2, "thread 2", thread_2_entry, 2,  
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	22c8      	movs	r2, #200	; 0xc8
 8000bea:	9206      	str	r2, [sp, #24]
 8000bec:	2201      	movs	r2, #1
 8000bee:	9205      	str	r2, [sp, #20]
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	9204      	str	r2, [sp, #16]
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	9203      	str	r2, [sp, #12]
 8000bf8:	2210      	movs	r2, #16
 8000bfa:	9202      	str	r2, [sp, #8]
 8000bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c00:	9201      	str	r2, [sp, #4]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2302      	movs	r3, #2
 8000c06:	4a76      	ldr	r2, [pc, #472]	; (8000de0 <tx_application_define+0x298>)
 8000c08:	4976      	ldr	r1, [pc, #472]	; (8000de4 <tx_application_define+0x29c>)
 8000c0a:	4877      	ldr	r0, [pc, #476]	; (8000de8 <tx_application_define+0x2a0>)
 8000c0c:	f002 fd60 	bl	80036d0 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            16, 16, 4, TX_AUTO_START);

    /* Allocate the stack for thread 3.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8000c10:	f107 010c 	add.w	r1, r7, #12
 8000c14:	2300      	movs	r3, #0
 8000c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1a:	486a      	ldr	r0, [pc, #424]	; (8000dc4 <tx_application_define+0x27c>)
 8000c1c:	f002 fa04 	bl	8003028 <_txe_byte_allocate>

    /* Create threads 3 and 4.  These threads compete for a ThreadX counting semaphore.  
       An interesting thing here is that both threads share the same instruction area.  */
    tx_thread_create(&thread_3, "thread 3", thread_3_and_4_entry, 3,  
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	22c8      	movs	r2, #200	; 0xc8
 8000c24:	9206      	str	r2, [sp, #24]
 8000c26:	2201      	movs	r2, #1
 8000c28:	9205      	str	r2, [sp, #20]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	9204      	str	r2, [sp, #16]
 8000c2e:	2208      	movs	r2, #8
 8000c30:	9203      	str	r2, [sp, #12]
 8000c32:	2208      	movs	r2, #8
 8000c34:	9202      	str	r2, [sp, #8]
 8000c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c3a:	9201      	str	r2, [sp, #4]
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2303      	movs	r3, #3
 8000c40:	4a6a      	ldr	r2, [pc, #424]	; (8000dec <tx_application_define+0x2a4>)
 8000c42:	496b      	ldr	r1, [pc, #428]	; (8000df0 <tx_application_define+0x2a8>)
 8000c44:	486b      	ldr	r0, [pc, #428]	; (8000df4 <tx_application_define+0x2ac>)
 8000c46:	f002 fd43 	bl	80036d0 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            8, 8, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 4.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8000c4a:	f107 010c 	add.w	r1, r7, #12
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c54:	485b      	ldr	r0, [pc, #364]	; (8000dc4 <tx_application_define+0x27c>)
 8000c56:	f002 f9e7 	bl	8003028 <_txe_byte_allocate>

    tx_thread_create(&thread_4, "thread 4", thread_3_and_4_entry, 4,  
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	22c8      	movs	r2, #200	; 0xc8
 8000c5e:	9206      	str	r2, [sp, #24]
 8000c60:	2201      	movs	r2, #1
 8000c62:	9205      	str	r2, [sp, #20]
 8000c64:	2200      	movs	r2, #0
 8000c66:	9204      	str	r2, [sp, #16]
 8000c68:	2208      	movs	r2, #8
 8000c6a:	9203      	str	r2, [sp, #12]
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	9202      	str	r2, [sp, #8]
 8000c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c74:	9201      	str	r2, [sp, #4]
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2304      	movs	r3, #4
 8000c7a:	4a5c      	ldr	r2, [pc, #368]	; (8000dec <tx_application_define+0x2a4>)
 8000c7c:	495e      	ldr	r1, [pc, #376]	; (8000df8 <tx_application_define+0x2b0>)
 8000c7e:	485f      	ldr	r0, [pc, #380]	; (8000dfc <tx_application_define+0x2b4>)
 8000c80:	f002 fd26 	bl	80036d0 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            8, 8, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 5.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8000c84:	f107 010c 	add.w	r1, r7, #12
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8e:	484d      	ldr	r0, [pc, #308]	; (8000dc4 <tx_application_define+0x27c>)
 8000c90:	f002 f9ca 	bl	8003028 <_txe_byte_allocate>

    /* Create thread 5.  This thread simply pends on an event flag which will be set
       by thread_0.  */
    tx_thread_create(&thread_5, "thread 5", thread_5_entry, 5,  
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	22c8      	movs	r2, #200	; 0xc8
 8000c98:	9206      	str	r2, [sp, #24]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	9205      	str	r2, [sp, #20]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	9204      	str	r2, [sp, #16]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	9203      	str	r2, [sp, #12]
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	9202      	str	r2, [sp, #8]
 8000caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cae:	9201      	str	r2, [sp, #4]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	4a52      	ldr	r2, [pc, #328]	; (8000e00 <tx_application_define+0x2b8>)
 8000cb6:	4953      	ldr	r1, [pc, #332]	; (8000e04 <tx_application_define+0x2bc>)
 8000cb8:	4853      	ldr	r0, [pc, #332]	; (8000e08 <tx_application_define+0x2c0>)
 8000cba:	f002 fd09 	bl	80036d0 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            4, 4, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 6.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8000cbe:	f107 010c 	add.w	r1, r7, #12
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc8:	483e      	ldr	r0, [pc, #248]	; (8000dc4 <tx_application_define+0x27c>)
 8000cca:	f002 f9ad 	bl	8003028 <_txe_byte_allocate>

    /* Create threads 6 and 7.  These threads compete for a ThreadX mutex.  */
    tx_thread_create(&thread_6, "thread 6", thread_6_and_7_entry, 6,  
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	22c8      	movs	r2, #200	; 0xc8
 8000cd2:	9206      	str	r2, [sp, #24]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	9205      	str	r2, [sp, #20]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	9204      	str	r2, [sp, #16]
 8000cdc:	2208      	movs	r2, #8
 8000cde:	9203      	str	r2, [sp, #12]
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	9202      	str	r2, [sp, #8]
 8000ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce8:	9201      	str	r2, [sp, #4]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2306      	movs	r3, #6
 8000cee:	4a47      	ldr	r2, [pc, #284]	; (8000e0c <tx_application_define+0x2c4>)
 8000cf0:	4947      	ldr	r1, [pc, #284]	; (8000e10 <tx_application_define+0x2c8>)
 8000cf2:	4848      	ldr	r0, [pc, #288]	; (8000e14 <tx_application_define+0x2cc>)
 8000cf4:	f002 fcec 	bl	80036d0 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            8, 8, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 7.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8000cf8:	f107 010c 	add.w	r1, r7, #12
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d02:	4830      	ldr	r0, [pc, #192]	; (8000dc4 <tx_application_define+0x27c>)
 8000d04:	f002 f990 	bl	8003028 <_txe_byte_allocate>

    tx_thread_create(&thread_7, "thread 7", thread_6_and_7_entry, 7,  
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	22c8      	movs	r2, #200	; 0xc8
 8000d0c:	9206      	str	r2, [sp, #24]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	9205      	str	r2, [sp, #20]
 8000d12:	2200      	movs	r2, #0
 8000d14:	9204      	str	r2, [sp, #16]
 8000d16:	2208      	movs	r2, #8
 8000d18:	9203      	str	r2, [sp, #12]
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	9202      	str	r2, [sp, #8]
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	9201      	str	r2, [sp, #4]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2307      	movs	r3, #7
 8000d28:	4a38      	ldr	r2, [pc, #224]	; (8000e0c <tx_application_define+0x2c4>)
 8000d2a:	493b      	ldr	r1, [pc, #236]	; (8000e18 <tx_application_define+0x2d0>)
 8000d2c:	483b      	ldr	r0, [pc, #236]	; (8000e1c <tx_application_define+0x2d4>)
 8000d2e:	f002 fccf 	bl	80036d0 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            8, 8, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the message queue.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_QUEUE_SIZE*sizeof(ULONG), TX_NO_WAIT);
 8000d32:	f107 010c 	add.w	r1, r7, #12
 8000d36:	2300      	movs	r3, #0
 8000d38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d3c:	4821      	ldr	r0, [pc, #132]	; (8000dc4 <tx_application_define+0x27c>)
 8000d3e:	f002 f973 	bl	8003028 <_txe_byte_allocate>

    /* Create the message queue shared by threads 1 and 2.  */
    tx_queue_create(&queue_0, "queue 0", TX_1_ULONG, pointer, DEMO_QUEUE_SIZE*sizeof(ULONG));
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	233c      	movs	r3, #60	; 0x3c
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	2201      	movs	r2, #1
 8000d52:	4933      	ldr	r1, [pc, #204]	; (8000e20 <tx_application_define+0x2d8>)
 8000d54:	4833      	ldr	r0, [pc, #204]	; (8000e24 <tx_application_define+0x2dc>)
 8000d56:	f002 fb69 	bl	800342c <_txe_queue_create>

    /* Create the semaphore used by threads 3 and 4.  */
    tx_semaphore_create(&semaphore_0, "semaphore 0", 1);
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4932      	ldr	r1, [pc, #200]	; (8000e28 <tx_application_define+0x2e0>)
 8000d60:	4832      	ldr	r0, [pc, #200]	; (8000e2c <tx_application_define+0x2e4>)
 8000d62:	f002 fc2f 	bl	80035c4 <_txe_semaphore_create>

    /* Create the event flags group used by threads 1 and 5.  */
    tx_event_flags_create(&event_flags_0, "event flags 0");
 8000d66:	2228      	movs	r2, #40	; 0x28
 8000d68:	4931      	ldr	r1, [pc, #196]	; (8000e30 <tx_application_define+0x2e8>)
 8000d6a:	4832      	ldr	r0, [pc, #200]	; (8000e34 <tx_application_define+0x2ec>)
 8000d6c:	f002 fa06 	bl	800317c <_txe_event_flags_create>

    /* Create the mutex used by thread 6 and 7 without priority inheritance.  */
    tx_mutex_create(&mutex_0, "mutex 0", TX_NO_INHERIT);
 8000d70:	2334      	movs	r3, #52	; 0x34
 8000d72:	2200      	movs	r2, #0
 8000d74:	4930      	ldr	r1, [pc, #192]	; (8000e38 <tx_application_define+0x2f0>)
 8000d76:	4831      	ldr	r0, [pc, #196]	; (8000e3c <tx_application_define+0x2f4>)
 8000d78:	f002 fa9e 	bl	80032b8 <_txe_mutex_create>

    /* Allocate the memory for a small block pool.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_BLOCK_POOL_SIZE, TX_NO_WAIT);
 8000d7c:	f107 010c 	add.w	r1, r7, #12
 8000d80:	2300      	movs	r3, #0
 8000d82:	2264      	movs	r2, #100	; 0x64
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <tx_application_define+0x27c>)
 8000d86:	f002 f94f 	bl	8003028 <_txe_byte_allocate>

    /* Create a block memory pool to allocate a message buffer from.  */
    tx_block_pool_create(&block_pool_0, "block pool 0", sizeof(ULONG), pointer, DEMO_BLOCK_POOL_SIZE);
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	2330      	movs	r3, #48	; 0x30
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	2204      	movs	r2, #4
 8000d98:	4929      	ldr	r1, [pc, #164]	; (8000e40 <tx_application_define+0x2f8>)
 8000d9a:	482a      	ldr	r0, [pc, #168]	; (8000e44 <tx_application_define+0x2fc>)
 8000d9c:	f002 f8c2 	bl	8002f24 <_txe_block_pool_create>

    /* Allocate a block and release the block memory.  */
    tx_block_allocate(&block_pool_0, (VOID **) &pointer, TX_NO_WAIT);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	4826      	ldr	r0, [pc, #152]	; (8000e44 <tx_application_define+0x2fc>)
 8000daa:	f002 f88f 	bl	8002ecc <_txe_block_allocate>

    /* Release the block back to the pool.  */
    tx_block_release(pointer);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 f92b 	bl	800300c <_txe_block_release>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08005154 	.word	0x08005154
 8000dc4:	20000564 	.word	0x20000564
 8000dc8:	08000e49 	.word	0x08000e49
 8000dcc:	08005160 	.word	0x08005160
 8000dd0:	20000698 	.word	0x20000698
 8000dd4:	08000e89 	.word	0x08000e89
 8000dd8:	0800516c 	.word	0x0800516c
 8000ddc:	200003d0 	.word	0x200003d0
 8000de0:	08000ed1 	.word	0x08000ed1
 8000de4:	08005178 	.word	0x08005178
 8000de8:	20000138 	.word	0x20000138
 8000dec:	08000f25 	.word	0x08000f25
 8000df0:	08005184 	.word	0x08005184
 8000df4:	200005d0 	.word	0x200005d0
 8000df8:	08005190 	.word	0x08005190
 8000dfc:	20000300 	.word	0x20000300
 8000e00:	08000f8d 	.word	0x08000f8d
 8000e04:	0800519c 	.word	0x0800519c
 8000e08:	20000800 	.word	0x20000800
 8000e0c:	08000fd5 	.word	0x08000fd5
 8000e10:	080051a8 	.word	0x080051a8
 8000e14:	20000498 	.word	0x20000498
 8000e18:	080051b4 	.word	0x080051b4
 8000e1c:	20000228 	.word	0x20000228
 8000e20:	080051c0 	.word	0x080051c0
 8000e24:	20000760 	.word	0x20000760
 8000e28:	080051c8 	.word	0x080051c8
 8000e2c:	20000208 	.word	0x20000208
 8000e30:	080051d4 	.word	0x080051d4
 8000e34:	200007a8 	.word	0x200007a8
 8000e38:	080051e4 	.word	0x080051e4
 8000e3c:	20000598 	.word	0x20000598
 8000e40:	080051ec 	.word	0x080051ec
 8000e44:	200007d0 	.word	0x200007d0

08000e48 <thread_0_entry>:


/* Define the test threads.  */

void    thread_0_entry(ULONG thread_input)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    /* This thread simply sits in while-forever-sleep loop.  */
    while(1)
    {

        /* Increment the thread counter.  */
        thread_0_counter++;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <thread_0_entry+0x38>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <thread_0_entry+0x38>)
 8000e58:	6013      	str	r3, [r2, #0]

        /* Sleep for 10 ticks.  */
        tx_thread_sleep(10);
 8000e5a:	200a      	movs	r0, #10
 8000e5c:	f001 fe0a 	bl	8002a74 <_tx_thread_sleep>

        /* Set event flag 0 to wakeup thread 5.  */
        status =  tx_event_flags_set(&event_flags_0, 0x1, TX_OR);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2101      	movs	r1, #1
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <thread_0_entry+0x3c>)
 8000e66:	f002 fa11 	bl	800328c <_txe_event_flags_set>
 8000e6a:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d100      	bne.n	8000e74 <thread_0_entry+0x2c>
        thread_0_counter++;
 8000e72:	e7ed      	b.n	8000e50 <thread_0_entry+0x8>
            break;
 8000e74:	bf00      	nop
    }
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200002f4 	.word	0x200002f4
 8000e84:	200007a8 	.word	0x200007a8

08000e88 <thread_1_entry>:


void    thread_1_entry(ULONG thread_input)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
    /* This thread simply sends messages to a queue shared by thread 2.  */
    while(1)
    {

        /* Increment the thread counter.  */
        thread_1_counter++;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <thread_1_entry+0x3c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <thread_1_entry+0x3c>)
 8000e98:	6013      	str	r3, [r2, #0]

        /* Send message to queue 0.  */
        status =  tx_queue_send(&queue_0, &thread_1_messages_sent, TX_WAIT_FOREVER);
 8000e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9e:	490a      	ldr	r1, [pc, #40]	; (8000ec8 <thread_1_entry+0x40>)
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <thread_1_entry+0x44>)
 8000ea2:	f002 fb63 	bl	800356c <_txe_queue_send>
 8000ea6:	60f8      	str	r0, [r7, #12]

        /* Check completion status.  */
        if (status != TX_SUCCESS)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d105      	bne.n	8000eba <thread_1_entry+0x32>
            break;

        /* Increment the message sent.  */
        thread_1_messages_sent++;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <thread_1_entry+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <thread_1_entry+0x40>)
 8000eb6:	6013      	str	r3, [r2, #0]
        thread_1_counter++;
 8000eb8:	e7ea      	b.n	8000e90 <thread_1_entry+0x8>
            break;
 8000eba:	bf00      	nop
    }
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000560 	.word	0x20000560
 8000ec8:	2000079c 	.word	0x2000079c
 8000ecc:	20000760 	.word	0x20000760

08000ed0 <thread_2_entry>:


void    thread_2_entry(ULONG thread_input)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    /* This thread retrieves messages placed on the queue by thread 1.  */
    while(1)
    {

        /* Increment the thread counter.  */
        thread_2_counter++;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <thread_2_entry+0x48>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <thread_2_entry+0x48>)
 8000ee0:	6013      	str	r3, [r2, #0]

        /* Retrieve a message from the queue.  */
        status = tx_queue_receive(&queue_0, &received_message, TX_WAIT_FOREVER);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eea:	4619      	mov	r1, r3
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <thread_2_entry+0x4c>)
 8000eee:	f002 fb11 	bl	8003514 <_txe_queue_receive>
 8000ef2:	60f8      	str	r0, [r7, #12]

        /* Check completion status and make sure the message is what we 
           expected.  */
        if ((status != TX_SUCCESS) || (received_message != thread_2_messages_received))
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10a      	bne.n	8000f10 <thread_2_entry+0x40>
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <thread_2_entry+0x50>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d105      	bne.n	8000f10 <thread_2_entry+0x40>
            break;
        
        /* Otherwise, all is okay.  Increment the received message count.  */
        thread_2_messages_received++;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <thread_2_entry+0x50>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <thread_2_entry+0x50>)
 8000f0c:	6013      	str	r3, [r2, #0]
        thread_2_counter++;
 8000f0e:	e7e3      	b.n	8000ed8 <thread_2_entry+0x8>
    }
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200002f8 	.word	0x200002f8
 8000f1c:	20000760 	.word	0x20000760
 8000f20:	200007a0 	.word	0x200007a0

08000f24 <thread_3_and_4_entry>:


void    thread_3_and_4_entry(ULONG thread_input)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
       below shows, these function compete for ownership of semaphore_0.  */
    while(1)
    {

        /* Increment the thread counter.  */
        if (thread_input == 3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d105      	bne.n	8000f3e <thread_3_and_4_entry+0x1a>
            thread_3_counter++;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <thread_3_and_4_entry+0x5c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <thread_3_and_4_entry+0x5c>)
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e004      	b.n	8000f48 <thread_3_and_4_entry+0x24>
        else
            thread_4_counter++;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <thread_3_and_4_entry+0x60>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <thread_3_and_4_entry+0x60>)
 8000f46:	6013      	str	r3, [r2, #0]

        /* Get the semaphore with suspension.  */
        status =  tx_semaphore_get(&semaphore_0, TX_WAIT_FOREVER);
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	480e      	ldr	r0, [pc, #56]	; (8000f88 <thread_3_and_4_entry+0x64>)
 8000f4e:	f002 fb93 	bl	8003678 <_txe_semaphore_get>
 8000f52:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10a      	bne.n	8000f70 <thread_3_and_4_entry+0x4c>
            break;

        /* Sleep for 2 ticks to hold the semaphore.  */
        tx_thread_sleep(2);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f001 fd8a 	bl	8002a74 <_tx_thread_sleep>

        /* Release the semaphore.  */
        status =  tx_semaphore_put(&semaphore_0);
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <thread_3_and_4_entry+0x64>)
 8000f62:	f002 fba9 	bl	80036b8 <_txe_semaphore_put>
 8000f66:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <thread_3_and_4_entry+0x50>
        if (thread_input == 3)
 8000f6e:	e7dd      	b.n	8000f2c <thread_3_and_4_entry+0x8>
            break;
 8000f70:	bf00      	nop
 8000f72:	e000      	b.n	8000f76 <thread_3_and_4_entry+0x52>
            break;
 8000f74:	bf00      	nop
    }
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000200 	.word	0x20000200
 8000f84:	200003c8 	.word	0x200003c8
 8000f88:	20000208 	.word	0x20000208

08000f8c <thread_5_entry>:


void    thread_5_entry(ULONG thread_input)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	6078      	str	r0, [r7, #4]
    /* This thread simply waits for an event in a forever loop.  */
    while(1)
    {

        /* Increment the thread counter.  */
        thread_5_counter++;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <thread_5_entry+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <thread_5_entry+0x40>)
 8000f9c:	6013      	str	r3, [r2, #0]

        /* Wait for event flag 0.  */
        status =  tx_event_flags_get(&event_flags_0, 0x1, TX_OR_CLEAR, 
 8000f9e:	f107 0208 	add.w	r2, r7, #8
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	2201      	movs	r2, #1
 8000fac:	2101      	movs	r1, #1
 8000fae:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <thread_5_entry+0x44>)
 8000fb0:	f002 f940 	bl	8003234 <_txe_event_flags_get>
 8000fb4:	60f8      	str	r0, [r7, #12]
                                                &actual_flags, TX_WAIT_FOREVER);

        /* Check status.  */
        if ((status != TX_SUCCESS) || (actual_flags != 0x1))
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d103      	bne.n	8000fc4 <thread_5_entry+0x38>
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d100      	bne.n	8000fc4 <thread_5_entry+0x38>
        thread_5_counter++;
 8000fc2:	e7e7      	b.n	8000f94 <thread_5_entry+0x8>
            break;
    }
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000204 	.word	0x20000204
 8000fd0:	200007a8 	.word	0x200007a8

08000fd4 <thread_6_and_7_entry>:


void    thread_6_and_7_entry(ULONG thread_input)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
       below shows, these function compete for ownership of mutex_0.  */
    while(1)
    {

        /* Increment the thread counter.  */
        if (thread_input == 6)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d105      	bne.n	8000fee <thread_6_and_7_entry+0x1a>
            thread_6_counter++;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <thread_6_and_7_entry+0x84>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <thread_6_and_7_entry+0x84>)
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e004      	b.n	8000ff8 <thread_6_and_7_entry+0x24>
        else
            thread_7_counter++;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <thread_6_and_7_entry+0x88>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <thread_6_and_7_entry+0x88>)
 8000ff6:	6013      	str	r3, [r2, #0]

        /* Get the mutex with suspension.  */
        status =  tx_mutex_get(&mutex_0, TX_WAIT_FOREVER);
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	4818      	ldr	r0, [pc, #96]	; (8001060 <thread_6_and_7_entry+0x8c>)
 8000ffe:	f002 f9c5 	bl	800338c <_txe_mutex_get>
 8001002:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d11a      	bne.n	8001040 <thread_6_and_7_entry+0x6c>
            break;

        /* Get the mutex again with suspension.  This shows
           that an owning thread may retrieve the mutex it
           owns multiple times.  */
        status =  tx_mutex_get(&mutex_0, TX_WAIT_FOREVER);
 800100a:	f04f 31ff 	mov.w	r1, #4294967295
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <thread_6_and_7_entry+0x8c>)
 8001010:	f002 f9bc 	bl	800338c <_txe_mutex_get>
 8001014:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d113      	bne.n	8001044 <thread_6_and_7_entry+0x70>
            break;

        /* Sleep for 2 ticks to hold the mutex.  */
        tx_thread_sleep(2);
 800101c:	2002      	movs	r0, #2
 800101e:	f001 fd29 	bl	8002a74 <_tx_thread_sleep>

        /* Release the mutex.  */
        status =  tx_mutex_put(&mutex_0);
 8001022:	480f      	ldr	r0, [pc, #60]	; (8001060 <thread_6_and_7_entry+0x8c>)
 8001024:	f002 f9e6 	bl	80033f4 <_txe_mutex_put>
 8001028:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10b      	bne.n	8001048 <thread_6_and_7_entry+0x74>
            break;

        /* Release the mutex again.  This will actually 
           release ownership since it was obtained twice.  */
        status =  tx_mutex_put(&mutex_0);
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <thread_6_and_7_entry+0x8c>)
 8001032:	f002 f9df 	bl	80033f4 <_txe_mutex_put>
 8001036:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <thread_6_and_7_entry+0x78>
        if (thread_input == 6)
 800103e:	e7cd      	b.n	8000fdc <thread_6_and_7_entry+0x8>
            break;
 8001040:	bf00      	nop
 8001042:	e004      	b.n	800104e <thread_6_and_7_entry+0x7a>
            break;
 8001044:	bf00      	nop
 8001046:	e002      	b.n	800104e <thread_6_and_7_entry+0x7a>
            break;
 8001048:	bf00      	nop
 800104a:	e000      	b.n	800104e <thread_6_and_7_entry+0x7a>
            break;
 800104c:	bf00      	nop
    }
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200007a4 	.word	0x200007a4
 800105c:	200002f0 	.word	0x200002f0
 8001060:	20000598 	.word	0x20000598

08001064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001066:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopForever+0xe>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopForever+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800108e:	f001 fb25 	bl	80026dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001092:	f004 f827 	bl	80050e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff fd49 	bl	8000b2c <main>

0800109a <LoopForever>:

LoopForever:
    b LoopForever
 800109a:	e7fe      	b.n	800109a <LoopForever>
  ldr   r0, =_estack
 800109c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010a8:	08005254 	.word	0x08005254
  ldr r2, =_sbss
 80010ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010b0:	20000fa4 	.word	0x20000fa4

080010b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>

080010b6 <HardFault_Handler>:
  .size Default_Handler, .-Default_Handler

HardFault_Handler:
  b HardFault_Handler
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler>

080010b8 <MemManage_Handler>:

MemManage_Handler:
  b MemManage_Handler
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler>

080010ba <BusFault_Handler>:

BusFault_Handler:
  b BusFault_Handler
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler>

080010bc <UsageFault_Handler>:

UsageFault_Handler:
  b UsageFault_Handler
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler>
	...

080010c0 <BSP_SDRAM_MspInit>:
{
	static DMA_HandleTypeDef dma_handle;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 80010c0:	4b53      	ldr	r3, [pc, #332]	; (8001210 <BSP_SDRAM_MspInit+0x150>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Common GPIO configuration */
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010c2:	2102      	movs	r1, #2
	__HAL_RCC_FMC_CLK_ENABLE();
 80010c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010c6:	f042 0201 	orr.w	r2, r2, #1
{
 80010ca:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_FMC_CLK_ENABLE();
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
{
 80010ce:	4606      	mov	r6, r0
	__HAL_RCC_FMC_CLK_ENABLE();
 80010d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	gpio_init_structure.Pull = GPIO_PULLUP;
 80010d2:	2001      	movs	r0, #1
{
 80010d4:	b08e      	sub	sp, #56	; 0x38
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Alternate = GPIO_AF12_FMC;

	/* GPIOC configuration */
	gpio_init_structure.Pin = GPIO_PIN_3;
 80010d6:	2508      	movs	r5, #8
	__HAL_RCC_FMC_CLK_ENABLE();
 80010d8:	4002      	ands	r2, r0
	gpio_init_structure.Pin = GPIO_PIN_3;
 80010da:	ac0e      	add	r4, sp, #56	; 0x38
	__HAL_RCC_FMC_CLK_ENABLE();
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	9a01      	ldr	r2, [sp, #4]
	__DMAx_CLK_ENABLE()
 80010e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
 80010e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80010ee:	9202      	str	r2, [sp, #8]
 80010f0:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f4:	f042 0204 	orr.w	r2, r2, #4
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
 80010fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010fc:	f002 0204 	and.w	r2, r2, #4
 8001100:	9203      	str	r2, [sp, #12]
 8001102:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001106:	432a      	orrs	r2, r5
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
 800110a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110c:	402a      	ands	r2, r5
 800110e:	9204      	str	r2, [sp, #16]
 8001110:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001114:	f042 0210 	orr.w	r2, r2, #16
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
 800111a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111c:	f002 0210 	and.w	r2, r2, #16
 8001120:	9205      	str	r2, [sp, #20]
 8001122:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001126:	f042 0220 	orr.w	r2, r2, #32
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
 800112c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800112e:	f002 0220 	and.w	r2, r2, #32
 8001132:	9206      	str	r2, [sp, #24]
 8001134:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800113c:	631a      	str	r2, [r3, #48]	; 0x30
 800113e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001140:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001144:	9207      	str	r2, [sp, #28]
 8001146:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800114a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001150:	220c      	movs	r2, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_init_structure.Pin = GPIO_PIN_3;
 8001154:	f844 5d14 	str.w	r5, [r4, #-20]!
	/* GPIOH configuration */
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);

	/* Configure common DMA parameters */
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8001158:	2500      	movs	r5, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800115e:	910a      	str	r1, [sp, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001160:	910c      	str	r1, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001162:	4621      	mov	r1, r4
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001164:	9308      	str	r3, [sp, #32]
	gpio_init_structure.Pull = GPIO_PULLUP;
 8001166:	900b      	str	r0, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001168:	482a      	ldr	r0, [pc, #168]	; (8001214 <BSP_SDRAM_MspInit+0x154>)
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800116a:	920d      	str	r2, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800116c:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800116e:	f000 faa1 	bl	80016b4 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001172:	f24c 7303 	movw	r3, #50947	; 0xc703
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001176:	4621      	mov	r1, r4
 8001178:	4827      	ldr	r0, [pc, #156]	; (8001218 <BSP_SDRAM_MspInit+0x158>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800117a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800117c:	f000 fa9a 	bl	80016b4 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8001180:	f64f 7383 	movw	r3, #65411	; 0xff83
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001184:	4621      	mov	r1, r4
 8001186:	4825      	ldr	r0, [pc, #148]	; (800121c <BSP_SDRAM_MspInit+0x15c>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8001188:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800118a:	f000 fa93 	bl	80016b4 <HAL_GPIO_Init>
	gpio_init_structure.Pin =
 800118e:	f64f 033f 	movw	r3, #63551	; 0xf83f
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001192:	4621      	mov	r1, r4
 8001194:	4822      	ldr	r0, [pc, #136]	; (8001220 <BSP_SDRAM_MspInit+0x160>)
	gpio_init_structure.Pin =
 8001196:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001198:	f000 fa8c 	bl	80016b4 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 800119c:	f248 1333 	movw	r3, #33075	; 0x8133
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80011a0:	4621      	mov	r1, r4
 80011a2:	4820      	ldr	r0, [pc, #128]	; (8001224 <BSP_SDRAM_MspInit+0x164>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 80011a4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80011a6:	f000 fa85 	bl	80016b4 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 80011aa:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80011ac:	4621      	mov	r1, r4
 80011ae:	481e      	ldr	r0, [pc, #120]	; (8001228 <BSP_SDRAM_MspInit+0x168>)
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 80011b0:	4c1e      	ldr	r4, [pc, #120]	; (800122c <BSP_SDRAM_MspInit+0x16c>)
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 80011b2:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80011b4:	f000 fa7e 	bl	80016b4 <HAL_GPIO_Init>
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 80011b8:	f44f 7300 	mov.w	r3, #512	; 0x200
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80011bc:	2180      	movs	r1, #128	; 0x80
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 80011be:	f44f 6280 	mov.w	r2, #1024	; 0x400
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 80011c6:	60e3      	str	r3, [r4, #12]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	dma_handle.Init.Mode = DMA_NORMAL;
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 80011c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80011cc:	60a1      	str	r1, [r4, #8]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 80011d2:	6122      	str	r2, [r4, #16]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011d4:	2203      	movs	r2, #3
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 80011d6:	6223      	str	r3, [r4, #32]
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;

	dma_handle.Instance = SDRAM_DMAx_STREAM;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <BSP_SDRAM_MspInit+0x170>)
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011da:	6325      	str	r5, [r4, #48]	; 0x30
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011dc:	6160      	str	r0, [r4, #20]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsdram, hdma, dma_handle);

	/* Deinitialize the stream for new transfer */
	HAL_DMA_DeInit(&dma_handle);
 80011de:	4620      	mov	r0, r4
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 80011e0:	6334      	str	r4, [r6, #48]	; 0x30
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e2:	61a1      	str	r1, [r4, #24]
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011e4:	62a2      	str	r2, [r4, #40]	; 0x28
	dma_handle.Init.Mode = DMA_NORMAL;
 80011e6:	61e5      	str	r5, [r4, #28]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e8:	6265      	str	r5, [r4, #36]	; 0x24
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 80011ea:	62e5      	str	r5, [r4, #44]	; 0x2c
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 80011ec:	63a6      	str	r6, [r4, #56]	; 0x38
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 80011ee:	e9c4 3500 	strd	r3, r5, [r4]
	HAL_DMA_DeInit(&dma_handle);
 80011f2:	f000 fa1d 	bl	8001630 <HAL_DMA_DeInit>

	/* Configure the DMA stream */
	HAL_DMA_Init(&dma_handle);
 80011f6:	4620      	mov	r0, r4
 80011f8:	f000 f97e 	bl	80014f8 <HAL_DMA_Init>

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80011fc:	462a      	mov	r2, r5
 80011fe:	210f      	movs	r1, #15
 8001200:	2038      	movs	r0, #56	; 0x38
 8001202:	f000 f8eb 	bl	80013dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001206:	2038      	movs	r0, #56	; 0x38
 8001208:	f000 f91e 	bl	8001448 <HAL_NVIC_EnableIRQ>
}
 800120c:	b00e      	add	sp, #56	; 0x38
 800120e:	bd70      	pop	{r4, r5, r6, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800
 8001228:	40021c00 	.word	0x40021c00
 800122c:	20000058 	.word	0x20000058
 8001230:	40026410 	.word	0x40026410

08001234 <BSP_SDRAM_Init>:
{
 8001234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001238:	483d      	ldr	r0, [pc, #244]	; (8001330 <BSP_SDRAM_Init+0xfc>)
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 800123a:	2600      	movs	r6, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800123c:	4d3d      	ldr	r5, [pc, #244]	; (8001334 <BSP_SDRAM_Init+0x100>)
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800123e:	2140      	movs	r1, #64	; 0x40
	Timing.LoadToActiveDelay = 2;
 8001240:	4c3d      	ldr	r4, [pc, #244]	; (8001338 <BSP_SDRAM_Init+0x104>)
	sdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 8001242:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8001246:	f04f 0810 	mov.w	r8, #16
	Timing.LoadToActiveDelay = 2;
 800124a:	f04f 0902 	mov.w	r9, #2
	Timing.ExitSelfRefreshDelay = 7;
 800124e:	2307      	movs	r3, #7
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	Timing.SelfRefreshTime = 4;
 8001254:	f04f 0a04 	mov.w	sl, #4
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001258:	f44f 7780 	mov.w	r7, #256	; 0x100
{
 800125c:	b083      	sub	sp, #12
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800125e:	6028      	str	r0, [r5, #0]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001260:	6169      	str	r1, [r5, #20]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001262:	4628      	mov	r0, r5
 8001264:	4631      	mov	r1, r6
	Timing.ExitSelfRefreshDelay = 7;
 8001266:	6063      	str	r3, [r4, #4]
	Timing.RowCycleDelay = 7;
 8001268:	60e3      	str	r3, [r4, #12]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800126a:	61af      	str	r7, [r5, #24]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800126c:	2701      	movs	r7, #1
	Timing.SelfRefreshTime = 4;
 800126e:	f8c4 a008 	str.w	sl, [r4, #8]
	Timing.LoadToActiveDelay = 2;
 8001272:	f8c4 9000 	str.w	r9, [r4]
	Timing.RCDDelay = 2;
 8001276:	f8c4 9018 	str.w	r9, [r4, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800127a:	61ee      	str	r6, [r5, #28]
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800127c:	62ae      	str	r6, [r5, #40]	; 0x28
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800127e:	f8c5 a00c 	str.w	sl, [r5, #12]
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8001282:	f8c5 8010 	str.w	r8, [r5, #16]
 8001286:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001340 <BSP_SDRAM_Init+0x10c>
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800128a:	e9c5 c208 	strd	ip, r2, [r5, #32]
	Timing.RPDelay = 2;
 800128e:	e9c4 9904 	strd	r9, r9, [r4, #16]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001292:	e9c5 6601 	strd	r6, r6, [r5, #4]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001296:	f7ff ff13 	bl	80010c0 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800129a:	4621      	mov	r1, r4
 800129c:	4628      	mov	r0, r5
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800129e:	4c27      	ldr	r4, [pc, #156]	; (800133c <BSP_SDRAM_Init+0x108>)
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80012a0:	f000 fe88 	bl	8001fb4 <HAL_SDRAM_Init>
 80012a4:	1b83      	subs	r3, r0, r6
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012a6:	4621      	mov	r1, r4
 80012a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80012ac:	bf18      	it	ne
 80012ae:	2301      	movne	r3, #1
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012b0:	4628      	mov	r0, r5
	__IO uint32_t tmpmrd = 0;
 80012b2:	9601      	str	r6, [sp, #4]
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80012b4:	f88b 3000 	strb.w	r3, [fp]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012b8:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 80012bc:	60e6      	str	r6, [r4, #12]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80012be:	6027      	str	r7, [r4, #0]
	Command.AutoRefreshNumber = 1;
 80012c0:	60a7      	str	r7, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012c2:	f000 fe99 	bl	8001ff8 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 80012c6:	4638      	mov	r0, r7
 80012c8:	f000 f862 	bl	8001390 <HAL_Delay>
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012cc:	4621      	mov	r1, r4
 80012ce:	4628      	mov	r0, r5
 80012d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012d4:	e9c4 9800 	strd	r9, r8, [r4]
	Command.ModeRegisterDefinition = 0;
 80012d8:	e9c4 7602 	strd	r7, r6, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012dc:	f000 fe8c 	bl	8001ff8 <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80012e0:	f04f 0c03 	mov.w	ip, #3
	Command.AutoRefreshNumber = 8;
 80012e4:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012e6:	4621      	mov	r1, r4
 80012e8:	4628      	mov	r0, r5
 80012ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80012ee:	f8c4 c000 	str.w	ip, [r4]
	Command.AutoRefreshNumber = 8;
 80012f2:	60a3      	str	r3, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012f4:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 80012f8:	60e6      	str	r6, [r4, #12]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80012fa:	f000 fe7d 	bl	8001ff8 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 80012fe:	f44f 7308 	mov.w	r3, #544	; 0x220
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001302:	4621      	mov	r1, r4
 8001304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001308:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 800130a:	9301      	str	r3, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 800130c:	9b01      	ldr	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800130e:	e9c4 a800 	strd	sl, r8, [r4]
	Command.ModeRegisterDefinition = tmpmrd;
 8001312:	e9c4 7302 	strd	r7, r3, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001316:	f000 fe6f 	bl	8001ff8 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 800131a:	4628      	mov	r0, r5
 800131c:	f240 6103 	movw	r1, #1539	; 0x603
 8001320:	f000 fe84 	bl	800202c <HAL_SDRAM_ProgramRefreshRate>
}
 8001324:	f89b 0000 	ldrb.w	r0, [fp]
 8001328:	b003      	add	sp, #12
 800132a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800132e:	bf00      	nop
 8001330:	a0000140 	.word	0xa0000140
 8001334:	200008c8 	.word	0x200008c8
 8001338:	2000003c 	.word	0x2000003c
 800133c:	2000002c 	.word	0x2000002c
 8001340:	20000000 	.word	0x20000000

08001344 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134a:	2003      	movs	r0, #3
{
 800134c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001356:	f000 f82d 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	200f      	movs	r0, #15
 800135c:	f000 fe7a 	bl	8002054 <HAL_InitTick>
  HAL_MspInit();
 8001360:	f7ff fff0 	bl	8001344 <HAL_MspInit>
}
 8001364:	2000      	movs	r0, #0
 8001366:	bd08      	pop	{r3, pc}
 8001368:	40023c00 	.word	0x40023c00

0800136c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x10>)
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <HAL_IncTick+0x14>)
 8001370:	6811      	ldr	r1, [r2, #0]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	440b      	add	r3, r1
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200008fc 	.word	0x200008fc
 8001380:	20000001 	.word	0x20000001

08001384 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001384:	4b01      	ldr	r3, [pc, #4]	; (800138c <HAL_GetTick+0x8>)
 8001386:	6818      	ldr	r0, [r3, #0]
}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200008fc 	.word	0x200008fc

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff fff6 	bl	8001384 <HAL_GetTick>
 8001398:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139a:	1c63      	adds	r3, r4, #1
 800139c:	d002      	beq.n	80013a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_Delay+0x20>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a4:	f7ff ffee 	bl	8001384 <HAL_GetTick>
 80013a8:	1b40      	subs	r0, r0, r5
 80013aa:	42a0      	cmp	r0, r4
 80013ac:	d3fa      	bcc.n	80013a4 <HAL_Delay+0x14>
  {
  }
}
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	20000001 	.word	0x20000001

080013b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b6:	0200      	lsls	r0, r0, #8
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ba:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80013c6:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013cc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ce:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80013d0:	60c8      	str	r0, [r1, #12]
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	05fa0000 	.word	0x05fa0000

080013dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_NVIC_SetPriority+0x60>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e6:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	2d04      	cmp	r5, #4
 80013ee:	bf28      	it	cs
 80013f0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	2c06      	cmp	r4, #6
 80013f4:	d918      	bls.n	8001428 <HAL_NVIC_SetPriority+0x4c>
 80013f6:	3b03      	subs	r3, #3
 80013f8:	f04f 34ff 	mov.w	r4, #4294967295
 80013fc:	409c      	lsls	r4, r3
 80013fe:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001406:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	fa02 f205 	lsl.w	r2, r2, r5
 800140c:	ea21 0102 	bic.w	r1, r1, r2
 8001410:	fa01 f203 	lsl.w	r2, r1, r3
 8001414:	ea42 0204 	orr.w	r2, r2, r4
 8001418:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800141c:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800141e:	db06      	blt.n	800142e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_NVIC_SetPriority+0x64>)
 8001422:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001424:	bc30      	pop	{r4, r5}
 8001426:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001428:	2400      	movs	r4, #0
 800142a:	4623      	mov	r3, r4
 800142c:	e7e9      	b.n	8001402 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	f000 000f 	and.w	r0, r0, #15
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_NVIC_SetPriority+0x68>)
 8001434:	541a      	strb	r2, [r3, r0]
 8001436:	bc30      	pop	{r4, r5}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00
 8001440:	e000e400 	.word	0xe000e400
 8001444:	e000ed14 	.word	0xe000ed14

08001448 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001448:	2800      	cmp	r0, #0
 800144a:	db07      	blt.n	800145c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144c:	f000 011f 	and.w	r1, r0, #31
 8001450:	2301      	movs	r3, #1
 8001452:	0940      	lsrs	r0, r0, #5
 8001454:	4a02      	ldr	r2, [pc, #8]	; (8001460 <HAL_NVIC_EnableIRQ+0x18>)
 8001456:	408b      	lsls	r3, r1
 8001458:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001464:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800146a:	2000      	movs	r0, #0
 800146c:	4904      	ldr	r1, [pc, #16]	; (8001480 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800146e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001474:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8001476:	6048      	str	r0, [r1, #4]
}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	e000ed90 	.word	0xe000ed90

08001484 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001486:	f040 0001 	orr.w	r0, r0, #1
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_MPU_Enable+0x20>)
 800148c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800148e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001496:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800149a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	e000ed90 	.word	0xe000ed90

080014a8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <HAL_MPU_ConfigRegion+0x4c>)
 80014aa:	7843      	ldrb	r3, [r0, #1]
 80014ac:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80014ae:	7801      	ldrb	r1, [r0, #0]
 80014b0:	b911      	cbnz	r1, 80014b8 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80014b2:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80014b4:	6111      	str	r1, [r2, #16]
 80014b6:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80014b8:	6843      	ldr	r3, [r0, #4]
{
 80014ba:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 80014bc:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014be:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014c0:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014c2:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014c4:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014c6:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014c8:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014cc:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014ce:	430b      	orrs	r3, r1
 80014d0:	7a01      	ldrb	r1, [r0, #8]
 80014d2:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014d6:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014d8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014dc:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014de:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80014e2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80014e6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80014ea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 80014ee:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f0:	6113      	str	r3, [r2, #16]
}
 80014f2:	4770      	bx	lr
 80014f4:	e000ed90 	.word	0xe000ed90

080014f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ff42 	bl	8001384 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001500:	2c00      	cmp	r4, #0
 8001502:	d053      	beq.n	80015ac <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001504:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001506:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001508:	2100      	movs	r1, #0
 800150a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800150c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001510:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001512:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151c:	e005      	b.n	800152a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800151e:	f7ff ff31 	bl	8001384 <HAL_GetTick>
 8001522:	1b40      	subs	r0, r0, r5
 8001524:	2805      	cmp	r0, #5
 8001526:	d83a      	bhi.n	800159e <HAL_DMA_Init+0xa6>
 8001528:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	07d1      	lsls	r1, r2, #31
 800152e:	d4f6      	bmi.n	800151e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001530:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001534:	68e1      	ldr	r1, [r4, #12]
 8001536:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 8001538:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153a:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800153e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001540:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8001542:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800154a:	4d35      	ldr	r5, [pc, #212]	; (8001620 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154c:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800154e:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001552:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8001554:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001556:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001558:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800155c:	d028      	beq.n	80015b0 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800155e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001560:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001562:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001566:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4d2e      	ldr	r5, [pc, #184]	; (8001624 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800156c:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800156e:	3a10      	subs	r2, #16
 8001570:	492d      	ldr	r1, [pc, #180]	; (8001628 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001572:	482e      	ldr	r0, [pc, #184]	; (800162c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001574:	fba5 5202 	umull	r5, r2, r5, r2
 8001578:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 800157a:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800157c:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157e:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001580:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 8001582:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001584:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001588:	bf88      	it	hi
 800158a:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800158c:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800158e:	4083      	lsls	r3, r0
  return HAL_OK;
 8001590:	4610      	mov	r0, r2
 8001592:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001594:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001596:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001598:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800159c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80015a2:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80015aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
}
 80015ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b0:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80015b4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b6:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 80015ba:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015be:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 80015c0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80015c2:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015c4:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80015c8:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015ca:	2d00      	cmp	r5, #0
 80015cc:	d0cc      	beq.n	8001568 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015ce:	b17e      	cbz	r6, 80015f0 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015d0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80015d4:	d016      	beq.n	8001604 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015d6:	2f02      	cmp	r7, #2
 80015d8:	d903      	bls.n	80015e2 <HAL_DMA_Init+0xea>
 80015da:	2f03      	cmp	r7, #3
 80015dc:	d1c4      	bne.n	8001568 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015de:	01ea      	lsls	r2, r5, #7
 80015e0:	d5c2      	bpl.n	8001568 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80015e2:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015e4:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80015e6:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015e8:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80015ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80015ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80015f0:	2f01      	cmp	r7, #1
 80015f2:	d003      	beq.n	80015fc <HAL_DMA_Init+0x104>
 80015f4:	d3f3      	bcc.n	80015de <HAL_DMA_Init+0xe6>
 80015f6:	2f02      	cmp	r7, #2
 80015f8:	d1b6      	bne.n	8001568 <HAL_DMA_Init+0x70>
 80015fa:	e7f0      	b.n	80015de <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015fc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001600:	d1b2      	bne.n	8001568 <HAL_DMA_Init+0x70>
 8001602:	e7ee      	b.n	80015e2 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001604:	2f03      	cmp	r7, #3
 8001606:	d8af      	bhi.n	8001568 <HAL_DMA_Init+0x70>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <HAL_DMA_Init+0x118>)
 800160a:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800160e:	bf00      	nop
 8001610:	080015e3 	.word	0x080015e3
 8001614:	080015df 	.word	0x080015df
 8001618:	080015e3 	.word	0x080015e3
 800161c:	080015fd 	.word	0x080015fd
 8001620:	f010803f 	.word	0xf010803f
 8001624:	aaaaaaab 	.word	0xaaaaaaab
 8001628:	fffffc00 	.word	0xfffffc00
 800162c:	080051fc 	.word	0x080051fc

08001630 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001630:	2800      	cmp	r0, #0
 8001632:	d035      	beq.n	80016a0 <HAL_DMA_DeInit+0x70>
 8001634:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001636:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800163a:	b2c0      	uxtb	r0, r0
 800163c:	2802      	cmp	r0, #2
 800163e:	d031      	beq.n	80016a4 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 8001640:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8001642:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001644:	b2d1      	uxtb	r1, r2
{
 8001646:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001648:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 800164a:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800164c:	4d16      	ldr	r5, [pc, #88]	; (80016a8 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800164e:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 8001650:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001654:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001658:	4d14      	ldr	r5, [pc, #80]	; (80016ac <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 800165a:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800165c:	0909      	lsrs	r1, r1, #4
 800165e:	4c14      	ldr	r4, [pc, #80]	; (80016b0 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 8001660:	6010      	str	r0, [r2, #0]
 8001662:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001664:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 8001666:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001668:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 800166c:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800166e:	bf88      	it	hi
 8001670:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 8001672:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001674:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 8001676:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8001678:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800167a:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 800167c:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800167e:	65dd      	str	r5, [r3, #92]	; 0x5c
 8001680:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 8001682:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001684:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800168c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001690:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001694:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8001698:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 800169c:	bc70      	pop	{r4, r5, r6}
 800169e:	4770      	bx	lr
    return HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
 80016a2:	4770      	bx	lr
}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	aaaaaaab 	.word	0xaaaaaaab
 80016ac:	080051fc 	.word	0x080051fc
 80016b0:	fffffc00 	.word	0xfffffc00

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b8:	4688      	mov	r8, r1
 80016ba:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016bc:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c2:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80018bc <HAL_GPIO_Init+0x208>
 80016c6:	e003      	b.n	80016d0 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 80016c8:	3401      	adds	r4, #1
 80016ca:	2c10      	cmp	r4, #16
 80016cc:	f000 80b6 	beq.w	800183c <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 80016d0:	2301      	movs	r3, #1
 80016d2:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d4:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d1f5      	bne.n	80016c8 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80016e0:	0067      	lsls	r7, r4, #1
 80016e2:	2103      	movs	r1, #3
 80016e4:	f025 0c10 	bic.w	ip, r5, #16
 80016e8:	40b9      	lsls	r1, r7
 80016ea:	f10c 33ff 	add.w	r3, ip, #4294967295
 80016ee:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d810      	bhi.n	8001716 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 80016f4:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016f6:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016fa:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 80016fe:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001702:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001704:	40be      	lsls	r6, r7
 8001706:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800170a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800170c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170e:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001712:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001714:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001716:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001718:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800171c:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001720:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001724:	fa06 f607 	lsl.w	r6, r6, r7
 8001728:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 800172c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172e:	d115      	bne.n	800175c <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8001730:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001732:	f004 0c07 	and.w	ip, r4, #7
 8001736:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800173a:	f8d8 6010 	ldr.w	r6, [r8, #16]
 800173e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001742:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001746:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800174a:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800174e:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001752:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001756:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 800175a:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 800175c:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800175e:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001762:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001764:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001766:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001768:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 800176c:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176e:	d5ab      	bpl.n	80016c8 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001770:	4b48      	ldr	r3, [pc, #288]	; (8001894 <HAL_GPIO_Init+0x1e0>)
 8001772:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001776:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800177c:	4619      	mov	r1, r3
 800177e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001782:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800178a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800178e:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001790:	644f      	str	r7, [r1, #68]	; 0x44
 8001792:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001794:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001798:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800179c:	9701      	str	r7, [sp, #4]
 800179e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80017a0:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017a2:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017a6:	4f3c      	ldr	r7, [pc, #240]	; (8001898 <HAL_GPIO_Init+0x1e4>)
 80017a8:	42b8      	cmp	r0, r7
 80017aa:	d020      	beq.n	80017ee <HAL_GPIO_Init+0x13a>
 80017ac:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80017b0:	42b8      	cmp	r0, r7
 80017b2:	d046      	beq.n	8001842 <HAL_GPIO_Init+0x18e>
 80017b4:	4f39      	ldr	r7, [pc, #228]	; (800189c <HAL_GPIO_Init+0x1e8>)
 80017b6:	42b8      	cmp	r0, r7
 80017b8:	d048      	beq.n	800184c <HAL_GPIO_Init+0x198>
 80017ba:	4f39      	ldr	r7, [pc, #228]	; (80018a0 <HAL_GPIO_Init+0x1ec>)
 80017bc:	42b8      	cmp	r0, r7
 80017be:	d04a      	beq.n	8001856 <HAL_GPIO_Init+0x1a2>
 80017c0:	4f38      	ldr	r7, [pc, #224]	; (80018a4 <HAL_GPIO_Init+0x1f0>)
 80017c2:	42b8      	cmp	r0, r7
 80017c4:	d04c      	beq.n	8001860 <HAL_GPIO_Init+0x1ac>
 80017c6:	4f38      	ldr	r7, [pc, #224]	; (80018a8 <HAL_GPIO_Init+0x1f4>)
 80017c8:	42b8      	cmp	r0, r7
 80017ca:	d053      	beq.n	8001874 <HAL_GPIO_Init+0x1c0>
 80017cc:	4f37      	ldr	r7, [pc, #220]	; (80018ac <HAL_GPIO_Init+0x1f8>)
 80017ce:	42b8      	cmp	r0, r7
 80017d0:	d055      	beq.n	800187e <HAL_GPIO_Init+0x1ca>
 80017d2:	4f37      	ldr	r7, [pc, #220]	; (80018b0 <HAL_GPIO_Init+0x1fc>)
 80017d4:	42b8      	cmp	r0, r7
 80017d6:	d048      	beq.n	800186a <HAL_GPIO_Init+0x1b6>
 80017d8:	4f36      	ldr	r7, [pc, #216]	; (80018b4 <HAL_GPIO_Init+0x200>)
 80017da:	42b8      	cmp	r0, r7
 80017dc:	d054      	beq.n	8001888 <HAL_GPIO_Init+0x1d4>
 80017de:	4f36      	ldr	r7, [pc, #216]	; (80018b8 <HAL_GPIO_Init+0x204>)
 80017e0:	42b8      	cmp	r0, r7
 80017e2:	bf0c      	ite	eq
 80017e4:	2709      	moveq	r7, #9
 80017e6:	270a      	movne	r7, #10
 80017e8:	fa07 f303 	lsl.w	r3, r7, r3
 80017ec:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 80017ee:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 80017f2:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f6:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 80017f8:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 80017fc:	bf54      	ite	pl
 80017fe:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001800:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001802:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 8001804:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8001808:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800180c:	bf54      	ite	pl
 800180e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001810:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001812:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 8001814:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8001818:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 800181c:	bf54      	ite	pl
 800181e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001820:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001822:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 8001824:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8001828:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 800182c:	bf54      	ite	pl
 800182e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001830:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001832:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8001834:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001838:	f47f af4a 	bne.w	80016d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800183c:	b003      	add	sp, #12
 800183e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001842:	2701      	movs	r7, #1
 8001844:	fa07 f303 	lsl.w	r3, r7, r3
 8001848:	4319      	orrs	r1, r3
 800184a:	e7d0      	b.n	80017ee <HAL_GPIO_Init+0x13a>
 800184c:	2702      	movs	r7, #2
 800184e:	fa07 f303 	lsl.w	r3, r7, r3
 8001852:	4319      	orrs	r1, r3
 8001854:	e7cb      	b.n	80017ee <HAL_GPIO_Init+0x13a>
 8001856:	2703      	movs	r7, #3
 8001858:	fa07 f303 	lsl.w	r3, r7, r3
 800185c:	4319      	orrs	r1, r3
 800185e:	e7c6      	b.n	80017ee <HAL_GPIO_Init+0x13a>
 8001860:	2704      	movs	r7, #4
 8001862:	fa07 f303 	lsl.w	r3, r7, r3
 8001866:	4319      	orrs	r1, r3
 8001868:	e7c1      	b.n	80017ee <HAL_GPIO_Init+0x13a>
 800186a:	2707      	movs	r7, #7
 800186c:	fa07 f303 	lsl.w	r3, r7, r3
 8001870:	4319      	orrs	r1, r3
 8001872:	e7bc      	b.n	80017ee <HAL_GPIO_Init+0x13a>
 8001874:	2705      	movs	r7, #5
 8001876:	fa07 f303 	lsl.w	r3, r7, r3
 800187a:	4319      	orrs	r1, r3
 800187c:	e7b7      	b.n	80017ee <HAL_GPIO_Init+0x13a>
 800187e:	2706      	movs	r7, #6
 8001880:	fa07 f303 	lsl.w	r3, r7, r3
 8001884:	4319      	orrs	r1, r3
 8001886:	e7b2      	b.n	80017ee <HAL_GPIO_Init+0x13a>
 8001888:	2708      	movs	r7, #8
 800188a:	fa07 f303 	lsl.w	r3, r7, r3
 800188e:	4319      	orrs	r1, r3
 8001890:	e7ad      	b.n	80017ee <HAL_GPIO_Init+0x13a>
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40021400 	.word	0x40021400
 80018ac:	40021800 	.word	0x40021800
 80018b0:	40021c00 	.word	0x40021c00
 80018b4:	40022000 	.word	0x40022000
 80018b8:	40022400 	.word	0x40022400
 80018bc:	40013c00 	.word	0x40013c00

080018c0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80018c6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 80018ca:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80018cc:	6411      	str	r1, [r2, #64]	; 0x40
{
 80018ce:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d0:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018d2:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80018d8:	9201      	str	r2, [sp, #4]
 80018da:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018e2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80018e4:	f7ff fd4e 	bl	8001384 <HAL_GetTick>
 80018e8:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018ea:	e005      	b.n	80018f8 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018ec:	f7ff fd4a 	bl	8001384 <HAL_GetTick>
 80018f0:	1b40      	subs	r0, r0, r5
 80018f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018f6:	d817      	bhi.n	8001928 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	03da      	lsls	r2, r3, #15
 80018fc:	d5f6      	bpl.n	80018ec <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018fe:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001900:	4d0c      	ldr	r5, [pc, #48]	; (8001934 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001906:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001908:	f7ff fd3c 	bl	8001384 <HAL_GetTick>
 800190c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800190e:	e005      	b.n	800191c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001910:	f7ff fd38 	bl	8001384 <HAL_GetTick>
 8001914:	1b00      	subs	r0, r0, r4
 8001916:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800191a:	d805      	bhi.n	8001928 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800191c:	686b      	ldr	r3, [r5, #4]
 800191e:	039b      	lsls	r3, r3, #14
 8001920:	d5f6      	bpl.n	8001910 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001922:	2000      	movs	r0, #0
}
 8001924:	b003      	add	sp, #12
 8001926:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8001928:	2003      	movs	r0, #3
}
 800192a:	b003      	add	sp, #12
 800192c:	bd30      	pop	{r4, r5, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001938:	2800      	cmp	r0, #0
 800193a:	f000 814c 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193e:	6803      	ldr	r3, [r0, #0]
{
 8001940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001944:	07dd      	lsls	r5, r3, #31
{
 8001946:	b082      	sub	sp, #8
 8001948:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	d535      	bpl.n	80019b8 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800194c:	49ac      	ldr	r1, [pc, #688]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 800194e:	688a      	ldr	r2, [r1, #8]
 8001950:	f002 020c 	and.w	r2, r2, #12
 8001954:	2a04      	cmp	r2, #4
 8001956:	f000 80ff 	beq.w	8001b58 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195a:	688a      	ldr	r2, [r1, #8]
 800195c:	f002 020c 	and.w	r2, r2, #12
 8001960:	2a08      	cmp	r2, #8
 8001962:	f000 80f5 	beq.w	8001b50 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d010      	beq.n	8001990 <HAL_RCC_OscConfig+0x58>
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 811a 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x270>
 8001974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001978:	4ba1      	ldr	r3, [pc, #644]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	f000 8164 	beq.w	8001c48 <HAL_RCC_OscConfig+0x310>
 8001980:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e004      	b.n	800199a <HAL_RCC_OscConfig+0x62>
 8001990:	4a9b      	ldr	r2, [pc, #620]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001992:	6813      	ldr	r3, [r2, #0]
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fcf3 	bl	8001384 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4d98      	ldr	r5, [pc, #608]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80019a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e005      	b.n	80019b0 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fcee 	bl	8001384 <HAL_GetTick>
 80019a8:	1b80      	subs	r0, r0, r6
 80019aa:	2864      	cmp	r0, #100	; 0x64
 80019ac:	f200 80ef 	bhi.w	8001b8e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	039a      	lsls	r2, r3, #14
 80019b4:	d5f6      	bpl.n	80019a4 <HAL_RCC_OscConfig+0x6c>
 80019b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b8:	079f      	lsls	r7, r3, #30
 80019ba:	d442      	bmi.n	8001a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019bc:	071a      	lsls	r2, r3, #28
 80019be:	d517      	bpl.n	80019f0 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019c0:	6963      	ldr	r3, [r4, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80b1 	beq.w	8001b2a <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c8:	4b8d      	ldr	r3, [pc, #564]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 80019ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019cc:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80019d4:	f7ff fcd6 	bl	8001384 <HAL_GetTick>
 80019d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	e005      	b.n	80019e8 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fcd2 	bl	8001384 <HAL_GetTick>
 80019e0:	1b80      	subs	r0, r0, r6
 80019e2:	2802      	cmp	r0, #2
 80019e4:	f200 80d3 	bhi.w	8001b8e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019ea:	079b      	lsls	r3, r3, #30
 80019ec:	d5f6      	bpl.n	80019dc <HAL_RCC_OscConfig+0xa4>
 80019ee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	075d      	lsls	r5, r3, #29
 80019f2:	d56b      	bpl.n	8001acc <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f4:	4b82      	ldr	r3, [pc, #520]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 80019f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f8:	00d0      	lsls	r0, r2, #3
 80019fa:	f100 80ee 	bmi.w	8001bda <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001a00:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x2cc>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	05d1      	lsls	r1, r2, #23
 8001a18:	f140 80a8 	bpl.w	8001b6c <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	68a3      	ldr	r3, [r4, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d039      	beq.n	8001a96 <HAL_RCC_OscConfig+0x15e>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80db 	beq.w	8001bde <HAL_RCC_OscConfig+0x2a6>
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001a2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a2e:	f000 8113 	beq.w	8001c58 <HAL_RCC_OscConfig+0x320>
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	671a      	str	r2, [r3, #112]	; 0x70
 8001a38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a3a:	f022 0204 	bic.w	r2, r2, #4
 8001a3e:	671a      	str	r2, [r3, #112]	; 0x70
 8001a40:	e02e      	b.n	8001aa0 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a42:	4a6f      	ldr	r2, [pc, #444]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001a44:	6891      	ldr	r1, [r2, #8]
 8001a46:	f011 0f0c 	tst.w	r1, #12
 8001a4a:	d063      	beq.n	8001b14 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4c:	6891      	ldr	r1, [r2, #8]
 8001a4e:	f001 010c 	and.w	r1, r1, #12
 8001a52:	2908      	cmp	r1, #8
 8001a54:	d05b      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a56:	68e3      	ldr	r3, [r4, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80e1 	beq.w	8001c20 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001a5e:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001a60:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fc8b 	bl	8001384 <HAL_GetTick>
 8001a6e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	e005      	b.n	8001a7e <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff fc87 	bl	8001384 <HAL_GetTick>
 8001a76:	1b80      	subs	r0, r0, r6
 8001a78:	2802      	cmp	r0, #2
 8001a7a:	f200 8088 	bhi.w	8001b8e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	682b      	ldr	r3, [r5, #0]
 8001a80:	0798      	lsls	r0, r3, #30
 8001a82:	d5f6      	bpl.n	8001a72 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	6922      	ldr	r2, [r4, #16]
 8001a88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	e792      	b.n	80019bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a96:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001a98:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fc70 	bl	8001384 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa4:	4e56      	ldr	r6, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001aa6:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	e005      	b.n	8001aba <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff fc69 	bl	8001384 <HAL_GetTick>
 8001ab2:	eba0 0008 	sub.w	r0, r0, r8
 8001ab6:	42b8      	cmp	r0, r7
 8001ab8:	d869      	bhi.n	8001b8e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001abc:	079b      	lsls	r3, r3, #30
 8001abe:	d5f6      	bpl.n	8001aae <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ac0:	b125      	cbz	r5, 8001acc <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac2:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001ac4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001acc:	69a0      	ldr	r0, [r4, #24]
 8001ace:	b1d0      	cbz	r0, 8001b06 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad0:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	f002 020c 	and.w	r2, r2, #12
 8001ad8:	2a08      	cmp	r2, #8
 8001ada:	f000 80c5 	beq.w	8001c68 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ade:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae2:	f000 80eb 	beq.w	8001cbc <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8001aec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001aee:	f7ff fc49 	bl	8001384 <HAL_GetTick>
 8001af2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af4:	e004      	b.n	8001b00 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fc45 	bl	8001384 <HAL_GetTick>
 8001afa:	1b40      	subs	r0, r0, r5
 8001afc:	2802      	cmp	r0, #2
 8001afe:	d846      	bhi.n	8001b8e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	019b      	lsls	r3, r3, #6
 8001b04:	d4f7      	bmi.n	8001af6 <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001b06:	2000      	movs	r0, #0
}
 8001b08:	b002      	add	sp, #8
 8001b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0e:	6852      	ldr	r2, [r2, #4]
 8001b10:	0256      	lsls	r6, r2, #9
 8001b12:	d4a0      	bmi.n	8001a56 <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b14:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	0795      	lsls	r5, r2, #30
 8001b1a:	d53c      	bpl.n	8001b96 <HAL_RCC_OscConfig+0x25e>
 8001b1c:	68e2      	ldr	r2, [r4, #12]
 8001b1e:	2a01      	cmp	r2, #1
 8001b20:	d039      	beq.n	8001b96 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
}
 8001b24:	b002      	add	sp, #8
 8001b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001b2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001b36:	f7ff fc25 	bl	8001384 <HAL_GetTick>
 8001b3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	e004      	b.n	8001b48 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fc21 	bl	8001384 <HAL_GetTick>
 8001b42:	1b80      	subs	r0, r0, r6
 8001b44:	2802      	cmp	r0, #2
 8001b46:	d822      	bhi.n	8001b8e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b4a:	079f      	lsls	r7, r3, #30
 8001b4c:	d4f7      	bmi.n	8001b3e <HAL_RCC_OscConfig+0x206>
 8001b4e:	e74e      	b.n	80019ee <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b50:	684a      	ldr	r2, [r1, #4]
 8001b52:	0250      	lsls	r0, r2, #9
 8001b54:	f57f af07 	bpl.w	8001966 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	4a29      	ldr	r2, [pc, #164]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	0391      	lsls	r1, r2, #14
 8001b5e:	f57f af2b 	bpl.w	80019b8 <HAL_RCC_OscConfig+0x80>
 8001b62:	6862      	ldr	r2, [r4, #4]
 8001b64:	2a00      	cmp	r2, #0
 8001b66:	f47f af27 	bne.w	80019b8 <HAL_RCC_OscConfig+0x80>
 8001b6a:	e7da      	b.n	8001b22 <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 8001b6c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6e:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8001b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b76:	f7ff fc05 	bl	8001384 <HAL_GetTick>
 8001b7a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7c:	6833      	ldr	r3, [r6, #0]
 8001b7e:	05da      	lsls	r2, r3, #23
 8001b80:	f53f af4c 	bmi.w	8001a1c <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff fbfe 	bl	8001384 <HAL_GetTick>
 8001b88:	1bc0      	subs	r0, r0, r7
 8001b8a:	2864      	cmp	r0, #100	; 0x64
 8001b8c:	d9f6      	bls.n	8001b7c <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
}
 8001b90:	b002      	add	sp, #8
 8001b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	491a      	ldr	r1, [pc, #104]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001b98:	6920      	ldr	r0, [r4, #16]
 8001b9a:	680a      	ldr	r2, [r1, #0]
 8001b9c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001ba0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001ba4:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	e709      	b.n	80019bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
 8001baa:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bac:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fbe2 	bl	8001384 <HAL_GetTick>
 8001bc0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e004      	b.n	8001bce <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fbde 	bl	8001384 <HAL_GetTick>
 8001bc8:	1b80      	subs	r0, r0, r6
 8001bca:	2864      	cmp	r0, #100	; 0x64
 8001bcc:	d8df      	bhi.n	8001b8e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	682b      	ldr	r3, [r5, #0]
 8001bd0:	039b      	lsls	r3, r3, #14
 8001bd2:	d4f7      	bmi.n	8001bc4 <HAL_RCC_OscConfig+0x28c>
 8001bd4:	e6ef      	b.n	80019b6 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8001bd6:	2001      	movs	r0, #1
}
 8001bd8:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 8001bda:	2500      	movs	r5, #0
 8001bdc:	e719      	b.n	8001a12 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be6:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	671a      	str	r2, [r3, #112]	; 0x70
 8001bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bf0:	f022 0204 	bic.w	r2, r2, #4
 8001bf4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fbc5 	bl	8001384 <HAL_GetTick>
 8001bfa:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_OscConfig+0x2da>
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff fbbc 	bl	8001384 <HAL_GetTick>
 8001c0c:	1bc0      	subs	r0, r0, r7
 8001c0e:	4540      	cmp	r0, r8
 8001c10:	d8bd      	bhi.n	8001b8e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001c14:	0798      	lsls	r0, r3, #30
 8001c16:	d4f7      	bmi.n	8001c08 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 8001c18:	2d00      	cmp	r5, #0
 8001c1a:	f43f af57 	beq.w	8001acc <HAL_RCC_OscConfig+0x194>
 8001c1e:	e750      	b.n	8001ac2 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 8001c20:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001c22:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c24:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fbaa 	bl	8001384 <HAL_GetTick>
 8001c30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	e004      	b.n	8001c3e <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff fba6 	bl	8001384 <HAL_GetTick>
 8001c38:	1b80      	subs	r0, r0, r6
 8001c3a:	2802      	cmp	r0, #2
 8001c3c:	d8a7      	bhi.n	8001b8e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	682b      	ldr	r3, [r5, #0]
 8001c40:	0799      	lsls	r1, r3, #30
 8001c42:	d4f7      	bmi.n	8001c34 <HAL_RCC_OscConfig+0x2fc>
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	e6b9      	b.n	80019bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e6a0      	b.n	800199a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	f042 0204 	orr.w	r2, r2, #4
 8001c5c:	671a      	str	r2, [r3, #112]	; 0x70
 8001c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	671a      	str	r2, [r3, #112]	; 0x70
 8001c66:	e71b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c68:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001c6a:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6c:	f43f af5a 	beq.w	8001b24 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c70:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c74:	69e1      	ldr	r1, [r4, #28]
 8001c76:	428b      	cmp	r3, r1
 8001c78:	f47f af53 	bne.w	8001b22 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c7c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c80:	6a21      	ldr	r1, [r4, #32]
 8001c82:	428b      	cmp	r3, r1
 8001c84:	f47f af4d 	bne.w	8001b22 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c8e:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c90:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001c94:	f47f af45 	bne.w	8001b22 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c9a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001ca6:	f47f af3c 	bne.w	8001b22 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cac:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb0:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8001cb4:	bf14      	ite	ne
 8001cb6:	2001      	movne	r0, #1
 8001cb8:	2000      	moveq	r0, #0
 8001cba:	e733      	b.n	8001b24 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc0:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fb5e 	bl	8001384 <HAL_GetTick>
 8001cc8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff fb5a 	bl	8001384 <HAL_GetTick>
 8001cd0:	1b80      	subs	r0, r0, r6
 8001cd2:	2802      	cmp	r0, #2
 8001cd4:	f63f af5b 	bhi.w	8001b8e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd8:	682b      	ldr	r3, [r5, #0]
 8001cda:	0199      	lsls	r1, r3, #6
 8001cdc:	d4f6      	bmi.n	8001ccc <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cde:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001ce2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001cea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4c0e      	ldr	r4, [pc, #56]	; (8001d28 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf0:	0852      	lsrs	r2, r2, #1
 8001cf2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d00:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fb3b 	bl	8001384 <HAL_GetTick>
 8001d0e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d10:	e005      	b.n	8001d1e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff fb37 	bl	8001384 <HAL_GetTick>
 8001d16:	1b40      	subs	r0, r0, r5
 8001d18:	2802      	cmp	r0, #2
 8001d1a:	f63f af38 	bhi.w	8001b8e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	019a      	lsls	r2, r3, #6
 8001d22:	d5f6      	bpl.n	8001d12 <HAL_RCC_OscConfig+0x3da>
 8001d24:	e6ef      	b.n	8001b06 <HAL_RCC_OscConfig+0x1ce>
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2c:	b178      	cbz	r0, 8001d4e <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ea8 <HAL_RCC_ClockConfig+0x17c>)
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	428b      	cmp	r3, r1
 8001d38:	d20b      	bcs.n	8001d52 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	6813      	ldr	r3, [r2, #0]
 8001d3c:	f023 030f 	bic.w	r3, r3, #15
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	428b      	cmp	r3, r1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8001d50:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d52:	6803      	ldr	r3, [r0, #0]
{
 8001d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	079d      	lsls	r5, r3, #30
 8001d5a:	d514      	bpl.n	8001d86 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	075c      	lsls	r4, r3, #29
 8001d5e:	d504      	bpl.n	8001d6a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4c52      	ldr	r4, [pc, #328]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
 8001d62:	68a2      	ldr	r2, [r4, #8]
 8001d64:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001d68:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	071a      	lsls	r2, r3, #28
 8001d6c:	d504      	bpl.n	8001d78 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6e:	4c4f      	ldr	r4, [pc, #316]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
 8001d70:	68a2      	ldr	r2, [r4, #8]
 8001d72:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001d76:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4c4c      	ldr	r4, [pc, #304]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
 8001d7a:	6885      	ldr	r5, [r0, #8]
 8001d7c:	68a2      	ldr	r2, [r4, #8]
 8001d7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d82:	432a      	orrs	r2, r5
 8001d84:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	07df      	lsls	r7, r3, #31
 8001d88:	4604      	mov	r4, r0
 8001d8a:	460d      	mov	r5, r1
 8001d8c:	d521      	bpl.n	8001dd2 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d94:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	d063      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d98:	2a02      	cmp	r2, #2
 8001d9a:	d079      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	0799      	lsls	r1, r3, #30
 8001d9e:	d528      	bpl.n	8001df2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da0:	4942      	ldr	r1, [pc, #264]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da8:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001daa:	f023 0303 	bic.w	r3, r3, #3
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001db2:	f7ff fae7 	bl	8001384 <HAL_GetTick>
 8001db6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db8:	e004      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dba:	f7ff fae3 	bl	8001384 <HAL_GetTick>
 8001dbe:	1bc0      	subs	r0, r0, r7
 8001dc0:	4540      	cmp	r0, r8
 8001dc2:	d863      	bhi.n	8001e8c <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc4:	68b3      	ldr	r3, [r6, #8]
 8001dc6:	6862      	ldr	r2, [r4, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dd0:	d1f3      	bne.n	8001dba <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd2:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <HAL_RCC_ClockConfig+0x17c>)
 8001dd4:	6813      	ldr	r3, [r2, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	42ab      	cmp	r3, r5
 8001ddc:	d90c      	bls.n	8001df8 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	6813      	ldr	r3, [r2, #0]
 8001de0:	f023 030f 	bic.w	r3, r3, #15
 8001de4:	432b      	orrs	r3, r5
 8001de6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de8:	6813      	ldr	r3, [r2, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	42ab      	cmp	r3, r5
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8001df2:	2001      	movs	r0, #1
}
 8001df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	075a      	lsls	r2, r3, #29
 8001dfc:	d506      	bpl.n	8001e0c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfe:	492b      	ldr	r1, [pc, #172]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
 8001e00:	68e0      	ldr	r0, [r4, #12]
 8001e02:	688a      	ldr	r2, [r1, #8]
 8001e04:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001e08:	4302      	orrs	r2, r0
 8001e0a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	071b      	lsls	r3, r3, #28
 8001e0e:	d507      	bpl.n	8001e20 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
 8001e12:	6921      	ldr	r1, [r4, #16]
 8001e14:	6893      	ldr	r3, [r2, #8]
 8001e16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e1e:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e20:	4922      	ldr	r1, [pc, #136]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
 8001e22:	688b      	ldr	r3, [r1, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d01c      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x13a>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d12b      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e30:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e32:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e38:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e3a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001e3e:	d12a      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e40:	481b      	ldr	r0, [pc, #108]	; (8001eb0 <HAL_RCC_ClockConfig+0x184>)
 8001e42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e46:	fba1 0100 	umull	r0, r1, r1, r0
 8001e4a:	f7fe fb0d 	bl	8000468 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e56:	3301      	adds	r3, #1
 8001e58:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5e:	e003      	b.n	8001e68 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e60:	039e      	lsls	r6, r3, #14
 8001e62:	d49d      	bmi.n	8001da0 <HAL_RCC_ClockConfig+0x74>
 8001e64:	e7c5      	b.n	8001df2 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_RCC_ClockConfig+0x180>)
 8001e6a:	4c13      	ldr	r4, [pc, #76]	; (8001eb8 <HAL_RCC_ClockConfig+0x18c>)
 8001e6c:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8001e6e:	4813      	ldr	r0, [pc, #76]	; (8001ebc <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e70:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001e74:	4912      	ldr	r1, [pc, #72]	; (8001ec0 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 8001e76:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e78:	5ca2      	ldrb	r2, [r4, r2]
 8001e7a:	40d3      	lsrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001e7e:	f000 f8e9 	bl	8002054 <HAL_InitTick>
  return HAL_OK;
 8001e82:	2000      	movs	r0, #0
}
 8001e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x184>)
 8001e8a:	e7ed      	b.n	8001e68 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	e7b1      	b.n	8001df4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e90:	0198      	lsls	r0, r3, #6
 8001e92:	d485      	bmi.n	8001da0 <HAL_RCC_ClockConfig+0x74>
 8001e94:	e7ad      	b.n	8001df2 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e96:	4807      	ldr	r0, [pc, #28]	; (8001eb4 <HAL_RCC_ClockConfig+0x188>)
 8001e98:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	fba1 0100 	umull	r0, r1, r1, r0
 8001ea2:	f7fe fae1 	bl	8000468 <__aeabi_uldivmod>
 8001ea6:	e7d2      	b.n	8001e4e <HAL_RCC_ClockConfig+0x122>
 8001ea8:	40023c00 	.word	0x40023c00
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	017d7840 	.word	0x017d7840
 8001eb8:	08005218 	.word	0x08005218
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001ec6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec8:	688b      	ldr	r3, [r1, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d01b      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x46>
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d117      	bne.n	8001f06 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ed8:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ede:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ee0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001ee4:	d113      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	480f      	ldr	r0, [pc, #60]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x60>)
 8001ee8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001eec:	fba1 0100 	umull	r0, r1, r1, r0
 8001ef0:	f7fe faba 	bl	8000468 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001efc:	3301      	adds	r3, #1
 8001efe:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001f00:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f04:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001f08:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001f0a:	4807      	ldr	r0, [pc, #28]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001f0c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x64>)
 8001f10:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f14:	2300      	movs	r3, #0
 8001f16:	fba1 0100 	umull	r0, r1, r1, r0
 8001f1a:	f7fe faa5 	bl	8000468 <__aeabi_uldivmod>
 8001f1e:	e7e9      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x30>
 8001f20:	40023800 	.word	0x40023800
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	017d7840 	.word	0x017d7840

08001f2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f30:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001f32:	4905      	ldr	r1, [pc, #20]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f38:	6808      	ldr	r0, [r1, #0]
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f3c:	40d8      	lsrs	r0, r3
 8001f3e:	4770      	bx	lr
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08005228 	.word	0x08005228
 8001f48:	20000008 	.word	0x20000008

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f50:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001f52:	4905      	ldr	r1, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f54:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f58:	6808      	ldr	r0, [r1, #0]
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f5c:	40d8      	lsrs	r0, r3
 8001f5e:	4770      	bx	lr
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08005228 	.word	0x08005228
 8001f68:	20000008 	.word	0x20000008

08001f6c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f6e:	220f      	movs	r2, #15
 8001f70:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	f002 0203 	and.w	r2, r2, #3
 8001f78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001f80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001f88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	08db      	lsrs	r3, r3, #3
{
 8001f8e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f90:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f94:	4c05      	ldr	r4, [pc, #20]	; (8001fac <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f96:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f98:	6823      	ldr	r3, [r4, #0]
}
 8001f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	600b      	str	r3, [r1, #0]
}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop

08001fb4 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8001fb4:	b1e8      	cbz	r0, 8001ff2 <HAL_SDRAM_Init+0x3e>
{   
 8001fb6:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001fb8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	460d      	mov	r5, r1
 8001fc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fc4:	b183      	cbz	r3, 8001fe8 <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001fc6:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001fc8:	1d21      	adds	r1, r4, #4
 8001fca:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001fcc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001fd0:	f000 fad6 	bl	8002580 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	e9d4 0200 	ldrd	r0, r2, [r4]
 8001fda:	f000 fb0f 	bl	80025fc <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001fde:	2301      	movs	r3, #1
  return HAL_OK;
 8001fe0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001fe2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8001fe8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8001fec:	f7ff ffe0 	bl	8001fb0 <HAL_SDRAM_MspInit>
 8001ff0:	e7e9      	b.n	8001fc6 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8001ff8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001ffa:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d010      	beq.n	8002026 <HAL_SDRAM_SendCommand+0x2e>
 8002004:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002006:	2302      	movs	r3, #2
 8002008:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800200a:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800200c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002010:	f000 fb46 	bl	80026a0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002014:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8002016:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002018:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800201a:	bf0c      	ite	eq
 800201c:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800201e:	2301      	movne	r3, #1
 8002020:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002024:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002026:	4618      	mov	r0, r3
}
 8002028:	bd38      	pop	{r3, r4, r5, pc}
 800202a:	bf00      	nop

0800202c <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800202c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d00c      	beq.n	8002050 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002036:	2302      	movs	r3, #2
{
 8002038:	b510      	push	{r4, lr}
 800203a:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800203c:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800203e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002042:	f000 fb43 	bl	80026cc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002046:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8002048:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800204a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800204e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002050:	4618      	mov	r0, r3
}
 8002052:	4770      	bx	lr

08002054 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8002054:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002056:	4601      	mov	r1, r0
{
 8002058:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800205a:	2200      	movs	r2, #0
 800205c:	2036      	movs	r0, #54	; 0x36
 800205e:	f7ff f9bd 	bl	80013dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002062:	2036      	movs	r0, #54	; 0x36
 8002064:	f7ff f9f0 	bl	8001448 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_InitTick+0x78>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800206a:	a901      	add	r1, sp, #4
 800206c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800206e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002070:	f042 0210 	orr.w	r2, r2, #16
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	9302      	str	r3, [sp, #8]
 800207e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002080:	f7ff ff74 	bl	8001f6c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8002084:	9b06      	ldr	r3, [sp, #24]
 8002086:	b9c3      	cbnz	r3, 80020ba <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002088:	f7ff ff50 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 800208e:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 8002090:	4c10      	ldr	r4, [pc, #64]	; (80020d4 <HAL_InitTick+0x80>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8002092:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002096:	fba3 1300 	umull	r1, r3, r3, r0
  TimHandle.Instance = TIM6;
 800209a:	490f      	ldr	r1, [pc, #60]	; (80020d8 <HAL_InitTick+0x84>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800209c:	4620      	mov	r0, r4
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800209e:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020a0:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 80020a2:	6021      	str	r1, [r4, #0]
  TimHandle.Init.ClockDivision = 0;
 80020a4:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020a6:	3b01      	subs	r3, #1
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	60a2      	str	r2, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	61a2      	str	r2, [r4, #24]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80020ac:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80020ae:	f000 fb25 	bl	80026fc <HAL_TIM_Base_Init>
 80020b2:	b130      	cbz	r0, 80020c2 <HAL_InitTick+0x6e>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
}
 80020b6:	b009      	add	sp, #36	; 0x24
 80020b8:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020ba:	f7ff ff37 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 80020be:	0040      	lsls	r0, r0, #1
 80020c0:	e7e4      	b.n	800208c <HAL_InitTick+0x38>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80020c2:	4620      	mov	r0, r4
 80020c4:	f000 fb9e 	bl	8002804 <HAL_TIM_Base_Start_IT>
}
 80020c8:	b009      	add	sp, #36	; 0x24
 80020ca:	bd30      	pop	{r4, r5, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	20000900 	.word	0x20000900
 80020d8:	40001000 	.word	0x40001000

080020dc <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 80020dc:	f7ff b946 	b.w	800136c <HAL_IncTick>

080020e0 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 80020e0:	4801      	ldr	r0, [pc, #4]	; (80020e8 <TIM6_DAC_IRQHandler+0x8>)
 80020e2:	f000 bbad 	b.w	8002840 <HAL_TIM_IRQHandler>
 80020e6:	bf00      	nop
 80020e8:	20000900 	.word	0x20000900

080020ec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020ee:	07da      	lsls	r2, r3, #31
{
 80020f0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020f2:	d506      	bpl.n	8002102 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020f4:	6801      	ldr	r1, [r0, #0]
 80020f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80020f8:	684a      	ldr	r2, [r1, #4]
 80020fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020fe:	4322      	orrs	r2, r4
 8002100:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002102:	079c      	lsls	r4, r3, #30
 8002104:	d506      	bpl.n	8002114 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002106:	6801      	ldr	r1, [r0, #0]
 8002108:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800210a:	684a      	ldr	r2, [r1, #4]
 800210c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002110:	4322      	orrs	r2, r4
 8002112:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002114:	0759      	lsls	r1, r3, #29
 8002116:	d506      	bpl.n	8002126 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002118:	6801      	ldr	r1, [r0, #0]
 800211a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800211c:	684a      	ldr	r2, [r1, #4]
 800211e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002122:	4322      	orrs	r2, r4
 8002124:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002126:	071a      	lsls	r2, r3, #28
 8002128:	d506      	bpl.n	8002138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800212a:	6801      	ldr	r1, [r0, #0]
 800212c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800212e:	684a      	ldr	r2, [r1, #4]
 8002130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002134:	4322      	orrs	r2, r4
 8002136:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002138:	06dc      	lsls	r4, r3, #27
 800213a:	d506      	bpl.n	800214a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800213c:	6801      	ldr	r1, [r0, #0]
 800213e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002140:	688a      	ldr	r2, [r1, #8]
 8002142:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002146:	4322      	orrs	r2, r4
 8002148:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800214a:	0699      	lsls	r1, r3, #26
 800214c:	d506      	bpl.n	800215c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800214e:	6801      	ldr	r1, [r0, #0]
 8002150:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002152:	688a      	ldr	r2, [r1, #8]
 8002154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002158:	4322      	orrs	r2, r4
 800215a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800215c:	065a      	lsls	r2, r3, #25
 800215e:	d50a      	bpl.n	8002176 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002160:	6801      	ldr	r1, [r0, #0]
 8002162:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002164:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002166:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800216a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800216e:	ea42 0204 	orr.w	r2, r2, r4
 8002172:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002174:	d00b      	beq.n	800218e <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002176:	061b      	lsls	r3, r3, #24
 8002178:	d506      	bpl.n	8002188 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800217a:	6802      	ldr	r2, [r0, #0]
 800217c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800217e:	6853      	ldr	r3, [r2, #4]
 8002180:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002184:	430b      	orrs	r3, r1
 8002186:	6053      	str	r3, [r2, #4]
  }
}
 8002188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800218c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800218e:	684a      	ldr	r2, [r1, #4]
 8002190:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002192:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002196:	4322      	orrs	r2, r4
 8002198:	604a      	str	r2, [r1, #4]
 800219a:	e7ec      	b.n	8002176 <UART_AdvFeatureConfig+0x8a>

0800219c <HAL_UART_Init>:
  if (huart == NULL)
 800219c:	2800      	cmp	r0, #0
 800219e:	d04f      	beq.n	8002240 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 80021a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80021a2:	b570      	push	{r4, r5, r6, lr}
 80021a4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d045      	beq.n	8002236 <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 80021aa:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021ac:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021ae:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80021b0:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021b2:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80021b4:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021b6:	4302      	orrs	r2, r0
 80021b8:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 80021ba:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021be:	4dbc      	ldr	r5, [pc, #752]	; (80024b0 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021c0:	4302      	orrs	r2, r0
 80021c2:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 80021c4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021c6:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021c8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ca:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021cc:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021ce:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021d0:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 80021d2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021d4:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 80021d6:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021da:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021dc:	4db5      	ldr	r5, [pc, #724]	; (80024b4 <HAL_UART_Init+0x318>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021de:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021e2:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e4:	ea41 0106 	orr.w	r1, r1, r6
 80021e8:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021ea:	6899      	ldr	r1, [r3, #8]
 80021ec:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80021f0:	ea42 0201 	orr.w	r2, r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021f6:	d025      	beq.n	8002244 <HAL_UART_Init+0xa8>
 80021f8:	4aaf      	ldr	r2, [pc, #700]	; (80024b8 <HAL_UART_Init+0x31c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d044      	beq.n	8002288 <HAL_UART_Init+0xec>
 80021fe:	4aaf      	ldr	r2, [pc, #700]	; (80024bc <HAL_UART_Init+0x320>)
 8002200:	4293      	cmp	r3, r2
 8002202:	f000 80f3 	beq.w	80023ec <HAL_UART_Init+0x250>
 8002206:	4aae      	ldr	r2, [pc, #696]	; (80024c0 <HAL_UART_Init+0x324>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d045      	beq.n	8002298 <HAL_UART_Init+0xfc>
 800220c:	4aad      	ldr	r2, [pc, #692]	; (80024c4 <HAL_UART_Init+0x328>)
 800220e:	4293      	cmp	r3, r2
 8002210:	f000 80d8 	beq.w	80023c4 <HAL_UART_Init+0x228>
 8002214:	4aac      	ldr	r2, [pc, #688]	; (80024c8 <HAL_UART_Init+0x32c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	f000 8188 	beq.w	800252c <HAL_UART_Init+0x390>
 800221c:	4aab      	ldr	r2, [pc, #684]	; (80024cc <HAL_UART_Init+0x330>)
 800221e:	4293      	cmp	r3, r2
 8002220:	f000 8198 	beq.w	8002554 <HAL_UART_Init+0x3b8>
 8002224:	4aaa      	ldr	r2, [pc, #680]	; (80024d0 <HAL_UART_Init+0x334>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f000 815e 	beq.w	80024e8 <HAL_UART_Init+0x34c>
  huart->RxISR = NULL;
 800222c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800222e:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8002230:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8002234:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8002236:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800223a:	f7fe fb09 	bl	8000850 <HAL_UART_MspInit>
 800223e:	e7b4      	b.n	80021aa <HAL_UART_Init+0xe>
    return HAL_ERROR;
 8002240:	2001      	movs	r0, #1
}
 8002242:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002244:	4ba3      	ldr	r3, [pc, #652]	; (80024d4 <HAL_UART_Init+0x338>)
 8002246:	4aa4      	ldr	r2, [pc, #656]	; (80024d8 <HAL_UART_Init+0x33c>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002252:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002256:	d02f      	beq.n	80022b8 <HAL_UART_Init+0x11c>
    switch (clocksource)
 8002258:	2b08      	cmp	r3, #8
 800225a:	d8e7      	bhi.n	800222c <HAL_UART_Init+0x90>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <HAL_UART_Init+0xc8>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	080023b3 	.word	0x080023b3
 8002268:	080022f5 	.word	0x080022f5
 800226c:	08002407 	.word	0x08002407
 8002270:	0800222d 	.word	0x0800222d
 8002274:	080023db 	.word	0x080023db
 8002278:	0800222d 	.word	0x0800222d
 800227c:	0800222d 	.word	0x0800222d
 8002280:	0800222d 	.word	0x0800222d
 8002284:	08002417 	.word	0x08002417
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002288:	4b92      	ldr	r3, [pc, #584]	; (80024d4 <HAL_UART_Init+0x338>)
 800228a:	4a94      	ldr	r2, [pc, #592]	; (80024dc <HAL_UART_Init+0x340>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	e7dc      	b.n	8002252 <HAL_UART_Init+0xb6>
 8002298:	4b8e      	ldr	r3, [pc, #568]	; (80024d4 <HAL_UART_Init+0x338>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	f000 8096 	beq.w	80023d4 <HAL_UART_Init+0x238>
 80022a8:	d97d      	bls.n	80023a6 <HAL_UART_Init+0x20a>
 80022aa:	2b80      	cmp	r3, #128	; 0x80
 80022ac:	f000 80a8 	beq.w	8002400 <HAL_UART_Init+0x264>
 80022b0:	2bc0      	cmp	r3, #192	; 0xc0
 80022b2:	f000 80c5 	beq.w	8002440 <HAL_UART_Init+0x2a4>
 80022b6:	e7b9      	b.n	800222c <HAL_UART_Init+0x90>
    switch (clocksource)
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d8b7      	bhi.n	800222c <HAL_UART_Init+0x90>
 80022bc:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <HAL_UART_Init+0x128>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080024a9 	.word	0x080024a9
 80022c8:	0800247f 	.word	0x0800247f
 80022cc:	08002499 	.word	0x08002499
 80022d0:	0800222d 	.word	0x0800222d
 80022d4:	08002493 	.word	0x08002493
 80022d8:	0800222d 	.word	0x0800222d
 80022dc:	0800222d 	.word	0x0800222d
 80022e0:	0800222d 	.word	0x0800222d
 80022e4:	08002447 	.word	0x08002447
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d19f      	bne.n	800222c <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80022f0:	f000 80c5 	beq.w	800247e <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80022f4:	f7ff fe2a 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022f8:	6863      	ldr	r3, [r4, #4]
 80022fa:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80022fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002302:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002304:	f1a2 0110 	sub.w	r1, r2, #16
 8002308:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800230c:	4299      	cmp	r1, r3
 800230e:	d88d      	bhi.n	800222c <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 8002310:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 8002312:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 8002314:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8002316:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800231a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800231c:	2a00      	cmp	r2, #0
 800231e:	f040 8082 	bne.w	8002426 <HAL_UART_Init+0x28a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002322:	685a      	ldr	r2, [r3, #4]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800232a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002332:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233c:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800233e:	f7ff f821 	bl	8001384 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002342:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002344:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	0710      	lsls	r0, r2, #28
 800234a:	d407      	bmi.n	800235c <HAL_UART_Init+0x1c0>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800234c:	2220      	movs	r2, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 800234e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8002350:	6762      	str	r2, [r4, #116]	; 0x74

  return HAL_OK;
 8002352:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8002354:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002356:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 800235a:	bd70      	pop	{r4, r5, r6, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235c:	69dd      	ldr	r5, [r3, #28]
 800235e:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8002362:	d1f3      	bne.n	800234c <HAL_UART_Init+0x1b0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7ff f80e 	bl	8001384 <HAL_GetTick>
 8002368:	1b80      	subs	r0, r0, r6
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800236a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8002370:	f080 80cd 	bcs.w	800250e <HAL_UART_Init+0x372>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	0751      	lsls	r1, r2, #29
 8002378:	d5f0      	bpl.n	800235c <HAL_UART_Init+0x1c0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	0512      	lsls	r2, r2, #20
 800237e:	d5ed      	bpl.n	800235c <HAL_UART_Init+0x1c0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002380:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8002384:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002388:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8002390:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	f021 0101 	bic.w	r1, r1, #1
 8002398:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800239a:	6762      	str	r2, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800239c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 80023a0:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023a2:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f47f af40 	bne.w	800222c <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80023b0:	d07a      	beq.n	80024a8 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80023b2:	f7ff fdbb 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023b6:	6863      	ldr	r3, [r4, #4]
 80023b8:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80023bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c0:	b292      	uxth	r2, r2
 80023c2:	e79f      	b.n	8002304 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <HAL_UART_Init+0x338>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d2:	d12d      	bne.n	8002430 <HAL_UART_Init+0x294>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80023d8:	d05b      	beq.n	8002492 <HAL_UART_Init+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 80023da:	f7ff fd73 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023de:	6863      	ldr	r3, [r4, #4]
 80023e0:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80023e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e8:	b292      	uxth	r2, r2
 80023ea:	e78b      	b.n	8002304 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_UART_Init+0x338>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d0ec      	beq.n	80023d4 <HAL_UART_Init+0x238>
 80023fa:	d9d4      	bls.n	80023a6 <HAL_UART_Init+0x20a>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d13b      	bne.n	8002478 <HAL_UART_Init+0x2dc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002400:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002404:	d048      	beq.n	8002498 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002406:	6863      	ldr	r3, [r4, #4]
 8002408:	4a35      	ldr	r2, [pc, #212]	; (80024e0 <HAL_UART_Init+0x344>)
 800240a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800240e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002412:	b292      	uxth	r2, r2
 8002414:	e776      	b.n	8002304 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002416:	6863      	ldr	r3, [r4, #4]
 8002418:	085a      	lsrs	r2, r3, #1
 800241a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800241e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002422:	b292      	uxth	r2, r2
 8002424:	e76e      	b.n	8002304 <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff fe60 	bl	80020ec <UART_AdvFeatureConfig>
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	e778      	b.n	8002322 <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002430:	d9b9      	bls.n	80023a6 <HAL_UART_Init+0x20a>
 8002432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002436:	d0e3      	beq.n	8002400 <HAL_UART_Init+0x264>
 8002438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800243c:	f47f aef6 	bne.w	800222c <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002440:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002444:	d1e7      	bne.n	8002416 <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002446:	6862      	ldr	r2, [r4, #4]
 8002448:	0853      	lsrs	r3, r2, #1
 800244a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800244e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002452:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002454:	f1a3 0110 	sub.w	r1, r3, #16
 8002458:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800245c:	4291      	cmp	r1, r2
 800245e:	f63f aee5 	bhi.w	800222c <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002462:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002466:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 800246a:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8002472:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 8002476:	e750      	b.n	800231a <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002478:	2b30      	cmp	r3, #48	; 0x30
 800247a:	d0e1      	beq.n	8002440 <HAL_UART_Init+0x2a4>
 800247c:	e6d6      	b.n	800222c <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 800247e:	f7ff fd65 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002482:	6862      	ldr	r2, [r4, #4]
 8002484:	0853      	lsrs	r3, r2, #1
 8002486:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800248a:	fbb3 f3f2 	udiv	r3, r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	e7e0      	b.n	8002454 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002492:	f7ff fd17 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8002496:	e7f4      	b.n	8002482 <HAL_UART_Init+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002498:	6862      	ldr	r2, [r4, #4]
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_UART_Init+0x348>)
 800249c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80024a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	e7d5      	b.n	8002454 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024a8:	f7ff fd40 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 80024ac:	e7e9      	b.n	8002482 <HAL_UART_Init+0x2e6>
 80024ae:	bf00      	nop
 80024b0:	efff69f3 	.word	0xefff69f3
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40004400 	.word	0x40004400
 80024bc:	40004800 	.word	0x40004800
 80024c0:	40004c00 	.word	0x40004c00
 80024c4:	40005000 	.word	0x40005000
 80024c8:	40011400 	.word	0x40011400
 80024cc:	40007800 	.word	0x40007800
 80024d0:	40007c00 	.word	0x40007c00
 80024d4:	40023800 	.word	0x40023800
 80024d8:	08005204 	.word	0x08005204
 80024dc:	08005208 	.word	0x08005208
 80024e0:	00f42400 	.word	0x00f42400
 80024e4:	01e84800 	.word	0x01e84800
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_UART_Init+0x3e0>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024f6:	f43f af6d 	beq.w	80023d4 <HAL_UART_Init+0x238>
 80024fa:	f67f af54 	bls.w	80023a6 <HAL_UART_Init+0x20a>
 80024fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002502:	f43f af7d 	beq.w	8002400 <HAL_UART_Init+0x264>
 8002506:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800250a:	d099      	beq.n	8002440 <HAL_UART_Init+0x2a4>
 800250c:	e68e      	b.n	800222c <HAL_UART_Init+0x90>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800250e:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8002510:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8002512:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002514:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002518:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002522:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8002524:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8002528:	67a1      	str	r1, [r4, #120]	; 0x78
}
 800252a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_UART_Init+0x3e0>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253a:	f43f af4b 	beq.w	80023d4 <HAL_UART_Init+0x238>
 800253e:	f67f aed3 	bls.w	80022e8 <HAL_UART_Init+0x14c>
 8002542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002546:	f43f af5b 	beq.w	8002400 <HAL_UART_Init+0x264>
 800254a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800254e:	f43f af77 	beq.w	8002440 <HAL_UART_Init+0x2a4>
 8002552:	e66b      	b.n	800222c <HAL_UART_Init+0x90>
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_UART_Init+0x3e0>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	f43f af37 	beq.w	80023d4 <HAL_UART_Init+0x238>
 8002566:	f67f af1e 	bls.w	80023a6 <HAL_UART_Init+0x20a>
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	f43f af47 	beq.w	8002400 <HAL_UART_Init+0x264>
 8002572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002576:	f43f af63 	beq.w	8002440 <HAL_UART_Init+0x2a4>
 800257a:	e657      	b.n	800222c <HAL_UART_Init+0x90>
 800257c:	40023800 	.word	0x40023800

08002580 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002584:	680f      	ldr	r7, [r1, #0]
 8002586:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 800258a:	2f01      	cmp	r7, #1
 800258c:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8002590:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 8002594:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 8002598:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 800259c:	d012      	beq.n	80025c4 <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800259e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80025a0:	4f15      	ldr	r7, [pc, #84]	; (80025f8 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80025a2:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025a4:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80025a8:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025aa:	4322      	orrs	r2, r4
 80025ac:	ea42 0308 	orr.w	r3, r2, r8
 80025b0:	ea43 030c 	orr.w	r3, r3, ip
 80025b4:	4333      	orrs	r3, r6
 80025b6:	432b      	orrs	r3, r5
 80025b8:	430b      	orrs	r3, r1
 80025ba:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80025bc:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80025be:	2000      	movs	r0, #0
 80025c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025c4:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80025c8:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80025ca:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025cc:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80025d0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80025d4:	4c08      	ldr	r4, [pc, #32]	; (80025f8 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80025d6:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025da:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80025dc:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80025e0:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025e4:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80025e6:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025e8:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80025ea:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80025ec:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80025ee:	6043      	str	r3, [r0, #4]
}
 80025f0:	2000      	movs	r0, #0
 80025f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025f6:	bf00      	nop
 80025f8:	ffff8000 	.word	0xffff8000

080025fc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80025fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002600:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002602:	2a01      	cmp	r2, #1
 8002604:	68cf      	ldr	r7, [r1, #12]
 8002606:	694e      	ldr	r6, [r1, #20]
 8002608:	f103 33ff 	add.w	r3, r3, #4294967295
 800260c:	684d      	ldr	r5, [r1, #4]
 800260e:	f107 37ff 	add.w	r7, r7, #4294967295
 8002612:	688c      	ldr	r4, [r1, #8]
 8002614:	f106 36ff 	add.w	r6, r6, #4294967295
 8002618:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800261c:	f105 35ff 	add.w	r5, r5, #4294967295
 8002620:	6809      	ldr	r1, [r1, #0]
 8002622:	f104 34ff 	add.w	r4, r4, #4294967295
 8002626:	f10c 3cff 	add.w	ip, ip, #4294967295
 800262a:	ea4f 3707 	mov.w	r7, r7, lsl #12
 800262e:	f101 38ff 	add.w	r8, r1, #4294967295
 8002632:	ea4f 5606 	mov.w	r6, r6, lsl #20
 8002636:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800263a:	ea4f 2104 	mov.w	r1, r4, lsl #8
 800263e:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 8002642:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 8002646:	d012      	beq.n	800266e <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002648:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800264c:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800264e:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002652:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002656:	ea42 0305 	orr.w	r3, r2, r5
 800265a:	430b      	orrs	r3, r1
 800265c:	ea43 030e 	orr.w	r3, r3, lr
 8002660:	ea43 030c 	orr.w	r3, r3, ip
 8002664:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002666:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8002668:	2000      	movs	r0, #0
 800266a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800266e:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002670:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002674:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002676:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800267a:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800267c:	4e07      	ldr	r6, [pc, #28]	; (800269c <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800267e:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002682:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002686:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002688:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800268c:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800268e:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002690:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002692:	60c3      	str	r3, [r0, #12]
}
 8002694:	2000      	movs	r0, #0
 8002696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800269a:	bf00      	nop
 800269c:	ff0f0fff 	.word	0xff0f0fff

080026a0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80026a0:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 80026a2:	2200      	movs	r2, #0
{
 80026a4:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80026a6:	684d      	ldr	r5, [r1, #4]
{
 80026a8:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80026aa:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 80026ac:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 80026ae:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80026b0:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80026b2:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80026b6:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80026ba:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80026bc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80026c0:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 80026c2:	9b01      	ldr	r3, [sp, #4]
 80026c4:	6123      	str	r3, [r4, #16]
}
 80026c6:	b002      	add	sp, #8
 80026c8:	bc30      	pop	{r4, r5}
 80026ca:	4770      	bx	lr

080026cc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80026cc:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 80026ce:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 80026d0:	6953      	ldr	r3, [r2, #20]
 80026d2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80026d6:	6151      	str	r1, [r2, #20]
}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80026ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026ee:	6099      	str	r1, [r3, #8]
#endif
}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d065      	beq.n	80027cc <HAL_TIM_Base_Init+0xd0>
{
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002702:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002706:	4604      	mov	r4, r0
 8002708:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800270c:	2b00      	cmp	r3, #0
 800270e:	d03b      	beq.n	8002788 <HAL_TIM_Base_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002712:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002714:	4e36      	ldr	r6, [pc, #216]	; (80027f0 <HAL_TIM_Base_Init+0xf4>)
 8002716:	4f37      	ldr	r7, [pc, #220]	; (80027f4 <HAL_TIM_Base_Init+0xf8>)
 8002718:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800271c:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8002724:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 8002728:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272a:	fab6 f686 	clz	r6, r6
 800272e:	fab7 f787 	clz	r7, r7
 8002732:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8002736:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800273a:	d02a      	beq.n	8002792 <HAL_TIM_Base_Init+0x96>
 800273c:	bb4e      	cbnz	r6, 8002792 <HAL_TIM_Base_Init+0x96>
 800273e:	492e      	ldr	r1, [pc, #184]	; (80027f8 <HAL_TIM_Base_Init+0xfc>)
 8002740:	428a      	cmp	r2, r1
 8002742:	d045      	beq.n	80027d0 <HAL_TIM_Base_Init+0xd4>
 8002744:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002748:	428a      	cmp	r2, r1
 800274a:	d041      	beq.n	80027d0 <HAL_TIM_Base_Init+0xd4>
 800274c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002750:	428a      	cmp	r2, r1
 8002752:	d042      	beq.n	80027da <HAL_TIM_Base_Init+0xde>
 8002754:	2f00      	cmp	r7, #0
 8002756:	d140      	bne.n	80027da <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002758:	4928      	ldr	r1, [pc, #160]	; (80027fc <HAL_TIM_Base_Init+0x100>)
 800275a:	428a      	cmp	r2, r1
 800275c:	d01e      	beq.n	800279c <HAL_TIM_Base_Init+0xa0>
 800275e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002762:	428a      	cmp	r2, r1
 8002764:	d01a      	beq.n	800279c <HAL_TIM_Base_Init+0xa0>
 8002766:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800276a:	428a      	cmp	r2, r1
 800276c:	d016      	beq.n	800279c <HAL_TIM_Base_Init+0xa0>
 800276e:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8002772:	428a      	cmp	r2, r1
 8002774:	d012      	beq.n	800279c <HAL_TIM_Base_Init+0xa0>
 8002776:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800277a:	428a      	cmp	r2, r1
 800277c:	d00e      	beq.n	800279c <HAL_TIM_Base_Init+0xa0>
 800277e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002782:	428a      	cmp	r2, r1
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_Base_Init+0xa8>
 8002786:	e009      	b.n	800279c <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8002788:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800278c:	f7ff ffb4 	bl	80026f8 <HAL_TIM_Base_MspInit>
 8002790:	e7be      	b.n	8002710 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002792:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002796:	68a0      	ldr	r0, [r4, #8]
 8002798:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a0:	6920      	ldr	r0, [r4, #16]
 80027a2:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a4:	69a1      	ldr	r1, [r4, #24]
 80027a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027aa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ac:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ae:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80027b0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80027b4:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b6:	b936      	cbnz	r6, 80027c6 <HAL_TIM_Base_Init+0xca>
 80027b8:	b92f      	cbnz	r7, 80027c6 <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ba:	2301      	movs	r3, #1
  return HAL_OK;
 80027bc:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80027be:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80027c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 80027c6:	6963      	ldr	r3, [r4, #20]
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	e7f6      	b.n	80027ba <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027d4:	68a1      	ldr	r1, [r4, #8]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	e7e0      	b.n	800279c <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027da:	4909      	ldr	r1, [pc, #36]	; (8002800 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027e0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e2:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80027e4:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e8:	d0d8      	beq.n	800279c <HAL_TIM_Base_Init+0xa0>
 80027ea:	2f00      	cmp	r7, #0
 80027ec:	d1d6      	bne.n	800279c <HAL_TIM_Base_Init+0xa0>
 80027ee:	e7b3      	b.n	8002758 <HAL_TIM_Base_Init+0x5c>
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40010400 	.word	0x40010400
 80027f8:	40000400 	.word	0x40000400
 80027fc:	40014000 	.word	0x40014000
 8002800:	40000c00 	.word	0x40000c00

08002804 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002804:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	f041 0101 	orr.w	r1, r1, #1
 800280e:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002810:	6899      	ldr	r1, [r3, #8]
 8002812:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	2a06      	cmp	r2, #6
 8002816:	d006      	beq.n	8002826 <HAL_TIM_Base_Start_IT+0x22>
 8002818:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800281c:	d003      	beq.n	8002826 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
}
 8002826:	2000      	movs	r0, #0
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	00010007 	.word	0x00010007

08002830 <HAL_TIM_OC_DelayElapsedCallback>:
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop

08002834 <HAL_TIM_IC_CaptureCallback>:
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop

0800283c <HAL_TIM_TriggerCallback>:
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002840:	6803      	ldr	r3, [r0, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	0791      	lsls	r1, r2, #30
{
 8002846:	b510      	push	{r4, lr}
 8002848:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800284a:	d502      	bpl.n	8002852 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	0792      	lsls	r2, r2, #30
 8002850:	d468      	bmi.n	8002924 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	0752      	lsls	r2, r2, #29
 8002856:	d502      	bpl.n	800285e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	0750      	lsls	r0, r2, #29
 800285c:	d44f      	bmi.n	80028fe <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	0711      	lsls	r1, r2, #28
 8002862:	d502      	bpl.n	800286a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	0712      	lsls	r2, r2, #28
 8002868:	d437      	bmi.n	80028da <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	06d0      	lsls	r0, r2, #27
 800286e:	d502      	bpl.n	8002876 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	06d1      	lsls	r1, r2, #27
 8002874:	d41e      	bmi.n	80028b4 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	07d2      	lsls	r2, r2, #31
 800287a:	d502      	bpl.n	8002882 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	07d0      	lsls	r0, r2, #31
 8002880:	d469      	bmi.n	8002956 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	0611      	lsls	r1, r2, #24
 8002886:	d502      	bpl.n	800288e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	0612      	lsls	r2, r2, #24
 800288c:	d46b      	bmi.n	8002966 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	05d0      	lsls	r0, r2, #23
 8002892:	d502      	bpl.n	800289a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	0611      	lsls	r1, r2, #24
 8002898:	d46d      	bmi.n	8002976 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	0652      	lsls	r2, r2, #25
 800289e:	d502      	bpl.n	80028a6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	0650      	lsls	r0, r2, #25
 80028a4:	d46f      	bmi.n	8002986 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	0691      	lsls	r1, r2, #26
 80028aa:	d502      	bpl.n	80028b2 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	0692      	lsls	r2, r2, #26
 80028b0:	d449      	bmi.n	8002946 <HAL_TIM_IRQHandler+0x106>
}
 80028b2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028b4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b8:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80028ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028bc:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028be:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80028c6:	d16f      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c8:	f7ff ffb2 	bl	8002830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff ffb3 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	2200      	movs	r2, #0
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	7722      	strb	r2, [r4, #28]
 80028d8:	e7cd      	b.n	8002876 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028da:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028de:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80028e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e2:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e8:	079b      	lsls	r3, r3, #30
 80028ea:	d15a      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ec:	f7ff ffa0 	bl	8002830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff ffa1 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	2200      	movs	r2, #0
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	7722      	strb	r2, [r4, #28]
 80028fc:	e7b5      	b.n	800286a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028fe:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002902:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002904:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002906:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002908:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800290a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800290c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002910:	d144      	bne.n	800299c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002912:	f7ff ff8d 	bl	8002830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff ff8e 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291c:	2200      	movs	r2, #0
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	7722      	strb	r2, [r4, #28]
 8002922:	e79c      	b.n	800285e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002924:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002928:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800292a:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800292c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002930:	0799      	lsls	r1, r3, #30
 8002932:	d130      	bne.n	8002996 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002934:	f7ff ff7c 	bl	8002830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff ff7d 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	2200      	movs	r2, #0
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	7722      	strb	r2, [r4, #28]
 8002944:	e785      	b.n	8002852 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002946:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800294a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800294c:	611a      	str	r2, [r3, #16]
}
 800294e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002952:	f000 b82d 	b.w	80029b0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002956:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800295a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800295c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800295e:	f7ff fbbd 	bl	80020dc <HAL_TIM_PeriodElapsedCallback>
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	e78d      	b.n	8002882 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002966:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800296a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800296c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800296e:	f000 f821 	bl	80029b4 <HAL_TIMEx_BreakCallback>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	e78b      	b.n	800288e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002976:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800297a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800297c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800297e:	f000 f81b 	bl	80029b8 <HAL_TIMEx_Break2Callback>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	e789      	b.n	800289a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002986:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800298a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800298c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800298e:	f7ff ff55 	bl	800283c <HAL_TIM_TriggerCallback>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	e787      	b.n	80028a6 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8002996:	f7ff ff4d 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 800299a:	e7d0      	b.n	800293e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800299c:	f7ff ff4a 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 80029a0:	e7bc      	b.n	800291c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	f7ff ff47 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 80029a6:	e7a6      	b.n	80028f6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80029a8:	f7ff ff44 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e791      	b.n	80028d2 <HAL_TIM_IRQHandler+0x92>
 80029ae:	bf00      	nop

080029b0 <HAL_TIMEx_CommutCallback>:
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop

080029b4 <HAL_TIMEx_BreakCallback>:
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <HAL_TIMEx_Break2Callback>:
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <_tx_initialize_kernel_enter>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_kernel_enter(VOID)
{
 80029bc:	b510      	push	{r4, lr}
	/* Determine if the compiler has pre-initialized ThreadX.  */
	if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80029be:	4c0e      	ldr	r4, [pc, #56]	; (80029f8 <_tx_initialize_kernel_enter+0x3c>)
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80029c6:	d00a      	beq.n	80029de <_tx_initialize_kernel_enter+0x22>
		/* No, the initialization still needs to take place.  */

		/* Ensure that the system state variable is set to indicate 
		 initialization is in progress.  Note that this variable is 
		 later used to represent interrupt nesting.  */
		_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80029c8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80029cc:	6023      	str	r3, [r4, #0]
		/* Call any port specific preprocessing.  */
		TX_PORT_SPECIFIC_PRE_INITIALIZATION

		/* Invoke the low-level initialization to handle all processor specific
		 initialization issues.  */
		_tx_initialize_low_level();
 80029ce:	f7fd fc1f 	bl	8000210 <_tx_initialize_low_level>

		/* Invoke the high-level initialization to exercise all of the 
		 ThreadX components and the application's initialization 
		 function.  */
		_tx_initialize_high_level();
 80029d2:	f001 fb4f 	bl	8004074 <_tx_initialize_high_level>

		/* Call any port specific post-processing.  */
		TX_PORT_SPECIFIC_POST_INITIALIZATION
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <_tx_initialize_kernel_enter+0x40>)
 80029d8:	6813      	ldr	r3, [r2, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	6013      	str	r3, [r2, #0]
	 later used to represent interrupt nesting.  */
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;

	/* Call the application provided initialization function. Pass the
	 * first available memory address to it.  */
	tx_application_define(_tx_initialize_unused_memory);
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <_tx_initialize_kernel_enter+0x44>)
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80029e0:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
	tx_application_define(_tx_initialize_unused_memory);
 80029e4:	6810      	ldr	r0, [r2, #0]
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 80029e6:	6023      	str	r3, [r4, #0]
	tx_application_define(_tx_initialize_unused_memory);
 80029e8:	f7fe f8ae 	bl	8000b48 <tx_application_define>

	/* Set the system state in preparation for entering the thread scheduler. */
	_tx_thread_system_state = TX_INITIALIZE_IS_FINISHED;
 80029ec:	2300      	movs	r3, #0
 80029ee:	6023      	str	r3, [r4, #0]
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception. */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80029f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_tx_thread_schedule();
 80029f4:	f7fd bc5c 	b.w	80002b0 <_tx_thread_schedule>
 80029f8:	2000000c 	.word	0x2000000c
 80029fc:	200009d8 	.word	0x200009d8
 8002a00:	20000f88 	.word	0x20000f88

08002a04 <_tx_thread_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8002a04:	b538      	push	{r3, r4, r5, lr}

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8002a06:	480f      	ldr	r0, [pc, #60]	; (8002a44 <_tx_thread_initialize+0x40>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 8002a08:	2400      	movs	r4, #0

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <_tx_thread_initialize+0x44>)
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002a0c:	2520      	movs	r5, #32
    _tx_thread_execute_ptr =  TX_NULL;
 8002a0e:	6004      	str	r4, [r0, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002a10:	4621      	mov	r1, r4
    TX_THREAD_SET_CURRENT(TX_NULL)
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <_tx_thread_initialize+0x48>)
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 8002a14:	480e      	ldr	r0, [pc, #56]	; (8002a50 <_tx_thread_initialize+0x4c>)
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8002a16:	601c      	str	r4, [r3, #0]
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <_tx_thread_initialize+0x50>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 8002a1a:	6014      	str	r4, [r2, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002a1c:	2280      	movs	r2, #128	; 0x80
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 8002a1e:	6004      	str	r4, [r0, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <_tx_thread_initialize+0x54>)
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002a22:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002a24:	f002 fb82 	bl	800512c <memset>
    TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log)));
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
 8002a28:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <_tx_thread_initialize+0x58>)
    _tx_thread_created_ptr =        TX_NULL;
 8002a2a:	490d      	ldr	r1, [pc, #52]	; (8002a60 <_tx_thread_initialize+0x5c>)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
                            | (((ULONG) 1) << 7)
 8002a2c:	6810      	ldr	r0, [r2, #0]
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <_tx_thread_initialize+0x60>)
    _tx_thread_created_ptr =        TX_NULL;
 8002a30:	600c      	str	r4, [r1, #0]
                            | (((ULONG) 1) << 7)
 8002a32:	4303      	orrs	r3, r0
    _tx_thread_created_count =      TX_EMPTY;
 8002a34:	4d0c      	ldr	r5, [pc, #48]	; (8002a68 <_tx_thread_initialize+0x64>)
    _tx_thread_preempt_disable =    ((UINT) 0);
 8002a36:	480d      	ldr	r0, [pc, #52]	; (8002a6c <_tx_thread_initialize+0x68>)
    _tx_thread_mutex_release =      TX_NULL;
 8002a38:	490d      	ldr	r1, [pc, #52]	; (8002a70 <_tx_thread_initialize+0x6c>)
    _tx_thread_created_count =      TX_EMPTY;
 8002a3a:	602c      	str	r4, [r5, #0]
    _tx_thread_preempt_disable =    ((UINT) 0);
 8002a3c:	6004      	str	r4, [r0, #0]
    _tx_thread_mutex_release =      TX_NULL;
 8002a3e:	600c      	str	r4, [r1, #0]
    _tx_build_options =  _tx_build_options 
 8002a40:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	200009e0 	.word	0x200009e0
 8002a48:	200009c4 	.word	0x200009c4
 8002a4c:	200009dc 	.word	0x200009dc
 8002a50:	200009e8 	.word	0x200009e8
 8002a54:	200009e4 	.word	0x200009e4
 8002a58:	20000940 	.word	0x20000940
 8002a5c:	200009cc 	.word	0x200009cc
 8002a60:	200009c8 	.word	0x200009c8
 8002a64:	01000080 	.word	0x01000080
 8002a68:	200009d0 	.word	0x200009d0
 8002a6c:	200009d8 	.word	0x200009d8
 8002a70:	200009c0 	.word	0x200009c0

08002a74 <_tx_thread_sleep>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002a76:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002a7a:	b672      	cpsid	i

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <_tx_thread_sleep+0x5c>)
 8002a7e:	681c      	ldr	r4, [r3, #0]

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8002a80:	b1f4      	cbz	r4, 8002ac0 <_tx_thread_sleep+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002a82:	f3ef 8305 	mrs	r3, IPSR
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8002a86:	4913      	ldr	r1, [pc, #76]	; (8002ad4 <_tx_thread_sleep+0x60>)
 8002a88:	6809      	ldr	r1, [r1, #0]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	d118      	bne.n	8002ac0 <_tx_thread_sleep+0x4c>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <_tx_thread_sleep+0x64>)
 8002a90:	429c      	cmp	r4, r3
 8002a92:	d015      	beq.n	8002ac0 <_tx_thread_sleep+0x4c>
        status =  TX_CALLER_ERROR;
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8002a94:	b1c0      	cbz	r0, 8002ac8 <_tx_thread_sleep+0x54>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <_tx_thread_sleep+0x68>)
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	b989      	cbnz	r1, 8002ac0 <_tx_thread_sleep+0x4c>

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8002a9c:	681d      	ldr	r5, [r3, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002a9e:	2601      	movs	r6, #1
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8002aa0:	2704      	movs	r7, #4
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8002aa2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
            _tx_thread_preempt_disable++;
 8002aa6:	4435      	add	r5, r6
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8002aa8:	64e0      	str	r0, [r4, #76]	; 0x4c
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8002aaa:	6327      	str	r7, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8002aac:	601d      	str	r5, [r3, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002aae:	63a6      	str	r6, [r4, #56]	; 0x38
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002ab0:	f382 8810 	msr	PRIMASK, r2

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f000 f813 	bl	8002ae0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8002aba:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        }
    }
    
    /* Return completion status.  */
    return(status);
}
 8002abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac0:	f382 8810 	msr	PRIMASK, r2
            status =  TX_CALLER_ERROR;
 8002ac4:	2013      	movs	r0, #19
}
 8002ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac8:	f382 8810 	msr	PRIMASK, r2
 8002acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200009dc 	.word	0x200009dc
 8002ad4:	2000000c 	.word	0x2000000c
 8002ad8:	20000a88 	.word	0x20000a88
 8002adc:	200009d8 	.word	0x200009d8

08002ae0 <_tx_thread_system_suspend>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8002ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8002ae4:	4b57      	ldr	r3, [pc, #348]	; (8002c44 <_tx_thread_system_suspend+0x164>)
{
 8002ae6:	4604      	mov	r4, r0
    TX_THREAD_GET_CURRENT(current_thread)
 8002ae8:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002aea:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002aee:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8002af0:	4285      	cmp	r5, r0
 8002af2:	d060      	beq.n	8002bb6 <_tx_thread_system_suspend+0xd6>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8002af4:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <_tx_thread_system_suspend+0x168>)
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8002af6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 8002af8:	6813      	ldr	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8002afa:	2901      	cmp	r1, #1
    _tx_thread_preempt_disable--;
 8002afc:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b00:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8002b02:	d015      	beq.n	8002b30 <_tx_thread_system_suspend+0x50>
 8002b04:	4b51      	ldr	r3, [pc, #324]	; (8002c4c <_tx_thread_system_suspend+0x16c>)
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002b06:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	42ab      	cmp	r3, r5
 8002b0e:	d00d      	beq.n	8002b2c <_tx_thread_system_suspend+0x4c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002b10:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 8002b12:	b95b      	cbnz	r3, 8002b2c <_tx_thread_system_suspend+0x4c>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002b14:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <_tx_thread_system_suspend+0x170>)
 8002b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002b1c:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8002b20:	b923      	cbnz	r3, 8002b2c <_tx_thread_system_suspend+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002b22:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8002b26:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002b28:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 8002b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8002b30:	6a23      	ldr	r3, [r4, #32]
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8002b32:	f04f 0c00 	mov.w	ip, #0
        priority =  thread_ptr -> tx_thread_priority;
 8002b36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        if (ready_next != thread_ptr)
 8002b38:	429c      	cmp	r4, r3
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8002b3a:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
        if (ready_next != thread_ptr)
 8002b3e:	d050      	beq.n	8002be2 <_tx_thread_system_suspend+0x102>
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8002b40:	4f44      	ldr	r7, [pc, #272]	; (8002c54 <_tx_thread_system_suspend+0x174>)
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8002b42:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8002b46:	f857 e020 	ldr.w	lr, [r7, r0, lsl #2]
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8002b4a:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8002b4e:	45a6      	cmp	lr, r4
            ready_previous -> tx_thread_ready_next =    ready_next;
 8002b50:	f8cc 3020 	str.w	r3, [ip, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8002b54:	d037      	beq.n	8002bc6 <_tx_thread_system_suspend+0xe6>
        if (thread_ptr == _tx_thread_execute_ptr)
 8002b56:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <_tx_thread_system_suspend+0x16c>)
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	42a1      	cmp	r1, r4
 8002b5c:	d1d3      	bne.n	8002b06 <_tx_thread_system_suspend+0x26>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8002b5e:	483e      	ldr	r0, [pc, #248]	; (8002c58 <_tx_thread_system_suspend+0x178>)
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002b60:	493e      	ldr	r1, [pc, #248]	; (8002c5c <_tx_thread_system_suspend+0x17c>)
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8002b62:	6805      	ldr	r5, [r0, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002b64:	680c      	ldr	r4, [r1, #0]
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8002b66:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8002b6a:	601d      	str	r5, [r3, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002b6c:	b1ec      	cbz	r4, 8002baa <_tx_thread_system_suspend+0xca>
                _tx_thread_preempt_disable++;
 8002b6e:	6814      	ldr	r4, [r2, #0]
 8002b70:	3401      	adds	r4, #1
 8002b72:	6014      	str	r4, [r2, #0]
 8002b74:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002b78:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002b7c:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 8002b7e:	6814      	ldr	r4, [r2, #0]
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8002b80:	680d      	ldr	r5, [r1, #0]
                _tx_thread_preempt_disable--;
 8002b82:	3c01      	subs	r4, #1
 8002b84:	6014      	str	r4, [r2, #0]
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8002b86:	fa95 f4a5 	rbit	r4, r5
 8002b8a:	fab4 f484 	clz	r4, r4
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8002b8e:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 8002b92:	f8d0 c000 	ldr.w	ip, [r0]
 8002b96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b98:	4560      	cmp	r0, ip
 8002b9a:	d806      	bhi.n	8002baa <_tx_thread_system_suspend+0xca>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8002b9c:	2001      	movs	r0, #1
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8002b9e:	601f      	str	r7, [r3, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8002ba0:	fa00 f404 	lsl.w	r4, r0, r4
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8002ba4:	ea25 0504 	bic.w	r5, r5, r4
 8002ba8:	600d      	str	r5, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002baa:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002bae:	6813      	ldr	r3, [r2, #0]
            if (combined_flags == ((ULONG) 0))
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0af      	beq.n	8002b14 <_tx_thread_system_suspend+0x34>
 8002bb4:	e7ba      	b.n	8002b2c <_tx_thread_system_suspend+0x4c>
            if (timeout != TX_WAIT_FOREVER)
 8002bb6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	3303      	adds	r3, #3
 8002bbc:	d935      	bls.n	8002c2a <_tx_thread_system_suspend+0x14a>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <_tx_thread_system_suspend+0x180>)
 8002bc0:	69e2      	ldr	r2, [r4, #28]
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e796      	b.n	8002af4 <_tx_thread_system_suspend+0x14>
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002bc6:	f8df c094 	ldr.w	ip, [pc, #148]	; 8002c5c <_tx_thread_system_suspend+0x17c>
                _tx_thread_priority_list[priority] =  ready_next;
 8002bca:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002bce:	f8dc 3000 	ldr.w	r3, [ip]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0bf      	beq.n	8002b56 <_tx_thread_system_suspend+0x76>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8002bd6:	4081      	lsls	r1, r0
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8002bd8:	ea23 0301 	bic.w	r3, r3, r1
 8002bdc:	f8cc 3000 	str.w	r3, [ip]
 8002be0:	e7b9      	b.n	8002b56 <_tx_thread_system_suspend+0x76>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8002be2:	f8df e080 	ldr.w	lr, [pc, #128]	; 8002c64 <_tx_thread_system_suspend+0x184>
            TX_MOD32_BIT_SET(priority, priority_bit)
 8002be6:	4081      	lsls	r1, r0
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002be8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002c5c <_tx_thread_system_suspend+0x17c>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8002bec:	f8de 3000 	ldr.w	r3, [lr]
 8002bf0:	43c9      	mvns	r1, r1
            _tx_thread_priority_list[priority] =    TX_NULL;
 8002bf2:	4f18      	ldr	r7, [pc, #96]	; (8002c54 <_tx_thread_system_suspend+0x174>)
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8002bf4:	400b      	ands	r3, r1
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002bf6:	f8d8 9000 	ldr.w	r9, [r8]
            _tx_thread_priority_list[priority] =    TX_NULL;
 8002bfa:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8002bfe:	f8ce 3000 	str.w	r3, [lr]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002c02:	f1b9 0f00 	cmp.w	r9, #0
 8002c06:	d003      	beq.n	8002c10 <_tx_thread_system_suspend+0x130>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8002c08:	ea01 0109 	and.w	r1, r1, r9
 8002c0c:	f8c8 1000 	str.w	r1, [r8]
            if (priority_map == ((ULONG) 0))
 8002c10:	b983      	cbnz	r3, 8002c34 <_tx_thread_system_suspend+0x154>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002c12:	4811      	ldr	r0, [pc, #68]	; (8002c58 <_tx_thread_system_suspend+0x178>)
 8002c14:	2420      	movs	r4, #32
                _tx_thread_execute_ptr =       TX_NULL;
 8002c16:	490d      	ldr	r1, [pc, #52]	; (8002c4c <_tx_thread_system_suspend+0x16c>)
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002c18:	6004      	str	r4, [r0, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002c20:	6813      	ldr	r3, [r2, #0]
                if (combined_flags == ((ULONG) 0))
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f43f af76 	beq.w	8002b14 <_tx_thread_system_suspend+0x34>
 8002c28:	e780      	b.n	8002b2c <_tx_thread_system_suspend+0x4c>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8002c2a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8002c2e:	f000 f891 	bl	8002d54 <_tx_timer_system_activate>
 8002c32:	e7c4      	b.n	8002bbe <_tx_thread_system_suspend+0xde>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8002c3c:	4906      	ldr	r1, [pc, #24]	; (8002c58 <_tx_thread_system_suspend+0x178>)
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e789      	b.n	8002b56 <_tx_thread_system_suspend+0x76>
 8002c42:	bf00      	nop
 8002c44:	200009dc 	.word	0x200009dc
 8002c48:	200009d8 	.word	0x200009d8
 8002c4c:	200009e0 	.word	0x200009e0
 8002c50:	e000ed04 	.word	0xe000ed04
 8002c54:	20000940 	.word	0x20000940
 8002c58:	200009e4 	.word	0x200009e4
 8002c5c:	200009e8 	.word	0x200009e8
 8002c60:	20000a78 	.word	0x20000a78
 8002c64:	200009c4 	.word	0x200009c4

08002c68 <_tx_timer_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8002c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8002c6c:	2500      	movs	r5, #0
    _tx_timer_expired_timer_ptr =  TX_NULL;

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8002c6e:	4c26      	ldr	r4, [pc, #152]	; (8002d08 <_tx_timer_initialize+0xa0>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8002c70:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8002d40 <_tx_timer_initialize+0xd8>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8002c74:	2280      	movs	r2, #128	; 0x80
    _tx_timer_time_slice =  ((ULONG) 0);
 8002c76:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8002d44 <_tx_timer_initialize+0xdc>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8002c7a:	4629      	mov	r1, r5
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <_tx_timer_initialize+0xa4>)
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8002c7e:	4620      	mov	r0, r4
    _tx_timer_expired_time_slice =  TX_FALSE;
 8002c80:	4f23      	ldr	r7, [pc, #140]	; (8002d10 <_tx_timer_initialize+0xa8>)
{
 8002c82:	b087      	sub	sp, #28
    _tx_timer_expired =             TX_FALSE;
 8002c84:	4e23      	ldr	r6, [pc, #140]	; (8002d14 <_tx_timer_initialize+0xac>)
    _tx_timer_system_clock =  ((ULONG) 0);
 8002c86:	f8ce 5000 	str.w	r5, [lr]
    _tx_timer_time_slice =  ((ULONG) 0);
 8002c8a:	f8cc 5000 	str.w	r5, [ip]
    _tx_timer_expired_time_slice =  TX_FALSE;
 8002c8e:	603d      	str	r5, [r7, #0]
    _tx_timer_expired =             TX_FALSE;
 8002c90:	6035      	str	r5, [r6, #0]
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8002c92:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8002c94:	f002 fa4a 	bl	800512c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8002c98:	4e1f      	ldr	r6, [pc, #124]	; (8002d18 <_tx_timer_initialize+0xb0>)
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8002c9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    _tx_timer_list_start =   &_tx_timer_list[0];
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <_tx_timer_initialize+0xb4>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8002ca0:	f104 0e80 	add.w	lr, r4, #128	; 0x80
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8002ca4:	6034      	str	r4, [r6, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8002ca6:	462b      	mov	r3, r5
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8002ca8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8002d48 <_tx_timer_initialize+0xe0>
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8002cac:	4f1c      	ldr	r7, [pc, #112]	; (8002d20 <_tx_timer_initialize+0xb8>)
    _tx_timer_list_start =   &_tx_timer_list[0];
 8002cae:	6014      	str	r4, [r2, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8002cb0:	4661      	mov	r1, ip
 8002cb2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002d4c <_tx_timer_initialize+0xe4>
 8002cb6:	4602      	mov	r2, r0
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8002cb8:	4e1a      	ldr	r6, [pc, #104]	; (8002d24 <_tx_timer_initialize+0xbc>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8002cba:	4c1b      	ldr	r4, [pc, #108]	; (8002d28 <_tx_timer_initialize+0xc0>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8002cbc:	f8c7 e000 	str.w	lr, [r7]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8002cc0:	f8c8 5000 	str.w	r5, [r8]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8002cc4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002d50 <_tx_timer_initialize+0xe8>
 8002cc8:	4f18      	ldr	r7, [pc, #96]	; (8002d2c <_tx_timer_initialize+0xc4>)
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8002cca:	f8c6 c000 	str.w	ip, [r6]
        status =  _tx_thread_create(&_tx_timer_thread, 
 8002cce:	4d18      	ldr	r5, [pc, #96]	; (8002d30 <_tx_timer_initialize+0xc8>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8002cd0:	6020      	str	r0, [r4, #0]
 8002cd2:	e003      	b.n	8002cdc <_tx_timer_initialize+0x74>
 8002cd4:	6831      	ldr	r1, [r6, #0]
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	f8d8 3000 	ldr.w	r3, [r8]
        status =  _tx_thread_create(&_tx_timer_thread, 
 8002cdc:	2000      	movs	r0, #0
 8002cde:	9201      	str	r2, [sp, #4]
 8002ce0:	9100      	str	r1, [sp, #0]
 8002ce2:	463a      	mov	r2, r7
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002cea:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8002cee:	464b      	mov	r3, r9
 8002cf0:	4810      	ldr	r0, [pc, #64]	; (8002d34 <_tx_timer_initialize+0xcc>)
 8002cf2:	f001 fe8d 	bl	8004a10 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	d1ec      	bne.n	8002cd4 <_tx_timer_initialize+0x6c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8002cfa:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <_tx_timer_initialize+0xd0>)

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <_tx_timer_initialize+0xd4>)
    _tx_timer_created_ptr =  TX_NULL;
 8002cfe:	6010      	str	r0, [r2, #0]
    _tx_timer_created_count =  TX_EMPTY;
 8002d00:	6018      	str	r0, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8002d02:	b007      	add	sp, #28
 8002d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d08:	200009f4 	.word	0x200009f4
 8002d0c:	20000b50 	.word	0x20000b50
 8002d10:	20000f68 	.word	0x20000f68
 8002d14:	20000a74 	.word	0x20000a74
 8002d18:	200009f0 	.word	0x200009f0
 8002d1c:	20000b54 	.word	0x20000b54
 8002d20:	20000a80 	.word	0x20000a80
 8002d24:	20000f60 	.word	0x20000f60
 8002d28:	20000b5c 	.word	0x20000b5c
 8002d2c:	08002da9 	.word	0x08002da9
 8002d30:	08005230 	.word	0x08005230
 8002d34:	20000a88 	.word	0x20000a88
 8002d38:	20000b58 	.word	0x20000b58
 8002d3c:	20000f64 	.word	0x20000f64
 8002d40:	20000f6c 	.word	0x20000f6c
 8002d44:	20000a78 	.word	0x20000a78
 8002d48:	20000b60 	.word	0x20000b60
 8002d4c:	20000a7c 	.word	0x20000a7c
 8002d50:	4154494d 	.word	0x4154494d

08002d54 <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8002d54:	6802      	ldr	r2, [r0, #0]
    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8002d56:	1e53      	subs	r3, r2, #1
 8002d58:	1cd9      	adds	r1, r3, #3
 8002d5a:	d900      	bls.n	8002d5e <_tx_timer_system_activate+0xa>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 8002d5c:	4770      	bx	lr
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8002d5e:	6981      	ldr	r1, [r0, #24]
 8002d60:	2900      	cmp	r1, #0
 8002d62:	d1fb      	bne.n	8002d5c <_tx_timer_system_activate+0x8>
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8002d64:	2a20      	cmp	r2, #32
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8002d66:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <_tx_timer_system_activate+0x48>)
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8002d68:	490d      	ldr	r1, [pc, #52]	; (8002da0 <_tx_timer_system_activate+0x4c>)
 8002d6a:	bf94      	ite	ls
 8002d6c:	009b      	lslls	r3, r3, #2
 8002d6e:	237c      	movhi	r3, #124	; 0x7c
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8002d70:	6812      	ldr	r2, [r2, #0]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8002d72:	6809      	ldr	r1, [r1, #0]
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8002d74:	4413      	add	r3, r2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8002d76:	4299      	cmp	r1, r3
 8002d78:	d803      	bhi.n	8002d82 <_tx_timer_system_activate+0x2e>
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <_tx_timer_system_activate+0x50>)
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8002d7c:	1a5b      	subs	r3, r3, r1
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	b132      	cbz	r2, 8002d94 <_tx_timer_system_activate+0x40>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8002d86:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8002d88:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8002d8a:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8002d8c:	e9c0 2104 	strd	r2, r1, [r0, #16]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8002d90:	6183      	str	r3, [r0, #24]
}
 8002d92:	4770      	bx	lr
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8002d94:	e9c0 0004 	strd	r0, r0, [r0, #16]
                    *timer_list =  timer_ptr;
 8002d98:	6018      	str	r0, [r3, #0]
 8002d9a:	e7f9      	b.n	8002d90 <_tx_timer_system_activate+0x3c>
 8002d9c:	200009f0 	.word	0x200009f0
 8002da0:	20000a80 	.word	0x20000a80
 8002da4:	20000b54 	.word	0x20000b54

08002da8 <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8002da8:	4b40      	ldr	r3, [pc, #256]	; (8002eac <_tx_timer_thread_entry+0x104>)
 8002daa:	4298      	cmp	r0, r3
 8002dac:	d000      	beq.n	8002db0 <_tx_timer_thread_entry+0x8>
 8002dae:	4770      	bx	lr
{
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	b083      	sub	sp, #12
 8002db6:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002ec4 <_tx_timer_thread_entry+0x11c>
 8002dba:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002ec8 <_tx_timer_thread_entry+0x120>
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	ad01      	add	r5, sp, #4
 8002dc2:	4c3b      	ldr	r4, [pc, #236]	; (8002eb0 <_tx_timer_thread_entry+0x108>)
 8002dc4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8002ebc <_tx_timer_thread_entry+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002dc8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002dcc:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 8002dce:	f8db 3000 	ldr.w	r3, [fp]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	9200      	str	r2, [sp, #0]
            if (expired_timers != TX_NULL)
 8002dd6:	b10a      	cbz	r2, 8002ddc <_tx_timer_thread_entry+0x34>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8002dd8:	f8c2 d018 	str.w	sp, [r2, #24]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8002ddc:	f8d8 2000 	ldr.w	r2, [r8]
            *_tx_timer_current_ptr =  TX_NULL;
 8002de0:	f843 6b04 	str.w	r6, [r3], #4
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8002de4:	4293      	cmp	r3, r2
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8002de6:	f8cb 3000 	str.w	r3, [fp]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8002dea:	d059      	beq.n	8002ea0 <_tx_timer_thread_entry+0xf8>
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8002dec:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <_tx_timer_thread_entry+0x10c>)
 8002dee:	601e      	str	r6, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002df0:	f380 8810 	msr	PRIMASK, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002df4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002df8:	b672      	cpsid	i
            /* Disable interrupts again.  */
            TX_DISABLE

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8002dfa:	9f00      	ldr	r7, [sp, #0]
 8002dfc:	b9b7      	cbnz	r7, 8002e2c <_tx_timer_thread_entry+0x84>
 8002dfe:	e034      	b.n	8002e6a <_tx_timer_thread_entry+0xc2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8002e00:	3a20      	subs	r2, #32
                    timeout_function =  TX_NULL;

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8002e02:	61bd      	str	r5, [r7, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8002e04:	613f      	str	r7, [r7, #16]
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8002e06:	603a      	str	r2, [r7, #0]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8002e08:	9701      	str	r7, [sp, #4]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8002e0a:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002e0c:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002e10:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002e14:	b672      	cpsid	i

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8002e16:	9801      	ldr	r0, [sp, #4]
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8002e18:	6026      	str	r6, [r4, #0]
                if (reactivate_timer == current_timer)
 8002e1a:	42b8      	cmp	r0, r7
 8002e1c:	d02b      	beq.n	8002e76 <_tx_timer_thread_entry+0xce>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002e1e:	f389 8810 	msr	PRIMASK, r9
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002e22:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002e26:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 8002e28:	9f00      	ldr	r7, [sp, #0]
 8002e2a:	b1f7      	cbz	r7, 8002e6a <_tx_timer_thread_entry+0xc2>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8002e2c:	693a      	ldr	r2, [r7, #16]
                reactivate_timer =  TX_NULL;
 8002e2e:	9601      	str	r6, [sp, #4]
                if (current_timer == next_timer)
 8002e30:	42ba      	cmp	r2, r7
 8002e32:	d018      	beq.n	8002e66 <_tx_timer_thread_entry+0xbe>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8002e34:	6978      	ldr	r0, [r7, #20]
                    expired_timers =  next_timer;
 8002e36:	9200      	str	r2, [sp, #0]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8002e38:	6150      	str	r0, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8002e3a:	6102      	str	r2, [r0, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8002e3c:	f8c2 d018 	str.w	sp, [r2, #24]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	2a20      	cmp	r2, #32
 8002e44:	d8dc      	bhi.n	8002e00 <_tx_timer_thread_entry+0x58>
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8002e46:	68f8      	ldr	r0, [r7, #12]
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8002e48:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8002e4c:	603b      	str	r3, [r7, #0]
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8002e4e:	b113      	cbz	r3, 8002e56 <_tx_timer_thread_entry+0xae>
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8002e50:	462b      	mov	r3, r5
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8002e52:	613f      	str	r7, [r7, #16]
                        reactivate_timer =  current_timer;
 8002e54:	9701      	str	r7, [sp, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
                _tx_timer_expired_timer_ptr =  current_timer;
 8002e58:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002e5a:	f38c 8810 	msr	PRIMASK, ip
                if (timeout_function != TX_NULL)
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	d0d6      	beq.n	8002e10 <_tx_timer_thread_entry+0x68>
                    (timeout_function) (timeout_param);
 8002e62:	4790      	blx	r2
 8002e64:	e7d4      	b.n	8002e10 <_tx_timer_thread_entry+0x68>
                    expired_timers =  TX_NULL;
 8002e66:	9600      	str	r6, [sp, #0]
 8002e68:	e7ea      	b.n	8002e40 <_tx_timer_thread_entry+0x98>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <_tx_timer_thread_entry+0x10c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	b13b      	cbz	r3, 8002e80 <_tx_timer_thread_entry+0xd8>
 8002e70:	f38c 8810 	msr	PRIMASK, ip
 8002e74:	e7a8      	b.n	8002dc8 <_tx_timer_thread_entry+0x20>
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8002e76:	61be      	str	r6, [r7, #24]
                    _tx_timer_system_activate(current_timer);
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f7ff ff6b 	bl	8002d54 <_tx_timer_system_activate>
 8002e7e:	e7ce      	b.n	8002e1e <_tx_timer_thread_entry+0x76>

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8002e80:	490d      	ldr	r1, [pc, #52]	; (8002eb8 <_tx_timer_thread_entry+0x110>)
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002e82:	2201      	movs	r2, #1
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002e84:	2003      	movs	r0, #3
                _tx_thread_preempt_disable++;
 8002e86:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002e88:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
                _tx_thread_preempt_disable++;
 8002e8c:	4413      	add	r3, r2
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002e8e:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
                _tx_thread_preempt_disable++;
 8002e92:	600b      	str	r3, [r1, #0]
 8002e94:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8002e98:	4808      	ldr	r0, [pc, #32]	; (8002ebc <_tx_timer_thread_entry+0x114>)
 8002e9a:	f7ff fe21 	bl	8002ae0 <_tx_thread_system_suspend>
 8002e9e:	e793      	b.n	8002dc8 <_tx_timer_thread_entry+0x20>
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <_tx_timer_thread_entry+0x118>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8cb 3000 	str.w	r3, [fp]
 8002ea8:	e7a0      	b.n	8002dec <_tx_timer_thread_entry+0x44>
 8002eaa:	bf00      	nop
 8002eac:	4154494d 	.word	0x4154494d
 8002eb0:	20000b50 	.word	0x20000b50
 8002eb4:	20000a74 	.word	0x20000a74
 8002eb8:	200009d8 	.word	0x200009d8
 8002ebc:	20000a88 	.word	0x20000a88
 8002ec0:	20000b54 	.word	0x20000b54
 8002ec4:	200009f0 	.word	0x200009f0
 8002ec8:	20000a80 	.word	0x20000a80

08002ecc <_txe_block_allocate>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 8002ecc:	b1e8      	cbz	r0, 8002f0a <_txe_block_allocate+0x3e>
        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
    }

    /* Check for an invalid pool pointer.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <_txe_block_allocate+0x48>)
{
 8002ed0:	b410      	push	{r4}
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8002ed2:	6804      	ldr	r4, [r0, #0]
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	d110      	bne.n	8002efa <_txe_block_allocate+0x2e>
        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
    }

    /* Check for an invalid destination for return pointer.  */
    else if (block_ptr == TX_NULL)
 8002ed8:	b1c9      	cbz	r1, 8002f0e <_txe_block_allocate+0x42>
    else
    {
    
        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8002eda:	b152      	cbz	r2, 8002ef2 <_txe_block_allocate+0x26>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002edc:	f3ef 8305 	mrs	r3, IPSR
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8002ee0:	4c0d      	ldr	r4, [pc, #52]	; (8002f18 <_txe_block_allocate+0x4c>)
 8002ee2:	6824      	ldr	r4, [r4, #0]
 8002ee4:	4323      	orrs	r3, r4
 8002ee6:	d10c      	bne.n	8002f02 <_txe_block_allocate+0x36>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8002ee8:	4c0c      	ldr	r4, [pc, #48]	; (8002f1c <_txe_block_allocate+0x50>)

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <_txe_block_allocate+0x54>)
 8002eec:	6824      	ldr	r4, [r4, #0]
 8002eee:	429c      	cmp	r4, r3
 8002ef0:	d007      	beq.n	8002f02 <_txe_block_allocate+0x36>
        status =  _tx_block_allocate(pool_ptr, block_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8002ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_block_allocate(pool_ptr, block_ptr, wait_option);
 8002ef6:	f000 bca3 	b.w	8003840 <_tx_block_allocate>
        status =  TX_POOL_ERROR;
 8002efa:	2002      	movs	r0, #2
}
 8002efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f00:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 8002f02:	2004      	movs	r0, #4
}
 8002f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f08:	4770      	bx	lr
        status =  TX_POOL_ERROR;
 8002f0a:	2002      	movs	r0, #2
}
 8002f0c:	4770      	bx	lr
        status =  TX_PTR_ERROR;
 8002f0e:	2003      	movs	r0, #3
 8002f10:	e7f4      	b.n	8002efc <_txe_block_allocate+0x30>
 8002f12:	bf00      	nop
 8002f14:	424c4f43 	.word	0x424c4f43
 8002f18:	2000000c 	.word	0x2000000c
 8002f1c:	200009dc 	.word	0x200009dc
 8002f20:	20000a88 	.word	0x20000a88

08002f24 <_txe_block_pool_create>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8002f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f28:	e9dd 9408 	ldrd	r9, r4, [sp, #32]
        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
    }

    /* Check for invalid control block size.  */
    else if (pool_control_block_size != (sizeof(TX_BLOCK_POOL)))
 8002f2c:	2c30      	cmp	r4, #48	; 0x30
 8002f2e:	d150      	bne.n	8002fd2 <_txe_block_pool_create+0xae>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d04e      	beq.n	8002fd2 <_txe_block_pool_create+0xae>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002f34:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002f38:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8002f3a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8003008 <_txe_block_pool_create+0xe4>
 8002f3e:	f8dc 4000 	ldr.w	r4, [ip]
 8002f42:	3401      	adds	r4, #1
 8002f44:	f8cc 4000 	str.w	r4, [ip]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002f48:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_block_pool_created_ptr;
 8002f4c:	4d29      	ldr	r5, [pc, #164]	; (8002ff4 <_txe_block_pool_create+0xd0>)
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 8002f4e:	4c2a      	ldr	r4, [pc, #168]	; (8002ff8 <_txe_block_pool_create+0xd4>)
        next_pool =   _tx_block_pool_created_ptr;
 8002f50:	682d      	ldr	r5, [r5, #0]
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 8002f52:	6826      	ldr	r6, [r4, #0]
        {

            /* Determine if this block pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8002f54:	42a8      	cmp	r0, r5
 8002f56:	d00a      	beq.n	8002f6e <_txe_block_pool_create+0x4a>
 8002f58:	fab6 f486 	clz	r4, r6
 8002f5c:	0964      	lsrs	r4, r4, #5
 8002f5e:	b114      	cbz	r4, 8002f66 <_txe_block_pool_create+0x42>
 8002f60:	e005      	b.n	8002f6e <_txe_block_pool_create+0x4a>
 8002f62:	42a8      	cmp	r0, r5
 8002f64:	d003      	beq.n	8002f6e <_txe_block_pool_create+0x4a>
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 8002f66:	3401      	adds	r4, #1
                break;
            }
            else
            {
                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_block_pool_created_next;
 8002f68:	6aad      	ldr	r5, [r5, #40]	; 0x28
            if (pool_ptr == next_pool)
 8002f6a:	42b4      	cmp	r4, r6
 8002f6c:	d3f9      	bcc.n	8002f62 <_txe_block_pool_create+0x3e>
 8002f6e:	461e      	mov	r6, r3
 8002f70:	4617      	mov	r7, r2
 8002f72:	4688      	mov	r8, r1
 8002f74:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002f76:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002f7a:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8002f7c:	f8dc 3000 	ldr.w	r3, [ip]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	f8cc 3000 	str.w	r3, [ip]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002f86:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8002f8a:	f001 fe0b 	bl	8004ba4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8002f8e:	42ac      	cmp	r4, r5
 8002f90:	d01f      	beq.n	8002fd2 <_txe_block_pool_create+0xae>
            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8002f92:	b366      	cbz	r6, 8002fee <_txe_block_pool_create+0xca>
        }
        else
        {

            /* Check for invalid pool size.  */
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) > 
 8002f94:	f027 0303 	bic.w	r3, r7, #3
                                            ((pool_size/(sizeof(void *)))*(sizeof(void *))))
 8002f98:	f029 0203 	bic.w	r2, r9, #3
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) > 
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d823      	bhi.n	8002fea <_txe_block_pool_create+0xc6>
            {

#ifndef TX_TIMER_PROCESS_IN_ISR

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <_txe_block_pool_create+0xd8>)

                /* Check for invalid caller of this function.  First check for a calling thread.  */
                if (thread_ptr == &_tx_timer_thread)
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <_txe_block_pool_create+0xdc>)
 8002fa6:	6810      	ldr	r0, [r2, #0]
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8002fa8:	4298      	cmp	r0, r3
 8002faa:	bf0c      	ite	eq
 8002fac:	2013      	moveq	r0, #19
 8002fae:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002fb0:	f3ef 8205 	mrs	r2, IPSR
                }
#endif

                /* Check for interrupt call.  */
                if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <_txe_block_pool_create+0xe0>)
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	d10d      	bne.n	8002fd8 <_txe_block_pool_create+0xb4>
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8002fbc:	b950      	cbnz	r0, 8002fd4 <_txe_block_pool_create+0xb0>
    {

        /* Call actual block pool create function.  */
        status =  _tx_block_pool_create(pool_ptr, name_ptr, block_size, pool_start, pool_size);
 8002fbe:	f8cd 9020 	str.w	r9, [sp, #32]
 8002fc2:	4633      	mov	r3, r6
 8002fc4:	463a      	mov	r2, r7
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	4620      	mov	r0, r4
    }

    /* Return completion status.  */
    return(status);
}
 8002fca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        status =  _tx_block_pool_create(pool_ptr, name_ptr, block_size, pool_start, pool_size);
 8002fce:	f000 bcc7 	b.w	8003960 <_tx_block_pool_create>
        status =  TX_POOL_ERROR;
 8002fd2:	2002      	movs	r0, #2
}
 8002fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd8:	f3ef 8205 	mrs	r2, IPSR
                    if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8002fe4:	d2ea      	bcs.n	8002fbc <_txe_block_pool_create+0x98>
                        status =  TX_CALLER_ERROR;
 8002fe6:	2013      	movs	r0, #19
    return(status);
 8002fe8:	e7f4      	b.n	8002fd4 <_txe_block_pool_create+0xb0>
                status =  TX_SIZE_ERROR;
 8002fea:	2005      	movs	r0, #5
 8002fec:	e7f2      	b.n	8002fd4 <_txe_block_pool_create+0xb0>
            status =  TX_PTR_ERROR;
 8002fee:	2003      	movs	r0, #3
 8002ff0:	e7f0      	b.n	8002fd4 <_txe_block_pool_create+0xb0>
 8002ff2:	bf00      	nop
 8002ff4:	20000f98 	.word	0x20000f98
 8002ff8:	20000f8c 	.word	0x20000f8c
 8002ffc:	200009dc 	.word	0x200009dc
 8003000:	20000a88 	.word	0x20000a88
 8003004:	2000000c 	.word	0x2000000c
 8003008:	200009d8 	.word	0x200009d8

0800300c <_txe_block_release>:
UCHAR               **indirect_ptr;
UCHAR               *work_ptr;


    /* First check the supplied pointer.  */
    if (block_ptr == TX_NULL)
 800300c:	b130      	cbz	r0, 800301c <_txe_block_release+0x10>
        /* Pickup the pool pointer which is just previous to the starting 
           address of block that the caller sees.  */
        work_ptr =      TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
        work_ptr =      TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
        indirect_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
        work_ptr =      *indirect_ptr;
 800300e:	f850 3c04 	ldr.w	r3, [r0, #-4]
        pool_ptr =      TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT(work_ptr);

        /* Check for an invalid pool pointer.  */
        if (pool_ptr == TX_NULL)
 8003012:	b11b      	cbz	r3, 800301c <_txe_block_release+0x10>
            /* Pool pointer is invalid, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }
    
        /* Now check for invalid pool ID.  */
        else if  (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b03      	ldr	r3, [pc, #12]	; (8003024 <_txe_block_release+0x18>)
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <_txe_block_release+0x14>
        }
    }

    /* Return completion status.  */
    return(status);
}
 800301c:	2003      	movs	r0, #3
 800301e:	4770      	bx	lr
            status =  _tx_block_release(block_ptr);
 8003020:	f000 bd00 	b.w	8003a24 <_tx_block_release>
 8003024:	424c4f43 	.word	0x424c4f43

08003028 <_txe_byte_allocate>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8003028:	b1a8      	cbz	r0, 8003056 <_txe_byte_allocate+0x2e>
{
 800302a:	b470      	push	{r4, r5, r6}
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800302c:	4c19      	ldr	r4, [pc, #100]	; (8003094 <_txe_byte_allocate+0x6c>)
 800302e:	6805      	ldr	r5, [r0, #0]
 8003030:	42a5      	cmp	r5, r4
 8003032:	d002      	beq.n	800303a <_txe_byte_allocate+0x12>
        status =  TX_POOL_ERROR;
 8003034:	2002      	movs	r0, #2
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8003036:	bc70      	pop	{r4, r5, r6}
 8003038:	4770      	bx	lr
    else if (memory_ptr == TX_NULL)
 800303a:	b171      	cbz	r1, 800305a <_txe_byte_allocate+0x32>
    else if (memory_size == ((ULONG) 0))
 800303c:	b17a      	cbz	r2, 800305e <_txe_byte_allocate+0x36>
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800303e:	69c4      	ldr	r4, [r0, #28]
 8003040:	4294      	cmp	r4, r2
 8003042:	d30c      	bcc.n	800305e <_txe_byte_allocate+0x36>
        if (wait_option != TX_NO_WAIT)
 8003044:	b173      	cbz	r3, 8003064 <_txe_byte_allocate+0x3c>
 8003046:	f3ef 8405 	mrs	r4, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800304a:	4d13      	ldr	r5, [pc, #76]	; (8003098 <_txe_byte_allocate+0x70>)
 800304c:	682d      	ldr	r5, [r5, #0]
 800304e:	432c      	orrs	r4, r5
 8003050:	d008      	beq.n	8003064 <_txe_byte_allocate+0x3c>
                status =  TX_WAIT_ERROR;
 8003052:	2004      	movs	r0, #4
 8003054:	e7ef      	b.n	8003036 <_txe_byte_allocate+0xe>
        status =  TX_POOL_ERROR;
 8003056:	2002      	movs	r0, #2
}
 8003058:	4770      	bx	lr
        status =  TX_PTR_ERROR;
 800305a:	2003      	movs	r0, #3
 800305c:	e7eb      	b.n	8003036 <_txe_byte_allocate+0xe>
        status =  TX_SIZE_ERROR;
 800305e:	2005      	movs	r0, #5
}
 8003060:	bc70      	pop	{r4, r5, r6}
 8003062:	4770      	bx	lr
        TX_THREAD_GET_CURRENT(thread_ptr)
 8003064:	4d0d      	ldr	r5, [pc, #52]	; (800309c <_txe_byte_allocate+0x74>)
        if (thread_ptr == &_tx_timer_thread)
 8003066:	4c0e      	ldr	r4, [pc, #56]	; (80030a0 <_txe_byte_allocate+0x78>)
 8003068:	682d      	ldr	r5, [r5, #0]
 800306a:	42a5      	cmp	r5, r4
 800306c:	d00f      	beq.n	800308e <_txe_byte_allocate+0x66>
 800306e:	f3ef 8505 	mrs	r5, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003072:	4c09      	ldr	r4, [pc, #36]	; (8003098 <_txe_byte_allocate+0x70>)
 8003074:	6826      	ldr	r6, [r4, #0]
 8003076:	4335      	orrs	r5, r6
 8003078:	d006      	beq.n	8003088 <_txe_byte_allocate+0x60>
 800307a:	f3ef 8505 	mrs	r5, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800307e:	6824      	ldr	r4, [r4, #0]
 8003080:	432c      	orrs	r4, r5
 8003082:	f1b4 3ff0 	cmp.w	r4, #4042322160	; 0xf0f0f0f0
 8003086:	d302      	bcc.n	800308e <_txe_byte_allocate+0x66>
}
 8003088:	bc70      	pop	{r4, r5, r6}
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800308a:	f000 bcfd 	b.w	8003a88 <_tx_byte_allocate>
                status =  TX_CALLER_ERROR;
 800308e:	2013      	movs	r0, #19
    return(status);
 8003090:	e7d1      	b.n	8003036 <_txe_byte_allocate+0xe>
 8003092:	bf00      	nop
 8003094:	42595445 	.word	0x42595445
 8003098:	2000000c 	.word	0x2000000c
 800309c:	200009dc 	.word	0x200009dc
 80030a0:	20000a88 	.word	0x20000a88

080030a4 <_txe_byte_pool_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80030a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a8:	9c06      	ldr	r4, [sp, #24]
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80030aa:	2c34      	cmp	r4, #52	; 0x34
 80030ac:	d149      	bne.n	8003142 <_txe_byte_pool_create+0x9e>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d047      	beq.n	8003142 <_txe_byte_pool_create+0x9e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80030b2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80030b6:	b672      	cpsid	i
    
        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80030b8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8003178 <_txe_byte_pool_create+0xd4>
 80030bc:	f8dc 4000 	ldr.w	r4, [ip]
 80030c0:	3401      	adds	r4, #1
 80030c2:	f8cc 4000 	str.w	r4, [ip]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80030c6:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80030ca:	4d26      	ldr	r5, [pc, #152]	; (8003164 <_txe_byte_pool_create+0xc0>)
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80030cc:	4c26      	ldr	r4, [pc, #152]	; (8003168 <_txe_byte_pool_create+0xc4>)
        next_pool =   _tx_byte_pool_created_ptr;
 80030ce:	682d      	ldr	r5, [r5, #0]
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80030d0:	6826      	ldr	r6, [r4, #0]
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80030d2:	42a8      	cmp	r0, r5
 80030d4:	d00a      	beq.n	80030ec <_txe_byte_pool_create+0x48>
 80030d6:	fab6 f486 	clz	r4, r6
 80030da:	0964      	lsrs	r4, r4, #5
 80030dc:	b114      	cbz	r4, 80030e4 <_txe_byte_pool_create+0x40>
 80030de:	e005      	b.n	80030ec <_txe_byte_pool_create+0x48>
 80030e0:	42a8      	cmp	r0, r5
 80030e2:	d003      	beq.n	80030ec <_txe_byte_pool_create+0x48>
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80030e4:	3401      	adds	r4, #1
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80030e6:	6aed      	ldr	r5, [r5, #44]	; 0x2c
            if (pool_ptr == next_pool)
 80030e8:	42b4      	cmp	r4, r6
 80030ea:	d3f9      	bcc.n	80030e0 <_txe_byte_pool_create+0x3c>
 80030ec:	461f      	mov	r7, r3
 80030ee:	4616      	mov	r6, r2
 80030f0:	4688      	mov	r8, r1
 80030f2:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80030f4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80030f8:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80030fa:	f8dc 3000 	ldr.w	r3, [ip]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f8cc 3000 	str.w	r3, [ip]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003104:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003108:	f001 fd4c 	bl	8004ba4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800310c:	42ac      	cmp	r4, r5
 800310e:	d018      	beq.n	8003142 <_txe_byte_pool_create+0x9e>
            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8003110:	b32e      	cbz	r6, 800315e <_txe_byte_pool_create+0xba>
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8003112:	2f63      	cmp	r7, #99	; 0x63
 8003114:	d921      	bls.n	800315a <_txe_byte_pool_create+0xb6>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <_txe_byte_pool_create+0xc8>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8003118:	4b15      	ldr	r3, [pc, #84]	; (8003170 <_txe_byte_pool_create+0xcc>)
 800311a:	6810      	ldr	r0, [r2, #0]
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800311c:	4298      	cmp	r0, r3
 800311e:	bf0c      	ite	eq
 8003120:	2013      	moveq	r0, #19
 8003122:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003124:	f3ef 8205 	mrs	r2, IPSR
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003128:	4b12      	ldr	r3, [pc, #72]	; (8003174 <_txe_byte_pool_create+0xd0>)
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	d10b      	bne.n	8003148 <_txe_byte_pool_create+0xa4>
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003130:	b940      	cbnz	r0, 8003144 <_txe_byte_pool_create+0xa0>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8003132:	463b      	mov	r3, r7
 8003134:	4632      	mov	r2, r6
 8003136:	4641      	mov	r1, r8
 8003138:	4620      	mov	r0, r4
    }

    /* Return completion status.  */
    return(status);
}
 800313a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800313e:	f000 bd47 	b.w	8003bd0 <_tx_byte_pool_create>
        status =  TX_POOL_ERROR;
 8003142:	2002      	movs	r0, #2
}
 8003144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003148:	f3ef 8205 	mrs	r2, IPSR
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003154:	d2ec      	bcs.n	8003130 <_txe_byte_pool_create+0x8c>
                    status =  TX_CALLER_ERROR;
 8003156:	2013      	movs	r0, #19
    return(status);
 8003158:	e7f4      	b.n	8003144 <_txe_byte_pool_create+0xa0>
            status =  TX_SIZE_ERROR;
 800315a:	2005      	movs	r0, #5
 800315c:	e7f2      	b.n	8003144 <_txe_byte_pool_create+0xa0>
            status =  TX_PTR_ERROR;
 800315e:	2003      	movs	r0, #3
 8003160:	e7f0      	b.n	8003144 <_txe_byte_pool_create+0xa0>
 8003162:	bf00      	nop
 8003164:	20000f84 	.word	0x20000f84
 8003168:	20000fa0 	.word	0x20000fa0
 800316c:	200009dc 	.word	0x200009dc
 8003170:	20000a88 	.word	0x20000a88
 8003174:	2000000c 	.word	0x2000000c
 8003178:	200009d8 	.word	0x200009d8

0800317c <_txe_event_flags_create>:
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800317c:	2a28      	cmp	r2, #40	; 0x28
 800317e:	d140      	bne.n	8003202 <_txe_event_flags_create+0x86>
 8003180:	2800      	cmp	r0, #0
 8003182:	d03e      	beq.n	8003202 <_txe_event_flags_create+0x86>
{
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003186:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800318a:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800318c:	4f23      	ldr	r7, [pc, #140]	; (800321c <_txe_event_flags_create+0xa0>)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003194:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <_txe_event_flags_create+0xa4>)
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <_txe_event_flags_create+0xa8>)
        next_group =   _tx_event_flags_created_ptr;
 800319c:	6814      	ldr	r4, [r2, #0]
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800319e:	681a      	ldr	r2, [r3, #0]
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 80031a0:	42a0      	cmp	r0, r4
 80031a2:	d00a      	beq.n	80031ba <_txe_event_flags_create+0x3e>
 80031a4:	fab2 f382 	clz	r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	b113      	cbz	r3, 80031b2 <_txe_event_flags_create+0x36>
 80031ac:	e005      	b.n	80031ba <_txe_event_flags_create+0x3e>
 80031ae:	42a0      	cmp	r0, r4
 80031b0:	d003      	beq.n	80031ba <_txe_event_flags_create+0x3e>
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 80031b2:	3301      	adds	r3, #1
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 80031b4:	69a4      	ldr	r4, [r4, #24]
            if (group_ptr == next_group)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d3f9      	bcc.n	80031ae <_txe_event_flags_create+0x32>
 80031ba:	460e      	mov	r6, r1
 80031bc:	4605      	mov	r5, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80031be:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80031c2:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80031ca:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80031ce:	f001 fce9 	bl	8004ba4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 80031d2:	42a5      	cmp	r5, r4
 80031d4:	d01f      	beq.n	8003216 <_txe_event_flags_create+0x9a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <_txe_event_flags_create+0xac>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80031d8:	4814      	ldr	r0, [pc, #80]	; (800322c <_txe_event_flags_create+0xb0>)
 80031da:	681b      	ldr	r3, [r3, #0]
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80031dc:	4283      	cmp	r3, r0
 80031de:	bf0c      	ite	eq
 80031e0:	2013      	moveq	r0, #19
 80031e2:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80031e4:	f3ef 8205 	mrs	r2, IPSR
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <_txe_event_flags_create+0xb4>)
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	d00a      	beq.n	8003206 <_txe_event_flags_create+0x8a>
 80031f0:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80031fc:	d203      	bcs.n	8003206 <_txe_event_flags_create+0x8a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80031fe:	2013      	movs	r0, #19
        status =  _tx_event_flags_create(group_ptr, name_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8003200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status =  TX_GROUP_ERROR;
 8003202:	2006      	movs	r0, #6
}
 8003204:	4770      	bx	lr
    if (status == TX_SUCCESS)
 8003206:	2800      	cmp	r0, #0
 8003208:	d1fa      	bne.n	8003200 <_txe_event_flags_create+0x84>
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800320a:	4631      	mov	r1, r6
 800320c:	4628      	mov	r0, r5
}
 800320e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8003212:	f000 bd91 	b.w	8003d38 <_tx_event_flags_create>
        status =  TX_GROUP_ERROR;
 8003216:	2006      	movs	r0, #6
}
 8003218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800321a:	bf00      	nop
 800321c:	200009d8 	.word	0x200009d8
 8003220:	20000f70 	.word	0x20000f70
 8003224:	20000f94 	.word	0x20000f94
 8003228:	200009dc 	.word	0x200009dc
 800322c:	20000a88 	.word	0x20000a88
 8003230:	2000000c 	.word	0x2000000c

08003234 <_txe_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8003234:	b470      	push	{r4, r5, r6}
 8003236:	9c03      	ldr	r4, [sp, #12]

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8003238:	b118      	cbz	r0, 8003242 <_txe_event_flags_get+0xe>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800323a:	4d10      	ldr	r5, [pc, #64]	; (800327c <_txe_event_flags_get+0x48>)
 800323c:	6806      	ldr	r6, [r0, #0]
 800323e:	42ae      	cmp	r6, r5
 8003240:	d002      	beq.n	8003248 <_txe_event_flags_get+0x14>
        status =  TX_GROUP_ERROR;
 8003242:	2006      	movs	r0, #6
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8003244:	bc70      	pop	{r4, r5, r6}
 8003246:	4770      	bx	lr
    else if (actual_flags_ptr == TX_NULL)
 8003248:	b143      	cbz	r3, 800325c <_txe_event_flags_get+0x28>
        if (wait_option != TX_NO_WAIT)
 800324a:	b174      	cbz	r4, 800326a <_txe_event_flags_get+0x36>
 800324c:	f3ef 8505 	mrs	r5, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003250:	4e0b      	ldr	r6, [pc, #44]	; (8003280 <_txe_event_flags_get+0x4c>)
 8003252:	6836      	ldr	r6, [r6, #0]
 8003254:	4335      	orrs	r5, r6
 8003256:	d003      	beq.n	8003260 <_txe_event_flags_get+0x2c>
                status =  TX_WAIT_ERROR;
 8003258:	2004      	movs	r0, #4
 800325a:	e7f3      	b.n	8003244 <_txe_event_flags_get+0x10>
        status =  TX_PTR_ERROR;
 800325c:	2003      	movs	r0, #3
 800325e:	e7f1      	b.n	8003244 <_txe_event_flags_get+0x10>
                TX_THREAD_GET_CURRENT(current_thread)
 8003260:	4e08      	ldr	r6, [pc, #32]	; (8003284 <_txe_event_flags_get+0x50>)
                if (current_thread == &_tx_timer_thread)
 8003262:	4d09      	ldr	r5, [pc, #36]	; (8003288 <_txe_event_flags_get+0x54>)
 8003264:	6836      	ldr	r6, [r6, #0]
 8003266:	42ae      	cmp	r6, r5
 8003268:	d0f6      	beq.n	8003258 <_txe_event_flags_get+0x24>
        if (get_option > TX_AND_CLEAR)
 800326a:	2a03      	cmp	r2, #3
 800326c:	d803      	bhi.n	8003276 <_txe_event_flags_get+0x42>
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800326e:	9403      	str	r4, [sp, #12]
}
 8003270:	bc70      	pop	{r4, r5, r6}
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8003272:	f000 bd89 	b.w	8003d88 <_tx_event_flags_get>
            status =  TX_OPTION_ERROR;
 8003276:	2008      	movs	r0, #8
    return(status);
 8003278:	e7e4      	b.n	8003244 <_txe_event_flags_get+0x10>
 800327a:	bf00      	nop
 800327c:	4456444e 	.word	0x4456444e
 8003280:	2000000c 	.word	0x2000000c
 8003284:	200009dc 	.word	0x200009dc
 8003288:	20000a88 	.word	0x20000a88

0800328c <_txe_event_flags_set>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800328c:	b168      	cbz	r0, 80032aa <_txe_event_flags_set+0x1e>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <_txe_event_flags_set+0x28>)
{
 8003290:	b430      	push	{r4, r5}
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8003292:	6804      	ldr	r4, [r0, #0]
 8003294:	429c      	cmp	r4, r3
 8003296:	d105      	bne.n	80032a4 <_txe_event_flags_set+0x18>

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
        {

            if (set_option != TX_OR)
 8003298:	f032 0302 	bics.w	r3, r2, #2
 800329c:	d107      	bne.n	80032ae <_txe_event_flags_set+0x22>
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
    }

    /* Return completion status.  */
    return(status);
}
 800329e:	bc30      	pop	{r4, r5}
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 80032a0:	f000 bde4 	b.w	8003e6c <_tx_event_flags_set>
        status =  TX_GROUP_ERROR;
 80032a4:	2006      	movs	r0, #6
}
 80032a6:	bc30      	pop	{r4, r5}
 80032a8:	4770      	bx	lr
        status =  TX_GROUP_ERROR;
 80032aa:	2006      	movs	r0, #6
}
 80032ac:	4770      	bx	lr
                status =  TX_OPTION_ERROR;
 80032ae:	2008      	movs	r0, #8
}
 80032b0:	bc30      	pop	{r4, r5}
 80032b2:	4770      	bx	lr
 80032b4:	4456444e 	.word	0x4456444e

080032b8 <_txe_mutex_create>:
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80032b8:	b108      	cbz	r0, 80032be <_txe_mutex_create+0x6>
 80032ba:	2b34      	cmp	r3, #52	; 0x34
 80032bc:	d001      	beq.n	80032c2 <_txe_mutex_create+0xa>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80032be:	201c      	movs	r0, #28
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
    }

    /* Return completion status.  */
    return(status);
}
 80032c0:	4770      	bx	lr
{
 80032c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80032c6:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80032ca:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 80032cc:	4f29      	ldr	r7, [pc, #164]	; (8003374 <_txe_mutex_create+0xbc>)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80032d4:	f384 8810 	msr	PRIMASK, r4
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80032d8:	4c27      	ldr	r4, [pc, #156]	; (8003378 <_txe_mutex_create+0xc0>)
        next_mutex =   _tx_mutex_created_ptr;
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <_txe_mutex_create+0xc4>)
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80032dc:	6825      	ldr	r5, [r4, #0]
        next_mutex =   _tx_mutex_created_ptr;
 80032de:	681c      	ldr	r4, [r3, #0]
            if (mutex_ptr == next_mutex)
 80032e0:	b15d      	cbz	r5, 80032fa <_txe_mutex_create+0x42>
 80032e2:	1b03      	subs	r3, r0, r4
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	b113      	cbz	r3, 80032f2 <_txe_mutex_create+0x3a>
 80032ec:	e005      	b.n	80032fa <_txe_mutex_create+0x42>
 80032ee:	42ab      	cmp	r3, r5
 80032f0:	d203      	bcs.n	80032fa <_txe_mutex_create+0x42>
                next_mutex =  next_mutex -> tx_mutex_created_next;
 80032f2:	6a24      	ldr	r4, [r4, #32]
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80032f4:	3301      	adds	r3, #1
            if (mutex_ptr == next_mutex)
 80032f6:	42a0      	cmp	r0, r4
 80032f8:	d1f9      	bne.n	80032ee <_txe_mutex_create+0x36>
 80032fa:	4605      	mov	r5, r0
 80032fc:	4616      	mov	r6, r2
 80032fe:	4688      	mov	r8, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003300:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003304:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	3b01      	subs	r3, #1
 800330a:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800330c:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 8003310:	f001 fc48 	bl	8004ba4 <_tx_thread_system_preempt_check>
        if (mutex_ptr == next_mutex)
 8003314:	42a5      	cmp	r5, r4
 8003316:	d015      	beq.n	8003344 <_txe_mutex_create+0x8c>
                if (inherit != TX_NO_INHERIT)
 8003318:	2e01      	cmp	r6, #1
 800331a:	d81d      	bhi.n	8003358 <_txe_mutex_create+0xa0>
        TX_THREAD_GET_CURRENT(thread_ptr)
 800331c:	4a18      	ldr	r2, [pc, #96]	; (8003380 <_txe_mutex_create+0xc8>)
        if (thread_ptr == &_tx_timer_thread)
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <_txe_mutex_create+0xcc>)
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d01a      	beq.n	800335c <_txe_mutex_create+0xa4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003326:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <_txe_mutex_create+0xd0>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	d00b      	beq.n	800334a <_txe_mutex_create+0x92>
 8003332:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4313      	orrs	r3, r2
 800333a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800333e:	d204      	bcs.n	800334a <_txe_mutex_create+0x92>
            status =  TX_CALLER_ERROR;
 8003340:	2013      	movs	r0, #19
    return(status);
 8003342:	e000      	b.n	8003346 <_txe_mutex_create+0x8e>
        status =  TX_MUTEX_ERROR;
 8003344:	201c      	movs	r0, #28
}
 8003346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800334a:	4632      	mov	r2, r6
 800334c:	4641      	mov	r1, r8
 800334e:	4628      	mov	r0, r5
}
 8003350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8003354:	f000 bec6 	b.w	80040e4 <_tx_mutex_create>
                    status =  TX_INHERIT_ERROR;
 8003358:	201f      	movs	r0, #31
 800335a:	e7f4      	b.n	8003346 <_txe_mutex_create+0x8e>
 800335c:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <_txe_mutex_create+0xd0>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	d0eb      	beq.n	8003340 <_txe_mutex_create+0x88>
 8003368:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
 800336c:	2013      	movs	r0, #19
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	e7e9      	b.n	8003346 <_txe_mutex_create+0x8e>
 8003372:	bf00      	nop
 8003374:	200009d8 	.word	0x200009d8
 8003378:	20000f74 	.word	0x20000f74
 800337c:	20000f78 	.word	0x20000f78
 8003380:	200009dc 	.word	0x200009dc
 8003384:	20000a88 	.word	0x20000a88
 8003388:	2000000c 	.word	0x2000000c

0800338c <_txe_mutex_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800338c:	b118      	cbz	r0, 8003396 <_txe_mutex_get+0xa>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <_txe_mutex_get+0x58>)
 8003390:	6802      	ldr	r2, [r0, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d001      	beq.n	800339a <_txe_mutex_get+0xe>
        status =  TX_MUTEX_ERROR;
 8003396:	201c      	movs	r0, #28
        status =  _tx_mutex_get(mutex_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8003398:	4770      	bx	lr
{
 800339a:	b410      	push	{r4}
        if (wait_option != TX_NO_WAIT)
 800339c:	b981      	cbnz	r1, 80033c0 <_txe_mutex_get+0x34>
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <_txe_mutex_get+0x5c>)
 80033a0:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80033a4:	681c      	ldr	r4, [r3, #0]
 80033a6:	4322      	orrs	r2, r4
 80033a8:	d006      	beq.n	80033b8 <_txe_mutex_get+0x2c>
 80033aa:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80033b6:	d312      	bcc.n	80033de <_txe_mutex_get+0x52>
}
 80033b8:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 80033bc:	f000 bec2 	b.w	8004144 <_tx_mutex_get>
 80033c0:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <_txe_mutex_get+0x5c>)
 80033c6:	681c      	ldr	r4, [r3, #0]
 80033c8:	4322      	orrs	r2, r4
 80033ca:	d104      	bne.n	80033d6 <_txe_mutex_get+0x4a>
                TX_THREAD_GET_CURRENT(current_thread)
 80033cc:	4c07      	ldr	r4, [pc, #28]	; (80033ec <_txe_mutex_get+0x60>)
                if (current_thread == &_tx_timer_thread)
 80033ce:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <_txe_mutex_get+0x64>)
 80033d0:	6824      	ldr	r4, [r4, #0]
 80033d2:	4294      	cmp	r4, r2
 80033d4:	d1e4      	bne.n	80033a0 <_txe_mutex_get+0x14>
                status =  TX_WAIT_ERROR;
 80033d6:	2004      	movs	r0, #4
}
 80033d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033dc:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 80033de:	2013      	movs	r0, #19
    return(status);
 80033e0:	e7fa      	b.n	80033d8 <_txe_mutex_get+0x4c>
 80033e2:	bf00      	nop
 80033e4:	4d555445 	.word	0x4d555445
 80033e8:	2000000c 	.word	0x2000000c
 80033ec:	200009dc 	.word	0x200009dc
 80033f0:	20000a88 	.word	0x20000a88

080033f4 <_txe_mutex_put>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80033f4:	b190      	cbz	r0, 800341c <_txe_mutex_put+0x28>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <_txe_mutex_put+0x30>)
 80033f8:	6802      	ldr	r2, [r0, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d10e      	bne.n	800341c <_txe_mutex_put+0x28>
 80033fe:	f3ef 8305 	mrs	r3, IPSR
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <_txe_mutex_put+0x34>)
 8003404:	6811      	ldr	r1, [r2, #0]
 8003406:	430b      	orrs	r3, r1
 8003408:	d006      	beq.n	8003418 <_txe_mutex_put+0x24>
 800340a:	f3ef 8105 	mrs	r1, IPSR
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	430b      	orrs	r3, r1
 8003412:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003416:	d303      	bcc.n	8003420 <_txe_mutex_put+0x2c>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8003418:	f000 bf7e 	b.w	8004318 <_tx_mutex_put>
        status =  TX_MUTEX_ERROR;
 800341c:	201c      	movs	r0, #28
 800341e:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 8003420:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 8003422:	4770      	bx	lr
 8003424:	4d555445 	.word	0x4d555445
 8003428:	2000000c 	.word	0x2000000c

0800342c <_txe_queue_create>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800342c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003430:	e9dd 9408 	ldrd	r9, r4, [sp, #32]
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
    }
    
    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8003434:	2c3c      	cmp	r4, #60	; 0x3c
 8003436:	d136      	bne.n	80034a6 <_txe_queue_create+0x7a>
 8003438:	b3a8      	cbz	r0, 80034a6 <_txe_queue_create+0x7a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800343a:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800343e:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003440:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8003510 <_txe_queue_create+0xe4>
 8003444:	f8dc 4000 	ldr.w	r4, [ip]
 8003448:	3401      	adds	r4, #1
 800344a:	f8cc 4000 	str.w	r4, [ip]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800344e:	f385 8810 	msr	PRIMASK, r5
        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8003452:	4d2a      	ldr	r5, [pc, #168]	; (80034fc <_txe_queue_create+0xd0>)
        next_queue =   _tx_queue_created_ptr;
 8003454:	4c2a      	ldr	r4, [pc, #168]	; (8003500 <_txe_queue_create+0xd4>)
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8003456:	682e      	ldr	r6, [r5, #0]
        next_queue =   _tx_queue_created_ptr;
 8003458:	6825      	ldr	r5, [r4, #0]
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800345a:	b15e      	cbz	r6, 8003474 <_txe_queue_create+0x48>
 800345c:	1b44      	subs	r4, r0, r5
 800345e:	fab4 f484 	clz	r4, r4
 8003462:	0964      	lsrs	r4, r4, #5
 8003464:	b114      	cbz	r4, 800346c <_txe_queue_create+0x40>
 8003466:	e005      	b.n	8003474 <_txe_queue_create+0x48>
 8003468:	42a8      	cmp	r0, r5
 800346a:	d003      	beq.n	8003474 <_txe_queue_create+0x48>
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800346c:	3401      	adds	r4, #1
            }
            else
            {
        
                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800346e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
            if (queue_ptr == next_queue)
 8003470:	42b4      	cmp	r4, r6
 8003472:	d3f9      	bcc.n	8003468 <_txe_queue_create+0x3c>
 8003474:	461f      	mov	r7, r3
 8003476:	4616      	mov	r6, r2
 8003478:	4688      	mov	r8, r1
 800347a:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800347c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003480:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003482:	f8dc 3000 	ldr.w	r3, [ip]
 8003486:	3b01      	subs	r3, #1
 8003488:	f8cc 3000 	str.w	r3, [ip]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800348c:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003490:	f001 fb88 	bl	8004ba4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8003494:	42ac      	cmp	r4, r5
 8003496:	d006      	beq.n	80034a6 <_txe_queue_create+0x7a>
            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8003498:	b35f      	cbz	r7, 80034f2 <_txe_queue_create+0xc6>
            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
        }
    
        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800349a:	1e73      	subs	r3, r6, #1
 800349c:	2b0f      	cmp	r3, #15
 800349e:	d905      	bls.n	80034ac <_txe_queue_create+0x80>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80034a0:	2005      	movs	r0, #5
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
    }

    /* Return completion status.  */
    return(status);
}
 80034a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        status =  TX_QUEUE_ERROR;
 80034a6:	2009      	movs	r0, #9
}
 80034a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80034ac:	ebb6 0f99 	cmp.w	r6, r9, lsr #2
 80034b0:	d8f6      	bhi.n	80034a0 <_txe_queue_create+0x74>
            TX_THREAD_GET_CURRENT(thread_ptr)
 80034b2:	4a14      	ldr	r2, [pc, #80]	; (8003504 <_txe_queue_create+0xd8>)
            if (thread_ptr == &_tx_timer_thread)
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <_txe_queue_create+0xdc>)
 80034b6:	6810      	ldr	r0, [r2, #0]
                status =  TX_CALLER_ERROR;
 80034b8:	4298      	cmp	r0, r3
 80034ba:	bf0c      	ite	eq
 80034bc:	2013      	moveq	r0, #19
 80034be:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80034c0:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <_txe_queue_create+0xe0>)
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	d006      	beq.n	80034da <_txe_queue_create+0xae>
 80034cc:	f3ef 8205 	mrs	r2, IPSR
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80034d8:	d30d      	bcc.n	80034f6 <_txe_queue_create+0xca>
    if (status == TX_SUCCESS)
 80034da:	2800      	cmp	r0, #0
 80034dc:	d1e4      	bne.n	80034a8 <_txe_queue_create+0x7c>
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80034de:	f8cd 9020 	str.w	r9, [sp, #32]
 80034e2:	463b      	mov	r3, r7
 80034e4:	4632      	mov	r2, r6
 80034e6:	4641      	mov	r1, r8
 80034e8:	4620      	mov	r0, r4
}
 80034ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80034ee:	f001 b81d 	b.w	800452c <_tx_queue_create>
            status =  TX_PTR_ERROR;
 80034f2:	2003      	movs	r0, #3
 80034f4:	e7d8      	b.n	80034a8 <_txe_queue_create+0x7c>
                    status =  TX_CALLER_ERROR;
 80034f6:	2013      	movs	r0, #19
    return(status);
 80034f8:	e7d6      	b.n	80034a8 <_txe_queue_create+0x7c>
 80034fa:	bf00      	nop
 80034fc:	20000f7c 	.word	0x20000f7c
 8003500:	20000f9c 	.word	0x20000f9c
 8003504:	200009dc 	.word	0x200009dc
 8003508:	20000a88 	.word	0x20000a88
 800350c:	2000000c 	.word	0x2000000c
 8003510:	200009d8 	.word	0x200009d8

08003514 <_txe_queue_receive>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8003514:	b1e8      	cbz	r0, 8003552 <_txe_queue_receive+0x3e>
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <_txe_queue_receive+0x48>)
{
 8003518:	b410      	push	{r4}
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800351a:	6804      	ldr	r4, [r0, #0]
 800351c:	429c      	cmp	r4, r3
 800351e:	d110      	bne.n	8003542 <_txe_queue_receive+0x2e>
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8003520:	b1c9      	cbz	r1, 8003556 <_txe_queue_receive+0x42>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8003522:	b152      	cbz	r2, 800353a <_txe_queue_receive+0x26>
 8003524:	f3ef 8305 	mrs	r3, IPSR
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003528:	4c0d      	ldr	r4, [pc, #52]	; (8003560 <_txe_queue_receive+0x4c>)
 800352a:	6824      	ldr	r4, [r4, #0]
 800352c:	4323      	orrs	r3, r4
 800352e:	d10c      	bne.n	800354a <_txe_queue_receive+0x36>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8003530:	4c0c      	ldr	r4, [pc, #48]	; (8003564 <_txe_queue_receive+0x50>)

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <_txe_queue_receive+0x54>)
 8003534:	6824      	ldr	r4, [r4, #0]
 8003536:	429c      	cmp	r4, r3
 8003538:	d007      	beq.n	800354a <_txe_queue_receive+0x36>
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 800353a:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800353e:	f001 b82b 	b.w	8004598 <_tx_queue_receive>
        status =  TX_QUEUE_ERROR;
 8003542:	2009      	movs	r0, #9
}
 8003544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003548:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 800354a:	2004      	movs	r0, #4
}
 800354c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003550:	4770      	bx	lr
        status =  TX_QUEUE_ERROR;
 8003552:	2009      	movs	r0, #9
}
 8003554:	4770      	bx	lr
        status =  TX_PTR_ERROR;
 8003556:	2003      	movs	r0, #3
 8003558:	e7f4      	b.n	8003544 <_txe_queue_receive+0x30>
 800355a:	bf00      	nop
 800355c:	51554555 	.word	0x51554555
 8003560:	2000000c 	.word	0x2000000c
 8003564:	200009dc 	.word	0x200009dc
 8003568:	20000a88 	.word	0x20000a88

0800356c <_txe_queue_send>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800356c:	b1e8      	cbz	r0, 80035aa <_txe_queue_send+0x3e>
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <_txe_queue_send+0x48>)
{
 8003570:	b410      	push	{r4}
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8003572:	6804      	ldr	r4, [r0, #0]
 8003574:	429c      	cmp	r4, r3
 8003576:	d110      	bne.n	800359a <_txe_queue_send+0x2e>
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8003578:	b1c9      	cbz	r1, 80035ae <_txe_queue_send+0x42>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800357a:	b152      	cbz	r2, 8003592 <_txe_queue_send+0x26>
 800357c:	f3ef 8305 	mrs	r3, IPSR
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003580:	4c0d      	ldr	r4, [pc, #52]	; (80035b8 <_txe_queue_send+0x4c>)
 8003582:	6824      	ldr	r4, [r4, #0]
 8003584:	4323      	orrs	r3, r4
 8003586:	d10c      	bne.n	80035a2 <_txe_queue_send+0x36>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
    
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8003588:	4c0c      	ldr	r4, [pc, #48]	; (80035bc <_txe_queue_send+0x50>)

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <_txe_queue_send+0x54>)
 800358c:	6824      	ldr	r4, [r4, #0]
 800358e:	429c      	cmp	r4, r3
 8003590:	d007      	beq.n	80035a2 <_txe_queue_send+0x36>
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8003592:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8003596:	f001 b8f7 	b.w	8004788 <_tx_queue_send>
        status =  TX_QUEUE_ERROR;
 800359a:	2009      	movs	r0, #9
}
 800359c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a0:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 80035a2:	2004      	movs	r0, #4
}
 80035a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a8:	4770      	bx	lr
        status =  TX_QUEUE_ERROR;
 80035aa:	2009      	movs	r0, #9
}
 80035ac:	4770      	bx	lr
        status =  TX_PTR_ERROR;
 80035ae:	2003      	movs	r0, #3
 80035b0:	e7f4      	b.n	800359c <_txe_queue_send+0x30>
 80035b2:	bf00      	nop
 80035b4:	51554555 	.word	0x51554555
 80035b8:	2000000c 	.word	0x2000000c
 80035bc:	200009dc 	.word	0x200009dc
 80035c0:	20000a88 	.word	0x20000a88

080035c4 <_txe_semaphore_create>:
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d100      	bne.n	80035ca <_txe_semaphore_create+0x6>
 80035c8:	b908      	cbnz	r0, 80035ce <_txe_semaphore_create+0xa>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80035ca:	200c      	movs	r0, #12
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
    }

    /* Return completion status.  */
    return(status);
}
 80035cc:	4770      	bx	lr
{
 80035ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80035d2:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80035d6:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 80035d8:	4e21      	ldr	r6, [pc, #132]	; (8003660 <_txe_semaphore_create+0x9c>)
 80035da:	6833      	ldr	r3, [r6, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80035e0:	f384 8810 	msr	PRIMASK, r4
        next_semaphore =  _tx_semaphore_created_ptr;
 80035e4:	4c1f      	ldr	r4, [pc, #124]	; (8003664 <_txe_semaphore_create+0xa0>)
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <_txe_semaphore_create+0xa4>)
        next_semaphore =  _tx_semaphore_created_ptr;
 80035e8:	6824      	ldr	r4, [r4, #0]
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80035ea:	681d      	ldr	r5, [r3, #0]
            if (semaphore_ptr == next_semaphore)
 80035ec:	42a0      	cmp	r0, r4
 80035ee:	d00a      	beq.n	8003606 <_txe_semaphore_create+0x42>
 80035f0:	fab5 f385 	clz	r3, r5
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	b113      	cbz	r3, 80035fe <_txe_semaphore_create+0x3a>
 80035f8:	e005      	b.n	8003606 <_txe_semaphore_create+0x42>
 80035fa:	42a0      	cmp	r0, r4
 80035fc:	d003      	beq.n	8003606 <_txe_semaphore_create+0x42>
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80035fe:	3301      	adds	r3, #1
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8003600:	6964      	ldr	r4, [r4, #20]
            if (semaphore_ptr == next_semaphore)
 8003602:	42ab      	cmp	r3, r5
 8003604:	d3f9      	bcc.n	80035fa <_txe_semaphore_create+0x36>
 8003606:	4615      	mov	r5, r2
 8003608:	4688      	mov	r8, r1
 800360a:	4607      	mov	r7, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800360c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003610:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8003612:	6833      	ldr	r3, [r6, #0]
 8003614:	3b01      	subs	r3, #1
 8003616:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003618:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 800361c:	f001 fac2 	bl	8004ba4 <_tx_thread_system_preempt_check>
        if (semaphore_ptr == next_semaphore)
 8003620:	42a7      	cmp	r7, r4
 8003622:	d018      	beq.n	8003656 <_txe_semaphore_create+0x92>
            TX_THREAD_GET_CURRENT(thread_ptr)
 8003624:	4a11      	ldr	r2, [pc, #68]	; (800366c <_txe_semaphore_create+0xa8>)
            if (thread_ptr == &_tx_timer_thread)
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <_txe_semaphore_create+0xac>)
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d016      	beq.n	800365c <_txe_semaphore_create+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800362e:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <_txe_semaphore_create+0xb0>)
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	d006      	beq.n	8003648 <_txe_semaphore_create+0x84>
 800363a:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4313      	orrs	r3, r2
 8003642:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003646:	d309      	bcc.n	800365c <_txe_semaphore_create+0x98>
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8003648:	462a      	mov	r2, r5
 800364a:	4641      	mov	r1, r8
 800364c:	4638      	mov	r0, r7
}
 800364e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8003652:	f001 b93f 	b.w	80048d4 <_tx_semaphore_create>
        status =  TX_SEMAPHORE_ERROR;
 8003656:	200c      	movs	r0, #12
}
 8003658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                status =  TX_CALLER_ERROR;
 800365c:	2013      	movs	r0, #19
    return(status);
 800365e:	e7fb      	b.n	8003658 <_txe_semaphore_create+0x94>
 8003660:	200009d8 	.word	0x200009d8
 8003664:	20000f80 	.word	0x20000f80
 8003668:	20000f90 	.word	0x20000f90
 800366c:	200009dc 	.word	0x200009dc
 8003670:	20000a88 	.word	0x20000a88
 8003674:	2000000c 	.word	0x2000000c

08003678 <_txe_semaphore_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8003678:	b188      	cbz	r0, 800369e <_txe_semaphore_get+0x26>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <_txe_semaphore_get+0x30>)
 800367c:	6802      	ldr	r2, [r0, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d10d      	bne.n	800369e <_txe_semaphore_get+0x26>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8003682:	b151      	cbz	r1, 800369a <_txe_semaphore_get+0x22>
 8003684:	f3ef 8305 	mrs	r3, IPSR
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003688:	4a08      	ldr	r2, [pc, #32]	; (80036ac <_txe_semaphore_get+0x34>)
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	4313      	orrs	r3, r2
 800368e:	d108      	bne.n	80036a2 <_txe_semaphore_get+0x2a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8003690:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <_txe_semaphore_get+0x38>)

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <_txe_semaphore_get+0x3c>)
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d003      	beq.n	80036a2 <_txe_semaphore_get+0x2a>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800369a:	f001 b945 	b.w	8004928 <_tx_semaphore_get>
        status =  TX_SEMAPHORE_ERROR;
 800369e:	200c      	movs	r0, #12
 80036a0:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 80036a2:	2004      	movs	r0, #4
    }

    /* Return completion status.  */
    return(status);
}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	53454d41 	.word	0x53454d41
 80036ac:	2000000c 	.word	0x2000000c
 80036b0:	200009dc 	.word	0x200009dc
 80036b4:	20000a88 	.word	0x20000a88

080036b8 <_txe_semaphore_put>:

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80036b8:	b118      	cbz	r0, 80036c2 <_txe_semaphore_put+0xa>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80036ba:	6802      	ldr	r2, [r0, #0]
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <_txe_semaphore_put+0x14>)
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <_txe_semaphore_put+0xe>
        status =  _tx_semaphore_put(semaphore_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 80036c2:	200c      	movs	r0, #12
 80036c4:	4770      	bx	lr
        status =  _tx_semaphore_put(semaphore_ptr);
 80036c6:	f001 b971 	b.w	80049ac <_tx_semaphore_put>
 80036ca:	bf00      	nop
 80036cc:	53454d41 	.word	0x53454d41

080036d0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80036d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d4:	b085      	sub	sp, #20
 80036d6:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
 80036da:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 80036de:	9401      	str	r4, [sp, #4]
 80036e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80036e2:	9403      	str	r4, [sp, #12]
 80036e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80036e6:	9402      	str	r4, [sp, #8]
 80036e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d079      	beq.n	80037e2 <_txe_thread_create+0x112>
 80036ee:	2cc8      	cmp	r4, #200	; 0xc8
 80036f0:	d177      	bne.n	80037e2 <_txe_thread_create+0x112>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80036f2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80036f6:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80036f8:	f8df e140 	ldr.w	lr, [pc, #320]	; 800383c <_txe_thread_create+0x16c>
 80036fc:	f8de 4000 	ldr.w	r4, [lr]
 8003700:	3401      	adds	r4, #1
 8003702:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003706:	f385 8810 	msr	PRIMASK, r5
        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
        next_thread =  _tx_thread_created_ptr;
 800370a:	4c47      	ldr	r4, [pc, #284]	; (8003828 <_txe_thread_create+0x158>)
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800370c:	f108 3cff 	add.w	ip, r8, #4294967295
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003710:	4d46      	ldr	r5, [pc, #280]	; (800382c <_txe_thread_create+0x15c>)
        next_thread =  _tx_thread_created_ptr;
 8003712:	6824      	ldr	r4, [r4, #0]
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8003714:	44bc      	add	ip, r7
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003716:	f8d5 b000 	ldr.w	fp, [r5]
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800371a:	1b05      	subs	r5, r0, r4
 800371c:	fab5 f585 	clz	r5, r5
 8003720:	096d      	lsrs	r5, r5, #5
 8003722:	f1bb 0f00 	cmp.w	fp, #0
 8003726:	bf08      	it	eq
 8003728:	2501      	moveq	r5, #1
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800372a:	b985      	cbnz	r5, 800374e <_txe_thread_create+0x7e>
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800372c:	469a      	mov	sl, r3
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800372e:	68e6      	ldr	r6, [r4, #12]
 8003730:	42be      	cmp	r6, r7
 8003732:	d865      	bhi.n	8003800 <_txe_thread_create+0x130>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8003734:	6923      	ldr	r3, [r4, #16]
 8003736:	42bb      	cmp	r3, r7
 8003738:	d962      	bls.n	8003800 <_txe_thread_create+0x130>
                    break_flag =  TX_TRUE;
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800373a:	4566      	cmp	r6, ip
 800373c:	d803      	bhi.n	8003746 <_txe_thread_create+0x76>
 800373e:	2601      	movs	r6, #1
                    stack_start =  TX_NULL;
 8003740:	2700      	movs	r7, #0
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8003742:	4563      	cmp	r3, ip
 8003744:	d951      	bls.n	80037ea <_txe_thread_create+0x11a>
 8003746:	4653      	mov	r3, sl
                    break_flag =  TX_TRUE;
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8003748:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
                    stack_start =  TX_NULL;
 800374c:	2700      	movs	r7, #0
 800374e:	4605      	mov	r5, r0
 8003750:	469a      	mov	sl, r3
 8003752:	4616      	mov	r6, r2
 8003754:	468b      	mov	fp, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003756:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800375a:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800375c:	f8de 3000 	ldr.w	r3, [lr]
 8003760:	3b01      	subs	r3, #1
 8003762:	f8ce 3000 	str.w	r3, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003766:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800376a:	f001 fa1b 	bl	8004ba4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800376e:	42a5      	cmp	r5, r4
 8003770:	d037      	beq.n	80037e2 <_txe_thread_create+0x112>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8003772:	2e00      	cmp	r6, #0
 8003774:	d04c      	beq.n	8003810 <_txe_thread_create+0x140>
 8003776:	2f00      	cmp	r7, #0
 8003778:	d04a      	beq.n	8003810 <_txe_thread_create+0x140>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800377a:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
 800377e:	d945      	bls.n	800380c <_txe_thread_create+0x13c>
            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8003780:	f1b9 0f1f 	cmp.w	r9, #31
 8003784:	d848      	bhi.n	8003818 <_txe_thread_create+0x148>
            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8003786:	9b01      	ldr	r3, [sp, #4]
 8003788:	4599      	cmp	r9, r3
 800378a:	d34b      	bcc.n	8003824 <_txe_thread_create+0x154>
            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800378c:	9b02      	ldr	r3, [sp, #8]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d844      	bhi.n	800381c <_txe_thread_create+0x14c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <_txe_thread_create+0x160>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <_txe_thread_create+0x164>)
 8003796:	6810      	ldr	r0, [r2, #0]
    status =  TX_SUCCESS;
 8003798:	4298      	cmp	r0, r3
 800379a:	bf0c      	ite	eq
 800379c:	2013      	moveq	r0, #19
 800379e:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80037a0:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <_txe_thread_create+0x168>)
 80037a6:	6819      	ldr	r1, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	d006      	beq.n	80037ba <_txe_thread_create+0xea>
 80037ac:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80037b8:	d332      	bcc.n	8003820 <_txe_thread_create+0x150>
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80037ba:	b998      	cbnz	r0, 80037e4 <_txe_thread_create+0x114>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80037bc:	9b02      	ldr	r3, [sp, #8]
 80037be:	4628      	mov	r0, r5
 80037c0:	9a03      	ldr	r2, [sp, #12]
 80037c2:	9901      	ldr	r1, [sp, #4]
 80037c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80037c6:	4653      	mov	r3, sl
 80037c8:	9212      	str	r2, [sp, #72]	; 0x48
 80037ca:	4632      	mov	r2, r6
 80037cc:	9111      	str	r1, [sp, #68]	; 0x44
 80037ce:	4659      	mov	r1, fp
 80037d0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80037d4:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
}
 80037d8:	b005      	add	sp, #20
 80037da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80037de:	f001 b917 	b.w	8004a10 <_tx_thread_create>
        status =  TX_THREAD_ERROR;
 80037e2:	200e      	movs	r0, #14
}
 80037e4:	b005      	add	sp, #20
 80037e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            next_thread =  next_thread -> tx_thread_created_next;
 80037ea:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80037ee:	3501      	adds	r5, #1
            if (break_flag == TX_TRUE)
 80037f0:	42a0      	cmp	r0, r4
 80037f2:	bf18      	it	ne
 80037f4:	455d      	cmpne	r5, fp
 80037f6:	d201      	bcs.n	80037fc <_txe_thread_create+0x12c>
 80037f8:	2e00      	cmp	r6, #0
 80037fa:	d098      	beq.n	800372e <_txe_thread_create+0x5e>
 80037fc:	4653      	mov	r3, sl
 80037fe:	e7a6      	b.n	800374e <_txe_thread_create+0x7e>
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8003800:	4566      	cmp	r6, ip
 8003802:	f04f 0600 	mov.w	r6, #0
 8003806:	d8f0      	bhi.n	80037ea <_txe_thread_create+0x11a>
 8003808:	6923      	ldr	r3, [r4, #16]
 800380a:	e79a      	b.n	8003742 <_txe_thread_create+0x72>
            status =  TX_SIZE_ERROR;
 800380c:	2005      	movs	r0, #5
 800380e:	e7e9      	b.n	80037e4 <_txe_thread_create+0x114>
            status =  TX_PTR_ERROR;
 8003810:	2003      	movs	r0, #3
}
 8003812:	b005      	add	sp, #20
 8003814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            status =  TX_PRIORITY_ERROR;
 8003818:	200f      	movs	r0, #15
 800381a:	e7e3      	b.n	80037e4 <_txe_thread_create+0x114>
            status =  TX_START_ERROR;
 800381c:	2010      	movs	r0, #16
 800381e:	e7e1      	b.n	80037e4 <_txe_thread_create+0x114>
                    status =  TX_CALLER_ERROR;
 8003820:	2013      	movs	r0, #19
    return(status);
 8003822:	e7df      	b.n	80037e4 <_txe_thread_create+0x114>
            status =  TX_THRESH_ERROR;
 8003824:	2018      	movs	r0, #24
 8003826:	e7dd      	b.n	80037e4 <_txe_thread_create+0x114>
 8003828:	200009c8 	.word	0x200009c8
 800382c:	200009d0 	.word	0x200009d0
 8003830:	200009dc 	.word	0x200009dc
 8003834:	20000a88 	.word	0x20000a88
 8003838:	2000000c 	.word	0x2000000c
 800383c:	200009d8 	.word	0x200009d8

08003840 <_tx_block_allocate>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003842:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003846:	b672      	cpsid	i
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Determine if there is an available block.  */
    if (pool_ptr -> tx_block_pool_available != ((UINT) 0))
 8003848:	6883      	ldr	r3, [r0, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d131      	bne.n	80038b2 <_tx_block_allocate+0x72>
    else
    {

        /* Default the return pointer to NULL.  */
        return_ptr =   TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
        *return_ptr =  TX_NULL;
 800384e:	600b      	str	r3, [r1, #0]

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8003850:	b35a      	cbz	r2, 80038aa <_tx_block_allocate+0x6a>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <_tx_block_allocate+0x94>)
 8003854:	681c      	ldr	r4, [r3, #0]
 8003856:	bb44      	cbnz	r4, 80038aa <_tx_block_allocate+0x6a>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_block_pool_performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8003858:	4c1f      	ldr	r4, [pc, #124]	; (80038d8 <_tx_block_allocate+0x98>)
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
 800385a:	6a47      	ldr	r7, [r0, #36]	; 0x24
                TX_THREAD_GET_CURRENT(thread_ptr)
 800385c:	6824      	ldr	r4, [r4, #0]
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_block_pool_cleanup);
 800385e:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80038dc <_tx_block_allocate+0x9c>
            
                /* Increment the number of suspended threads.  */
                (pool_ptr -> tx_block_pool_suspended_count)++;
 8003862:	f107 0c01 	add.w	ip, r7, #1
                thread_ptr -> tx_thread_suspension_sequence++;
 8003866:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800386a:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 800386c:	3601      	adds	r6, #1
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) block_ptr;
 800386e:	67e1      	str	r1, [r4, #124]	; 0x7c
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_block_pool_cleanup);
 8003870:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
                thread_ptr -> tx_thread_suspension_sequence++;
 8003874:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
                (pool_ptr -> tx_block_pool_suspended_count)++;
 8003878:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800387c:	b32f      	cbz	r7, 80038ca <_tx_block_allocate+0x8a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_block_pool_suspension_list;
 800387e:	6a01      	ldr	r1, [r0, #32]
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003880:	6f48      	ldr	r0, [r1, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8003882:	e9c4 101c 	strd	r1, r0, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003886:	6704      	str	r4, [r0, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8003888:	674c      	str	r4, [r1, #116]	; 0x74

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800388a:	6819      	ldr	r1, [r3, #0]
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800388c:	2001      	movs	r0, #1
                thread_ptr -> tx_thread_state =       TX_BLOCK_MEMORY;
 800388e:	2608      	movs	r6, #8
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003890:	64e2      	str	r2, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 8003892:	4401      	add	r1, r0
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003894:	63a0      	str	r0, [r4, #56]	; 0x38
                thread_ptr -> tx_thread_state =       TX_BLOCK_MEMORY;
 8003896:	6326      	str	r6, [r4, #48]	; 0x30
                _tx_thread_preempt_disable++;
 8003898:	6019      	str	r1, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800389a:	f385 8810 	msr	PRIMASK, r5

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff f91e 	bl	8002ae0 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80038a4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        }
    }

    /* Return completion status.  */
    return(status);
}
 80038a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038aa:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NO_MEMORY;
 80038ae:	2010      	movs	r0, #16
}
 80038b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        work_ptr =  pool_ptr -> tx_block_pool_available_list;
 80038b2:	6902      	ldr	r2, [r0, #16]
        pool_ptr -> tx_block_pool_available--;
 80038b4:	3b01      	subs	r3, #1
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80038b6:	1d14      	adds	r4, r2, #4
        pool_ptr -> tx_block_pool_available--;
 80038b8:	6083      	str	r3, [r0, #8]
        *return_ptr =  temp_ptr;
 80038ba:	600c      	str	r4, [r1, #0]
        pool_ptr -> tx_block_pool_available_list =  *next_block_ptr;
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	6103      	str	r3, [r0, #16]
        *next_block_ptr =  temp_ptr;
 80038c0:	6010      	str	r0, [r2, #0]
 80038c2:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 80038c6:	2000      	movs	r0, #0
}
 80038c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pool_ptr -> tx_block_pool_suspension_list =     thread_ptr;
 80038ca:	6204      	str	r4, [r0, #32]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80038cc:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 80038d0:	e7db      	b.n	800388a <_tx_block_allocate+0x4a>
 80038d2:	bf00      	nop
 80038d4:	200009d8 	.word	0x200009d8
 80038d8:	200009dc 	.word	0x200009dc
 80038dc:	080038e1 	.word	0x080038e1

080038e0 <_tx_block_pool_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_block_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80038e0:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80038e2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80038e6:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the block pool.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_block_pool_cleanup))
 80038e8:	4a1a      	ldr	r2, [pc, #104]	; (8003954 <_tx_block_pool_cleanup+0x74>)
 80038ea:	6e84      	ldr	r4, [r0, #104]	; 0x68
 80038ec:	4294      	cmp	r4, r2
 80038ee:	d002      	beq.n	80038f6 <_tx_block_pool_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80038f0:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80038f6:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 80038fa:	428a      	cmp	r2, r1
 80038fc:	d1f8      	bne.n	80038f0 <_tx_block_pool_cleanup+0x10>
            pool_ptr =  TX_VOID_TO_BLOCK_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80038fe:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (pool_ptr != TX_NULL)
 8003900:	2a00      	cmp	r2, #0
 8003902:	d0f5      	beq.n	80038f0 <_tx_block_pool_cleanup+0x10>
                if (pool_ptr -> tx_block_pool_id == TX_BLOCK_POOL_ID)
 8003904:	4914      	ldr	r1, [pc, #80]	; (8003958 <_tx_block_pool_cleanup+0x78>)
 8003906:	6814      	ldr	r4, [r2, #0]
 8003908:	428c      	cmp	r4, r1
 800390a:	d1f1      	bne.n	80038f0 <_tx_block_pool_cleanup+0x10>
                    if (pool_ptr -> tx_block_pool_suspended_count != TX_NO_SUSPENSIONS)
 800390c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800390e:	2900      	cmp	r1, #0
 8003910:	d0ee      	beq.n	80038f0 <_tx_block_pool_cleanup+0x10>
                        pool_ptr -> tx_block_pool_suspended_count--;
 8003912:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003914:	2400      	movs	r4, #0
 8003916:	6684      	str	r4, [r0, #104]	; 0x68
                        pool_ptr -> tx_block_pool_suspended_count--;
 8003918:	6251      	str	r1, [r2, #36]	; 0x24
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800391a:	b1c1      	cbz	r1, 800394e <_tx_block_pool_cleanup+0x6e>
                            if (pool_ptr -> tx_block_pool_suspension_list == thread_ptr)
 800391c:	6a15      	ldr	r5, [r2, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800391e:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (pool_ptr -> tx_block_pool_suspension_list == thread_ptr)
 8003922:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8003924:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8003926:	6721      	str	r1, [r4, #112]	; 0x70
                            if (pool_ptr -> tx_block_pool_suspension_list == thread_ptr)
 8003928:	d011      	beq.n	800394e <_tx_block_pool_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_BLOCK_MEMORY)
 800392a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800392c:	2a08      	cmp	r2, #8
 800392e:	d1df      	bne.n	80038f0 <_tx_block_pool_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 8003930:	490a      	ldr	r1, [pc, #40]	; (800395c <_tx_block_pool_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8003932:	2410      	movs	r4, #16
                            _tx_thread_preempt_disable++;
 8003934:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8003936:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800393a:	3201      	adds	r2, #1
 800393c:	600a      	str	r2, [r1, #0]
 800393e:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8003942:	f001 f94d 	bl	8004be0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800394a:	b672      	cpsid	i
 800394c:	e7d0      	b.n	80038f0 <_tx_block_pool_cleanup+0x10>
                                pool_ptr -> tx_block_pool_suspension_list =     next_thread;
 800394e:	6211      	str	r1, [r2, #32]
 8003950:	e7eb      	b.n	800392a <_tx_block_pool_cleanup+0x4a>
 8003952:	bf00      	nop
 8003954:	080038e1 	.word	0x080038e1
 8003958:	424c4f43 	.word	0x424c4f43
 800395c:	200009d8 	.word	0x200009d8

08003960 <_tx_block_pool_create>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size)
{
 8003960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003964:	4614      	mov	r4, r2
 8003966:	460d      	mov	r5, r1
TX_BLOCK_POOL       *next_pool;
TX_BLOCK_POOL       *previous_pool;


    /* Initialize block pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BLOCK_POOL)));
 8003968:	2230      	movs	r2, #48	; 0x30
 800396a:	2100      	movs	r1, #0
{
 800396c:	4680      	mov	r8, r0
 800396e:	4699      	mov	r9, r3
 8003970:	9e08      	ldr	r6, [sp, #32]
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BLOCK_POOL)));
 8003972:	f001 fbdb 	bl	800512c <memset>

    /* Round the block size up to something that is evenly divisible by
       an ALIGN_TYPE (typically this is a 32-bit ULONG). This helps guarantee proper alignment.  */
    block_size =  (((block_size + (sizeof(ALIGN_TYPE))) - ((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003976:	1ce2      	adds	r2, r4, #3
    /* Round the pool size down to something that is evenly divisible by 
       an ALIGN_TYPE (typically this is a 32-bit ULONG).  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));

    /* Setup the basic block pool fields.  */
    pool_ptr -> tx_block_pool_name =             name_ptr;
 8003978:	f8c8 5004 	str.w	r5, [r8, #4]
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800397c:	f026 0603 	bic.w	r6, r6, #3
    pool_ptr -> tx_block_pool_start =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003980:	f8c8 9014 	str.w	r9, [r8, #20]
    block_size =  (((block_size + (sizeof(ALIGN_TYPE))) - ((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003984:	f022 0203 	bic.w	r2, r2, #3
    pool_ptr -> tx_block_pool_size =             pool_size;
 8003988:	f8c8 6018 	str.w	r6, [r8, #24]
    pool_ptr -> tx_block_pool_block_size =       (UINT) block_size;
    
    /* Calculate the total number of blocks.  */
    total_blocks =  pool_size/(block_size + (sizeof(UCHAR *)));
 800398c:	1d15      	adds	r5, r2, #4
    pool_ptr -> tx_block_pool_block_size =       (UINT) block_size;
 800398e:	f8c8 201c 	str.w	r2, [r8, #28]
    total_blocks =  pool_size/(block_size + (sizeof(UCHAR *)));
 8003992:	fbb6 f6f5 	udiv	r6, r6, r5

    /* Walk through the pool area, setting up the available block list.  */
    blocks =            ((UINT) 0);
    block_ptr =         TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    next_block_ptr =    TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 8003996:	eb09 0305 	add.w	r3, r9, r5
    while(blocks < (UINT) total_blocks)
 800399a:	b3ae      	cbz	r6, 8003a08 <_tx_block_pool_create+0xa8>
 800399c:	2100      	movs	r1, #0
    next_block_ptr =    TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 800399e:	4618      	mov	r0, r3
    blocks =            ((UINT) 0);
 80039a0:	460f      	mov	r7, r1
 80039a2:	e000      	b.n	80039a6 <_tx_block_pool_create+0x46>
 80039a4:	4627      	mov	r7, r4
    {

        /* Yes, we have another block.  Increment the block count.  */
        blocks++;
 80039a6:	1c7c      	adds	r4, r7, #1

        /* Setup the link to the next block.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
        *block_link_ptr =  next_block_ptr;
 80039a8:	f849 0001 	str.w	r0, [r9, r1]

        /* Advance to the next block.  */
        block_ptr =   next_block_ptr;

        /* Update the next block pointer.  */
        next_block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 80039ac:	4428      	add	r0, r5
 80039ae:	4429      	add	r1, r5
    while(blocks < (UINT) total_blocks)
 80039b0:	42a6      	cmp	r6, r4
 80039b2:	d1f7      	bne.n	80039a4 <_tx_block_pool_create+0x44>
    /* Quickly check to make sure at least one block is in the pool.  */
    if (blocks != ((UINT) 0))
    {

        /* Backup to the last block in the pool.  */
        block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr,(block_size + (sizeof(UCHAR *))));
 80039b4:	1a9a      	subs	r2, r3, r2
 80039b6:	fb07 f505 	mul.w	r5, r7, r5

        /* Set the last block's forward pointer to NULL.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
        *block_link_ptr =  TX_NULL;
 80039ba:	2300      	movs	r3, #0
    pool_ptr -> tx_block_pool_available =  blocks;
 80039bc:	f8c8 6008 	str.w	r6, [r8, #8]
        *block_link_ptr =  TX_NULL;
 80039c0:	3a04      	subs	r2, #4
    pool_ptr -> tx_block_pool_total =      blocks;
 80039c2:	f8c8 600c 	str.w	r6, [r8, #12]
        *block_link_ptr =  TX_NULL;
 80039c6:	5153      	str	r3, [r2, r5]
        
        /* Setup the starting pool address.  */
        pool_ptr -> tx_block_pool_available_list =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80039c8:	f8c8 9010 	str.w	r9, [r8, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80039cc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80039d0:	b672      	cpsid	i
        /* Setup the block pool ID to make it valid.  */
        pool_ptr -> tx_block_pool_id =  TX_BLOCK_POOL_ID;

        /* Place the block pool on the list of created block pools.  First,
           check for an empty list.  */
        if (_tx_block_pool_created_count == TX_EMPTY)
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <_tx_block_pool_create+0xb8>)
        pool_ptr -> tx_block_pool_id =  TX_BLOCK_POOL_ID;
 80039d4:	4911      	ldr	r1, [pc, #68]	; (8003a1c <_tx_block_pool_create+0xbc>)
        if (_tx_block_pool_created_count == TX_EMPTY)
 80039d6:	6813      	ldr	r3, [r2, #0]
        pool_ptr -> tx_block_pool_id =  TX_BLOCK_POOL_ID;
 80039d8:	f8c8 1000 	str.w	r1, [r8]
        {

            /* The created block pool list is empty.  Add block pool to empty list.  */
            _tx_block_pool_created_ptr =                  pool_ptr;
 80039dc:	4910      	ldr	r1, [pc, #64]	; (8003a20 <_tx_block_pool_create+0xc0>)
        if (_tx_block_pool_created_count == TX_EMPTY)
 80039de:	b173      	cbz	r3, 80039fe <_tx_block_pool_create+0x9e>
        }
        else
        {

            /* This list is not NULL, add to the end of the list.  */
            next_pool =      _tx_block_pool_created_ptr;
 80039e0:	6809      	ldr	r1, [r1, #0]
            previous_pool =  next_pool -> tx_block_pool_created_previous;
 80039e2:	6acc      	ldr	r4, [r1, #44]	; 0x2c

            /* Place the new block pool in the list.  */
            next_pool -> tx_block_pool_created_previous =  pool_ptr;
 80039e4:	f8c1 802c 	str.w	r8, [r1, #44]	; 0x2c
            previous_pool -> tx_block_pool_created_next =  pool_ptr;
 80039e8:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28

            /* Setup this block pool's created links.  */
            pool_ptr -> tx_block_pool_created_previous =  previous_pool;
            pool_ptr -> tx_block_pool_created_next =      next_pool;
 80039ec:	e9c8 140a 	strd	r1, r4, [r8, #40]	; 0x28
        }
        
        /* Increment the created count.  */
        _tx_block_pool_created_count++;
 80039f0:	3301      	adds	r3, #1
 80039f2:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80039f4:	f380 8810 	msr	PRIMASK, r0

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return successful status.  */
        status =  TX_SUCCESS;
 80039f8:	2000      	movs	r0, #0
        status =  TX_SIZE_ERROR;
    }
    
    /* Return completion status.  */
    return(status);
}
 80039fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            pool_ptr -> tx_block_pool_created_previous =  pool_ptr;
 80039fe:	e9c8 880a 	strd	r8, r8, [r8, #40]	; 0x28
            _tx_block_pool_created_ptr =                  pool_ptr;
 8003a02:	f8c1 8000 	str.w	r8, [r1]
 8003a06:	e7f3      	b.n	80039f0 <_tx_block_pool_create+0x90>
    pool_ptr -> tx_block_pool_available =  blocks;
 8003a08:	f8c8 6008 	str.w	r6, [r8, #8]
        status =  TX_SIZE_ERROR;
 8003a0c:	2005      	movs	r0, #5
    pool_ptr -> tx_block_pool_total =      blocks;
 8003a0e:	f8c8 600c 	str.w	r6, [r8, #12]
}
 8003a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a16:	bf00      	nop
 8003a18:	20000f8c 	.word	0x20000f8c
 8003a1c:	424c4f43 	.word	0x424c4f43
 8003a20:	20000f98 	.word	0x20000f98

08003a24 <_tx_block_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_release(VOID *block_ptr)
{
 8003a24:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003a26:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003a2a:	b672      	cpsid	i
    /* Pickup the pool pointer which is just previous to the starting 
       address of the block that the caller sees.  */
    work_ptr =        TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
    work_ptr =        TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
    next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
    pool_ptr =        TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT((*next_block_ptr));
 8003a2c:	f850 3c04 	ldr.w	r3, [r0, #-4]

    /* Log this kernel call.  */
    TX_EL_BLOCK_RELEASE_INSERT

    /* Determine if there are any threads suspended on the block pool.  */
    thread_ptr =  pool_ptr -> tx_block_pool_suspension_list;
 8003a30:	6a1a      	ldr	r2, [r3, #32]
    if (thread_ptr != TX_NULL)
 8003a32:	b1e2      	cbz	r2, 8003a6e <_tx_block_release+0x4a>
    {

        /* Remove the suspended thread from the list.  */

        /* Decrement the number of threads suspended.  */
        (pool_ptr -> tx_block_pool_suspended_count)--;
 8003a34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a36:	3901      	subs	r1, #1
 8003a38:	6259      	str	r1, [r3, #36]	; 0x24
        
        /* Pickup the suspended count.  */
        suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);

        /* See if this is the only suspended thread on the list.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8003a3a:	b1b1      	cbz	r1, 8003a6a <_tx_block_release+0x46>
            /* Update the list head pointer.  */
            next_thread =                                thread_ptr -> tx_thread_suspended_next;
            pool_ptr -> tx_block_pool_suspension_list =  next_thread;

            /* Update the links of the adjacent threads.  */
            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8003a3c:	e9d2 141c 	ldrd	r1, r4, [r2, #112]	; 0x70
            pool_ptr -> tx_block_pool_suspension_list =  next_thread;
 8003a40:	6219      	str	r1, [r3, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8003a42:	674c      	str	r4, [r1, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8003a44:	6721      	str	r1, [r4, #112]	; 0x70
 8003a46:	4603      	mov	r3, r0
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8003a48:	480e      	ldr	r0, [pc, #56]	; (8003a84 <_tx_block_release+0x60>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003a4a:	2400      	movs	r4, #0
        return_block_ptr =  TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8003a4c:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
        _tx_thread_preempt_disable++;
 8003a4e:	6801      	ldr	r1, [r0, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003a50:	6694      	str	r4, [r2, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8003a52:	3101      	adds	r1, #1
        *return_block_ptr =  work_ptr;
 8003a54:	6033      	str	r3, [r6, #0]
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8003a56:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
        _tx_thread_preempt_disable++;
 8003a5a:	6001      	str	r1, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003a5c:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8003a60:	4610      	mov	r0, r2
 8003a62:	f001 f8bd 	bl	8004be0 <_tx_thread_system_resume>
        TX_RESTORE
    }

    /* Return successful completion status.  */
    return(TX_SUCCESS);
}
 8003a66:	2000      	movs	r0, #0
 8003a68:	bd70      	pop	{r4, r5, r6, pc}
            pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 8003a6a:	6219      	str	r1, [r3, #32]
 8003a6c:	e7eb      	b.n	8003a46 <_tx_block_release+0x22>
        pool_ptr -> tx_block_pool_available++;
 8003a6e:	689a      	ldr	r2, [r3, #8]
        *next_block_ptr =  pool_ptr -> tx_block_pool_available_list;
 8003a70:	6919      	ldr	r1, [r3, #16]
        pool_ptr -> tx_block_pool_available++;
 8003a72:	3201      	adds	r2, #1
        *next_block_ptr =  pool_ptr -> tx_block_pool_available_list;
 8003a74:	f840 1d04 	str.w	r1, [r0, #-4]!
        pool_ptr -> tx_block_pool_available++;
 8003a78:	609a      	str	r2, [r3, #8]
        pool_ptr -> tx_block_pool_available_list =  work_ptr;
 8003a7a:	6118      	str	r0, [r3, #16]
 8003a7c:	f385 8810 	msr	PRIMASK, r5
}
 8003a80:	2000      	movs	r0, #0
 8003a82:	bd70      	pop	{r4, r5, r6, pc}
 8003a84:	200009d8 	.word	0x200009d8

08003a88 <_tx_byte_allocate>:
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003a88:	3203      	adds	r2, #3
{
 8003a8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4688      	mov	r8, r1
 8003a92:	4699      	mov	r9, r3
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003a94:	f022 0703 	bic.w	r7, r2, #3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003a98:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003a9c:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003a9e:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <_tx_byte_allocate+0xbc>)
 8003aa0:	6815      	ldr	r5, [r2, #0]
 8003aa2:	e002      	b.n	8003aaa <_tx_byte_allocate+0x22>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8003aa4:	6a26      	ldr	r6, [r4, #32]
 8003aa6:	42ae      	cmp	r6, r5
 8003aa8:	d012      	beq.n	8003ad0 <_tx_byte_allocate+0x48>
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003aaa:	6225      	str	r5, [r4, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003aac:	f383 8810 	msr	PRIMASK, r3
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f000 f8d0 	bl	8003c58 <_tx_byte_pool_search>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003ab8:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003abc:	b672      	cpsid	i
        if (work_ptr != TX_NULL)
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <_tx_byte_allocate+0x1c>
        }

    } while (finished == TX_FALSE);

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8003ac2:	f8c8 0000 	str.w	r0, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003ac6:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8003aca:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 8003acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    *memory_ptr =  (VOID *) work_ptr;
 8003ad0:	f8c8 0000 	str.w	r0, [r8]
        if (wait_option != TX_NO_WAIT)
 8003ad4:	f1b9 0f00 	cmp.w	r9, #0
 8003ad8:	d028      	beq.n	8003b2c <_tx_byte_allocate+0xa4>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8003ada:	491b      	ldr	r1, [pc, #108]	; (8003b48 <_tx_byte_allocate+0xc0>)
 8003adc:	680a      	ldr	r2, [r1, #0]
 8003ade:	bb2a      	cbnz	r2, 8003b2c <_tx_byte_allocate+0xa4>
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8003ae0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                thread_ptr -> tx_thread_suspension_sequence++;
 8003ae2:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8003ae6:	67af      	str	r7, [r5, #120]	; 0x78
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8003ae8:	f100 0c01 	add.w	ip, r0, #1
                thread_ptr -> tx_thread_suspension_sequence++;
 8003aec:	3201      	adds	r2, #1
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8003aee:	4f17      	ldr	r7, [pc, #92]	; (8003b4c <_tx_byte_allocate+0xc4>)
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8003af0:	66ec      	str	r4, [r5, #108]	; 0x6c
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8003af2:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
                thread_ptr -> tx_thread_suspension_sequence++;
 8003af6:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8003afa:	66af      	str	r7, [r5, #104]	; 0x68
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8003afc:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
                if (suspended_count == TX_NO_SUSPENSIONS)
 8003b00:	b9c8      	cbnz	r0, 8003b36 <_tx_byte_allocate+0xae>
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8003b02:	6265      	str	r5, [r4, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8003b04:	e9c5 551c 	strd	r5, r5, [r5, #112]	; 0x70
                _tx_thread_preempt_disable++;
 8003b08:	680a      	ldr	r2, [r1, #0]
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003b0a:	2001      	movs	r0, #1
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8003b0c:	2409      	movs	r4, #9
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003b0e:	f8c6 904c 	str.w	r9, [r6, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 8003b12:	4402      	add	r2, r0
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003b14:	63b0      	str	r0, [r6, #56]	; 0x38
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8003b16:	6334      	str	r4, [r6, #48]	; 0x30
                _tx_thread_preempt_disable++;
 8003b18:	600a      	str	r2, [r1, #0]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
                _tx_thread_system_suspend(thread_ptr);
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f7fe ffde 	bl	8002ae0 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 8003b24:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
}
 8003b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b2c:	f383 8810 	msr	PRIMASK, r3
            status =  TX_NO_MEMORY;
 8003b30:	2010      	movs	r0, #16
}
 8003b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8003b36:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003b38:	6f50      	ldr	r0, [r2, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8003b3a:	e9c5 201c 	strd	r2, r0, [r5, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003b3e:	6705      	str	r5, [r0, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8003b40:	6755      	str	r5, [r2, #116]	; 0x74
 8003b42:	e7e1      	b.n	8003b08 <_tx_byte_allocate+0x80>
 8003b44:	200009dc 	.word	0x200009dc
 8003b48:	200009d8 	.word	0x200009d8
 8003b4c:	08003b51 	.word	0x08003b51

08003b50 <_tx_byte_pool_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8003b50:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003b52:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003b56:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8003b58:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <_tx_byte_pool_cleanup+0x74>)
 8003b5a:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8003b5c:	4294      	cmp	r4, r2
 8003b5e:	d002      	beq.n	8003b66 <_tx_byte_pool_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003b60:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003b64:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8003b66:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8003b6a:	428a      	cmp	r2, r1
 8003b6c:	d1f8      	bne.n	8003b60 <_tx_byte_pool_cleanup+0x10>
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8003b6e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (pool_ptr != TX_NULL)
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	d0f5      	beq.n	8003b60 <_tx_byte_pool_cleanup+0x10>
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8003b74:	4914      	ldr	r1, [pc, #80]	; (8003bc8 <_tx_byte_pool_cleanup+0x78>)
 8003b76:	6814      	ldr	r4, [r2, #0]
 8003b78:	428c      	cmp	r4, r1
 8003b7a:	d1f1      	bne.n	8003b60 <_tx_byte_pool_cleanup+0x10>
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8003b7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b7e:	2900      	cmp	r1, #0
 8003b80:	d0ee      	beq.n	8003b60 <_tx_byte_pool_cleanup+0x10>
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8003b82:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003b84:	2400      	movs	r4, #0
 8003b86:	6684      	str	r4, [r0, #104]	; 0x68
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8003b88:	6291      	str	r1, [r2, #40]	; 0x28
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8003b8a:	b1c1      	cbz	r1, 8003bbe <_tx_byte_pool_cleanup+0x6e>
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8003b8c:	6a55      	ldr	r5, [r2, #36]	; 0x24
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8003b8e:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8003b92:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8003b94:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8003b96:	6721      	str	r1, [r4, #112]	; 0x70
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8003b98:	d011      	beq.n	8003bbe <_tx_byte_pool_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8003b9a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003b9c:	2a09      	cmp	r2, #9
 8003b9e:	d1df      	bne.n	8003b60 <_tx_byte_pool_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 8003ba0:	490a      	ldr	r1, [pc, #40]	; (8003bcc <_tx_byte_pool_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8003ba2:	2410      	movs	r4, #16
                            _tx_thread_preempt_disable++;
 8003ba4:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8003ba6:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8003baa:	3201      	adds	r2, #1
 8003bac:	600a      	str	r2, [r1, #0]
 8003bae:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8003bb2:	f001 f815 	bl	8004be0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003bb6:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003bba:	b672      	cpsid	i
 8003bbc:	e7d0      	b.n	8003b60 <_tx_byte_pool_cleanup+0x10>
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8003bbe:	6251      	str	r1, [r2, #36]	; 0x24
 8003bc0:	e7eb      	b.n	8003b9a <_tx_byte_pool_cleanup+0x4a>
 8003bc2:	bf00      	nop
 8003bc4:	08003b51 	.word	0x08003b51
 8003bc8:	42595445 	.word	0x42595445
 8003bcc:	200009d8 	.word	0x200009d8

08003bd0 <_tx_byte_pool_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8003bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd4:	461e      	mov	r6, r3
 8003bd6:	4615      	mov	r5, r2
 8003bd8:	4688      	mov	r8, r1
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8003bda:	2234      	movs	r2, #52	; 0x34
 8003bdc:	2100      	movs	r1, #0
{
 8003bde:	4604      	mov	r4, r0
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8003be0:	f001 faa4 	bl	800512c <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003be4:	f026 0303 	bic.w	r3, r6, #3
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
    *block_indirect_ptr =  block_ptr;
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8003be8:	4817      	ldr	r0, [pc, #92]	; (8003c48 <_tx_byte_pool_create+0x78>)
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8003bea:	2602      	movs	r6, #2
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8003bec:	18ea      	adds	r2, r5, r3
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8003bee:	61e3      	str	r3, [r4, #28]
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8003bf0:	f1a3 0708 	sub.w	r7, r3, #8

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8003bf4:	2100      	movs	r1, #0
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003bf6:	4613      	mov	r3, r2
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8003bf8:	f8c4 8004 	str.w	r8, [r4, #4]
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003bfc:	61a5      	str	r5, [r4, #24]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003bfe:	e9c4 5504 	strd	r5, r5, [r4, #16]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8003c02:	e9c4 7602 	strd	r7, r6, [r4, #8]
    *block_indirect_ptr =  temp_ptr;
 8003c06:	f842 4c04 	str.w	r4, [r2, #-4]
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003c0a:	f843 5d08 	str.w	r5, [r3, #-8]!
    *block_indirect_ptr =  block_ptr;
 8003c0e:	e9c5 3000 	strd	r3, r0, [r5]
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8003c12:	6221      	str	r1, [r4, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003c14:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003c18:	b672      	cpsid	i
    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003c1a:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <_tx_byte_pool_create+0x7c>)
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8003c1c:	490c      	ldr	r1, [pc, #48]	; (8003c50 <_tx_byte_pool_create+0x80>)
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003c1e:	6813      	ldr	r3, [r2, #0]
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8003c20:	6021      	str	r1, [r4, #0]
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003c22:	490c      	ldr	r1, [pc, #48]	; (8003c54 <_tx_byte_pool_create+0x84>)
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003c24:	b163      	cbz	r3, 8003c40 <_tx_byte_pool_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8003c26:	6809      	ldr	r1, [r1, #0]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8003c28:	6b0d      	ldr	r5, [r1, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8003c2a:	630c      	str	r4, [r1, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8003c2c:	62ec      	str	r4, [r5, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8003c2e:	e9c4 150b 	strd	r1, r5, [r4, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8003c32:	3301      	adds	r3, #1
 8003c34:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003c36:	f380 8810 	msr	PRIMASK, r0
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8003c40:	e9c4 440b 	strd	r4, r4, [r4, #44]	; 0x2c
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003c44:	600c      	str	r4, [r1, #0]
 8003c46:	e7f4      	b.n	8003c32 <_tx_byte_pool_create+0x62>
 8003c48:	ffffeeee 	.word	0xffffeeee
 8003c4c:	20000fa0 	.word	0x20000fa0
 8003c50:	42595445 	.word	0x42595445
 8003c54:	20000f84 	.word	0x20000f84

08003c58 <_tx_byte_pool_search>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8003c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003c5a:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003c5e:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* First, determine if there are enough bytes in the pool.  */
    if (memory_size >= pool_ptr -> tx_byte_pool_available)
 8003c60:	6883      	ldr	r3, [r0, #8]
 8003c62:	428b      	cmp	r3, r1
 8003c64:	d91b      	bls.n	8003c9e <_tx_byte_pool_search+0x46>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8003c66:	4a32      	ldr	r2, [pc, #200]	; (8003d30 <_tx_byte_pool_search+0xd8>)
UINT            first_free_block_found =  TX_FALSE;
 8003c68:	2700      	movs	r7, #0
        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8003c6a:	68c3      	ldr	r3, [r0, #12]
        TX_THREAD_GET_CURRENT(thread_ptr)
 8003c6c:	6816      	ldr	r6, [r2, #0]
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8003c6e:	3301      	adds	r3, #1
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8003c70:	6942      	ldr	r2, [r0, #20]
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8003c72:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8003d34 <_tx_byte_pool_search+0xdc>
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003c76:	6206      	str	r6, [r0, #32]
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8003c78:	6855      	ldr	r5, [r2, #4]
 8003c7a:	4565      	cmp	r5, ip
 8003c7c:	d013      	beq.n	8003ca6 <_tx_byte_pool_search+0x4e>
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
                current_ptr =  *this_block_link_ptr;
 8003c7e:	6812      	ldr	r2, [r2, #0]
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8003c80:	b103      	cbz	r3, 8003c84 <_tx_byte_pool_search+0x2c>
            {

                examine_blocks--;
 8003c82:	3b01      	subs	r3, #1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003c84:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003c88:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003c8c:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8003c8e:	6a05      	ldr	r5, [r0, #32]
 8003c90:	42b5      	cmp	r5, r6
 8003c92:	d018      	beq.n	8003cc6 <_tx_byte_pool_search+0x6e>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8003c94:	68c3      	ldr	r3, [r0, #12]

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003c96:	6206      	str	r6, [r0, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8003c98:	3301      	adds	r3, #1
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8003c9a:	6942      	ldr	r2, [r0, #20]
        } while(examine_blocks != ((UINT) 0));
 8003c9c:	d1ec      	bne.n	8003c78 <_tx_byte_pool_search+0x20>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003c9e:	f384 8810 	msr	PRIMASK, r4

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8003ca2:	2000      	movs	r0, #0
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
}
 8003ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (first_free_block_found == TX_FALSE)
 8003ca6:	b907      	cbnz	r7, 8003caa <_tx_byte_pool_search+0x52>
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8003ca8:	6142      	str	r2, [r0, #20]
                next_ptr =             *this_block_link_ptr;
 8003caa:	6817      	ldr	r7, [r2, #0]
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8003cac:	1abd      	subs	r5, r7, r2
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8003cae:	3d08      	subs	r5, #8
                if (available_bytes >= memory_size)
 8003cb0:	42a9      	cmp	r1, r5
 8003cb2:	d91e      	bls.n	8003cf2 <_tx_byte_pool_search+0x9a>
 8003cb4:	e9d7 e500 	ldrd	lr, r5, [r7]
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8003cb8:	4565      	cmp	r5, ip
 8003cba:	d00a      	beq.n	8003cd2 <_tx_byte_pool_search+0x7a>
                        if (examine_blocks != ((UINT) 0))
 8003cbc:	b19b      	cbz	r3, 8003ce6 <_tx_byte_pool_search+0x8e>
                            examine_blocks--;
 8003cbe:	3b01      	subs	r3, #1
                        current_ptr =  *next_block_link_ptr;
 8003cc0:	4672      	mov	r2, lr
                            examine_blocks--;
 8003cc2:	2701      	movs	r7, #1
 8003cc4:	e7dc      	b.n	8003c80 <_tx_byte_pool_search+0x28>
        } while(examine_blocks != ((UINT) 0));
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1d6      	bne.n	8003c78 <_tx_byte_pool_search+0x20>
 8003cca:	f384 8810 	msr	PRIMASK, r4
            current_ptr =  TX_NULL;
 8003cce:	2000      	movs	r0, #0
 8003cd0:	e7e8      	b.n	8003ca4 <_tx_byte_pool_search+0x4c>
                        pool_ptr -> tx_byte_pool_fragments--;
 8003cd2:	68c5      	ldr	r5, [r0, #12]
                        *this_block_link_ptr =  *next_block_link_ptr;
 8003cd4:	f8c2 e000 	str.w	lr, [r2]
                        pool_ptr -> tx_byte_pool_fragments--;
 8003cd8:	3d01      	subs	r5, #1
 8003cda:	60c5      	str	r5, [r0, #12]
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8003cdc:	6945      	ldr	r5, [r0, #20]
 8003cde:	42bd      	cmp	r5, r7
 8003ce0:	d004      	beq.n	8003cec <_tx_byte_pool_search+0x94>
 8003ce2:	2701      	movs	r7, #1
 8003ce4:	e7cc      	b.n	8003c80 <_tx_byte_pool_search+0x28>
                        current_ptr =  *next_block_link_ptr;
 8003ce6:	4672      	mov	r2, lr
 8003ce8:	2701      	movs	r7, #1
 8003cea:	e7cb      	b.n	8003c84 <_tx_byte_pool_search+0x2c>
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8003cec:	6142      	str	r2, [r0, #20]
 8003cee:	2701      	movs	r7, #1
 8003cf0:	e7c6      	b.n	8003c80 <_tx_byte_pool_search+0x28>
        if (available_bytes != ((ULONG) 0))
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	d0d3      	beq.n	8003c9e <_tx_byte_pool_search+0x46>
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8003cf6:	1a6b      	subs	r3, r5, r1
 8003cf8:	2b13      	cmp	r3, #19
 8003cfa:	d90b      	bls.n	8003d14 <_tx_byte_pool_search+0xbc>
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8003cfc:	f101 0308 	add.w	r3, r1, #8
                pool_ptr -> tx_byte_pool_fragments++;
 8003d00:	68c6      	ldr	r6, [r0, #12]
                *this_block_link_ptr =  next_ptr;
 8003d02:	460d      	mov	r5, r1
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8003d04:	490b      	ldr	r1, [pc, #44]	; (8003d34 <_tx_byte_pool_search+0xdc>)
                *next_block_link_ptr =  *this_block_link_ptr;
 8003d06:	50d7      	str	r7, [r2, r3]
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8003d08:	4413      	add	r3, r2
                pool_ptr -> tx_byte_pool_fragments++;
 8003d0a:	3601      	adds	r6, #1
                *this_block_link_ptr =  next_ptr;
 8003d0c:	461f      	mov	r7, r3
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8003d0e:	6059      	str	r1, [r3, #4]
                pool_ptr -> tx_byte_pool_fragments++;
 8003d10:	60c6      	str	r6, [r0, #12]
                *this_block_link_ptr =  next_ptr;
 8003d12:	6013      	str	r3, [r2, #0]
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8003d14:	6883      	ldr	r3, [r0, #8]
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003d16:	6050      	str	r0, [r2, #4]
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8003d18:	3b08      	subs	r3, #8
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8003d1a:	6941      	ldr	r1, [r0, #20]
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8003d1c:	1b5d      	subs	r5, r3, r5
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8003d1e:	4291      	cmp	r1, r2
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8003d20:	6085      	str	r5, [r0, #8]
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8003d22:	bf08      	it	eq
 8003d24:	6147      	streq	r7, [r0, #20]
 8003d26:	f384 8810 	msr	PRIMASK, r4
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8003d2a:	f102 0008 	add.w	r0, r2, #8
}
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d30:	200009dc 	.word	0x200009dc
 8003d34:	ffffeeee 	.word	0xffffeeee

08003d38 <_tx_event_flags_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	460c      	mov	r4, r1
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8003d3c:	2228      	movs	r2, #40	; 0x28
 8003d3e:	2100      	movs	r1, #0
 8003d40:	f001 f9f4 	bl	800512c <memset>
 8003d44:	4603      	mov	r3, r0

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8003d46:	6044      	str	r4, [r0, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003d48:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003d4c:	b672      	cpsid	i
    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8003d4e:	490b      	ldr	r1, [pc, #44]	; (8003d7c <_tx_event_flags_create+0x44>)
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8003d50:	480b      	ldr	r0, [pc, #44]	; (8003d80 <_tx_event_flags_create+0x48>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 8003d52:	680a      	ldr	r2, [r1, #0]
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8003d54:	6018      	str	r0, [r3, #0]
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8003d56:	480b      	ldr	r0, [pc, #44]	; (8003d84 <_tx_event_flags_create+0x4c>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 8003d58:	b15a      	cbz	r2, 8003d72 <_tx_event_flags_create+0x3a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8003d5a:	6800      	ldr	r0, [r0, #0]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8003d5c:	69c5      	ldr	r5, [r0, #28]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8003d5e:	61c3      	str	r3, [r0, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8003d60:	61ab      	str	r3, [r5, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 8003d62:	e9c3 0506 	strd	r0, r5, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8003d66:	3201      	adds	r2, #1
 8003d68:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003d6a:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8003d6e:	2000      	movs	r0, #0
 8003d70:	bd38      	pop	{r3, r4, r5, pc}
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8003d72:	e9c3 3306 	strd	r3, r3, [r3, #24]
        _tx_event_flags_created_ptr =                         group_ptr;
 8003d76:	6003      	str	r3, [r0, #0]
 8003d78:	e7f5      	b.n	8003d66 <_tx_event_flags_create+0x2e>
 8003d7a:	bf00      	nop
 8003d7c:	20000f94 	.word	0x20000f94
 8003d80:	4456444e 	.word	0x4456444e
 8003d84:	20000f70 	.word	0x20000f70

08003d88 <_tx_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003d8a:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003d8e:	b672      	cpsid	i
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8003d90:	6a06      	ldr	r6, [r0, #32]
    and_request =  (get_option & TX_AND);
 8003d92:	f002 0702 	and.w	r7, r2, #2
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8003d96:	6884      	ldr	r4, [r0, #8]

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 8003d98:	b10e      	cbz	r6, 8003d9e <_tx_event_flags_get+0x16>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8003d9a:	ea24 0406 	bic.w	r4, r4, r6
 8003d9e:	ea04 0601 	and.w	r6, r4, r1
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8003da2:	2f00      	cmp	r7, #0
 8003da4:	d03c      	beq.n	8003e20 <_tx_event_flags_get+0x98>
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8003da6:	42b1      	cmp	r1, r6
 8003da8:	d03a      	beq.n	8003e20 <_tx_event_flags_get+0x98>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8003daa:	9c06      	ldr	r4, [sp, #24]
 8003dac:	2c00      	cmp	r4, #0
 8003dae:	d04a      	beq.n	8003e46 <_tx_event_flags_get+0xbe>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8003db0:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8003e64 <_tx_event_flags_get+0xdc>
 8003db4:	f8dc 4000 	ldr.w	r4, [ip]
 8003db8:	2c00      	cmp	r4, #0
 8003dba:	d144      	bne.n	8003e46 <_tx_event_flags_get+0xbe>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8003dbc:	4c28      	ldr	r4, [pc, #160]	; (8003e60 <_tx_event_flags_get+0xd8>)
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8003dbe:	6946      	ldr	r6, [r0, #20]
                TX_THREAD_GET_CURRENT(thread_ptr)
 8003dc0:	6824      	ldr	r4, [r4, #0]
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8003dc2:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8003e68 <_tx_event_flags_get+0xe0>
                thread_ptr -> tx_thread_suspension_sequence++;
 8003dc6:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 8003dca:	67a1      	str	r1, [r4, #120]	; 0x78
                thread_ptr -> tx_thread_suspension_sequence++;
 8003dcc:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8003dce:	e9c4 321f 	strd	r3, r2, [r4, #124]	; 0x7c
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8003dd2:	e9c4 e01a 	strd	lr, r0, [r4, #104]	; 0x68
                thread_ptr -> tx_thread_suspension_sequence++;
 8003dd6:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8003dda:	2e00      	cmp	r6, #0
 8003ddc:	d038      	beq.n	8003e50 <_tx_event_flags_get+0xc8>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8003dde:	6903      	ldr	r3, [r0, #16]
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003de0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8003de2:	e9c4 321c 	strd	r3, r2, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003de6:	6714      	str	r4, [r2, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8003de8:	675c      	str	r4, [r3, #116]	; 0x74

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8003dea:	f8dc 3000 	ldr.w	r3, [ip]
                group_ptr -> tx_event_flags_group_suspended_count++;
 8003dee:	3601      	adds	r6, #1
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8003df0:	2107      	movs	r1, #7
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003df2:	2201      	movs	r2, #1
                group_ptr -> tx_event_flags_group_suspended_count++;
 8003df4:	6146      	str	r6, [r0, #20]
                _tx_thread_preempt_disable++;
 8003df6:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003df8:	9806      	ldr	r0, [sp, #24]
                _tx_thread_preempt_disable++;
 8003dfa:	f8cc 3000 	str.w	r3, [ip]
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003dfe:	64e0      	str	r0, [r4, #76]	; 0x4c
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8003e00:	6321      	str	r1, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003e02:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003e04:	f385 8810 	msr	PRIMASK, r5

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f7fe fe69 	bl	8002ae0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003e0e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003e12:	b672      	cpsid	i
    
                /* Disable interrupts.  */
                TX_DISABLE
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8003e14:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003e18:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
}
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (flags_satisfied != ((ULONG) 0))
 8003e20:	2e00      	cmp	r6, #0
 8003e22:	d0c2      	beq.n	8003daa <_tx_event_flags_get+0x22>
        if (clear_request == TX_TRUE)
 8003e24:	f012 0201 	ands.w	r2, r2, #1
        *actual_flags_ptr =  current_flags;
 8003e28:	601c      	str	r4, [r3, #0]
        if (clear_request == TX_TRUE)
 8003e2a:	d00d      	beq.n	8003e48 <_tx_event_flags_get+0xc0>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8003e2c:	6943      	ldr	r3, [r0, #20]
 8003e2e:	b10b      	cbz	r3, 8003e34 <_tx_event_flags_get+0xac>
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8003e30:	6902      	ldr	r2, [r0, #16]
 8003e32:	b18a      	cbz	r2, 8003e58 <_tx_event_flags_get+0xd0>
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8003e34:	6883      	ldr	r3, [r0, #8]
        status =  TX_SUCCESS;
 8003e36:	2200      	movs	r2, #0
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8003e38:	ea23 0101 	bic.w	r1, r3, r1
                group_ptr -> tx_event_flags_group_current =
 8003e3c:	6081      	str	r1, [r0, #8]
 8003e3e:	f385 8810 	msr	PRIMASK, r5
}
 8003e42:	4610      	mov	r0, r2
 8003e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                status =  TX_NO_EVENTS;
 8003e46:	2207      	movs	r2, #7
 8003e48:	f385 8810 	msr	PRIMASK, r5
}
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8003e50:	6104      	str	r4, [r0, #16]
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8003e52:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 8003e56:	e7c8      	b.n	8003dea <_tx_event_flags_get+0x62>
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 8003e58:	6a03      	ldr	r3, [r0, #32]
 8003e5a:	4319      	orrs	r1, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 8003e5c:	6201      	str	r1, [r0, #32]
 8003e5e:	e7f3      	b.n	8003e48 <_tx_event_flags_get+0xc0>
 8003e60:	200009dc 	.word	0x200009dc
 8003e64:	200009d8 	.word	0x200009d8
 8003e68:	08004df1 	.word	0x08004df1

08003e6c <_tx_event_flags_set>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8003e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e70:	b083      	sub	sp, #12
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003e72:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003e76:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 8003e78:	0794      	lsls	r4, r2, #30
 8003e7a:	d50c      	bpl.n	8003e96 <_tx_event_flags_set+0x2a>
        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8003e7c:	6943      	ldr	r3, [r0, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f040 80ba 	bne.w	8003ff8 <_tx_event_flags_set+0x18c>

            /* Previous set operation was not interrupted, simply clear the 
               specified flags by "ANDing" the flags into the current events 
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8003e84:	6883      	ldr	r3, [r0, #8]
 8003e86:	4019      	ands	r1, r3
            group_ptr -> tx_event_flags_group_current =
 8003e88:	6081      	str	r1, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003e8a:	f386 8810 	msr	PRIMASK, r6
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 8003e8e:	2000      	movs	r0, #0
 8003e90:	b003      	add	sp, #12
 8003e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8003e96:	6885      	ldr	r5, [r0, #8]
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 8003e98:	6a42      	ldr	r2, [r0, #36]	; 0x24
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8003e9a:	430d      	orrs	r5, r1
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8003e9c:	6a03      	ldr	r3, [r0, #32]
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 8003e9e:	9201      	str	r2, [sp, #4]
        group_ptr -> tx_event_flags_group_current =
 8003ea0:	6085      	str	r5, [r0, #8]
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8003ea2:	b113      	cbz	r3, 8003eaa <_tx_event_flags_set+0x3e>
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8003ea4:	ea23 0101 	bic.w	r1, r3, r1
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8003ea8:	6201      	str	r1, [r0, #32]
 8003eaa:	4604      	mov	r4, r0
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8003eac:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80ad 	beq.w	8004010 <_tx_event_flags_set+0x1a4>
            if (suspended_count == ((UINT) 1))
 8003eb6:	2a01      	cmp	r2, #1
 8003eb8:	f000 80af 	beq.w	800401a <_tx_event_flags_set+0x1ae>
                _tx_thread_preempt_disable++;
 8003ebc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004070 <_tx_event_flags_set+0x204>
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8003ec0:	2000      	movs	r0, #0
                _tx_thread_preempt_disable++;
 8003ec2:	469c      	mov	ip, r3
 8003ec4:	46ae      	mov	lr, r5
 8003ec6:	f8d8 1000 	ldr.w	r1, [r8]
        preempt_check =  TX_FALSE;
 8003eca:	4607      	mov	r7, r0
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8003ecc:	6120      	str	r0, [r4, #16]
                _tx_thread_preempt_disable++;
 8003ece:	4681      	mov	r9, r0
 8003ed0:	3101      	adds	r1, #1
                last_satisfied =  TX_NULL;
 8003ed2:	9000      	str	r0, [sp, #0]
                _tx_thread_preempt_disable++;
 8003ed4:	f8c8 1000 	str.w	r1, [r8]
 8003ed8:	e01b      	b.n	8003f12 <_tx_event_flags_set+0xa6>
                        if (flags_satisfied != requested_flags)
 8003eda:	455d      	cmp	r5, fp
 8003edc:	d032      	beq.n	8003f44 <_tx_event_flags_set+0xd8>
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8003ede:	f1ba 0f07 	cmp.w	sl, #7
 8003ee2:	d013      	beq.n	8003f0c <_tx_event_flags_set+0xa0>
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8003ee4:	428b      	cmp	r3, r1
 8003ee6:	d042      	beq.n	8003f6e <_tx_event_flags_set+0x102>
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8003ee8:	6f58      	ldr	r0, [r3, #116]	; 0x74
                            if (suspended_list == thread_ptr)
 8003eea:	4563      	cmp	r3, ip
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8003eec:	6748      	str	r0, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8003eee:	6701      	str	r1, [r0, #112]	; 0x70
                            if (suspended_list == thread_ptr)
 8003ef0:	f000 808b 	beq.w	800400a <_tx_event_flags_set+0x19e>
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8003ef4:	6967      	ldr	r7, [r4, #20]
 8003ef6:	3f01      	subs	r7, #1
 8003ef8:	6167      	str	r7, [r4, #20]
                        if (satisfied_list == TX_NULL)
 8003efa:	f1b9 0f00 	cmp.w	r9, #0
 8003efe:	d03e      	beq.n	8003f7e <_tx_event_flags_set+0x112>
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8003f00:	9800      	ldr	r0, [sp, #0]
                        preempt_check =  TX_TRUE;
 8003f02:	2701      	movs	r7, #1
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8003f04:	9300      	str	r3, [sp, #0]
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8003f06:	6703      	str	r3, [r0, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8003f08:	2000      	movs	r0, #0
 8003f0a:	6718      	str	r0, [r3, #112]	; 0x70
                } while (suspended_count != TX_NO_SUSPENSIONS);
 8003f0c:	3a01      	subs	r2, #1
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8003f0e:	460b      	mov	r3, r1
                } while (suspended_count != TX_NO_SUSPENSIONS);
 8003f10:	d03e      	beq.n	8003f90 <_tx_event_flags_set+0x124>
 8003f12:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003f16:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003f1a:	b672      	cpsid	i
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8003f1c:	68e1      	ldr	r1, [r4, #12]
 8003f1e:	b131      	cbz	r1, 8003f2e <_tx_event_flags_set+0xc2>
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8003f20:	68a1      	ldr	r1, [r4, #8]
 8003f22:	4663      	mov	r3, ip
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8003f24:	6962      	ldr	r2, [r4, #20]
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8003f26:	ea4e 0e01 	orr.w	lr, lr, r1
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	60e1      	str	r1, [r4, #12]
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 8003f2e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8003f32:	6f9d      	ldr	r5, [r3, #120]	; 0x78
                    if (and_request == TX_AND)
 8003f34:	f010 0f02 	tst.w	r0, #2
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8003f38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f3a:	ea0e 0b05 	and.w	fp, lr, r5
 8003f3e:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
                    if (and_request == TX_AND)
 8003f42:	d1ca      	bne.n	8003eda <_tx_event_flags_set+0x6e>
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8003f44:	f1ba 0f07 	cmp.w	sl, #7
 8003f48:	d1cc      	bne.n	8003ee4 <_tx_event_flags_set+0x78>
                    if (flags_satisfied != ((ULONG) 0))
 8003f4a:	f1bb 0f00 	cmp.w	fp, #0
 8003f4e:	d0dd      	beq.n	8003f0c <_tx_event_flags_set+0xa0>
                            *suspend_info_ptr =  current_event_flags;
 8003f50:	6fdf      	ldr	r7, [r3, #124]	; 0x7c
                            if (clear_request == TX_TRUE)
 8003f52:	07c0      	lsls	r0, r0, #31
                            *suspend_info_ptr =  current_event_flags;
 8003f54:	f8c7 e000 	str.w	lr, [r7]
                            if (clear_request == TX_TRUE)
 8003f58:	d503      	bpl.n	8003f62 <_tx_event_flags_set+0xf6>
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8003f5a:	68a7      	ldr	r7, [r4, #8]
 8003f5c:	ea27 0505 	bic.w	r5, r7, r5
 8003f60:	60a5      	str	r5, [r4, #8]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003f62:	2000      	movs	r0, #0
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8003f64:	428b      	cmp	r3, r1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003f66:	6698      	str	r0, [r3, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8003f68:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8003f6c:	d1bc      	bne.n	8003ee8 <_tx_event_flags_set+0x7c>
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8003f6e:	6967      	ldr	r7, [r4, #20]
                            suspended_list =  TX_NULL;
 8003f70:	f04f 0c00 	mov.w	ip, #0
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8003f74:	3f01      	subs	r7, #1
 8003f76:	6167      	str	r7, [r4, #20]
                        if (satisfied_list == TX_NULL)
 8003f78:	f1b9 0f00 	cmp.w	r9, #0
 8003f7c:	d1c0      	bne.n	8003f00 <_tx_event_flags_set+0x94>
                } while (suspended_count != TX_NO_SUSPENSIONS);
 8003f7e:	3a01      	subs	r2, #1
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8003f80:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	4699      	mov	r9, r3
                        preempt_check =  TX_TRUE;
 8003f88:	f04f 0701 	mov.w	r7, #1
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8003f8c:	460b      	mov	r3, r1
                } while (suspended_count != TX_NO_SUSPENSIONS);
 8003f8e:	d1c0      	bne.n	8003f12 <_tx_event_flags_set+0xa6>
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8003f90:	6a21      	ldr	r1, [r4, #32]
 8003f92:	4648      	mov	r0, r9
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8003f94:	f8c4 c010 	str.w	ip, [r4, #16]
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8003f98:	b121      	cbz	r1, 8003fa4 <_tx_event_flags_set+0x138>
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8003f9a:	68a3      	ldr	r3, [r4, #8]
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8003f9c:	6222      	str	r2, [r4, #32]
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8003f9e:	ea23 0301 	bic.w	r3, r3, r1
                    group_ptr -> tx_event_flags_group_current =
 8003fa2:	60a3      	str	r3, [r4, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003fa4:	f386 8810 	msr	PRIMASK, r6
                while(thread_ptr != TX_NULL)
 8003fa8:	b178      	cbz	r0, 8003fca <_tx_event_flags_set+0x15e>
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8003faa:	6f05      	ldr	r5, [r0, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003fac:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003fb0:	b672      	cpsid	i
                    _tx_thread_preempt_disable++;
 8003fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003fbc:	f382 8810 	msr	PRIMASK, r2
                    _tx_thread_system_resume(thread_ptr);
 8003fc0:	f000 fe0e 	bl	8004be0 <_tx_thread_system_resume>
                while(thread_ptr != TX_NULL)
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	2d00      	cmp	r5, #0
 8003fc8:	d1ef      	bne.n	8003faa <_tx_event_flags_set+0x13e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003fca:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003fce:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 8003fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003fda:	f386 8810 	msr	PRIMASK, r6
        if (events_set_notify != TX_NULL)
 8003fde:	9b01      	ldr	r3, [sp, #4]
 8003fe0:	b10b      	cbz	r3, 8003fe6 <_tx_event_flags_set+0x17a>
            (events_set_notify)(group_ptr);
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4798      	blx	r3
        if (preempt_check == TX_TRUE)
 8003fe6:	2f00      	cmp	r7, #0
 8003fe8:	f43f af51 	beq.w	8003e8e <_tx_event_flags_set+0x22>
            _tx_thread_system_preempt_check();
 8003fec:	f000 fdda 	bl	8004ba4 <_tx_thread_system_preempt_check>
}
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	b003      	add	sp, #12
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8003ff8:	6903      	ldr	r3, [r0, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f47f af42 	bne.w	8003e84 <_tx_event_flags_set+0x18>
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8004000:	6a03      	ldr	r3, [r0, #32]
 8004002:	ea63 0101 	orn	r1, r3, r1
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8004006:	6201      	str	r1, [r0, #32]
 8004008:	e73f      	b.n	8003e8a <_tx_event_flags_set+0x1e>
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800400a:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
 800400e:	e771      	b.n	8003ef4 <_tx_event_flags_set+0x88>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8004010:	b362      	cbz	r2, 800406c <_tx_event_flags_set+0x200>
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8004012:	2201      	movs	r2, #1
        preempt_check =  TX_FALSE;
 8004014:	461f      	mov	r7, r3
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8004016:	60c2      	str	r2, [r0, #12]
 8004018:	e7df      	b.n	8003fda <_tx_event_flags_set+0x16e>
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800401a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800401e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                if (and_request == TX_AND)
 8004020:	0788      	lsls	r0, r1, #30
 8004022:	ea05 0702 	and.w	r7, r5, r2
 8004026:	d503      	bpl.n	8004030 <_tx_event_flags_set+0x1c4>
                    if (flags_satisfied != requested_flags)
 8004028:	42ba      	cmp	r2, r7
 800402a:	d001      	beq.n	8004030 <_tx_event_flags_set+0x1c4>
        preempt_check =  TX_FALSE;
 800402c:	2700      	movs	r7, #0
 800402e:	e7d4      	b.n	8003fda <_tx_event_flags_set+0x16e>
                if (flags_satisfied != ((ULONG) 0))
 8004030:	2f00      	cmp	r7, #0
 8004032:	d0d2      	beq.n	8003fda <_tx_event_flags_set+0x16e>
                    *suspend_info_ptr =  current_event_flags;
 8004034:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
                    if (clear_request == TX_TRUE)
 8004036:	07c9      	lsls	r1, r1, #31
                    *suspend_info_ptr =  current_event_flags;
 8004038:	6005      	str	r5, [r0, #0]
                    if (clear_request == TX_TRUE)
 800403a:	d503      	bpl.n	8004044 <_tx_event_flags_set+0x1d8>
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800403c:	68a1      	ldr	r1, [r4, #8]
 800403e:	ea21 0202 	bic.w	r2, r1, r2
 8004042:	60a2      	str	r2, [r4, #8]
                    _tx_thread_preempt_disable++;
 8004044:	480a      	ldr	r0, [pc, #40]	; (8004070 <_tx_event_flags_set+0x204>)
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8004046:	2200      	movs	r2, #0
                    _tx_thread_preempt_disable++;
 8004048:	6801      	ldr	r1, [r0, #0]
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800404a:	6122      	str	r2, [r4, #16]
                    _tx_thread_preempt_disable++;
 800404c:	3101      	adds	r1, #1
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800404e:	6162      	str	r2, [r4, #20]
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004050:	669a      	str	r2, [r3, #104]	; 0x68
                    _tx_thread_preempt_disable++;
 8004052:	6001      	str	r1, [r0, #0]
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004058:	f386 8810 	msr	PRIMASK, r6
                    _tx_thread_system_resume(thread_ptr);
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fdbf 	bl	8004be0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004062:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004066:	b672      	cpsid	i
                    preempt_check =  TX_TRUE;
 8004068:	2701      	movs	r7, #1
 800406a:	e7b6      	b.n	8003fda <_tx_event_flags_set+0x16e>
        preempt_check =  TX_FALSE;
 800406c:	4617      	mov	r7, r2
 800406e:	e7b4      	b.n	8003fda <_tx_event_flags_set+0x16e>
 8004070:	200009d8 	.word	0x200009d8

08004074 <_tx_initialize_high_level>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8004074:	b538      	push	{r3, r4, r5, lr}

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8004076:	f7fe fcc5 	bl	8002a04 <_tx_thread_initialize>

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800407a:	4d0e      	ldr	r5, [pc, #56]	; (80040b4 <_tx_initialize_high_level+0x40>)
    _tx_timer_initialize();
 800407c:	f7fe fdf4 	bl	8002c68 <_tx_timer_initialize>
    _tx_semaphore_initialize();
 8004080:	2300      	movs	r3, #0
 8004082:	490d      	ldr	r1, [pc, #52]	; (80040b8 <_tx_initialize_high_level+0x44>)
 8004084:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <_tx_initialize_high_level+0x48>)
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	6013      	str	r3, [r2, #0]
    _tx_queue_initialize();
 800408a:	4c0d      	ldr	r4, [pc, #52]	; (80040c0 <_tx_initialize_high_level+0x4c>)

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800408c:	480d      	ldr	r0, [pc, #52]	; (80040c4 <_tx_initialize_high_level+0x50>)
 800408e:	490e      	ldr	r1, [pc, #56]	; (80040c8 <_tx_initialize_high_level+0x54>)

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8004090:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <_tx_initialize_high_level+0x58>)
    _tx_queue_initialize();
 8004092:	602b      	str	r3, [r5, #0]
 8004094:	6023      	str	r3, [r4, #0]
    _tx_event_flags_initialize();
 8004096:	6003      	str	r3, [r0, #0]
 8004098:	600b      	str	r3, [r1, #0]
    _tx_block_pool_initialize();
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4d0c      	ldr	r5, [pc, #48]	; (80040d0 <_tx_initialize_high_level+0x5c>)

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800409e:	4c0d      	ldr	r4, [pc, #52]	; (80040d4 <_tx_initialize_high_level+0x60>)
 80040a0:	480d      	ldr	r0, [pc, #52]	; (80040d8 <_tx_initialize_high_level+0x64>)

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80040a2:	490e      	ldr	r1, [pc, #56]	; (80040dc <_tx_initialize_high_level+0x68>)
 80040a4:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <_tx_initialize_high_level+0x6c>)
    _tx_block_pool_initialize();
 80040a6:	602b      	str	r3, [r5, #0]
    _tx_byte_pool_initialize();
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	6003      	str	r3, [r0, #0]
    _tx_mutex_initialize();
 80040ac:	600b      	str	r3, [r1, #0]
 80040ae:	6013      	str	r3, [r2, #0]
#endif
}
 80040b0:	bd38      	pop	{r3, r4, r5, pc}
 80040b2:	bf00      	nop
 80040b4:	20000f9c 	.word	0x20000f9c
 80040b8:	20000f80 	.word	0x20000f80
 80040bc:	20000f90 	.word	0x20000f90
 80040c0:	20000f7c 	.word	0x20000f7c
 80040c4:	20000f70 	.word	0x20000f70
 80040c8:	20000f94 	.word	0x20000f94
 80040cc:	20000f98 	.word	0x20000f98
 80040d0:	20000f8c 	.word	0x20000f8c
 80040d4:	20000f84 	.word	0x20000f84
 80040d8:	20000fa0 	.word	0x20000fa0
 80040dc:	20000f78 	.word	0x20000f78
 80040e0:	20000f74 	.word	0x20000f74

080040e4 <_tx_mutex_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	460d      	mov	r5, r1
 80040e8:	4614      	mov	r4, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80040ea:	2100      	movs	r1, #0
 80040ec:	2234      	movs	r2, #52	; 0x34
 80040ee:	f001 f81d 	bl	800512c <memset>
 80040f2:	4603      	mov	r3, r0

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80040f4:	6045      	str	r5, [r0, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80040f6:	6104      	str	r4, [r0, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80040f8:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80040fc:	b672      	cpsid	i
    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80040fe:	490c      	ldr	r1, [pc, #48]	; (8004130 <_tx_mutex_create+0x4c>)
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8004100:	480c      	ldr	r0, [pc, #48]	; (8004134 <_tx_mutex_create+0x50>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8004102:	4e0d      	ldr	r6, [pc, #52]	; (8004138 <_tx_mutex_create+0x54>)
    if (_tx_mutex_created_count == TX_EMPTY)
 8004104:	680a      	ldr	r2, [r1, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8004106:	4d0d      	ldr	r5, [pc, #52]	; (800413c <_tx_mutex_create+0x58>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8004108:	601e      	str	r6, [r3, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800410a:	6005      	str	r5, [r0, #0]
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800410c:	480c      	ldr	r0, [pc, #48]	; (8004140 <_tx_mutex_create+0x5c>)
    if (_tx_mutex_created_count == TX_EMPTY)
 800410e:	b15a      	cbz	r2, 8004128 <_tx_mutex_create+0x44>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8004110:	6800      	ldr	r0, [r0, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8004112:	6a45      	ldr	r5, [r0, #36]	; 0x24

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8004114:	6243      	str	r3, [r0, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8004116:	622b      	str	r3, [r5, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8004118:	e9c3 0508 	strd	r0, r5, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800411c:	3201      	adds	r2, #1
 800411e:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004120:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8004124:	2000      	movs	r0, #0
 8004126:	bd70      	pop	{r4, r5, r6, pc}
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8004128:	e9c3 3308 	strd	r3, r3, [r3, #32]
        _tx_mutex_created_ptr =                   mutex_ptr;
 800412c:	6003      	str	r3, [r0, #0]
 800412e:	e7f5      	b.n	800411c <_tx_mutex_create+0x38>
 8004130:	20000f74 	.word	0x20000f74
 8004134:	200009c0 	.word	0x200009c0
 8004138:	4d555445 	.word	0x4d555445
 800413c:	08004ef5 	.word	0x08004ef5
 8004140:	20000f78 	.word	0x20000f78

08004144 <_tx_mutex_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004146:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800414a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800414c:	4a3b      	ldr	r2, [pc, #236]	; (800423c <_tx_mutex_get+0xf8>)

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800414e:	6883      	ldr	r3, [r0, #8]
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004150:	6814      	ldr	r4, [r2, #0]
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8004152:	b9e3      	cbnz	r3, 800418e <_tx_mutex_get+0x4a>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8004154:	2301      	movs	r3, #1
 8004156:	e9c0 3402 	strd	r3, r4, [r0, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800415a:	b1a4      	cbz	r4, 8004186 <_tx_mutex_get+0x42>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800415c:	6903      	ldr	r3, [r0, #16]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d103      	bne.n	800416a <_tx_mutex_get+0x26>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8004162:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8004164:	2320      	movs	r3, #32
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8004166:	6142      	str	r2, [r0, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8004168:	6283      	str	r3, [r0, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800416a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800416e:	2b00      	cmp	r3, #0
 8004170:	d044      	beq.n	80041fc <_tx_mutex_get+0xb8>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8004172:	6b1a      	ldr	r2, [r3, #48]	; 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8004174:	6318      	str	r0, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8004176:	62d0      	str	r0, [r2, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8004178:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800417c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8004180:	3301      	adds	r3, #1
 8004182:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004186:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800418a:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 800418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800418e:	68c2      	ldr	r2, [r0, #12]
 8004190:	42a2      	cmp	r2, r4
 8004192:	d029      	beq.n	80041e8 <_tx_mutex_get+0xa4>
        if (wait_option != TX_NO_WAIT)
 8004194:	b371      	cbz	r1, 80041f4 <_tx_mutex_get+0xb0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8004196:	4e2a      	ldr	r6, [pc, #168]	; (8004240 <_tx_mutex_get+0xfc>)
 8004198:	6833      	ldr	r3, [r6, #0]
 800419a:	bb5b      	cbnz	r3, 80041f4 <_tx_mutex_get+0xb0>
                thread_ptr -> tx_thread_suspension_sequence++;
 800419c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80041a0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8004244 <_tx_mutex_get+0x100>
                thread_ptr -> tx_thread_suspension_sequence++;
 80041a4:	1c5f      	adds	r7, r3, #1
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80041a6:	69c3      	ldr	r3, [r0, #28]
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80041a8:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 80041aa:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80041ae:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80041b2:	bb43      	cbnz	r3, 8004206 <_tx_mutex_get+0xc2>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 80041b4:	6184      	str	r4, [r0, #24]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80041b6:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
                _tx_thread_preempt_disable++;
 80041ba:	6837      	ldr	r7, [r6, #0]
                mutex_ptr -> tx_mutex_suspended_count++;
 80041bc:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80041be:	f04f 0c0d 	mov.w	ip, #13
                mutex_ptr -> tx_mutex_suspended_count++;
 80041c2:	61c3      	str	r3, [r0, #28]
                _tx_thread_preempt_disable++;
 80041c4:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80041c6:	2301      	movs	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80041c8:	64e1      	str	r1, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 80041ca:	6037      	str	r7, [r6, #0]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80041cc:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80041d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80041d2:	f385 8810 	msr	PRIMASK, r5
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80041d6:	6903      	ldr	r3, [r0, #16]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d01d      	beq.n	8004218 <_tx_mutex_get+0xd4>
                _tx_thread_system_suspend(thread_ptr);
 80041dc:	4620      	mov	r0, r4
 80041de:	f7fe fc7f 	bl	8002ae0 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 80041e2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 80041e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mutex_ptr -> tx_mutex_ownership_count++;
 80041e8:	3301      	adds	r3, #1
 80041ea:	6083      	str	r3, [r0, #8]
 80041ec:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 80041f0:	2000      	movs	r0, #0
 80041f2:	e7cb      	b.n	800418c <_tx_mutex_get+0x48>
 80041f4:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NOT_AVAILABLE;
 80041f8:	201d      	movs	r0, #29
}
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80041fc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8004200:	e9c0 000b 	strd	r0, r0, [r0, #44]	; 0x2c
 8004204:	e7ba      	b.n	800417c <_tx_mutex_get+0x38>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8004206:	6987      	ldr	r7, [r0, #24]
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8004208:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800420c:	e9c4 7c1c 	strd	r7, ip, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004210:	f8cc 4070 	str.w	r4, [ip, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8004214:	677c      	str	r4, [r7, #116]	; 0x74
 8004216:	e7d0      	b.n	80041ba <_tx_mutex_get+0x76>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8004218:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800421a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800421c:	428b      	cmp	r3, r1
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800421e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8004222:	bf88      	it	hi
 8004224:	6281      	strhi	r1, [r0, #40]	; 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8004226:	4299      	cmp	r1, r3
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8004228:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800422a:	bf38      	it	cc
 800422c:	f8c2 109c 	strcc.w	r1, [r2, #156]	; 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8004230:	4299      	cmp	r1, r3
 8004232:	d2d3      	bcs.n	80041dc <_tx_mutex_get+0x98>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8004234:	4610      	mov	r0, r2
 8004236:	f000 f807 	bl	8004248 <_tx_mutex_priority_change>
 800423a:	e7cf      	b.n	80041dc <_tx_mutex_get+0x98>
 800423c:	200009dc 	.word	0x200009dc
 8004240:	200009d8 	.word	0x200009d8
 8004244:	08004e75 	.word	0x08004e75

08004248 <_tx_mutex_priority_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800424e:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004252:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8004254:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004256:	b152      	cbz	r2, 800426e <_tx_mutex_priority_change+0x26>
 8004258:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800425c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800425e:	428a      	cmp	r2, r1
 8004260:	bf28      	it	cs
 8004262:	460a      	movcs	r2, r1
 8004264:	63c2      	str	r2, [r0, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004266:	f386 8810 	msr	PRIMASK, r6
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800426a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426e:	460d      	mov	r5, r1
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8004270:	4925      	ldr	r1, [pc, #148]	; (8004308 <_tx_mutex_priority_change+0xc0>)
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8004272:	f04f 0c03 	mov.w	ip, #3
        execute_ptr =  _tx_thread_execute_ptr;
 8004276:	4f25      	ldr	r7, [pc, #148]	; (800430c <_tx_mutex_priority_change+0xc4>)
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8004278:	680b      	ldr	r3, [r1, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800427a:	f04f 0a01 	mov.w	sl, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800427e:	64c2      	str	r2, [r0, #76]	; 0x4c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8004280:	3302      	adds	r3, #2
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8004282:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004286:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800428a:	600b      	str	r3, [r1, #0]
        execute_ptr =  _tx_thread_execute_ptr;
 800428c:	f8d7 8000 	ldr.w	r8, [r7]
        original_priority =  thread_ptr -> tx_thread_priority;
 8004290:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 8004294:	f386 8810 	msr	PRIMASK, r6
        _tx_thread_system_suspend(thread_ptr);
 8004298:	f7fe fc22 	bl	8002ae0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800429c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80042a0:	b672      	cpsid	i
 80042a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        thread_ptr -> tx_thread_priority =  new_priority;
 80042a6:	62e5      	str	r5, [r4, #44]	; 0x2c
 80042a8:	42ab      	cmp	r3, r5
 80042aa:	bf28      	it	cs
 80042ac:	462b      	movcs	r3, r5
 80042ae:	63e3      	str	r3, [r4, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80042b0:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f000 fc93 	bl	8004be0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80042ba:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80042be:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 80042c0:	683b      	ldr	r3, [r7, #0]
        if (thread_ptr != next_execute_ptr)
 80042c2:	429c      	cmp	r4, r3
 80042c4:	d007      	beq.n	80042d6 <_tx_mutex_priority_change+0x8e>
            if (thread_ptr -> tx_thread_state == TX_READY)
 80042c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80042c8:	b92a      	cbnz	r2, 80042d6 <_tx_mutex_priority_change+0x8e>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d805      	bhi.n	80042de <_tx_mutex_priority_change+0x96>
                    if (thread_ptr == execute_ptr)
 80042d2:	4544      	cmp	r4, r8
 80042d4:	d010      	beq.n	80042f8 <_tx_mutex_priority_change+0xb0>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80042d6:	f381 8810 	msr	PRIMASK, r1
}
 80042da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 80042de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80042e0:	4283      	cmp	r3, r0
 80042e2:	d9f8      	bls.n	80042d6 <_tx_mutex_priority_change+0x8e>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 80042e4:	4282      	cmp	r2, r0
 80042e6:	d207      	bcs.n	80042f8 <_tx_mutex_priority_change+0xb0>
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80042e8:	4809      	ldr	r0, [pc, #36]	; (8004310 <_tx_mutex_priority_change+0xc8>)
                            TX_MOD32_BIT_SET(next_execute_ptr -> tx_thread_priority, priority_bit)
 80042ea:	fa0a fa02 	lsl.w	sl, sl, r2
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80042ee:	6803      	ldr	r3, [r0, #0]
 80042f0:	ea43 030a 	orr.w	r3, r3, sl
 80042f4:	6003      	str	r3, [r0, #0]
 80042f6:	e7ee      	b.n	80042d6 <_tx_mutex_priority_change+0x8e>
                            if (original_priority < new_priority)
 80042f8:	45a9      	cmp	r9, r5
                            _tx_thread_execute_ptr =  thread_ptr;
 80042fa:	603c      	str	r4, [r7, #0]
                            if (original_priority < new_priority)
 80042fc:	d2eb      	bcs.n	80042d6 <_tx_mutex_priority_change+0x8e>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <_tx_mutex_priority_change+0xcc>)
 8004300:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8004304:	e7e7      	b.n	80042d6 <_tx_mutex_priority_change+0x8e>
 8004306:	bf00      	nop
 8004308:	200009d8 	.word	0x200009d8
 800430c:	200009e0 	.word	0x200009e0
 8004310:	200009e8 	.word	0x200009e8
 8004314:	20000940 	.word	0x20000940

08004318 <_tx_mutex_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8004318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800431c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004320:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8004322:	6882      	ldr	r2, [r0, #8]
 8004324:	2a00      	cmp	r2, #0
 8004326:	d056      	beq.n	80043d6 <_tx_mutex_put+0xbe>

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004328:	497e      	ldr	r1, [pc, #504]	; (8004524 <_tx_mutex_put+0x20c>)
 800432a:	46a4      	mov	ip, r4
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800432c:	68c3      	ldr	r3, [r0, #12]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800432e:	6809      	ldr	r1, [r1, #0]
 8004330:	428b      	cmp	r3, r1
 8004332:	d003      	beq.n	800433c <_tx_mutex_put+0x24>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8004334:	4e7c      	ldr	r6, [pc, #496]	; (8004528 <_tx_mutex_put+0x210>)
 8004336:	6831      	ldr	r1, [r6, #0]
 8004338:	2900      	cmp	r1, #0
 800433a:	d04c      	beq.n	80043d6 <_tx_mutex_put+0xbe>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800433c:	3a01      	subs	r2, #1
 800433e:	6082      	str	r2, [r0, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8004340:	2a00      	cmp	r2, #0
 8004342:	d143      	bne.n	80043cc <_tx_mutex_put+0xb4>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8004344:	2b00      	cmp	r3, #0
 8004346:	d041      	beq.n	80043cc <_tx_mutex_put+0xb4>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8004348:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800434c:	3a01      	subs	r2, #1
 800434e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8004352:	2a00      	cmp	r2, #0
 8004354:	d144      	bne.n	80043e0 <_tx_mutex_put+0xc8>
                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8004356:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800435a:	6987      	ldr	r7, [r0, #24]
 800435c:	6902      	ldr	r2, [r0, #16]
 800435e:	2f00      	cmp	r7, #0
 8004360:	f000 8082 	beq.w	8004468 <_tx_mutex_put+0x150>
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8004364:	2a01      	cmp	r2, #1
 8004366:	4605      	mov	r5, r0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8004368:	f8d3 8094 	ldr.w	r8, [r3, #148]	; 0x94
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800436c:	f000 8084 	beq.w	8004478 <_tx_mutex_put+0x160>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8004370:	69c3      	ldr	r3, [r0, #28]
 8004372:	4e6d      	ldr	r6, [pc, #436]	; (8004528 <_tx_mutex_put+0x210>)
 8004374:	2b01      	cmp	r3, #1
 8004376:	d95d      	bls.n	8004434 <_tx_mutex_put+0x11c>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8004378:	2f00      	cmp	r7, #0
 800437a:	f000 8097 	beq.w	80044ac <_tx_mutex_put+0x194>
                        old_owner =      TX_NULL;
 800437e:	2400      	movs	r4, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8004380:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8004384:	2a00      	cmp	r2, #0
 8004386:	d167      	bne.n	8004458 <_tx_mutex_put+0x140>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8004388:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800438c:	e9c5 550b 	strd	r5, r5, [r5, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8004390:	3201      	adds	r2, #1
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8004392:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8004394:	2101      	movs	r1, #1
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8004396:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
                            mutex_ptr -> tx_mutex_suspended_count--;
 800439a:	61eb      	str	r3, [r5, #28]
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800439c:	e9c5 1702 	strd	r1, r7, [r5, #8]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d153      	bne.n	800444c <_tx_mutex_put+0x134>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80043a4:	61ab      	str	r3, [r5, #24]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80043a6:	6833      	ldr	r3, [r6, #0]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80043a8:	2200      	movs	r2, #0
                            _tx_thread_preempt_disable++;
 80043aa:	3301      	adds	r3, #1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80043ac:	66ba      	str	r2, [r7, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80043ae:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 80043b2:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80043b4:	f38c 8810 	msr	PRIMASK, ip

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80043b8:	692b      	ldr	r3, [r5, #16]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	f000 8097 	beq.w	80044ee <_tx_mutex_put+0x1d6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80043c0:	4638      	mov	r0, r7
 80043c2:	f000 fc0d 	bl	8004be0 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80043c6:	2000      	movs	r0, #0
        status =  TX_NOT_OWNED;
    }

    /* Return the completion status.  */
    return(status);
}
 80043c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043cc:	f384 8810 	msr	PRIMASK, r4
                status =  TX_SUCCESS;
 80043d0:	2000      	movs	r0, #0
}
 80043d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d6:	f384 8810 	msr	PRIMASK, r4
        status =  TX_NOT_OWNED;
 80043da:	201e      	movs	r0, #30
}
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80043e0:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 80043e4:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80043e8:	4285      	cmp	r5, r0
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80043ea:	6311      	str	r1, [r2, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80043ec:	62ca      	str	r2, [r1, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80043ee:	d1b4      	bne.n	800435a <_tx_mutex_put+0x42>
 80043f0:	e7b1      	b.n	8004356 <_tx_mutex_put+0x3e>
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 80043f2:	2420      	movs	r4, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80043f4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80043f8:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 80043fa:	6832      	ldr	r2, [r6, #0]
 80043fc:	45a0      	cmp	r8, r4
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 80043fe:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8004402:	69eb      	ldr	r3, [r5, #28]
 8004404:	bf28      	it	cs
 8004406:	46a0      	movcs	r8, r4
                            _tx_thread_preempt_disable--;
 8004408:	3a01      	subs	r2, #1
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800440a:	2b01      	cmp	r3, #1
                            _tx_thread_preempt_disable--;
 800440c:	6032      	str	r2, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800440e:	d969      	bls.n	80044e4 <_tx_mutex_put+0x1cc>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8004410:	692a      	ldr	r2, [r5, #16]
 8004412:	2a01      	cmp	r2, #1
 8004414:	d176      	bne.n	8004504 <_tx_mutex_put+0x1ec>
                                _tx_thread_preempt_disable++;
 8004416:	6833      	ldr	r3, [r6, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800441c:	f38c 8810 	msr	PRIMASK, ip
                                _tx_mutex_prioritize(mutex_ptr);
 8004420:	4628      	mov	r0, r5
 8004422:	f000 fd89 	bl	8004f38 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004426:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800442a:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 800442c:	6833      	ldr	r3, [r6, #0]
 800442e:	69af      	ldr	r7, [r5, #24]
 8004430:	3b01      	subs	r3, #1
 8004432:	6033      	str	r3, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8004434:	2f00      	cmp	r7, #0
 8004436:	d039      	beq.n	80044ac <_tx_mutex_put+0x194>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8004438:	692b      	ldr	r3, [r5, #16]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d154      	bne.n	80044e8 <_tx_mutex_put+0x1d0>
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800443e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8004440:	2320      	movs	r3, #32
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8004442:	68ec      	ldr	r4, [r5, #12]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8004444:	62ab      	str	r3, [r5, #40]	; 0x28
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8004446:	616a      	str	r2, [r5, #20]
 8004448:	69eb      	ldr	r3, [r5, #28]
 800444a:	e799      	b.n	8004380 <_tx_mutex_put+0x68>
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800444c:	e9d7 321c 	ldrd	r3, r2, [r7, #112]	; 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8004450:	61ab      	str	r3, [r5, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004452:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	e7a6      	b.n	80043a6 <_tx_mutex_put+0x8e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8004458:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800445c:	6b08      	ldr	r0, [r1, #48]	; 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800445e:	630d      	str	r5, [r1, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8004460:	62c5      	str	r5, [r0, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8004462:	e9c5 100b 	strd	r1, r0, [r5, #44]	; 0x2c
 8004466:	e793      	b.n	8004390 <_tx_mutex_put+0x78>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8004468:	2a00      	cmp	r2, #0
 800446a:	f47f af7b 	bne.w	8004364 <_tx_mutex_put+0x4c>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800446e:	60c2      	str	r2, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004470:	f384 8810 	msr	PRIMASK, r4
                            status =  TX_SUCCESS;
 8004474:	4610      	mov	r0, r2
 8004476:	e7ac      	b.n	80043d2 <_tx_mutex_put+0xba>
                            _tx_thread_preempt_disable++;
 8004478:	4e2b      	ldr	r6, [pc, #172]	; (8004528 <_tx_mutex_put+0x210>)
 800447a:	6832      	ldr	r2, [r6, #0]
 800447c:	3201      	adds	r2, #1
 800447e:	6032      	str	r2, [r6, #0]
 8004480:	f384 8810 	msr	PRIMASK, r4
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8004484:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                            while (next_mutex != TX_NULL)
 8004488:	2900      	cmp	r1, #0
 800448a:	d0b2      	beq.n	80043f2 <_tx_mutex_put+0xda>
 800448c:	460a      	mov	r2, r1
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800448e:	2420      	movs	r4, #32
 8004490:	e001      	b.n	8004496 <_tx_mutex_put+0x17e>
                            while (next_mutex != TX_NULL)
 8004492:	2a00      	cmp	r2, #0
 8004494:	d0ae      	beq.n	80043f4 <_tx_mutex_put+0xdc>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8004496:	6910      	ldr	r0, [r2, #16]
 8004498:	2801      	cmp	r0, #1
 800449a:	d103      	bne.n	80044a4 <_tx_mutex_put+0x18c>
 800449c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800449e:	4284      	cmp	r4, r0
 80044a0:	bf28      	it	cs
 80044a2:	4604      	movcs	r4, r0
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 80044a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 80044a6:	4291      	cmp	r1, r2
 80044a8:	d1f3      	bne.n	8004492 <_tx_mutex_put+0x17a>
 80044aa:	e7a3      	b.n	80043f4 <_tx_mutex_put+0xdc>
                            _tx_thread_preempt_disable++;
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	6033      	str	r3, [r6, #0]
 80044b2:	f38c 8810 	msr	PRIMASK, ip
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80044b6:	68e8      	ldr	r0, [r5, #12]
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80044b8:	2220      	movs	r2, #32
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80044ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80044bc:	62aa      	str	r2, [r5, #40]	; 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80044be:	4543      	cmp	r3, r8
 80044c0:	d002      	beq.n	80044c8 <_tx_mutex_put+0x1b0>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80044c2:	4641      	mov	r1, r8
 80044c4:	f7ff fec0 	bl	8004248 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80044c8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80044cc:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 80044ce:	6833      	ldr	r3, [r6, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80044d0:	2400      	movs	r4, #0
                            _tx_thread_preempt_disable--;
 80044d2:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80044d4:	60ec      	str	r4, [r5, #12]
                            _tx_thread_preempt_disable--;
 80044d6:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80044d8:	f382 8810 	msr	PRIMASK, r2
                            _tx_thread_system_preempt_check();
 80044dc:	f000 fb62 	bl	8004ba4 <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 80044e0:	4620      	mov	r0, r4
 80044e2:	e776      	b.n	80043d2 <_tx_mutex_put+0xba>
 80044e4:	69af      	ldr	r7, [r5, #24]
 80044e6:	e7a5      	b.n	8004434 <_tx_mutex_put+0x11c>
                        old_owner =      TX_NULL;
 80044e8:	2400      	movs	r4, #0
 80044ea:	69eb      	ldr	r3, [r5, #28]
 80044ec:	e748      	b.n	8004380 <_tx_mutex_put+0x68>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80044ee:	69eb      	ldr	r3, [r5, #28]
 80044f0:	b953      	cbnz	r3, 8004508 <_tx_mutex_put+0x1f0>
                                if (old_owner -> tx_thread_priority != old_priority)
 80044f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044f4:	4543      	cmp	r3, r8
 80044f6:	f43f af63 	beq.w	80043c0 <_tx_mutex_put+0xa8>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80044fa:	4641      	mov	r1, r8
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff fea3 	bl	8004248 <_tx_mutex_priority_change>
 8004502:	e75d      	b.n	80043c0 <_tx_mutex_put+0xa8>
 8004504:	69af      	ldr	r7, [r5, #24]
 8004506:	e737      	b.n	8004378 <_tx_mutex_put+0x60>
                                    _tx_mutex_prioritize(mutex_ptr);
 8004508:	4628      	mov	r0, r5
 800450a:	f000 fd15 	bl	8004f38 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800450e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004512:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8004514:	69ab      	ldr	r3, [r5, #24]
                                    if (suspended_thread != TX_NULL)
 8004516:	b10b      	cbz	r3, 800451c <_tx_mutex_put+0x204>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	62ab      	str	r3, [r5, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800451c:	f382 8810 	msr	PRIMASK, r2
 8004520:	e7e7      	b.n	80044f2 <_tx_mutex_put+0x1da>
 8004522:	bf00      	nop
 8004524:	200009dc 	.word	0x200009dc
 8004528:	200009d8 	.word	0x200009d8

0800452c <_tx_queue_create>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size)
{
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	4617      	mov	r7, r2
 8004530:	460d      	mov	r5, r1
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8004532:	223c      	movs	r2, #60	; 0x3c
 8004534:	2100      	movs	r1, #0
{
 8004536:	4604      	mov	r4, r0
 8004538:	461e      	mov	r6, r3
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800453a:	f000 fdf7 	bl	800512c <memset>
    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800453e:	9b06      	ldr	r3, [sp, #24]
 8004540:	00b9      	lsls	r1, r7, #2
    used_words =  capacity * message_size;

    /* Save the starting address and calculate the ending address of 
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8004542:	61a6      	str	r6, [r4, #24]
    queue_ptr -> tx_queue_message_size =  message_size;
 8004544:	e9c4 5701 	strd	r5, r7, [r4, #4]
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8004548:	fbb3 f5f1 	udiv	r5, r3, r1
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800454c:	fb05 6101 	mla	r1, r5, r1, r6
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8004550:	6165      	str	r5, [r4, #20]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8004552:	61e1      	str	r1, [r4, #28]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8004554:	60e5      	str	r5, [r4, #12]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8004556:	e9c4 6608 	strd	r6, r6, [r4, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800455a:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800455e:	b672      	cpsid	i
    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <_tx_queue_create+0x60>)
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8004562:	490b      	ldr	r1, [pc, #44]	; (8004590 <_tx_queue_create+0x64>)
    if (_tx_queue_created_count == TX_EMPTY)
 8004564:	6813      	ldr	r3, [r2, #0]
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8004566:	6021      	str	r1, [r4, #0]
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8004568:	490a      	ldr	r1, [pc, #40]	; (8004594 <_tx_queue_create+0x68>)
    if (_tx_queue_created_count == TX_EMPTY)
 800456a:	b15b      	cbz	r3, 8004584 <_tx_queue_create+0x58>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800456c:	6809      	ldr	r1, [r1, #0]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800456e:	6b4d      	ldr	r5, [r1, #52]	; 0x34

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8004570:	634c      	str	r4, [r1, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8004572:	632c      	str	r4, [r5, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
        queue_ptr -> tx_queue_created_next =      next_queue;
 8004574:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8004578:	3301      	adds	r3, #1
 800457a:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800457c:	f380 8810 	msr	PRIMASK, r0
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8004580:	2000      	movs	r0, #0
 8004582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8004584:	e9c4 440c 	strd	r4, r4, [r4, #48]	; 0x30
        _tx_queue_created_ptr =                   queue_ptr;
 8004588:	600c      	str	r4, [r1, #0]
 800458a:	e7f5      	b.n	8004578 <_tx_queue_create+0x4c>
 800458c:	20000f7c 	.word	0x20000f7c
 8004590:	51554555 	.word	0x51554555
 8004594:	20000f9c 	.word	0x20000f9c

08004598 <_tx_queue_receive>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800459c:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80045a0:	b672      	cpsid	i

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
    
    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80045a2:	6904      	ldr	r4, [r0, #16]
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80045a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80045a6:	b32c      	cbz	r4, 80045f4 <_tx_queue_receive+0x5c>
 80045a8:	6887      	ldr	r7, [r0, #8]
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d152      	bne.n	8004654 <_tx_queue_receive+0xbc>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */
            
            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 80045ae:	6a02      	ldr	r2, [r0, #32]
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
            size =         queue_ptr -> tx_queue_message_size;

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80045b0:	2f01      	cmp	r7, #1
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	f102 0204 	add.w	r2, r2, #4
 80045b8:	600b      	str	r3, [r1, #0]
 80045ba:	d90c      	bls.n	80045d6 <_tx_queue_receive+0x3e>
 80045bc:	1e7b      	subs	r3, r7, #1
 80045be:	4615      	mov	r5, r2
 80045c0:	f855 cb04 	ldr.w	ip, [r5], #4
 80045c4:	3b01      	subs	r3, #1
 80045c6:	f841 cf04 	str.w	ip, [r1, #4]!
 80045ca:	d1f9      	bne.n	80045c0 <_tx_queue_receive+0x28>
 80045cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80045d0:	443b      	add	r3, r7
 80045d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 80045d6:	69c3      	ldr	r3, [r0, #28]
        
            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 80045d8:	3c01      	subs	r4, #1
            if (source == queue_ptr -> tx_queue_end)
 80045da:	4293      	cmp	r3, r2
            queue_ptr -> tx_queue_available_storage++;
 80045dc:	6943      	ldr	r3, [r0, #20]
                source =  queue_ptr -> tx_queue_start;
 80045de:	bf08      	it	eq
 80045e0:	6982      	ldreq	r2, [r0, #24]
            queue_ptr -> tx_queue_available_storage++;
 80045e2:	3301      	adds	r3, #1
            queue_ptr -> tx_queue_read =  source;
 80045e4:	6202      	str	r2, [r0, #32]
            queue_ptr -> tx_queue_available_storage++;
 80045e6:	e9c0 4304 	strd	r4, r3, [r0, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80045ea:	f386 8810 	msr	PRIMASK, r6
    status =  TX_SUCCESS;
 80045ee:	2000      	movs	r0, #0
        status =  TX_QUEUE_EMPTY;
    }

    /* Return completion status.  */
    return(status);
}
 80045f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (wait_option != TX_NO_WAIT)
 80045f4:	2a00      	cmp	r2, #0
 80045f6:	f000 8089 	beq.w	800470c <_tx_queue_receive+0x174>
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80045fa:	4d60      	ldr	r5, [pc, #384]	; (800477c <_tx_queue_receive+0x1e4>)
 80045fc:	f8d5 c000 	ldr.w	ip, [r5]
 8004600:	f1bc 0f00 	cmp.w	ip, #0
 8004604:	f040 8082 	bne.w	800470c <_tx_queue_receive+0x174>
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004608:	4c5d      	ldr	r4, [pc, #372]	; (8004780 <_tx_queue_receive+0x1e8>)
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800460a:	f8df e178 	ldr.w	lr, [pc, #376]	; 8004784 <_tx_queue_receive+0x1ec>
            TX_THREAD_GET_CURRENT(thread_ptr)
 800460e:	6824      	ldr	r4, [r4, #0]
            thread_ptr -> tx_thread_suspension_sequence++;
 8004610:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8004614:	66e0      	str	r0, [r4, #108]	; 0x6c
            thread_ptr -> tx_thread_suspension_sequence++;
 8004616:	3701      	adds	r7, #1
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8004618:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800461c:	e9c4 1c1f 	strd	r1, ip, [r4, #124]	; 0x7c
            thread_ptr -> tx_thread_suspension_sequence++;
 8004620:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
            if (suspended_count == TX_NO_SUSPENSIONS)
 8004624:	2b00      	cmp	r3, #0
 8004626:	d176      	bne.n	8004716 <_tx_queue_receive+0x17e>
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8004628:	6284      	str	r4, [r0, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800462a:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
            _tx_thread_preempt_disable++;
 800462e:	6829      	ldr	r1, [r5, #0]
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8004630:	3301      	adds	r3, #1
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8004632:	2705      	movs	r7, #5
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8004634:	62c3      	str	r3, [r0, #44]	; 0x2c
            _tx_thread_preempt_disable++;
 8004636:	3101      	adds	r1, #1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004638:	2301      	movs	r3, #1
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800463a:	64e2      	str	r2, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 800463c:	6029      	str	r1, [r5, #0]
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800463e:	6327      	str	r7, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004640:	63a3      	str	r3, [r4, #56]	; 0x38
 8004642:	f386 8810 	msr	PRIMASK, r6
            _tx_thread_system_suspend(thread_ptr);
 8004646:	4620      	mov	r0, r4
 8004648:	f7fe fa4a 	bl	8002ae0 <_tx_thread_system_suspend>
            status =  thread_ptr -> tx_thread_suspend_status;
 800464c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8004654:	f8d0 c028 	ldr.w	ip, [r0, #40]	; 0x28
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8004658:	e9dc 841f 	ldrd	r8, r4, [ip, #124]	; 0x7c
 800465c:	2c01      	cmp	r4, #1
 800465e:	f108 0204 	add.w	r2, r8, #4
 8004662:	d05f      	beq.n	8004724 <_tx_queue_receive+0x18c>
                source =       queue_ptr -> tx_queue_read;
 8004664:	6a05      	ldr	r5, [r0, #32]
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004666:	2f01      	cmp	r7, #1
 8004668:	682c      	ldr	r4, [r5, #0]
 800466a:	f105 0e04 	add.w	lr, r5, #4
 800466e:	600c      	str	r4, [r1, #0]
 8004670:	d90c      	bls.n	800468c <_tx_queue_receive+0xf4>
 8004672:	1e7c      	subs	r4, r7, #1
 8004674:	4675      	mov	r5, lr
 8004676:	f855 9b04 	ldr.w	r9, [r5], #4
 800467a:	3c01      	subs	r4, #1
 800467c:	f841 9f04 	str.w	r9, [r1, #4]!
 8004680:	d1f9      	bne.n	8004676 <_tx_queue_receive+0xde>
 8004682:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8004686:	4439      	add	r1, r7
 8004688:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
                _tx_thread_preempt_disable++;
 800468c:	4d3b      	ldr	r5, [pc, #236]	; (800477c <_tx_queue_receive+0x1e4>)
                if (source == queue_ptr -> tx_queue_end)
 800468e:	f8d0 901c 	ldr.w	r9, [r0, #28]
                _tx_thread_preempt_disable++;
 8004692:	6829      	ldr	r1, [r5, #0]
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004694:	f8d8 a000 	ldr.w	sl, [r8]
                if (source == queue_ptr -> tx_queue_end)
 8004698:	45f1      	cmp	r9, lr
                _tx_thread_preempt_disable++;
 800469a:	f101 0101 	add.w	r1, r1, #1
                destination =  queue_ptr -> tx_queue_write;
 800469e:	6a44      	ldr	r4, [r0, #36]	; 0x24
                    source =  queue_ptr -> tx_queue_start;
 80046a0:	bf08      	it	eq
 80046a2:	f8d0 e018 	ldreq.w	lr, [r0, #24]
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80046a6:	2f01      	cmp	r7, #1
                _tx_thread_preempt_disable++;
 80046a8:	6029      	str	r1, [r5, #0]
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80046aa:	f104 0804 	add.w	r8, r4, #4
                _tx_thread_preempt_disable--;
 80046ae:	6829      	ldr	r1, [r5, #0]
                queue_ptr -> tx_queue_read =  source;
 80046b0:	f8c0 e020 	str.w	lr, [r0, #32]
                _tx_thread_preempt_disable--;
 80046b4:	f101 31ff 	add.w	r1, r1, #4294967295
 80046b8:	6029      	str	r1, [r5, #0]
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80046ba:	f8c4 a000 	str.w	sl, [r4]
 80046be:	d90b      	bls.n	80046d8 <_tx_queue_receive+0x140>
 80046c0:	1e79      	subs	r1, r7, #1
 80046c2:	f852 eb04 	ldr.w	lr, [r2], #4
 80046c6:	3901      	subs	r1, #1
 80046c8:	f844 ef04 	str.w	lr, [r4, #4]!
 80046cc:	d1f9      	bne.n	80046c2 <_tx_queue_receive+0x12a>
 80046ce:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80046d2:	443a      	add	r2, r7
 80046d4:	eb08 0882 	add.w	r8, r8, r2, lsl #2
                if (destination == queue_ptr -> tx_queue_end)
 80046d8:	45c1      	cmp	r9, r8
                    destination =  queue_ptr -> tx_queue_start;
 80046da:	bf08      	it	eq
 80046dc:	f8d0 8018 	ldreq.w	r8, [r0, #24]
                if (suspended_count == TX_NO_SUSPENSIONS)
 80046e0:	3b01      	subs	r3, #1
                queue_ptr -> tx_queue_write =  destination;
 80046e2:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
                if (suspended_count == TX_NO_SUSPENSIONS)
 80046e6:	d141      	bne.n	800476c <_tx_queue_receive+0x1d4>
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80046e8:	6283      	str	r3, [r0, #40]	; 0x28
                _tx_thread_preempt_disable++;
 80046ea:	682a      	ldr	r2, [r5, #0]
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80046ec:	2400      	movs	r4, #0
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80046ee:	62c3      	str	r3, [r0, #44]	; 0x2c
                _tx_thread_preempt_disable++;
 80046f0:	3201      	adds	r2, #1
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80046f2:	f8cc 4068 	str.w	r4, [ip, #104]	; 0x68
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80046f6:	f8cc 4084 	str.w	r4, [ip, #132]	; 0x84
                _tx_thread_preempt_disable++;
 80046fa:	602a      	str	r2, [r5, #0]
 80046fc:	f386 8810 	msr	PRIMASK, r6
                _tx_thread_system_resume(thread_ptr);
 8004700:	4660      	mov	r0, ip
 8004702:	f000 fa6d 	bl	8004be0 <_tx_thread_system_resume>
    status =  TX_SUCCESS;
 8004706:	4620      	mov	r0, r4
}
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	f386 8810 	msr	PRIMASK, r6
        status =  TX_QUEUE_EMPTY;
 8004710:	200a      	movs	r0, #10
}
 8004712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8004716:	6a81      	ldr	r1, [r0, #40]	; 0x28
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8004718:	6f4f      	ldr	r7, [r1, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800471a:	e9c4 171c 	strd	r1, r7, [r4, #112]	; 0x70
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800471e:	673c      	str	r4, [r7, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8004720:	674c      	str	r4, [r1, #116]	; 0x74
 8004722:	e784      	b.n	800462e <_tx_queue_receive+0x96>
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004724:	f8d8 4000 	ldr.w	r4, [r8]
 8004728:	2f01      	cmp	r7, #1
 800472a:	600c      	str	r4, [r1, #0]
 800472c:	d906      	bls.n	800473c <_tx_queue_receive+0x1a4>
 800472e:	3f01      	subs	r7, #1
 8004730:	f852 4b04 	ldr.w	r4, [r2], #4
 8004734:	3f01      	subs	r7, #1
 8004736:	f841 4f04 	str.w	r4, [r1, #4]!
 800473a:	d1f9      	bne.n	8004730 <_tx_queue_receive+0x198>
                if (suspended_count == TX_NO_SUSPENSIONS)
 800473c:	3b01      	subs	r3, #1
 800473e:	d01b      	beq.n	8004778 <_tx_queue_receive+0x1e0>
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8004740:	e9dc 211c 	ldrd	r2, r1, [ip, #112]	; 0x70
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8004744:	6282      	str	r2, [r0, #40]	; 0x28
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004746:	6751      	str	r1, [r2, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8004748:	670a      	str	r2, [r1, #112]	; 0x70
                _tx_thread_preempt_disable++;
 800474a:	4a0c      	ldr	r2, [pc, #48]	; (800477c <_tx_queue_receive+0x1e4>)
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800474c:	2400      	movs	r4, #0
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800474e:	62c3      	str	r3, [r0, #44]	; 0x2c
                _tx_thread_preempt_disable++;
 8004750:	6813      	ldr	r3, [r2, #0]
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004752:	f8cc 4068 	str.w	r4, [ip, #104]	; 0x68
                _tx_thread_preempt_disable++;
 8004756:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004758:	f8cc 4084 	str.w	r4, [ip, #132]	; 0x84
                _tx_thread_preempt_disable++;
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	f386 8810 	msr	PRIMASK, r6
                _tx_thread_system_resume(thread_ptr);
 8004762:	4660      	mov	r0, ip
 8004764:	f000 fa3c 	bl	8004be0 <_tx_thread_system_resume>
    status =  TX_SUCCESS;
 8004768:	4620      	mov	r0, r4
 800476a:	e7d2      	b.n	8004712 <_tx_queue_receive+0x17a>
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800476c:	e9dc 211c 	ldrd	r2, r1, [ip, #112]	; 0x70
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8004770:	6282      	str	r2, [r0, #40]	; 0x28
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8004772:	6751      	str	r1, [r2, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8004774:	670a      	str	r2, [r1, #112]	; 0x70
 8004776:	e7b8      	b.n	80046ea <_tx_queue_receive+0x152>
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8004778:	6283      	str	r3, [r0, #40]	; 0x28
 800477a:	e7e6      	b.n	800474a <_tx_queue_receive+0x1b2>
 800477c:	200009d8 	.word	0x200009d8
 8004780:	200009dc 	.word	0x200009dc
 8004784:	08004fdd 	.word	0x08004fdd

08004788 <_tx_queue_send>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800478c:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004790:	b672      	cpsid	i

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8004792:	6940      	ldr	r0, [r0, #20]
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8004794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8004796:	b350      	cbz	r0, 80047ee <_tx_queue_send+0x66>
 8004798:	68a5      	ldr	r5, [r4, #8]
 800479a:	f851 cb04 	ldr.w	ip, [r1], #4
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d15e      	bne.n	8004860 <_tx_queue_send+0xd8>
            
            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80047a2:	6922      	ldr	r2, [r4, #16]
            queue_ptr -> tx_queue_available_storage--;
 80047a4:	3801      	subs	r0, #1

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
            destination =  queue_ptr -> tx_queue_write;
 80047a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
            size =         queue_ptr -> tx_queue_message_size;

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80047a8:	2d01      	cmp	r5, #1
            queue_ptr -> tx_queue_enqueued++;
 80047aa:	f102 0201 	add.w	r2, r2, #1
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80047ae:	f103 0704 	add.w	r7, r3, #4
            queue_ptr -> tx_queue_enqueued++;
 80047b2:	e9c4 2004 	strd	r2, r0, [r4, #16]
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80047b6:	f8c3 c000 	str.w	ip, [r3]
 80047ba:	d90b      	bls.n	80047d4 <_tx_queue_send+0x4c>
 80047bc:	1e6a      	subs	r2, r5, #1
 80047be:	f851 0b04 	ldr.w	r0, [r1], #4
 80047c2:	3a01      	subs	r2, #1
 80047c4:	f843 0f04 	str.w	r0, [r3, #4]!
 80047c8:	d1f9      	bne.n	80047be <_tx_queue_send+0x36>
 80047ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80047ce:	442b      	add	r3, r5
 80047d0:	eb07 0783 	add.w	r7, r7, r3, lsl #2

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 80047d4:	69e3      	ldr	r3, [r4, #28]
 80047d6:	42bb      	cmp	r3, r7
            queue_ptr -> tx_queue_write =  destination;

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 80047d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                destination =  queue_ptr -> tx_queue_start;
 80047da:	bf08      	it	eq
 80047dc:	69a7      	ldreq	r7, [r4, #24]
            queue_ptr -> tx_queue_write =  destination;
 80047de:	6267      	str	r7, [r4, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80047e0:	f386 8810 	msr	PRIMASK, r6
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 80047e4:	b10b      	cbz	r3, 80047ea <_tx_queue_send+0x62>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 80047e6:	4620      	mov	r0, r4
 80047e8:	4798      	blx	r3
    status =  TX_SUCCESS;
 80047ea:	2000      	movs	r0, #0
        status =  TX_QUEUE_FULL;
    }

    /* Return completion status.  */
    return(status);
}
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (wait_option != TX_NO_WAIT)
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	d05f      	beq.n	80048b2 <_tx_queue_send+0x12a>
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80047f2:	4835      	ldr	r0, [pc, #212]	; (80048c8 <_tx_queue_send+0x140>)
 80047f4:	f8d0 c000 	ldr.w	ip, [r0]
 80047f8:	f1bc 0f00 	cmp.w	ip, #0
 80047fc:	d159      	bne.n	80048b2 <_tx_queue_send+0x12a>
            TX_THREAD_GET_CURRENT(thread_ptr)
 80047fe:	4d33      	ldr	r5, [pc, #204]	; (80048cc <_tx_queue_send+0x144>)
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8004800:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 80048d0 <_tx_queue_send+0x148>
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004804:	682d      	ldr	r5, [r5, #0]
            thread_ptr -> tx_thread_suspension_sequence++;
 8004806:	f8d5 70c0 	ldr.w	r7, [r5, #192]	; 0xc0
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800480a:	66ec      	str	r4, [r5, #108]	; 0x6c
            thread_ptr -> tx_thread_suspension_sequence++;
 800480c:	3701      	adds	r7, #1
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800480e:	f8c5 e068 	str.w	lr, [r5, #104]	; 0x68
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8004812:	e9c5 1c1f 	strd	r1, ip, [r5, #124]	; 0x7c
            thread_ptr -> tx_thread_suspension_sequence++;
 8004816:	f8c5 70c0 	str.w	r7, [r5, #192]	; 0xc0
            if (suspended_count == TX_NO_SUSPENSIONS)
 800481a:	2b00      	cmp	r3, #0
 800481c:	d04f      	beq.n	80048be <_tx_queue_send+0x136>
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800481e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8004820:	6f4f      	ldr	r7, [r1, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004822:	e9c5 171c 	strd	r1, r7, [r5, #112]	; 0x70
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004826:	673d      	str	r5, [r7, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8004828:	674d      	str	r5, [r1, #116]	; 0x74
            _tx_thread_preempt_disable++;
 800482a:	6801      	ldr	r1, [r0, #0]
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800482c:	3301      	adds	r3, #1
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800482e:	2705      	movs	r7, #5
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8004830:	62e3      	str	r3, [r4, #44]	; 0x2c
            _tx_thread_preempt_disable++;
 8004832:	3101      	adds	r1, #1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004834:	2301      	movs	r3, #1
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8004836:	632f      	str	r7, [r5, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8004838:	6001      	str	r1, [r0, #0]
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 800483a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800483c:	63ab      	str	r3, [r5, #56]	; 0x38
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800483e:	64ea      	str	r2, [r5, #76]	; 0x4c
 8004840:	f386 8810 	msr	PRIMASK, r6
            _tx_thread_system_suspend(thread_ptr);
 8004844:	4628      	mov	r0, r5
 8004846:	f7fe f94b 	bl	8002ae0 <_tx_thread_system_suspend>
            if (thread_ptr -> tx_thread_suspend_status == TX_SUCCESS)
 800484a:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
                if (queue_send_notify != TX_NULL)
 800484e:	2800      	cmp	r0, #0
 8004850:	d1cc      	bne.n	80047ec <_tx_queue_send+0x64>
 8004852:	2f00      	cmp	r7, #0
 8004854:	d0ca      	beq.n	80047ec <_tx_queue_send+0x64>
                    (queue_send_notify)(queue_ptr);
 8004856:	4620      	mov	r0, r4
 8004858:	47b8      	blx	r7
 800485a:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
}
 800485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (suspended_count == TX_NO_SUSPENSIONS)
 8004860:	3b01      	subs	r3, #1
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8004862:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            if (suspended_count == TX_NO_SUSPENSIONS)
 8004864:	d029      	beq.n	80048ba <_tx_queue_send+0x132>
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004866:	e9d0 271c 	ldrd	r2, r7, [r0, #112]	; 0x70
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800486a:	62a2      	str	r2, [r4, #40]	; 0x28
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800486c:	6757      	str	r7, [r2, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800486e:	673a      	str	r2, [r7, #112]	; 0x70
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004870:	2700      	movs	r7, #0
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8004872:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004874:	2d01      	cmp	r5, #1
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8004876:	62e3      	str	r3, [r4, #44]	; 0x2c
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004878:	6687      	str	r7, [r0, #104]	; 0x68
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800487a:	f8c2 c000 	str.w	ip, [r2]
 800487e:	d906      	bls.n	800488e <_tx_queue_send+0x106>
 8004880:	1e6b      	subs	r3, r5, #1
 8004882:	f851 5b04 	ldr.w	r5, [r1], #4
 8004886:	3b01      	subs	r3, #1
 8004888:	f842 5f04 	str.w	r5, [r2, #4]!
 800488c:	d1f9      	bne.n	8004882 <_tx_queue_send+0xfa>
            _tx_thread_preempt_disable++;
 800488e:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <_tx_queue_send+0x140>)
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004890:	2500      	movs	r5, #0
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8004892:	6ba7      	ldr	r7, [r4, #56]	; 0x38
            _tx_thread_preempt_disable++;
 8004894:	6813      	ldr	r3, [r2, #0]
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004896:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 800489a:	3301      	adds	r3, #1
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	f386 8810 	msr	PRIMASK, r6
            _tx_thread_system_resume(thread_ptr);
 80048a2:	f000 f99d 	bl	8004be0 <_tx_thread_system_resume>
            if (queue_send_notify != TX_NULL)
 80048a6:	2f00      	cmp	r7, #0
 80048a8:	d09f      	beq.n	80047ea <_tx_queue_send+0x62>
                (queue_send_notify)(queue_ptr);
 80048aa:	4620      	mov	r0, r4
 80048ac:	47b8      	blx	r7
    status =  TX_SUCCESS;
 80048ae:	4628      	mov	r0, r5
}
 80048b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b2:	f386 8810 	msr	PRIMASK, r6
        status =  TX_QUEUE_FULL;
 80048b6:	200b      	movs	r0, #11
}
 80048b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80048ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80048bc:	e7d8      	b.n	8004870 <_tx_queue_send+0xe8>
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80048be:	62a5      	str	r5, [r4, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80048c0:	e9c5 551c 	strd	r5, r5, [r5, #112]	; 0x70
 80048c4:	e7b1      	b.n	800482a <_tx_queue_send+0xa2>
 80048c6:	bf00      	nop
 80048c8:	200009d8 	.word	0x200009d8
 80048cc:	200009dc 	.word	0x200009dc
 80048d0:	08004fdd 	.word	0x08004fdd

080048d4 <_tx_semaphore_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	460d      	mov	r5, r1
 80048d8:	4614      	mov	r4, r2
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80048da:	2100      	movs	r1, #0
 80048dc:	2220      	movs	r2, #32
 80048de:	f000 fc25 	bl	800512c <memset>
 80048e2:	4603      	mov	r3, r0

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80048e4:	e9c0 5401 	strd	r5, r4, [r0, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80048e8:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80048ec:	b672      	cpsid	i
    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80048ee:	490b      	ldr	r1, [pc, #44]	; (800491c <_tx_semaphore_create+0x48>)
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80048f0:	480b      	ldr	r0, [pc, #44]	; (8004920 <_tx_semaphore_create+0x4c>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 80048f2:	680a      	ldr	r2, [r1, #0]
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80048f4:	6018      	str	r0, [r3, #0]
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80048f6:	480b      	ldr	r0, [pc, #44]	; (8004924 <_tx_semaphore_create+0x50>)
    if (_tx_semaphore_created_count == TX_EMPTY)
 80048f8:	b15a      	cbz	r2, 8004912 <_tx_semaphore_create+0x3e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80048fa:	6800      	ldr	r0, [r0, #0]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80048fc:	6985      	ldr	r5, [r0, #24]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80048fe:	6183      	str	r3, [r0, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8004900:	616b      	str	r3, [r5, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8004902:	e9c3 0505 	strd	r0, r5, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8004906:	3201      	adds	r2, #1
 8004908:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800490a:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800490e:	2000      	movs	r0, #0
 8004910:	bd38      	pop	{r3, r4, r5, pc}
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8004912:	e9c3 3305 	strd	r3, r3, [r3, #20]
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8004916:	6003      	str	r3, [r0, #0]
 8004918:	e7f5      	b.n	8004906 <_tx_semaphore_create+0x32>
 800491a:	bf00      	nop
 800491c:	20000f90 	.word	0x20000f90
 8004920:	53454d41 	.word	0x53454d41
 8004924:	20000f80 	.word	0x20000f80

08004928 <_tx_semaphore_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800492a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800492e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8004930:	6883      	ldr	r3, [r0, #8]
 8004932:	bb5b      	cbnz	r3, 800498c <_tx_semaphore_get+0x64>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8004934:	b331      	cbz	r1, 8004984 <_tx_semaphore_get+0x5c>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004936:	4d1a      	ldr	r5, [pc, #104]	; (80049a0 <_tx_semaphore_get+0x78>)
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	bb1b      	cbnz	r3, 8004984 <_tx_semaphore_get+0x5c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800493c:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <_tx_semaphore_get+0x7c>)

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800493e:	4f1a      	ldr	r7, [pc, #104]	; (80049a8 <_tx_semaphore_get+0x80>)
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004940:	681c      	ldr	r4, [r3, #0]
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8004942:	6903      	ldr	r3, [r0, #16]
            thread_ptr -> tx_thread_suspension_sequence++;
 8004944:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8004948:	66e0      	str	r0, [r4, #108]	; 0x6c
            thread_ptr -> tx_thread_suspension_sequence++;
 800494a:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800494c:	66a7      	str	r7, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_suspension_sequence++;
 800494e:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8004952:	b30b      	cbz	r3, 8004998 <_tx_semaphore_get+0x70>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8004954:	68c6      	ldr	r6, [r0, #12]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8004956:	6f77      	ldr	r7, [r6, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004958:	e9c4 671c 	strd	r6, r7, [r4, #112]	; 0x70
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800495c:	673c      	str	r4, [r7, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800495e:	6774      	str	r4, [r6, #116]	; 0x74

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004960:	682e      	ldr	r6, [r5, #0]
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8004962:	3301      	adds	r3, #1
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8004964:	2706      	movs	r7, #6
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8004966:	6103      	str	r3, [r0, #16]
            _tx_thread_preempt_disable++;
 8004968:	3601      	adds	r6, #1
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800496a:	2301      	movs	r3, #1
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800496c:	64e1      	str	r1, [r4, #76]	; 0x4c
            _tx_thread_preempt_disable++;
 800496e:	602e      	str	r6, [r5, #0]
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8004970:	6327      	str	r7, [r4, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004972:	63a3      	str	r3, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004974:	f382 8810 	msr	PRIMASK, r2

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8004978:	4620      	mov	r0, r4
 800497a:	f7fe f8b1 	bl	8002ae0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800497e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status =  TX_NO_INSTANCE;
    }

    /* Return completion status.  */
    return(status);
}
 8004982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004984:	f382 8810 	msr	PRIMASK, r2
        status =  TX_NO_INSTANCE;
 8004988:	200d      	movs	r0, #13
}
 800498a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        semaphore_ptr -> tx_semaphore_count--;
 800498c:	3b01      	subs	r3, #1
 800498e:	6083      	str	r3, [r0, #8]
 8004990:	f382 8810 	msr	PRIMASK, r2
    status =  TX_SUCCESS;
 8004994:	2000      	movs	r0, #0
}
 8004996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8004998:	60c4      	str	r4, [r0, #12]
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800499a:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 800499e:	e7df      	b.n	8004960 <_tx_semaphore_get+0x38>
 80049a0:	200009d8 	.word	0x200009d8
 80049a4:	200009dc 	.word	0x200009dc
 80049a8:	08005065 	.word	0x08005065

080049ac <_tx_semaphore_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80049b0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80049b4:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80049b6:	6903      	ldr	r3, [r0, #16]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80049b8:	b94b      	cbnz	r3, 80049ce <_tx_semaphore_put+0x22>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80049ba:	6883      	ldr	r3, [r0, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80049bc:	69c1      	ldr	r1, [r0, #28]
        semaphore_ptr -> tx_semaphore_count++;
 80049be:	3301      	adds	r3, #1
 80049c0:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80049c2:	f382 8810 	msr	PRIMASK, r2
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 80049c6:	b101      	cbz	r1, 80049ca <_tx_semaphore_put+0x1e>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 80049c8:	4788      	blx	r1
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
}
 80049ca:	2000      	movs	r0, #0
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
        if (suspended_count == TX_NO_SUSPENSIONS)
 80049ce:	3b01      	subs	r3, #1
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80049d0:	68c0      	ldr	r0, [r0, #12]
        if (suspended_count == TX_NO_SUSPENSIONS)
 80049d2:	d018      	beq.n	8004a06 <_tx_semaphore_put+0x5a>
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80049d4:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80049d8:	60e1      	str	r1, [r4, #12]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80049da:	674d      	str	r5, [r1, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80049dc:	6729      	str	r1, [r5, #112]	; 0x70
        _tx_thread_preempt_disable++;
 80049de:	490b      	ldr	r1, [pc, #44]	; (8004a0c <_tx_semaphore_put+0x60>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80049e0:	2500      	movs	r5, #0
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80049e2:	6123      	str	r3, [r4, #16]
        _tx_thread_preempt_disable++;
 80049e4:	680b      	ldr	r3, [r1, #0]
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80049e6:	69e6      	ldr	r6, [r4, #28]
        _tx_thread_preempt_disable++;
 80049e8:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80049ea:	6685      	str	r5, [r0, #104]	; 0x68
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80049ec:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
        _tx_thread_preempt_disable++;
 80049f0:	600b      	str	r3, [r1, #0]
 80049f2:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 80049f6:	f000 f8f3 	bl	8004be0 <_tx_thread_system_resume>
        if (semaphore_put_notify != TX_NULL)
 80049fa:	2e00      	cmp	r6, #0
 80049fc:	d0e5      	beq.n	80049ca <_tx_semaphore_put+0x1e>
            (semaphore_put_notify)(semaphore_ptr);
 80049fe:	4620      	mov	r0, r4
 8004a00:	47b0      	blx	r6
}
 8004a02:	2000      	movs	r0, #0
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8004a06:	60e3      	str	r3, [r4, #12]
 8004a08:	e7e9      	b.n	80049de <_tx_semaphore_put+0x32>
 8004a0a:	bf00      	nop
 8004a0c:	200009d8 	.word	0x200009d8

08004a10 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004a16:	4604      	mov	r4, r0
 8004a18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004a1a:	468b      	mov	fp, r1
 8004a1c:	4692      	mov	sl, r2
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004a1e:	4630      	mov	r0, r6
 8004a20:	462a      	mov	r2, r5
 8004a22:	21ef      	movs	r1, #239	; 0xef
{
 8004a24:	4698      	mov	r8, r3
 8004a26:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004a2a:	f000 fb7f 	bl	800512c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8004a2e:	4620      	mov	r0, r4
 8004a30:	22c8      	movs	r2, #200	; 0xc8
 8004a32:	2100      	movs	r1, #0
 8004a34:	f000 fb7a 	bl	800512c <memset>
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
    thread_ptr -> tx_thread_stack_start =       stack_start;
    thread_ptr -> tx_thread_stack_size =        stack_size;
    thread_ptr -> tx_thread_priority =          priority;
    thread_ptr -> tx_thread_user_priority =     priority;
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8004a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8004a3a:	1e6a      	subs	r2, r5, #1
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004a3c:	f04f 0c20 	mov.w	ip, #32
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004a40:	2103      	movs	r1, #3

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004a42:	4f36      	ldr	r7, [pc, #216]	; (8004b1c <_tx_thread_create+0x10c>)
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8004a44:	4432      	add	r2, r6
    thread_ptr -> tx_thread_name =              name_ptr;
 8004a46:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004a4a:	6321      	str	r1, [r4, #48]	; 0x30
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004a4c:	4620      	mov	r0, r4
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004a4e:	60e6      	str	r6, [r4, #12]
    thread_ptr -> tx_thread_priority =          priority;
 8004a50:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8004a54:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004a58:	65a4      	str	r4, [r4, #88]	; 0x58
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004a5a:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004a5e:	6567      	str	r7, [r4, #84]	; 0x54
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004a60:	492f      	ldr	r1, [pc, #188]	; (8004b20 <_tx_thread_create+0x110>)
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8004a62:	e9c4 3306 	strd	r3, r3, [r4, #24]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8004a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8004a68:	e9c4 a811 	strd	sl, r8, [r4, #68]	; 0x44
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8004a6c:	e9c4 2504 	strd	r2, r5, [r4, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8004a70:	63e3      	str	r3, [r4, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8004a72:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004a76:	f7fb fcd3 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004a7a:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004a7e:	b672      	cpsid	i
    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004a80:	4828      	ldr	r0, [pc, #160]	; (8004b24 <_tx_thread_create+0x114>)
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <_tx_thread_create+0x118>)
    if (_tx_thread_created_count == TX_EMPTY)
 8004a84:	6803      	ldr	r3, [r0, #0]
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8004a86:	6022      	str	r2, [r4, #0]
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004a88:	4a28      	ldr	r2, [pc, #160]	; (8004b2c <_tx_thread_create+0x11c>)
    if (_tx_thread_created_count == TX_EMPTY)
 8004a8a:	b9db      	cbnz	r3, 8004ac4 <_tx_thread_create+0xb4>
        _tx_thread_created_ptr =                    thread_ptr;
 8004a8c:	6014      	str	r4, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8004a8e:	e9c4 4422 	strd	r4, r4, [r4, #136]	; 0x88
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004a92:	4927      	ldr	r1, [pc, #156]	; (8004b30 <_tx_thread_create+0x120>)
    _tx_thread_created_count++;
 8004a94:	3301      	adds	r3, #1
    _tx_thread_preempt_disable++;
 8004a96:	680a      	ldr	r2, [r1, #0]
    _tx_thread_created_count++;
 8004a98:	6003      	str	r3, [r0, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8004a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    _tx_thread_preempt_disable++;
 8004a9c:	3201      	adds	r2, #1
    if (auto_start == TX_AUTO_START)
 8004a9e:	2b01      	cmp	r3, #1
    _tx_thread_preempt_disable++;
 8004aa0:	600a      	str	r2, [r1, #0]
    if (auto_start == TX_AUTO_START)
 8004aa2:	d12a      	bne.n	8004afa <_tx_thread_create+0xea>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004aa4:	f3ef 8205 	mrs	r2, IPSR
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8004aa8:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <_tx_thread_create+0x124>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004ab2:	d211      	bcs.n	8004ad8 <_tx_thread_create+0xc8>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004ab4:	f385 8810 	msr	PRIMASK, r5

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 f891 	bl	8004be0 <_tx_thread_system_resume>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
}
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        next_thread =  _tx_thread_created_ptr;
 8004ac4:	6812      	ldr	r2, [r2, #0]
        previous_thread =  next_thread -> tx_thread_created_previous;
 8004ac6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8004aca:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8004ace:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
        thread_ptr -> tx_thread_created_next =      next_thread;
 8004ad2:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
 8004ad6:	e7dc      	b.n	8004a92 <_tx_thread_create+0x82>
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8004ad8:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <_tx_thread_create+0x128>)
 8004ada:	681e      	ldr	r6, [r3, #0]
            if (saved_thread_ptr != TX_NULL)
 8004adc:	b1e6      	cbz	r6, 8004b18 <_tx_thread_create+0x108>
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8004ade:	6af3      	ldr	r3, [r6, #44]	; 0x2c
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004ae0:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8004ae2:	63f3      	str	r3, [r6, #60]	; 0x3c
 8004ae4:	f385 8810 	msr	PRIMASK, r5
        _tx_thread_system_resume(thread_ptr);
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 f879 	bl	8004be0 <_tx_thread_system_resume>
        if (saved_thread_ptr != TX_NULL)
 8004aee:	2e00      	cmp	r6, #0
 8004af0:	d0e5      	beq.n	8004abe <_tx_thread_create+0xae>
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004af2:	63f7      	str	r7, [r6, #60]	; 0x3c
}
 8004af4:	2000      	movs	r0, #0
 8004af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afa:	f385 8810 	msr	PRIMASK, r5
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004afe:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004b02:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8004b04:	680b      	ldr	r3, [r1, #0]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004b0a:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 8004b0e:	f000 f849 	bl	8004ba4 <_tx_thread_system_preempt_check>
}
 8004b12:	2000      	movs	r0, #0
 8004b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
UINT                    saved_threshold =  ((UINT) 0);
 8004b18:	4637      	mov	r7, r6
 8004b1a:	e7e3      	b.n	8004ae4 <_tx_thread_create+0xd4>
 8004b1c:	08004d61 	.word	0x08004d61
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	200009d0 	.word	0x200009d0
 8004b28:	54485244 	.word	0x54485244
 8004b2c:	200009c8 	.word	0x200009c8
 8004b30:	200009d8 	.word	0x200009d8
 8004b34:	2000000c 	.word	0x2000000c
 8004b38:	200009e0 	.word	0x200009e0

08004b3c <_tx_thread_shell_entry>:
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004b3c:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <_tx_thread_shell_entry+0x5c>)
{
 8004b3e:	b570      	push	{r4, r5, r6, lr}
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004b40:	681c      	ldr	r4, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004b42:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004b46:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8004b48:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004b4c:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8004b50:	b113      	cbz	r3, 8004b58 <_tx_thread_shell_entry+0x1c>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8004b52:	2100      	movs	r1, #0
 8004b54:	4620      	mov	r0, r4
 8004b56:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8004b58:	e9d4 3011 	ldrd	r3, r0, [r4, #68]	; 0x44
 8004b5c:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <_tx_thread_shell_entry+0x60>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	b10b      	cbz	r3, 8004b68 <_tx_thread_shell_entry+0x2c>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004b64:	4620      	mov	r0, r4
 8004b66:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004b68:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004b6c:	b672      	cpsid	i

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <_tx_thread_shell_entry+0x64>)
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8004b70:	2101      	movs	r1, #1
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004b72:	2600      	movs	r6, #0
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8004b74:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
    _tx_thread_preempt_disable++;
 8004b78:	6813      	ldr	r3, [r2, #0]
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004b7a:	64e6      	str	r6, [r4, #76]	; 0x4c
    _tx_thread_preempt_disable++;
 8004b7c:	440b      	add	r3, r1
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8004b7e:	6321      	str	r1, [r4, #48]	; 0x30
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004b80:	63a1      	str	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable++;
 8004b82:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004b84:	f380 8810 	msr	PRIMASK, r0
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8004b88:	b10d      	cbz	r5, 8004b8e <_tx_thread_shell_entry+0x52>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	47a8      	blx	r5
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8004b8e:	4620      	mov	r0, r4
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _tx_thread_system_suspend(thread_ptr);
 8004b94:	f7fd bfa4 	b.w	8002ae0 <_tx_thread_system_suspend>
 8004b98:	200009dc 	.word	0x200009dc
 8004b9c:	200009c0 	.word	0x200009c0
 8004ba0:	200009d8 	.word	0x200009d8

08004ba4 <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <_tx_thread_system_preempt_check+0x2c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8004ba8:	b98b      	cbnz	r3, 8004bce <_tx_thread_system_preempt_check+0x2a>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <_tx_thread_system_preempt_check+0x30>)

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <_tx_thread_system_preempt_check+0x34>)

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d00b      	beq.n	8004bce <_tx_thread_system_preempt_check+0x2a>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <_tx_thread_system_preempt_check+0x38>)
 8004bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004bbe:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8004bc2:	b923      	cbnz	r3, 8004bce <_tx_thread_system_preempt_check+0x2a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004bc4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8004bc8:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004bca:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8004bce:	4770      	bx	lr
 8004bd0:	200009d8 	.word	0x200009d8
 8004bd4:	200009dc 	.word	0x200009dc
 8004bd8:	200009e0 	.word	0x200009e0
 8004bdc:	e000ed04 	.word	0xe000ed04

08004be0 <_tx_thread_system_resume>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004be4:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004be8:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8004bea:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d03f      	beq.n	8004c70 <_tx_thread_system_resume+0x90>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8004bf0:	304c      	adds	r0, #76	; 0x4c
 8004bf2:	f000 f8e5 	bl	8004dc0 <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004bf6:	4a35      	ldr	r2, [pc, #212]	; (8004ccc <_tx_thread_system_resume+0xec>)

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8004bf8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 8004bfa:	6813      	ldr	r3, [r2, #0]
 8004bfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8004c02:	b9b8      	cbnz	r0, 8004c34 <_tx_thread_system_resume+0x54>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8004c04:	b9f9      	cbnz	r1, 8004c46 <_tx_thread_system_resume+0x66>
 8004c06:	4b32      	ldr	r3, [pc, #200]	; (8004cd0 <_tx_thread_system_resume+0xf0>)
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004c08:	4932      	ldr	r1, [pc, #200]	; (8004cd4 <_tx_thread_system_resume+0xf4>)
 8004c0a:	6809      	ldr	r1, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004c0c:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	428b      	cmp	r3, r1
 8004c14:	d00d      	beq.n	8004c32 <_tx_thread_system_resume+0x52>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004c16:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 8004c18:	b95b      	cbnz	r3, 8004c32 <_tx_thread_system_resume+0x52>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004c1a:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <_tx_thread_system_resume+0xf8>)
 8004c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c20:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c22:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 8004c26:	b923      	cbnz	r3, 8004c32 <_tx_thread_system_resume+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8004c2c:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004c2e:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8004c34:	3901      	subs	r1, #1
 8004c36:	2901      	cmp	r1, #1
 8004c38:	d9e5      	bls.n	8004c06 <_tx_thread_system_resume+0x26>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004c3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c3c:	b991      	cbnz	r1, 8004c64 <_tx_thread_system_resume+0x84>
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8004c40:	63a1      	str	r1, [r4, #56]	; 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004c42:	6321      	str	r1, [r4, #48]	; 0x30
 8004c44:	e7e0      	b.n	8004c08 <_tx_thread_system_resume+0x28>
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c48:	b963      	cbnz	r3, 8004c64 <_tx_thread_system_resume+0x84>
                priority =  thread_ptr -> tx_thread_priority;
 8004c4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                head_ptr =  _tx_thread_priority_list[priority];
 8004c4c:	4e23      	ldr	r6, [pc, #140]	; (8004cdc <_tx_thread_system_resume+0xfc>)
                thread_ptr -> tx_thread_state =  TX_READY;
 8004c4e:	6323      	str	r3, [r4, #48]	; 0x30
                head_ptr =  _tx_thread_priority_list[priority];
 8004c50:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
                if (head_ptr == TX_NULL)
 8004c54:	b171      	cbz	r1, 8004c74 <_tx_thread_system_resume+0x94>
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8004c56:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004c58:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <_tx_thread_system_resume+0xf0>)
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8004c5a:	6204      	str	r4, [r0, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8004c5c:	624c      	str	r4, [r1, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8004c5e:	e9c4 1008 	strd	r1, r0, [r4, #32]
 8004c62:	e7d1      	b.n	8004c08 <_tx_thread_system_resume+0x28>
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004c64:	2000      	movs	r0, #0
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004c66:	2103      	movs	r1, #3
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <_tx_thread_system_resume+0xf0>)
 8004c6a:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
 8004c6e:	e7cb      	b.n	8004c08 <_tx_thread_system_resume+0x28>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004c70:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004c72:	e7c0      	b.n	8004bf6 <_tx_thread_system_resume+0x16>
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004c74:	491a      	ldr	r1, [pc, #104]	; (8004ce0 <_tx_thread_system_resume+0x100>)
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004c76:	f04f 0c01 	mov.w	ip, #1
                    if (priority < _tx_thread_highest_priority)
 8004c7a:	4f1a      	ldr	r7, [pc, #104]	; (8004ce4 <_tx_thread_system_resume+0x104>)
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004c7c:	680b      	ldr	r3, [r1, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004c7e:	fa0c fe00 	lsl.w	lr, ip, r0
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8004c82:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
                    if (priority < _tx_thread_highest_priority)
 8004c86:	683e      	ldr	r6, [r7, #0]
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004c88:	ea43 030e 	orr.w	r3, r3, lr
                    if (priority < _tx_thread_highest_priority)
 8004c8c:	4286      	cmp	r6, r0
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004c8e:	600b      	str	r3, [r1, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8004c92:	e9c4 4408 	strd	r4, r4, [r4, #32]
                    if (priority < _tx_thread_highest_priority)
 8004c96:	d9b7      	bls.n	8004c08 <_tx_thread_system_resume+0x28>
                        execute_ptr =  _tx_thread_execute_ptr;
 8004c98:	6819      	ldr	r1, [r3, #0]
                        _tx_thread_highest_priority =  priority;
 8004c9a:	6038      	str	r0, [r7, #0]
                        if (execute_ptr == TX_NULL)
 8004c9c:	b199      	cbz	r1, 8004cc6 <_tx_thread_system_resume+0xe6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8004c9e:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8004ca0:	4286      	cmp	r6, r0
 8004ca2:	d9b1      	bls.n	8004c08 <_tx_thread_system_resume+0x28>
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8004ca4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004ca6:	428e      	cmp	r6, r1
 8004ca8:	d006      	beq.n	8004cb8 <_tx_thread_system_resume+0xd8>
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8004caa:	480f      	ldr	r0, [pc, #60]	; (8004ce8 <_tx_thread_system_resume+0x108>)
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8004cac:	fa0c fc01 	lsl.w	ip, ip, r1
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8004cb0:	6801      	ldr	r1, [r0, #0]
 8004cb2:	ea41 010c 	orr.w	r1, r1, ip
 8004cb6:	6001      	str	r1, [r0, #0]
                                _tx_thread_execute_ptr =  thread_ptr;
 8004cb8:	601c      	str	r4, [r3, #0]
 8004cba:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004cbe:	6813      	ldr	r3, [r2, #0]
                                if (combined_flags == ((ULONG) 0))
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0aa      	beq.n	8004c1a <_tx_thread_system_resume+0x3a>
}
 8004cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            _tx_thread_execute_ptr =  thread_ptr;
 8004cc6:	601c      	str	r4, [r3, #0]
 8004cc8:	e79e      	b.n	8004c08 <_tx_thread_system_resume+0x28>
 8004cca:	bf00      	nop
 8004ccc:	200009d8 	.word	0x200009d8
 8004cd0:	200009e0 	.word	0x200009e0
 8004cd4:	200009dc 	.word	0x200009dc
 8004cd8:	e000ed04 	.word	0xe000ed04
 8004cdc:	20000940 	.word	0x20000940
 8004ce0:	200009c4 	.word	0x200009c4
 8004ce4:	200009e4 	.word	0x200009e4
 8004ce8:	200009e8 	.word	0x200009e8

08004cec <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004cec:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <_tx_thread_time_slice+0x5c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004cf0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004cf4:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004cf6:	4915      	ldr	r1, [pc, #84]	; (8004d4c <_tx_thread_time_slice+0x60>)
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8004cfc:	b193      	cbz	r3, 8004d24 <_tx_thread_time_slice+0x38>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8004cfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d00:	b981      	cbnz	r1, 8004d24 <_tx_thread_time_slice+0x38>
            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004d02:	6a18      	ldr	r0, [r3, #32]
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004d04:	69d9      	ldr	r1, [r3, #28]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004d06:	4298      	cmp	r0, r3
{
 8004d08:	b410      	push	{r4}
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004d0a:	4c11      	ldr	r4, [pc, #68]	; (8004d50 <_tx_thread_time_slice+0x64>)
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004d0c:	6199      	str	r1, [r3, #24]
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004d0e:	6021      	str	r1, [r4, #0]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004d10:	d003      	beq.n	8004d1a <_tx_thread_time_slice+0x2e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004d12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	4299      	cmp	r1, r3
 8004d18:	d007      	beq.n	8004d2a <_tx_thread_time_slice+0x3e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004d1a:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8004d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	f382 8810 	msr	PRIMASK, r2
 8004d28:	4770      	bx	lr
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004d2a:	4c0a      	ldr	r4, [pc, #40]	; (8004d54 <_tx_thread_time_slice+0x68>)
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <_tx_thread_time_slice+0x6c>)
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004d2e:	6824      	ldr	r4, [r4, #0]
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004d30:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004d34:	4909      	ldr	r1, [pc, #36]	; (8004d5c <_tx_thread_time_slice+0x70>)
 8004d36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004d3a:	600b      	str	r3, [r1, #0]
 8004d3c:	f382 8810 	msr	PRIMASK, r2
}
 8004d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	200009dc 	.word	0x200009dc
 8004d4c:	20000f68 	.word	0x20000f68
 8004d50:	20000a78 	.word	0x20000a78
 8004d54:	200009e4 	.word	0x200009e4
 8004d58:	20000940 	.word	0x20000940
 8004d5c:	200009e0 	.word	0x200009e0

08004d60 <_tx_thread_timeout>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8004d60:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004d62:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004d66:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8004d68:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004d6a:	2a04      	cmp	r2, #4
 8004d6c:	d008      	beq.n	8004d80 <_tx_thread_timeout+0x20>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif
    
        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8004d6e:	6e82      	ldr	r2, [r0, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8004d70:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004d74:	f384 8810 	msr	PRIMASK, r4
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 8004d78:	b162      	cbz	r2, 8004d94 <_tx_thread_timeout+0x34>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8004d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8004d7e:	4710      	bx	r2
        _tx_thread_preempt_disable++;
 8004d80:	4a06      	ldr	r2, [pc, #24]	; (8004d9c <_tx_thread_timeout+0x3c>)
 8004d82:	6813      	ldr	r3, [r2, #0]
 8004d84:	3301      	adds	r3, #1
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	f384 8810 	msr	PRIMASK, r4
}
 8004d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
        _tx_thread_system_resume(thread_ptr);
 8004d90:	f7ff bf26 	b.w	8004be0 <_tx_thread_system_resume>
}
 8004d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	200009d8 	.word	0x200009d8

08004da0 <_tx_timer_expiration_process>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004da0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004da4:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8004da6:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <_tx_timer_expiration_process+0x18>)
 8004da8:	6813      	ldr	r3, [r2, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004dae:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004db2:	4802      	ldr	r0, [pc, #8]	; (8004dbc <_tx_timer_expiration_process+0x1c>)
 8004db4:	f7ff bf14 	b.w	8004be0 <_tx_thread_system_resume>
 8004db8:	200009d8 	.word	0x200009d8
 8004dbc:	20000a88 	.word	0x20000a88

08004dc0 <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8004dc0:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8004dc2:	b153      	cbz	r3, 8004dda <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8004dc4:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8004dc6:	4290      	cmp	r0, r2
 8004dc8:	d008      	beq.n	8004ddc <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8004dca:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004dcc:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8004dce:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	4281      	cmp	r1, r0
 8004dd4:	d008      	beq.n	8004de8 <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	6183      	str	r3, [r0, #24]
    }
}
 8004dda:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4282      	cmp	r2, r0
 8004de0:	d1f9      	bne.n	8004dd6 <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	e7f6      	b.n	8004dd6 <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 8004de8:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e7f3      	b.n	8004dd6 <_tx_timer_system_deactivate+0x16>
 8004dee:	bf00      	nop

08004df0 <_tx_event_flags_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004df2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004df6:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8004df8:	4a1b      	ldr	r2, [pc, #108]	; (8004e68 <_tx_event_flags_cleanup+0x78>)
 8004dfa:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004dfc:	4294      	cmp	r4, r2
 8004dfe:	d002      	beq.n	8004e06 <_tx_event_flags_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004e00:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004e04:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8004e06:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8004e0a:	428a      	cmp	r2, r1
 8004e0c:	d1f8      	bne.n	8004e00 <_tx_event_flags_cleanup+0x10>
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8004e0e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (group_ptr != TX_NULL)
 8004e10:	2a00      	cmp	r2, #0
 8004e12:	d0f5      	beq.n	8004e00 <_tx_event_flags_cleanup+0x10>
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8004e14:	4915      	ldr	r1, [pc, #84]	; (8004e6c <_tx_event_flags_cleanup+0x7c>)
 8004e16:	6814      	ldr	r4, [r2, #0]
 8004e18:	428c      	cmp	r4, r1
 8004e1a:	d1f1      	bne.n	8004e00 <_tx_event_flags_cleanup+0x10>
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8004e1c:	6951      	ldr	r1, [r2, #20]
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	d0ee      	beq.n	8004e00 <_tx_event_flags_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004e22:	2500      	movs	r5, #0
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8004e24:	6914      	ldr	r4, [r2, #16]
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004e26:	6685      	str	r5, [r0, #104]	; 0x68
                        if (suspension_head != TX_NULL)
 8004e28:	b1dc      	cbz	r4, 8004e62 <_tx_event_flags_cleanup+0x72>
                            suspended_count--;
 8004e2a:	3901      	subs	r1, #1
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8004e2c:	6151      	str	r1, [r2, #20]
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8004e2e:	b1b1      	cbz	r1, 8004e5e <_tx_event_flags_cleanup+0x6e>
                                if (suspension_head == thread_ptr)
 8004e30:	42a0      	cmp	r0, r4
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8004e32:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004e36:	674d      	str	r5, [r1, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8004e38:	6729      	str	r1, [r5, #112]	; 0x70
                                if (suspension_head == thread_ptr)
 8004e3a:	d010      	beq.n	8004e5e <_tx_event_flags_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8004e3c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004e3e:	2a07      	cmp	r2, #7
 8004e40:	d1de      	bne.n	8004e00 <_tx_event_flags_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 8004e42:	490b      	ldr	r1, [pc, #44]	; (8004e70 <_tx_event_flags_cleanup+0x80>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8004e44:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8004e48:	680a      	ldr	r2, [r1, #0]
 8004e4a:	3201      	adds	r2, #1
 8004e4c:	600a      	str	r2, [r1, #0]
 8004e4e:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8004e52:	f7ff fec5 	bl	8004be0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004e56:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004e5a:	b672      	cpsid	i
 8004e5c:	e7d0      	b.n	8004e00 <_tx_event_flags_cleanup+0x10>
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8004e5e:	6111      	str	r1, [r2, #16]
 8004e60:	e7ec      	b.n	8004e3c <_tx_event_flags_cleanup+0x4c>
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8004e62:	2101      	movs	r1, #1
 8004e64:	60d1      	str	r1, [r2, #12]
 8004e66:	e7e9      	b.n	8004e3c <_tx_event_flags_cleanup+0x4c>
 8004e68:	08004df1 	.word	0x08004df1
 8004e6c:	4456444e 	.word	0x4456444e
 8004e70:	200009d8 	.word	0x200009d8

08004e74 <_tx_mutex_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8004e74:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004e76:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004e7a:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8004e7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <_tx_mutex_cleanup+0x74>)
 8004e7e:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004e80:	4294      	cmp	r4, r2
 8004e82:	d002      	beq.n	8004e8a <_tx_mutex_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004e84:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8004e8a:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8004e8e:	428a      	cmp	r2, r1
 8004e90:	d1f8      	bne.n	8004e84 <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8004e92:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (mutex_ptr != TX_NULL)
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d0f5      	beq.n	8004e84 <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8004e98:	4914      	ldr	r1, [pc, #80]	; (8004eec <_tx_mutex_cleanup+0x78>)
 8004e9a:	6814      	ldr	r4, [r2, #0]
 8004e9c:	428c      	cmp	r4, r1
 8004e9e:	d1f1      	bne.n	8004e84 <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8004ea0:	69d1      	ldr	r1, [r2, #28]
 8004ea2:	2900      	cmp	r1, #0
 8004ea4:	d0ee      	beq.n	8004e84 <_tx_mutex_cleanup+0x10>
                        mutex_ptr -> tx_mutex_suspended_count--;
 8004ea6:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004ea8:	2400      	movs	r4, #0
 8004eaa:	6684      	str	r4, [r0, #104]	; 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 8004eac:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8004eae:	b1c1      	cbz	r1, 8004ee2 <_tx_mutex_cleanup+0x6e>
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8004eb0:	6995      	ldr	r5, [r2, #24]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004eb2:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8004eb6:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8004eb8:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004eba:	6721      	str	r1, [r4, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8004ebc:	d011      	beq.n	8004ee2 <_tx_mutex_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8004ebe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ec0:	2a0d      	cmp	r2, #13
 8004ec2:	d1df      	bne.n	8004e84 <_tx_mutex_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 8004ec4:	490a      	ldr	r1, [pc, #40]	; (8004ef0 <_tx_mutex_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8004ec6:	241d      	movs	r4, #29
                            _tx_thread_preempt_disable++;
 8004ec8:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8004eca:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 8004ece:	3201      	adds	r2, #1
 8004ed0:	600a      	str	r2, [r1, #0]
 8004ed2:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8004ed6:	f7ff fe83 	bl	8004be0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004eda:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004ede:	b672      	cpsid	i
 8004ee0:	e7d0      	b.n	8004e84 <_tx_mutex_cleanup+0x10>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8004ee2:	6191      	str	r1, [r2, #24]
 8004ee4:	e7eb      	b.n	8004ebe <_tx_mutex_cleanup+0x4a>
 8004ee6:	bf00      	nop
 8004ee8:	08004e75 	.word	0x08004e75
 8004eec:	4d555445 	.word	0x4d555445
 8004ef0:	200009d8 	.word	0x200009d8

08004ef4 <_tx_mutex_thread_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004efc:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004efe:	4d0d      	ldr	r5, [pc, #52]	; (8004f34 <_tx_mutex_thread_release+0x40>)
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8004f00:	2601      	movs	r6, #1
 8004f02:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    _tx_thread_preempt_disable++;
 8004f06:	682a      	ldr	r2, [r5, #0]
 8004f08:	4432      	add	r2, r6
 8004f0a:	602a      	str	r2, [r5, #0]
        if (mutex_ptr != TX_NULL)
 8004f0c:	b158      	cbz	r0, 8004f26 <_tx_mutex_thread_release+0x32>
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8004f0e:	6086      	str	r6, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004f10:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8004f14:	f7ff fa00 	bl	8004318 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004f18:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004f1c:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8004f1e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d1f2      	bne.n	8004f0c <_tx_mutex_thread_release+0x18>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8004f26:	682a      	ldr	r2, [r5, #0]
 8004f28:	3a01      	subs	r2, #1
 8004f2a:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004f2c:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	bf00      	nop
 8004f34:	200009d8 	.word	0x200009d8

08004f38 <_tx_mutex_prioritize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004f3a:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004f3e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8004f40:	69c7      	ldr	r7, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8004f42:	2f01      	cmp	r7, #1
 8004f44:	d92a      	bls.n	8004f9c <_tx_mutex_prioritize+0x64>
 8004f46:	6982      	ldr	r2, [r0, #24]
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8004f48:	2f02      	cmp	r7, #2
 8004f4a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004f4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f4e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8004f50:	d021      	beq.n	8004f96 <_tx_mutex_prioritize+0x5e>

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8004f52:	f8df c084 	ldr.w	ip, [pc, #132]	; 8004fd8 <_tx_mutex_prioritize+0xa0>
 8004f56:	4616      	mov	r6, r2
 8004f58:	f8dc e000 	ldr.w	lr, [ip]
 8004f5c:	f10e 0e01 	add.w	lr, lr, #1
 8004f60:	f8cc e000 	str.w	lr, [ip]
 8004f64:	e007      	b.n	8004f76 <_tx_mutex_prioritize+0x3e>
 8004f66:	69c7      	ldr	r7, [r0, #28]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8004f68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f6a:	461a      	mov	r2, r3

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
            }

        } while (thread_ptr != head_ptr);
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	461e      	mov	r6, r3
 8004f70:	d018      	beq.n	8004fa4 <_tx_mutex_prioritize+0x6c>
 8004f72:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8004f74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f76:	42ab      	cmp	r3, r5
 8004f78:	bf88      	it	hi
 8004f7a:	460a      	movhi	r2, r1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004f7c:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004f80:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004f84:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8004f86:	6983      	ldr	r3, [r0, #24]
 8004f88:	42b3      	cmp	r3, r6
 8004f8a:	d1ec      	bne.n	8004f66 <_tx_mutex_prioritize+0x2e>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8004f8c:	69c5      	ldr	r5, [r0, #28]
 8004f8e:	42bd      	cmp	r5, r7
 8004f90:	d020      	beq.n	8004fd4 <_tx_mutex_prioritize+0x9c>
 8004f92:	462f      	mov	r7, r5
 8004f94:	e7e8      	b.n	8004f68 <_tx_mutex_prioritize+0x30>
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8004f96:	429d      	cmp	r5, r3
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8004f98:	bf38      	it	cc
 8004f9a:	6181      	strcc	r1, [r0, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004f9c:	f384 8810 	msr	PRIMASK, r4
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _tx_thread_preempt_disable--;
 8004fa4:	f8dc 1000 	ldr.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 8004fa8:	4293      	cmp	r3, r2
        _tx_thread_preempt_disable--;
 8004faa:	f101 31ff 	add.w	r1, r1, #4294967295
 8004fae:	f8cc 1000 	str.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 8004fb2:	d009      	beq.n	8004fc8 <_tx_mutex_prioritize+0x90>
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8004fb4:	e9d2 651c 	ldrd	r6, r5, [r2, #112]	; 0x70
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004fb8:	6775      	str	r5, [r6, #116]	; 0x74
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8004fba:	6f59      	ldr	r1, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8004fbc:	672e      	str	r6, [r5, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8004fbe:	e9c2 311c 	strd	r3, r1, [r2, #112]	; 0x70
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8004fc2:	670a      	str	r2, [r1, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8004fc4:	675a      	str	r2, [r3, #116]	; 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8004fc6:	6182      	str	r2, [r0, #24]
 8004fc8:	f384 8810 	msr	PRIMASK, r4
        _tx_thread_system_preempt_check();
 8004fcc:	f7ff fdea 	bl	8004ba4 <_tx_thread_system_preempt_check>
}
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8004fd4:	6f09      	ldr	r1, [r1, #112]	; 0x70
 8004fd6:	e7c9      	b.n	8004f6c <_tx_mutex_prioritize+0x34>
 8004fd8:	200009d8 	.word	0x200009d8

08004fdc <_tx_queue_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8004fdc:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004fde:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004fe2:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <_tx_queue_cleanup+0x7c>)
 8004fe6:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004fe8:	4294      	cmp	r4, r2
 8004fea:	d002      	beq.n	8004ff2 <_tx_queue_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004fec:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8004ff2:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8004ff6:	428a      	cmp	r2, r1
 8004ff8:	d1f8      	bne.n	8004fec <_tx_queue_cleanup+0x10>
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8004ffa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (queue_ptr != TX_NULL)
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	d0f5      	beq.n	8004fec <_tx_queue_cleanup+0x10>
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8005000:	4916      	ldr	r1, [pc, #88]	; (800505c <_tx_queue_cleanup+0x80>)
 8005002:	6814      	ldr	r4, [r2, #0]
 8005004:	428c      	cmp	r4, r1
 8005006:	d1f1      	bne.n	8004fec <_tx_queue_cleanup+0x10>
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8005008:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800500a:	2900      	cmp	r1, #0
 800500c:	d0ee      	beq.n	8004fec <_tx_queue_cleanup+0x10>
                        queue_ptr -> tx_queue_suspended_count--;
 800500e:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005010:	2400      	movs	r4, #0
 8005012:	6684      	str	r4, [r0, #104]	; 0x68
                        queue_ptr -> tx_queue_suspended_count--;
 8005014:	62d1      	str	r1, [r2, #44]	; 0x2c
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8005016:	b1e1      	cbz	r1, 8005052 <_tx_queue_cleanup+0x76>
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8005018:	6a95      	ldr	r5, [r2, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800501a:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800501e:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8005020:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8005022:	6721      	str	r1, [r4, #112]	; 0x70
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8005024:	d015      	beq.n	8005052 <_tx_queue_cleanup+0x76>
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8005026:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005028:	2905      	cmp	r1, #5
 800502a:	d1df      	bne.n	8004fec <_tx_queue_cleanup+0x10>
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800502c:	6912      	ldr	r2, [r2, #16]
                            _tx_thread_preempt_disable++;
 800502e:	490c      	ldr	r1, [pc, #48]	; (8005060 <_tx_queue_cleanup+0x84>)
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8005030:	2a00      	cmp	r2, #0
                            _tx_thread_preempt_disable++;
 8005032:	680a      	ldr	r2, [r1, #0]
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8005034:	bf14      	ite	ne
 8005036:	240b      	movne	r4, #11
 8005038:	240a      	moveq	r4, #10
                            _tx_thread_preempt_disable++;
 800503a:	3201      	adds	r2, #1
 800503c:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8005040:	600a      	str	r2, [r1, #0]
 8005042:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8005046:	f7ff fdcb 	bl	8004be0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800504a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800504e:	b672      	cpsid	i
 8005050:	e7cc      	b.n	8004fec <_tx_queue_cleanup+0x10>
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8005052:	6291      	str	r1, [r2, #40]	; 0x28
 8005054:	e7e7      	b.n	8005026 <_tx_queue_cleanup+0x4a>
 8005056:	bf00      	nop
 8005058:	08004fdd 	.word	0x08004fdd
 800505c:	51554555 	.word	0x51554555
 8005060:	200009d8 	.word	0x200009d8

08005064 <_tx_semaphore_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8005064:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005066:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800506a:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800506c:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <_tx_semaphore_cleanup+0x74>)
 800506e:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8005070:	4294      	cmp	r4, r2
 8005072:	d002      	beq.n	800507a <_tx_semaphore_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005074:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005078:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800507a:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800507e:	428a      	cmp	r2, r1
 8005080:	d1f8      	bne.n	8005074 <_tx_semaphore_cleanup+0x10>
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8005082:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (semaphore_ptr != TX_NULL)
 8005084:	2a00      	cmp	r2, #0
 8005086:	d0f5      	beq.n	8005074 <_tx_semaphore_cleanup+0x10>
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8005088:	4914      	ldr	r1, [pc, #80]	; (80050dc <_tx_semaphore_cleanup+0x78>)
 800508a:	6814      	ldr	r4, [r2, #0]
 800508c:	428c      	cmp	r4, r1
 800508e:	d1f1      	bne.n	8005074 <_tx_semaphore_cleanup+0x10>
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8005090:	6911      	ldr	r1, [r2, #16]
 8005092:	2900      	cmp	r1, #0
 8005094:	d0ee      	beq.n	8005074 <_tx_semaphore_cleanup+0x10>
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8005096:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005098:	2400      	movs	r4, #0
 800509a:	6684      	str	r4, [r0, #104]	; 0x68
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800509c:	6111      	str	r1, [r2, #16]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800509e:	b1c1      	cbz	r1, 80050d2 <_tx_semaphore_cleanup+0x6e>
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80050a0:	68d5      	ldr	r5, [r2, #12]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80050a2:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80050a6:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80050a8:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80050aa:	6721      	str	r1, [r4, #112]	; 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80050ac:	d011      	beq.n	80050d2 <_tx_semaphore_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80050ae:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80050b0:	2a06      	cmp	r2, #6
 80050b2:	d1df      	bne.n	8005074 <_tx_semaphore_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 80050b4:	490a      	ldr	r1, [pc, #40]	; (80050e0 <_tx_semaphore_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80050b6:	240d      	movs	r4, #13
                            _tx_thread_preempt_disable++;
 80050b8:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80050ba:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 80050be:	3201      	adds	r2, #1
 80050c0:	600a      	str	r2, [r1, #0]
 80050c2:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 80050c6:	f7ff fd8b 	bl	8004be0 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80050ca:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80050ce:	b672      	cpsid	i
 80050d0:	e7d0      	b.n	8005074 <_tx_semaphore_cleanup+0x10>
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80050d2:	60d1      	str	r1, [r2, #12]
 80050d4:	e7eb      	b.n	80050ae <_tx_semaphore_cleanup+0x4a>
 80050d6:	bf00      	nop
 80050d8:	08005065 	.word	0x08005065
 80050dc:	53454d41 	.word	0x53454d41
 80050e0:	200009d8 	.word	0x200009d8

080050e4 <__libc_init_array>:
 80050e4:	b570      	push	{r4, r5, r6, lr}
 80050e6:	4e0d      	ldr	r6, [pc, #52]	; (800511c <__libc_init_array+0x38>)
 80050e8:	4c0d      	ldr	r4, [pc, #52]	; (8005120 <__libc_init_array+0x3c>)
 80050ea:	1ba4      	subs	r4, r4, r6
 80050ec:	10a4      	asrs	r4, r4, #2
 80050ee:	2500      	movs	r5, #0
 80050f0:	42a5      	cmp	r5, r4
 80050f2:	d109      	bne.n	8005108 <__libc_init_array+0x24>
 80050f4:	4e0b      	ldr	r6, [pc, #44]	; (8005124 <__libc_init_array+0x40>)
 80050f6:	4c0c      	ldr	r4, [pc, #48]	; (8005128 <__libc_init_array+0x44>)
 80050f8:	f000 f820 	bl	800513c <_init>
 80050fc:	1ba4      	subs	r4, r4, r6
 80050fe:	10a4      	asrs	r4, r4, #2
 8005100:	2500      	movs	r5, #0
 8005102:	42a5      	cmp	r5, r4
 8005104:	d105      	bne.n	8005112 <__libc_init_array+0x2e>
 8005106:	bd70      	pop	{r4, r5, r6, pc}
 8005108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800510c:	4798      	blx	r3
 800510e:	3501      	adds	r5, #1
 8005110:	e7ee      	b.n	80050f0 <__libc_init_array+0xc>
 8005112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005116:	4798      	blx	r3
 8005118:	3501      	adds	r5, #1
 800511a:	e7f2      	b.n	8005102 <__libc_init_array+0x1e>
 800511c:	0800524c 	.word	0x0800524c
 8005120:	0800524c 	.word	0x0800524c
 8005124:	0800524c 	.word	0x0800524c
 8005128:	08005250 	.word	0x08005250

0800512c <memset>:
 800512c:	4402      	add	r2, r0
 800512e:	4603      	mov	r3, r0
 8005130:	4293      	cmp	r3, r2
 8005132:	d100      	bne.n	8005136 <memset+0xa>
 8005134:	4770      	bx	lr
 8005136:	f803 1b01 	strb.w	r1, [r3], #1
 800513a:	e7f9      	b.n	8005130 <memset+0x4>

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
