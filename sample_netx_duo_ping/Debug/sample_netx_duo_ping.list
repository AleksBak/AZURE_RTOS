
sample_netx_duo_ping.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800fb90  0800fb90  0001fb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd8c  0800fd8c  00021550  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd8c  0800fd8c  0001fd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd94  0800fd94  00021550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd94  0800fd94  0001fd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd98  0800fd98  0001fd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800fd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 RAM_START     0000146c  200000e4  0800fe80  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001828c  20001550  20001550  00021550  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200197dc  200197dc  00021550  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021550  2**0
                  CONTENTS, READONLY
 13 .debug_info   001bac35  00000000  00000000  00021580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0001e17e  00000000  00000000  001dc1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002748  00000000  00000000  001fa338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000060e8  00000000  00000000  001fca80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0004d543  00000000  00000000  00202b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000603be  00000000  00000000  002500ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0013fe4e  00000000  00000000  002b0469  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  003f02b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067ac  00000000  00000000  003f0334  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    00031322  00000000  00000000  003f6ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .stab         00000084  00000000  00000000  00427e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      00000117  00000000  00000000  00427e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001550 	.word	0x20001550
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fb78 	.word	0x0800fb78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001554 	.word	0x20001554
 800020c:	0800fb78 	.word	0x0800fb78

08000210 <ETH_IRQHandler>:
        .global  __nx_driver_stm32f7xx_ethernet_isr 
.thumb_func
ETH_IRQHandler:
.thumb_func
__nx_driver_stm32f7xx_ethernet_isr:
        PUSH    {lr}
 8000210:	b500      	push	{lr}
        BL      nx_driver_stm32f7xx_ethernet_isr
 8000212:	f001 fc71 	bl	8001af8 <nx_driver_stm32f7xx_ethernet_isr>
        POP     {lr}
 8000216:	f85d eb04 	ldr.w	lr, [sp], #4
        BX      LR
 800021a:	4770      	bx	lr
 800021c:	0000      	movs	r0, r0
	...

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@     
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000222:	481d      	ldr	r0, [pc, #116]	; (8000298 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 8000224:	491d      	ldr	r1, [pc, #116]	; (800029c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @ 
 8000226:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800022a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800022c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 8000230:	491b      	ldr	r1, [pc, #108]	; (80002a0 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address   
 8000232:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000236:	481b      	ldr	r0, [pc, #108]	; (80002a4 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000238:	4919      	ldr	r1, [pc, #100]	; (80002a0 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800023a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000240:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000242:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register 
 8000246:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000248:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800024c:	4917      	ldr	r1, [pc, #92]	; (80002ac <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800024e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000250:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000254:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000256:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800025a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800025e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000262:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000266:	4912      	ldr	r1, [pc, #72]	; (80002b0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000268:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
        
@
@    /* Return to caller.  */
@    
    BX      lr 
 800026c:	4770      	bx	lr

0800026e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800026e:	f7ff bffe 	b.w	800026e <__tx_BadHandler>

08000272 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000272:	f7ff bffe 	b.w	8000272 <__tx_HardfaultHandler>

08000276 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000276:	f7ff bffe 	b.w	8000276 <__tx_SVCallHandler>

0800027a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800027a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 800027c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000280:	4770      	bx	lr

08000282 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000282:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             ; Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000284:	f000 f894 	bl	80003b0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              ; Call the ISR exit function
#endif
    POP     {r0, lr}
 8000288:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800028c:	4770      	bx	lr

0800028e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler 
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800028e:	f7ff bffe 	b.w	800028e <__tx_NMIHandler>

08000292 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000292:	f7ff bffe 	b.w	8000292 <__tx_DBGHandler>
 8000296:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000298:	20019190 	.word	0x20019190
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address   
 800029c:	20019de0 	.word	0x20019de0
    LDR     r1, =_vectors                           @ Pickup address of vector table  
 80002a0:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002a4:	20019240 	.word	0x20019240
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002a8:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002ac:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002b0:	40ff0000 	.word	0x40ff0000
	...

080002c0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@     
    MOV     r0, #0                                  @ Build value for TX_FALSE
 80002c0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80002c4:	4a22      	ldr	r2, [pc, #136]	; (8000350 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80002c6:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 80002c8:	b662      	cpsie	i
@            
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 80002ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 80002ce:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 80002d2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 80002d6:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80002da:	f3bf 8f6f 	isb	sy

080002de <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@     
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80002de:	e7fe      	b.n	80002de <__tx_wait_here>

080002e0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80002e0:	481c      	ldr	r0, [pc, #112]	; (8000354 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80002e2:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80002e4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80002e8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@       
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80002ea:	b169      	cbz	r1, 8000308 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80002ec:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80002ee:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 80002f2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80002f6:	4c19      	ldr	r4, [pc, #100]	; (800035c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 80002f8:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 80002fc:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 80002fe:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 8000302:	b10d      	cbz	r5, 8000308 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 8000304:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 8000306:	6023      	str	r3, [r4, #0]

08000308 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 8000308:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 800030a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 800030c:	b189      	cbz	r1, 8000332 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 800030e:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 8000310:	b662      	cpsie	i

08000312 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 8000312:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000314:	4c11      	ldr	r4, [pc, #68]	; (800035c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000316:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 8000318:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 800031c:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 800031e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 8000320:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 8000324:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore 
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@       
    BX      lr                                      @ Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts 
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000332:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are 
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV 
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@       
    CPSIE   i                                       @ Enable interrupts
 800034a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800034c:	e7e1      	b.n	8000312 <__tx_ts_restore>
 800034e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000350:	20019244 	.word	0x20019244
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000354:	20019248 	.word	0x20019248
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000358:	2001924c 	.word	0x2001924c
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800035c:	200192e0 	.word	0x200192e0

08000360 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800036e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    LDR     r3, [r0, #12]                           @ Pickup stack starting address
 8000380:	68c3      	ldr	r3, [r0, #12]
    STR     r3, [r2, #28]                           @ Store initial r10 (sl)
 8000382:	61d3      	str	r3, [r2, #28]
    MOV     r3, #0                                  @ Build initial register value
 8000384:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #32]                           @ Store initial r11
 8000388:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800038a:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 800038c:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 800038e:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000392:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000394:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 8000398:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800039a:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 800039c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 80003a0:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 80003a2:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
	...

080003b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80003b0:	4926      	ldr	r1, [pc, #152]	; (800044c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80003b2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 80003b4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80003b8:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80003bc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80003be:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80003c0:	d008      	beq.n	80003d4 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 80003c2:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80003c6:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80003c8:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80003ca:	d103      	bne.n	80003d4 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 80003ce:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80003d2:	6018      	str	r0, [r3, #0]

080003d4 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80003d4:	4920      	ldr	r1, [pc, #128]	; (8000458 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80003d6:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80003d8:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80003da:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80003dc:	d004      	beq.n	80003e8 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80003de:	4b1f      	ldr	r3, [pc, #124]	; (800045c <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 80003e0:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80003e4:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80003e6:	e008      	b.n	80003fa <__tx_timer_done>

080003e8 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 80003e8:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80003ec:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80003ee:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80003f0:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80003f2:	d101      	bne.n	80003f8 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80003f6:	6818      	ldr	r0, [r3, #0]

080003f8 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80003f8:	6008      	str	r0, [r1, #0]

080003fa <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80003fc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80003fe:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 8000400:	d103      	bne.n	800040a <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 8000402:	4916      	ldr	r1, [pc, #88]	; (800045c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000404:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 8000406:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 8000408:	d01c      	beq.n	8000444 <__tx_timer_nothing_expired>

0800040a <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 800040a:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 800040e:	4913      	ldr	r1, [pc, #76]	; (800045c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000410:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000412:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000414:	d001      	beq.n	800041a <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 8000416:	f00e fb85 	bl	800eb24 <_tx_timer_expiration_process>

0800041a <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired 
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 800041c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 800041e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000420:	d00e      	beq.n	8000440 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice(); 
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000422:	f00e fb09 	bl	800ea38 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000426:	4810      	ldr	r0, [pc, #64]	; (8000468 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 8000428:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 800042a:	b949      	cbnz	r1, 8000440 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800042c:	480f      	ldr	r0, [pc, #60]	; (800046c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 800042e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000430:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000432:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 8000436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 800043a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 800043c:	d000      	beq.n	8000440 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 800043e:	6002      	str	r2, [r0, #0]

08000440 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 8000440:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000444 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000444:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 8000448:	4770      	bx	lr
 800044a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 800044c:	200197d4 	.word	0x200197d4
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice 
 8000450:	200192e0 	.word	0x200192e0
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000454:	200197d0 	.word	0x200197d0
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000458:	20019258 	.word	0x20019258
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800045c:	200192dc 	.word	0x200192dc
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000460:	200192e8 	.word	0x200192e8
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000464:	200193bc 	.word	0x200193bc
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000468:	20019244 	.word	0x20019244
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800046c:	20019248 	.word	0x20019248
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000470:	2001924c 	.word	0x2001924c
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000474:	e000ed04 	.word	0xe000ed04
	...

08000480 <memchr>:
 8000480:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000484:	2a10      	cmp	r2, #16
 8000486:	db2b      	blt.n	80004e0 <memchr+0x60>
 8000488:	f010 0f07 	tst.w	r0, #7
 800048c:	d008      	beq.n	80004a0 <memchr+0x20>
 800048e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000492:	3a01      	subs	r2, #1
 8000494:	428b      	cmp	r3, r1
 8000496:	d02d      	beq.n	80004f4 <memchr+0x74>
 8000498:	f010 0f07 	tst.w	r0, #7
 800049c:	b342      	cbz	r2, 80004f0 <memchr+0x70>
 800049e:	d1f6      	bne.n	800048e <memchr+0xe>
 80004a0:	b4f0      	push	{r4, r5, r6, r7}
 80004a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004aa:	f022 0407 	bic.w	r4, r2, #7
 80004ae:	f07f 0700 	mvns.w	r7, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004b8:	3c08      	subs	r4, #8
 80004ba:	ea85 0501 	eor.w	r5, r5, r1
 80004be:	ea86 0601 	eor.w	r6, r6, r1
 80004c2:	fa85 f547 	uadd8	r5, r5, r7
 80004c6:	faa3 f587 	sel	r5, r3, r7
 80004ca:	fa86 f647 	uadd8	r6, r6, r7
 80004ce:	faa5 f687 	sel	r6, r5, r7
 80004d2:	b98e      	cbnz	r6, 80004f8 <memchr+0x78>
 80004d4:	d1ee      	bne.n	80004b4 <memchr+0x34>
 80004d6:	bcf0      	pop	{r4, r5, r6, r7}
 80004d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004dc:	f002 0207 	and.w	r2, r2, #7
 80004e0:	b132      	cbz	r2, 80004f0 <memchr+0x70>
 80004e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004e6:	3a01      	subs	r2, #1
 80004e8:	ea83 0301 	eor.w	r3, r3, r1
 80004ec:	b113      	cbz	r3, 80004f4 <memchr+0x74>
 80004ee:	d1f8      	bne.n	80004e2 <memchr+0x62>
 80004f0:	2000      	movs	r0, #0
 80004f2:	4770      	bx	lr
 80004f4:	3801      	subs	r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	2d00      	cmp	r5, #0
 80004fa:	bf06      	itte	eq
 80004fc:	4635      	moveq	r5, r6
 80004fe:	3803      	subeq	r0, #3
 8000500:	3807      	subne	r0, #7
 8000502:	f015 0f01 	tst.w	r5, #1
 8000506:	d107      	bne.n	8000518 <memchr+0x98>
 8000508:	3001      	adds	r0, #1
 800050a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800050e:	bf02      	ittt	eq
 8000510:	3001      	addeq	r0, #1
 8000512:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000516:	3001      	addeq	r0, #1
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	3801      	subs	r0, #1
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <__aeabi_uldivmod>:
 8000520:	b953      	cbnz	r3, 8000538 <__aeabi_uldivmod+0x18>
 8000522:	b94a      	cbnz	r2, 8000538 <__aeabi_uldivmod+0x18>
 8000524:	2900      	cmp	r1, #0
 8000526:	bf08      	it	eq
 8000528:	2800      	cmpeq	r0, #0
 800052a:	bf1c      	itt	ne
 800052c:	f04f 31ff 	movne.w	r1, #4294967295
 8000530:	f04f 30ff 	movne.w	r0, #4294967295
 8000534:	f000 b972 	b.w	800081c <__aeabi_idiv0>
 8000538:	f1ad 0c08 	sub.w	ip, sp, #8
 800053c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000540:	f000 f806 	bl	8000550 <__udivmoddi4>
 8000544:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800054c:	b004      	add	sp, #16
 800054e:	4770      	bx	lr

08000550 <__udivmoddi4>:
 8000550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000554:	9e08      	ldr	r6, [sp, #32]
 8000556:	4604      	mov	r4, r0
 8000558:	4688      	mov	r8, r1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d14b      	bne.n	80005f6 <__udivmoddi4+0xa6>
 800055e:	428a      	cmp	r2, r1
 8000560:	4615      	mov	r5, r2
 8000562:	d967      	bls.n	8000634 <__udivmoddi4+0xe4>
 8000564:	fab2 f282 	clz	r2, r2
 8000568:	b14a      	cbz	r2, 800057e <__udivmoddi4+0x2e>
 800056a:	f1c2 0720 	rsb	r7, r2, #32
 800056e:	fa01 f302 	lsl.w	r3, r1, r2
 8000572:	fa20 f707 	lsr.w	r7, r0, r7
 8000576:	4095      	lsls	r5, r2
 8000578:	ea47 0803 	orr.w	r8, r7, r3
 800057c:	4094      	lsls	r4, r2
 800057e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fbb8 f7fe 	udiv	r7, r8, lr
 8000588:	fa1f fc85 	uxth.w	ip, r5
 800058c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000590:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000594:	fb07 f10c 	mul.w	r1, r7, ip
 8000598:	4299      	cmp	r1, r3
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x60>
 800059c:	18eb      	adds	r3, r5, r3
 800059e:	f107 30ff 	add.w	r0, r7, #4294967295
 80005a2:	f080 811b 	bcs.w	80007dc <__udivmoddi4+0x28c>
 80005a6:	4299      	cmp	r1, r3
 80005a8:	f240 8118 	bls.w	80007dc <__udivmoddi4+0x28c>
 80005ac:	3f02      	subs	r7, #2
 80005ae:	442b      	add	r3, r5
 80005b0:	1a5b      	subs	r3, r3, r1
 80005b2:	b2a4      	uxth	r4, r4
 80005b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80005c4:	45a4      	cmp	ip, r4
 80005c6:	d909      	bls.n	80005dc <__udivmoddi4+0x8c>
 80005c8:	192c      	adds	r4, r5, r4
 80005ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80005ce:	f080 8107 	bcs.w	80007e0 <__udivmoddi4+0x290>
 80005d2:	45a4      	cmp	ip, r4
 80005d4:	f240 8104 	bls.w	80007e0 <__udivmoddi4+0x290>
 80005d8:	3802      	subs	r0, #2
 80005da:	442c      	add	r4, r5
 80005dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80005e0:	eba4 040c 	sub.w	r4, r4, ip
 80005e4:	2700      	movs	r7, #0
 80005e6:	b11e      	cbz	r6, 80005f0 <__udivmoddi4+0xa0>
 80005e8:	40d4      	lsrs	r4, r2
 80005ea:	2300      	movs	r3, #0
 80005ec:	e9c6 4300 	strd	r4, r3, [r6]
 80005f0:	4639      	mov	r1, r7
 80005f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d909      	bls.n	800060e <__udivmoddi4+0xbe>
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	f000 80eb 	beq.w	80007d6 <__udivmoddi4+0x286>
 8000600:	2700      	movs	r7, #0
 8000602:	e9c6 0100 	strd	r0, r1, [r6]
 8000606:	4638      	mov	r0, r7
 8000608:	4639      	mov	r1, r7
 800060a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060e:	fab3 f783 	clz	r7, r3
 8000612:	2f00      	cmp	r7, #0
 8000614:	d147      	bne.n	80006a6 <__udivmoddi4+0x156>
 8000616:	428b      	cmp	r3, r1
 8000618:	d302      	bcc.n	8000620 <__udivmoddi4+0xd0>
 800061a:	4282      	cmp	r2, r0
 800061c:	f200 80fa 	bhi.w	8000814 <__udivmoddi4+0x2c4>
 8000620:	1a84      	subs	r4, r0, r2
 8000622:	eb61 0303 	sbc.w	r3, r1, r3
 8000626:	2001      	movs	r0, #1
 8000628:	4698      	mov	r8, r3
 800062a:	2e00      	cmp	r6, #0
 800062c:	d0e0      	beq.n	80005f0 <__udivmoddi4+0xa0>
 800062e:	e9c6 4800 	strd	r4, r8, [r6]
 8000632:	e7dd      	b.n	80005f0 <__udivmoddi4+0xa0>
 8000634:	b902      	cbnz	r2, 8000638 <__udivmoddi4+0xe8>
 8000636:	deff      	udf	#255	; 0xff
 8000638:	fab2 f282 	clz	r2, r2
 800063c:	2a00      	cmp	r2, #0
 800063e:	f040 808f 	bne.w	8000760 <__udivmoddi4+0x210>
 8000642:	1b49      	subs	r1, r1, r5
 8000644:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000648:	fa1f f885 	uxth.w	r8, r5
 800064c:	2701      	movs	r7, #1
 800064e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fb0e 111c 	mls	r1, lr, ip, r1
 8000658:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065c:	fb08 f10c 	mul.w	r1, r8, ip
 8000660:	4299      	cmp	r1, r3
 8000662:	d907      	bls.n	8000674 <__udivmoddi4+0x124>
 8000664:	18eb      	adds	r3, r5, r3
 8000666:	f10c 30ff 	add.w	r0, ip, #4294967295
 800066a:	d202      	bcs.n	8000672 <__udivmoddi4+0x122>
 800066c:	4299      	cmp	r1, r3
 800066e:	f200 80cd 	bhi.w	800080c <__udivmoddi4+0x2bc>
 8000672:	4684      	mov	ip, r0
 8000674:	1a59      	subs	r1, r3, r1
 8000676:	b2a3      	uxth	r3, r4
 8000678:	fbb1 f0fe 	udiv	r0, r1, lr
 800067c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000680:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000684:	fb08 f800 	mul.w	r8, r8, r0
 8000688:	45a0      	cmp	r8, r4
 800068a:	d907      	bls.n	800069c <__udivmoddi4+0x14c>
 800068c:	192c      	adds	r4, r5, r4
 800068e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000692:	d202      	bcs.n	800069a <__udivmoddi4+0x14a>
 8000694:	45a0      	cmp	r8, r4
 8000696:	f200 80b6 	bhi.w	8000806 <__udivmoddi4+0x2b6>
 800069a:	4618      	mov	r0, r3
 800069c:	eba4 0408 	sub.w	r4, r4, r8
 80006a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006a4:	e79f      	b.n	80005e6 <__udivmoddi4+0x96>
 80006a6:	f1c7 0c20 	rsb	ip, r7, #32
 80006aa:	40bb      	lsls	r3, r7
 80006ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80006b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80006b4:	fa01 f407 	lsl.w	r4, r1, r7
 80006b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80006bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80006c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80006c4:	4325      	orrs	r5, r4
 80006c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80006ca:	0c2c      	lsrs	r4, r5, #16
 80006cc:	fb08 3319 	mls	r3, r8, r9, r3
 80006d0:	fa1f fa8e 	uxth.w	sl, lr
 80006d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80006d8:	fb09 f40a 	mul.w	r4, r9, sl
 80006dc:	429c      	cmp	r4, r3
 80006de:	fa02 f207 	lsl.w	r2, r2, r7
 80006e2:	fa00 f107 	lsl.w	r1, r0, r7
 80006e6:	d90b      	bls.n	8000700 <__udivmoddi4+0x1b0>
 80006e8:	eb1e 0303 	adds.w	r3, lr, r3
 80006ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80006f0:	f080 8087 	bcs.w	8000802 <__udivmoddi4+0x2b2>
 80006f4:	429c      	cmp	r4, r3
 80006f6:	f240 8084 	bls.w	8000802 <__udivmoddi4+0x2b2>
 80006fa:	f1a9 0902 	sub.w	r9, r9, #2
 80006fe:	4473      	add	r3, lr
 8000700:	1b1b      	subs	r3, r3, r4
 8000702:	b2ad      	uxth	r5, r5
 8000704:	fbb3 f0f8 	udiv	r0, r3, r8
 8000708:	fb08 3310 	mls	r3, r8, r0, r3
 800070c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000710:	fb00 fa0a 	mul.w	sl, r0, sl
 8000714:	45a2      	cmp	sl, r4
 8000716:	d908      	bls.n	800072a <__udivmoddi4+0x1da>
 8000718:	eb1e 0404 	adds.w	r4, lr, r4
 800071c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000720:	d26b      	bcs.n	80007fa <__udivmoddi4+0x2aa>
 8000722:	45a2      	cmp	sl, r4
 8000724:	d969      	bls.n	80007fa <__udivmoddi4+0x2aa>
 8000726:	3802      	subs	r0, #2
 8000728:	4474      	add	r4, lr
 800072a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800072e:	fba0 8902 	umull	r8, r9, r0, r2
 8000732:	eba4 040a 	sub.w	r4, r4, sl
 8000736:	454c      	cmp	r4, r9
 8000738:	46c2      	mov	sl, r8
 800073a:	464b      	mov	r3, r9
 800073c:	d354      	bcc.n	80007e8 <__udivmoddi4+0x298>
 800073e:	d051      	beq.n	80007e4 <__udivmoddi4+0x294>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d069      	beq.n	8000818 <__udivmoddi4+0x2c8>
 8000744:	ebb1 050a 	subs.w	r5, r1, sl
 8000748:	eb64 0403 	sbc.w	r4, r4, r3
 800074c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000750:	40fd      	lsrs	r5, r7
 8000752:	40fc      	lsrs	r4, r7
 8000754:	ea4c 0505 	orr.w	r5, ip, r5
 8000758:	e9c6 5400 	strd	r5, r4, [r6]
 800075c:	2700      	movs	r7, #0
 800075e:	e747      	b.n	80005f0 <__udivmoddi4+0xa0>
 8000760:	f1c2 0320 	rsb	r3, r2, #32
 8000764:	fa20 f703 	lsr.w	r7, r0, r3
 8000768:	4095      	lsls	r5, r2
 800076a:	fa01 f002 	lsl.w	r0, r1, r2
 800076e:	fa21 f303 	lsr.w	r3, r1, r3
 8000772:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000776:	4338      	orrs	r0, r7
 8000778:	0c01      	lsrs	r1, r0, #16
 800077a:	fbb3 f7fe 	udiv	r7, r3, lr
 800077e:	fa1f f885 	uxth.w	r8, r5
 8000782:	fb0e 3317 	mls	r3, lr, r7, r3
 8000786:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800078a:	fb07 f308 	mul.w	r3, r7, r8
 800078e:	428b      	cmp	r3, r1
 8000790:	fa04 f402 	lsl.w	r4, r4, r2
 8000794:	d907      	bls.n	80007a6 <__udivmoddi4+0x256>
 8000796:	1869      	adds	r1, r5, r1
 8000798:	f107 3cff 	add.w	ip, r7, #4294967295
 800079c:	d22f      	bcs.n	80007fe <__udivmoddi4+0x2ae>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d92d      	bls.n	80007fe <__udivmoddi4+0x2ae>
 80007a2:	3f02      	subs	r7, #2
 80007a4:	4429      	add	r1, r5
 80007a6:	1acb      	subs	r3, r1, r3
 80007a8:	b281      	uxth	r1, r0
 80007aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80007ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80007b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007b6:	fb00 f308 	mul.w	r3, r0, r8
 80007ba:	428b      	cmp	r3, r1
 80007bc:	d907      	bls.n	80007ce <__udivmoddi4+0x27e>
 80007be:	1869      	adds	r1, r5, r1
 80007c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80007c4:	d217      	bcs.n	80007f6 <__udivmoddi4+0x2a6>
 80007c6:	428b      	cmp	r3, r1
 80007c8:	d915      	bls.n	80007f6 <__udivmoddi4+0x2a6>
 80007ca:	3802      	subs	r0, #2
 80007cc:	4429      	add	r1, r5
 80007ce:	1ac9      	subs	r1, r1, r3
 80007d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80007d4:	e73b      	b.n	800064e <__udivmoddi4+0xfe>
 80007d6:	4637      	mov	r7, r6
 80007d8:	4630      	mov	r0, r6
 80007da:	e709      	b.n	80005f0 <__udivmoddi4+0xa0>
 80007dc:	4607      	mov	r7, r0
 80007de:	e6e7      	b.n	80005b0 <__udivmoddi4+0x60>
 80007e0:	4618      	mov	r0, r3
 80007e2:	e6fb      	b.n	80005dc <__udivmoddi4+0x8c>
 80007e4:	4541      	cmp	r1, r8
 80007e6:	d2ab      	bcs.n	8000740 <__udivmoddi4+0x1f0>
 80007e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80007ec:	eb69 020e 	sbc.w	r2, r9, lr
 80007f0:	3801      	subs	r0, #1
 80007f2:	4613      	mov	r3, r2
 80007f4:	e7a4      	b.n	8000740 <__udivmoddi4+0x1f0>
 80007f6:	4660      	mov	r0, ip
 80007f8:	e7e9      	b.n	80007ce <__udivmoddi4+0x27e>
 80007fa:	4618      	mov	r0, r3
 80007fc:	e795      	b.n	800072a <__udivmoddi4+0x1da>
 80007fe:	4667      	mov	r7, ip
 8000800:	e7d1      	b.n	80007a6 <__udivmoddi4+0x256>
 8000802:	4681      	mov	r9, r0
 8000804:	e77c      	b.n	8000700 <__udivmoddi4+0x1b0>
 8000806:	3802      	subs	r0, #2
 8000808:	442c      	add	r4, r5
 800080a:	e747      	b.n	800069c <__udivmoddi4+0x14c>
 800080c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000810:	442b      	add	r3, r5
 8000812:	e72f      	b.n	8000674 <__udivmoddi4+0x124>
 8000814:	4638      	mov	r0, r7
 8000816:	e708      	b.n	800062a <__udivmoddi4+0xda>
 8000818:	4637      	mov	r7, r6
 800081a:	e6e9      	b.n	80005f0 <__udivmoddi4+0xa0>

0800081c <__aeabi_idiv0>:
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000828:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <SCB_EnableICache+0x3c>)
 800082e:	2200      	movs	r2, #0
 8000830:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000838:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <SCB_EnableICache+0x3c>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <SCB_EnableICache+0x3c>)
 8000842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000846:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800084c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <SCB_EnableDCache+0x7c>)
 8000868:	2200      	movs	r2, #0
 800086a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800086e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <SCB_EnableDCache+0x7c>)
 8000874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000878:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	0b5b      	lsrs	r3, r3, #13
 800087e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000882:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800088c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	015a      	lsls	r2, r3, #5
 8000892:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000896:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800089c:	490f      	ldr	r1, [pc, #60]	; (80008dc <SCB_EnableDCache+0x7c>)
 800089e:	4313      	orrs	r3, r2
 80008a0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1ef      	bne.n	800088e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	60fa      	str	r2, [r7, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1e5      	bne.n	8000884 <SCB_EnableDCache+0x24>
 80008b8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <SCB_EnableDCache+0x7c>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <SCB_EnableDCache+0x7c>)
 80008c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c6:	6153      	str	r3, [r2, #20]
 80008c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__io_putchar>:

void BSP_SDRAM_Init();
void USB_OTG_BSP_HS_Init(void);

int __io_putchar(int ch)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80008e8:	1d39      	adds	r1, r7, #4
 80008ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ee:	2201      	movs	r2, #1
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <__io_putchar+0x20>)
 80008f2:	f00b fe09 	bl	800c508 <HAL_UART_Transmit>
	return ch;
 80008f6:	687b      	ldr	r3, [r7, #4]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20001608 	.word	0x20001608

08000904 <_write>:

int _write(int file, char* ptr, int len)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	e009      	b.n	800092a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	60ba      	str	r2, [r7, #8]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffde 	bl	80008e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	429a      	cmp	r2, r3
 8000930:	dbf1      	blt.n	8000916 <_write+0x12>
	}

	return len;
 8000932:	687b      	ldr	r3, [r7, #4]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <hardware_rand_initialize>:

void hardware_rand_initialize(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

	/* Enable clock for the RNG.  */
	STM32F7_RCC_AHB2ENR |= STM32F7_RCC_AHB2ENR_RNGEN;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <hardware_rand_initialize+0x20>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <hardware_rand_initialize+0x20>)
 8000946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094a:	6013      	str	r3, [r2, #0]

	/* Enable the random number generator.  */
	STM32_RNG_CR = STM32_RNG_CR_RNGEN;
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <hardware_rand_initialize+0x24>)
 800094e:	2204      	movs	r2, #4
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40023834 	.word	0x40023834
 8000960:	50060800 	.word	0x50060800

08000964 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

	if (huart->Instance == USART1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a3c      	ldr	r2, [pc, #240]	; (8000a74 <HAL_UART_MspInit+0x110>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d145      	bne.n	8000a12 <HAL_UART_MspInit+0xae>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <HAL_UART_MspInit+0x114>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f003 0310 	and.w	r3, r3, #16
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a35      	ldr	r2, [pc, #212]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a2f      	ldr	r2, [pc, #188]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

		/**USART1 GPIO Configuration
		 PB7     ------> USART1_RX
		 PA9     ------> USART1_TX
		 */
		GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009de:	2307      	movs	r3, #7
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4824      	ldr	r0, [pc, #144]	; (8000a7c <HAL_UART_MspInit+0x118>)
 80009ea:	f00b f801 	bl	800b9f0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a00:	2307      	movs	r3, #7
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481d      	ldr	r0, [pc, #116]	; (8000a80 <HAL_UART_MspInit+0x11c>)
 8000a0c:	f00a fff0 	bl	800b9f0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}
}
 8000a10:	e02c      	b.n	8000a6c <HAL_UART_MspInit+0x108>
	else if (huart->Instance == USART6)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <HAL_UART_MspInit+0x120>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d127      	bne.n	8000a6c <HAL_UART_MspInit+0x108>
		__HAL_RCC_USART6_CLK_ENABLE();
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a20:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	6453      	str	r3, [r2, #68]	; 0x44
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	f003 0320 	and.w	r3, r3, #32
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8000a4c:	23c0      	movs	r3, #192	; 0xc0
 8000a4e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <HAL_UART_MspInit+0x124>)
 8000a68:	f00a ffc2 	bl	800b9f0 <HAL_GPIO_Init>
}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40011000 	.word	0x40011000
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40011400 	.word	0x40011400
 8000a88:	40020800 	.word	0x40020800

08000a8c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <MX_USART1_UART_Init+0x58>)
 8000a94:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000ad0:	f00b fe24 	bl	800c71c <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d000      	beq.n	8000adc <MX_USART1_UART_Init+0x50>
	{
		while (1);
 8000ada:	e7fe      	b.n	8000ada <MX_USART1_UART_Init+0x4e>
	}
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20001608 	.word	0x20001608
 8000ae4:	40011000 	.word	0x40011000

08000ae8 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b092      	sub	sp, #72	; 0x48
 8000aec:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af4:	2301      	movs	r3, #1
 8000af6:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afc:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b06:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000b08:	2319      	movs	r3, #25
 8000b0a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 8000b0c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b16:	2309      	movs	r3, #9
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00b f913 	bl	800bd48 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d000      	beq.n	8000b32 <SystemClock_Config+0x4a>
	{
		while (1)
 8000b30:	e7fe      	b.n	8000b30 <SystemClock_Config+0x48>
			;
		}
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 8000b32:	f00b f8cd 	bl	800bcd0 <HAL_PWREx_EnableOverDrive>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d000      	beq.n	8000b46 <SystemClock_Config+0x5e>
	{
		while (1)
 8000b44:	e7fe      	b.n	8000b44 <SystemClock_Config+0x5c>
			;
		}
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1
 8000b46:	230f      	movs	r3, #15
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5c:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000b5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b62:	2107      	movs	r1, #7
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00b fae9 	bl	800c13c <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK)
 8000b70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d000      	beq.n	8000b7a <SystemClock_Config+0x92>
	{
		while (1)
 8000b78:	e7fe      	b.n	8000b78 <SystemClock_Config+0x90>
		{
			;
		}
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3748      	adds	r7, #72	; 0x48
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <MPU_Config>:
 *         The Region Size is 256KB, it is related to SRAM1 and SRAM2  memory size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000b8a:	f00a fb25 	bl	800b1d8 <HAL_MPU_Disable>

	/* Configure the MPU attributes as cacheable for SRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20010000;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MPU_Config+0x84>)
 8000b94:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000b96:	2311      	movs	r3, #17
 8000b98:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f00a fb2d 	bl	800b21c <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8000bc6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bca:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000bcc:	2316      	movs	r3, #22
 8000bce:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000be8:	2300      	movs	r3, #0
 8000bea:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f00a fb12 	bl	800b21c <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bf8:	2004      	movs	r0, #4
 8000bfa:	f00a fafd 	bl	800b1f8 <HAL_MPU_Enable>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20010000 	.word	0x20010000

08000c0c <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 8000c10:	f7ff fe06 	bl	8000820 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8000c14:	f7ff fe24 	bl	8000860 <SCB_EnableDCache>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <hardware_setup>:

void hardware_setup(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* Configure the MPU attributes as Write Through */
	MPU_Config();
 8000c20:	f7ff ffb0 	bl	8000b84 <MPU_Config>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 8000c24:	f7ff fff2 	bl	8000c0c <CPU_CACHE_Enable>

	/* STM32F7xx HAL library initialization */
	HAL_Init();
 8000c28:	f00a fa48 	bl	800b0bc <HAL_Init>

	/* Configure the system clock to 216 MHz */
	SystemClock_Config();
 8000c2c:	f7ff ff5c 	bl	8000ae8 <SystemClock_Config>

	/* Configure the SDRAM.  */
	BSP_SDRAM_Init();
 8000c30:	f00a f9bc 	bl	800afac <BSP_SDRAM_Init>

	/* Initialize UART for printf.  */
	MX_USART1_UART_Init();
 8000c34:	f7ff ff2a 	bl	8000a8c <MX_USART1_UART_Init>

	/* Initialize the hardware random number generator.  */
	hardware_rand_initialize();
 8000c38:	f7ff fe80 	bl	800093c <hardware_rand_initialize>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <main>:
VOID nx_driver_stm32f7xx(NX_IP_DRIVER* driver_req_ptr);

VOID hardware_setup(void);

int main(int argc, char** argv)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	/* Setup the hardware. */
	hardware_setup();
 8000c4a:	f7ff ffe7 	bl	8000c1c <hardware_setup>

	/* Enter the ThreadX kernel.  */
	tx_kernel_enter();
 8000c4e:	f00c fb4b 	bl	800d2e8 <_tx_initialize_kernel_enter>
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <tx_application_define>:

/** Define what the initial system looks like.  */
void tx_application_define(void* first_unused_memory)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af08      	add	r7, sp, #32
 8000c62:	6078      	str	r0, [r7, #4]
	UINT status;

	/* Initialize the NetX system.  */
	nx_system_initialize();
 8000c64:	f002 f926 	bl	8002eb4 <_nx_system_initialize>

	/* Create a packet pool.  */
	status = nx_packet_pool_create(&pool_0, "NetX Main Packet Pool", 1536,
			(ULONG*)(((int)packet_pool_area + 15) & ~15), NX_PACKET_POOL_SIZE);
 8000c68:	4b3e      	ldr	r3, [pc, #248]	; (8000d64 <tx_application_define+0x108>)
 8000c6a:	330f      	adds	r3, #15
 8000c6c:	f023 030f 	bic.w	r3, r3, #15
	status = nx_packet_pool_create(&pool_0, "NetX Main Packet Pool", 1536,
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <tx_application_define+0x10c>)
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	4613      	mov	r3, r2
 8000c78:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c7c:	493b      	ldr	r1, [pc, #236]	; (8000d6c <tx_application_define+0x110>)
 8000c7e:	483c      	ldr	r0, [pc, #240]	; (8000d70 <tx_application_define+0x114>)
 8000c80:	f001 ffe4 	bl	8002c4c <_nx_packet_pool_create>
 8000c84:	60f8      	str	r0, [r7, #12]

	/* Check for pool creation error.  */
	if (status)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d004      	beq.n	8000c96 <tx_application_define+0x3a>
		error_counter++;
 8000c8c:	4b39      	ldr	r3, [pc, #228]	; (8000d74 <tx_application_define+0x118>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a38      	ldr	r2, [pc, #224]	; (8000d74 <tx_application_define+0x118>)
 8000c94:	6013      	str	r3, [r2, #0]

	/* Create an IP instance.  */
	status = nx_ip_create(&ip_0, "NetX IP Instance 0",
 8000c96:	2301      	movs	r3, #1
 8000c98:	9304      	str	r3, [sp, #16]
 8000c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c9e:	9303      	str	r3, [sp, #12]
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <tx_application_define+0x11c>)
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <tx_application_define+0x120>)
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <tx_application_define+0x114>)
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2300      	movs	r3, #0
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4933      	ldr	r1, [pc, #204]	; (8000d80 <tx_application_define+0x124>)
 8000cb2:	4834      	ldr	r0, [pc, #208]	; (8000d84 <tx_application_define+0x128>)
 8000cb4:	f001 f91e 	bl	8001ef4 <_nx_ip_create>
 8000cb8:	60f8      	str	r0, [r7, #12]
			0xFFFFFF00UL,
#endif
			&pool_0, nx_driver_stm32f7xx, (UCHAR*)ip_thread_stack, sizeof(ip_thread_stack), 1);

	/* Check for IP create errors.  */
	if (status)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d004      	beq.n	8000cca <tx_application_define+0x6e>
		error_counter++;
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <tx_application_define+0x118>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4a2b      	ldr	r2, [pc, #172]	; (8000d74 <tx_application_define+0x118>)
 8000cc8:	6013      	str	r3, [r2, #0]

	/* Enable ARP and supply ARP cache memory for IP Instance 0.  */
	status = nx_arp_enable(&ip_0, (void*)arp_space_area, sizeof(arp_space_area));
 8000cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cce:	492e      	ldr	r1, [pc, #184]	; (8000d88 <tx_application_define+0x12c>)
 8000cd0:	482c      	ldr	r0, [pc, #176]	; (8000d84 <tx_application_define+0x128>)
 8000cd2:	f000 f925 	bl	8000f20 <_nx_arp_enable>
 8000cd6:	60f8      	str	r0, [r7, #12]

	/* Check for ARP enable errors.  */
	if (status)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d004      	beq.n	8000ce8 <tx_application_define+0x8c>
		error_counter++;
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <tx_application_define+0x118>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <tx_application_define+0x118>)
 8000ce6:	6013      	str	r3, [r2, #0]

	/* Enable TCP traffic.  */
	status = nx_tcp_enable(&ip_0);
 8000ce8:	4826      	ldr	r0, [pc, #152]	; (8000d84 <tx_application_define+0x128>)
 8000cea:	f002 f91d 	bl	8002f28 <_nx_tcp_enable>
 8000cee:	60f8      	str	r0, [r7, #12]

	/* Check for TCP enable errors.  */
	if (status)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d004      	beq.n	8000d00 <tx_application_define+0xa4>
		error_counter++;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <tx_application_define+0x118>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <tx_application_define+0x118>)
 8000cfe:	6013      	str	r3, [r2, #0]

	/* Enable UDP traffic.  */
	status = nx_udp_enable(&ip_0);
 8000d00:	4820      	ldr	r0, [pc, #128]	; (8000d84 <tx_application_define+0x128>)
 8000d02:	f002 fe6d 	bl	80039e0 <_nx_udp_enable>
 8000d06:	60f8      	str	r0, [r7, #12]

	/* Check for UDP enable errors.  */
	if (status)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d004      	beq.n	8000d18 <tx_application_define+0xbc>
		error_counter++;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <tx_application_define+0x118>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <tx_application_define+0x118>)
 8000d16:	6013      	str	r3, [r2, #0]

	/* Enable ICMP.  */
	status = nx_icmp_enable(&ip_0);
 8000d18:	481a      	ldr	r0, [pc, #104]	; (8000d84 <tx_application_define+0x128>)
 8000d1a:	f000 ff11 	bl	8001b40 <_nx_icmp_enable>
 8000d1e:	60f8      	str	r0, [r7, #12]

	/* Check for errors.  */
	if (status)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <tx_application_define+0xd4>
		error_counter++;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <tx_application_define+0x118>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <tx_application_define+0x118>)
 8000d2e:	6013      	str	r3, [r2, #0]

#ifdef NX_ENABLE_DHCP
	/* Create the main thread.  */
	tx_thread_create(&thread_0, "thread 0", thread_0_entry, 0, thread_0_stack,
 8000d30:	23c8      	movs	r3, #200	; 0xc8
 8000d32:	9306      	str	r3, [sp, #24]
 8000d34:	2301      	movs	r3, #1
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	9304      	str	r3, [sp, #16]
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	9303      	str	r3, [sp, #12]
 8000d40:	2304      	movs	r3, #4
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <tx_application_define+0x130>)
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <tx_application_define+0x134>)
 8000d52:	4910      	ldr	r1, [pc, #64]	; (8000d94 <tx_application_define+0x138>)
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <tx_application_define+0x13c>)
 8000d56:	f00d fb2d 	bl	800e3b4 <_txe_thread_create>
			sizeof(thread_0_stack), 4, 4, TX_NO_TIME_SLICE, TX_AUTO_START);
#endif
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20002090 	.word	0x20002090
 8000d68:	00013880 	.word	0x00013880
 8000d6c:	0800fb90 	.word	0x0800fb90
 8000d70:	20018088 	.word	0x20018088
 8000d74:	20019080 	.word	0x20019080
 8000d78:	20017888 	.word	0x20017888
 8000d7c:	08001295 	.word	0x08001295
 8000d80:	0800fba8 	.word	0x0800fba8
 8000d84:	200180c8 	.word	0x200180c8
 8000d88:	20001688 	.word	0x20001688
 8000d8c:	20001888 	.word	0x20001888
 8000d90:	08000d9d 	.word	0x08000d9d
 8000d94:	0800fbbc 	.word	0x0800fbbc
 8000d98:	20018fb8 	.word	0x20018fb8

08000d9c <thread_0_entry>:

#ifdef NX_ENABLE_DHCP
/* Define the test threads.  */
void thread_0_entry(ULONG thread_input)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	6078      	str	r0, [r7, #4]
	UINT status;
	ULONG actual_status;
	ULONG temp;

	/* Create the DHCP instance.  */
	printf("\r\nDHCP In Progress...\r\n");
 8000da4:	483e      	ldr	r0, [pc, #248]	; (8000ea0 <thread_0_entry+0x104>)
 8000da6:	f00d ffa1 	bl	800ecec <puts>

	nx_dhcp_create(&dhcp_client, &ip_0, "dhcp_client");
 8000daa:	4a3e      	ldr	r2, [pc, #248]	; (8000ea4 <thread_0_entry+0x108>)
 8000dac:	493e      	ldr	r1, [pc, #248]	; (8000ea8 <thread_0_entry+0x10c>)
 8000dae:	483f      	ldr	r0, [pc, #252]	; (8000eac <thread_0_entry+0x110>)
 8000db0:	f003 fe2e 	bl	8004a10 <_nx_dhcp_create>

	/* Start the DHCP Client.  */
	nx_dhcp_start(&dhcp_client);
 8000db4:	483d      	ldr	r0, [pc, #244]	; (8000eac <thread_0_entry+0x110>)
 8000db6:	f004 fb73 	bl	80054a0 <_nx_dhcp_start>

	/* Wait until address is solved. */
	status = nx_ip_status_check(&ip_0, NX_IP_ADDRESS_RESOLVED, &actual_status, 10000);
 8000dba:	f107 020c 	add.w	r2, r7, #12
 8000dbe:	f242 7310 	movw	r3, #10000	; 0x2710
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4838      	ldr	r0, [pc, #224]	; (8000ea8 <thread_0_entry+0x10c>)
 8000dc6:	f001 fac9 	bl	800235c <_nx_ip_status_check>
 8000dca:	6278      	str	r0, [r7, #36]	; 0x24

	if (status)
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <thread_0_entry+0x3e>
	{
		/* DHCP Failed...  no IP address! */
		printf("Can't resolve address\r\n");
 8000dd2:	4837      	ldr	r0, [pc, #220]	; (8000eb0 <thread_0_entry+0x114>)
 8000dd4:	f00d ff8a 	bl	800ecec <puts>
				(UINT)(ip_address[2]), (UINT)(ip_address[3]));

		printf("Mask: %d.%d.%d.%d\r\n", (UINT)(network_mask[0]), (UINT)(network_mask[1]),
				(UINT)(network_mask[2]), (UINT)(network_mask[3]));
	}
}
 8000dd8:	e05e      	b.n	8000e98 <thread_0_entry+0xfc>
		nx_ip_address_get(&ip_0, (ULONG*)&ip_address[0], (ULONG*)&network_mask[0]);
 8000dda:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <thread_0_entry+0x118>)
 8000ddc:	4936      	ldr	r1, [pc, #216]	; (8000eb8 <thread_0_entry+0x11c>)
 8000dde:	4832      	ldr	r0, [pc, #200]	; (8000ea8 <thread_0_entry+0x10c>)
 8000de0:	f000 ffd4 	bl	8001d8c <_nx_ip_address_get>
		temp = *((ULONG*)&ip_address[0]);
 8000de4:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <thread_0_entry+0x11c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	623b      	str	r3, [r7, #32]
		NX_CHANGE_ULONG_ENDIAN(temp);
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	4053      	eors	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	4053      	eors	r3, r2
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	623b      	str	r3, [r7, #32]
		*((ULONG*)&ip_address[0]) = temp;
 8000e18:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <thread_0_entry+0x11c>)
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	6013      	str	r3, [r2, #0]
		temp = *((ULONG*)&network_mask[0]);
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <thread_0_entry+0x118>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	623b      	str	r3, [r7, #32]
		NX_CHANGE_ULONG_ENDIAN(temp);
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4053      	eors	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	4053      	eors	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	623b      	str	r3, [r7, #32]
		*((ULONG*)&network_mask[0]) = temp;
 8000e52:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <thread_0_entry+0x118>)
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	6013      	str	r3, [r2, #0]
		printf("IP address: %d.%d.%d.%d\r\n", (UINT)(ip_address[0]), (UINT)(ip_address[1]),
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <thread_0_entry+0x11c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <thread_0_entry+0x11c>)
 8000e60:	785b      	ldrb	r3, [r3, #1]
 8000e62:	461a      	mov	r2, r3
				(UINT)(ip_address[2]), (UINT)(ip_address[3]));
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <thread_0_entry+0x11c>)
 8000e66:	789b      	ldrb	r3, [r3, #2]
		printf("IP address: %d.%d.%d.%d\r\n", (UINT)(ip_address[0]), (UINT)(ip_address[1]),
 8000e68:	4618      	mov	r0, r3
				(UINT)(ip_address[2]), (UINT)(ip_address[3]));
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <thread_0_entry+0x11c>)
 8000e6c:	78db      	ldrb	r3, [r3, #3]
		printf("IP address: %d.%d.%d.%d\r\n", (UINT)(ip_address[0]), (UINT)(ip_address[1]),
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4603      	mov	r3, r0
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <thread_0_entry+0x120>)
 8000e74:	f00d fec6 	bl	800ec04 <iprintf>
		printf("Mask: %d.%d.%d.%d\r\n", (UINT)(network_mask[0]), (UINT)(network_mask[1]),
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <thread_0_entry+0x118>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <thread_0_entry+0x118>)
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	461a      	mov	r2, r3
				(UINT)(network_mask[2]), (UINT)(network_mask[3]));
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <thread_0_entry+0x118>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
		printf("Mask: %d.%d.%d.%d\r\n", (UINT)(network_mask[0]), (UINT)(network_mask[1]),
 8000e88:	4618      	mov	r0, r3
				(UINT)(network_mask[2]), (UINT)(network_mask[3]));
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <thread_0_entry+0x118>)
 8000e8c:	78db      	ldrb	r3, [r3, #3]
		printf("Mask: %d.%d.%d.%d\r\n", (UINT)(network_mask[0]), (UINT)(network_mask[1]),
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4603      	mov	r3, r0
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <thread_0_entry+0x124>)
 8000e94:	f00d feb6 	bl	800ec04 <iprintf>
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	0800fbc8 	.word	0x0800fbc8
 8000ea4:	0800fbe0 	.word	0x0800fbe0
 8000ea8:	200180c8 	.word	0x200180c8
 8000eac:	20015920 	.word	0x20015920
 8000eb0:	0800fbec 	.word	0x0800fbec
 8000eb4:	2000208c 	.word	0x2000208c
 8000eb8:	20002088 	.word	0x20002088
 8000ebc:	0800fc04 	.word	0x0800fc04
 8000ec0:	0800fc20 	.word	0x0800fc20

08000ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eee:	f00b feb5 	bl	800cc5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ef2:	f00d fe27 	bl	800eb44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fea3 	bl	8000c40 <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   r0, =_estack
 8000efc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8000f08:	0800fd9c 	.word	0x0800fd9c
  ldr r2, =_sbss
 8000f0c:	20001550 	.word	0x20001550
  ldr r4, =_ebss
 8000f10:	200197dc 	.word	0x200197dc

08000f14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>

08000f16 <HardFault_Handler>:
  .size Default_Handler, .-Default_Handler

HardFault_Handler:
  b HardFault_Handler
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler>

08000f18 <MemManage_Handler>:

MemManage_Handler:
  b MemManage_Handler
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler>

08000f1a <BusFault_Handler>:

BusFault_Handler:
  b BusFault_Handler
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler>

08000f1c <UsageFault_Handler>:

UsageFault_Handler:
  b UsageFault_Handler
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler>
	...

08000f20 <_nx_arp_enable>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f22:	460d      	mov	r5, r1
 8000f24:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8000f26:	2100      	movs	r1, #0
{
 8000f28:	4616      	mov	r6, r2
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	f00d fe61 	bl	800ebf2 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 8000f30:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <_nx_arp_enable+0x8c>)
 8000f32:	fba2 3206 	umull	r3, r2, r2, r6
 8000f36:	0912      	lsrs	r2, r2, #4

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8000f38:	1e50      	subs	r0, r2, #1
 8000f3a:	d034      	beq.n	8000fa6 <_nx_arp_enable+0x86>
 8000f3c:	462b      	mov	r3, r5
 8000f3e:	2100      	movs	r1, #0
 8000f40:	3101      	adds	r1, #1
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8000f42:	3334      	adds	r3, #52	; 0x34
    for (i = 0; i < (arp_entries - 1); i++)
 8000f44:	4281      	cmp	r1, r0
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8000f46:	f843 3c28 	str.w	r3, [r3, #-40]
    for (i = 0; i < (arp_entries - 1); i++)
 8000f4a:	d1f9      	bne.n	8000f40 <_nx_arp_enable+0x20>
 8000f4c:	2634      	movs	r6, #52	; 0x34
    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	fb06 5602 	mla	r6, r6, r2, r5
 8000f54:	3e34      	subs	r6, #52	; 0x34
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8000f56:	60f5      	str	r5, [r6, #12]
 8000f58:	4633      	mov	r3, r6
    for (i = 0; i < (arp_entries - 1); i++)
 8000f5a:	3101      	adds	r1, #1
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8000f5c:	3b34      	subs	r3, #52	; 0x34
    for (i = 0; i < (arp_entries - 1); i++)
 8000f5e:	4281      	cmp	r1, r0
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8000f60:	645b      	str	r3, [r3, #68]	; 0x44
    for (i = 0; i < (arp_entries - 1); i++)
 8000f62:	d1fa      	bne.n	8000f5a <_nx_arp_enable+0x3a>
 8000f64:	f06f 0333 	mvn.w	r3, #51	; 0x33
 8000f68:	fb03 6602 	mla	r6, r3, r2, r6
 8000f6c:	3634      	adds	r6, #52	; 0x34
        entry_ptr--;
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8000f6e:	2334      	movs	r3, #52	; 0x34
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8000f70:	2000      	movs	r0, #0
    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 8000f72:	f8df c048 	ldr.w	ip, [pc, #72]	; 8000fbc <_nx_arp_enable+0x9c>
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8000f76:	fb03 6302 	mla	r3, r3, r2, r6

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 8000f7a:	4f0d      	ldr	r7, [pc, #52]	; (8000fb0 <_nx_arp_enable+0x90>)

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 8000f7c:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <_nx_arp_enable+0x94>)
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8000f7e:	3b34      	subs	r3, #52	; 0x34
 8000f80:	6133      	str	r3, [r6, #16]

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <_nx_arp_enable+0x98>)
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 8000f84:	f8c4 5bfc 	str.w	r5, [r4, #3068]	; 0xbfc
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 8000f88:	f8c4 5c20 	str.w	r5, [r4, #3104]	; 0xc20
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 8000f8c:	f8c4 2c24 	str.w	r2, [r4, #3108]	; 0xc24
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8000f90:	f8c4 0bf8 	str.w	r0, [r4, #3064]	; 0xbf8
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 8000f94:	f8c4 cc10 	str.w	ip, [r4, #3088]	; 0xc10
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 8000f98:	f8c4 7c14 	str.w	r7, [r4, #3092]	; 0xc14
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 8000f9c:	f8c4 1c18 	str.w	r1, [r4, #3096]	; 0xc18
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8000fa0:	f8c4 3c0c 	str.w	r3, [r4, #3084]	; 0xc0c
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8000fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8000fa6:	60ed      	str	r5, [r5, #12]
 8000fa8:	462e      	mov	r6, r5
 8000faa:	e7e0      	b.n	8000f6e <_nx_arp_enable+0x4e>
 8000fac:	4ec4ec4f 	.word	0x4ec4ec4f
 8000fb0:	0800124d 	.word	0x0800124d
 8000fb4:	08001071 	.word	0x08001071
 8000fb8:	08000fc1 	.word	0x08000fc1
 8000fbc:	08001171 	.word	0x08001171

08000fc0 <_nx_arp_entry_allocate>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 8000fc2:	f8d0 3bfc 	ldr.w	r3, [r0, #3068]	; 0xbfc
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d042      	beq.n	8001050 <_nx_arp_entry_allocate+0x90>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8000fca:	691c      	ldr	r4, [r3, #16]
 8000fcc:	460e      	mov	r6, r1
 8000fce:	4605      	mov	r5, r0
 8000fd0:	4617      	mov	r7, r2

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 8000fd2:	4621      	mov	r1, r4
 8000fd4:	f004 fb44 	bl	8005660 <_nx_arp_dynamic_entry_delete>
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8000fd8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8000fdc:	b672      	cpsid	i
        TX_DISABLE

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8000fde:	6833      	ldr	r3, [r6, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d037      	beq.n	8001054 <_nx_arp_entry_allocate+0x94>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8000fe4:	6163      	str	r3, [r4, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8000fe6:	6833      	ldr	r3, [r6, #0]
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8000fe8:	61e6      	str	r6, [r4, #28]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	61a3      	str	r3, [r4, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 8000fee:	615c      	str	r4, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 8000ff0:	6833      	ldr	r3, [r6, #0]
 8000ff2:	619c      	str	r4, [r3, #24]
            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8000ff4:	2f01      	cmp	r7, #1
 8000ff6:	d01a      	beq.n	800102e <_nx_arp_entry_allocate+0x6e>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 8000ff8:	f8d5 3bfc 	ldr.w	r3, [r5, #3068]	; 0xbfc
 8000ffc:	42a3      	cmp	r3, r4
 8000ffe:	d00c      	beq.n	800101a <_nx_arp_entry_allocate+0x5a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8001000:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8001004:	6101      	str	r1, [r0, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8001006:	6919      	ldr	r1, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8001008:	6926      	ldr	r6, [r4, #16]
 800100a:	60f0      	str	r0, [r6, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 800100c:	e9c4 3103 	strd	r3, r1, [r4, #12]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 8001010:	60cc      	str	r4, [r1, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8001012:	68e3      	ldr	r3, [r4, #12]
 8001014:	611c      	str	r4, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 8001016:	f8c5 4bfc 	str.w	r4, [r5, #3068]	; 0xbfc
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 800101a:	f8d5 3c00 	ldr.w	r3, [r5, #3072]	; 0xc00
 800101e:	3301      	adds	r3, #1
 8001020:	f8c5 3c00 	str.w	r3, [r5, #3072]	; 0xc00
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8001024:	6027      	str	r7, [r4, #0]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001026:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 800102a:	2000      	movs	r0, #0
        status =  NX_NO_MORE_ENTRIES;
    }

    /* Return status to the caller.  */
    return(status);
}
 800102c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 800102e:	68e3      	ldr	r3, [r4, #12]
 8001030:	42a3      	cmp	r3, r4
 8001032:	d014      	beq.n	800105e <_nx_arp_entry_allocate+0x9e>
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8001034:	6921      	ldr	r1, [r4, #16]
 8001036:	6119      	str	r1, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8001038:	6921      	ldr	r1, [r4, #16]
 800103a:	60cb      	str	r3, [r1, #12]
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 800103c:	f8d5 3bf8 	ldr.w	r3, [r5, #3064]	; 0xbf8
 8001040:	b18b      	cbz	r3, 8001066 <_nx_arp_entry_allocate+0xa6>
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 8001042:	6919      	ldr	r1, [r3, #16]
 8001044:	e9c4 3103 	strd	r3, r1, [r4, #12]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 8001048:	6919      	ldr	r1, [r3, #16]
 800104a:	60cc      	str	r4, [r1, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 800104c:	611c      	str	r4, [r3, #16]
 800104e:	e7e9      	b.n	8001024 <_nx_arp_entry_allocate+0x64>
        status =  NX_NO_MORE_ENTRIES;
 8001050:	2017      	movs	r0, #23
}
 8001052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8001054:	61e6      	str	r6, [r4, #28]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 8001056:	e9c4 4405 	strd	r4, r4, [r4, #20]
            *arp_list_ptr =  arp_entry;
 800105a:	6034      	str	r4, [r6, #0]
 800105c:	e7ca      	b.n	8000ff4 <_nx_arp_entry_allocate+0x34>
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c5 3bfc 	str.w	r3, [r5, #3068]	; 0xbfc
 8001064:	e7ea      	b.n	800103c <_nx_arp_entry_allocate+0x7c>
                arp_entry -> nx_arp_pool_previous = arp_entry;
 8001066:	e9c4 4403 	strd	r4, r4, [r4, #12]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 800106a:	f8c5 4bf8 	str.w	r4, [r5, #3064]	; 0xbf8
 800106e:	e7d9      	b.n	8001024 <_nx_arp_entry_allocate+0x64>

08001070 <_nx_arp_packet_send>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8001070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001074:	b08b      	sub	sp, #44	; 0x2c
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8001076:	2a00      	cmp	r2, #0
 8001078:	d06b      	beq.n	8001152 <_nx_arp_packet_send+0xe2>
 800107a:	4605      	mov	r5, r0
 800107c:	460f      	mov	r7, r1
 800107e:	4614      	mov	r4, r2
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8001080:	2300      	movs	r3, #0
 8001082:	222c      	movs	r2, #44	; 0x2c
 8001084:	a901      	add	r1, sp, #4
 8001086:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 800108a:	f001 fd47 	bl	8002b1c <_nx_packet_allocate>
 800108e:	2800      	cmp	r0, #0
 8001090:	d15c      	bne.n	800114c <_nx_arp_packet_send+0xdc>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8001092:	9e01      	ldr	r6, [sp, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8001094:	f04f 0e1c 	mov.w	lr, #28
    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8001098:	f44f 3c84 	mov.w	ip, #67584	; 0x10800
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 800109c:	4931      	ldr	r1, [pc, #196]	; (8001164 <_nx_arp_packet_send+0xf4>)
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 800109e:	68b3      	ldr	r3, [r6, #8]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80010a0:	ea87 4237 	eor.w	r2, r7, r7, ror #16
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 80010a4:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 80010a8:	f1a3 0e1c 	sub.w	lr, r3, #28
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 80010ac:	6374      	str	r4, [r6, #52]	; 0x34
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80010ae:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 80010b0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8001168 <_nx_arp_packet_send+0xf8>
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 80010b4:	f8c6 e008 	str.w	lr, [r6, #8]
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 80010b8:	f843 cc1c 	str.w	ip, [r3, #-28]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80010bc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 80010c0:	f843 1c18 	str.w	r1, [r3, #-24]
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 80010c4:	68e1      	ldr	r1, [r4, #12]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80010c6:	ea82 2237 	eor.w	r2, r2, r7, ror #8
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 80010ca:	f8b4 8012 	ldrh.w	r8, [r4, #18]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 80010ce:	2705      	movs	r7, #5
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 80010d0:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
 80010d4:	f843 8c14 	str.w	r8, [r3, #-20]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 80010d8:	6921      	ldr	r1, [r4, #16]
        (nx_interface -> nx_interface_ip_address >> 16);
 80010da:	f8b4 e016 	ldrh.w	lr, [r4, #22]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 80010de:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 80010e2:	f843 ec10 	str.w	lr, [r3, #-16]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 80010e6:	6961      	ldr	r1, [r4, #20]
    *(message_ptr + 5) =  (ULONG)0;
 80010e8:	f843 0c08 	str.w	r0, [r3, #-8]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80010ec:	ea88 4038 	eor.w	r0, r8, r8, ror #16
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 80010f0:	ea4f 4c01 	mov.w	ip, r1, lsl #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80010f4:	f843 2c04 	str.w	r2, [r3, #-4]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80010f8:	ea8e 413e 	eor.w	r1, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 80010fc:	f843 9c1c 	str.w	r9, [r3, #-28]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8001100:	ea4c 423c 	orr.w	r2, ip, ip, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8001104:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800116c <_nx_arp_packet_send+0xfc>
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8001108:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800110a:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800110c:	f843 9c18 	str.w	r9, [r3, #-24]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8001110:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8001112:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8001116:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800111a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800111e:	ea80 2038 	eor.w	r0, r0, r8, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8001122:	ea81 213e 	eor.w	r1, r1, lr, ror #8
    driver_request.nx_ip_driver_packet =                request_ptr;
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8001126:	f64f 7eff 	movw	lr, #65535	; 0xffff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800112a:	ea82 223c 	eor.w	r2, r2, ip, ror #8
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800112e:	f04f 3cff 	mov.w	ip, #4294967295
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8001132:	f843 0c14 	str.w	r0, [r3, #-20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8001136:	a802      	add	r0, sp, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8001138:	e943 1204 	strd	r1, r2, [r3, #-16]
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800113c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    driver_request.nx_ip_driver_packet =                request_ptr;
 800113e:	9606      	str	r6, [sp, #24]
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8001140:	9702      	str	r7, [sp, #8]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8001142:	e9cd 5408 	strd	r5, r4, [sp, #32]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8001146:	e9cd ec04 	strd	lr, ip, [sp, #16]
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800114a:	4798      	blx	r3
}
 800114c:	b00b      	add	sp, #44	; 0x2c
 800114e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NX_ASSERT(nx_interface != NX_NULL);
 8001152:	f04f 30ff 	mov.w	r0, #4294967295
 8001156:	f00c fc71 	bl	800da3c <_tx_thread_sleep>
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	f00c fc6d 	bl	800da3c <_tx_thread_sleep>
 8001162:	e7f6      	b.n	8001152 <_nx_arp_packet_send+0xe2>
 8001164:	06040001 	.word	0x06040001
 8001168:	00080100 	.word	0x00080100
 800116c:	01000406 	.word	0x01000406

08001170 <_nx_arp_periodic_update>:

    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8001170:	f8d0 2c00 	ldr.w	r2, [r0, #3072]	; 0xc00
{
 8001174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001178:	4606      	mov	r6, r0
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 800117a:	f8d0 4bfc 	ldr.w	r4, [r0, #3068]	; 0xbfc
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 800117e:	b1d2      	cbz	r2, 80011b6 <_nx_arp_periodic_update+0x46>
 8001180:	2500      	movs	r5, #0

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 8001182:	f04f 080a 	mov.w	r8, #10
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 8001186:	462f      	mov	r7, r5
        if (arp_entry -> nx_arp_entry_next_update)
 8001188:	6863      	ldr	r3, [r4, #4]
 800118a:	b183      	cbz	r3, 80011ae <_nx_arp_periodic_update+0x3e>
            arp_entry -> nx_arp_entry_next_update--;
 800118c:	3b01      	subs	r3, #1
 800118e:	6063      	str	r3, [r4, #4]
            if (!arp_entry -> nx_arp_entry_next_update)
 8001190:	b96b      	cbnz	r3, 80011ae <_nx_arp_periodic_update+0x3e>
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 8001192:	68a2      	ldr	r2, [r4, #8]
 8001194:	2a12      	cmp	r2, #18
 8001196:	d019      	beq.n	80011cc <_nx_arp_periodic_update+0x5c>
                    arp_entry -> nx_arp_retries++;
 8001198:	1c53      	adds	r3, r2, #1
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 800119a:	f8c4 8004 	str.w	r8, [r4, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 800119e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011a0:	4630      	mov	r0, r6
                    arp_entry -> nx_arp_retries++;
 80011a2:	60a3      	str	r3, [r4, #8]
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 80011a4:	6a21      	ldr	r1, [r4, #32]
 80011a6:	f7ff ff63 	bl	8001070 <_nx_arp_packet_send>
 80011aa:	f8d6 2c00 	ldr.w	r2, [r6, #3072]	; 0xc00
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80011ae:	3501      	adds	r5, #1
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 80011b0:	68e4      	ldr	r4, [r4, #12]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80011b2:	4295      	cmp	r5, r2
 80011b4:	d3e8      	bcc.n	8001188 <_nx_arp_periodic_update+0x18>


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 80011b6:	f896 3c4c 	ldrb.w	r3, [r6, #3148]	; 0xc4c
 80011ba:	b12b      	cbz	r3, 80011c8 <_nx_arp_periodic_update+0x58>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 80011bc:	f8d6 3c8c 	ldr.w	r3, [r6, #3212]	; 0xc8c
 80011c0:	b113      	cbz	r3, 80011c8 <_nx_arp_periodic_update+0x58>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f8c6 3c8c 	str.w	r3, [r6, #3212]	; 0xc8c
    }
}
 80011c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80011cc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80011d0:	b672      	cpsid	i
                    if (arp_entry -> nx_arp_active_list_head)
 80011d2:	69e2      	ldr	r2, [r4, #28]
 80011d4:	b17a      	cbz	r2, 80011f6 <_nx_arp_periodic_update+0x86>
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 80011d6:	6961      	ldr	r1, [r4, #20]
 80011d8:	42a1      	cmp	r1, r4
 80011da:	d030      	beq.n	800123e <_nx_arp_periodic_update+0xce>
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	42a3      	cmp	r3, r4
 80011e0:	d02a      	beq.n	8001238 <_nx_arp_periodic_update+0xc8>
                                arp_entry -> nx_arp_active_previous;
 80011e2:	69a3      	ldr	r3, [r4, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 80011e4:	618b      	str	r3, [r1, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 80011e6:	69a3      	ldr	r3, [r4, #24]
 80011e8:	6159      	str	r1, [r3, #20]
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 80011ea:	f8d6 3c00 	ldr.w	r3, [r6, #3072]	; 0xc00
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 80011f4:	61e7      	str	r7, [r4, #28]
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 80011f6:	68e2      	ldr	r2, [r4, #12]
 80011f8:	42a2      	cmp	r2, r4
 80011fa:	d00d      	beq.n	8001218 <_nx_arp_periodic_update+0xa8>
                            arp_entry -> nx_arp_pool_previous;
 80011fc:	6921      	ldr	r1, [r4, #16]
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 80011fe:	f8d6 3bfc 	ldr.w	r3, [r6, #3068]	; 0xbfc
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8001202:	6111      	str	r1, [r2, #16]
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8001204:	42a3      	cmp	r3, r4
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8001206:	6921      	ldr	r1, [r4, #16]
 8001208:	60ca      	str	r2, [r1, #12]
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 800120a:	d01a      	beq.n	8001242 <_nx_arp_periodic_update+0xd2>
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 800120c:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 800120e:	e9c4 3203 	strd	r3, r2, [r4, #12]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	60d4      	str	r4, [r2, #12]
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 8001216:	611c      	str	r4, [r3, #16]
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 8001218:	6b23      	ldr	r3, [r4, #48]	; 0x30
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 800121a:	6327      	str	r7, [r4, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800121c:	f380 8810 	msr	PRIMASK, r0
                    while (next_packet_ptr)
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0c2      	beq.n	80011aa <_nx_arp_periodic_update+0x3a>
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8001224:	f8d3 901c 	ldr.w	r9, [r3, #28]
                        _nx_packet_transmit_release(packet_ptr);
 8001228:	4618      	mov	r0, r3
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800122a:	61df      	str	r7, [r3, #28]
                        _nx_packet_transmit_release(packet_ptr);
 800122c:	f001 fdf4 	bl	8002e18 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8001230:	464b      	mov	r3, r9
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f6      	bne.n	8001224 <_nx_arp_periodic_update+0xb4>
 8001236:	e7b8      	b.n	80011aa <_nx_arp_periodic_update+0x3a>
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8001238:	6011      	str	r1, [r2, #0]
 800123a:	6961      	ldr	r1, [r4, #20]
 800123c:	e7d1      	b.n	80011e2 <_nx_arp_periodic_update+0x72>
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e7d3      	b.n	80011ea <_nx_arp_periodic_update+0x7a>
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 8001242:	68e3      	ldr	r3, [r4, #12]
 8001244:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
 8001248:	e7e0      	b.n	800120c <_nx_arp_periodic_update+0x9c>
 800124a:	bf00      	nop

0800124c <_nx_arp_queue_process>:

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800124c:	f8d0 3c04 	ldr.w	r3, [r0, #3076]	; 0xc04
{
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8001254:	b943      	cbnz	r3, 8001268 <_nx_arp_queue_process+0x1c>
 8001256:	e01c      	b.n	8001292 <_nx_arp_queue_process+0x46>
 8001258:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 800125c:	4620      	mov	r0, r4
 800125e:	f004 fa59 	bl	8005714 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8001262:	f8d4 3c04 	ldr.w	r3, [r4, #3076]	; 0xc04
 8001266:	b1a3      	cbz	r3, 8001292 <_nx_arp_queue_process+0x46>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001268:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800126c:	b672      	cpsid	i
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 800126e:	f8d4 1c04 	ldr.w	r1, [r4, #3076]	; 0xc04
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8001272:	69cb      	ldr	r3, [r1, #28]
 8001274:	f8c4 3c04 	str.w	r3, [r4, #3076]	; 0xc04
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ed      	bne.n	8001258 <_nx_arp_queue_process+0xc>
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 800127c:	f8c4 3c08 	str.w	r3, [r4, #3080]	; 0xc08
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001280:	f382 8810 	msr	PRIMASK, r2
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 8001284:	4620      	mov	r0, r4
 8001286:	f004 fa45 	bl	8005714 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800128a:	f8d4 3c04 	ldr.w	r3, [r4, #3076]	; 0xc04
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ea      	bne.n	8001268 <_nx_arp_queue_process+0x1c>
    }
}
 8001292:	bd10      	pop	{r4, pc}

08001294 <nx_driver_stm32f7xx>:
	 block.  */
	switch (driver_req_ptr->nx_ip_driver_command)
	{

		case NX_LINK_INTERFACE_ATTACH:

 8001294:	2200      	movs	r2, #0
			/* Process link interface attach requests.  */
			_nx_driver_interface_attach(driver_req_ptr);
			break;

 8001296:	6803      	ldr	r3, [r0, #0]
	{
 8001298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800129c:	4605      	mov	r5, r0
 800129e:	b087      	sub	sp, #28

 80012a0:	6042      	str	r2, [r0, #4]

 80012a2:	2b16      	cmp	r3, #22
 80012a4:	f200 8093 	bhi.w	80013ce <nx_driver_stm32f7xx+0x13a>
 80012a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80012ac:	009d0017 	.word	0x009d0017
 80012b0:	01320127 	.word	0x01320127
 80012b4:	00170017 	.word	0x00170017
 80012b8:	00170017 	.word	0x00170017
 80012bc:	01500142 	.word	0x01500142
 80012c0:	0091008d 	.word	0x0091008d
 80012c4:	00910091 	.word	0x00910091
 80012c8:	00910091 	.word	0x00910091
 80012cc:	00910091 	.word	0x00910091
 80012d0:	0173015d 	.word	0x0173015d
 80012d4:	00960091 	.word	0x00960091
 80012d8:	008d      	.short	0x008d

	/* Adjust the prepend pointer.  */
	packet_ptr->nx_packet_prepend_ptr =
			packet_ptr->nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;

	/* Adjust the packet length.  */
 80012da:	4cb5      	ldr	r4, [pc, #724]	; (80015b0 <nx_driver_stm32f7xx+0x31c>)
 80012dc:	6901      	ldr	r1, [r0, #16]
 80012de:	6862      	ldr	r2, [r4, #4]
 80012e0:	2a04      	cmp	r2, #4
 80012e2:	f040 81a1 	bne.w	8001628 <nx_driver_stm32f7xx+0x394>
	*(ethernet_frame_ptr + 3) = (ip_ptr->nx_ip_arp_physical_address_lsw<< 16);

	/* Set up the frame type field in the Ethernet harder. */
	if ((driver_req_ptr->nx_ip_driver_command == NX_LINK_ARP_SEND) ||
			(driver_req_ptr->nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
	{
 80012e6:	688a      	ldr	r2, [r1, #8]

		*(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IPV6;
	}
#endif /* FEATURE_NX_IPV6 */

	else
 80012e8:	1f5e      	subs	r6, r3, #5
	}
 80012ea:	6a48      	ldr	r0, [r1, #36]	; 0x24
#ifdef FEATURE_NX_IPV6
 80012ec:	68af      	ldr	r7, [r5, #8]
	{
 80012ee:	f1a2 090e 	sub.w	r9, r2, #14
	}
 80012f2:	300e      	adds	r0, #14
	packet_ptr->nx_packet_prepend_ptr =
 80012f4:	f8d5 e018 	ldr.w	lr, [r5, #24]
			(driver_req_ptr->nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 80012f8:	f8c1 9008 	str.w	r9, [r1, #8]
	else
 80012fc:	2e01      	cmp	r6, #1
	}
 80012fe:	6248      	str	r0, [r1, #36]	; 0x24
#ifdef FEATURE_NX_IPV6
 8001300:	f842 7c10 	str.w	r7, [r2, #-16]
	else if (packet_ptr->nx_packet_ip_version == NX_IP_VERSION_V6)
 8001304:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8001308:	f842 8c0c 	str.w	r8, [r2, #-12]

 800130c:	f8de 0c54 	ldr.w	r0, [lr, #3156]	; 0xc54
		*(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IPV6;
 8001310:	f8be cc5a 	ldrh.w	ip, [lr, #3162]	; 0xc5a

 8001314:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8001318:	f842 cc08 	str.w	ip, [r2, #-8]
	}
 800131c:	f8de 0c58 	ldr.w	r0, [lr, #3160]	; 0xc58
 8001320:	ea4f 4000 	mov.w	r0, r0, lsl #16
 8001324:	f842 0c04 	str.w	r0, [r2, #-4]
	else
 8001328:	f240 813c 	bls.w	80015a4 <nx_driver_stm32f7xx+0x310>
	{

		*(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
	}

	/* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
 800132c:	2b07      	cmp	r3, #7
 800132e:	f000 82cd 	beq.w	80018cc <nx_driver_stm32f7xx+0x638>
	NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
	NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
	NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));

	/* Determine if the packet exceeds the driver's MTU.  */
	if (packet_ptr->nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8001332:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8001336:	2b06      	cmp	r3, #6
 8001338:	f000 8374 	beq.w	8001a24 <nx_driver_stm32f7xx+0x790>
		/* Remove the Ethernet header.  */
		NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);

		/* Indicate an unsuccessful packet send.  */
		driver_req_ptr->nx_ip_driver_status = NX_DRIVER_ERROR;

 800133c:	f440 6e00 	orr.w	lr, r0, #2048	; 0x800
		/* Link is not up, simply free the packet.  */
		nx_packet_transmit_release(packet_ptr);
		return;
	}
 8001340:	ea87 4b37 	eor.w	fp, r7, r7, ror #16

	/* Transmit the packet through the Ethernet controller low level access routine. */
	status = _nx_driver_hardware_packet_send(packet_ptr);

	/* Determine if there was an error.  */
	if (status != NX_SUCCESS)
 8001344:	f240 5aea 	movw	sl, #1514	; 0x5ea

 8001348:	ea88 4638 	eor.w	r6, r8, r8, ror #16
	/* Transmit the packet through the Ethernet controller low level access routine. */
 800134c:	ea8c 403c 	eor.w	r0, ip, ip, ror #16
	status = _nx_driver_hardware_packet_send(packet_ptr);
 8001350:	ea8e 433e 	eor.w	r3, lr, lr, ror #16
	}
 8001354:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

 8001358:	0a36      	lsrs	r6, r6, #8
	/* Transmit the packet through the Ethernet controller low level access routine. */
 800135a:	0a00      	lsrs	r0, r0, #8
	}
 800135c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
	status = _nx_driver_hardware_packet_send(packet_ptr);
 8001360:	0a1b      	lsrs	r3, r3, #8

 8001362:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
	/* Transmit the packet through the Ethernet controller low level access routine. */
 8001366:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
	}
 800136a:	ea8b 2737 	eor.w	r7, fp, r7, ror #8
	status = _nx_driver_hardware_packet_send(packet_ptr);
 800136e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff

 8001372:	ea86 2638 	eor.w	r6, r6, r8, ror #8
	/* Transmit the packet through the Ethernet controller low level access routine. */
 8001376:	ea80 203c 	eor.w	r0, r0, ip, ror #8
	}
 800137a:	f842 7c10 	str.w	r7, [r2, #-16]
	status = _nx_driver_hardware_packet_send(packet_ptr);
 800137e:	ea83 233e 	eor.w	r3, r3, lr, ror #8
	/* Transmit the packet through the Ethernet controller low level access routine. */
 8001382:	e942 6003 	strd	r6, r0, [r2, #-12]
	status = _nx_driver_hardware_packet_send(packet_ptr);
 8001386:	f842 3c04 	str.w	r3, [r2, #-4]
	if (status != NX_SUCCESS)
 800138a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800138c:	4553      	cmp	r3, sl
 800138e:	f200 827e 	bhi.w	800188e <nx_driver_stm32f7xx+0x5fa>
			packet_ptr->nx_packet_data_end - packet_ptr->nx_packet_data_start);

	/* Find next packet.  */
	for (pktIdx = packet_ptr->nx_packet_next;
			pktIdx != NX_NULL;
			pktIdx = pktIdx->nx_packet_next)
 8001392:	69a6      	ldr	r6, [r4, #24]
	{

		/* Move to next descriptor.  */
 8001394:	f106 0011 	add.w	r0, r6, #17
 8001398:	eb04 1040 	add.w	r0, r4, r0, lsl #5
 800139c:	6842      	ldr	r2, [r0, #4]
 800139e:	2a00      	cmp	r2, #0
 80013a0:	db07      	blt.n	80013b2 <nx_driver_stm32f7xx+0x11e>
 80013a2:	f506 6291 	add.w	r2, r6, #1160	; 0x488
 80013a6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80013aa:	6852      	ldr	r2, [r2, #4]
 80013ac:	2a00      	cmp	r2, #0
 80013ae:	f000 82a1 	beq.w	80018f4 <nx_driver_stm32f7xx+0x660>
/*    _nx_driver_multicast_join                         STM32F7xx/IAR     */
 80013b2:	f109 020e 	add.w	r2, r9, #14
 80013b6:	3b0e      	subs	r3, #14
/*                                                                        */
 80013b8:	245a      	movs	r4, #90	; 0x5a
/*  DESCRIPTION                                                           */
 80013ba:	4608      	mov	r0, r1
/*    _nx_driver_multicast_join                         STM32F7xx/IAR     */
 80013bc:	608a      	str	r2, [r1, #8]
 80013be:	624b      	str	r3, [r1, #36]	; 0x24
/*                                                                        */
 80013c0:	606c      	str	r4, [r5, #4]
/*  DESCRIPTION                                                           */
 80013c2:	f001 fd29 	bl	8002e18 <_nx_packet_transmit_release>
/*  DESCRIPTION                                                           */
 80013c6:	b007      	add	sp, #28
 80013c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013cc:	9d03      	ldr	r5, [sp, #12]
/*    Yuxin Zhou, Microsoft Corporation                                   */
 80013ce:	235a      	movs	r3, #90	; 0x5a
 80013d0:	606b      	str	r3, [r5, #4]
/*  DESCRIPTION                                                           */
 80013d2:	b007      	add	sp, #28
 80013d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/*    None                                                                */
 80013d8:	6942      	ldr	r2, [r0, #20]
 80013da:	f240 31ff 	movw	r1, #1023	; 0x3ff
/*                                                                        */
 80013de:	2300      	movs	r3, #0
/*    None                                                                */
 80013e0:	6011      	str	r1, [r2, #0]
/*                                                                        */
 80013e2:	6043      	str	r3, [r0, #4]
 80013e4:	e7ef      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
	/* Clear the deferred events for the driver.  */
 80013e6:	6982      	ldr	r2, [r0, #24]
    nx_driver_information.nx_driver_transmit_queue_tail =      NX_NULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	4c71      	ldr	r4, [pc, #452]	; (80015b0 <nx_driver_stm32f7xx+0x31c>)
	/* Call the hardware-specific ethernet controller initialization.  */
 80013ec:	2101      	movs	r1, #1
	/* Determine if the request was successful.  */
 80013ee:	f8d2 2638 	ldr.w	r2, [r2, #1592]	; 0x638

 80013f2:	6123      	str	r3, [r4, #16]
    nx_driver_information.nx_driver_transmit_queue_tail =      NX_NULL;
 80013f4:	6023      	str	r3, [r4, #0]
	/* Determine if the request was successful.  */
 80013f6:	e9c4 1201 	strd	r1, r2, [r4, #4]
	for (i = 0; i < NX_DRIVER_TX_DESCRIPTORS; i++)
 80013fa:	6043      	str	r3, [r0, #4]
#ifdef NX_DRIVER_INTERNAL_TRANSMIT_QUEUE
 80013fc:	69c0      	ldr	r0, [r0, #28]

 80013fe:	e9c4 3305 	strd	r3, r3, [r4, #20]
#ifdef NX_DRIVER_INTERNAL_TRANSMIT_QUEUE
 8001402:	9002      	str	r0, [sp, #8]
        DMATxDesc -> Status = ETH_DMATXDESC_TCH | ETH_DMATXDESC_IC | ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_CIC_IPV4HEADER;        
 8001404:	e9c4 3307 	strd	r3, r3, [r4, #28]
		/* Set Second Address Chained bit.  */
 8001408:	2a00      	cmp	r2, #0
 800140a:	d0e0      	beq.n	80013ce <nx_driver_stm32f7xx+0x13a>
			/* Set next descriptor address register with next descriptor base address */
 800140c:	4a69      	ldr	r2, [pc, #420]	; (80015b4 <nx_driver_stm32f7xx+0x320>)
		}
 800140e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
			/* Set next descriptor address register with next descriptor base address */
 8001412:	4869      	ldr	r0, [pc, #420]	; (80015b8 <nx_driver_stm32f7xx+0x324>)
		else
 8001414:	f44f 6600 	mov.w	r6, #2048	; 0x800
					.nx_driver_information_dma_tx_descriptors + i + 1);
 8001418:	6051      	str	r1, [r2, #4]
			/* For last descriptor, set next descriptor address register equal to the first descriptor base address */
 800141a:	6191      	str	r1, [r2, #24]
		{
 800141c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
			DMATxDesc->Buffer2NextDescAddr = (ULONG)nx_driver_information
 8001420:	61d3      	str	r3, [r2, #28]
					.nx_driver_information_dma_tx_descriptors;
 8001422:	8213      	strh	r3, [r2, #16]
			DMATxDesc->Buffer2NextDescAddr = (ULONG)(nx_driver_information
 8001424:	4b65      	ldr	r3, [pc, #404]	; (80015bc <nx_driver_stm32f7xx+0x328>)
			/* Set next descriptor address register with next descriptor base address */
 8001426:	6010      	str	r0, [r2, #0]
	}
 8001428:	4610      	mov	r0, r2
		{
 800142a:	6211      	str	r1, [r2, #32]
			DMATxDesc->Buffer2NextDescAddr = (ULONG)(nx_driver_information
 800142c:	6153      	str	r3, [r2, #20]
		else
 800142e:	e9c2 7602 	strd	r7, r6, [r2, #8]
	}
 8001432:	f00a f879 	bl	800b528 <HAL_ETH_Init>
 8001436:	2800      	cmp	r0, #0
 8001438:	d1c9      	bne.n	80013ce <nx_driver_stm32f7xx+0x13a>
			DMARxDesc[i].Buffer1Addr = (uint32_t)packet_ptr->nx_packet_prepend_ptr;
 800143a:	4e61      	ldr	r6, [pc, #388]	; (80015c0 <nx_driver_stm32f7xx+0x32c>)
 800143c:	f504 7311 	add.w	r3, r4, #580	; 0x244
 8001440:	f504 5191 	add.w	r1, r4, #4640	; 0x1220
		{
 8001444:	4607      	mov	r7, r0
			DMARxDesc[i].Buffer1Addr = (uint32_t)packet_ptr->nx_packet_prepend_ptr;
 8001446:	f8c4 6224 	str.w	r6, [r4, #548]	; 0x224
			/* Set Own bit of the RX descriptor Status.  */
 800144a:	3001      	adds	r0, #1
 800144c:	f843 3c14 	str.w	r3, [r3, #-20]
		{
 8001450:	f841 7f04 	str.w	r7, [r1, #4]!
 8001454:	3320      	adds	r3, #32
			DMARxDesc[i].Buffer1Addr = (uint32_t)packet_ptr->nx_packet_prepend_ptr;
 8001456:	f100 0211 	add.w	r2, r0, #17
			/* Remember the receive packet poitner.  */
 800145a:	287f      	cmp	r0, #127	; 0x7f
			DMARxDesc[i].Buffer1Addr = (uint32_t)packet_ptr->nx_packet_prepend_ptr;
 800145c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8001460:	6056      	str	r6, [r2, #4]
			/* Remember the receive packet poitner.  */
 8001462:	d1f2      	bne.n	800144a <nx_driver_stm32f7xx+0x1b6>
		}
 8001464:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <nx_driver_stm32f7xx+0x330>)
 8001466:	f241 2c10 	movw	ip, #4624	; 0x1210
		{
 800146a:	4a57      	ldr	r2, [pc, #348]	; (80015c8 <nx_driver_stm32f7xx+0x334>)
		}
 800146c:	f241 0110 	movw	r1, #4112	; 0x1010
 8001470:	4851      	ldr	r0, [pc, #324]	; (80015b8 <nx_driver_stm32f7xx+0x324>)
 8001472:	f5a3 76f0 	sub.w	r6, r3, #480	; 0x1e0
		}
 8001476:	f844 300c 	str.w	r3, [r4, ip]
 800147a:	4690      	mov	r8, r2
		}
 800147c:	5043      	str	r3, [r0, r1]
 800147e:	f10d 0914 	add.w	r9, sp, #20
		{
 8001482:	6017      	str	r7, [r2, #0]
 8001484:	f102 0b40 	add.w	fp, r2, #64	; 0x40
	/* Set Receive Descriptor List Address Register */
 8001488:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 800148c:	4f4f      	ldr	r7, [pc, #316]	; (80015cc <nx_driver_stm32f7xx+0x338>)
 800148e:	9503      	str	r5, [sp, #12]
			/* For last descriptor, set next descriptor address register equal to the first descriptor base address.  */
 8001490:	2300      	movs	r3, #0
 8001492:	4649      	mov	r1, r9
 8001494:	68a0      	ldr	r0, [r4, #8]
 8001496:	461a      	mov	r2, r3
 8001498:	f001 fb40 	bl	8002b1c <_nx_packet_allocate>
 800149c:	2800      	cmp	r0, #0
 800149e:	d195      	bne.n	80013cc <nx_driver_stm32f7xx+0x138>

 80014a0:	9d05      	ldr	r5, [sp, #20]
 80014a2:	f1a6 0020 	sub.w	r0, r6, #32
 80014a6:	68a9      	ldr	r1, [r5, #8]
	nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr->nx_packet_data_end
 80014a8:	692a      	ldr	r2, [r5, #16]

 80014aa:	9101      	str	r1, [sp, #4]
	nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr->nx_packet_data_end
 80014ac:	6969      	ldr	r1, [r5, #20]
    uint32_t op_addr = (uint32_t) addr;
 80014ae:	4613      	mov	r3, r2
 80014b0:	1a8a      	subs	r2, r1, r2

 80014b2:	9901      	ldr	r1, [sp, #4]
	nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr->nx_packet_data_end
 80014b4:	f442 4e80 	orr.w	lr, r2, #16384	; 0x4000

 80014b8:	3102      	adds	r1, #2
 80014ba:	60a9      	str	r1, [r5, #8]
	/* Save the size of one rx buffer.  */
 80014bc:	e946 e107 	strd	lr, r1, [r6, #-28]
	/* Clear the number of buffers in use counter.  */
 80014c0:	f848 5f04 	str.w	r5, [r8, #4]!
	/* Set Receive Descriptor List Address Register */
 80014c4:	f846 ac20 	str.w	sl, [r6, #-32]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014c8:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	dd0a      	ble.n	80014e6 <nx_driver_stm32f7xx+0x252>
 80014d0:	1e51      	subs	r1, r2, #1
 80014d2:	f103 0220 	add.w	r2, r3, #32
 80014d6:	f021 011f 	bic.w	r1, r1, #31
 80014da:	440a      	add	r2, r1
      SCB->DCCIMVAC = op_addr;
 80014dc:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 80014e0:	3320      	adds	r3, #32
    while (op_size > 0) {
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d1fa      	bne.n	80014dc <nx_driver_stm32f7xx+0x248>
 80014e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014ea:	f3bf 8f6f 	isb	sy
/*  AUTHOR                                                                */
 80014ee:	45d8      	cmp	r8, fp
 80014f0:	d06e      	beq.n	80015d0 <nx_driver_stm32f7xx+0x33c>
 80014f2:	f846 6c14 	str.w	r6, [r6, #-20]
 80014f6:	3620      	adds	r6, #32
 80014f8:	e7ca      	b.n	8001490 <nx_driver_stm32f7xx+0x1fc>

 80014fa:	4c2d      	ldr	r4, [pc, #180]	; (80015b0 <nx_driver_stm32f7xx+0x31c>)
 80014fc:	6863      	ldr	r3, [r4, #4]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	f67f af65 	bls.w	80013ce <nx_driver_stm32f7xx+0x13a>
		nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8001504:	2b03      	cmp	r3, #3
 8001506:	f000 81cb 	beq.w	80018a0 <nx_driver_stm32f7xx+0x60c>

 800150a:	2315      	movs	r3, #21
 800150c:	6043      	str	r3, [r0, #4]
 800150e:	e75a      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
		/* Update the driver state back to initialized.  */
 8001510:	4c27      	ldr	r4, [pc, #156]	; (80015b0 <nx_driver_stm32f7xx+0x31c>)
 8001512:	6863      	ldr	r3, [r4, #4]
 8001514:	2b04      	cmp	r3, #4
 8001516:	f47f af5a 	bne.w	80013ce <nx_driver_stm32f7xx+0x13a>
/*  CALLED BY                                                             */
 800151a:	4826      	ldr	r0, [pc, #152]	; (80015b4 <nx_driver_stm32f7xx+0x320>)
			case NX_LINK_PACKET_SEND:
 800151c:	69ae      	ldr	r6, [r5, #24]
/*  CALLED BY                                                             */
 800151e:	f00a fa1d 	bl	800b95c <HAL_ETH_Stop>
/*  FUNCTION                                               RELEASE        */
 8001522:	2300      	movs	r3, #0
/*                                                           6.0          */
 8001524:	2203      	movs	r2, #3
/*  FUNCTION                                               RELEASE        */
 8001526:	f886 3c4e 	strb.w	r3, [r6, #3150]	; 0xc4e
/*                                                           6.0          */
 800152a:	6062      	str	r2, [r4, #4]
/*    Yuxin Zhou, Microsoft Corporation                                   */
 800152c:	606b      	str	r3, [r5, #4]
 800152e:	e74a      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
/*  FUNCTION                                               RELEASE        */
/*                                                                        */
/*    _nx_driver_hardware_multicast_leave               STM32F7xx/IAR     */
/*                                                           6.0          */
/*  AUTHOR                                                                */
/*                                                                        */
 8001530:	4c1f      	ldr	r4, [pc, #124]	; (80015b0 <nx_driver_stm32f7xx+0x31c>)
 8001532:	f241 4068 	movw	r0, #5224	; 0x1468
/*    Yuxin Zhou, Microsoft Corporation                                   */
/*                                                                        */
/*  DESCRIPTION                                                           */
 8001536:	4920      	ldr	r1, [pc, #128]	; (80015b8 <nx_driver_stm32f7xx+0x324>)
/*                                                                        */
 8001538:	2600      	movs	r6, #0
/*                                                                        */
 800153a:	5822      	ldr	r2, [r4, r0]
/*  DESCRIPTION                                                           */
 800153c:	684b      	ldr	r3, [r1, #4]
/*                                                                        */
 800153e:	3201      	adds	r2, #1
/*  DESCRIPTION                                                           */
 8001540:	f043 0310 	orr.w	r3, r3, #16
/*                                                                        */
 8001544:	5022      	str	r2, [r4, r0]
/*  DESCRIPTION                                                           */
 8001546:	604b      	str	r3, [r1, #4]
/*                                                                        */
 8001548:	606e      	str	r6, [r5, #4]
 800154a:	e73c      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
}

/**************************************************************************/
/*                                                                        */
/*  FUNCTION                                               RELEASE        */
/*                                                                        */
 800154c:	4918      	ldr	r1, [pc, #96]	; (80015b0 <nx_driver_stm32f7xx+0x31c>)
 800154e:	f241 4268 	movw	r2, #5224	; 0x1468
 8001552:	588b      	ldr	r3, [r1, r2]
 8001554:	3b01      	subs	r3, #1
 8001556:	508b      	str	r3, [r1, r2]
/*    _nx_driver_hardware_get_status                    STM32F7xx/IAR     */
/*                                                           6.0          */
/*  AUTHOR                                                                */
 8001558:	b9b3      	cbnz	r3, 8001588 <nx_driver_stm32f7xx+0x2f4>
/*                                                                        */
/*    Yuxin Zhou, Microsoft Corporation                                   */
/*                                                                        */
/*  DESCRIPTION                                                           */
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <nx_driver_stm32f7xx+0x324>)
 800155c:	6853      	ldr	r3, [r2, #4]
 800155e:	f023 0310 	bic.w	r3, r3, #16
 8001562:	6053      	str	r3, [r2, #4]
 8001564:	e010      	b.n	8001588 <nx_driver_stm32f7xx+0x2f4>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001566:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800156a:	b672      	cpsid	i
/*    _nx_driver_transfer_to_netx                       STM32F7xx/IAR     */
 800156c:	4c10      	ldr	r4, [pc, #64]	; (80015b0 <nx_driver_stm32f7xx+0x31c>)
/*                                                           6.0          */
 800156e:	2700      	movs	r7, #0
/*    _nx_driver_transfer_to_netx                       STM32F7xx/IAR     */
 8001570:	f8d4 8010 	ldr.w	r8, [r4, #16]
/*                                                           6.0          */
 8001574:	6127      	str	r7, [r4, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001576:	f383 8810 	msr	PRIMASK, r3
/*                                                                        */
 800157a:	f018 0f04 	tst.w	r8, #4
 800157e:	f040 8156 	bne.w	800182e <nx_driver_stm32f7xx+0x59a>
/*    packet_ptr                            Packet pointer                */
 8001582:	f018 0f01 	tst.w	r8, #1
 8001586:	d155      	bne.n	8001634 <nx_driver_stm32f7xx+0x3a0>
/*                                                                        */
 8001588:	2300      	movs	r3, #0
 800158a:	606b      	str	r3, [r5, #4]
/*  DESCRIPTION                                                           */
 800158c:	b007      	add	sp, #28
 800158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			break;
 8001592:	69c3      	ldr	r3, [r0, #28]
/*                                                                        */
 8001594:	2200      	movs	r2, #0
/*                                                                        */
 8001596:	f240 30ff 	movw	r0, #1023	; 0x3ff
/*    _nx_driver_initialize                             STM32F7xx/IAR     */
 800159a:	4905      	ldr	r1, [pc, #20]	; (80015b0 <nx_driver_stm32f7xx+0x31c>)
/*                                                                        */
 800159c:	6418      	str	r0, [r3, #64]	; 0x40
/*    _nx_driver_initialize                             STM32F7xx/IAR     */
 800159e:	60cb      	str	r3, [r1, #12]
/*                                                                        */
 80015a0:	606a      	str	r2, [r5, #4]
 80015a2:	e710      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
	}
 80015a4:	f640 0e06 	movw	lr, #2054	; 0x806
 80015a8:	ea40 0e0e 	orr.w	lr, r0, lr
 80015ac:	e6c8      	b.n	8001340 <nx_driver_stm32f7xx+0xac>
 80015ae:	bf00      	nop
 80015b0:	200000e4 	.word	0x200000e4
 80015b4:	20019084 	.word	0x20019084
 80015b8:	40028000 	.word	0x40028000
 80015bc:	20000000 	.word	0x20000000
 80015c0:	40100000 	.word	0x40100000
 80015c4:	20000308 	.word	0x20000308
 80015c8:	20001504 	.word	0x20001504
 80015cc:	e000ed00 	.word	0xe000ed00
/*                                                                        */
 80015d0:	9b05      	ldr	r3, [sp, #20]
/*  CALLS                                                                 */
 80015d2:	f241 4c68 	movw	ip, #5224	; 0x1468
/*  INPUT                                                                 */
 80015d6:	4ac0      	ldr	r2, [pc, #768]	; (80018d8 <nx_driver_stm32f7xx+0x644>)
/*  CALLS                                                                 */
 80015d8:	2600      	movs	r6, #0
/*                                                                        */
 80015da:	4fc0      	ldr	r7, [pc, #768]	; (80018dc <nx_driver_stm32f7xx+0x648>)
 80015dc:	f241 010c 	movw	r1, #4108	; 0x100c
 80015e0:	60c2      	str	r2, [r0, #12]
 80015e2:	9d03      	ldr	r5, [sp, #12]
/*                                                                        */
 80015e4:	e9d3 3004 	ldrd	r3, r0, [r3, #16]
/*  CALLS                                                                 */
 80015e8:	f844 600c 	str.w	r6, [r4, ip]
/*                                                                        */
 80015ec:	f502 5ca2 	add.w	ip, r2, #5184	; 0x1440
/*                                                                        */
 80015f0:	507a      	str	r2, [r7, r1]
/*                                                                        */
 80015f2:	1ac0      	subs	r0, r0, r3
	}
 80015f4:	49ba      	ldr	r1, [pc, #744]	; (80018e0 <nx_driver_stm32f7xx+0x64c>)
}
 80015f6:	2701      	movs	r7, #1
/*                                                                        */
 80015f8:	f8cc 0000 	str.w	r0, [ip]

 80015fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
	}
 8001600:	880b      	ldrh	r3, [r1, #0]
 8001602:	f8d1 1002 	ldr.w	r1, [r1, #2]
 8001606:	ba5b      	rev16	r3, r3
 8001608:	fa91 fc81 	rev.w	ip, r1
		/* Indicate to the IP software that IP to physical mapping
 800160c:	69a9      	ldr	r1, [r5, #24]
	}
 800160e:	b29b      	uxth	r3, r3
		/* Indicate to the IP software that IP to physical mapping
 8001610:	f842 1c24 	str.w	r1, [r2, #-36]
/*                                                                        */
 8001614:	2203      	movs	r2, #3
	}
 8001616:	9902      	ldr	r1, [sp, #8]
}
 8001618:	714f      	strb	r7, [r1, #5]
	}
 800161a:	60cb      	str	r3, [r1, #12]
	else
 800161c:	f8c1 c010 	str.w	ip, [r1, #16]

 8001620:	6248      	str	r0, [r1, #36]	; 0x24
/*                                                                        */
 8001622:	6062      	str	r2, [r4, #4]
/*    _nx_driver_enable                                 STM32F7xx/IAR     */
 8001624:	606e      	str	r6, [r5, #4]
 8001626:	e6ce      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
	 * bytes to get 32-bit word alignment.  */
 8001628:	235a      	movs	r3, #90	; 0x5a
	/* Set up the hardware addresses in the Ethernet header. */
 800162a:	4608      	mov	r0, r1
	 * bytes to get 32-bit word alignment.  */
 800162c:	606b      	str	r3, [r5, #4]
	/* Set up the hardware addresses in the Ethernet header. */
 800162e:	f001 fbf3 	bl	8002e18 <_nx_packet_transmit_release>
 8001632:	e6c8      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
		if (nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
				& ETH_DMARXDESC_LS)
		{

			/* Yes, this BD is the last BD in the frame, set the last NX_PACKET's nx_packet_next to NULL.  */
			nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_next =
 8001634:	6962      	ldr	r2, [r4, #20]
					NX_NULL;

			/* Store the length of the packet in the first NX_PACKET.  */
			nx_driver_information.nx_driver_information_receive_packets[first_idx]->nx_packet_length =
					((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 8001636:	f102 0801 	add.w	r8, r2, #1
					NX_NULL;
 800163a:	f502 63a1 	add.w	r3, r2, #1288	; 0x508
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 800163e:	eb04 1148 	add.w	r1, r4, r8, lsl #5
					NX_NULL;
 8001642:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 8001646:	6849      	ldr	r1, [r1, #4]
					NX_NULL;
 8001648:	685b      	ldr	r3, [r3, #4]
					((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
 800164a:	2900      	cmp	r1, #0
					NX_NULL;
 800164c:	9301      	str	r3, [sp, #4]
					((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
 800164e:	f2c0 80c1 	blt.w	80017d4 <nx_driver_stm32f7xx+0x540>
 8001652:	4692      	mov	sl, r2
				& ETH_DMARXDESC_LS)
 8001654:	2700      	movs	r7, #0
      SCB->DCIMVAC = op_addr;
 8001656:	f8df b298 	ldr.w	fp, [pc, #664]	; 80018f0 <nx_driver_stm32f7xx+0x65c>
 800165a:	9502      	str	r5, [sp, #8]
 800165c:	e016      	b.n	800168c <nx_driver_stm32f7xx+0x3f8>
				_nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr,
						received_packet_ptr);
			}

			/* Set the first BD index for the next packet.  */
			first_idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800165e:	f509 60a1 	add.w	r0, r9, #1288	; 0x508

			/* Update the current receive index.  */
 8001662:	6959      	ldr	r1, [r3, #20]
			nx_driver_information.nx_driver_information_receive_current_index = first_idx;

 8001664:	4552      	cmp	r2, sl
			first_idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 8001666:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800166a:	6840      	ldr	r0, [r0, #4]
			/* Update the current receive index.  */
 800166c:	60d9      	str	r1, [r3, #12]
			first_idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800166e:	6058      	str	r0, [r3, #4]

 8001670:	d001      	beq.n	8001676 <nx_driver_stm32f7xx+0x3e2>
			received_packet_ptr =
					nx_driver_information.nx_driver_information_receive_packets[first_idx];

 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	609a      	str	r2, [r3, #8]
			bd_count = 0;

		}
 8001676:	3701      	adds	r7, #1
 8001678:	4603      	mov	r3, r0
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 800167a:	f109 0801 	add.w	r8, r9, #1

 800167e:	464a      	mov	r2, r9
							& ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 8001680:	eb04 1148 	add.w	r1, r4, r8, lsl #5
 8001684:	6849      	ldr	r1, [r1, #4]
					((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status
 8001686:	2900      	cmp	r1, #0
 8001688:	f2c0 80a3 	blt.w	80017d2 <nx_driver_stm32f7xx+0x53e>
							->nx_packet_prepend_ptr
 800168c:	eb04 1148 	add.w	r1, r4, r8, lsl #5
 8001690:	f008 090f 	and.w	r9, r8, #15
 8001694:	6848      	ldr	r0, [r1, #4]
 8001696:	05c0      	lsls	r0, r0, #23
 8001698:	d5e1      	bpl.n	800165e <nx_driver_stm32f7xx+0x3ca>

 800169a:	6848      	ldr	r0, [r1, #4]
 800169c:	f50a 6ea1 	add.w	lr, sl, #1288	; 0x508
				if (nx_driver_information.nx_driver_information_receive_packets[idx]
 80016a0:	4d90      	ldr	r5, [pc, #576]	; (80018e4 <nx_driver_stm32f7xx+0x650>)
			/* Is there only one BD for the current frame?  */
 80016a2:	2600      	movs	r6, #0

 80016a4:	f3c0 400d 	ubfx	r0, r0, #16, #14
						->nx_packet_prepend_ptr -= 2;
 80016a8:	f8d3 c008 	ldr.w	ip, [r3, #8]
				if (nx_driver_information.nx_driver_information_receive_packets[idx]
 80016ac:	682d      	ldr	r5, [r5, #0]

 80016ae:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80016b2:	3804      	subs	r0, #4
						>= nx_driver_information.nx_driver_information_receive_packets[idx]
 80016b4:	4552      	cmp	r2, sl

 80016b6:	f8de e004 	ldr.w	lr, [lr, #4]
				if (nx_driver_information.nx_driver_information_receive_packets[idx]
 80016ba:	fb05 0517 	mls	r5, r5, r7, r0
			/* Is there only one BD for the current frame?  */
 80016be:	605e      	str	r6, [r3, #4]
				if (nx_driver_information.nx_driver_information_receive_packets[idx]
 80016c0:	4465      	add	r5, ip

 80016c2:	f8ce 0024 	str.w	r0, [lr, #36]	; 0x24
						->nx_packet_prepend_ptr -= 2;
 80016c6:	60dd      	str	r5, [r3, #12]
						>= nx_driver_information.nx_driver_information_receive_packets[idx]
 80016c8:	d01b      	beq.n	8001702 <nx_driver_stm32f7xx+0x46e>
					temp_idx = (idx - 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 80016ca:	f1ac 0002 	sub.w	r0, ip, #2
							->nx_packet_next = NX_NULL;
 80016ce:	4285      	cmp	r5, r0
					temp_idx = (idx - 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 80016d0:	6098      	str	r0, [r3, #8]
							->nx_packet_next = NX_NULL;
 80016d2:	d816      	bhi.n	8001702 <nx_driver_stm32f7xx+0x46e>
							.nx_driver_information_receive_packets[idx]->nx_packet_prepend_ptr
 80016d4:	3a01      	subs	r2, #1
							ETH_DMARXDESC_OWN;
 80016d6:	6918      	ldr	r0, [r3, #16]
					nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status =
 80016d8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
					nx_driver_information.nx_driver_information_receive_packets[idx]
 80016dc:	3f01      	subs	r7, #1
							.nx_driver_information_receive_packets[idx]->nx_packet_prepend_ptr
 80016de:	f002 020f 	and.w	r2, r2, #15
							ETH_DMARXDESC_OWN;
 80016e2:	3002      	adds	r0, #2
							>= nx_driver_information.nx_driver_information_receive_packets[idx]
 80016e4:	f502 62a1 	add.w	r2, r2, #1288	; 0x508
 80016e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80016ec:	f8d2 c004 	ldr.w	ip, [r2, #4]
									->nx_packet_append_ptr;
 80016f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
							>= nx_driver_information.nx_driver_information_receive_packets[idx]
 80016f4:	f8cc 6004 	str.w	r6, [ip, #4]
									->nx_packet_append_ptr;
 80016f8:	3a01      	subs	r2, #1
 80016fa:	f8cc 200c 	str.w	r2, [ip, #12]
					nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status =
 80016fe:	604d      	str	r5, [r1, #4]
							ETH_DMARXDESC_OWN;
 8001700:	6098      	str	r0, [r3, #8]
			}
 8001702:	1e3e      	subs	r6, r7, #0
 8001704:	db3c      	blt.n	8001780 <nx_driver_stm32f7xx+0x4ec>
 8001706:	f10d 0814 	add.w	r8, sp, #20
				temp_idx = (first_idx + i) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800170a:	2300      	movs	r3, #0
 800170c:	eb06 070a 	add.w	r7, r6, sl
 8001710:	4641      	mov	r1, r8
 8001712:	68a0      	ldr	r0, [r4, #8]
 8001714:	461a      	mov	r2, r3
			for (i = bd_count; i >= 0; i--)
 8001716:	f007 050f 	and.w	r5, r7, #15
				temp_idx = (first_idx + i) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800171a:	f001 f9ff 	bl	8002b1c <_nx_packet_allocate>
 800171e:	2800      	cmp	r0, #0
 8001720:	d166      	bne.n	80017f0 <nx_driver_stm32f7xx+0x55c>
						NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
 8001722:	9805      	ldr	r0, [sp, #20]
				{
 8001724:	eb04 1145 	add.w	r1, r4, r5, lsl #5
					/* Adjust the new packet and assign it to the BD.  */
 8001728:	f505 67a1 	add.w	r7, r5, #1288	; 0x508

 800172c:	1c6b      	adds	r3, r5, #1
						NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
 800172e:	6882      	ldr	r2, [r0, #8]

 8001730:	eb04 1543 	add.w	r5, r4, r3, lsl #5
					nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx]
 8001734:	6903      	ldr	r3, [r0, #16]
						NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
 8001736:	f102 0c02 	add.w	ip, r2, #2
					/* Adjust the new packet and assign it to the BD.  */
 800173a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
					nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx]
 800173e:	6942      	ldr	r2, [r0, #20]
						NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
 8001740:	f8c0 c008 	str.w	ip, [r0, #8]
				{
 8001744:	f8c1 c02c 	str.w	ip, [r1, #44]	; 0x2c

 8001748:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
					nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx]
 800174c:	1ad2      	subs	r2, r2, r3
					/* Adjust the new packet and assign it to the BD.  */
 800174e:	6078      	str	r0, [r7, #4]

 8001750:	6069      	str	r1, [r5, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8001752:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8001756:	2a00      	cmp	r2, #0
 8001758:	dd0b      	ble.n	8001772 <nx_driver_stm32f7xx+0x4de>
 800175a:	3a01      	subs	r2, #1
 800175c:	f103 0020 	add.w	r0, r3, #32
 8001760:	f022 011f 	bic.w	r1, r2, #31
 8001764:	4602      	mov	r2, r0
 8001766:	440a      	add	r2, r1
      SCB->DCIMVAC = op_addr;
 8001768:	f8cb 325c 	str.w	r3, [fp, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800176c:	3320      	adds	r3, #32
    while (op_size > 0) {
 800176e:	4293      	cmp	r3, r2
 8001770:	d1fa      	bne.n	8001768 <nx_driver_stm32f7xx+0x4d4>
 8001772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001776:	f3bf 8f6f 	isb	sy
			}
 800177a:	f116 36ff 	adds.w	r6, r6, #4294967295
 800177e:	d2c4      	bcs.n	800170a <nx_driver_stm32f7xx+0x476>

 8001780:	9901      	ldr	r1, [sp, #4]

 8001782:	68e3      	ldr	r3, [r4, #12]

 8001784:	688a      	ldr	r2, [r1, #8]

 8001786:	634b      	str	r3, [r1, #52]	; 0x34
 8001788:	8993      	ldrh	r3, [r2, #12]
					/* Free up the BD to ready state. */
 800178a:	6820      	ldr	r0, [r4, #0]
 800178c:	ba5b      	rev16	r3, r3
 800178e:	b29b      	uxth	r3, r3

 8001790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001794:	f000 813e 	beq.w	8001a14 <nx_driver_stm32f7xx+0x780>
 8001798:	f248 61dd 	movw	r1, #34525	; 0x86dd
 800179c:	428b      	cmp	r3, r1
 800179e:	f000 8138 	beq.w	8001a12 <nx_driver_stm32f7xx+0x77e>
}
 80017a2:	f640 0106 	movw	r1, #2054	; 0x806
 80017a6:	428b      	cmp	r3, r1
 80017a8:	f000 814a 	beq.w	8001a40 <nx_driver_stm32f7xx+0x7ac>
/*                                                                        */ 
 80017ac:	f248 0135 	movw	r1, #32821	; 0x8035
 80017b0:	428b      	cmp	r3, r1
 80017b2:	f000 813c 	beq.w	8001a2e <nx_driver_stm32f7xx+0x79a>
/*                                                                        */ 
 80017b6:	9801      	ldr	r0, [sp, #4]
 80017b8:	f001 fac8 	bl	8002d4c <_nx_packet_release>
			}
 80017bc:	f509 63a1 	add.w	r3, r9, #1288	; 0x508
							+ 2;
 80017c0:	f8c4 9014 	str.w	r9, [r4, #20]
					nx_driver_information.nx_driver_information_receive_packets[temp_idx]
 80017c4:	46ca      	mov	sl, r9
			{
 80017c6:	2700      	movs	r7, #0
			}
 80017c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	e753      	b.n	800167a <nx_driver_stm32f7xx+0x3e6>
 80017d2:	9d02      	ldr	r5, [sp, #8]
		else
		{

			/* This BD is not the last BD of a frame. It is a intermediate descriptor.  */

 80017d4:	4b41      	ldr	r3, [pc, #260]	; (80018dc <nx_driver_stm32f7xx+0x648>)
 80017d6:	f241 0214 	movw	r2, #4116	; 0x1014
 80017da:	5899      	ldr	r1, [r3, r2]
 80017dc:	0609      	lsls	r1, r1, #24
 80017de:	f57f aed3 	bpl.w	8001588 <nx_driver_stm32f7xx+0x2f4>
			nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_next =
					nx_driver_information.nx_driver_information_receive_packets[(idx + 1)
							& (NX_DRIVER_RX_DESCRIPTORS - 1)];

 80017e2:	2480      	movs	r4, #128	; 0x80
			nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_append_ptr =
					nx_driver_information.nx_driver_information_receive_packets[idx]
 80017e4:	f241 0108 	movw	r1, #4104	; 0x1008
 80017e8:	2000      	movs	r0, #0

 80017ea:	509c      	str	r4, [r3, r2]
					nx_driver_information.nx_driver_information_receive_packets[idx]
 80017ec:	5058      	str	r0, [r3, r1]
 80017ee:	e6cb      	b.n	8001588 <nx_driver_stm32f7xx+0x2f4>
					break;
 80017f0:	f505 63a1 	add.w	r3, r5, #1288	; 0x508
 80017f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80017f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	6858      	ldr	r0, [r3, #4]
 8001800:	f001 faa4 	bl	8002d4c <_nx_packet_release>
				/* At least one packet allocation was failed, release the received packet.  */
 8001804:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
				nx_packet_release(
 8001808:	f505 63a1 	add.w	r3, r5, #1288	; 0x508
 800180c:	3f01      	subs	r7, #1
				/* At least one packet allocation was failed, release the received packet.  */
 800180e:	3501      	adds	r5, #1
				nx_packet_release(
 8001810:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			}
 8001814:	45ba      	cmp	sl, r7
				/* At least one packet allocation was failed, release the received packet.  */
 8001816:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 800181a:	f007 050f 	and.w	r5, r7, #15
				nx_packet_release(
 800181e:	685a      	ldr	r2, [r3, #4]
				/* At least one packet allocation was failed, release the received packet.  */
 8001820:	6041      	str	r1, [r0, #4]
				nx_packet_release(
 8001822:	6913      	ldr	r3, [r2, #16]
 8001824:	f103 0302 	add.w	r3, r3, #2
 8001828:	6093      	str	r3, [r2, #8]
			}
 800182a:	d1ed      	bne.n	8001808 <nx_driver_stm32f7xx+0x574>
 800182c:	e7c6      	b.n	80017bc <nx_driver_stm32f7xx+0x528>

 800182e:	e9d4 6307 	ldrd	r6, r3, [r4, #28]
 8001832:	f103 39ff 	add.w	r9, r3, #4294967295
 8001836:	4623      	mov	r3, r4
 8001838:	464c      	mov	r4, r9
 800183a:	4699      	mov	r9, r3
 800183c:	e012      	b.n	8001864 <nx_driver_stm32f7xx+0x5d0>
					numOfBuf;
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db22      	blt.n	800188a <nx_driver_stm32f7xx+0x5f6>
			/* Get out of the loop!  */
 8001844:	688a      	ldr	r2, [r1, #8]
/*  FUNCTION                                               RELEASE        */
 8001846:	3601      	adds	r6, #1
			/* Get out of the loop!  */
 8001848:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800184a:	320e      	adds	r2, #14
/*  FUNCTION                                               RELEASE        */
 800184c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
			/* Get out of the loop!  */
 8001850:	3b0e      	subs	r3, #14
 8001852:	608a      	str	r2, [r1, #8]
 8001854:	624b      	str	r3, [r1, #36]	; 0x24
	}
 8001856:	f001 fadf 	bl	8002e18 <_nx_packet_transmit_release>

 800185a:	f8ca 7004 	str.w	r7, [sl, #4]
/*    _nx_driver_hardware_packet_received               STM32F7xx/IAR     */
 800185e:	e9c9 6407 	strd	r6, r4, [r9, #28]
 8001862:	3c01      	subs	r4, #1
					numOfBuf;
 8001864:	f106 0311 	add.w	r3, r6, #17
			nx_packet_transmit_release(
 8001868:	f506 6a91 	add.w	sl, r6, #1160	; 0x488
			NX_DRIVER_ETHERNET_HEADER_REMOVE(
 800186c:	1c62      	adds	r2, r4, #1
					numOfBuf;
 800186e:	eb09 1343 	add.w	r3, r9, r3, lsl #5
			nx_packet_transmit_release(
 8001872:	eb09 0a8a 	add.w	sl, r9, sl, lsl #2
			NX_DRIVER_ETHERNET_HEADER_REMOVE(
 8001876:	d008      	beq.n	800188a <nx_driver_stm32f7xx+0x5f6>
			nx_packet_transmit_release(
 8001878:	f8da 1004 	ldr.w	r1, [sl, #4]
	}
 800187c:	4608      	mov	r0, r1
			nx_packet_transmit_release(
 800187e:	2900      	cmp	r1, #0
 8001880:	d1dd      	bne.n	800183e <nx_driver_stm32f7xx+0x5aa>
			nx_driver_information.nx_driver_information_transmit_packets[idx] = NX_NULL;
 8001882:	3601      	adds	r6, #1
 8001884:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8001888:	e7eb      	b.n	8001862 <nx_driver_stm32f7xx+0x5ce>
 800188a:	464c      	mov	r4, r9
 800188c:	e679      	b.n	8001582 <nx_driver_stm32f7xx+0x2ee>
		NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 800188e:	3b0e      	subs	r3, #14
		driver_req_ptr->nx_ip_driver_status = NX_DRIVER_ERROR;
 8001890:	245a      	movs	r4, #90	; 0x5a
		NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8001892:	608a      	str	r2, [r1, #8]
		nx_packet_transmit_release(packet_ptr);
 8001894:	4608      	mov	r0, r1
		NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8001896:	624b      	str	r3, [r1, #36]	; 0x24
		driver_req_ptr->nx_ip_driver_status = NX_DRIVER_ERROR;
 8001898:	606c      	str	r4, [r5, #4]
		nx_packet_transmit_release(packet_ptr);
 800189a:	f001 fabd 	bl	8002e18 <_nx_packet_transmit_release>
 800189e:	e592      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
/*    ETH_MACTransmissionCmd                Disable transmit              */
 80018a0:	4e11      	ldr	r6, [pc, #68]	; (80018e8 <nx_driver_stm32f7xx+0x654>)
			_nx_driver_disable(driver_req_ptr);
 80018a2:	6987      	ldr	r7, [r0, #24]
/*    ETH_MACTransmissionCmd                Disable transmit              */
 80018a4:	4630      	mov	r0, r6
 80018a6:	f00a f80f 	bl	800b8c8 <HAL_ETH_Start>
/*    ETH_MACReceptionCmd                   Disable receive               */
 80018aa:	6831      	ldr	r1, [r6, #0]
 80018ac:	f241 021c 	movw	r2, #4124	; 0x101c
/**************************************************************************/
 80018b0:	2004      	movs	r0, #4
/*    ETH_MACReceptionCmd                   Disable receive               */
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <nx_driver_stm32f7xx+0x658>)
/*                                                                        */
 80018b4:	2600      	movs	r6, #0
/*    ETH_MACReceptionCmd                   Disable receive               */
 80018b6:	f851 c002 	ldr.w	ip, [r1, r2]
/**************************************************************************/
 80018ba:	6060      	str	r0, [r4, #4]
/*  AUTHOR                                                                */
 80018bc:	2001      	movs	r0, #1
/*    ETH_MACReceptionCmd                   Disable receive               */
 80018be:	ea4c 0303 	orr.w	r3, ip, r3
 80018c2:	508b      	str	r3, [r1, r2]
/*                                                                        */
 80018c4:	606e      	str	r6, [r5, #4]
/*  AUTHOR                                                                */
 80018c6:	f887 0c4e 	strb.w	r0, [r7, #3150]	; 0xc4e
 80018ca:	e57c      	b.n	80013c6 <nx_driver_stm32f7xx+0x132>
	NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 80018cc:	f248 0e35 	movw	lr, #32821	; 0x8035
 80018d0:	ea40 0e0e 	orr.w	lr, r0, lr
 80018d4:	e534      	b.n	8001340 <nx_driver_stm32f7xx+0xac>
 80018d6:	bf00      	nop
 80018d8:	20000108 	.word	0x20000108
 80018dc:	40028000 	.word	0x40028000
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20001548 	.word	0x20001548
 80018e8:	20019084 	.word	0x20019084
 80018ec:	00010041 	.word	0x00010041
 80018f0:	e000ed00 	.word	0xe000ed00
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Buffer1Addr =
 80018f4:	6842      	ldr	r2, [r0, #4]

 80018f6:	eb04 1346 	add.w	r3, r4, r6, lsl #5
		}
 80018fa:	68cf      	ldr	r7, [r1, #12]
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Buffer1Addr =
 80018fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000

 8001900:	f8c3 922c 	str.w	r9, [r3, #556]	; 0x22c
		}
 8001904:	eba7 0709 	sub.w	r7, r7, r9
				((pktIdx->nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr) & ETH_DMATXDESC_TBS1);
 8001908:	690b      	ldr	r3, [r1, #16]
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Buffer1Addr =
 800190a:	6042      	str	r2, [r0, #4]
		/* Set the buffer size.  */
 800190c:	f8d0 c004 	ldr.w	ip, [r0, #4]
		}
 8001910:	f3c7 070c 	ubfx	r7, r7, #0, #13
				((pktIdx->nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr) & ETH_DMATXDESC_TBS1);
 8001914:	694a      	ldr	r2, [r1, #20]
		/* Set the buffer size.  */
 8001916:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
		}
 800191a:	6087      	str	r7, [r0, #8]
				((pktIdx->nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr) & ETH_DMATXDESC_TBS1);
 800191c:	1ad2      	subs	r2, r2, r3
		/* Set the buffer size.  */
 800191e:	f8c0 c004 	str.w	ip, [r0, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8001922:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8001926:	2a00      	cmp	r2, #0
 8001928:	dd0b      	ble.n	8001942 <nx_driver_stm32f7xx+0x6ae>
 800192a:	3a01      	subs	r2, #1
 800192c:	f103 0720 	add.w	r7, r3, #32
      SCB->DCCMVAC = op_addr;
 8001930:	486f      	ldr	r0, [pc, #444]	; (8001af0 <nx_driver_stm32f7xx+0x85c>)
 8001932:	f022 021f 	bic.w	r2, r2, #31
 8001936:	443a      	add	r2, r7
 8001938:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800193c:	3320      	adds	r3, #32
    while (op_size > 0) {
 800193e:	429a      	cmp	r2, r3
 8001940:	d1fa      	bne.n	8001938 <nx_driver_stm32f7xx+0x6a4>
 8001942:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	1c70      	adds	r0, r6, #1
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 800194c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001950:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001954:	f1bc 0f00 	cmp.w	ip, #0
 8001958:	f000 80c4 	beq.w	8001ae4 <nx_driver_stm32f7xx+0x850>
	}
 800195c:	f100 0711 	add.w	r7, r0, #17
 8001960:	eb04 1347 	add.w	r3, r4, r7, lsl #5
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db4f      	blt.n	8001a0a <nx_driver_stm32f7xx+0x776>
 800196a:	f500 6391 	add.w	r3, r0, #1160	; 0x488
 800196e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d148      	bne.n	8001a0a <nx_driver_stm32f7xx+0x776>
			packet_ptr->nx_packet_data_end - packet_ptr->nx_packet_data_start);
 8001978:	469e      	mov	lr, r3
      SCB->DCCMVAC = op_addr;
 800197a:	4603      	mov	r3, r0
 800197c:	4e5c      	ldr	r6, [pc, #368]	; (8001af0 <nx_driver_stm32f7xx+0x85c>)
 800197e:	4660      	mov	r0, ip
 8001980:	46ab      	mov	fp, r5
 8001982:	469c      	mov	ip, r3
	nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001984:	6885      	ldr	r5, [r0, #8]
	if (packet_ptr->nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8001986:	eb04 1947 	add.w	r9, r4, r7, lsl #5
 800198a:	68c3      	ldr	r3, [r0, #12]
	nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 800198c:	eb04 124c 	add.w	r2, r4, ip, lsl #5
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |=
 8001990:	f10e 0e01 	add.w	lr, lr, #1
	if (packet_ptr->nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8001994:	1b5b      	subs	r3, r3, r5
	nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001996:	f8c2 522c 	str.w	r5, [r2, #556]	; 0x22c
	NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
 800199a:	f8d9 2004 	ldr.w	r2, [r9, #4]
	if (packet_ptr->nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 800199e:	f3c3 080c 	ubfx	r8, r3, #0, #13
	}
 80019a2:	690b      	ldr	r3, [r1, #16]
	NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
 80019a4:	f022 5a40 	bic.w	sl, r2, #805306368	; 0x30000000
	}
 80019a8:	694a      	ldr	r2, [r1, #20]
	if (packet_ptr->nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 80019aa:	f8c9 8008 	str.w	r8, [r9, #8]
	NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
 80019ae:	f8c9 a004 	str.w	sl, [r9, #4]
	}
 80019b2:	1ad2      	subs	r2, r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80019b4:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 80019b8:	2a00      	cmp	r2, #0
 80019ba:	dd0b      	ble.n	80019d4 <nx_driver_stm32f7xx+0x740>
 80019bc:	f102 38ff 	add.w	r8, r2, #4294967295
 80019c0:	f103 0220 	add.w	r2, r3, #32
 80019c4:	f028 081f 	bic.w	r8, r8, #31
 80019c8:	4442      	add	r2, r8
      SCB->DCCMVAC = op_addr;
 80019ca:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80019ce:	3320      	adds	r3, #32
    while (op_size > 0) {
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1fa      	bne.n	80019ca <nx_driver_stm32f7xx+0x736>
 80019d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019d8:	f3bf 8f6f 	isb	sy
 80019dc:	f10c 0301 	add.w	r3, ip, #1

 80019e0:	6840      	ldr	r0, [r0, #4]
 80019e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d033      	beq.n	8001a52 <nx_driver_stm32f7xx+0x7be>
	}
 80019ea:	f103 0711 	add.w	r7, r3, #17
 80019ee:	eb04 1247 	add.w	r2, r4, r7, lsl #5
 80019f2:	6852      	ldr	r2, [r2, #4]
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	db07      	blt.n	8001a08 <nx_driver_stm32f7xx+0x774>
		SCB_CleanDCache_by_Addr((uint32_t*)(packet_ptr->nx_packet_data_start),
 80019f8:	469c      	mov	ip, r3
	}
 80019fa:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80019fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0bd      	beq.n	8001984 <nx_driver_stm32f7xx+0x6f0>
 8001a08:	465d      	mov	r5, fp
 8001a0a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8001a0e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001a10:	e4cf      	b.n	80013b2 <nx_driver_stm32f7xx+0x11e>
 8001a12:	9901      	ldr	r1, [sp, #4]

 8001a14:	6a4b      	ldr	r3, [r1, #36]	; 0x24

 8001a16:	320e      	adds	r2, #14

 8001a18:	3b0e      	subs	r3, #14
				packet_ptr->nx_packet_prepend_ptr + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8001a1a:	608a      	str	r2, [r1, #8]
				packet_ptr->nx_packet_length - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8001a1c:	624b      	str	r3, [r1, #36]	; 0x24
	else
 8001a1e:	f000 fb5b 	bl	80020d8 <_nx_ip_packet_deferred_receive>
 8001a22:	e6cb      	b.n	80017bc <nx_driver_stm32f7xx+0x528>
		/* This packet exceeds the size of the driver's MTU. Simply throw it away! */
 8001a24:	f248 6edd 	movw	lr, #34525	; 0x86dd
 8001a28:	ea40 0e0e 	orr.w	lr, r0, lr
 8001a2c:	e488      	b.n	8001340 <nx_driver_stm32f7xx+0xac>
/*    Note: that it is assumed further driver interrupts are locked out   */ 
 8001a2e:	9901      	ldr	r1, [sp, #4]
/*    the transmit queue is regulated by the constant                     */ 
 8001a30:	320e      	adds	r2, #14
/*    Note: that it is assumed further driver interrupts are locked out   */ 
 8001a32:	6a4b      	ldr	r3, [r1, #36]	; 0x24
/*    list with head and tail pointers. The maximum number of packets on  */ 
 8001a34:	608a      	str	r2, [r1, #8]
/*    Note: that it is assumed further driver interrupts are locked out   */ 
 8001a36:	3b0e      	subs	r3, #14
/*                                                                        */ 
 8001a38:	624b      	str	r3, [r1, #36]	; 0x24
/*  INPUT                                                                 */ 
 8001a3a:	f001 fa0f 	bl	8002e5c <_nx_rarp_packet_deferred_receive>
 8001a3e:	e6bd      	b.n	80017bc <nx_driver_stm32f7xx+0x528>
/*  AUTHOR                                                                */ 
 8001a40:	9901      	ldr	r1, [sp, #4]
/*  FUNCTION                                               RELEASE        */ 
 8001a42:	320e      	adds	r2, #14
/*  AUTHOR                                                                */ 
 8001a44:	6a4b      	ldr	r3, [r1, #36]	; 0x24
/*                                                                        */ 
 8001a46:	608a      	str	r2, [r1, #8]
/*  AUTHOR                                                                */ 
 8001a48:	3b0e      	subs	r3, #14
/*                                                           6.0          */ 
 8001a4a:	624b      	str	r3, [r1, #36]	; 0x24
/*                                                                        */ 
 8001a4c:	f003 fe36 	bl	80056bc <_nx_arp_packet_deferred_receive>
 8001a50:	e6b4      	b.n	80017bc <nx_driver_stm32f7xx+0x528>
 8001a52:	4660      	mov	r0, ip
 8001a54:	465d      	mov	r5, fp
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |=
 8001a56:	eb04 1747 	add.w	r7, r4, r7, lsl #5
	nx_driver_information.nx_driver_information_transmit_packets[curIdx] = packet_ptr;
 8001a5a:	6bce      	ldr	r6, [r1, #60]	; 0x3c
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |=
 8001a5c:	687a      	ldr	r2, [r7, #4]
	nx_driver_information.nx_driver_information_transmit_packets[curIdx] = packet_ptr;
 8001a5e:	f416 7f15 	tst.w	r6, #596	; 0x254
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |=
 8001a62:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
 8001a66:	607a      	str	r2, [r7, #4]

 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001a6e:	607a      	str	r2, [r7, #4]
	nx_driver_information.nx_driver_information_transmit_packets[curIdx] = packet_ptr;
 8001a70:	d031      	beq.n	8001ad6 <nx_driver_stm32f7xx+0x842>
	TX_DISABLE
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	f442 0240 	orr.w	r2, r2, #12582912	; 0xc00000
 8001a78:	607a      	str	r2, [r7, #4]

 8001a7a:	f500 6291 	add.w	r2, r0, #1160	; 0x488
				ETH_DMATXDESC_OWN;
 8001a7e:	61a3      	str	r3, [r4, #24]

 8001a80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8001a84:	6059      	str	r1, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001a86:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001a8a:	b672      	cpsid	i
	if ((ETH->DMASR & ETH_DMASR_TBUS) != (ULONG)RESET)
 8001a8c:	6a23      	ldr	r3, [r4, #32]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4473      	add	r3, lr
 8001a92:	6223      	str	r3, [r4, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001a94:	f382 8810 	msr	PRIMASK, r2
		ETH->DMASR = ETH_DMASR_TBUS;
 8001a98:	f1be 0f00 	cmp.w	lr, #0
 8001a9c:	d00d      	beq.n	8001aba <nx_driver_stm32f7xx+0x826>
	}
 8001a9e:	3801      	subs	r0, #1
		ETH->DMASR = ETH_DMASR_TBUS;
 8001aa0:	f1be 0e01 	subs.w	lr, lr, #1
	}
 8001aa4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
 8001aa8:	f100 0311 	add.w	r3, r0, #17
 8001aac:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ab6:	605a      	str	r2, [r3, #4]
		ETH->DMASR = ETH_DMASR_TBUS;
 8001ab8:	d1f1      	bne.n	8001a9e <nx_driver_stm32f7xx+0x80a>
/*  FUNCTION                                               RELEASE        */
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <nx_driver_stm32f7xx+0x860>)
 8001abc:	f241 0214 	movw	r2, #4116	; 0x1014
 8001ac0:	5899      	ldr	r1, [r3, r2]
 8001ac2:	0749      	lsls	r1, r1, #29
 8001ac4:	f57f ad60 	bpl.w	8001588 <nx_driver_stm32f7xx+0x2f4>
/*                                                           6.0          */
 8001ac8:	2404      	movs	r4, #4
/*    Yuxin Zhou, Microsoft Corporation                                   */
 8001aca:	f241 0104 	movw	r1, #4100	; 0x1004
 8001ace:	2000      	movs	r0, #0
/*                                                           6.0          */
 8001ad0:	509c      	str	r4, [r3, r2]
/*    Yuxin Zhou, Microsoft Corporation                                   */
 8001ad2:	5058      	str	r0, [r3, r1]
 8001ad4:	e558      	b.n	8001588 <nx_driver_stm32f7xx+0x2f4>
	nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use += bd_count + 1;
 8001ad6:	07f6      	lsls	r6, r6, #31
 8001ad8:	d5cf      	bpl.n	8001a7a <nx_driver_stm32f7xx+0x7e6>
	for (; bd_count > 0; bd_count--)
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	e7ca      	b.n	8001a7a <nx_driver_stm32f7xx+0x7e6>
		nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &=
 8001ae4:	4603      	mov	r3, r0
			packet_ptr->nx_packet_data_end - packet_ptr->nx_packet_data_start);
 8001ae6:	46e6      	mov	lr, ip
			pktIdx = pktIdx->nx_packet_next)
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f106 0711 	add.w	r7, r6, #17
 8001aee:	e7b2      	b.n	8001a56 <nx_driver_stm32f7xx+0x7c2>
 8001af0:	e000ed00 	.word	0xe000ed00
 8001af4:	40028000 	.word	0x40028000

08001af8 <nx_driver_stm32f7xx_ethernet_isr>:
/*  CALLS                                                                 */
/*                                                                        */
/*    _nx_ip_driver_deferred_processing     IP receive packet processing  */
/*    ETH_DMAClearITPendingBit              Ethernet DMA Interrupt clear  */
/*                                                                        */
/*  CALLED BY                                                             */
 8001af8:	f241 0214 	movw	r2, #4116	; 0x1014
 8001afc:	490d      	ldr	r1, [pc, #52]	; (8001b34 <nx_driver_stm32f7xx_ethernet_isr+0x3c>)
/*                                                                        */
/*    ISR                                                                 */
/*                                                                        */
/*  RELEASE HISTORY                                                       */
/*                                                                        */
/*    DATE              NAME                      DESCRIPTION             */
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <nx_driver_stm32f7xx_ethernet_isr+0x40>)
/*  CALLED BY                                                             */
 8001b00:	5888      	ldr	r0, [r1, r2]
/*                                                                        */
 8001b02:	b410      	push	{r4}
/*                                                                        */
 8001b04:	4c0d      	ldr	r4, [pc, #52]	; (8001b3c <nx_driver_stm32f7xx_ethernet_isr+0x44>)
 8001b06:	508c      	str	r4, [r1, r2]
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
 8001b08:	07c4      	lsls	r4, r0, #31
/*    DATE              NAME                      DESCRIPTION             */
 8001b0a:	691a      	ldr	r2, [r3, #16]
/**************************************************************************/
 8001b0c:	d50b      	bpl.n	8001b26 <nx_driver_stm32f7xx_ethernet_isr+0x2e>
VOID nx_driver_stm32f7xx_ethernet_isr(VOID)
{

	ULONG status;
#ifdef NX_DRIVER_ENABLE_DEFERRED
	ULONG deffered_events;
 8001b0e:	f042 0104 	orr.w	r1, r2, #4
 8001b12:	6119      	str	r1, [r3, #16]
	status = ETH->DMASR;

	/* Clear the Ethernet DMA Rx IT pending bits */
	ETH->DMASR = ETH_DMA_IT_R | ETH_DMA_IT_T | ETH_DMA_IT_NIS;

#ifdef NX_DRIVER_ENABLE_DEFERRED
 8001b14:	0640      	lsls	r0, r0, #25
 8001b16:	d502      	bpl.n	8001b1e <nx_driver_stm32f7xx_ethernet_isr+0x26>
	deffered_events = nx_driver_information.nx_driver_information_deferred_events;
#endif /* NX_DRIVER_ENABLE_DEFERRED */

	/* Interrupt on transmit completion.  */
	if (status & ETH_DMA_IT_T)
	{
 8001b18:	f041 0101 	orr.w	r1, r1, #1
 8001b1c:	6119      	str	r1, [r3, #16]
		nx_driver_information.nx_driver_information_deferred_events |=
				NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
#else

        /* Process transmitted packet(s).  */
        _nx_driver_hardware_packet_transmitted();
 8001b1e:	b122      	cbz	r2, 8001b2a <nx_driver_stm32f7xx_ethernet_isr+0x32>
	/* Receive packet interrupt.  */
	if (status & ETH_DMA_IT_R)
	{

#ifdef NX_DRIVER_ENABLE_DEFERRED

 8001b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	4611      	mov	r1, r2
 8001b28:	e7f4      	b.n	8001b14 <nx_driver_stm32f7xx_ethernet_isr+0x1c>
	if (status & ETH_DMA_IT_R)
 8001b2a:	6818      	ldr	r0, [r3, #0]

 8001b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
	if (status & ETH_DMA_IT_R)
 8001b30:	f000 bac0 	b.w	80020b4 <_nx_ip_driver_deferred_processing>
 8001b34:	40028000 	.word	0x40028000
 8001b38:	200000e4 	.word	0x200000e4
 8001b3c:	00010041 	.word	0x00010041

08001b40 <_nx_icmp_enable>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8001b40:	b410      	push	{r4}
 8001b42:	4603      	mov	r3, r0
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8001b44:	4c06      	ldr	r4, [pc, #24]	; (8001b60 <_nx_icmp_enable+0x20>)

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8001b46:	4907      	ldr	r1, [pc, #28]	; (8001b64 <_nx_icmp_enable+0x24>)
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8001b48:	2000      	movs	r0, #0
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <_nx_icmp_enable+0x28>)
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8001b4c:	f8c3 4884 	str.w	r4, [r3, #2180]	; 0x884
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8001b50:	f8c3 1880 	str.w	r1, [r3, #2176]	; 0x880
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8001b54:	f8c3 2888 	str.w	r2, [r3, #2184]	; 0x888
}
 8001b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	08001bbd 	.word	0x08001bbd
 8001b64:	08001b6d 	.word	0x08001b6d
 8001b68:	08001bed 	.word	0x08001bed

08001b6c <_nx_icmp_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8001b6c:	b430      	push	{r4, r5}
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8001b72:	f3ef 8405 	mrs	r4, IPSR
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 8001b76:	4d0f      	ldr	r5, [pc, #60]	; (8001bb4 <_nx_icmp_packet_receive+0x48>)
 8001b78:	682d      	ldr	r5, [r5, #0]
 8001b7a:	432c      	orrs	r4, r5
 8001b7c:	d105      	bne.n	8001b8a <_nx_icmp_packet_receive+0x1e>
 8001b7e:	4d0e      	ldr	r5, [pc, #56]	; (8001bb8 <_nx_icmp_packet_receive+0x4c>)
 8001b80:	f500 64d3 	add.w	r4, r0, #1688	; 0x698
 8001b84:	682d      	ldr	r5, [r5, #0]
 8001b86:	42a5      	cmp	r5, r4
 8001b88:	d010      	beq.n	8001bac <_nx_icmp_packet_receive+0x40>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001b8a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001b8e:	b672      	cpsid	i
 8001b90:	f8d3 089c 	ldr.w	r0, [r3, #2204]	; 0x89c
 8001b94:	61d0      	str	r0, [r2, #28]
            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 8001b96:	f8c3 289c 	str.w	r2, [r3, #2204]	; 0x89c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001b9a:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 8001ba4:	2104      	movs	r1, #4
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 8001ba6:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8001ba8:	f00b ba62 	b.w	800d070 <_tx_event_flags_set>
}
 8001bac:	bc30      	pop	{r4, r5}
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8001bae:	f003 bf69 	b.w	8005a84 <_nx_icmp_packet_process>
 8001bb2:	bf00      	nop
 8001bb4:	2000007c 	.word	0x2000007c
 8001bb8:	20019248 	.word	0x20019248

08001bbc <_nx_icmp_queue_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 8001bbc:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001bbe:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001bc2:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8001bc4:	2600      	movs	r6, #0
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 8001bc6:	f8d0 389c 	ldr.w	r3, [r0, #2204]	; 0x89c
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8001bca:	f8c0 689c 	str.w	r6, [r0, #2204]	; 0x89c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001bce:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8001bd2:	b14b      	cbz	r3, 8001be8 <_nx_icmp_queue_process+0x2c>
 8001bd4:	4605      	mov	r5, r0
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
        queue_head =  queue_head -> nx_packet_queue_next;
 8001bd6:	69dc      	ldr	r4, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8001bd8:	4619      	mov	r1, r3
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8001bda:	61de      	str	r6, [r3, #28]
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f003 ff51 	bl	8005a84 <_nx_icmp_packet_process>
    while (queue_head)
 8001be2:	4623      	mov	r3, r4
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	d1f6      	bne.n	8001bd6 <_nx_icmp_queue_process+0x1a>
    }
}
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
 8001bea:	bf00      	nop

08001bec <_nx_icmpv4_packet_process>:
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8001bec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
{
 8001bee:	b570      	push	{r4, r5, r6, lr}
 8001bf0:	460c      	mov	r4, r1
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8001bf2:	688d      	ldr	r5, [r1, #8]
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8001bf4:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	4606      	mov	r6, r0
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8001bfa:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8001bfe:	d009      	beq.n	8001c14 <_nx_icmpv4_packet_process+0x28>
            return;
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 8001c00:	782b      	ldrb	r3, [r5, #0]
 8001c02:	b1b3      	cbz	r3, 8001c32 <_nx_icmpv4_packet_process+0x46>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d01b      	beq.n	8001c40 <_nx_icmpv4_packet_process+0x54>
            _nx_packet_release(packet_ptr);
 8001c08:	4620      	mov	r0, r4
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
    }
}
 8001c0a:	b002      	add	sp, #8
 8001c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            _nx_packet_release(packet_ptr);
 8001c10:	f001 b89c 	b.w	8002d4c <_nx_packet_release>
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8001c14:	460b      	mov	r3, r1
 8001c16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c18:	4620      	mov	r0, r4
 8001c1a:	9100      	str	r1, [sp, #0]
 8001c1c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001c20:	f000 f8d0 	bl	8001dc4 <_nx_ip_checksum_compute>
        if (checksum)
 8001c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c28:	4298      	cmp	r0, r3
 8001c2a:	d1ed      	bne.n	8001c08 <_nx_icmpv4_packet_process+0x1c>
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 8001c2c:	782b      	ldrb	r3, [r5, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1e8      	bne.n	8001c04 <_nx_icmpv4_packet_process+0x18>
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8001c32:	4621      	mov	r1, r4
 8001c34:	4630      	mov	r0, r6
}
 8001c36:	b002      	add	sp, #8
 8001c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8001c3c:	f000 b808 	b.w	8001c50 <_nx_icmpv4_process_echo_reply>
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8001c40:	4621      	mov	r1, r4
 8001c42:	4630      	mov	r0, r6
}
 8001c44:	b002      	add	sp, #8
 8001c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8001c4a:	f000 b863 	b.w	8001d14 <_nx_icmpv4_process_echo_request>
 8001c4e:	bf00      	nop

08001c50 <_nx_icmpv4_process_echo_reply>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 8001c52:	688b      	ldr	r3, [r1, #8]
 8001c54:	88db      	ldrh	r3, [r3, #6]

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8001c56:	021c      	lsls	r4, r3, #8
 8001c58:	ea44 2413 	orr.w	r4, r4, r3, lsr #8
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001c5c:	f3ef 8710 	mrs	r7, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001c60:	b672      	cpsid	i
    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8001c62:	4e2b      	ldr	r6, [pc, #172]	; (8001d10 <_nx_icmpv4_process_echo_reply+0xc0>)
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 8001c64:	f8d0 38a0 	ldr.w	r3, [r0, #2208]	; 0x8a0
    _tx_thread_preempt_disable++;
 8001c68:	6832      	ldr	r2, [r6, #0]
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 8001c6a:	f8d0 58a4 	ldr.w	r5, [r0, #2212]	; 0x8a4
    _tx_thread_preempt_disable++;
 8001c6e:	3201      	adds	r2, #1
 8001c70:	6032      	str	r2, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001c72:	f387 8810 	msr	PRIMASK, r7
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 8001c76:	b175      	cbz	r5, 8001c96 <_nx_icmpv4_process_echo_reply+0x46>
 8001c78:	b2a4      	uxth	r4, r4
 8001c7a:	1e6a      	subs	r2, r5, #1
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 8001c7c:	f8b3 5078 	ldrh.w	r5, [r3, #120]	; 0x78
 8001c80:	42ac      	cmp	r4, r5
 8001c82:	d104      	bne.n	8001c8e <_nx_icmpv4_process_echo_reply+0x3e>
 8001c84:	e016      	b.n	8001cb4 <_nx_icmpv4_process_echo_reply+0x64>
 8001c86:	f8b3 5078 	ldrh.w	r5, [r3, #120]	; 0x78
 8001c8a:	42a5      	cmp	r5, r4
 8001c8c:	d012      	beq.n	8001cb4 <_nx_icmpv4_process_echo_reply+0x64>
    while (suspended--)
 8001c8e:	3a01      	subs	r2, #1
            break;
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    while (suspended--)
 8001c92:	1c55      	adds	r5, r2, #1
 8001c94:	d1f7      	bne.n	8001c86 <_nx_icmpv4_process_echo_reply+0x36>
        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8001c96:	4608      	mov	r0, r1
 8001c98:	f001 f858 	bl	8002d4c <_nx_packet_release>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001c9c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001ca0:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8001ca2:	6833      	ldr	r3, [r6, #0]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001ca8:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
}
 8001cac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _tx_thread_system_preempt_check();
 8001cb0:	f00b befa 	b.w	800daa8 <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001cb4:	f3ef 8710 	mrs	r7, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001cb8:	b672      	cpsid	i
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8001cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d023      	beq.n	8001d08 <_nx_icmpv4_process_echo_reply+0xb8>
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 8001cc0:	f8d0 48a0 	ldr.w	r4, [r0, #2208]	; 0x8a0
 8001cc4:	429c      	cmp	r4, r3
                    thread_ptr -> tx_thread_suspended_previous;
 8001cc6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8001cc8:	bf08      	it	eq
 8001cca:	f8c0 28a0 	streq.w	r2, [r0, #2208]	; 0x8a0
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8001cce:	6754      	str	r4, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8001cd0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001cd2:	6722      	str	r2, [r4, #112]	; 0x70
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8001cd4:	f8d0 48a4 	ldr.w	r4, [r0, #2212]	; 0x8a4
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8001cd8:	2500      	movs	r5, #0
            _tx_thread_preempt_disable++;
 8001cda:	6832      	ldr	r2, [r6, #0]
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8001cdc:	3c01      	subs	r4, #1
            _tx_thread_preempt_disable++;
 8001cde:	3201      	adds	r2, #1
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8001ce0:	f8c0 48a4 	str.w	r4, [r0, #2212]	; 0x8a4
            _tx_thread_preempt_disable++;
 8001ce4:	6032      	str	r2, [r6, #0]
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8001ce6:	669d      	str	r5, [r3, #104]	; 0x68
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001ce8:	f387 8810 	msr	PRIMASK, r7
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8001cec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
            _tx_thread_system_resume(thread_ptr);
 8001cee:	4618      	mov	r0, r3
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8001cf0:	688a      	ldr	r2, [r1, #8]
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8001cf2:	6fdf      	ldr	r7, [r3, #124]	; 0x7c
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8001cf4:	3c08      	subs	r4, #8
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8001cf6:	3208      	adds	r2, #8
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8001cf8:	624c      	str	r4, [r1, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8001cfa:	608a      	str	r2, [r1, #8]
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8001cfc:	6039      	str	r1, [r7, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8001cfe:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
            _tx_thread_system_resume(thread_ptr);
 8001d02:	f00b feef 	bl	800dae4 <_tx_thread_system_resume>
 8001d06:	e7c9      	b.n	8001c9c <_nx_icmpv4_process_echo_reply+0x4c>
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8c0 28a0 	str.w	r2, [r0, #2208]	; 0x8a0
 8001d0e:	e7e1      	b.n	8001cd4 <_nx_icmpv4_process_echo_reply+0x84>
 8001d10:	20019244 	.word	0x20019244

08001d14 <_nx_icmpv4_process_echo_request>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 8001d16:	2300      	movs	r3, #0
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8001d18:	688a      	ldr	r2, [r1, #8]
{
 8001d1a:	b087      	sub	sp, #28

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8001d1c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
{
 8001d1e:	460c      	mov	r4, r1
 8001d20:	4605      	mov	r5, r0
ULONG             next_hop_address = NX_NULL;
 8001d22:	9305      	str	r3, [sp, #20]
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 8001d24:	7013      	strb	r3, [r2, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8001d26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001d28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d2a:	0649      	lsls	r1, r1, #25
 8001d2c:	d51b      	bpl.n	8001d66 <_nx_icmpv4_process_echo_request+0x52>

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8001d2e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
        header_ptr -> nx_icmpv4_header_checksum = 0;
 8001d30:	8053      	strh	r3, [r2, #2]
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8001d32:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001d36:	63e1      	str	r1, [r4, #60]	; 0x3c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8001d38:	ab05      	add	r3, sp, #20
 8001d3a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001d3e:	68f1      	ldr	r1, [r6, #12]
 8001d40:	4628      	mov	r0, r5
 8001d42:	f000 fa29 	bl	8002198 <_nx_ip_route_find>
    ip_ptr -> nx_ip_pings_responded_to++;
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8001d46:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8001d4a:	68f2      	ldr	r2, [r6, #12]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4621      	mov	r1, r4
 8001d50:	2680      	movs	r6, #128	; 0x80
 8001d52:	9c05      	ldr	r4, [sp, #20]
 8001d54:	4628      	mov	r0, r5
 8001d56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001d5a:	e9cd 6700 	strd	r6, r7, [sp]
 8001d5e:	f000 f9db 	bl	8002118 <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 8001d62:	b007      	add	sp, #28
 8001d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8001d66:	8851      	ldrh	r1, [r2, #2]
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 8001d68:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8001d6c:	020b      	lsls	r3, r1, #8
 8001d6e:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 8001d72:	43db      	mvns	r3, r3
 8001d74:	fa10 f383 	uxtah	r3, r0, r3
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001d7e:	b28b      	uxth	r3, r1
 8001d80:	eb03 4311 	add.w	r3, r3, r1, lsr #16
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8001d84:	43db      	mvns	r3, r3
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8001d86:	ba5b      	rev16	r3, r3
 8001d88:	8053      	strh	r3, [r2, #2]
 8001d8a:	e7d5      	b.n	8001d38 <_nx_icmpv4_process_echo_request+0x24>

08001d8c <_nx_ip_address_get>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8001d8e:	f200 653c 	addw	r5, r0, #1596	; 0x63c
{
 8001d92:	4604      	mov	r4, r0
 8001d94:	460f      	mov	r7, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8001d96:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9a:	4628      	mov	r0, r5
{
 8001d9c:	4616      	mov	r6, r2
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8001d9e:	f00b faf7 	bl	800d390 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8001da2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8001da6:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 8001da8:	f8d4 2c5c 	ldr.w	r2, [r4, #3164]	; 0xc5c
 8001dac:	603a      	str	r2, [r7, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 8001dae:	f8d4 2c60 	ldr.w	r2, [r4, #3168]	; 0xc60
 8001db2:	6032      	str	r2, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8001db4:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8001db8:	4628      	mov	r0, r5
 8001dba:	f00b fbd3 	bl	800d564 <_tx_mutex_put>
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dc2:	bf00      	nop

08001dc4 <_nx_ip_checksum_compute>:

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
#ifdef FEATURE_NX_IPV6
        (protocol == NX_PROTOCOL_ICMPV6) ||
 8001dc4:	293a      	cmp	r1, #58	; 0x3a
 8001dc6:	bf18      	it	ne
 8001dc8:	2911      	cmpne	r1, #17
{
 8001dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dcc:	9d06      	ldr	r5, [sp, #24]
 8001dce:	461c      	mov	r4, r3
        (protocol == NX_PROTOCOL_ICMPV6) ||
 8001dd0:	d005      	beq.n	8001dde <_nx_ip_checksum_compute+0x1a>
 8001dd2:	f1a1 0306 	sub.w	r3, r1, #6
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	b1eb      	cbz	r3, 8001e1a <_nx_ip_checksum_compute+0x56>
    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8001dde:	2c00      	cmp	r4, #0
 8001de0:	d053      	beq.n	8001e8a <_nx_ip_checksum_compute+0xc6>
 8001de2:	2d00      	cmp	r5, #0
 8001de4:	d051      	beq.n	8001e8a <_nx_ip_checksum_compute+0xc6>


        checksum += src_ip_short[0];
        checksum += src_ip_short[1];
        checksum += dest_ip_short[0];
        checksum += dest_ip_short[1];
 8001de6:	886e      	ldrh	r6, [r5, #2]
        checksum += dest_ip_short[0];
 8001de8:	882b      	ldrh	r3, [r5, #0]
        checksum += src_ip_short[0];
 8001dea:	8827      	ldrh	r7, [r4, #0]
        checksum += dest_ip_short[1];
 8001dec:	4433      	add	r3, r6
        checksum += src_ip_short[1];
 8001dee:	8866      	ldrh	r6, [r4, #2]
        checksum += dest_ip_short[1];
 8001df0:	4419      	add	r1, r3

#ifdef FEATURE_NX_IPV6

        /* Note that the IPv6 address is 128 bits/4 words
           compared with the 32 IPv4 address.*/
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8001df2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
        checksum += dest_ip_short[1];
 8001df6:	4439      	add	r1, r7
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8001df8:	2b06      	cmp	r3, #6
        checksum += dest_ip_short[1];
 8001dfa:	4431      	add	r1, r6
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8001dfc:	d058      	beq.n	8001eb0 <_nx_ip_checksum_compute+0xec>
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8001dfe:	188b      	adds	r3, r1, r2
        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8001e00:	493b      	ldr	r1, [pc, #236]	; (8001ef0 <_nx_ip_checksum_compute+0x12c>)
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001e02:	b29c      	uxth	r4, r3
 8001e04:	eb04 4413 	add.w	r4, r4, r3, lsr #16
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001e08:	b2a3      	uxth	r3, r4
 8001e0a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8001e0e:	ea01 2103 	and.w	r1, r1, r3, lsl #8
 8001e12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001e16:	430b      	orrs	r3, r1
        checksum = tmp;
 8001e18:	b29b      	uxth	r3, r3
    while (current_packet)
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8001e1a:	e9d0 1602 	ldrd	r1, r6, [r0, #8]
 8001e1e:	1a74      	subs	r4, r6, r1

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 8001e20:	4294      	cmp	r4, r2
 8001e22:	d22f      	bcs.n	8001e84 <_nx_ip_checksum_compute+0xc0>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8001e24:	f026 0503 	bic.w	r5, r6, #3
        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8001e28:	428d      	cmp	r5, r1
 8001e2a:	d80e      	bhi.n	8001e4a <_nx_ip_checksum_compute+0x86>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8001e2c:	b9e2      	cbnz	r2, 8001e68 <_nx_ip_checksum_compute+0xa4>

        checksum += *short_ptr;
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001e2e:	b299      	uxth	r1, r3
    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8001e30:	4a2f      	ldr	r2, [pc, #188]	; (8001ef0 <_nx_ip_checksum_compute+0x12c>)
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001e32:	eb01 4113 	add.w	r1, r1, r3, lsr #16
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8001e36:	b28b      	uxth	r3, r1
 8001e38:	eb03 4311 	add.w	r3, r3, r1, lsr #16
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8001e3c:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8001e40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001e44:	4313      	orrs	r3, r2

    /* Return the computed checksum.  */
    return(tmp);
}
 8001e46:	b298      	uxth	r0, r3
 8001e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8001e4a:	1cec      	adds	r4, r5, #3
 8001e4c:	440a      	add	r2, r1
 8001e4e:	f024 0403 	bic.w	r4, r4, #3
 8001e52:	1b12      	subs	r2, r2, r4
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8001e54:	f851 4b04 	ldr.w	r4, [r1], #4
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8001e58:	0c27      	lsrs	r7, r4, #16
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8001e5a:	42a9      	cmp	r1, r5
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8001e5c:	fa17 f484 	uxtah	r4, r7, r4
 8001e60:	4423      	add	r3, r4
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8001e62:	d3f7      	bcc.n	8001e54 <_nx_ip_checksum_compute+0x90>
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d0e2      	beq.n	8001e2e <_nx_ip_checksum_compute+0x6a>
 8001e68:	6840      	ldr	r0, [r0, #4]
 8001e6a:	b1b8      	cbz	r0, 8001e9c <_nx_ip_checksum_compute+0xd8>
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8001e6c:	f006 0603 	and.w	r6, r6, #3
 8001e70:	2e02      	cmp	r6, #2
 8001e72:	d1d2      	bne.n	8001e1a <_nx_ip_checksum_compute+0x56>
                checksum += *short_ptr;
 8001e74:	8809      	ldrh	r1, [r1, #0]
                data_length -= 2;
 8001e76:	3a02      	subs	r2, #2
                checksum += *short_ptr;
 8001e78:	440b      	add	r3, r1
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8001e7a:	e9d0 1602 	ldrd	r1, r6, [r0, #8]
 8001e7e:	1a74      	subs	r4, r6, r1
        if (data_length > (UINT)packet_size)
 8001e80:	4294      	cmp	r4, r2
 8001e82:	d3cf      	bcc.n	8001e24 <_nx_ip_checksum_compute+0x60>
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8001e84:	1ed5      	subs	r5, r2, #3
 8001e86:	440d      	add	r5, r1
 8001e88:	e7ce      	b.n	8001e28 <_nx_ip_checksum_compute+0x64>
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8001e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8e:	f00b fdd5 	bl	800da3c <_tx_thread_sleep>
 8001e92:	f04f 30ff 	mov.w	r0, #4294967295
 8001e96:	f00b fdd1 	bl	800da3c <_tx_thread_sleep>
 8001e9a:	e7f6      	b.n	8001e8a <_nx_ip_checksum_compute+0xc6>
        if (data_length == 1)
 8001e9c:	2a01      	cmp	r2, #1
 8001e9e:	d022      	beq.n	8001ee6 <_nx_ip_checksum_compute+0x122>
 8001ea0:	880c      	ldrh	r4, [r1, #0]
        else if (data_length == 3)
 8001ea2:	2a03      	cmp	r2, #3
 8001ea4:	4423      	add	r3, r4
 8001ea6:	d1c2      	bne.n	8001e2e <_nx_ip_checksum_compute+0x6a>
            *((UCHAR *)short_ptr + 1) = 0;
 8001ea8:	70c8      	strb	r0, [r1, #3]
 8001eaa:	884a      	ldrh	r2, [r1, #2]
 8001eac:	4413      	add	r3, r2
 8001eae:	e7be      	b.n	8001e2e <_nx_ip_checksum_compute+0x6a>
                checksum += dest_ip_short[i];
 8001eb0:	88af      	ldrh	r7, [r5, #4]
                checksum += src_ip_short[i];
 8001eb2:	88a3      	ldrh	r3, [r4, #4]
                checksum += dest_ip_short[i];
 8001eb4:	88ee      	ldrh	r6, [r5, #6]
 8001eb6:	443b      	add	r3, r7
                checksum += src_ip_short[i];
 8001eb8:	f8b4 c006 	ldrh.w	ip, [r4, #6]
                checksum += dest_ip_short[i];
 8001ebc:	892f      	ldrh	r7, [r5, #8]
 8001ebe:	440b      	add	r3, r1
 8001ec0:	8969      	ldrh	r1, [r5, #10]
 8001ec2:	4433      	add	r3, r6
                checksum += src_ip_short[i];
 8001ec4:	8926      	ldrh	r6, [r4, #8]
 8001ec6:	4463      	add	r3, ip
 8001ec8:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8001ecc:	443b      	add	r3, r7
                checksum += dest_ip_short[i];
 8001ece:	89af      	ldrh	r7, [r5, #12]
 8001ed0:	89ed      	ldrh	r5, [r5, #14]
 8001ed2:	4433      	add	r3, r6
                checksum += src_ip_short[i];
 8001ed4:	89a6      	ldrh	r6, [r4, #12]
 8001ed6:	440b      	add	r3, r1
 8001ed8:	89e1      	ldrh	r1, [r4, #14]
 8001eda:	4463      	add	r3, ip
 8001edc:	443b      	add	r3, r7
 8001ede:	4433      	add	r3, r6
 8001ee0:	442b      	add	r3, r5
 8001ee2:	4419      	add	r1, r3
 8001ee4:	e78b      	b.n	8001dfe <_nx_ip_checksum_compute+0x3a>
            *((UCHAR *)short_ptr + 1) = 0;
 8001ee6:	7048      	strb	r0, [r1, #1]
 8001ee8:	880a      	ldrh	r2, [r1, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	e79f      	b.n	8001e2e <_nx_ip_checksum_compute+0x6a>
 8001eee:	bf00      	nop
 8001ef0:	00ffff00 	.word	0x00ffff00

08001ef4 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8001ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8001ef8:	4d5e      	ldr	r5, [pc, #376]	; (8002074 <_nx_ip_create+0x180>)
{
 8001efa:	b089      	sub	sp, #36	; 0x24
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8001efc:	4c5e      	ldr	r4, [pc, #376]	; (8002078 <_nx_ip_create+0x184>)
UINT       old_threshold = 0;
 8001efe:	2600      	movs	r6, #0
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8001f00:	682d      	ldr	r5, [r5, #0]
 8001f02:	f8d4 c000 	ldr.w	ip, [r4]
 8001f06:	4f5d      	ldr	r7, [pc, #372]	; (800207c <_nx_ip_create+0x188>)
 8001f08:	ea45 050c 	orr.w	r5, r5, ip
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8001f0c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80020a4 <_nx_ip_create+0x1b0>
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8001f10:	683f      	ldr	r7, [r7, #0]
 8001f12:	f8dc e000 	ldr.w	lr, [ip]
 8001f16:	433d      	orrs	r5, r7
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8001f18:	4f59      	ldr	r7, [pc, #356]	; (8002080 <_nx_ip_create+0x18c>)
 8001f1a:	f8df c18c 	ldr.w	ip, [pc, #396]	; 80020a8 <_nx_ip_create+0x1b4>
 8001f1e:	683f      	ldr	r7, [r7, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8001f20:	ea45 050e 	orr.w	r5, r5, lr
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8001f24:	f89c c000 	ldrb.w	ip, [ip]
 8001f28:	433d      	orrs	r5, r7
UINT       old_threshold = 0;
 8001f2a:	9607      	str	r6, [sp, #28]
{
 8001f2c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8001f2e:	ea55 050c 	orrs.w	r5, r5, ip
 8001f32:	f000 8095 	beq.w	8002060 <_nx_ip_create+0x16c>
 8001f36:	4604      	mov	r4, r0
 8001f38:	461d      	mov	r5, r3
 8001f3a:	4691      	mov	r9, r2
 8001f3c:	4688      	mov	r8, r1
        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8001f3e:	f44f 626f 	mov.w	r2, #3824	; 0xef0
 8001f42:	4631      	mov	r1, r6
 8001f44:	f00c fe55 	bl	800ebf2 <memset>

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8001f48:	ea09 0305 	and.w	r3, r9, r5
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8001f4c:	f8c4 5c60 	str.w	r5, [r4, #3168]	; 0xc60

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8001f50:	f04f 4efe 	mov.w	lr, #2130706432	; 0x7f000000

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8001f54:	9d12      	ldr	r5, [sp, #72]	; 0x48
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8001f56:	f64f 7cff 	movw	ip, #65535	; 0xffff
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8001f5a:	2101      	movs	r1, #1
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8001f5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8001f5e:	f8c4 5638 	str.w	r5, [r4, #1592]	; 0x638
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8001f62:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8001f66:	4d47      	ldr	r5, [pc, #284]	; (8002084 <_nx_ip_create+0x190>)
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8001f68:	f8c4 3c64 	str.w	r3, [r4, #3172]	; 0xc64
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 8001f6c:	f640 73ff 	movw	r3, #4095	; 0xfff
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8001f70:	f8c4 5cac 	str.w	r5, [r4, #3244]	; 0xcac
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8001f74:	f8df b134 	ldr.w	fp, [pc, #308]	; 80020ac <_nx_ip_create+0x1b8>
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8001f78:	4d43      	ldr	r5, [pc, #268]	; (8002088 <_nx_ip_create+0x194>)
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8001f7a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80020b0 <_nx_ip_create+0x1bc>
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8001f7e:	f8c4 ecb4 	str.w	lr, [r4, #3252]	; 0xcb4
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8001f82:	f8c4 ccbc 	str.w	ip, [r4, #3260]	; 0xcbc
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 8001f86:	f8c4 3cd8 	str.w	r3, [r4, #3288]	; 0xcd8
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8001f8a:	f8c4 2c84 	str.w	r2, [r4, #3204]	; 0xc84
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8001f8e:	4632      	mov	r2, r6
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8001f90:	f884 1c4c 	strb.w	r1, [r4, #3148]	; 0xc4c
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8001f94:	f8c4 1634 	str.w	r1, [r4, #1588]	; 0x634
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8001f98:	4641      	mov	r1, r8
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8001f9a:	f8c4 0cb0 	str.w	r0, [r4, #3248]	; 0xcb0
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8001f9e:	f204 603c 	addw	r0, r4, #1596	; 0x63c
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8001fa2:	f8c4 5c9c 	str.w	r5, [r4, #3228]	; 0xc9c
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 8001fa6:	f8c4 9c5c 	str.w	r9, [r4, #3164]	; 0xc5c
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 8001faa:	f8c4 6c8c 	str.w	r6, [r4, #3212]	; 0xc8c
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 8001fae:	f884 6c4f 	strb.w	r6, [r4, #3151]	; 0xc4f
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8001fb2:	f8c4 6cd4 	str.w	r6, [r4, #3284]	; 0xcd4
    ip_ptr -> nx_ip_name =  name;
 8001fb6:	f8c4 8004 	str.w	r8, [r4, #4]
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8001fba:	f8c4 bc48 	str.w	fp, [r4, #3144]	; 0xc48
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8001fbe:	f8c4 ac98 	str.w	sl, [r4, #3224]	; 0xc98
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8001fc2:	f00b f9b5 	bl	800d330 <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8001fc6:	4641      	mov	r1, r8
 8001fc8:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 8001fcc:	f00a ffb6 	bl	800cf3c <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8001fd0:	f00b fc68 	bl	800d8a4 <_tx_thread_identify>

    /* Disable preemption temporarily.  */
    if (current_thread)
 8001fd4:	4605      	mov	r5, r0
 8001fd6:	b118      	cbz	r0, 8001fe0 <_nx_ip_create+0xec>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8001fd8:	aa07      	add	r2, sp, #28
 8001fda:	4639      	mov	r1, r7
 8001fdc:	f00b fca4 	bl	800d928 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8001fe0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001fe2:	2601      	movs	r6, #1
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	9201      	str	r2, [sp, #4]
 8001fea:	f504 60d3 	add.w	r0, r4, #1688	; 0x698
 8001fee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001ff0:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8001ff4:	9200      	str	r2, [sp, #0]
 8001ff6:	4a25      	ldr	r2, [pc, #148]	; (800208c <_nx_ip_create+0x198>)
 8001ff8:	e9cd 6604 	strd	r6, r6, [sp, #16]
 8001ffc:	f00b fbbc 	bl	800d778 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8002000:	2264      	movs	r2, #100	; 0x64
 8002002:	4623      	mov	r3, r4
 8002004:	9602      	str	r6, [sp, #8]
 8002006:	9201      	str	r2, [sp, #4]
 8002008:	4641      	mov	r1, r8
 800200a:	9200      	str	r2, [sp, #0]
 800200c:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
 8002010:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <_nx_ip_create+0x19c>)
 8002012:	f00b fed1 	bl	800ddb8 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <_nx_ip_create+0x1a0>)
 8002018:	f8c4 3ce8 	str.w	r3, [r4, #3304]	; 0xce8
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800201c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002020:	b672      	cpsid	i
    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8002022:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <_nx_ip_create+0x1a4>)
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8002024:	481d      	ldr	r0, [pc, #116]	; (800209c <_nx_ip_create+0x1a8>)
    if (_nx_ip_created_ptr)
 8002026:	6813      	ldr	r3, [r2, #0]
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8002028:	6020      	str	r0, [r4, #0]
    if (_nx_ip_created_ptr)
 800202a:	b1eb      	cbz	r3, 8002068 <_nx_ip_create+0x174>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 800202c:	f8d3 2c3c 	ldr.w	r2, [r3, #3132]	; 0xc3c

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8002030:	f8c3 4c3c 	str.w	r4, [r3, #3132]	; 0xc3c
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8002034:	f8c2 4c38 	str.w	r4, [r2, #3128]	; 0xc38

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8002038:	f8c4 2c3c 	str.w	r2, [r4, #3132]	; 0xc3c
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 800203c:	f8c4 3c38 	str.w	r3, [r4, #3128]	; 0xc38
        ip_ptr -> nx_ip_created_next =      ip_ptr;
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <_nx_ip_create+0x1ac>)
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002048:	f381 8810 	msr	PRIMASK, r1
    /* Restore preemption.  */
    if (current_thread)
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800204c:	4628      	mov	r0, r5
    if (current_thread)
 800204e:	b125      	cbz	r5, 800205a <_nx_ip_create+0x166>
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8002050:	aa07      	add	r2, sp, #28
 8002052:	9907      	ldr	r1, [sp, #28]
 8002054:	f00b fc68 	bl	800d928 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8002058:	2000      	movs	r0, #0
}
 800205a:	b009      	add	sp, #36	; 0x24
 800205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(NX_NOT_IMPLEMENTED);
 8002060:	204a      	movs	r0, #74	; 0x4a
}
 8002062:	b009      	add	sp, #36	; 0x24
 8002064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_ip_created_ptr =                ip_ptr;
 8002068:	6014      	str	r4, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 800206a:	f8c4 4c38 	str.w	r4, [r4, #3128]	; 0xc38
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 800206e:	f8c4 4c3c 	str.w	r4, [r4, #3132]	; 0xc3c
 8002072:	e7e5      	b.n	8002040 <_nx_ip_create+0x14c>
 8002074:	200190dc 	.word	0x200190dc
 8002078:	200190ec 	.word	0x200190ec
 800207c:	200190e4 	.word	0x200190e4
 8002080:	200190e8 	.word	0x200190e8
 8002084:	7f000001 	.word	0x7f000001
 8002088:	01010001 	.word	0x01010001
 800208c:	08002375 	.word	0x08002375
 8002090:	0800218d 	.word	0x0800218d
 8002094:	08002659 	.word	0x08002659
 8002098:	200190d0 	.word	0x200190d0
 800209c:	49502020 	.word	0x49502020
 80020a0:	200190cc 	.word	0x200190cc
 80020a4:	200190e0 	.word	0x200190e0
 80020a8:	20000008 	.word	0x20000008
 80020ac:	0800fc34 	.word	0x0800fc34
 80020b0:	0800fc38 	.word	0x0800fc38

080020b4 <_nx_ip_driver_deferred_processing>:
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 80020b4:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020be:	f00a bfd7 	b.w	800d070 <_tx_event_flags_set>
 80020c2:	bf00      	nop

080020c4 <_nx_ip_initialize>:
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	4902      	ldr	r1, [pc, #8]	; (80020d0 <_nx_ip_initialize+0xc>)
    _nx_ip_created_count =   0;
 80020c8:	4a02      	ldr	r2, [pc, #8]	; (80020d4 <_nx_ip_initialize+0x10>)
    _nx_ip_created_ptr =     NX_NULL;
 80020ca:	600b      	str	r3, [r1, #0]
    _nx_ip_created_count =   0;
 80020cc:	6013      	str	r3, [r2, #0]
}
 80020ce:	4770      	bx	lr
 80020d0:	200190d0 	.word	0x200190d0
 80020d4:	200190cc 	.word	0x200190cc

080020d8 <_nx_ip_packet_deferred_receive>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80020d8:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80020dc:	b672      	cpsid	i

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 80020de:	f8d0 2674 	ldr.w	r2, [r0, #1652]	; 0x674
 80020e2:	b162      	cbz	r2, 80020fe <_nx_ip_packet_deferred_receive+0x26>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80020e4:	2200      	movs	r2, #0
{
 80020e6:	b410      	push	{r4}
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 80020e8:	f8d0 4678 	ldr.w	r4, [r0, #1656]	; 0x678
 80020ec:	61e1      	str	r1, [r4, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80020ee:	61ca      	str	r2, [r1, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 80020f0:	f8c0 1678 	str.w	r1, [r0, #1656]	; 0x678
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80020f4:	f383 8810 	msr	PRIMASK, r3
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
    }
}
 80020f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020fc:	4770      	bx	lr
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 80020fe:	f8c0 1674 	str.w	r1, [r0, #1652]	; 0x674
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8002102:	f8c0 1678 	str.w	r1, [r0, #1656]	; 0x678
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 8002106:	61ca      	str	r2, [r1, #28]
 8002108:	f383 8810 	msr	PRIMASK, r3
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 800210c:	2108      	movs	r1, #8
 800210e:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 8002112:	f00a bfad 	b.w	800d070 <_tx_event_flags_set>
 8002116:	bf00      	nop

08002118 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800211a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
{
 800211c:	b085      	sub	sp, #20
 800211e:	460c      	mov	r4, r1
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8002120:	b31d      	cbz	r5, 800216a <_nx_ip_packet_send+0x52>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, destination_ip, type_of_service, time_to_live, protocol, fragment);
 8002122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002124:	4606      	mov	r6, r0
 8002126:	4617      	mov	r7, r2
 8002128:	9502      	str	r5, [sp, #8]
 800212a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800212c:	9501      	str	r5, [sp, #4]
 800212e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002130:	9500      	str	r5, [sp, #0]
 8002132:	f004 fd0d 	bl	8006b50 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 8002136:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002138:	b975      	cbnz	r5, 8002158 <_nx_ip_packet_send+0x40>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 800213a:	f8d6 3630 	ldr.w	r3, [r6, #1584]	; 0x630
 800213e:	b1fb      	cbz	r3, 8002180 <_nx_ip_packet_send+0x68>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8002140:	4622      	mov	r2, r4

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 8002142:	ab0d      	add	r3, sp, #52	; 0x34
 8002144:	4639      	mov	r1, r7
 8002146:	4630      	mov	r0, r6
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8002148:	f842 5f34 	str.w	r5, [r2, #52]!
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 800214c:	f000 f824 	bl	8002198 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 8002150:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002152:	b1ab      	cbz	r3, 8002180 <_nx_ip_packet_send+0x68>
 8002154:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002156:	b19d      	cbz	r5, 8002180 <_nx_ip_packet_send+0x68>
            return;
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 8002158:	463a      	mov	r2, r7
 800215a:	4621      	mov	r1, r4
 800215c:	4630      	mov	r0, r6
 800215e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002160:	9500      	str	r5, [sp, #0]
 8002162:	f004 fb33 	bl	80067cc <_nx_ip_driver_packet_send>
}
 8002166:	b005      	add	sp, #20
 8002168:	bdf0      	pop	{r4, r5, r6, r7, pc}
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 800216a:	688a      	ldr	r2, [r1, #8]
        _nx_packet_transmit_release(packet_ptr);
 800216c:	4608      	mov	r0, r1
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 800216e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8002170:	3a14      	subs	r2, #20
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8002172:	3314      	adds	r3, #20
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8002174:	608a      	str	r2, [r1, #8]
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8002176:	624b      	str	r3, [r1, #36]	; 0x24
        _nx_packet_transmit_release(packet_ptr);
 8002178:	f000 fe4e 	bl	8002e18 <_nx_packet_transmit_release>
}
 800217c:	b005      	add	sp, #20
 800217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _nx_packet_transmit_release(packet_ptr);
 8002180:	4620      	mov	r0, r4
 8002182:	f000 fe49 	bl	8002e18 <_nx_packet_transmit_release>
}
 8002186:	b005      	add	sp, #20
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218a:	bf00      	nop

0800218c <_nx_ip_periodic_timer_entry>:

    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 800218c:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 8002190:	2200      	movs	r2, #0
 8002192:	2101      	movs	r1, #1
 8002194:	f00a bf6c 	b.w	800d070 <_tx_event_flags_set>

08002198 <_nx_ip_route_find>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 8002198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Initialize the next hop address. */
    *next_hop_address = 0;

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800219c:	f001 4470 	and.w	r4, r1, #4026531840	; 0xf0000000
    *next_hop_address = 0;
 80021a0:	2500      	movs	r5, #0
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 80021a2:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    *next_hop_address = 0;
 80021a6:	601d      	str	r5, [r3, #0]
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 80021a8:	d031      	beq.n	800220e <_nx_ip_route_find+0x76>
 80021aa:	1c4c      	adds	r4, r1, #1
 80021ac:	d02f      	beq.n	800220e <_nx_ip_route_find+0x76>
 80021ae:	f890 5c4c 	ldrb.w	r5, [r0, #3148]	; 0xc4c
 80021b2:	f600 4748 	addw	r7, r0, #3144	; 0xc48
 80021b6:	b11d      	cbz	r5, 80021c0 <_nx_ip_route_find+0x28>

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 80021b8:	f890 4c4e 	ldrb.w	r4, [r0, #3150]	; 0xc4e
 80021bc:	2c00      	cmp	r4, #0
 80021be:	d163      	bne.n	8002288 <_nx_ip_route_find+0xf0>

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 80021c0:	f890 cc9c 	ldrb.w	ip, [r0, #3228]	; 0xc9c
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80021c4:	f600 4e98 	addw	lr, r0, #3224	; 0xc98
        if ((interface_ptr -> nx_interface_valid) &&
 80021c8:	f1bc 0f00 	cmp.w	ip, #0
 80021cc:	d003      	beq.n	80021d6 <_nx_ip_route_find+0x3e>
 80021ce:	f890 4c9e 	ldrb.w	r4, [r0, #3230]	; 0xc9e
 80021d2:	2c00      	cmp	r4, #0
 80021d4:	d169      	bne.n	80022aa <_nx_ip_route_find+0x112>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 80021d6:	4c5f      	ldr	r4, [pc, #380]	; (8002354 <_nx_ip_route_find+0x1bc>)
 80021d8:	4e5f      	ldr	r6, [pc, #380]	; (8002358 <_nx_ip_route_find+0x1c0>)
 80021da:	400c      	ands	r4, r1
 80021dc:	42b4      	cmp	r4, r6
 80021de:	d077      	beq.n	80022d0 <_nx_ip_route_find+0x138>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 80021e0:	6886      	ldr	r6, [r0, #8]
 80021e2:	b1f6      	cbz	r6, 8002222 <_nx_ip_route_find+0x8a>
        (ip_ptr -> nx_ip_gateway_interface) &&
 80021e4:	68c4      	ldr	r4, [r0, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 80021e6:	b1e4      	cbz	r4, 8002222 <_nx_ip_route_find+0x8a>
        (ip_ptr -> nx_ip_gateway_interface) &&
 80021e8:	f894 8006 	ldrb.w	r8, [r4, #6]
 80021ec:	f1b8 0f00 	cmp.w	r8, #0
 80021f0:	d017      	beq.n	8002222 <_nx_ip_route_find+0x8a>

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 80021f2:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
            (ip_ptr -> nx_ip_gateway_address &
 80021f6:	4031      	ands	r1, r6
        if (interface_ptr -> nx_interface_ip_network !=
 80021f8:	4288      	cmp	r0, r1
 80021fa:	d142      	bne.n	8002282 <_nx_ip_route_find+0xea>
        {
            return(NX_IP_ADDRESS_ERROR);
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 80021fc:	6811      	ldr	r1, [r2, #0]
 80021fe:	2900      	cmp	r1, #0
 8002200:	f000 80a0 	beq.w	8002344 <_nx_ip_route_find+0x1ac>
        {
            *ip_interface_ptr = interface_ptr;
        }
        else if (*ip_interface_ptr != interface_ptr)
 8002204:	428c      	cmp	r4, r1
 8002206:	d13c      	bne.n	8002282 <_nx_ip_route_find+0xea>
        {
            return(NX_IP_ADDRESS_ERROR);
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 8002208:	601e      	str	r6, [r3, #0]

        return(NX_SUCCESS);
 800220a:	2000      	movs	r0, #0
 800220c:	e007      	b.n	800221e <_nx_ip_route_find+0x86>
        if (*ip_interface_ptr == NX_NULL)
 800220e:	6814      	ldr	r4, [r2, #0]
        *next_hop_address = destination_address;
 8002210:	6019      	str	r1, [r3, #0]
        if (*ip_interface_ptr == NX_NULL)
 8002212:	2c00      	cmp	r4, #0
 8002214:	d053      	beq.n	80022be <_nx_ip_route_find+0x126>
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 8002216:	79a3      	ldrb	r3, [r4, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d032      	beq.n	8002282 <_nx_ip_route_find+0xea>
            return(NX_SUCCESS);
 800221c:	2000      	movs	r0, #0
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
}
 800221e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*ip_interface_ptr)
 8002222:	6814      	ldr	r4, [r2, #0]
 8002224:	b1f4      	cbz	r4, 8002264 <_nx_ip_route_find+0xcc>
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8002226:	7922      	ldrb	r2, [r4, #4]
 8002228:	b35a      	cbz	r2, 8002282 <_nx_ip_route_find+0xea>
 800222a:	79a2      	ldrb	r2, [r4, #6]
 800222c:	b34a      	cbz	r2, 8002282 <_nx_ip_route_find+0xea>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800222e:	6964      	ldr	r4, [r4, #20]
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <_nx_ip_route_find+0x1bc>)
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8002232:	4849      	ldr	r0, [pc, #292]	; (8002358 <_nx_ip_route_find+0x1c0>)
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8002234:	4022      	ands	r2, r4
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8002236:	4282      	cmp	r2, r0
 8002238:	d123      	bne.n	8002282 <_nx_ip_route_find+0xea>
            *next_hop_address = destination_address;
 800223a:	6019      	str	r1, [r3, #0]
            return(NX_SUCCESS);
 800223c:	2000      	movs	r0, #0
}
 800223e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8002242:	b11d      	cbz	r5, 800224c <_nx_ip_route_find+0xb4>
 8002244:	f890 4c4e 	ldrb.w	r4, [r0, #3150]	; 0xc4e
 8002248:	2c00      	cmp	r4, #0
 800224a:	d16c      	bne.n	8002326 <_nx_ip_route_find+0x18e>
 800224c:	f1bc 0f00 	cmp.w	ip, #0
 8002250:	d003      	beq.n	800225a <_nx_ip_route_find+0xc2>
 8002252:	f890 4c9e 	ldrb.w	r4, [r0, #3230]	; 0xc9e
 8002256:	2c00      	cmp	r4, #0
 8002258:	d178      	bne.n	800234c <_nx_ip_route_find+0x1b4>
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800225a:	6886      	ldr	r6, [r0, #8]
 800225c:	b116      	cbz	r6, 8002264 <_nx_ip_route_find+0xcc>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800225e:	68c4      	ldr	r4, [r0, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8002260:	2c00      	cmp	r4, #0
 8002262:	d1c1      	bne.n	80021e8 <_nx_ip_route_find+0x50>
            if ((interface_ptr -> nx_interface_valid) &&
 8002264:	2d00      	cmp	r5, #0
 8002266:	d14d      	bne.n	8002304 <_nx_ip_route_find+0x16c>
 8002268:	f1bc 0f00 	cmp.w	ip, #0
 800226c:	d009      	beq.n	8002282 <_nx_ip_route_find+0xea>
 800226e:	f890 4c9e 	ldrb.w	r4, [r0, #3230]	; 0xc9e
 8002272:	b134      	cbz	r4, 8002282 <_nx_ip_route_find+0xea>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8002274:	f8d0 5cac 	ldr.w	r5, [r0, #3244]	; 0xcac
 8002278:	4836      	ldr	r0, [pc, #216]	; (8002354 <_nx_ip_route_find+0x1bc>)
                (interface_ptr -> nx_interface_link_up) &&
 800227a:	4c37      	ldr	r4, [pc, #220]	; (8002358 <_nx_ip_route_find+0x1c0>)
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800227c:	4028      	ands	r0, r5
                (interface_ptr -> nx_interface_link_up) &&
 800227e:	42a0      	cmp	r0, r4
 8002280:	d04c      	beq.n	800231c <_nx_ip_route_find+0x184>
        return(NX_IP_ADDRESS_ERROR);
 8002282:	2021      	movs	r0, #33	; 0x21
}
 8002284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8002288:	f8d0 4c5c 	ldr.w	r4, [r0, #3164]	; 0xc5c
            (interface_ptr -> nx_interface_link_up) &&
 800228c:	428c      	cmp	r4, r1
 800228e:	d051      	beq.n	8002334 <_nx_ip_route_find+0x19c>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 8002290:	f8d0 4c60 	ldr.w	r4, [r0, #3168]	; 0xc60
            (interface_ptr -> nx_interface_link_up) &&
 8002294:	f8d0 6c64 	ldr.w	r6, [r0, #3172]	; 0xc64
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 8002298:	400c      	ands	r4, r1
            (interface_ptr -> nx_interface_link_up) &&
 800229a:	42b4      	cmp	r4, r6
 800229c:	d190      	bne.n	80021c0 <_nx_ip_route_find+0x28>
            if (*ip_interface_ptr == NX_NULL)
 800229e:	6814      	ldr	r4, [r2, #0]
 80022a0:	2c00      	cmp	r4, #0
 80022a2:	d051      	beq.n	8002348 <_nx_ip_route_find+0x1b0>
            else if (*ip_interface_ptr != interface_ptr)
 80022a4:	42a7      	cmp	r7, r4
 80022a6:	d18b      	bne.n	80021c0 <_nx_ip_route_find+0x28>
 80022a8:	e7c7      	b.n	800223a <_nx_ip_route_find+0xa2>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80022aa:	f8d0 4cb0 	ldr.w	r4, [r0, #3248]	; 0xcb0
            (interface_ptr -> nx_interface_link_up) &&
 80022ae:	f8d0 6cb4 	ldr.w	r6, [r0, #3252]	; 0xcb4
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80022b2:	400c      	ands	r4, r1
            (interface_ptr -> nx_interface_link_up) &&
 80022b4:	42b4      	cmp	r4, r6
 80022b6:	d18e      	bne.n	80021d6 <_nx_ip_route_find+0x3e>
                *ip_interface_ptr = interface_ptr;
 80022b8:	f8c2 e000 	str.w	lr, [r2]
 80022bc:	e7bd      	b.n	800223a <_nx_ip_route_find+0xa2>
                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 80022be:	f890 3c4e 	ldrb.w	r3, [r0, #3150]	; 0xc4e
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0dd      	beq.n	8002282 <_nx_ip_route_find+0xea>
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80022c6:	f600 4348 	addw	r3, r0, #3144	; 0xc48
                    return(NX_SUCCESS);
 80022ca:	4620      	mov	r0, r4
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80022cc:	6013      	str	r3, [r2, #0]
                    return(NX_SUCCESS);
 80022ce:	e7a6      	b.n	800221e <_nx_ip_route_find+0x86>
        if (*ip_interface_ptr)
 80022d0:	f8d2 8000 	ldr.w	r8, [r2]
 80022d4:	4644      	mov	r4, r8
 80022d6:	f1b8 0f00 	cmp.w	r8, #0
 80022da:	d0b2      	beq.n	8002242 <_nx_ip_route_find+0xaa>
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80022dc:	f898 6004 	ldrb.w	r6, [r8, #4]
 80022e0:	b946      	cbnz	r6, 80022f4 <_nx_ip_route_find+0x15c>
    if ((ip_ptr -> nx_ip_gateway_address) &&
 80022e2:	6886      	ldr	r6, [r0, #8]
 80022e4:	2e00      	cmp	r6, #0
 80022e6:	d0cc      	beq.n	8002282 <_nx_ip_route_find+0xea>
        (ip_ptr -> nx_ip_gateway_interface) &&
 80022e8:	68c4      	ldr	r4, [r0, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 80022ea:	2c00      	cmp	r4, #0
 80022ec:	f47f af7c 	bne.w	80021e8 <_nx_ip_route_find+0x50>
    if (*ip_interface_ptr)
 80022f0:	4644      	mov	r4, r8
 80022f2:	e798      	b.n	8002226 <_nx_ip_route_find+0x8e>
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80022f4:	f898 6006 	ldrb.w	r6, [r8, #6]
 80022f8:	2e00      	cmp	r6, #0
 80022fa:	d19e      	bne.n	800223a <_nx_ip_route_find+0xa2>
    if ((ip_ptr -> nx_ip_gateway_address) &&
 80022fc:	6886      	ldr	r6, [r0, #8]
 80022fe:	2e00      	cmp	r6, #0
 8002300:	d1f2      	bne.n	80022e8 <_nx_ip_route_find+0x150>
 8002302:	e792      	b.n	800222a <_nx_ip_route_find+0x92>
            if ((interface_ptr -> nx_interface_valid) &&
 8002304:	f890 4c4e 	ldrb.w	r4, [r0, #3150]	; 0xc4e
 8002308:	2c00      	cmp	r4, #0
 800230a:	d0ad      	beq.n	8002268 <_nx_ip_route_find+0xd0>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800230c:	f8d0 4c5c 	ldr.w	r4, [r0, #3164]	; 0xc5c
 8002310:	4d10      	ldr	r5, [pc, #64]	; (8002354 <_nx_ip_route_find+0x1bc>)
                (interface_ptr -> nx_interface_link_up) &&
 8002312:	4e11      	ldr	r6, [pc, #68]	; (8002358 <_nx_ip_route_find+0x1c0>)
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8002314:	4025      	ands	r5, r4
                (interface_ptr -> nx_interface_link_up) &&
 8002316:	42b5      	cmp	r5, r6
 8002318:	d1a6      	bne.n	8002268 <_nx_ip_route_find+0xd0>
 800231a:	46be      	mov	lr, r7
                *ip_interface_ptr = interface_ptr;
 800231c:	f8c2 e000 	str.w	lr, [r2]
                return(NX_SUCCESS);
 8002320:	2000      	movs	r0, #0
                *next_hop_address = destination_address;
 8002322:	6019      	str	r1, [r3, #0]
                return(NX_SUCCESS);
 8002324:	e77b      	b.n	800221e <_nx_ip_route_find+0x86>
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8002326:	f640 4448 	movw	r4, #3144	; 0xc48
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800232a:	4404      	add	r4, r0
                    return(NX_SUCCESS);
 800232c:	2000      	movs	r0, #0
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800232e:	6014      	str	r4, [r2, #0]
                    *next_hop_address = destination_address;
 8002330:	6019      	str	r1, [r3, #0]
                    return(NX_SUCCESS);
 8002332:	e774      	b.n	800221e <_nx_ip_route_find+0x86>
            ((*ip_interface_ptr == NX_NULL) ||
 8002334:	6816      	ldr	r6, [r2, #0]
 8002336:	b10e      	cbz	r6, 800233c <_nx_ip_route_find+0x1a4>
 8002338:	42b7      	cmp	r7, r6
 800233a:	d1a9      	bne.n	8002290 <_nx_ip_route_find+0xf8>
            *ip_interface_ptr = interface_ptr;
 800233c:	6017      	str	r7, [r2, #0]
            return(NX_SUCCESS);
 800233e:	2000      	movs	r0, #0
            *next_hop_address = destination_address;
 8002340:	601c      	str	r4, [r3, #0]
            return(NX_SUCCESS);
 8002342:	e76c      	b.n	800221e <_nx_ip_route_find+0x86>
            *ip_interface_ptr = interface_ptr;
 8002344:	6014      	str	r4, [r2, #0]
 8002346:	e75f      	b.n	8002208 <_nx_ip_route_find+0x70>
            if (*ip_interface_ptr == NX_NULL)
 8002348:	46be      	mov	lr, r7
 800234a:	e7b5      	b.n	80022b8 <_nx_ip_route_find+0x120>
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800234c:	f640 4498 	movw	r4, #3224	; 0xc98
 8002350:	e7eb      	b.n	800232a <_nx_ip_route_find+0x192>
 8002352:	bf00      	nop
 8002354:	ffff0000 	.word	0xffff0000
 8002358:	a9fe0000 	.word	0xa9fe0000

0800235c <_nx_ip_status_check>:
UINT _nx_ip_status_check(NX_IP* ip_ptr, ULONG needed_status, ULONG* actual_status,
		ULONG wait_option)
{
	return (_nx_ip_interface_status_check(ip_ptr, 0, needed_status, actual_status, wait_option));
}

 800235c:	b500      	push	{lr}
 800235e:	b083      	sub	sp, #12
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	460a      	mov	r2, r1
 8002366:	2100      	movs	r1, #0
 8002368:	f004 fce4 	bl	8006d34 <_nx_ip_interface_status_check>
 800236c:	b003      	add	sp, #12
 800236e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002372:	bf00      	nop

08002374 <_nx_ip_thread_entry>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 8002374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8002378:	f200 673c 	addw	r7, r0, #1596	; 0x63c
{
 800237c:	4604      	mov	r4, r0
 800237e:	b093      	sub	sp, #76	; 0x4c
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	4638      	mov	r0, r7

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 8002386:	f04f 0801 	mov.w	r8, #1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800238a:	f00b f801 	bl	800d390 <_tx_mutex_get>
    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 800238e:	f894 3c4c 	ldrb.w	r3, [r4, #3148]	; 0xc4c
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 8002392:	f8c4 8670 	str.w	r8, [r4, #1648]	; 0x670
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 8002396:	b123      	cbz	r3, 80023a2 <_nx_ip_thread_entry+0x2e>
 8002398:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
 800239c:	2b00      	cmp	r3, #0
 800239e:	f040 8112 	bne.w	80025c6 <_nx_ip_thread_entry+0x252>
 80023a2:	f604 4648 	addw	r6, r4, #3144	; 0xc48
 80023a6:	ad0a      	add	r5, sp, #40	; 0x28
 80023a8:	f10d 0818 	add.w	r8, sp, #24
 80023ac:	f504 73e8 	add.w	r3, r4, #464	; 0x1d0
 80023b0:	f504 6bec 	add.w	fp, r4, #1888	; 0x760
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 80023b4:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8002654 <_nx_ip_thread_entry+0x2e0>
 80023b8:	9303      	str	r3, [sp, #12]
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80023ba:	4638      	mov	r0, r7
 80023bc:	f00b f8d2 	bl	800d564 <_tx_mutex_put>
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	2201      	movs	r2, #1
 80023c6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4658      	mov	r0, fp
 80023ce:	ab05      	add	r3, sp, #20
 80023d0:	f00a fddc 	bl	800cf8c <_tx_event_flags_get>
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	4638      	mov	r0, r7
 80023da:	f00a ffd9 	bl	800d390 <_tx_mutex_get>
        if (ip_events & NX_IP_RECEIVE_EVENT)
 80023de:	9b05      	ldr	r3, [sp, #20]
 80023e0:	0718      	lsls	r0, r3, #28
 80023e2:	f100 80a4 	bmi.w	800252e <_nx_ip_thread_entry+0x1ba>
        if (ip_events & NX_IP_TCP_EVENT)
 80023e6:	0619      	lsls	r1, r3, #24
 80023e8:	d509      	bpl.n	80023fe <_nx_ip_thread_entry+0x8a>
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 80023ea:	f8d4 39c8 	ldr.w	r3, [r4, #2504]	; 0x9c8
 80023ee:	4620      	mov	r0, r4
 80023f0:	4798      	blx	r3
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 80023f2:	9b05      	ldr	r3, [sp, #20]
 80023f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f8:	9305      	str	r3, [sp, #20]
            if (!ip_events)
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0dd      	beq.n	80023ba <_nx_ip_thread_entry+0x46>
        if (ip_events & NX_IP_FAST_EVENT)
 80023fe:	05da      	lsls	r2, r3, #23
 8002400:	d52a      	bpl.n	8002458 <_nx_ip_thread_entry+0xe4>
            if (ip_ptr -> nx_ip_icmpv6_packet_process)
 8002402:	f8d4 388c 	ldr.w	r3, [r4, #2188]	; 0x88c
 8002406:	b1bb      	cbz	r3, 8002438 <_nx_ip_thread_entry+0xc4>
                    interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8002408:	f8d4 ac68 	ldr.w	sl, [r4, #3176]	; 0xc68
                    if (interface_ipv6_address &&
 800240c:	f1ba 0f00 	cmp.w	sl, #0
 8002410:	d012      	beq.n	8002438 <_nx_ip_thread_entry+0xc4>
 8002412:	f89a 301c 	ldrb.w	r3, [sl, #28]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d10e      	bne.n	8002438 <_nx_ip_thread_entry+0xc4>
                        _nx_icmpv6_send_ns(ip_ptr,
 800241a:	9b03      	ldr	r3, [sp, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f10a 0108 	add.w	r1, sl, #8
 8002422:	4620      	mov	r0, r4
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	4653      	mov	r3, sl
 8002428:	9200      	str	r2, [sp, #0]
 800242a:	f003 fe31 	bl	8006090 <_nx_icmpv6_send_ns>
                        interface_ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit--;
 800242e:	f89a 301c 	ldrb.w	r3, [sl, #28]
 8002432:	3b01      	subs	r3, #1
 8002434:	f88a 301c 	strb.w	r3, [sl, #28]
            if (ip_ptr -> nx_nd_cache_fast_periodic_update)
 8002438:	f8d4 3890 	ldr.w	r3, [r4, #2192]	; 0x890
 800243c:	b10b      	cbz	r3, 8002442 <_nx_ip_thread_entry+0xce>
                ip_ptr -> nx_nd_cache_fast_periodic_update(ip_ptr);
 800243e:	4620      	mov	r0, r4
 8002440:	4798      	blx	r3
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 8002442:	f8d4 39c4 	ldr.w	r3, [r4, #2500]	; 0x9c4
 8002446:	b10b      	cbz	r3, 800244c <_nx_ip_thread_entry+0xd8>
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 8002448:	4620      	mov	r0, r4
 800244a:	4798      	blx	r3
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 800244c:	9b05      	ldr	r3, [sp, #20]
 800244e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002452:	9305      	str	r3, [sp, #20]
            if (!ip_events)
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0b0      	beq.n	80023ba <_nx_ip_thread_entry+0x46>
        if (ip_events & NX_IP_PERIODIC_EVENT)
 8002458:	07d8      	lsls	r0, r3, #31
 800245a:	d530      	bpl.n	80024be <_nx_ip_thread_entry+0x14a>
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800245c:	f8d4 3c10 	ldr.w	r3, [r4, #3088]	; 0xc10
 8002460:	b10b      	cbz	r3, 8002466 <_nx_ip_thread_entry+0xf2>
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 8002462:	4620      	mov	r0, r4
 8002464:	4798      	blx	r3
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 8002466:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
 800246a:	b10b      	cbz	r3, 8002470 <_nx_ip_thread_entry+0xfc>
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800246c:	4620      	mov	r0, r4
 800246e:	4798      	blx	r3
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 8002470:	f8d4 3870 	ldr.w	r3, [r4, #2160]	; 0x870
 8002474:	b10b      	cbz	r3, 800247a <_nx_ip_thread_entry+0x106>
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 8002476:	4620      	mov	r0, r4
 8002478:	4798      	blx	r3
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800247a:	f8d4 37bc 	ldr.w	r3, [r4, #1980]	; 0x7bc
 800247e:	b10b      	cbz	r3, 8002484 <_nx_ip_thread_entry+0x110>
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 8002480:	4620      	mov	r0, r4
 8002482:	4798      	blx	r3
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 8002484:	f8d4 39c0 	ldr.w	r3, [r4, #2496]	; 0x9c0
 8002488:	b10b      	cbz	r3, 800248e <_nx_ip_thread_entry+0x11a>
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 800248a:	4620      	mov	r0, r4
 800248c:	4798      	blx	r3
            if (ip_ptr -> nx_ip_icmpv6_packet_process)
 800248e:	f8d4 388c 	ldr.w	r3, [r4, #2188]	; 0x88c
 8002492:	b113      	cbz	r3, 800249a <_nx_ip_thread_entry+0x126>
                _nx_icmpv6_perform_DAD(ip_ptr);
 8002494:	4620      	mov	r0, r4
 8002496:	f003 fc19 	bl	8005ccc <_nx_icmpv6_perform_DAD>
            if (ip_ptr -> nx_nd_cache_slow_periodic_update)
 800249a:	f8d4 3894 	ldr.w	r3, [r4, #2196]	; 0x894
 800249e:	b10b      	cbz	r3, 80024a4 <_nx_ip_thread_entry+0x130>
                ip_ptr -> nx_nd_cache_slow_periodic_update(ip_ptr);
 80024a0:	4620      	mov	r0, r4
 80024a2:	4798      	blx	r3
            _nxd_ipv6_prefix_router_timer_tick(ip_ptr);
 80024a4:	4620      	mov	r0, r4
 80024a6:	f003 f867 	bl	8005578 <_nxd_ipv6_prefix_router_timer_tick>
            _nxd_ipv6_router_solicitation_check(ip_ptr);
 80024aa:	4620      	mov	r0, r4
 80024ac:	f003 f8b2 	bl	8005614 <_nxd_ipv6_router_solicitation_check>
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 80024b0:	9b05      	ldr	r3, [sp, #20]
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	9305      	str	r3, [sp, #20]
            if (!ip_events)
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f43f af7e 	beq.w	80023ba <_nx_ip_thread_entry+0x46>
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 80024be:	06d9      	lsls	r1, r3, #27
 80024c0:	d505      	bpl.n	80024ce <_nx_ip_thread_entry+0x15a>
 80024c2:	f8d4 2c14 	ldr.w	r2, [r4, #3092]	; 0xc14
 80024c6:	b112      	cbz	r2, 80024ce <_nx_ip_thread_entry+0x15a>
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 80024c8:	4620      	mov	r0, r4
 80024ca:	4790      	blx	r2
 80024cc:	9b05      	ldr	r3, [sp, #20]
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 80024ce:	069a      	lsls	r2, r3, #26
 80024d0:	d505      	bpl.n	80024de <_nx_ip_thread_entry+0x16a>
 80024d2:	f8d4 2c2c 	ldr.w	r2, [r4, #3116]	; 0xc2c
 80024d6:	b112      	cbz	r2, 80024de <_nx_ip_thread_entry+0x16a>
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 80024d8:	4620      	mov	r0, r4
 80024da:	4790      	blx	r2
 80024dc:	9b05      	ldr	r3, [sp, #20]
        if (ip_events & NX_IP_IGMP_EVENT)
 80024de:	0658      	lsls	r0, r3, #25
 80024e0:	d504      	bpl.n	80024ec <_nx_ip_thread_entry+0x178>
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 80024e2:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 80024e6:	4620      	mov	r0, r4
 80024e8:	4798      	blx	r3
 80024ea:	9b05      	ldr	r3, [sp, #20]
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 80024ec:	0559      	lsls	r1, r3, #21
 80024ee:	d457      	bmi.n	80025a0 <_nx_ip_thread_entry+0x22c>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 80024f0:	079a      	lsls	r2, r3, #30
 80024f2:	d505      	bpl.n	8002500 <_nx_ip_thread_entry+0x18c>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 80024f4:	f8d4 27b8 	ldr.w	r2, [r4, #1976]	; 0x7b8
 80024f8:	b112      	cbz	r2, 8002500 <_nx_ip_thread_entry+0x18c>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 80024fa:	4620      	mov	r0, r4
 80024fc:	4790      	blx	r2
 80024fe:	9b05      	ldr	r3, [sp, #20]
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 8002500:	0758      	lsls	r0, r3, #29
 8002502:	d504      	bpl.n	800250e <_nx_ip_thread_entry+0x19a>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 8002504:	f8d4 3884 	ldr.w	r3, [r4, #2180]	; 0x884
 8002508:	4620      	mov	r0, r4
 800250a:	4798      	blx	r3
 800250c:	9b05      	ldr	r3, [sp, #20]
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800250e:	0519      	lsls	r1, r3, #20
 8002510:	d436      	bmi.n	8002580 <_nx_ip_thread_entry+0x20c>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 8002512:	04da      	lsls	r2, r3, #19
 8002514:	d504      	bpl.n	8002520 <_nx_ip_thread_entry+0x1ac>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 8002516:	f8d4 3c44 	ldr.w	r3, [r4, #3140]	; 0xc44
 800251a:	4620      	mov	r0, r4
 800251c:	4798      	blx	r3
 800251e:	9b05      	ldr	r3, [sp, #20]
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 8002520:	045b      	lsls	r3, r3, #17
 8002522:	f57f af4a 	bpl.w	80023ba <_nx_ip_thread_entry+0x46>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 8002526:	4620      	mov	r0, r4
 8002528:	f004 f808 	bl	800653c <_nx_ip_deferred_link_status_process>
 800252c:	e745      	b.n	80023ba <_nx_ip_thread_entry+0x46>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800252e:	f8d4 2674 	ldr.w	r2, [r4, #1652]	; 0x674
 8002532:	b942      	cbnz	r2, 8002546 <_nx_ip_thread_entry+0x1d2>
 8002534:	e01d      	b.n	8002572 <_nx_ip_thread_entry+0x1fe>
 8002536:	f382 8810 	msr	PRIMASK, r2
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 800253a:	4620      	mov	r0, r4
 800253c:	f004 fe40 	bl	80071c0 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8002540:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 8002544:	b1a3      	cbz	r3, 8002570 <_nx_ip_thread_entry+0x1fc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002546:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800254a:	b672      	cpsid	i
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 800254c:	f8d4 1674 	ldr.w	r1, [r4, #1652]	; 0x674
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8002550:	69cb      	ldr	r3, [r1, #28]
 8002552:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ed      	bne.n	8002536 <_nx_ip_thread_entry+0x1c2>
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800255a:	f8c4 3678 	str.w	r3, [r4, #1656]	; 0x678
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800255e:	f382 8810 	msr	PRIMASK, r2
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 8002562:	4620      	mov	r0, r4
 8002564:	f004 fe2c 	bl	80071c0 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8002568:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ea      	bne.n	8002546 <_nx_ip_thread_entry+0x1d2>
 8002570:	9b05      	ldr	r3, [sp, #20]
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 8002572:	f023 0308 	bic.w	r3, r3, #8
 8002576:	9305      	str	r3, [sp, #20]
            if (!ip_events)
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f af34 	bne.w	80023e6 <_nx_ip_thread_entry+0x72>
 800257e:	e71c      	b.n	80023ba <_nx_ip_thread_entry+0x46>
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 8002580:	f894 2c4c 	ldrb.w	r2, [r4, #3148]	; 0xc4c
 8002584:	2a00      	cmp	r2, #0
 8002586:	d0c4      	beq.n	8002512 <_nx_ip_thread_entry+0x19e>
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 8002588:	2312      	movs	r3, #18
                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800258a:	4628      	mov	r0, r5
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800258c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 8002590:	930a      	str	r3, [sp, #40]	; 0x28
                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 8002592:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 8002596:	e9cd 4610 	strd	r4, r6, [sp, #64]	; 0x40
                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800259a:	4798      	blx	r3
 800259c:	9b05      	ldr	r3, [sp, #20]
 800259e:	e7b8      	b.n	8002512 <_nx_ip_thread_entry+0x19e>
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 80025a0:	f894 2c4c 	ldrb.w	r2, [r4, #3148]	; 0xc4c
 80025a4:	2a00      	cmp	r2, #0
 80025a6:	d0a3      	beq.n	80024f0 <_nx_ip_thread_entry+0x17c>
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 80025a8:	2208      	movs	r2, #8
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 80025aa:	f44f 7380 	mov.w	r3, #256	; 0x100
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 80025ae:	9410      	str	r4, [sp, #64]	; 0x40
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025b0:	4628      	mov	r0, r5
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 80025b2:	930c      	str	r3, [sp, #48]	; 0x30
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 80025b4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025b8:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 80025bc:	9611      	str	r6, [sp, #68]	; 0x44
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 80025be:	920a      	str	r2, [sp, #40]	; 0x28
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025c0:	4798      	blx	r3
 80025c2:	9b05      	ldr	r3, [sp, #20]
 80025c4:	e794      	b.n	80024f0 <_nx_ip_thread_entry+0x17c>
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 80025c6:	2100      	movs	r1, #0
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 80025c8:	2213      	movs	r2, #19
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025ca:	ad0a      	add	r5, sp, #40	; 0x28
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 80025cc:	f604 4648 	addw	r6, r4, #3144	; 0xc48
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 80025d0:	f8c4 1c88 	str.w	r1, [r4, #3208]	; 0xc88
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 80025d4:	920a      	str	r2, [sp, #40]	; 0x28
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025d6:	4628      	mov	r0, r5
            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 80025d8:	f884 8c4e 	strb.w	r8, [r4, #3150]	; 0xc4e
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 80025dc:	9410      	str	r4, [sp, #64]	; 0x40
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 80025de:	9611      	str	r6, [sp, #68]	; 0x44
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025e0:	4798      	blx	r3
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 80025e2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025e6:	4628      	mov	r0, r5
 80025e8:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 80025ec:	9410      	str	r4, [sp, #64]	; 0x40
 80025ee:	f10d 0818 	add.w	r8, sp, #24
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025f2:	4798      	blx	r3
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 80025f4:	2302      	movs	r3, #2
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 80025f6:	9410      	str	r4, [sp, #64]	; 0x40
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025f8:	4628      	mov	r0, r5
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 80025fa:	930a      	str	r3, [sp, #40]	; 0x28
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80025fc:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
 8002600:	4798      	blx	r3
            interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8002602:	f8d4 9c68 	ldr.w	r9, [r4, #3176]	; 0xc68
            while (interface_ipv6_address)
 8002606:	f1b9 0f00 	cmp.w	r9, #0
 800260a:	d00e      	beq.n	800262a <_nx_ip_thread_entry+0x2b6>
                SET_SOLICITED_NODE_MULTICAST_ADDRESS(multicast_address, interface_ipv6_address -> nxd_ipv6_address);
 800260c:	f109 0108 	add.w	r1, r9, #8
 8002610:	4640      	mov	r0, r8
 8002612:	f000 f9df 	bl	80029d4 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
                _nx_ipv6_multicast_join(ip_ptr, multicast_address, &ip_ptr -> nx_ip_interface[i]);
 8002616:	4632      	mov	r2, r6
 8002618:	4641      	mov	r1, r8
 800261a:	4620      	mov	r0, r4
 800261c:	f000 f96a 	bl	80028f4 <_nx_ipv6_multicast_join>
                interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 8002620:	f8d9 9018 	ldr.w	r9, [r9, #24]
            while (interface_ipv6_address)
 8002624:	f1b9 0f00 	cmp.w	r9, #0
 8002628:	d1f0      	bne.n	800260c <_nx_ip_thread_entry+0x298>
            if (ip_ptr -> nx_ipv6_packet_receive)
 800262a:	f8d4 3edc 	ldr.w	r3, [r4, #3804]	; 0xedc
 800262e:	2b00      	cmp	r3, #0
 8002630:	f43f aebc 	beq.w	80023ac <_nx_ip_thread_entry+0x38>
                address[0] = 0xFF020000;
 8002634:	4906      	ldr	r1, [pc, #24]	; (8002650 <_nx_ip_thread_entry+0x2dc>)
                address[1] = 0;
 8002636:	2300      	movs	r3, #0
                address[3] = 1;
 8002638:	f04f 0c01 	mov.w	ip, #1
                _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 800263c:	4632      	mov	r2, r6
                address[0] = 0xFF020000;
 800263e:	9106      	str	r1, [sp, #24]
                _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 8002640:	4620      	mov	r0, r4
 8002642:	4641      	mov	r1, r8
                address[1] = 0;
 8002644:	9307      	str	r3, [sp, #28]
                address[3] = 1;
 8002646:	e9cd 3c08 	strd	r3, ip, [sp, #32]
                _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 800264a:	f000 f953 	bl	80028f4 <_nx_ipv6_multicast_join>
 800264e:	e6ad      	b.n	80023ac <_nx_ip_thread_entry+0x38>
 8002650:	ff020000 	.word	0xff020000
 8002654:	5e000001 	.word	0x5e000001

08002658 <_nx_ipv4_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8002658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800265c:	688d      	ldr	r5, [r1, #8]
{
 800265e:	b082      	sub	sp, #8
    pkt_length = val & NX_LOWER_16_MASK;

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 8002660:	6a4a      	ldr	r2, [r1, #36]	; 0x24
{
 8002662:	460c      	mov	r4, r1
    val = ip_header_ptr -> nx_ip_header_word_0;
 8002664:	682b      	ldr	r3, [r5, #0]
{
 8002666:	4607      	mov	r7, r0
    NX_CHANGE_ULONG_ENDIAN(val);
 8002668:	ea83 4633 	eor.w	r6, r3, r3, ror #16
 800266c:	0a36      	lsrs	r6, r6, #8
 800266e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8002672:	ea86 2633 	eor.w	r6, r6, r3, ror #8
    pkt_length = val & NX_LOWER_16_MASK;
 8002676:	b2b3      	uxth	r3, r6
    if (packet_ptr -> nx_packet_length != pkt_length)
 8002678:	429a      	cmp	r2, r3
 800267a:	d02f      	beq.n	80026dc <_nx_ipv4_packet_receive+0x84>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800267c:	f0c0 80ab 	bcc.w	80027d6 <_nx_ipv4_packet_receive+0x17e>

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 8002680:	ebb2 0903 	subs.w	r9, r2, r3
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 8002684:	624b      	str	r3, [r1, #36]	; 0x24
        while (delta)
 8002686:	d029      	beq.n	80026dc <_nx_ipv4_packet_receive+0x84>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 8002688:	6988      	ldr	r0, [r1, #24]
 800268a:	2800      	cmp	r0, #0
 800268c:	f000 80eb 	beq.w	8002866 <_nx_ipv4_packet_receive+0x20e>
            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 8002690:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	4599      	cmp	r9, r3
 8002698:	d31d      	bcc.n	80026d6 <_nx_ipv4_packet_receive+0x7e>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 800269a:	f04f 0800 	mov.w	r8, #0
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800269e:	eba9 0903 	sub.w	r9, r9, r3
                while (before_last_packet -> nx_packet_next != last_packet)
 80026a2:	4622      	mov	r2, r4
 80026a4:	e000      	b.n	80026a8 <_nx_ipv4_packet_receive+0x50>
 80026a6:	461a      	mov	r2, r3
 80026a8:	6853      	ldr	r3, [r2, #4]
 80026aa:	4283      	cmp	r3, r0
 80026ac:	d1fb      	bne.n	80026a6 <_nx_ipv4_packet_receive+0x4e>
                before_last_packet -> nx_packet_next =  NX_NULL;
 80026ae:	f8c2 8004 	str.w	r8, [r2, #4]
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 80026b2:	42a2      	cmp	r2, r4
 80026b4:	bf08      	it	eq
 80026b6:	2200      	moveq	r2, #0
 80026b8:	61a2      	str	r2, [r4, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 80026ba:	f000 fb47 	bl	8002d4c <_nx_packet_release>
        while (delta)
 80026be:	f1b9 0f00 	cmp.w	r9, #0
 80026c2:	d00b      	beq.n	80026dc <_nx_ipv4_packet_receive+0x84>
            if (packet_ptr -> nx_packet_last == NX_NULL)
 80026c4:	69a0      	ldr	r0, [r4, #24]
 80026c6:	2800      	cmp	r0, #0
 80026c8:	f000 80cd 	beq.w	8002866 <_nx_ipv4_packet_receive+0x20e>
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 80026cc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	454b      	cmp	r3, r9
 80026d4:	d9e3      	bls.n	800269e <_nx_ipv4_packet_receive+0x46>
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 80026d6:	eba2 0209 	sub.w	r2, r2, r9
 80026da:	60c2      	str	r2, [r0, #12]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80026dc:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 80026e0:	f3c6 6603 	ubfx	r6, r6, #24, #4
        return;
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 80026e4:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80026e8:	f013 0302 	ands.w	r3, r3, #2
 80026ec:	d069      	beq.n	80027c2 <_nx_ipv4_packet_receive+0x16a>

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 80026ee:	f8d5 e008 	ldr.w	lr, [r5, #8]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 80026f2:	2e05      	cmp	r6, #5
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 80026f4:	68e8      	ldr	r0, [r5, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 80026f6:	ea8e 423e 	eor.w	r2, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 80026fa:	6929      	ldr	r1, [r5, #16]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 80026fc:	e9d5 a900 	ldrd	sl, r9, [r5]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8002700:	ea4f 2212 	mov.w	r2, r2, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8002704:	ea8a 4c3a 	eor.w	ip, sl, sl, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8002708:	ea89 4339 	eor.w	r3, r9, r9, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800270c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8002710:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8002714:	ea4f 2313 	mov.w	r3, r3, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8002718:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800271c:	ea82 223e 	eor.w	r2, r2, lr, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8002720:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8002724:	ea8c 2c3a 	eor.w	ip, ip, sl, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8002728:	60aa      	str	r2, [r5, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800272a:	ea83 2939 	eor.w	r9, r3, r9, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800272e:	f8c5 c000 	str.w	ip, [r5]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8002732:	ea80 4330 	eor.w	r3, r0, r0, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8002736:	ea81 4c31 	eor.w	ip, r1, r1, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800273a:	f8c5 9004 	str.w	r9, [r5, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800273e:	ea4f 2313 	mov.w	r3, r3, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8002742:	ea4f 221c 	mov.w	r2, ip, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8002746:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800274a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800274e:	ea83 2330 	eor.w	r3, r3, r0, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8002752:	ea82 2131 	eor.w	r1, r2, r1, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8002756:	60eb      	str	r3, [r5, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8002758:	6129      	str	r1, [r5, #16]
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800275a:	d842      	bhi.n	80027e2 <_nx_ipv4_packet_receive+0x18a>
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800275c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002760:	428b      	cmp	r3, r1
 8002762:	d00d      	beq.n	8002780 <_nx_ipv4_packet_receive+0x128>
 8002764:	b161      	cbz	r1, 8002780 <_nx_ipv4_packet_receive+0x128>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8002766:	e9d8 3206 	ldrd	r3, r2, [r8, #24]

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800276a:	ea03 0001 	and.w	r0, r3, r1
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800276e:	4290      	cmp	r0, r2
 8002770:	d075      	beq.n	800285e <_nx_ipv4_packet_receive+0x206>
          if_ptr -> nx_interface_ip_network) &&
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8002772:	1c4b      	adds	r3, r1, #1
 8002774:	d004      	beq.n	8002780 <_nx_ipv4_packet_receive+0x128>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8002776:	f101 4301 	add.w	r3, r1, #2164260864	; 0x81000000
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800277a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277e:	d27d      	bcs.n	800287c <_nx_ipv4_packet_receive+0x224>
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 8002780:	686b      	ldr	r3, [r5, #4]
 8002782:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002786:	2b00      	cmp	r3, #0
 8002788:	d059      	beq.n	800283e <_nx_ipv4_packet_receive+0x1e6>
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 800278a:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 800278e:	b313      	cbz	r3, 80027d6 <_nx_ipv4_packet_receive+0x17e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002790:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002794:	b672      	cpsid	i

                /* Disable interrupts.  */
                TX_DISABLE

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 8002796:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d068      	beq.n	8002870 <_nx_ipv4_packet_receive+0x218>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800279e:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80027a2:	2300      	movs	r3, #0
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 80027a4:	61cc      	str	r4, [r1, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80027a6:	61e3      	str	r3, [r4, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 80027a8:	f8c7 47c8 	str.w	r4, [r7, #1992]	; 0x7c8
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80027ac:	f382 8810 	msr	PRIMASK, r2
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 80027b0:	2200      	movs	r2, #0
 80027b2:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 80027b6:	2102      	movs	r1, #2
        _nx_packet_release(packet_ptr);

        /* Return to caller.  */
        return;
    }
}
 80027b8:	b002      	add	sp, #8
 80027ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 80027be:	f00a bc57 	b.w	800d070 <_tx_event_flags_set>
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	00b2      	lsls	r2, r6, #2
 80027c6:	2104      	movs	r1, #4
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff fafb 	bl	8001dc4 <_nx_ip_checksum_compute>
        if (checksum)
 80027ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d2:	4298      	cmp	r0, r3
 80027d4:	d08b      	beq.n	80026ee <_nx_ipv4_packet_receive+0x96>
            _nx_packet_release(packet_ptr);
 80027d6:	4620      	mov	r0, r4
}
 80027d8:	b002      	add	sp, #8
 80027da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            _nx_packet_release(packet_ptr);
 80027de:	f000 bab5 	b.w	8002d4c <_nx_packet_release>
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 80027e2:	4621      	mov	r1, r4
 80027e4:	4638      	mov	r0, r7
 80027e6:	f004 fd07 	bl	80071f8 <_nx_ipv4_option_process>
        if (option_processed == NX_FALSE)
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d0f3      	beq.n	80027d6 <_nx_ipv4_packet_receive+0x17e>
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 80027ee:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 80027f2:	692a      	ldr	r2, [r5, #16]
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 80027f4:	4433      	add	r3, r6
 80027f6:	0098      	lsls	r0, r3, #2
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 80027f8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 80027fc:	68e9      	ldr	r1, [r5, #12]
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 80027fe:	182a      	adds	r2, r5, r0
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8002800:	3810      	subs	r0, #16
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 8002802:	f842 1c04 	str.w	r1, [r2, #-4]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8002806:	f1a2 0610 	sub.w	r6, r2, #16
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800280a:	68a9      	ldr	r1, [r5, #8]
 800280c:	f842 1c08 	str.w	r1, [r2, #-8]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8002810:	6869      	ldr	r1, [r5, #4]
 8002812:	f842 1c0c 	str.w	r1, [r2, #-12]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 8002816:	6829      	ldr	r1, [r5, #0]
 8002818:	f021 419e 	bic.w	r1, r1, #1325400064	; 0x4f000000
 800281c:	f041 418a 	orr.w	r1, r1, #1157627904	; 0x45000000
 8002820:	f842 1c10 	str.w	r1, [r2, #-16]
 8002824:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 8002828:	4635      	mov	r5, r6
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800282a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800282c:	f8d8 3014 	ldr.w	r3, [r8, #20]
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8002830:	1a12      	subs	r2, r2, r0
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 8002832:	60a6      	str	r6, [r4, #8]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8002834:	428b      	cmp	r3, r1
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8002836:	63a6      	str	r6, [r4, #56]	; 0x38
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8002838:	6262      	str	r2, [r4, #36]	; 0x24
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800283a:	d193      	bne.n	8002764 <_nx_ipv4_packet_receive+0x10c>
 800283c:	e7a0      	b.n	8002780 <_nx_ipv4_packet_receive+0x128>
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800283e:	68a6      	ldr	r6, [r4, #8]
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8002840:	4638      	mov	r0, r7
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8002842:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8002844:	4621      	mov	r1, r4
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8002846:	3614      	adds	r6, #20
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 8002848:	7aaa      	ldrb	r2, [r5, #10]
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800284a:	3b14      	subs	r3, #20
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800284c:	60a6      	str	r6, [r4, #8]
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800284e:	6263      	str	r3, [r4, #36]	; 0x24
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8002850:	f003 fe9a 	bl	8006588 <_nx_ip_dispatch_process>
 8002854:	2800      	cmp	r0, #0
 8002856:	d1be      	bne.n	80027d6 <_nx_ipv4_packet_receive+0x17e>
}
 8002858:	b002      	add	sp, #8
 800285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800285e:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 8002860:	438b      	bics	r3, r1
 8002862:	d186      	bne.n	8002772 <_nx_ipv4_packet_receive+0x11a>
 8002864:	e78c      	b.n	8002780 <_nx_ipv4_packet_receive+0x128>
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 8002866:	68e3      	ldr	r3, [r4, #12]
 8002868:	eba3 0309 	sub.w	r3, r3, r9
 800286c:	60e3      	str	r3, [r4, #12]
                break;
 800286e:	e735      	b.n	80026dc <_nx_ipv4_packet_receive+0x84>
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 8002870:	f8c7 47c4 	str.w	r4, [r7, #1988]	; 0x7c4
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8002874:	f8c7 47c8 	str.w	r4, [r7, #1992]	; 0x7c8
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 8002878:	61e3      	str	r3, [r4, #28]
 800287a:	e797      	b.n	80027ac <_nx_ipv4_packet_receive+0x154>
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800287c:	4642      	mov	r2, r8
 800287e:	4638      	mov	r0, r7
 8002880:	f003 fd5e 	bl	8006340 <_nx_igmp_multicast_check>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8002884:	2800      	cmp	r0, #0
 8002886:	f47f af7b 	bne.w	8002780 <_nx_ipv4_packet_receive+0x128>
    else if (if_ptr -> nx_interface_ip_address == 0)
 800288a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800288e:	bb5b      	cbnz	r3, 80028e8 <_nx_ipv4_packet_receive+0x290>
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 8002890:	68ab      	ldr	r3, [r5, #8]
 8002892:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if (protocol == NX_IP_UDP)
 8002896:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800289a:	d19c      	bne.n	80027d6 <_nx_ipv4_packet_receive+0x17e>
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800289c:	68a1      	ldr	r1, [r4, #8]
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800289e:	6a63      	ldr	r3, [r4, #36]	; 0x24
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80028a0:	694a      	ldr	r2, [r1, #20]
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80028a2:	f101 0514 	add.w	r5, r1, #20
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80028a6:	f1a3 0014 	sub.w	r0, r3, #20
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80028aa:	ea82 4332 	eor.w	r3, r2, r2, ror #16
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80028ae:	60a5      	str	r5, [r4, #8]
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80028b0:	6260      	str	r0, [r4, #36]	; 0x24
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80028b8:	ea83 2332 	eor.w	r3, r3, r2, ror #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80028bc:	ea83 4233 	eor.w	r2, r3, r3, ror #16
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 80028c0:	b298      	uxth	r0, r3
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80028c2:	0a12      	lsrs	r2, r2, #8
            if (dest_port == 68)
 80028c4:	2844      	cmp	r0, #68	; 0x44
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80028c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80028ca:	ea82 2333 	eor.w	r3, r2, r3, ror #8
 80028ce:	614b      	str	r3, [r1, #20]
            if (dest_port == 68)
 80028d0:	d181      	bne.n	80027d6 <_nx_ipv4_packet_receive+0x17e>
                if (ip_ptr -> nx_ip_udp_packet_receive)
 80028d2:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f43f af7d 	beq.w	80027d6 <_nx_ipv4_packet_receive+0x17e>
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 80028dc:	4621      	mov	r1, r4
 80028de:	4638      	mov	r0, r7
}
 80028e0:	b002      	add	sp, #8
 80028e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 80028e6:	4718      	bx	r3
    else if (ip_ptr -> nx_ip_forward_packet_process)
 80028e8:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f5      	bne.n	80028dc <_nx_ipv4_packet_receive+0x284>
 80028f0:	e771      	b.n	80027d6 <_nx_ipv4_packet_receive+0x17e>
 80028f2:	bf00      	nop

080028f4 <_nx_ipv6_multicast_join>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_multicast_join(NX_IP *ip_ptr, ULONG *multicast_addr, NX_INTERFACE *nx_interface)
{
 80028f4:	b570      	push	{r4, r5, r6, lr}
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
    driver_request.nx_ip_driver_interface = nx_interface;

    /* Obtain the IP mutex so we can search the multicast join list.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80028f6:	f200 643c 	addw	r4, r0, #1596	; 0x63c
{
 80028fa:	b088      	sub	sp, #32
 80028fc:	4615      	mov	r5, r2
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 80028fe:	68ce      	ldr	r6, [r1, #12]
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_JOIN;
 8002900:	2208      	movs	r2, #8
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 8002902:	f243 3333 	movw	r3, #13107	; 0x3333
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8002906:	f04f 31ff 	mov.w	r1, #4294967295
    driver_request.nx_ip_driver_ptr = ip_ptr;
 800290a:	9006      	str	r0, [sp, #24]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800290c:	4620      	mov	r0, r4
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_JOIN;
 800290e:	9200      	str	r2, [sp, #0]
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 8002910:	9302      	str	r3, [sp, #8]
    driver_request.nx_ip_driver_interface = nx_interface;
 8002912:	9507      	str	r5, [sp, #28]
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 8002914:	9603      	str	r6, [sp, #12]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8002916:	f00a fd3b 	bl	800d390 <_tx_mutex_get>

    /* Call the device driver with the driver request. */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800291a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800291c:	4668      	mov	r0, sp
 800291e:	4798      	blx	r3

    /* Release the protection over the IP instance.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8002920:	4620      	mov	r0, r4
 8002922:	f00a fe1f 	bl	800d564 <_tx_mutex_put>

    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
}
 8002926:	9801      	ldr	r0, [sp, #4]
 8002928:	b008      	add	sp, #32
 800292a:	bd70      	pop	{r4, r5, r6, pc}

0800292c <CHECK_IP_ADDRESSES_BY_PREFIX>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
INT CHECK_IP_ADDRESSES_BY_PREFIX(ULONG *ip_addr1, ULONG *ip_addr2,
                                 ULONG prefix_len)
{
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Get the remaining bits in prefix length. */
    low_prefix  = prefix_len &  0x1f;

    /* Would the prefix length have 1 or more ULONGs? */
    if (high_prefix)
 800292e:	0954      	lsrs	r4, r2, #5
{
 8002930:	4607      	mov	r7, r0
 8002932:	460e      	mov	r6, r1
    low_prefix  = prefix_len &  0x1f;
 8002934:	f002 051f 	and.w	r5, r2, #31
    if (high_prefix)
 8002938:	d003      	beq.n	8002942 <CHECK_IP_ADDRESSES_BY_PREFIX+0x16>
    {

        /* Yes; compare that number of ULONGS (in bytes) in each input address. */
        if (memcmp(ip_addr1, ip_addr2, high_prefix << 2))
 800293a:	00a2      	lsls	r2, r4, #2
 800293c:	f00c f926 	bl	800eb8c <memcmp>
 8002940:	b990      	cbnz	r0, 8002968 <CHECK_IP_ADDRESSES_BY_PREFIX+0x3c>
            return(0);
        }
    }

    /* Are there any bits to compare after the high order bits? */
    if (low_prefix)
 8002942:	b17d      	cbz	r5, 8002964 <CHECK_IP_ADDRESSES_BY_PREFIX+0x38>
    {

        /* Compare these bits between the two addresses, after masking out the upper ULONGs. */
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;

        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 8002944:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 800294c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;
 8002950:	f1c5 0520 	rsb	r5, r5, #32
        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 8002954:	404a      	eors	r2, r1
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;
 8002956:	fa03 f505 	lsl.w	r5, r3, r5
        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 800295a:	422a      	tst	r2, r5
 800295c:	bf0c      	ite	eq
 800295e:	2001      	moveq	r0, #1
 8002960:	2000      	movne	r0, #0
            return(0);
        }
    }

    return(1);
}
 8002962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return(1);
 8002964:	2001      	movs	r0, #1
}
 8002966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return(0);
 8002968:	2000      	movs	r0, #0
}
 800296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800296c <CHECK_IPV6_ADDRESSES_SAME>:
INT CHECK_IPV6_ADDRESSES_SAME(ULONG *ip_addr1, ULONG *ip_addr2)
{
#ifdef FEATURE_NX_IPV6
    return(ip_addr1[0] == ip_addr2[0] &&
           ip_addr1[1] == ip_addr2[1] &&
           ip_addr1[2] == ip_addr2[2] &&
 800296c:	6802      	ldr	r2, [r0, #0]
 800296e:	680b      	ldr	r3, [r1, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <CHECK_IPV6_ADDRESSES_SAME+0xc>
 8002974:	2000      	movs	r0, #0
    NX_PARAMETER_NOT_USED(ip_addr1);
    NX_PARAMETER_NOT_USED(ip_addr2);

    return(0);
#endif /* FEATURE_NX_IPV6 */
}
 8002976:	4770      	bx	lr
    return(ip_addr1[0] == ip_addr2[0] &&
 8002978:	6842      	ldr	r2, [r0, #4]
 800297a:	684b      	ldr	r3, [r1, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d1f9      	bne.n	8002974 <CHECK_IPV6_ADDRESSES_SAME+0x8>
           ip_addr1[1] == ip_addr2[1] &&
 8002980:	6882      	ldr	r2, [r0, #8]
 8002982:	688b      	ldr	r3, [r1, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d1f5      	bne.n	8002974 <CHECK_IPV6_ADDRESSES_SAME+0x8>
           ip_addr1[2] == ip_addr2[2] &&
 8002988:	68c0      	ldr	r0, [r0, #12]
 800298a:	68cb      	ldr	r3, [r1, #12]
 800298c:	1ac0      	subs	r0, r0, r3
 800298e:	fab0 f080 	clz	r0, r0
 8002992:	0940      	lsrs	r0, r0, #5
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop

08002998 <CHECK_UNSPECIFIED_ADDRESS>:
/*                                                                        */
/**************************************************************************/
INT CHECK_UNSPECIFIED_ADDRESS(ULONG *ip_addr)
{
#ifdef FEATURE_NX_IPV6
    return(!(ip_addr[0] || ip_addr[1] || ip_addr[2] || ip_addr[3]));
 8002998:	6803      	ldr	r3, [r0, #0]
 800299a:	b943      	cbnz	r3, 80029ae <CHECK_UNSPECIFIED_ADDRESS+0x16>
 800299c:	6842      	ldr	r2, [r0, #4]
 800299e:	b932      	cbnz	r2, 80029ae <CHECK_UNSPECIFIED_ADDRESS+0x16>
 80029a0:	6883      	ldr	r3, [r0, #8]
 80029a2:	b923      	cbnz	r3, 80029ae <CHECK_UNSPECIFIED_ADDRESS+0x16>
 80029a4:	68c0      	ldr	r0, [r0, #12]
 80029a6:	fab0 f080 	clz	r0, r0
 80029aa:	0940      	lsrs	r0, r0, #5
 80029ac:	4770      	bx	lr
 80029ae:	2000      	movs	r0, #0
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop

080029b4 <SET_UNSPECIFIED_ADDRESS>:
/*                                                                        */
/**************************************************************************/
void SET_UNSPECIFIED_ADDRESS(ULONG *ip_addr)
{
#ifdef FEATURE_NX_IPV6
    ip_addr[0] = 0;
 80029b4:	2300      	movs	r3, #0
    ip_addr[1] = 0;
 80029b6:	e9c0 3300 	strd	r3, r3, [r0]
    ip_addr[2] = 0;
    ip_addr[3] = 0;
 80029ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
#else
    NX_PARAMETER_NOT_USED(ip_addr);
#endif /* FEATURE_NX_IPV6 */
}
 80029be:	4770      	bx	lr

080029c0 <COPY_IPV6_ADDRESS>:
/*                                                                        */
/**************************************************************************/
void COPY_IPV6_ADDRESS(ULONG *copy_from, ULONG *copy_to)
{
#ifdef FEATURE_NX_IPV6
    copy_to[0] = copy_from[0];
 80029c0:	6803      	ldr	r3, [r0, #0]
 80029c2:	600b      	str	r3, [r1, #0]
    copy_to[1] = copy_from[1];
 80029c4:	6843      	ldr	r3, [r0, #4]
 80029c6:	604b      	str	r3, [r1, #4]
    copy_to[2] = copy_from[2];
 80029c8:	6883      	ldr	r3, [r0, #8]
 80029ca:	608b      	str	r3, [r1, #8]
    copy_to[3] = copy_from[3];
 80029cc:	68c3      	ldr	r3, [r0, #12]
 80029ce:	60cb      	str	r3, [r1, #12]
#else
    NX_PARAMETER_NOT_USED(copy_from);
    NX_PARAMETER_NOT_USED(copy_to);
#endif /* FEATURE_NX_IPV6 */
}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop

080029d4 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
void SET_SOLICITED_NODE_MULTICAST_ADDRESS(ULONG *address,
                                          ULONG *unicast_address)
{
 80029d4:	b410      	push	{r4}
#ifdef FEATURE_NX_IPV6
    address[0] = (ULONG)0xFF020000;
    address[1] = (ULONG)0;
    address[2] = (ULONG)0x00000001;
 80029d6:	2300      	movs	r3, #0
 80029d8:	2401      	movs	r4, #1
 80029da:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <SET_SOLICITED_NODE_MULTICAST_ADDRESS+0x1c>)
 80029dc:	e880 001c 	stmia.w	r0, {r2, r3, r4}
    address[3] = (ULONG)(0xFF000000 | unicast_address[3]);
 80029e0:	68cb      	ldr	r3, [r1, #12]
#else
    NX_PARAMETER_NOT_USED(address);
    NX_PARAMETER_NOT_USED(unicast_address);
#endif /* FEATURE_NX_IPV6 */
}
 80029e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    address[3] = (ULONG)(0xFF000000 | unicast_address[3]);
 80029e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ea:	60c3      	str	r3, [r0, #12]
}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	ff020000 	.word	0xff020000

080029f4 <IPv6_Address_Type>:
   Everything else         Global
 */
ULONG tmp;

    /* Is this multicast? */
    if ((ip_address[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 80029f4:	6803      	ldr	r3, [r0, #0]
 80029f6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80029fa:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80029fe:	d019      	beq.n	8002a34 <IPv6_Address_Type+0x40>
        }

        return(IPV6_ADDRESS_MULTICAST);
    }

    tmp = ip_address[0] & (0xFFC00000);
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <IPv6_Address_Type+0xb8>)
 8002a02:	401a      	ands	r2, r3

    if (tmp == (ULONG)0xFE800000)
 8002a04:	f112 7fc0 	cmn.w	r2, #25165824	; 0x1800000
 8002a08:	d010      	beq.n	8002a2c <IPv6_Address_Type+0x38>
    {
        return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_LINKLOCAL));
    }
    /* Note that site local are deprecated in RFC 4291 and are
       treated as global type address. */
    if (tmp == (ULONG)0xFEC00000)
 8002a0a:	f112 7fa0 	cmn.w	r2, #20971520	; 0x1400000
 8002a0e:	d00f      	beq.n	8002a30 <IPv6_Address_Type+0x3c>
    {
        return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_GLOBAL));
    }

    tmp = ip_address[0] | ip_address[1] | ip_address[2];
 8002a10:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8002a14:	430b      	orrs	r3, r1

    if (tmp == 0)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	d10a      	bne.n	8002a30 <IPv6_Address_Type+0x3c>
    {
        if (ip_address[3] == 0)
 8002a1a:	68c3      	ldr	r3, [r0, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02f      	beq.n	8002a80 <IPv6_Address_Type+0x8c>
            return(IPV6_ADDRESS_UNSPECIFIED);
        }

        if (ip_address[3] == 1)
        {
            return(IPV6_ADDRESS_LOOPBACK);
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	4823      	ldr	r0, [pc, #140]	; (8002ab0 <IPv6_Address_Type+0xbc>)
 8002a24:	bf08      	it	eq
 8002a26:	f04f 5080 	moveq.w	r0, #268435456	; 0x10000000
 8002a2a:	4770      	bx	lr
        return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_LINKLOCAL));
 8002a2c:	4821      	ldr	r0, [pc, #132]	; (8002ab4 <IPv6_Address_Type+0xc0>)
 8002a2e:	4770      	bx	lr
        }
    }

    return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_GLOBAL));
 8002a30:	481f      	ldr	r0, [pc, #124]	; (8002ab0 <IPv6_Address_Type+0xbc>)
 8002a32:	4770      	bx	lr
        if (((ip_address[0] == (ULONG)0xFF010000) ||
 8002a34:	f513 0f7f 	cmn.w	r3, #16711680	; 0xff0000
 8002a38:	d00a      	beq.n	8002a50 <IPv6_Address_Type+0x5c>
 8002a3a:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 8002a3e:	d007      	beq.n	8002a50 <IPv6_Address_Type+0x5c>
        if ((ip_address[0] == (ULONG)0xFF050000) &&     /* All DHCPv6 relay and server hosts */
 8002a40:	f513 0f7b 	cmn.w	r3, #16449536	; 0xfb0000
 8002a44:	d101      	bne.n	8002a4a <IPv6_Address_Type+0x56>
 8002a46:	6842      	ldr	r2, [r0, #4]
 8002a48:	b352      	cbz	r2, 8002aa0 <IPv6_Address_Type+0xac>
        return(IPV6_ADDRESS_MULTICAST);
 8002a4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
#else /* FEATURE_NX_IPV6 */
    NX_PARAMETER_NOT_USED(ip_address);

    return(0);
#endif /* FEATURE_NX_IPV6 */
}
 8002a4e:	4770      	bx	lr
             (ip_address[0] == (ULONG)0xFF020000)) &&
 8002a50:	6842      	ldr	r2, [r0, #4]
 8002a52:	2a00      	cmp	r2, #0
 8002a54:	d1f9      	bne.n	8002a4a <IPv6_Address_Type+0x56>
            (ip_address[1] == (ULONG)0) &&
 8002a56:	6882      	ldr	r2, [r0, #8]
 8002a58:	b952      	cbnz	r2, 8002a70 <IPv6_Address_Type+0x7c>
            (ip_address[2] == (ULONG)0) &&
 8002a5a:	68c2      	ldr	r2, [r0, #12]
 8002a5c:	2a01      	cmp	r2, #1
 8002a5e:	d005      	beq.n	8002a6c <IPv6_Address_Type+0x78>
        if ((ip_address[0] == (ULONG)0xFF050000) &&     /* All DHCPv6 relay and server hosts */
 8002a60:	f513 0f7b 	cmn.w	r3, #16449536	; 0xfb0000
 8002a64:	d105      	bne.n	8002a72 <IPv6_Address_Type+0x7e>
            (ip_address[2] == (ULONG)0) &&
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <IPv6_Address_Type+0xc4>)
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d102      	bne.n	8002a72 <IPv6_Address_Type+0x7e>
            return(ret | IPV6_ALL_NODE_MCAST);
 8002a6c:	4813      	ldr	r0, [pc, #76]	; (8002abc <IPv6_Address_Type+0xc8>)
 8002a6e:	4770      	bx	lr
            (ip_address[1] == (ULONG)0) &&
 8002a70:	b94a      	cbnz	r2, 8002a86 <IPv6_Address_Type+0x92>
            (ip_address[2] == (ULONG)0) &&
 8002a72:	68c3      	ldr	r3, [r0, #12]
            return(ret | IPV6_ALL_ROUTER_MCAST);
 8002a74:	4812      	ldr	r0, [pc, #72]	; (8002ac0 <IPv6_Address_Type+0xcc>)
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	bf18      	it	ne
 8002a7a:	f04f 4080 	movne.w	r0, #1073741824	; 0x40000000
 8002a7e:	4770      	bx	lr
            return(IPV6_ADDRESS_UNSPECIFIED);
 8002a80:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002a84:	4770      	bx	lr
        if ((ip_address[0] == (ULONG)0xFF020000) &&
 8002a86:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 8002a8a:	d1de      	bne.n	8002a4a <IPv6_Address_Type+0x56>
            (ip_address[1] == (ULONG)0) &&
 8002a8c:	2a01      	cmp	r2, #1
 8002a8e:	d1dc      	bne.n	8002a4a <IPv6_Address_Type+0x56>
            (ip_address[2] == (ULONG)1) &&
 8002a90:	68c3      	ldr	r3, [r0, #12]
            return(ret | IPV6_SOLICITED_NODE_MCAST);
 8002a92:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <IPv6_Address_Type+0xd0>)
 8002a94:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8002a98:	bf38      	it	cc
 8002a9a:	f04f 4080 	movcc.w	r0, #1073741824	; 0x40000000
 8002a9e:	4770      	bx	lr
            (ip_address[1] == (ULONG)0) &&
 8002aa0:	6882      	ldr	r2, [r0, #8]
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d1e4      	bne.n	8002a70 <IPv6_Address_Type+0x7c>
 8002aa6:	68c2      	ldr	r2, [r0, #12]
 8002aa8:	e7dd      	b.n	8002a66 <IPv6_Address_Type+0x72>
 8002aaa:	bf00      	nop
 8002aac:	ffc00000 	.word	0xffc00000
 8002ab0:	80000004 	.word	0x80000004
 8002ab4:	80000001 	.word	0x80000001
 8002ab8:	00010003 	.word	0x00010003
 8002abc:	40000010 	.word	0x40000010
 8002ac0:	40000020 	.word	0x40000020
 8002ac4:	40000040 	.word	0x40000040

08002ac8 <_nx_ipv6_address_change_endian>:
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_address_change_endian(ULONG *address)
{
#ifdef FEATURE_NX_IPV6
    if (address == NX_NULL)
 8002ac8:	b330      	cbz	r0, 8002b18 <_nx_ipv6_address_change_endian+0x50>
{
 8002aca:	b4f0      	push	{r4, r5, r6, r7}
    {
        return;
    }

    NX_CHANGE_ULONG_ENDIAN(address[0]);
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 8002acc:	e9d0 c700 	ldrd	ip, r7, [r0]
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8002ad0:	6886      	ldr	r6, [r0, #8]
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8002ad2:	68c5      	ldr	r5, [r0, #12]
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 8002ad4:	ea87 4137 	eor.w	r1, r7, r7, ror #16
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8002ad8:	ea86 4236 	eor.w	r2, r6, r6, ror #16
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8002adc:	ea85 4335 	eor.w	r3, r5, r5, ror #16
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8002ae0:	ea8c 443c 	eor.w	r4, ip, ip, ror #16
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 8002ae4:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8002ae6:	0a24      	lsrs	r4, r4, #8
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8002ae8:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 8002aea:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8002aee:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8002af0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8002af4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 8002af8:	ea81 2137 	eor.w	r1, r1, r7, ror #8
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8002afc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8002b00:	ea84 243c 	eor.w	r4, r4, ip, ror #8
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8002b04:	ea82 2236 	eor.w	r2, r2, r6, ror #8
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8002b08:	ea83 2335 	eor.w	r3, r3, r5, ror #8
    NX_CHANGE_ULONG_ENDIAN(address[0]);
 8002b0c:	6004      	str	r4, [r0, #0]
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 8002b0e:	e9c0 1201 	strd	r1, r2, [r0, #4]
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 8002b12:	60c3      	str	r3, [r0, #12]
#else
    NX_PARAMETER_NOT_USED(address);
#endif /* FEATURE_NX_IPV6 */
}
 8002b14:	bcf0      	pop	{r4, r5, r6, r7}
 8002b16:	4770      	bx	lr
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop

08002b1c <_nx_packet_allocate>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 8002b1e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002b20:	4294      	cmp	r4, r2
 8002b22:	d34a      	bcc.n	8002bba <_nx_packet_allocate+0x9e>
    {
        return(NX_INVALID_PARAMETERS);
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8002b24:	2400      	movs	r4, #0
 8002b26:	600c      	str	r4, [r1, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002b28:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002b2c:	b672      	cpsid	i

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 8002b2e:	6885      	ldr	r5, [r0, #8]
 8002b30:	b1fd      	cbz	r5, 8002b72 <_nx_packet_allocate+0x56>

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 8002b32:	69c3      	ldr	r3, [r0, #28]
        pool_ptr -> nx_packet_pool_available--;
 8002b34:	3d01      	subs	r5, #1
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8002b36:	f04f 3eaa 	mov.w	lr, #2863311530	; 0xaaaaaaaa
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8002b3a:	f04f 0c04 	mov.w	ip, #4
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 8002b3e:	691f      	ldr	r7, [r3, #16]
        pool_ptr -> nx_packet_pool_available--;
 8002b40:	6085      	str	r5, [r0, #8]
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 8002b42:	69dd      	ldr	r5, [r3, #28]
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 8002b44:	443a      	add	r2, r7
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 8002b46:	61c5      	str	r5, [r0, #28]

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;

        /* Set status to success.  */
        status =  NX_SUCCESS;
 8002b48:	4620      	mov	r0, r4
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 8002b4a:	61dc      	str	r4, [r3, #28]
        work_ptr -> nx_packet_next =         NX_NULL;
 8002b4c:	605c      	str	r4, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 8002b4e:	619c      	str	r4, [r3, #24]
        work_ptr -> nx_packet_length =       0;
 8002b50:	625c      	str	r4, [r3, #36]	; 0x24
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8002b52:	635c      	str	r4, [r3, #52]	; 0x34
        work_ptr -> nx_packet_interface_capability_flag = 0;
 8002b54:	63dc      	str	r4, [r3, #60]	; 0x3c
        work_ptr -> nx_packet_option_state = 0;
 8002b56:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 8002b5a:	f883 4032 	strb.w	r4, [r3, #50]	; 0x32
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8002b5e:	f8c3 e020 	str.w	lr, [r3, #32]
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8002b62:	f8a3 c030 	strh.w	ip, [r3, #48]	; 0x30
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 8002b66:	e9c3 2202 	strd	r2, r2, [r3, #8]
        *packet_ptr =  work_ptr;
 8002b6a:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002b6c:	f386 8810 	msr	PRIMASK, r6
    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
}
 8002b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (wait_option)
 8002b72:	b323      	cbz	r3, 8002bbe <_nx_packet_allocate+0xa2>
            thread_ptr =  _tx_thread_current_ptr;
 8002b74:	4c15      	ldr	r4, [pc, #84]	; (8002bcc <_nx_packet_allocate+0xb0>)
            if (pool_ptr -> nx_packet_pool_suspension_list)
 8002b76:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
            thread_ptr =  _tx_thread_current_ptr;
 8002b78:	6824      	ldr	r4, [r4, #0]
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 8002b7a:	4f15      	ldr	r7, [pc, #84]	; (8002bd0 <_nx_packet_allocate+0xb4>)
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 8002b7c:	66e0      	str	r0, [r4, #108]	; 0x6c
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 8002b7e:	66a7      	str	r7, [r4, #104]	; 0x68
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 8002b80:	e9c4 211e 	strd	r2, r1, [r4, #120]	; 0x78
            if (pool_ptr -> nx_packet_pool_suspension_list)
 8002b84:	b1ed      	cbz	r5, 8002bc2 <_nx_packet_allocate+0xa6>
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 8002b86:	6f6a      	ldr	r2, [r5, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 8002b88:	e9c4 521c 	strd	r5, r2, [r4, #112]	; 0x70
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8002b8c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8002b8e:	6714      	str	r4, [r2, #112]	; 0x70
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8002b90:	676c      	str	r4, [r5, #116]	; 0x74
            pool_ptr -> nx_packet_pool_suspended_count++;
 8002b92:	6b01      	ldr	r1, [r0, #48]	; 0x30
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8002b94:	270c      	movs	r7, #12
            _tx_thread_preempt_disable++;
 8002b96:	4d0f      	ldr	r5, [pc, #60]	; (8002bd4 <_nx_packet_allocate+0xb8>)
            pool_ptr -> nx_packet_pool_suspended_count++;
 8002b98:	3101      	adds	r1, #1
            _tx_thread_preempt_disable++;
 8002b9a:	682a      	ldr	r2, [r5, #0]
            pool_ptr -> nx_packet_pool_suspended_count++;
 8002b9c:	6301      	str	r1, [r0, #48]	; 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002b9e:	2101      	movs	r1, #1
            _tx_thread_preempt_disable++;
 8002ba0:	3201      	adds	r2, #1
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8002ba2:	64e3      	str	r3, [r4, #76]	; 0x4c
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8002ba4:	6327      	str	r7, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8002ba6:	602a      	str	r2, [r5, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002ba8:	63a1      	str	r1, [r4, #56]	; 0x38
 8002baa:	f386 8810 	msr	PRIMASK, r6
            _tx_thread_system_suspend(thread_ptr);
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f00b f81e 	bl	800dbf0 <_tx_thread_system_suspend>
            return(thread_ptr -> tx_thread_suspend_status);
 8002bb4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 8002bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(NX_INVALID_PARAMETERS);
 8002bba:	204d      	movs	r0, #77	; 0x4d
}
 8002bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            status =  NX_NO_PACKET;
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	e7d4      	b.n	8002b6c <_nx_packet_allocate+0x50>
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 8002bc2:	62c4      	str	r4, [r0, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 8002bc4:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 8002bc8:	e7e3      	b.n	8002b92 <_nx_packet_allocate+0x76>
 8002bca:	bf00      	nop
 8002bcc:	20019248 	.word	0x20019248
 8002bd0:	08002bd9 	.word	0x08002bd9
 8002bd4:	20019244 	.word	0x20019244

08002bd8 <_nx_packet_pool_cleanup>:
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 8002bd8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002bda:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002bde:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8002be0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002be2:	b152      	cbz	r2, 8002bfa <_nx_packet_pool_cleanup+0x22>
 8002be4:	b14b      	cbz	r3, 8002bfa <_nx_packet_pool_cleanup+0x22>
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <_nx_packet_pool_cleanup+0x6c>)
{
 8002be8:	b410      	push	{r4}
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8002bea:	681c      	ldr	r4, [r3, #0]
 8002bec:	4294      	cmp	r4, r2
 8002bee:	d007      	beq.n	8002c00 <_nx_packet_pool_cleanup+0x28>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002bf0:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8002bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	f381 8810 	msr	PRIMASK, r1
 8002bfe:	4770      	bx	lr
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8002c00:	6f02      	ldr	r2, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002c02:	2400      	movs	r4, #0
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8002c04:	4282      	cmp	r2, r0
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002c06:	6684      	str	r4, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8002c08:	d01a      	beq.n	8002c40 <_nx_packet_pool_cleanup+0x68>
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 8002c0a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002c0c:	4284      	cmp	r4, r0
                thread_ptr -> tx_thread_suspended_previous;
 8002c0e:	6f44      	ldr	r4, [r0, #116]	; 0x74
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8002c10:	bf08      	it	eq
 8002c12:	62da      	streq	r2, [r3, #44]	; 0x2c
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8002c14:	6754      	str	r4, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8002c16:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8002c18:	6722      	str	r2, [r4, #112]	; 0x70
        pool_ptr -> nx_packet_pool_suspended_count--;
 8002c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8002c1c:	6b04      	ldr	r4, [r0, #48]	; 0x30
        pool_ptr -> nx_packet_pool_suspended_count--;
 8002c1e:	3a01      	subs	r2, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8002c20:	2c0c      	cmp	r4, #12
        pool_ptr -> nx_packet_pool_suspended_count--;
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8002c24:	d1e4      	bne.n	8002bf0 <_nx_packet_pool_cleanup+0x18>
            _tx_thread_preempt_disable++;
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <_nx_packet_pool_cleanup+0x70>)
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8002c28:	2401      	movs	r4, #1
            _tx_thread_preempt_disable++;
 8002c2a:	6813      	ldr	r3, [r2, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8002c2c:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 8002c30:	4423      	add	r3, r4
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	f381 8810 	msr	PRIMASK, r1
}
 8002c38:	f85d 4b04 	ldr.w	r4, [sp], #4
            _tx_thread_system_resume(thread_ptr);
 8002c3c:	f00a bf52 	b.w	800dae4 <_tx_thread_system_resume>
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 8002c40:	62dc      	str	r4, [r3, #44]	; 0x2c
 8002c42:	e7ea      	b.n	8002c1a <_nx_packet_pool_cleanup+0x42>
 8002c44:	5041434b 	.word	0x5041434b
 8002c48:	20019244 	.word	0x20019244

08002c4c <_nx_packet_pool_create>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 8002c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c50:	b083      	sub	sp, #12
    /* Save the original payload size.  */
    original_payload_size =  payload_size;

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8002c52:	1cdf      	adds	r7, r3, #3
{
 8002c54:	4693      	mov	fp, r2
 8002c56:	4604      	mov	r4, r0
 8002c58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8002c5a:	f027 0703 	bic.w	r7, r7, #3
    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8002c5e:	f10b 0843 	add.w	r8, fp, #67	; 0x43
{
 8002c62:	468a      	mov	sl, r1
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8002c64:	441d      	add	r5, r3
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8002c66:	f102 0640 	add.w	r6, r2, #64	; 0x40
 8002c6a:	f028 0803 	bic.w	r8, r8, #3

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 8002c6e:	223c      	movs	r2, #60	; 0x3c
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8002c70:	1bed      	subs	r5, r5, r7
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 8002c72:	2100      	movs	r1, #0
 8002c74:	f00b ffbd 	bl	800ebf2 <memset>
    end_of_pool =  ((CHAR *)pool_start) + pool_size;

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
    packet_ptr =         (CHAR *)rounded_pool_start;
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 8002c78:	eb07 0308 	add.w	r3, r7, r8
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8002c7c:	f025 0503 	bic.w	r5, r5, #3
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 8002c80:	f8c4 a004 	str.w	sl, [r4, #4]
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 8002c84:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 8002c88:	eb07 0a05 	add.w	sl, r7, r5

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 8002c8c:	459a      	cmp	sl, r3
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 8002c8e:	e9c4 7508 	strd	r7, r5, [r4, #32]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 8002c92:	f04f 0500 	mov.w	r5, #0
    while (next_packet_ptr <= end_of_pool)
 8002c96:	d346      	bcc.n	8002d26 <_nx_packet_pool_create+0xda>
 8002c98:	f107 0940 	add.w	r9, r7, #64	; 0x40
 8002c9c:	eb07 0e06 	add.w	lr, r7, r6
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8002ca0:	f04f 3bff 	mov.w	fp, #4294967295
 8002ca4:	eba7 0c03 	sub.w	ip, r7, r3
 8002ca8:	eba9 0903 	sub.w	r9, r9, r3
        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 8002cac:	ebae 0e03 	sub.w	lr, lr, r3
 8002cb0:	9701      	str	r7, [sp, #4]
 8002cb2:	e000      	b.n	8002cb6 <_nx_packet_pool_create+0x6a>
 8002cb4:	4603      	mov	r3, r0

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 8002cb6:	eb03 0008 	add.w	r0, r3, r8
 8002cba:	eb03 020c 	add.w	r2, r3, ip
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 8002cbe:	eb03 0609 	add.w	r6, r3, r9
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 8002cc2:	eb0e 0103 	add.w	r1, lr, r3
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 8002cc6:	2700      	movs	r7, #0
    while (next_packet_ptr <= end_of_pool)
 8002cc8:	4582      	cmp	sl, r0
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 8002cca:	61d3      	str	r3, [r2, #28]
        packets++;
 8002ccc:	f105 0501 	add.w	r5, r5, #1
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 8002cd0:	f843 400c 	str.w	r4, [r3, ip]
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 8002cd4:	6057      	str	r7, [r2, #4]
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8002cd6:	f8c2 b020 	str.w	fp, [r2, #32]
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 8002cda:	e9c2 6104 	strd	r6, r1, [r2, #16]
    while (next_packet_ptr <= end_of_pool)
 8002cde:	d2e9      	bcs.n	8002cb4 <_nx_packet_pool_create+0x68>
 8002ce0:	9f01      	ldr	r7, [sp, #4]
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 8002ce2:	eba3 0308 	sub.w	r3, r3, r8

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
    pool_ptr -> nx_packet_pool_total =      packets;

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 8002cea:	61e7      	str	r7, [r4, #28]
    pool_ptr -> nx_packet_pool_total =      packets;
 8002cec:	e9c4 5502 	strd	r5, r5, [r4, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002cf0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002cf4:	b672      	cpsid	i
    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 8002cf6:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <_nx_packet_pool_create+0xe0>)
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 8002cf8:	480d      	ldr	r0, [pc, #52]	; (8002d30 <_nx_packet_pool_create+0xe4>)
    if (_nx_packet_pool_created_ptr)
 8002cfa:	6813      	ldr	r3, [r2, #0]
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 8002cfc:	6020      	str	r0, [r4, #0]
    if (_nx_packet_pool_created_ptr)
 8002cfe:	b173      	cbz	r3, 8002d1e <_nx_packet_pool_create+0xd2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 8002d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8002d02:	639c      	str	r4, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 8002d04:	6354      	str	r4, [r2, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 8002d06:	e9c4 320d 	strd	r3, r2, [r4, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <_nx_packet_pool_create+0xe8>)
 8002d0c:	6813      	ldr	r3, [r2, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002d12:	f381 8810 	msr	PRIMASK, r1
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
}
 8002d16:	2000      	movs	r0, #0
 8002d18:	b003      	add	sp, #12
 8002d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_packet_pool_created_ptr =                  pool_ptr;
 8002d1e:	6014      	str	r4, [r2, #0]
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8002d20:	e9c4 440d 	strd	r4, r4, [r4, #52]	; 0x34
 8002d24:	e7f1      	b.n	8002d0a <_nx_packet_pool_create+0xbe>
    packet_ptr =         (CHAR *)rounded_pool_start;
 8002d26:	463b      	mov	r3, r7
 8002d28:	e7db      	b.n	8002ce2 <_nx_packet_pool_create+0x96>
 8002d2a:	bf00      	nop
 8002d2c:	200190d8 	.word	0x200190d8
 8002d30:	5041434b 	.word	0x5041434b
 8002d34:	200190d4 	.word	0x200190d4

08002d38 <_nx_packet_pool_initialize>:
VOID    _nx_packet_pool_initialize(VOID)
{

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	4902      	ldr	r1, [pc, #8]	; (8002d44 <_nx_packet_pool_initialize+0xc>)
    _nx_packet_pool_created_count =      0;
 8002d3c:	4a02      	ldr	r2, [pc, #8]	; (8002d48 <_nx_packet_pool_initialize+0x10>)
    _nx_packet_pool_created_ptr =        NX_NULL;
 8002d3e:	600b      	str	r3, [r1, #0]
    _nx_packet_pool_created_count =      0;
 8002d40:	6013      	str	r3, [r2, #0]
}
 8002d42:	4770      	bx	lr
 8002d44:	200190d8 	.word	0x200190d8
 8002d48:	200190d4 	.word	0x200190d4

08002d4c <_nx_packet_release>:
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d05c      	beq.n	8002e0a <_nx_packet_release+0xbe>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 8002d50:	6a02      	ldr	r2, [r0, #32]
 8002d52:	4603      	mov	r3, r0
 8002d54:	f1b2 3faa 	cmp.w	r2, #2863311530	; 0xaaaaaaaa
 8002d58:	d159      	bne.n	8002e0e <_nx_packet_release+0xc2>
{
 8002d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8002d5e:	f04f 36ff 	mov.w	r6, #4294967295
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002d62:	2400      	movs	r4, #0
            _tx_thread_preempt_disable++;
 8002d64:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002e14 <_nx_packet_release+0xc8>
 8002d68:	e033      	b.n	8002dd2 <_nx_packet_release+0x86>
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8002d6a:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8002d6c:	4290      	cmp	r0, r2
 8002d6e:	d047      	beq.n	8002e00 <_nx_packet_release+0xb4>
                    thread_ptr -> tx_thread_suspended_previous;
 8002d70:	6f57      	ldr	r7, [r2, #116]	; 0x74
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8002d72:	62c8      	str	r0, [r1, #44]	; 0x2c
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8002d74:	6747      	str	r7, [r0, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8002d76:	6f57      	ldr	r7, [r2, #116]	; 0x74
 8002d78:	6738      	str	r0, [r7, #112]	; 0x70
            pool_ptr -> nx_packet_pool_suspended_count--;
 8002d7a:	6b0f      	ldr	r7, [r1, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8002d7c:	f8d8 0000 	ldr.w	r0, [r8]
            pool_ptr -> nx_packet_pool_suspended_count--;
 8002d80:	3f01      	subs	r7, #1
            _tx_thread_preempt_disable++;
 8002d82:	3001      	adds	r0, #1
            pool_ptr -> nx_packet_pool_suspended_count--;
 8002d84:	630f      	str	r7, [r1, #48]	; 0x30
            _tx_thread_preempt_disable++;
 8002d86:	f8c8 0000 	str.w	r0, [r8]
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002d8a:	6694      	str	r4, [r2, #104]	; 0x68
 8002d8c:	f38c 8810 	msr	PRIMASK, ip
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 8002d90:	6f97      	ldr	r7, [r2, #120]	; 0x78
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8002d92:	f04f 3caa 	mov.w	ip, #2863311530	; 0xaaaaaaaa
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 8002d96:	6919      	ldr	r1, [r3, #16]
            _tx_thread_system_resume(thread_ptr);
 8002d98:	4610      	mov	r0, r2
            packet_ptr -> nx_packet_option_state = 0;
 8002d9a:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
            packet_ptr -> nx_packet_ip_version  =  0;
 8002d9e:	861c      	strh	r4, [r3, #48]	; 0x30
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 8002da0:	4439      	add	r1, r7
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 8002da2:	f883 4032 	strb.w	r4, [r3, #50]	; 0x32
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8002da6:	6fd7      	ldr	r7, [r2, #124]	; 0x7c
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 8002da8:	61dc      	str	r4, [r3, #28]
            packet_ptr -> nx_packet_next        =  NX_NULL;
 8002daa:	605c      	str	r4, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 8002dac:	619c      	str	r4, [r3, #24]
            packet_ptr -> nx_packet_length      =  0;
 8002dae:	625c      	str	r4, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8002db0:	635c      	str	r4, [r3, #52]	; 0x34
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 8002db2:	63dc      	str	r4, [r3, #60]	; 0x3c
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8002db4:	f8c3 c020 	str.w	ip, [r3, #32]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 8002db8:	e9c3 1102 	strd	r1, r1, [r3, #8]
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8002dbc:	603b      	str	r3, [r7, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8002dbe:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
            _tx_thread_system_resume(thread_ptr);
 8002dc2:	f00a fe8f 	bl	800dae4 <_tx_thread_system_resume>
 8002dc6:	462b      	mov	r3, r5
    while (packet_ptr)
 8002dc8:	b1bd      	cbz	r5, 8002dfa <_nx_packet_release+0xae>
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 8002dca:	6a2a      	ldr	r2, [r5, #32]
 8002dcc:	f1b2 3faa 	cmp.w	r2, #2863311530	; 0xaaaaaaaa
 8002dd0:	d118      	bne.n	8002e04 <_nx_packet_release+0xb8>
        next_packet =  packet_ptr -> nx_packet_next;
 8002dd2:	685d      	ldr	r5, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002dd4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002dd8:	b672      	cpsid	i
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8002dda:	6819      	ldr	r1, [r3, #0]
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 8002ddc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
        if (thread_ptr)
 8002dde:	2a00      	cmp	r2, #0
 8002de0:	d1c3      	bne.n	8002d6a <_nx_packet_release+0x1e>

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 8002de2:	688a      	ldr	r2, [r1, #8]
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8002de4:	69c8      	ldr	r0, [r1, #28]
            pool_ptr -> nx_packet_pool_available++;
 8002de6:	3201      	adds	r2, #1
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8002de8:	e9c3 0607 	strd	r0, r6, [r3, #28]
            pool_ptr -> nx_packet_pool_available++;
 8002dec:	608a      	str	r2, [r1, #8]
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 8002dee:	61cb      	str	r3, [r1, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002df0:	f38c 8810 	msr	PRIMASK, ip
 8002df4:	462b      	mov	r3, r5
    while (packet_ptr)
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	d1e7      	bne.n	8002dca <_nx_packet_release+0x7e>
        packet_ptr =  next_packet;
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 8002dfa:	2000      	movs	r0, #0
}
 8002dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 8002e00:	62cc      	str	r4, [r1, #44]	; 0x2c
 8002e02:	e7ba      	b.n	8002d7a <_nx_packet_release+0x2e>
            return(NX_PTR_ERROR);
 8002e04:	2007      	movs	r0, #7
}
 8002e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return(NX_SUCCESS);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	4770      	bx	lr
            return(NX_PTR_ERROR);
 8002e0e:	2007      	movs	r0, #7
}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20019244 	.word	0x20019244

08002e18 <_nx_packet_transmit_release>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002e18:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002e1c:	b672      	cpsid	i
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8002e1e:	6a03      	ldr	r3, [r0, #32]
 8002e20:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8002e24:	d015      	beq.n	8002e52 <_nx_packet_transmit_release+0x3a>
 8002e26:	3301      	adds	r3, #1
 8002e28:	d013      	beq.n	8002e52 <_nx_packet_transmit_release+0x3a>
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8002e2a:	6882      	ldr	r2, [r0, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8002e2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002e2e:	b470      	push	{r4, r5, r6}
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8002e30:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 8002e34:	f04f 36dd 	mov.w	r6, #3722304989	; 0xdddddddd

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 8002e38:	2400      	movs	r4, #0
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8002e3a:	442a      	add	r2, r5
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8002e3c:	1b5b      	subs	r3, r3, r5
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 8002e3e:	61c6      	str	r6, [r0, #28]
        packet_ptr -> nx_packet_ip_header_length = 0;
 8002e40:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8002e44:	6082      	str	r2, [r0, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8002e46:	6243      	str	r3, [r0, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002e48:	f381 8810 	msr	PRIMASK, r1
        status =  _nx_packet_release(packet_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	bc70      	pop	{r4, r5, r6}
 8002e50:	4770      	bx	lr
 8002e52:	f381 8810 	msr	PRIMASK, r1
        status =  _nx_packet_release(packet_ptr);
 8002e56:	f7ff bf79 	b.w	8002d4c <_nx_packet_release>
 8002e5a:	bf00      	nop

08002e5c <_nx_rarp_packet_deferred_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8002e5c:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002e5e:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002e62:	b672      	cpsid	i

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 8002e64:	f8d0 3c2c 	ldr.w	r3, [r0, #3116]	; 0xc2c
 8002e68:	b1e3      	cbz	r3, 8002ea4 <_nx_rarp_packet_deferred_receive+0x48>
        /* Return to caller.  */
        return;
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 8002e6a:	f8d0 2c30 	ldr.w	r2, [r0, #3120]	; 0xc30
 8002e6e:	b15a      	cbz	r2, 8002e88 <_nx_rarp_packet_deferred_receive+0x2c>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8002e70:	f8d0 2c34 	ldr.w	r2, [r0, #3124]	; 0xc34
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8002e74:	2300      	movs	r3, #0
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8002e76:	61d1      	str	r1, [r2, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8002e78:	61cb      	str	r3, [r1, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8002e7a:	f8c0 1c34 	str.w	r1, [r0, #3124]	; 0xc34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002e7e:	f384 8810 	msr	PRIMASK, r4
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
    }
}
 8002e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e86:	4770      	bx	lr
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 8002e88:	f8c0 1c30 	str.w	r1, [r0, #3120]	; 0xc30
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8002e8c:	f8c0 1c34 	str.w	r1, [r0, #3124]	; 0xc34
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 8002e90:	61ca      	str	r2, [r1, #28]
 8002e92:	f384 8810 	msr	PRIMASK, r4
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 8002e96:	2120      	movs	r1, #32
 8002e98:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
}
 8002e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 8002ea0:	f00a b8e6 	b.w	800d070 <_tx_event_flags_set>
 8002ea4:	f384 8810 	msr	PRIMASK, r4
        _nx_packet_release(packet_ptr);
 8002ea8:	4608      	mov	r0, r1
}
 8002eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
        _nx_packet_release(packet_ptr);
 8002eae:	f7ff bf4d 	b.w	8002d4c <_nx_packet_release>
 8002eb2:	bf00      	nop

08002eb4 <_nx_system_initialize>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 8002eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8002eb8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8002f24 <_nx_system_initialize+0x70>
 8002ebc:	4f10      	ldr	r7, [pc, #64]	; (8002f00 <_nx_system_initialize+0x4c>)
 8002ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4e0f      	ldr	r6, [pc, #60]	; (8002f04 <_nx_system_initialize+0x50>)
 8002ec6:	4313      	orrs	r3, r2
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8002ec8:	4d0f      	ldr	r5, [pc, #60]	; (8002f08 <_nx_system_initialize+0x54>)
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8002eca:	6831      	ldr	r1, [r6, #0]
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8002ecc:	682a      	ldr	r2, [r5, #0]
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8002ece:	430b      	orrs	r3, r1
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8002ed0:	4c0e      	ldr	r4, [pc, #56]	; (8002f0c <_nx_system_initialize+0x58>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	6822      	ldr	r2, [r4, #0]
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	d110      	bne.n	8002efc <_nx_system_initialize+0x48>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 8002eda:	f7ff ff2d 	bl	8002d38 <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 8002ede:	f7ff f8f1 	bl	80020c4 <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 8002ee2:	f000 f91b 	bl	800311c <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <_nx_system_initialize+0x5c>)
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <_nx_system_initialize+0x60>)
    _nx_system_build_options_1 = 0
 8002eea:	f8c8 2000 	str.w	r2, [r8]
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <_nx_system_initialize+0x64>)
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <_nx_system_initialize+0x68>)
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 8002ef2:	603b      	str	r3, [r7, #0]
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <_nx_system_initialize+0x6c>)
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 8002ef6:	6031      	str	r1, [r6, #0]
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8002ef8:	602a      	str	r2, [r5, #0]
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8002efa:	6023      	str	r3, [r4, #0]
#endif
}
 8002efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f00:	200190ec 	.word	0x200190ec
 8002f04:	200190e4 	.word	0x200190e4
 8002f08:	200190e0 	.word	0x200190e0
 8002f0c:	200190e8 	.word	0x200190e8
 8002f10:	801ff000 	.word	0x801ff000
 8002f14:	0064000a 	.word	0x0064000a
 8002f18:	050a014b 	.word	0x050a014b
 8002f1c:	1c20124a 	.word	0x1c20124a
 8002f20:	070a0a14 	.word	0x070a0a14
 8002f24:	200190dc 	.word	0x200190dc

08002f28 <_nx_tcp_enable>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_enable(NX_IP *ip_ptr)
{
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Loop through the listen requests and link them on the available list.  */
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
    {

        /* Link listen request to next listen request.  */
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8002f2a:	f600 13fc 	addw	r3, r0, #2556	; 0x9fc
 8002f2e:	f500 6122 	add.w	r1, r0, #2592	; 0xa20
    listen_ptr =  &(ip_ptr -> nx_ip_tcp_server_listen_reqs[0]);
 8002f32:	f600 17d8 	addw	r7, r0, #2520	; 0x9d8

    /* Make sure the last listen request has a NULL pointer.  */
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;

    /* Set the TCP packet queue processing function.  */
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 8002f36:	4e23      	ldr	r6, [pc, #140]	; (8002fc4 <_nx_tcp_enable+0x9c>)
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8002f38:	f8c0 39f4 	str.w	r3, [r0, #2548]	; 0x9f4
 8002f3c:	f600 238c 	addw	r3, r0, #2700	; 0xa8c
 8002f40:	f8c0 1a18 	str.w	r1, [r0, #2584]	; 0xa18
 8002f44:	f600 2168 	addw	r1, r0, #2664	; 0xa68
 8002f48:	f8c0 3a84 	str.w	r3, [r0, #2692]	; 0xa84
 8002f4c:	f600 23d4 	addw	r3, r0, #2772	; 0xad4
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 8002f50:	f8c0 7b40 	str.w	r7, [r0, #2880]	; 0xb40
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8002f54:	f600 2744 	addw	r7, r0, #2628	; 0xa44
 8002f58:	f8c0 3acc 	str.w	r3, [r0, #2764]	; 0xacc
 8002f5c:	f600 331c 	addw	r3, r0, #2844	; 0xb1c
 8002f60:	f8c0 1a60 	str.w	r1, [r0, #2656]	; 0xa60
 8002f64:	f500 612b 	add.w	r1, r0, #2736	; 0xab0
 8002f68:	f8c0 3b14 	str.w	r3, [r0, #2836]	; 0xb14
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 8002f6c:	2500      	movs	r5, #0

    /* Set the TCP periodic processing function.  */
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;

    /* Set the TCP fast periodic processing function.  */
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <_nx_tcp_enable+0xa0>)
{
 8002f70:	4604      	mov	r4, r0
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8002f72:	f8c0 7a3c 	str.w	r7, [r0, #2620]	; 0xa3c

    /* Set the TCP deferred cleanup check function.  */
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;

    /* Setup base timer variables.  */
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 8002f76:	270a      	movs	r7, #10
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 8002f78:	f8c0 39c4 	str.w	r3, [r0, #2500]	; 0x9c4
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <_nx_tcp_enable+0xa4>)
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8002f7e:	f8c0 1aa8 	str.w	r1, [r0, #2728]	; 0xaa8
 8002f82:	f600 21f8 	addw	r1, r0, #2808	; 0xaf8
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 8002f86:	f8c0 3c44 	str.w	r3, [r0, #3140]	; 0xc44
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <_nx_tcp_enable+0xa8>)
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8002f8c:	f8c0 1af0 	str.w	r1, [r0, #2800]	; 0xaf0
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 8002f90:	2114      	movs	r1, #20
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 8002f92:	601f      	str	r7, [r3, #0]
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <_nx_tcp_enable+0xac>)
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <_nx_tcp_enable+0xb0>)
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 8002f98:	f8c0 69c8 	str.w	r6, [r0, #2504]	; 0x9c8

    /*lint -e{778} suppress constant expression, since NX_TCP_TRANSMIT_TIMER_RATE can be redefined. */
    /*lint -e{835} -e{845} suppress operating on zero. */
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 8002f9c:	2664      	movs	r6, #100	; 0x64
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 8002f9e:	6019      	str	r1, [r3, #0]
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 8002fa0:	f8c0 29c0 	str.w	r2, [r0, #2496]	; 0x9c0

    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 8002fa4:	f645 52c0 	movw	r2, #24000	; 0x5dc0
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <_nx_tcp_enable+0xb4>)
    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <_nx_tcp_enable+0xb8>)
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 8002fac:	f8c0 5b38 	str.w	r5, [r0, #2872]	; 0xb38
    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 8002fb0:	601a      	str	r2, [r3, #0]
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 8002fb2:	600e      	str	r6, [r1, #0]

    _nx_ip_fast_periodic_timer_create(ip_ptr);
 8002fb4:	f003 fd5a 	bl	8006a6c <_nx_ip_fast_periodic_timer_create>

    /* Set the TCP packet receive function in the IP structure to indicate
       we are ready to receive TCP packets.  */
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <_nx_tcp_enable+0xbc>)

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 8002fba:	4628      	mov	r0, r5
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 8002fbc:	f8c4 39bc 	str.w	r3, [r4, #2492]	; 0x9bc
}
 8002fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	08003459 	.word	0x08003459
 8002fc8:	08002fe9 	.word	0x08002fe9
 8002fcc:	08007b71 	.word	0x08007b71
 8002fd0:	200190f0 	.word	0x200190f0
 8002fd4:	08003455 	.word	0x08003455
 8002fd8:	200190fc 	.word	0x200190fc
 8002fdc:	200190f4 	.word	0x200190f4
 8002fe0:	200190f8 	.word	0x200190f8
 8002fe4:	08003121 	.word	0x08003121

08002fe8 <_nx_tcp_fast_periodic_processing>:
ULONG          sockets;
ULONG          timer_rate;


    /* Pickup this timer's periodic rate.  */
    timer_rate =  _nx_tcp_fast_timer_rate;
 8002fe8:	4a4b      	ldr	r2, [pc, #300]	; (8003118 <_nx_tcp_fast_periodic_processing+0x130>)

    /* Pickup the number of created TCP sockets.  */
    sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 8002fea:	f8d0 39b8 	ldr.w	r3, [r0, #2488]	; 0x9b8
{
 8002fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Pickup the first socket.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 8002ff2:	f8d0 49b4 	ldr.w	r4, [r0, #2484]	; 0x9b4
    timer_rate =  _nx_tcp_fast_timer_rate;
 8002ff6:	f8d2 8000 	ldr.w	r8, [r2]

    /* Loop through the created sockets.  */
    while (sockets--)
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d046      	beq.n	800308c <_nx_tcp_fast_periodic_processing+0xa4>
 8002ffe:	1e5d      	subs	r5, r3, #1
 8003000:	4606      	mov	r6, r0

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;

                /* Retransmit the packet. */
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 8003002:	2700      	movs	r7, #0
 8003004:	e008      	b.n	8003018 <_nx_tcp_fast_periodic_processing+0x30>
                socket_ptr -> nx_tcp_socket_timeout -= timer_rate;
 8003006:	eba3 0308 	sub.w	r3, r3, r8
 800300a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    while (sockets--)
 800300e:	3d01      	subs	r5, #1
                _nx_tcp_socket_block_cleanup(socket_ptr);
            }
        }

        /* Move to the next TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8003010:	f8d4 4118 	ldr.w	r4, [r4, #280]	; 0x118
    while (sockets--)
 8003014:	1c6b      	adds	r3, r5, #1
 8003016:	d039      	beq.n	800308c <_nx_tcp_fast_periodic_processing+0xa4>
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 8003018:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800301a:	2b04      	cmp	r3, #4
 800301c:	d909      	bls.n	8003032 <_nx_tcp_fast_periodic_processing+0x4a>
 800301e:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8003022:	429a      	cmp	r2, r3
 8003024:	d038      	beq.n	8003098 <_nx_tcp_fast_periodic_processing+0xb0>
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 8003026:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003028:	4543      	cmp	r3, r8
 800302a:	d93c      	bls.n	80030a6 <_nx_tcp_fast_periodic_processing+0xbe>
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout -= timer_rate;
 800302c:	eba3 0308 	sub.w	r3, r3, r8
 8003030:	6563      	str	r3, [r4, #84]	; 0x54
        if (socket_ptr -> nx_tcp_socket_timeout)
 8003032:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0e9      	beq.n	800300e <_nx_tcp_fast_periodic_processing+0x26>
            if (socket_ptr -> nx_tcp_socket_timeout > timer_rate)
 800303a:	4543      	cmp	r3, r8
 800303c:	d8e3      	bhi.n	8003006 <_nx_tcp_fast_periodic_processing+0x1e>
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800303e:	e9d4 3238 	ldrd	r3, r2, [r4, #224]	; 0xe0
 8003042:	4293      	cmp	r3, r2
 8003044:	d302      	bcc.n	800304c <_nx_tcp_fast_periodic_processing+0x64>
 8003046:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 800304a:	b309      	cbz	r1, 8003090 <_nx_tcp_fast_periodic_processing+0xa8>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 800304c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003050:	428a      	cmp	r2, r1
 8003052:	d803      	bhi.n	800305c <_nx_tcp_fast_periodic_processing+0x74>
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8003054:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
 8003058:	2a01      	cmp	r2, #1
 800305a:	d019      	beq.n	8003090 <_nx_tcp_fast_periodic_processing+0xa8>
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800305c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800305e:	1ed1      	subs	r1, r2, #3
 8003060:	2901      	cmp	r1, #1
 8003062:	d947      	bls.n	80030f4 <_nx_tcp_fast_periodic_processing+0x10c>
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 8003064:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8003068:	b311      	cbz	r1, 80030b0 <_nx_tcp_fast_periodic_processing+0xc8>
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800306a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 800306c:	4621      	mov	r1, r4
 800306e:	2200      	movs	r2, #0
 8003070:	4630      	mov	r0, r6
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8003072:	3b01      	subs	r3, #1
    while (sockets--)
 8003074:	3d01      	subs	r5, #1
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8003076:	66e3      	str	r3, [r4, #108]	; 0x6c
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 8003078:	f000 fa76 	bl	8003568 <_nx_tcp_socket_retransmit>
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800307c:	6c23      	ldr	r3, [r4, #64]	; 0x40
                socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800307e:	f884 70aa 	strb.w	r7, [r4, #170]	; 0xaa
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 8003082:	6663      	str	r3, [r4, #100]	; 0x64
    while (sockets--)
 8003084:	1c6b      	adds	r3, r5, #1
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8003086:	f8d4 4118 	ldr.w	r4, [r4, #280]	; 0x118
    while (sockets--)
 800308a:	d1c5      	bne.n	8003018 <_nx_tcp_fast_periodic_processing+0x30>
    }
}
 800308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                _nx_tcp_socket_connection_reset(socket_ptr);
 8003090:	4620      	mov	r0, r4
 8003092:	f000 fa13 	bl	80034bc <_nx_tcp_socket_connection_reset>
 8003096:	e7ba      	b.n	800300e <_nx_tcp_fast_periodic_processing+0x26>
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 8003098:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
 800309c:	429a      	cmp	r2, r3
 800309e:	d2c8      	bcs.n	8003032 <_nx_tcp_fast_periodic_processing+0x4a>
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 80030a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030a2:	4543      	cmp	r3, r8
 80030a4:	d8c2      	bhi.n	800302c <_nx_tcp_fast_periodic_processing+0x44>
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 80030a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80030a8:	4620      	mov	r0, r4
 80030aa:	f000 f873 	bl	8003194 <_nx_tcp_packet_send_ack>
 80030ae:	e7c0      	b.n	8003032 <_nx_tcp_fast_periodic_processing+0x4a>
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 80030b0:	6e21      	ldr	r1, [r4, #96]	; 0x60
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 80030b2:	b909      	cbnz	r1, 80030b8 <_nx_tcp_fast_periodic_processing+0xd0>
 80030b4:	2a06      	cmp	r2, #6
 80030b6:	d9d8      	bls.n	800306a <_nx_tcp_fast_periodic_processing+0x82>
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 80030b8:	f022 0102 	bic.w	r1, r2, #2
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 80030bc:	2909      	cmp	r1, #9
 80030be:	d007      	beq.n	80030d0 <_nx_tcp_fast_periodic_processing+0xe8>
 80030c0:	2a07      	cmp	r2, #7
 80030c2:	d005      	beq.n	80030d0 <_nx_tcp_fast_periodic_processing+0xe8>
            else if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 80030c4:	2a0a      	cmp	r2, #10
 80030c6:	d1a2      	bne.n	800300e <_nx_tcp_fast_periodic_processing+0x26>
                _nx_tcp_socket_block_cleanup(socket_ptr);
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 f9e1 	bl	8003490 <_nx_tcp_socket_block_cleanup>
 80030ce:	e79e      	b.n	800300e <_nx_tcp_fast_periodic_processing+0x26>
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 80030d0:	3301      	adds	r3, #1
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 80030d2:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 80030d6:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 80030da:	fb01 f003 	mul.w	r0, r1, r3
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80030de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 80030e0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 80030e4:	4082      	lsls	r2, r0
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80030e6:	3901      	subs	r1, #1
 80030e8:	4620      	mov	r0, r4
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 80030ea:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80030ee:	f000 f94f 	bl	8003390 <_nx_tcp_packet_send_fin>
 80030f2:	e78c      	b.n	800300e <_nx_tcp_fast_periodic_processing+0x26>
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 80030f4:	3301      	adds	r3, #1
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 80030f6:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 80030fa:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 80030fe:	fb01 f003 	mul.w	r0, r1, r3
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8003102:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 8003104:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8003108:	4082      	lsls	r2, r0
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800310a:	3901      	subs	r1, #1
 800310c:	4620      	mov	r0, r4
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800310e:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8003112:	f000 f94b 	bl	80033ac <_nx_tcp_packet_send_syn>
 8003116:	e77a      	b.n	800300e <_nx_tcp_fast_periodic_processing+0x26>
 8003118:	200190f0 	.word	0x200190f0

0800311c <_nx_tcp_initialize>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop

08003120 <_nx_tcp_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8003120:	b430      	push	{r4, r5}
 8003122:	4603      	mov	r3, r0
 8003124:	460a      	mov	r2, r1
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003126:	f3ef 8405 	mrs	r4, IPSR
        return;
    }
#endif

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800312a:	4d18      	ldr	r5, [pc, #96]	; (800318c <_nx_tcp_packet_receive+0x6c>)
 800312c:	682d      	ldr	r5, [r5, #0]
 800312e:	432c      	orrs	r4, r5
 8003130:	d105      	bne.n	800313e <_nx_tcp_packet_receive+0x1e>
 8003132:	4d17      	ldr	r5, [pc, #92]	; (8003190 <_nx_tcp_packet_receive+0x70>)
 8003134:	f500 64d3 	add.w	r4, r0, #1688	; 0x698
 8003138:	682d      	ldr	r5, [r5, #0]
 800313a:	42a5      	cmp	r5, r4
 800313c:	d023      	beq.n	8003186 <_nx_tcp_packet_receive+0x66>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800313e:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003142:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Add the packet to the TCP message queue.  */
        if (ip_ptr -> nx_ip_tcp_queue_head)
 8003144:	f8d3 19cc 	ldr.w	r1, [r3, #2508]	; 0x9cc
 8003148:	b1a1      	cbz	r1, 8003174 <_nx_tcp_packet_receive+0x54>
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;

            /* Increment the count of incoming TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 800314a:	f8d3 19d4 	ldr.w	r1, [r3, #2516]	; 0x9d4
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 800314e:	2400      	movs	r4, #0
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 8003150:	f8d3 59d0 	ldr.w	r5, [r3, #2512]	; 0x9d0
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 8003154:	3101      	adds	r1, #1
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 8003156:	61ea      	str	r2, [r5, #28]
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
 8003158:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 800315c:	61d4      	str	r4, [r2, #28]
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 800315e:	f8c3 19d4 	str.w	r1, [r3, #2516]	; 0x9d4
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003162:	f380 8810 	msr	PRIMASK, r0

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the TCP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 8003166:	2200      	movs	r2, #0
 8003168:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 800316c:	2180      	movs	r1, #128	; 0x80

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the TCP processing directly.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
    }
}
 800316e:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 8003170:	f009 bf7e 	b.w	800d070 <_tx_event_flags_set>
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 8003174:	2401      	movs	r4, #1
            ip_ptr -> nx_ip_tcp_queue_head =        packet_ptr;
 8003176:	f8c3 29cc 	str.w	r2, [r3, #2508]	; 0x9cc
            ip_ptr -> nx_ip_tcp_queue_tail =        packet_ptr;
 800317a:	f8c3 29d0 	str.w	r2, [r3, #2512]	; 0x9d0
            packet_ptr -> nx_packet_queue_next =    NX_NULL;
 800317e:	61d1      	str	r1, [r2, #28]
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 8003180:	f8c3 49d4 	str.w	r4, [r3, #2516]	; 0x9d4
 8003184:	e7ed      	b.n	8003162 <_nx_tcp_packet_receive+0x42>
}
 8003186:	bc30      	pop	{r4, r5}
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 8003188:	f004 bdb6 	b.w	8007cf8 <_nx_tcp_packet_process>
 800318c:	2000007c 	.word	0x2000007c
 8003190:	20019248 	.word	0x20019248

08003194 <_nx_tcp_packet_send_ack>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_ack(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 8003194:	b530      	push	{r4, r5, lr}
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 8003196:	2400      	movs	r4, #0
{
 8003198:	b085      	sub	sp, #20
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800319a:	460a      	mov	r2, r1
 800319c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800319e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80031a2:	9400      	str	r4, [sp, #0]
{
 80031a4:	4605      	mov	r5, r0
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 80031a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80031aa:	f000 f807 	bl	80031bc <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 80031ae:	4b02      	ldr	r3, [pc, #8]	; (80031b8 <_nx_tcp_packet_send_ack+0x24>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	656b      	str	r3, [r5, #84]	; 0x54
}
 80031b4:	b005      	add	sp, #20
 80031b6:	bd30      	pop	{r4, r5, pc}
 80031b8:	200190fc 	.word	0x200190fc

080031bc <_nx_tcp_packet_send_control>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_control(NX_TCP_SOCKET *socket_ptr, ULONG control_bits, ULONG tx_sequence,
                                  ULONG ack_number, ULONG option_word_1, ULONG option_word_2, UCHAR *data)
{
 80031bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c0:	4604      	mov	r4, r0
 80031c2:	b089      	sub	sp, #36	; 0x24
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 80031c4:	f8d0 80ac 	ldr.w	r8, [r0, #172]	; 0xac

    if (control_bits & NX_TCP_SYN_BIT)
    {

        /* Set header size. */
        header_size = NX_TCP_SYN_HEADER;
 80031c8:	f411 3b00 	ands.w	fp, r1, #131072	; 0x20000
 80031cc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
{
 80031d0:	460d      	mov	r5, r1
 80031d2:	4691      	mov	r9, r2
 80031d4:	461f      	mov	r7, r3
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {

            /*lint -e{835} -e{845} suppress operating on zero. */
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 80031d6:	f04f 0238 	mov.w	r2, #56	; 0x38
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	f8d8 0638 	ldr.w	r0, [r8, #1592]	; 0x638
 80031e2:	a907      	add	r1, sp, #28
        header_size = NX_TCP_SYN_HEADER;
 80031e4:	bf0c      	ite	eq
 80031e6:	f04f 4aa0 	moveq.w	sl, #1342177280	; 0x50000000
 80031ea:	f04f 4ae0 	movne.w	sl, #1879048192	; 0x70000000
 80031ee:	9605      	str	r6, [sp, #20]
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 80031f0:	f7ff fc94 	bl	8002b1c <_nx_packet_allocate>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	f040 80a3 	bne.w	8003340 <_nx_tcp_packet_send_control+0x184>
        }
    }
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Check to see if the packet has enough room to fill with the max TCP header (SYN + probe data).  */
    if ((UINT)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr) < (NX_TCP_SYN_SIZE + 1))
 80031fa:	9807      	ldr	r0, [sp, #28]
 80031fc:	6886      	ldr	r6, [r0, #8]
 80031fe:	6943      	ldr	r3, [r0, #20]
 8003200:	1b9b      	subs	r3, r3, r6
 8003202:	2b1c      	cmp	r3, #28
 8003204:	f240 80a4 	bls.w	8003350 <_nx_tcp_packet_send_control+0x194>
        _nx_packet_release(packet_ptr);
        return;
    }

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized in _nx_packet_allocate. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 8003208:	6963      	ldr	r3, [r4, #20]

    /* Allocate a packet for the control message.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800320a:	2b04      	cmp	r3, #4
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 800320c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8003210:	d101      	bne.n	8003216 <_nx_tcp_packet_send_control+0x5a>
    {

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 8003212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003214:	6343      	str	r3, [r0, #52]	; 0x34

    /* Build the control request in the TCP header.  */
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
    tcp_header_ptr -> nx_tcp_sequence_number =      tx_sequence;
    tcp_header_ptr -> nx_tcp_acknowledgment_number = ack_number;
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 8003216:	9b05      	ldr	r3, [sp, #20]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8003218:	ea87 4137 	eor.w	r1, r7, r7, ror #16
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 800321c:	68e2      	ldr	r2, [r4, #12]
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 800321e:	f04f 0c14 	mov.w	ip, #20
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 8003222:	431d      	orrs	r5, r3
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 8003224:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8003226:	0a09      	lsrs	r1, r1, #8
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 8003228:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 800322c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 8003230:	f106 0214 	add.w	r2, r6, #20
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 8003234:	ea45 0a0a 	orr.w	sl, r5, sl
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8003238:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 800323c:	60c2      	str	r2, [r0, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800323e:	ea83 4e33 	eor.w	lr, r3, r3, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8003242:	ea89 4239 	eor.w	r2, r9, r9, ror #16
    socket_ptr -> nx_tcp_socket_rx_sequence_acked =    ack_number;
 8003246:	6527      	str	r7, [r4, #80]	; 0x50
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8003248:	ea8a 453a 	eor.w	r5, sl, sl, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800324c:	f04f 0c00 	mov.w	ip, #0
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8003250:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8003254:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8003256:	0a2d      	lsrs	r5, r5, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8003258:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800325c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8003260:	ea81 2137 	eor.w	r1, r1, r7, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8003264:	ea8e 2333 	eor.w	r3, lr, r3, ror #8
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 8003268:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800326c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8003270:	ea82 2239 	eor.w	r2, r2, r9, ror #8
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 8003274:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8003278:	ea85 253a 	eor.w	r5, r5, sl, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800327c:	60b1      	str	r1, [r6, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800327e:	f8c6 c010 	str.w	ip, [r6, #16]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8003282:	60f5      	str	r5, [r6, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8003284:	e9c6 3200 	strd	r3, r2, [r6]

    /* Check whether or not data is set. */
    if (data)
 8003288:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800328a:	b143      	cbz	r3, 800329e <_nx_tcp_packet_send_control+0xe2>
    {

        /* Zero window probe data exist. */
        *packet_ptr -> nx_packet_append_ptr++ = *data;
 800328c:	f106 0315 	add.w	r3, r6, #21
 8003290:	60c3      	str	r3, [r0, #12]
 8003292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	7533      	strb	r3, [r6, #20]
        packet_ptr -> nx_packet_length++;
 8003298:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800329a:	3301      	adds	r3, #1
 800329c:	6243      	str	r3, [r0, #36]	; 0x24
    }

    /* Whether it is a SYN packet. */
    if (control_bits & NX_TCP_SYN_BIT)
 800329e:	f1bb 0f00 	cmp.w	fp, #0
 80032a2:	d01a      	beq.n	80032da <_nx_tcp_packet_send_control+0x11e>
    {

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the TCP header.  */
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 80032a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032a6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80032a8:	ea83 4233 	eor.w	r2, r3, r3, ror #16
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 80032ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c

        /* Set options. */
        /*lint --e{927} --e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 80032ae:	68c1      	ldr	r1, [r0, #12]
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 80032b0:	ea83 4333 	eor.w	r3, r3, r3, ror #16
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 80032b4:	0a12      	lsrs	r2, r2, #8
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 80032b6:	0a1b      	lsrs	r3, r3, #8
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 80032b8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 80032bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 80032c0:	ea82 2235 	eor.w	r2, r2, r5, ror #8
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 80032c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80032c6:	ea83 2335 	eor.w	r3, r3, r5, ror #8
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 80032ca:	600a      	str	r2, [r1, #0]
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;

        /* Adjust packet information. */
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 80032cc:	f101 0208 	add.w	r2, r1, #8
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;
 80032d0:	604b      	str	r3, [r1, #4]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 80032d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 80032d4:	60c2      	str	r2, [r0, #12]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 80032d6:	3308      	adds	r3, #8
 80032d8:	6243      	str	r3, [r0, #36]	; 0x24
    }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 80032da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032dc:	6962      	ldr	r2, [r4, #20]
 80032de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032e0:	f011 0104 	ands.w	r1, r1, #4
 80032e4:	d12f      	bne.n	8003346 <_nx_tcp_packet_send_control+0x18a>
    {


        /* Set the packet source IP address. */
#ifndef NX_DISABLE_IPV4
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 80032e6:	2a04      	cmp	r2, #4
 80032e8:	d04b      	beq.n	8003382 <_nx_tcp_packet_send_control+0x1c6>
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 80032ea:	2a06      	cmp	r2, #6
 80032ec:	d14d      	bne.n	800338a <_nx_tcp_packet_send_control+0x1ce>
        {

            /* For IPv6, use the source address specified in the socket outgoing interface. */
            source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 80032ee:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 80032f2:	f104 0118 	add.w	r1, r4, #24
            source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 80032f6:	3308      	adds	r3, #8
        }
#endif /* FEATURE_NX_IPV6 */

        /* Calculate the TCP checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 80032f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80032fa:	9100      	str	r1, [sp, #0]
 80032fc:	2106      	movs	r1, #6
 80032fe:	f7fe fd61 	bl	8001dc4 <_nx_ip_checksum_compute>
                                            (UINT)packet_ptr -> nx_packet_length, source_ip, dest_ip);

        checksum = ~checksum & NX_LOWER_16_MASK;
 8003302:	43c0      	mvns	r0, r0
 8003304:	6962      	ldr	r2, [r4, #20]

        /* Move the checksum into header.  */
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
        tcp_header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 8003306:	0403      	lsls	r3, r0, #16
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8003308:	ea43 4033 	orr.w	r0, r3, r3, ror #16
 800330c:	0a00      	lsrs	r0, r0, #8
 800330e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8003312:	ea80 2033 	eor.w	r0, r0, r3, ror #8
 8003316:	6130      	str	r0, [r6, #16]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

#ifndef NX_DISABLE_IPV4
    /* Send the TCP packet to the IP component.  */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8003318:	2a04      	cmp	r2, #4
 800331a:	d01e      	beq.n	800335a <_nx_tcp_packet_send_control+0x19e>
                           socket_ptr -> nx_tcp_socket_next_hop_address);
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 800331c:	2a06      	cmp	r2, #6
 800331e:	d10f      	bne.n	8003340 <_nx_tcp_packet_send_control+0x184>
    {

        /* The IPv6 packet interface must be set before sending. Set to the TCP socket outgoing interface. */
        packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 8003320:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138

        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
                             socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8003324:	3418      	adds	r4, #24
        packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 8003326:	9907      	ldr	r1, [sp, #28]
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
 8003328:	4640      	mov	r0, r8
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
 800332a:	f103 0508 	add.w	r5, r3, #8
        packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 800332e:	634b      	str	r3, [r1, #52]	; 0x34
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
 8003330:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003332:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8003336:	f8d8 4ee8 	ldr.w	r4, [r8, #3816]	; 0xee8
 800333a:	9400      	str	r4, [sp, #0]
 800333c:	f004 f80c 	bl	8007358 <_nx_ipv6_packet_send>
    }
#endif /* FEATURE_NX_IPV6 */
}
 8003340:	b009      	add	sp, #36	; 0x24
 8003342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 8003346:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800334e:	e7e3      	b.n	8003318 <_nx_tcp_packet_send_control+0x15c>
        _nx_packet_release(packet_ptr);
 8003350:	f7ff fcfc 	bl	8002d4c <_nx_packet_release>
}
 8003354:	b009      	add	sp, #36	; 0x24
 8003356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800335a:	f44f 25c0 	mov.w	r5, #393216	; 0x60000
 800335e:	69a2      	ldr	r2, [r4, #24]
 8003360:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003362:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003366:	9501      	str	r5, [sp, #4]
 8003368:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800336c:	9003      	str	r0, [sp, #12]
 800336e:	4640      	mov	r0, r8
 8003370:	9502      	str	r5, [sp, #8]
 8003372:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8003376:	9907      	ldr	r1, [sp, #28]
 8003378:	9500      	str	r5, [sp, #0]
 800337a:	f7fe fecd 	bl	8002118 <_nx_ip_packet_send>
 800337e:	6962      	ldr	r2, [r4, #20]
 8003380:	e7cc      	b.n	800331c <_nx_tcp_packet_send_control+0x160>
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 8003382:	3314      	adds	r3, #20
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 8003384:	f104 0118 	add.w	r1, r4, #24
 8003388:	e7b6      	b.n	80032f8 <_nx_tcp_packet_send_control+0x13c>
ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800338a:	460b      	mov	r3, r1
 800338c:	e7b4      	b.n	80032f8 <_nx_tcp_packet_send_control+0x13c>
 800338e:	bf00      	nop

08003390 <_nx_tcp_packet_send_fin>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_fin(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 8003390:	b510      	push	{r4, lr}
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 8003392:	2400      	movs	r4, #0
{
 8003394:	b084      	sub	sp, #16
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 8003396:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003398:	460a      	mov	r2, r1
 800339a:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 800339e:	9400      	str	r4, [sp, #0]
 80033a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80033a4:	f7ff ff0a 	bl	80031bc <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);
}
 80033a8:	b004      	add	sp, #16
 80033aa:	bd10      	pop	{r4, pc}

080033ac <_nx_tcp_packet_send_syn>:
    }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
    /* Update the mss value based on IP version type. */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 80033ac:	6943      	ldr	r3, [r0, #20]
 80033ae:	2b04      	cmp	r3, #4
{
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4604      	mov	r4, r0
 80033b4:	b084      	sub	sp, #16
 80033b6:	460d      	mov	r5, r1
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 80033b8:	d030      	beq.n	800341c <_nx_tcp_packet_send_syn+0x70>

    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d11f      	bne.n	80033fe <_nx_tcp_packet_send_syn+0x52>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV6_HEADER)) - sizeof(NX_TCP_HEADER));
 80033be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    }
#endif /* FEATURE_NX_IPV6 */

    mss &= 0x0000FFFFUL;

    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 80033c2:	6923      	ldr	r3, [r4, #16]
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV6_HEADER)) - sizeof(NX_TCP_HEADER));
 80033c4:	3a3c      	subs	r2, #60	; 0x3c
    mss &= 0x0000FFFFUL;
 80033c6:	b292      	uxth	r2, r2
    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d22e      	bcs.n	800342a <_nx_tcp_packet_send_syn+0x7e>
 80033cc:	b36b      	cbz	r3, 800342a <_nx_tcp_packet_send_syn+0x7e>
 80033ce:	f043 7101 	orr.w	r1, r3, #33816576	; 0x2040000

        /* Use the custom MSS. */
        mss = socket_ptr -> nx_tcp_socket_mss;
    }

    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 80033d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80033d4:	2a04      	cmp	r2, #4
 80033d6:	d018      	beq.n	800340a <_nx_tcp_packet_send_syn+0x5e>
        socket_ptr -> nx_tcp_rcv_win_scale_value = scale_factor;
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Send SYN or SYN+ACK packet according to socket state. */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 80033d8:	2a03      	cmp	r2, #3
        socket_ptr -> nx_tcp_socket_connect_mss = mss;
 80033da:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 80033dc:	d029      	beq.n	8003432 <_nx_tcp_packet_send_syn+0x86>
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
                                    0, option_word_1, option_word_2, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_SYN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 80033de:	481c      	ldr	r0, [pc, #112]	; (8003450 <_nx_tcp_packet_send_syn+0xa4>)
 80033e0:	2600      	movs	r6, #0
 80033e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80033e4:	462a      	mov	r2, r5
 80033e6:	9100      	str	r1, [sp, #0]
 80033e8:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
 80033ec:	9001      	str	r0, [sp, #4]
 80033ee:	4620      	mov	r0, r4
 80033f0:	9602      	str	r6, [sp, #8]
 80033f2:	f7ff fee3 	bl	80031bc <_nx_tcp_packet_send_control>
                                    socket_ptr -> nx_tcp_socket_rx_sequence, option_word_1, option_word_2, NX_NULL);
    }

    /* Initialize recover sequence and previous cumulative acknowledgment. */
    socket_ptr -> nx_tcp_socket_tx_sequence_recover = tx_sequence;
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 80033f6:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
}
 80033fa:	b004      	add	sp, #16
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 80033fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8003400:	f04f 7101 	mov.w	r1, #33816576	; 0x2040000
    mss &= 0x0000FFFFUL;
 8003404:	2300      	movs	r3, #0
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 8003406:	2a04      	cmp	r2, #4
 8003408:	d1e6      	bne.n	80033d8 <_nx_tcp_packet_send_syn+0x2c>
 800340a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800340c:	4293      	cmp	r3, r2
 800340e:	bf28      	it	cs
 8003410:	4613      	movcs	r3, r2
            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 8003412:	fb03 f203 	mul.w	r2, r3, r3
 8003416:	62e3      	str	r3, [r4, #44]	; 0x2c
        socket_ptr -> nx_tcp_socket_connect_mss2 =
 8003418:	63e2      	str	r2, [r4, #60]	; 0x3c
 800341a:	e7e0      	b.n	80033de <_nx_tcp_packet_send_syn+0x32>
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 800341c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800341e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 8003420:	6923      	ldr	r3, [r4, #16]
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 8003422:	3a28      	subs	r2, #40	; 0x28
    mss &= 0x0000FFFFUL;
 8003424:	b292      	uxth	r2, r2
    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 8003426:	4293      	cmp	r3, r2
 8003428:	d3d0      	bcc.n	80033cc <_nx_tcp_packet_send_syn+0x20>
 800342a:	f042 7101 	orr.w	r1, r2, #33816576	; 0x2040000
    mss &= 0x0000FFFFUL;
 800342e:	4613      	mov	r3, r2
 8003430:	e7cf      	b.n	80033d2 <_nx_tcp_packet_send_syn+0x26>
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
 8003432:	2300      	movs	r3, #0
 8003434:	4806      	ldr	r0, [pc, #24]	; (8003450 <_nx_tcp_packet_send_syn+0xa4>)
 8003436:	9100      	str	r1, [sp, #0]
 8003438:	462a      	mov	r2, r5
 800343a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800343e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8003442:	4620      	mov	r0, r4
 8003444:	f7ff feba 	bl	80031bc <_nx_tcp_packet_send_control>
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 8003448:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
}
 800344c:	b004      	add	sp, #16
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	01010100 	.word	0x01010100

08003454 <_nx_tcp_periodic_processing>:
        keepalive_enabled = socket_ptr -> nx_tcp_socket_keepalive_enabled;
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif
}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop

08003458 <_nx_tcp_queue_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_queue_process(NX_IP *ip_ptr)
{
 8003458:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800345a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800345e:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE

    /* Remove the TCP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 8003460:	2500      	movs	r5, #0
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
 8003462:	f8d0 39cc 	ldr.w	r3, [r0, #2508]	; 0x9cc
    ip_ptr -> nx_ip_tcp_queue_tail =  NX_NULL;
 8003466:	f8c0 59d0 	str.w	r5, [r0, #2512]	; 0x9d0
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 800346a:	f8c0 59cc 	str.w	r5, [r0, #2508]	; 0x9cc
    ip_ptr -> nx_ip_tcp_received_packet_count =  0;
 800346e:	f8c0 59d4 	str.w	r5, [r0, #2516]	; 0x9d4
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003472:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire TCP message queue and process packets
       one by one.  */
    while (queue_head)
 8003476:	b14b      	cbz	r3, 800348c <_nx_tcp_queue_process+0x34>
 8003478:	4604      	mov	r4, r0
    {

        /* Pickup the first queue TCP message and remove it from the
           TCP queue.  */
        packet_ptr =  queue_head;
        queue_head =  queue_head -> nx_packet_queue_next;
 800347a:	69de      	ldr	r6, [r3, #28]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Process the packet.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800347c:	4619      	mov	r1, r3
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800347e:	61dd      	str	r5, [r3, #28]
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 8003480:	4620      	mov	r0, r4
 8003482:	f004 fc39 	bl	8007cf8 <_nx_tcp_packet_process>
    while (queue_head)
 8003486:	4633      	mov	r3, r6
 8003488:	2e00      	cmp	r6, #0
 800348a:	d1f6      	bne.n	800347a <_nx_tcp_queue_process+0x22>
    }
}
 800348c:	bd70      	pop	{r4, r5, r6, pc}
 800348e:	bf00      	nop

08003490 <_nx_tcp_socket_block_cleanup>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_block_cleanup(NX_TCP_SOCKET *socket_ptr)
{
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4604      	mov	r4, r0

    /* Clean up the connect IP address.  */

    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 8003494:	2500      	movs	r5, #0
#ifdef FEATURE_NX_IPV6
    /* Clean up the IP address field. */
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8003496:	3018      	adds	r0, #24
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 8003498:	6165      	str	r5, [r4, #20]
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 800349a:	f7ff fa8b 	bl	80029b4 <SET_UNSPECIFIED_ADDRESS>

    /* Reset fast recovery stage. */
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;

    /* Connection needs to be closed down immediately.  */
    if (socket_ptr -> nx_tcp_socket_client_type)
 800349e:	68a3      	ldr	r3, [r4, #8]
    socket_ptr -> nx_tcp_socket_connect_port = 0;
 80034a0:	62a5      	str	r5, [r4, #40]	; 0x28
    if (socket_ptr -> nx_tcp_socket_client_type)
 80034a2:	42ab      	cmp	r3, r5
    socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 80034a4:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
    socket_ptr -> nx_tcp_socket_timeout = 0;
 80034a8:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Server socket, return to LISTEN state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 80034ac:	bf14      	ite	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	2302      	moveq	r3, #2
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 80034b2:	67a5      	str	r5, [r4, #120]	; 0x78
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 80034b4:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 80034b8:	6463      	str	r3, [r4, #68]	; 0x44
    }
}
 80034ba:	bd38      	pop	{r3, r4, r5, pc}

080034bc <_nx_tcp_socket_connection_reset>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_connection_reset(NX_TCP_SOCKET *socket_ptr)
{
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4604      	mov	r4, r0

UINT saved_state;

    /* Save the current state of the socket.  */
    saved_state =  socket_ptr -> nx_tcp_socket_state;
 80034c0:	6c45      	ldr	r5, [r0, #68]	; 0x44

    /* Cleanup the transmission control block.  */
    _nx_tcp_socket_block_cleanup(socket_ptr);
 80034c2:	f7ff ffe5 	bl	8003490 <_nx_tcp_socket_block_cleanup>

    /* Check for queued sent packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 80034c6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80034ca:	bb7b      	cbnz	r3, 800352c <_nx_tcp_socket_connection_reset+0x70>
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
    }

    /* Check for queued receive packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 80034cc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80034d0:	b11b      	cbz	r3, 80034da <_nx_tcp_socket_connection_reset+0x1e>
 80034d2:	e027      	b.n	8003524 <_nx_tcp_socket_connection_reset+0x68>
    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 80034d4:	2100      	movs	r1, #0
 80034d6:	f004 fe7f 	bl	80081d8 <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 80034da:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 80034de:	2800      	cmp	r0, #0
 80034e0:	d1f8      	bne.n	80034d4 <_nx_tcp_socket_connection_reset+0x18>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 80034e2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80034e6:	b130      	cbz	r0, 80034f6 <_nx_tcp_socket_connection_reset+0x3a>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 80034e8:	2100      	movs	r1, #0
 80034ea:	f000 fa11 	bl	8003910 <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 80034ee:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d1f8      	bne.n	80034e8 <_nx_tcp_socket_connection_reset+0x2c>
    }

    /* Check for suspended connect thread.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 80034f6:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 80034fa:	b110      	cbz	r0, 8003502 <_nx_tcp_socket_connection_reset+0x46>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 80034fc:	2100      	movs	r1, #0
 80034fe:	f004 fadf 	bl	8007ac0 <_nx_tcp_connect_cleanup>
    }

    /* Check for suspended disconnect thread.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8003502:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 8003506:	b110      	cbz	r0, 800350e <_nx_tcp_socket_connection_reset+0x52>
    {

        /* Resume the thread suspended on the disconnect.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 8003508:	2100      	movs	r1, #0
 800350a:	f004 fba7 	bl	8007c5c <_nx_tcp_disconnect_cleanup>
    }

    /* Determine if the socket was in an established state.  */
    if (saved_state == NX_TCP_ESTABLISHED)
 800350e:	2d05      	cmp	r5, #5
 8003510:	d000      	beq.n	8003514 <_nx_tcp_socket_connection_reset+0x58>

        /* Notify the application through the socket disconnect_complete callback.  */
        (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
    }
#endif
}
 8003512:	bd70      	pop	{r4, r5, r6, pc}
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8003514:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0fa      	beq.n	8003512 <_nx_tcp_socket_connection_reset+0x56>
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800351c:	4620      	mov	r0, r4
}
 800351e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8003522:	4718      	bx	r3
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 8003524:	4620      	mov	r0, r4
 8003526:	f000 f805 	bl	8003534 <_nx_tcp_socket_receive_queue_flush>
 800352a:	e7d6      	b.n	80034da <_nx_tcp_socket_connection_reset+0x1e>
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 800352c:	4620      	mov	r0, r4
 800352e:	f000 f9c3 	bl	80038b8 <_nx_tcp_socket_transmit_queue_flush>
 8003532:	e7cb      	b.n	80034cc <_nx_tcp_socket_connection_reset+0x10>

08003534 <_nx_tcp_socket_receive_queue_flush>:

    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 8003534:	2300      	movs	r3, #0
    packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 8003536:	e9d0 122f 	ldrd	r1, r2, [r0, #188]	; 0xbc
    socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800353a:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
    socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800353e:	b189      	cbz	r1, 8003564 <_nx_tcp_socket_receive_queue_flush+0x30>
{
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	4604      	mov	r4, r0
        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;

        /* Mark it as allocated so it will be released.  */
        /*lint -e{923} suppress cast of ULONT to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8003544:	f04f 36aa 	mov.w	r6, #2863311530	; 0xaaaaaaaa
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8003548:	6a15      	ldr	r5, [r2, #32]

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800354a:	4610      	mov	r0, r2
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800354c:	6216      	str	r6, [r2, #32]
        _nx_packet_release(packet_ptr);
 800354e:	f7ff fbfd 	bl	8002d4c <_nx_packet_release>

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8003552:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        packet_ptr =  next_packet_ptr;
 8003556:	462a      	mov	r2, r5
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8003558:	3b01      	subs	r3, #1
 800355a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f2      	bne.n	8003548 <_nx_tcp_socket_receive_queue_flush+0x14>
    }
}
 8003562:	bd70      	pop	{r4, r5, r6, pc}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <_nx_tcp_socket_retransmit>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_retransmit(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, UINT need_fast_retransmit)
{
 8003568:	460b      	mov	r3, r1
       RFC 793 Sec 3.7, p42: keep send new data.

       In the zero window probe phase, we send the zero window probe, and increase
       exponentially the interval between successive probes.
       RFC 1122 Sec 4.2.2.17, p92.  */
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 800356a:	6e09      	ldr	r1, [r1, #96]	; 0x60
{
 800356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003570:	f8d3 b0d0 	ldr.w	fp, [r3, #208]	; 0xd0
 8003574:	b08b      	sub	sp, #44	; 0x2c
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 8003576:	2900      	cmp	r1, #0
 8003578:	d149      	bne.n	800360e <_nx_tcp_socket_retransmit+0xa6>
    {

        /* Pickup the head of the transmit queue.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;

        if (packet_ptr)
 800357a:	f1bb 0f00 	cmp.w	fp, #0
 800357e:	f000 812b 	beq.w	80037d8 <_nx_tcp_socket_retransmit+0x270>
        {

        /* Get one byte from send queue. */
        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_TCP_HEADER *header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8003582:	f8db 4008 	ldr.w	r4, [fp, #8]

            /* Get sequence number and first byte. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));

            /* Now set zero window probe started. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 8003586:	f04f 0c01 	mov.w	ip, #1
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800358a:	68e5      	ldr	r5, [r4, #12]
 800358c:	4667      	mov	r7, ip
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800358e:	6862      	ldr	r2, [r4, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8003590:	ea85 4035 	eor.w	r0, r5, r5, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8003594:	ea82 4132 	eor.w	r1, r2, r2, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8003598:	0a00      	lsrs	r0, r0, #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800359a:	0a09      	lsrs	r1, r1, #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800359c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80035a0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80035a4:	ea80 2035 	eor.w	r0, r0, r5, ror #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80035a8:	ea81 2132 	eor.w	r1, r1, r2, ror #8
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80035ac:	ea80 4530 	eor.w	r5, r0, r0, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80035b0:	60e0      	str	r0, [r4, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80035b2:	ea81 4631 	eor.w	r6, r1, r1, ror #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80035b6:	6061      	str	r1, [r4, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80035b8:	0a2d      	lsrs	r5, r5, #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80035ba:	0a36      	lsrs	r6, r6, #8
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 80035bc:	0f02      	lsrs	r2, r0, #28
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80035be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80035c2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 80035c6:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80035ca:	ea85 2030 	eor.w	r0, r5, r0, ror #8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80035ce:	ea86 2631 	eor.w	r6, r6, r1, ror #8
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
 80035d2:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 80035d6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 80035da:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 80035de:	6066      	str	r6, [r4, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80035e0:	60e0      	str	r0, [r4, #12]

        /* In the zero window probe phase, we send the zero window probe, and increase
           exponentially the interval between successive probes.  */

        /* Increment the retry counter.  */
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 80035e2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;

        /* Setup the next timeout.  */
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 80035e6:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 80035ea:	3001      	adds	r0, #1
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 80035ec:	f8d3 50dc 	ldr.w	r5, [r3, #220]	; 0xdc
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;
 80035f0:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 80035f4:	fb04 f400 	mul.w	r4, r4, r0
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 80035f8:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0

        /* Send the zero window probe.  */
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 80035fc:	4618      	mov	r0, r3
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 80035fe:	40a5      	lsls	r5, r4
 8003600:	f8c3 50d8 	str.w	r5, [r3, #216]	; 0xd8
        else
        {
            packet_ptr = next_ptr;
        }
    }
}
 8003604:	b00b      	add	sp, #44	; 0x2c
 8003606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 800360a:	f004 bdcd 	b.w	80081a8 <_nx_tcp_packet_send_probe>
    else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE)
 800360e:	f893 10a8 	ldrb.w	r1, [r3, #168]	; 0xa8
 8003612:	2901      	cmp	r1, #1
 8003614:	f000 80d0 	beq.w	80037b8 <_nx_tcp_socket_retransmit+0x250>
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 8003618:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 800361c:	2a01      	cmp	r2, #1
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 800361e:	f101 0101 	add.w	r1, r1, #1
 8003622:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 8003626:	d011      	beq.n	800364c <_nx_tcp_socket_retransmit+0xe4>
 8003628:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800362c:	2a00      	cmp	r2, #0
 800362e:	f040 80d0 	bne.w	80037d2 <_nx_tcp_socket_retransmit+0x26a>
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8003632:	6e9a      	ldr	r2, [r3, #104]	; 0x68
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 8003634:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8003638:	0854      	lsrs	r4, r2, #1
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 800363a:	ea4f 0249 	mov.w	r2, r9, lsl #1
        socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800363e:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 8003642:	42a2      	cmp	r2, r4
 8003644:	bf38      	it	cc
 8003646:	4622      	movcc	r2, r4
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
 800364a:	e011      	b.n	8003670 <_nx_tcp_socket_retransmit+0x108>
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 800364c:	6add      	ldr	r5, [r3, #44]	; 0x2c
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 800364e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 8003650:	006f      	lsls	r7, r5, #1
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8003652:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8003654:	0864      	lsrs	r4, r4, #1
            socket_ptr -> nx_tcp_socket_fast_recovery = NX_TRUE;
 8003656:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800365a:	443d      	add	r5, r7
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800365c:	3e01      	subs	r6, #1
 800365e:	42bc      	cmp	r4, r7
 8003660:	66de      	str	r6, [r3, #108]	; 0x6c
 8003662:	bf38      	it	cc
 8003664:	463c      	movcc	r4, r7
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 8003666:	eb05 0904 	add.w	r9, r5, r4
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 800366a:	641c      	str	r4, [r3, #64]	; 0x40
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800366c:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8003670:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8003674:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8003678:	fb04 f101 	mul.w	r1, r4, r1
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800367c:	408a      	lsls	r2, r1
 800367e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 8003682:	f1bb 0f00 	cmp.w	fp, #0
 8003686:	f000 8111 	beq.w	80038ac <_nx_tcp_socket_retransmit+0x344>
 800368a:	f8db 201c 	ldr.w	r2, [fp, #28]
 800368e:	f1b2 3fdd 	cmp.w	r2, #3722304989	; 0xdddddddd
 8003692:	f040 810b 	bne.w	80038ac <_nx_tcp_socket_retransmit+0x344>
        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 8003696:	f8db e024 	ldr.w	lr, [fp, #36]	; 0x24
 800369a:	f109 0214 	add.w	r2, r9, #20
 800369e:	4572      	cmp	r2, lr
 80036a0:	f0c0 8104 	bcc.w	80038ac <_nx_tcp_socket_retransmit+0x344>
 80036a4:	9009      	str	r0, [sp, #36]	; 0x24
 80036a6:	4698      	mov	r8, r3
 80036a8:	e072      	b.n	8003790 <_nx_tcp_socket_retransmit+0x228>
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 80036aa:	2f06      	cmp	r7, #6
 80036ac:	f040 80fa 	bne.w	80038a4 <_nx_tcp_socket_retransmit+0x33c>
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 80036b0:	f108 0218 	add.w	r2, r8, #24
            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 80036b4:	f88b 7030 	strb.w	r7, [fp, #48]	; 0x30
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 80036b8:	9208      	str	r2, [sp, #32]
            source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 80036ba:	f8d8 2138 	ldr.w	r2, [r8, #312]	; 0x138
 80036be:	3208      	adds	r2, #8
 80036c0:	9207      	str	r2, [sp, #28]
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 80036c2:	f8d8 c080 	ldr.w	ip, [r8, #128]	; 0x80
        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 80036c6:	497b      	ldr	r1, [pc, #492]	; (80038b4 <_nx_tcp_socket_retransmit+0x34c>)
        header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80036c8:	f8db 4008 	ldr.w	r4, [fp, #8]
        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 80036cc:	ea4c 0101 	orr.w	r1, ip, r1
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 80036d0:	f8d3 a040 	ldr.w	sl, [r3, #64]	; 0x40
        original_header_word_4 = header_ptr -> nx_tcp_header_word_4;
 80036d4:	6926      	ldr	r6, [r4, #16]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80036d6:	ea81 4331 	eor.w	r3, r1, r1, ror #16
        header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 80036da:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 80036de:	ea86 4036 	eor.w	r0, r6, r6, ror #16
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 80036e2:	f01a 0f04 	tst.w	sl, #4
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80036e6:	9305      	str	r3, [sp, #20]
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 80036e8:	68e3      	ldr	r3, [r4, #12]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 80036ea:	ea4f 2010 	mov.w	r0, r0, lsr #8
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 80036ee:	9306      	str	r3, [sp, #24]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 80036f0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80036f4:	9b05      	ldr	r3, [sp, #20]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 80036f6:	ea80 2036 	eor.w	r0, r0, r6, ror #8
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 80036fa:	ea4f 2313 	mov.w	r3, r3, lsr #8
        header_ptr -> nx_tcp_header_word_4 = header_ptr -> nx_tcp_header_word_4 & 0x0000FFFF;
 80036fe:	b280      	uxth	r0, r0
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8003700:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8003704:	ea83 2331 	eor.w	r3, r3, r1, ror #8
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 8003708:	68a1      	ldr	r1, [r4, #8]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800370a:	60e3      	str	r3, [r4, #12]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800370c:	ea40 4330 	orr.w	r3, r0, r0, ror #16
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 8003710:	9105      	str	r1, [sp, #20]
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8003712:	ea82 4132 	eor.w	r1, r2, r2, ror #16
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8003716:	ea4f 2313 	mov.w	r3, r3, lsr #8
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 800371a:	ea4f 2111 	mov.w	r1, r1, lsr #8
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800371e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8003722:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8003726:	ea83 2330 	eor.w	r3, r3, r0, ror #8
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 800372a:	ea81 2132 	eor.w	r1, r1, r2, ror #8
 800372e:	60a1      	str	r1, [r4, #8]
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 8003730:	f8c8 c084 	str.w	ip, [r8, #132]	; 0x84
        socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 8003734:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8003738:	6123      	str	r3, [r4, #16]
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800373a:	f000 8094 	beq.w	8003866 <_nx_tcp_socket_retransmit+0x2fe>
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800373e:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 8003742:	f042 0204 	orr.w	r2, r2, #4
 8003746:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800374a:	9a05      	ldr	r2, [sp, #20]
 800374c:	428a      	cmp	r2, r1
 800374e:	d04d      	beq.n	80037ec <_nx_tcp_socket_retransmit+0x284>
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8003750:	2300      	movs	r3, #0
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8003752:	2f04      	cmp	r7, #4
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8003754:	f8cb 301c 	str.w	r3, [fp, #28]
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8003758:	d057      	beq.n	800380a <_nx_tcp_socket_retransmit+0x2a2>
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 800375a:	2f06      	cmp	r7, #6
 800375c:	d06d      	beq.n	800383a <_nx_tcp_socket_retransmit+0x2d2>
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800375e:	f1b5 3fee 	cmp.w	r5, #4008636142	; 0xeeeeeeee
 8003762:	f000 80a3 	beq.w	80038ac <_nx_tcp_socket_retransmit+0x344>
 8003766:	f898 30aa 	ldrb.w	r3, [r8, #170]	; 0xaa
 800376a:	2b01      	cmp	r3, #1
 800376c:	f000 809e 	beq.w	80038ac <_nx_tcp_socket_retransmit+0x344>
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 8003770:	2d00      	cmp	r5, #0
 8003772:	f000 809b 	beq.w	80038ac <_nx_tcp_socket_retransmit+0x344>
 8003776:	69eb      	ldr	r3, [r5, #28]
 8003778:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800377c:	f040 8096 	bne.w	80038ac <_nx_tcp_socket_retransmit+0x344>
        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 8003780:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
 8003784:	f109 0314 	add.w	r3, r9, #20
 8003788:	46ab      	mov	fp, r5
 800378a:	459e      	cmp	lr, r3
 800378c:	f200 808e 	bhi.w	80038ac <_nx_tcp_socket_retransmit+0x344>
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8003790:	f8d8 7014 	ldr.w	r7, [r8, #20]
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8003794:	f1ce 0314 	rsb	r3, lr, #20
        next_ptr = packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8003798:	f8db 5020 	ldr.w	r5, [fp, #32]
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800379c:	2f04      	cmp	r7, #4
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 800379e:	4499      	add	r9, r3
 80037a0:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 80037a4:	d181      	bne.n	80036aa <_nx_tcp_socket_retransmit+0x142>
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 80037a6:	f103 0214 	add.w	r2, r3, #20
            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80037aa:	f88b 7030 	strb.w	r7, [fp, #48]	; 0x30
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 80037ae:	9207      	str	r2, [sp, #28]
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 80037b0:	f108 0218 	add.w	r2, r8, #24
 80037b4:	9208      	str	r2, [sp, #32]
 80037b6:	e784      	b.n	80036c2 <_nx_tcp_socket_retransmit+0x15a>
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 80037b8:	2100      	movs	r1, #0
    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 80037ba:	2a01      	cmp	r2, #1
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 80037bc:	f883 10a8 	strb.w	r1, [r3, #168]	; 0xa8
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 80037c0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80037c4:	f101 0101 	add.w	r1, r1, #1
 80037c8:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 80037cc:	f47f af2c 	bne.w	8003628 <_nx_tcp_socket_retransmit+0xc0>
 80037d0:	e73c      	b.n	800364c <_nx_tcp_socket_retransmit+0xe4>
 80037d2:	f8d3 9064 	ldr.w	r9, [r3, #100]	; 0x64
 80037d6:	e74b      	b.n	8003670 <_nx_tcp_socket_retransmit+0x108>
        else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 80037d8:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80037dc:	2a00      	cmp	r2, #0
 80037de:	d065      	beq.n	80038ac <_nx_tcp_socket_retransmit+0x344>
 80037e0:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80037e4:	e9d3 7128 	ldrd	r7, r1, [r3, #160]	; 0xa0
 80037e8:	3701      	adds	r7, #1
 80037ea:	e6fa      	b.n	80035e2 <_nx_tcp_socket_retransmit+0x7a>
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 80037ec:	68e2      	ldr	r2, [r4, #12]
 80037ee:	9906      	ldr	r1, [sp, #24]
 80037f0:	428a      	cmp	r2, r1
 80037f2:	d1ad      	bne.n	8003750 <_nx_tcp_socket_retransmit+0x1e8>
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 80037f4:	429e      	cmp	r6, r3
 80037f6:	d1ab      	bne.n	8003750 <_nx_tcp_socket_retransmit+0x1e8>
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 80037f8:	2301      	movs	r3, #1
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 80037fa:	2f04      	cmp	r7, #4
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 80037fc:	f88b 3031 	strb.w	r3, [fp, #49]	; 0x31
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	f8cb 301c 	str.w	r3, [fp, #28]
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8003808:	d1a7      	bne.n	800375a <_nx_tcp_socket_retransmit+0x1f2>
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800380a:	f44f 24c0 	mov.w	r4, #393216	; 0x60000
 800380e:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8003812:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8003816:	4659      	mov	r1, fp
 8003818:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800381c:	9401      	str	r4, [sp, #4]
 800381e:	f8d8 40b8 	ldr.w	r4, [r8, #184]	; 0xb8
 8003822:	9003      	str	r0, [sp, #12]
 8003824:	9402      	str	r4, [sp, #8]
 8003826:	f8d8 40b4 	ldr.w	r4, [r8, #180]	; 0xb4
 800382a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800382c:	9400      	str	r4, [sp, #0]
 800382e:	f7fe fc73 	bl	8002118 <_nx_ip_packet_send>
 8003832:	f8d8 7014 	ldr.w	r7, [r8, #20]
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8003836:	2f06      	cmp	r7, #6
 8003838:	d191      	bne.n	800375e <_nx_tcp_socket_retransmit+0x1f6>
            packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 800383a:	f8d8 1138 	ldr.w	r1, [r8, #312]	; 0x138
                                 socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 800383e:	f108 0418 	add.w	r4, r8, #24
            _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP,
 8003842:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003844:	463a      	mov	r2, r7
                                 socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
 8003846:	f101 0008 	add.w	r0, r1, #8
            packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 800384a:	f8cb 1034 	str.w	r1, [fp, #52]	; 0x34
            _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP,
 800384e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8003852:	4659      	mov	r1, fp
 8003854:	9001      	str	r0, [sp, #4]
 8003856:	4630      	mov	r0, r6
 8003858:	9402      	str	r4, [sp, #8]
 800385a:	f8d6 4ee8 	ldr.w	r4, [r6, #3816]	; 0xee8
 800385e:	9400      	str	r4, [sp, #0]
 8003860:	f003 fd7a 	bl	8007358 <_nx_ipv6_packet_send>
 8003864:	e77b      	b.n	800375e <_nx_tcp_socket_retransmit+0x1f6>
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8003866:	9b08      	ldr	r3, [sp, #32]
 8003868:	4672      	mov	r2, lr
 800386a:	2106      	movs	r1, #6
 800386c:	4658      	mov	r0, fp
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	9b07      	ldr	r3, [sp, #28]
 8003872:	f7fe faa7 	bl	8001dc4 <_nx_ip_checksum_compute>
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8003876:	6922      	ldr	r2, [r4, #16]
            checksum = ~checksum & NX_LOWER_16_MASK;
 8003878:	43c0      	mvns	r0, r0
 800387a:	f8d8 7014 	ldr.w	r7, [r8, #20]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800387e:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 8003882:	68a1      	ldr	r1, [r4, #8]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800388a:	ea83 2332 	eor.w	r3, r3, r2, ror #8
            header_ptr -> nx_tcp_header_word_4 =  header_ptr -> nx_tcp_header_word_4 | (checksum << NX_SHIFT_BY_16);
 800388e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8003892:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800389c:	ea83 2330 	eor.w	r3, r3, r0, ror #8
 80038a0:	6123      	str	r3, [r4, #16]
 80038a2:	e752      	b.n	800374a <_nx_tcp_socket_retransmit+0x1e2>
    ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 80038a4:	2200      	movs	r2, #0
 80038a6:	e9cd 2207 	strd	r2, r2, [sp, #28]
 80038aa:	e70a      	b.n	80036c2 <_nx_tcp_socket_retransmit+0x15a>
}
 80038ac:	b00b      	add	sp, #44	; 0x2c
 80038ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b2:	bf00      	nop
 80038b4:	50180000 	.word	0x50180000

080038b8 <_nx_tcp_socket_transmit_queue_flush>:

    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 80038b8:	2200      	movs	r2, #0
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 80038ba:	e9d0 1333 	ldrd	r1, r3, [r0, #204]	; 0xcc
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 80038be:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
    socket_ptr -> nx_tcp_socket_transmit_sent_tail =  NX_NULL;

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 80038c2:	b319      	cbz	r1, 800390c <_nx_tcp_socket_transmit_queue_flush+0x54>
{
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4604      	mov	r4, r0
        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;

        /* Mark the packet as no longer being in a TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 80038c8:	f04f 36aa 	mov.w	r6, #2863311530	; 0xaaaaaaaa
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80038cc:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80038d0:	b672      	cpsid	i
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 80038d2:	e9d3 2507 	ldrd	r2, r5, [r3, #28]
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 80038d6:	621e      	str	r6, [r3, #32]

        /* Has the packet been transmitted?  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 80038d8:	f1b2 3fdd 	cmp.w	r2, #3722304989	; 0xdddddddd
 80038dc:	d009      	beq.n	80038f2 <_nx_tcp_socket_transmit_queue_flush+0x3a>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80038de:	f381 8810 	msr	PRIMASK, r1

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 80038e2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 80038ec:	b16b      	cbz	r3, 800390a <_nx_tcp_socket_transmit_queue_flush+0x52>
{
 80038ee:	462b      	mov	r3, r5
 80038f0:	e7ec      	b.n	80038cc <_nx_tcp_socket_transmit_queue_flush+0x14>
 80038f2:	f381 8810 	msr	PRIMASK, r1
            _nx_packet_release(packet_ptr);
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fa28 	bl	8002d4c <_nx_packet_release>
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 80038fc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8003900:	3b01      	subs	r3, #1
 8003902:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f1      	bne.n	80038ee <_nx_tcp_socket_transmit_queue_flush+0x36>
    }
}
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop

08003910 <_nx_tcp_transmit_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003910:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003914:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8003916:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8003918:	2b00      	cmp	r3, #0
 800391a:	d045      	beq.n	80039a8 <_nx_tcp_transmit_cleanup+0x98>
 800391c:	492a      	ldr	r1, [pc, #168]	; (80039c8 <_nx_tcp_transmit_cleanup+0xb8>)
{
 800391e:	b430      	push	{r4, r5}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8003920:	681c      	ldr	r4, [r3, #0]
 8003922:	428c      	cmp	r4, r1
 8003924:	d003      	beq.n	800392e <_nx_tcp_transmit_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003926:	f382 8810 	msr	PRIMASK, r2
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800392a:	bc30      	pop	{r4, r5}
 800392c:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800392e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8003930:	2900      	cmp	r1, #0
 8003932:	d0f8      	beq.n	8003926 <_nx_tcp_transmit_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003934:	f3ef 8405 	mrs	r4, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8003938:	4924      	ldr	r1, [pc, #144]	; (80039cc <_nx_tcp_transmit_cleanup+0xbc>)
 800393a:	6809      	ldr	r1, [r1, #0]
 800393c:	4321      	orrs	r1, r4
 800393e:	d125      	bne.n	800398c <_nx_tcp_transmit_cleanup+0x7c>
 8003940:	4d23      	ldr	r5, [pc, #140]	; (80039d0 <_nx_tcp_transmit_cleanup+0xc0>)
 8003942:	4c24      	ldr	r4, [pc, #144]	; (80039d4 <_nx_tcp_transmit_cleanup+0xc4>)
 8003944:	682d      	ldr	r5, [r5, #0]
 8003946:	42a5      	cmp	r5, r4
 8003948:	d020      	beq.n	800398c <_nx_tcp_transmit_cleanup+0x7c>
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800394a:	6f04      	ldr	r4, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800394c:	6681      	str	r1, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800394e:	4284      	cmp	r4, r0
 8003950:	d02d      	beq.n	80039ae <_nx_tcp_transmit_cleanup+0x9e>
                thread_ptr -> tx_thread_suspended_previous;
 8003952:	6f41      	ldr	r1, [r0, #116]	; 0x74
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8003954:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8003958:	6761      	str	r1, [r4, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800395a:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800395c:	670c      	str	r4, [r1, #112]	; 0x70
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 800395e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8003962:	6b04      	ldr	r4, [r0, #48]	; 0x30
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 8003964:	3901      	subs	r1, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8003966:	2c0c      	cmp	r4, #12
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 8003968:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800396c:	d1db      	bne.n	8003926 <_nx_tcp_transmit_cleanup+0x16>
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 800396e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003970:	2905      	cmp	r1, #5
 8003972:	d01f      	beq.n	80039b4 <_nx_tcp_transmit_cleanup+0xa4>
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8003974:	2338      	movs	r3, #56	; 0x38
 8003976:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 800397a:	4917      	ldr	r1, [pc, #92]	; (80039d8 <_nx_tcp_transmit_cleanup+0xc8>)
 800397c:	680b      	ldr	r3, [r1, #0]
 800397e:	3301      	adds	r3, #1
 8003980:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003982:	f382 8810 	msr	PRIMASK, r2
}
 8003986:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 8003988:	f00a b8ac 	b.w	800dae4 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800398c:	4913      	ldr	r1, [pc, #76]	; (80039dc <_nx_tcp_transmit_cleanup+0xcc>)
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800398e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8003992:	6681      	str	r1, [r0, #104]	; 0x68
 8003994:	f382 8810 	msr	PRIMASK, r2
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8003998:	2200      	movs	r2, #0
 800399a:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 800399e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 80039a2:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 80039a4:	f009 bb64 	b.w	800d070 <_tx_event_flags_set>
 80039a8:	f382 8810 	msr	PRIMASK, r2
 80039ac:	4770      	bx	lr
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  NX_NULL;
 80039ae:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 80039b2:	e7d4      	b.n	800395e <_nx_tcp_transmit_cleanup+0x4e>
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 80039b4:	e9d3 3132 	ldrd	r3, r1, [r3, #200]	; 0xc8
 80039b8:	4299      	cmp	r1, r3
                thread_ptr -> tx_thread_suspend_status =  NX_WINDOW_OVERFLOW;
 80039ba:	bf34      	ite	cc
 80039bc:	2339      	movcc	r3, #57	; 0x39
                thread_ptr -> tx_thread_suspend_status =  NX_TX_QUEUE_DEPTH;
 80039be:	2349      	movcs	r3, #73	; 0x49
 80039c0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80039c4:	e7d9      	b.n	800397a <_nx_tcp_transmit_cleanup+0x6a>
 80039c6:	bf00      	nop
 80039c8:	54435020 	.word	0x54435020
 80039cc:	2000007c 	.word	0x2000007c
 80039d0:	20019248 	.word	0x20019248
 80039d4:	200192f0 	.word	0x200192f0
 80039d8:	20019244 	.word	0x20019244
 80039dc:	08007abd 	.word	0x08007abd

080039e0 <_nx_udp_enable>:
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 80039e0:	4b02      	ldr	r3, [pc, #8]	; (80039ec <_nx_udp_enable+0xc>)
 80039e2:	f8c0 3930 	str.w	r3, [r0, #2352]	; 0x930

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 80039e6:	2000      	movs	r0, #0
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	080039f1 	.word	0x080039f1

080039f0 <_nx_udp_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80039f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80039f4:	688d      	ldr	r5, [r1, #8]
{
 80039f6:	4607      	mov	r7, r0

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80039f8:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8003cd0 <_nx_udp_packet_receive+0x2e0>
{
 80039fc:	460e      	mov	r6, r1
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80039fe:	e9d5 4000 	ldrd	r4, r0, [r5]
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8003a02:	f8d8 1000 	ldr.w	r1, [r8]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003a06:	ea84 4334 	eor.w	r3, r4, r4, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003a0a:	ea80 4230 	eor.w	r2, r0, r0, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003a0e:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003a10:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003a12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003a16:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003a1a:	ea83 2334 	eor.w	r3, r3, r4, ror #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003a1e:	ea82 2230 	eor.w	r2, r2, r0, ror #8
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8003a22:	fa1f f983 	uxth.w	r9, r3
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8003a26:	eb09 2a19 	add.w	sl, r9, r9, lsr #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003a2a:	e9c5 3200 	strd	r3, r2, [r5]
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8003a2e:	f00a 0a1f 	and.w	sl, sl, #31
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8003a32:	b129      	cbz	r1, 8003a40 <_nx_udp_packet_receive+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003a34:	f3ef 8305 	mrs	r3, IPSR
 8003a38:	4aa2      	ldr	r2, [pc, #648]	; (8003cc4 <_nx_udp_packet_receive+0x2d4>)
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d027      	beq.n	8003a90 <_nx_udp_packet_receive+0xa0>
 8003a40:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8003a44:	f8da 38a8 	ldr.w	r3, [sl, #2216]	; 0x8a8

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 8003a48:	b373      	cbz	r3, 8003aa8 <_nx_udp_packet_receive+0xb8>
 8003a4a:	461c      	mov	r4, r3
 8003a4c:	e002      	b.n	8003a54 <_nx_udp_packet_receive+0x64>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 8003a4e:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 8003a50:	42a3      	cmp	r3, r4
 8003a52:	d03e      	beq.n	8003ad2 <_nx_udp_packet_receive+0xe2>
        if (socket_ptr -> nx_udp_socket_port == port)
 8003a54:	68a2      	ldr	r2, [r4, #8]
 8003a56:	454a      	cmp	r2, r9
 8003a58:	d1f9      	bne.n	8003a4e <_nx_udp_packet_receive+0x5e>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8003a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d03c      	beq.n	8003adc <_nx_udp_packet_receive+0xec>
 8003a62:	f3ef 8305 	mrs	r3, IPSR
 8003a66:	4a97      	ldr	r2, [pc, #604]	; (8003cc4 <_nx_udp_packet_receive+0x2d4>)
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f000 80da 	beq.w	8003c24 <_nx_udp_packet_receive+0x234>
        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 8003a70:	68a3      	ldr	r3, [r4, #8]
 8003a72:	454b      	cmp	r3, r9
 8003a74:	d032      	beq.n	8003adc <_nx_udp_packet_receive+0xec>
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8003a76:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	f000 80d7 	beq.w	8003c2e <_nx_udp_packet_receive+0x23e>
        }
#endif /* !NX_DISABLE_IPV4 && !NX_DISABLE_ICMPV4_ERROR_MESSAGE  */

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* If ICMPv6 is enabled, send Destination unreachable. */
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	f000 80ad 	beq.w	8003be0 <_nx_udp_packet_receive+0x1f0>

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8003a86:	4630      	mov	r0, r6

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
    }
}
 8003a88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        _nx_packet_release(packet_ptr);
 8003a8c:	f7ff b95e 	b.w	8002d4c <_nx_packet_release>
 8003a90:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	f207 603c 	addw	r0, r7, #1596	; 0x63c
 8003a9c:	f009 fc78 	bl	800d390 <_tx_mutex_get>
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8003aa0:	f8da 38a8 	ldr.w	r3, [sl, #2216]	; 0x8a8
    if (!socket_ptr)
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1d0      	bne.n	8003a4a <_nx_udp_packet_receive+0x5a>
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8003aa8:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8003aac:	2a04      	cmp	r2, #4
 8003aae:	d079      	beq.n	8003ba4 <_nx_udp_packet_receive+0x1b4>
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8003ab0:	2a06      	cmp	r2, #6
 8003ab2:	d056      	beq.n	8003b62 <_nx_udp_packet_receive+0x172>
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8003ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0e4      	beq.n	8003a86 <_nx_udp_packet_receive+0x96>
 8003abc:	f3ef 8305 	mrs	r3, IPSR
 8003ac0:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <_nx_udp_packet_receive+0x2d4>)
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d1de      	bne.n	8003a86 <_nx_udp_packet_receive+0x96>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8003ac8:	f207 603c 	addw	r0, r7, #1596	; 0x63c
 8003acc:	f009 fd4a 	bl	800d564 <_tx_mutex_put>
 8003ad0:	e7d9      	b.n	8003a86 <_nx_udp_packet_receive+0x96>
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8003ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1c3      	bne.n	8003a62 <_nx_udp_packet_receive+0x72>
 8003ada:	e7c9      	b.n	8003a70 <_nx_udp_packet_receive+0x80>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003adc:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003ae0:	b672      	cpsid	i
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 8003ae2:	4b79      	ldr	r3, [pc, #484]	; (8003cc8 <_nx_udp_packet_receive+0x2d8>)
 8003ae4:	6822      	ldr	r2, [r4, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d134      	bne.n	8003b54 <_nx_udp_packet_receive+0x164>
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 8003aea:	f8da 38a8 	ldr.w	r3, [sl, #2216]	; 0x8a8
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 8003aee:	6f25      	ldr	r5, [r4, #112]	; 0x70
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	d004      	beq.n	8003afe <_nx_udp_packet_receive+0x10e>
 8003af4:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80b9 	beq.w	8003c70 <_nx_udp_packet_receive+0x280>
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8003afe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (thread_ptr)
 8003b00:	2800      	cmp	r0, #0
 8003b02:	f000 80b8 	beq.w	8003c76 <_nx_udp_packet_receive+0x286>
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8003b06:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003b08:	4283      	cmp	r3, r0
 8003b0a:	f000 80c6 	beq.w	8003c9a <_nx_udp_packet_receive+0x2aa>
                thread_ptr -> tx_thread_suspended_previous;
 8003b0e:	6f42      	ldr	r2, [r0, #116]	; 0x74
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8003b10:	65a3      	str	r3, [r4, #88]	; 0x58
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8003b12:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8003b14:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
        _tx_thread_preempt_disable++;
 8003b18:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8003cd4 <_nx_udp_packet_receive+0x2e4>
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003b1c:	2700      	movs	r7, #0
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8003b1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        _tx_thread_preempt_disable++;
 8003b20:	f8dc 3000 	ldr.w	r3, [ip]
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8003b24:	f8d0 e07c 	ldr.w	lr, [r0, #124]	; 0x7c
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8003b28:	3a01      	subs	r2, #1
        _tx_thread_preempt_disable++;
 8003b2a:	3301      	adds	r3, #1
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8003b2c:	65e2      	str	r2, [r4, #92]	; 0x5c
        _tx_thread_preempt_disable++;
 8003b2e:	f8cc 3000 	str.w	r3, [ip]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003b32:	6687      	str	r7, [r0, #104]	; 0x68
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8003b34:	f8ce 6000 	str.w	r6, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003b38:	f381 8810 	msr	PRIMASK, r1
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8003b3c:	f8c0 7084 	str.w	r7, [r0, #132]	; 0x84
        _tx_thread_system_resume(thread_ptr);
 8003b40:	f009 ffd0 	bl	800dae4 <_tx_thread_system_resume>
    if (receive_callback)
 8003b44:	2d00      	cmp	r5, #0
 8003b46:	f000 80ba 	beq.w	8003cbe <_nx_udp_packet_receive+0x2ce>
        (receive_callback)(socket_ptr);
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	462b      	mov	r3, r5
}
 8003b4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        (receive_callback)(socket_ptr);
 8003b52:	4718      	bx	r3
 8003b54:	f381 8810 	msr	PRIMASK, r1
        _nx_packet_release(packet_ptr);
 8003b58:	4630      	mov	r0, r6
}
 8003b5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        _nx_packet_release(packet_ptr);
 8003b5e:	f7ff b8f5 	b.w	8002d4c <_nx_packet_release>
            if ((ip_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) != (ULONG)0xFF000000)
 8003b62:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b6a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8003b6e:	d0a1      	beq.n	8003ab4 <_nx_udp_packet_receive+0xc4>
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003b70:	686a      	ldr	r2, [r5, #4]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8003b72:	2300      	movs	r3, #0
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003b74:	682c      	ldr	r4, [r5, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003b76:	ea82 4032 	eor.w	r0, r2, r2, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003b7a:	ea84 4134 	eor.w	r1, r4, r4, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003b7e:	0a00      	lsrs	r0, r0, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003b80:	0a09      	lsrs	r1, r1, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003b82:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003b86:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003b8a:	ea80 2032 	eor.w	r0, r0, r2, ror #8
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8003b8e:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003b92:	ea81 2134 	eor.w	r1, r1, r4, ror #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003b96:	6068      	str	r0, [r5, #4]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8003b98:	4638      	mov	r0, r7
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003b9a:	6029      	str	r1, [r5, #0]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8003b9c:	4631      	mov	r1, r6
 8003b9e:	f002 f8bf 	bl	8005d20 <_nx_icmpv6_send_error_message>
 8003ba2:	e787      	b.n	8003ab4 <_nx_udp_packet_receive+0xc4>
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8003ba4:	f8d7 2888 	ldr.w	r2, [r7, #2184]	; 0x888
 8003ba8:	2a00      	cmp	r2, #0
 8003baa:	d083      	beq.n	8003ab4 <_nx_udp_packet_receive+0xc4>
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8003bac:	4631      	mov	r1, r6
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bae:	e9d5 c200 	ldrd	ip, r2, [r5]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003bb2:	ea8c 403c 	eor.w	r0, ip, ip, ror #16
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bb6:	ea82 4432 	eor.w	r4, r2, r2, ror #16
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003bba:	0a00      	lsrs	r0, r0, #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bbc:	0a24      	lsrs	r4, r4, #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003bbe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bc2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003bc6:	ea80 203c 	eor.w	r0, r0, ip, ror #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bca:	ea84 2432 	eor.w	r4, r4, r2, ror #8
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8003bce:	4a3f      	ldr	r2, [pc, #252]	; (8003ccc <_nx_udp_packet_receive+0x2dc>)
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003bd0:	6028      	str	r0, [r5, #0]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8003bd2:	4638      	mov	r0, r7
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bd4:	606c      	str	r4, [r5, #4]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8003bd6:	f001 ff5d 	bl	8005a94 <_nx_icmpv4_send_error_message>
 8003bda:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8003bde:	e767      	b.n	8003ab0 <_nx_udp_packet_receive+0xc0>
            if ((ip_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) != (ULONG)0xFF000000)
 8003be0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003be8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8003bec:	f43f af4b 	beq.w	8003a86 <_nx_udp_packet_receive+0x96>
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bf0:	686b      	ldr	r3, [r5, #4]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8003bf2:	4638      	mov	r0, r7
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003bf4:	682c      	ldr	r4, [r5, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bf6:	ea83 4133 	eor.w	r1, r3, r3, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003bfa:	ea84 4234 	eor.w	r2, r4, r4, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003bfe:	0a09      	lsrs	r1, r1, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c00:	0a12      	lsrs	r2, r2, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c02:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c06:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c0a:	ea81 2133 	eor.w	r1, r1, r3, ror #8
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8003c0e:	2300      	movs	r3, #0
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c10:	ea82 2234 	eor.w	r2, r2, r4, ror #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c14:	6069      	str	r1, [r5, #4]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8003c16:	4631      	mov	r1, r6
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c18:	602a      	str	r2, [r5, #0]
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8003c1a:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
 8003c1e:	f002 f87f 	bl	8005d20 <_nx_icmpv6_send_error_message>
 8003c22:	e730      	b.n	8003a86 <_nx_udp_packet_receive+0x96>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8003c24:	f207 603c 	addw	r0, r7, #1596	; 0x63c
 8003c28:	f009 fc9c 	bl	800d564 <_tx_mutex_put>
 8003c2c:	e720      	b.n	8003a70 <_nx_udp_packet_receive+0x80>
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8003c2e:	f8d7 3888 	ldr.w	r3, [r7, #2184]	; 0x888
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f43f af27 	beq.w	8003a86 <_nx_udp_packet_receive+0x96>
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c38:	686a      	ldr	r2, [r5, #4]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8003c3a:	2300      	movs	r3, #0
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c3c:	f8d5 c000 	ldr.w	ip, [r5]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8003c40:	4631      	mov	r1, r6
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c42:	ea82 4432 	eor.w	r4, r2, r2, ror #16
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c46:	ea8c 403c 	eor.w	r0, ip, ip, ror #16
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c4a:	0a24      	lsrs	r4, r4, #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c4c:	0a00      	lsrs	r0, r0, #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c4e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c52:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c56:	ea84 2432 	eor.w	r4, r4, r2, ror #8
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <_nx_udp_packet_receive+0x2dc>)
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c5c:	ea80 203c 	eor.w	r0, r0, ip, ror #8
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8003c60:	606c      	str	r4, [r5, #4]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8003c62:	6028      	str	r0, [r5, #0]
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8003c64:	4638      	mov	r0, r7
 8003c66:	f001 ff15 	bl	8005a94 <_nx_icmpv4_send_error_message>
 8003c6a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8003c6e:	e707      	b.n	8003a80 <_nx_udp_packet_receive+0x90>
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 8003c70:	f8ca 48a8 	str.w	r4, [sl, #2216]	; 0x8a8
 8003c74:	e743      	b.n	8003afe <_nx_udp_packet_receive+0x10e>
 8003c76:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
        if (socket_ptr -> nx_udp_socket_receive_head)
 8003c7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003c7c:	f10c 0301 	add.w	r3, ip, #1
 8003c80:	b172      	cbz	r2, 8003ca0 <_nx_udp_packet_receive+0x2b0>
            if (socket_ptr -> nx_udp_socket_receive_count >
 8003c82:	f8d4 e040 	ldr.w	lr, [r4, #64]	; 0x40
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8003c86:	6ca7      	ldr	r7, [r4, #72]	; 0x48
            if (socket_ptr -> nx_udp_socket_receive_count >
 8003c88:	459e      	cmp	lr, r3
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8003c8a:	61fe      	str	r6, [r7, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8003c8c:	64a6      	str	r6, [r4, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8003c8e:	61f0      	str	r0, [r6, #28]
            socket_ptr -> nx_udp_socket_receive_count++;
 8003c90:	63e3      	str	r3, [r4, #60]	; 0x3c
            if (socket_ptr -> nx_udp_socket_receive_count >
 8003c92:	d30a      	bcc.n	8003caa <_nx_udp_packet_receive+0x2ba>
 8003c94:	f381 8810 	msr	PRIMASK, r1
 8003c98:	e754      	b.n	8003b44 <_nx_udp_packet_receive+0x154>
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c9e:	e73b      	b.n	8003b18 <_nx_udp_packet_receive+0x128>
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8003ca0:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8003ca4:	61f2      	str	r2, [r6, #28]
            socket_ptr -> nx_udp_socket_receive_count++;
 8003ca6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003ca8:	e7f4      	b.n	8003c94 <_nx_udp_packet_receive+0x2a4>
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8003caa:	69d3      	ldr	r3, [r2, #28]
                socket_ptr -> nx_udp_socket_receive_count--;
 8003cac:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8003cb0:	6463      	str	r3, [r4, #68]	; 0x44
 8003cb2:	f381 8810 	msr	PRIMASK, r1
                _nx_packet_release(packet_ptr);
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7ff f848 	bl	8002d4c <_nx_packet_release>
 8003cbc:	e742      	b.n	8003b44 <_nx_udp_packet_receive+0x154>
}
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000007c 	.word	0x2000007c
 8003cc8:	55445020 	.word	0x55445020
 8003ccc:	03030000 	.word	0x03030000
 8003cd0:	20019248 	.word	0x20019248
 8003cd4:	20019244 	.word	0x20019244

08003cd8 <_nx_dhcp_send_request_internal>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_send_request_internal(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UINT dhcp_message_type)
{
 8003cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	b097      	sub	sp, #92	; 0x5c
 8003cde:	460d      	mov	r5, r1
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	4690      	mov	r8, r2

    /* Set the interface idnex.  */
    iface_index = interface_record -> nx_dhcp_interface_index;

    /* Allocate a DHCP packet.  */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8d0 0bd8 	ldr.w	r0, [r0, #3032]	; 0xbd8
 8003cea:	222c      	movs	r2, #44	; 0x2c
 8003cec:	a909      	add	r1, sp, #36	; 0x24
    iface_index = interface_record -> nx_dhcp_interface_index;
 8003cee:	f8d5 a01c 	ldr.w	sl, [r5, #28]
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8003cf2:	f7fe ff13 	bl	8002b1c <_nx_packet_allocate>

    /* Was the packet allocation successful?  */
    if (status != NX_SUCCESS)
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	b140      	cbz	r0, 8003d0c <_nx_dhcp_send_request_internal+0x34>
    {

        /* Increment the DHCP internal error counter.  */
        interface_record -> nx_dhcp_internal_errors++;
 8003cfa:	f8d5 3184 	ldr.w	r3, [r5, #388]	; 0x184
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
        nx_packet_release(packet_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8003d04:	4630      	mov	r0, r6
 8003d06:	b017      	add	sp, #92	; 0x5c
 8003d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8003d0c:	ea4f 038a 	mov.w	r3, sl, lsl #2
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 8003d10:	9909      	ldr	r1, [sp, #36]	; 0x24
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8003d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8003d16:	4618      	mov	r0, r3
 8003d18:	9303      	str	r3, [sp, #12]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4450      	add	r0, sl
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 8003d1e:	688c      	ldr	r4, [r1, #8]
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8003d20:	4631      	mov	r1, r6
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8003d22:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8003d26:	4620      	mov	r0, r4
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8003d28:	f8d3 bc54 	ldr.w	fp, [r3, #3156]	; 0xc54
    dhcp_client_mac_lsw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8003d2c:	f8d3 9c58 	ldr.w	r9, [r3, #3160]	; 0xc58
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8003d30:	f00a ff5f 	bl	800ebf2 <memset>
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 8003d34:	4ac3      	ldr	r2, [pc, #780]	; (8004044 <_nx_dhcp_send_request_internal+0x36c>)

    /* Store the value.  */
    while (size-- > 0)
    {

        *data = (UCHAR) ((value >> 24) & 0xff);
 8003d36:	4633      	mov	r3, r6
    buffer[NX_BOOTP_OFFSET_SERVER_NM] = 0;  
 8003d38:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 8003d3c:	f1b8 0f04 	cmp.w	r8, #4
    buffer[NX_BOOTP_OFFSET_BOOT_FILE] = 0;  
 8003d40:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 8003d44:	6022      	str	r2, [r4, #0]
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_XID, 4, interface_record -> nx_dhcp_xid);
 8003d46:	686a      	ldr	r2, [r5, #4]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003d48:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8003d4c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8003d50:	f361 0307 	bfi	r3, r1, #0, #8
 8003d54:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003d58:	f360 230f 	bfi	r3, r0, #8, #8
 8003d5c:	f361 4317 	bfi	r3, r1, #16, #8
 8003d60:	f362 631f 	bfi	r3, r2, #24, #8
 8003d64:	6063      	str	r3, [r4, #4]
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 8003d66:	d042      	beq.n	8003dee <_nx_dhcp_send_request_internal+0x116>
 8003d68:	f1b8 0f07 	cmp.w	r8, #7
 8003d6c:	d03f      	beq.n	8003dee <_nx_dhcp_send_request_internal+0x116>
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, interface_record -> nx_dhcp_seconds);
 8003d6e:	68ab      	ldr	r3, [r5, #8]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003d70:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003d74:	7263      	strb	r3, [r4, #9]
 8003d76:	7222      	strb	r2, [r4, #8]
    else if (interface_record -> nx_dhcp_clear_broadcast == NX_TRUE)
 8003d78:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	f000 83b6 	beq.w	80044ec <_nx_dhcp_send_request_internal+0x814>
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	72a3      	strb	r3, [r4, #10]
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 8003d84:	f1b8 0f08 	cmp.w	r8, #8
 8003d88:	d038      	beq.n	8003dfc <_nx_dhcp_send_request_internal+0x124>
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60e3      	str	r3, [r4, #12]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f3c9 4107 	ubfx	r1, r9, #16, #8
 8003d94:	f3cb 2207 	ubfx	r2, fp, #8, #8
 8003d98:	ea4f 6c19 	mov.w	ip, r9, lsr #24
 8003d9c:	f884 9021 	strb.w	r9, [r4, #33]	; 0x21
    *(bootp_message + (*index)) = (UCHAR)option;
 8003da0:	2035      	movs	r0, #53	; 0x35
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003da2:	7722      	strb	r2, [r4, #28]
 8003da4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8003da8:	6123      	str	r3, [r4, #16]
    *(bootp_message + (*index)) = (UCHAR)size; 
 8003daa:	2201      	movs	r2, #1
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003dac:	6163      	str	r3, [r4, #20]
 8003dae:	61a3      	str	r3, [r4, #24]
    switch (dhcp_message_type)
 8003db0:	f108 33ff 	add.w	r3, r8, #4294967295
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003db4:	77e1      	strb	r1, [r4, #31]
 8003db6:	49a4      	ldr	r1, [pc, #656]	; (8004048 <_nx_dhcp_send_request_internal+0x370>)
 8003db8:	f884 b01d 	strb.w	fp, [r4, #29]
 8003dbc:	f884 80f2 	strb.w	r8, [r4, #242]	; 0xf2
 8003dc0:	f884 c01e 	strb.w	ip, [r4, #30]
 8003dc4:	f884 9020 	strb.w	r9, [r4, #32]
    *(bootp_message + (*index)) = (UCHAR)option;
 8003dc8:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003dcc:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
    *(bootp_message + (*index)) = (UCHAR)size; 
 8003dd0:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
    switch (dhcp_message_type)
 8003dd4:	2b07      	cmp	r3, #7
 8003dd6:	f200 838b 	bhi.w	80044f0 <_nx_dhcp_send_request_internal+0x818>
 8003dda:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003dde:	01f4      	.short	0x01f4
 8003de0:	015f0389 	.word	0x015f0389
 8003de4:	03890137 	.word	0x03890137
 8003de8:	00200389 	.word	0x00200389
 8003dec:	009c      	.short	0x009c
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003dee:	2300      	movs	r3, #0
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 8003df0:	f1b8 0f08 	cmp.w	r8, #8
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003df4:	7223      	strb	r3, [r4, #8]
 8003df6:	7263      	strb	r3, [r4, #9]
 8003df8:	72a3      	strb	r3, [r4, #10]
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 8003dfa:	d1c6      	bne.n	8003d8a <_nx_dhcp_send_request_internal+0xb2>
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8003dfc:	68ea      	ldr	r2, [r5, #12]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	0e11      	lsrs	r1, r2, #24
 8003e02:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8003e06:	f361 0307 	bfi	r3, r1, #0, #8
 8003e0a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003e0e:	f360 230f 	bfi	r3, r0, #8, #8
 8003e12:	f361 4317 	bfi	r3, r1, #16, #8
 8003e16:	f362 631f 	bfi	r3, r2, #24, #8
 8003e1a:	60e3      	str	r3, [r4, #12]
 8003e1c:	e7b7      	b.n	8003d8e <_nx_dhcp_send_request_internal+0xb6>
            _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8003e1e:	68ea      	ldr	r2, [r5, #12]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003e20:	2300      	movs	r3, #0
    *(bootp_message + (*index)) = (UCHAR)option;
 8003e22:	2136      	movs	r1, #54	; 0x36
    (*index) += size;    
 8003e24:	f04f 09f9 	mov.w	r9, #249	; 0xf9
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003e28:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8003e2c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8003e30:	f36c 0307 	bfi	r3, ip, #0, #8
 8003e34:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8003e38:	f360 230f 	bfi	r3, r0, #8, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8003e3c:	2004      	movs	r0, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003e3e:	f36c 4317 	bfi	r3, ip, #16, #8
 8003e42:	f362 631f 	bfi	r3, r2, #24, #8
 8003e46:	60e3      	str	r3, [r4, #12]
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8003e48:	696b      	ldr	r3, [r5, #20]
    *(bootp_message + (*index)) = (UCHAR)option;
 8003e4a:	f884 10f3 	strb.w	r1, [r4, #243]	; 0xf3
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003e4e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8003e52:	0e19      	lsrs	r1, r3, #24
 8003e54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003e58:	f3c3 2307 	ubfx	r3, r3, #8, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8003e5c:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8003e60:	f884 10f5 	strb.w	r1, [r4, #245]	; 0xf5
 8003e64:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
 8003e68:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
            interface_record -> nx_dhcp_releases_sent++;
 8003e6c:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
 8003e70:	3301      	adds	r3, #1
 8003e72:	f8c5 319c 	str.w	r3, [r5, #412]	; 0x19c
    if (dhcp_ptr -> nx_dhcp_user_option_add)
 8003e76:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8003e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7c:	eb04 0c09 	add.w	ip, r4, r9
 8003e80:	f8d2 b000 	ldr.w	fp, [r2]
 8003e84:	f1bb 0f00 	cmp.w	fp, #0
 8003e88:	d017      	beq.n	8003eba <_nx_dhcp_send_request_internal+0x1e2>
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8003e8a:	6959      	ldr	r1, [r3, #20]
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 8003e8c:	4663      	mov	r3, ip
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8003e8e:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 8003e92:	4642      	mov	r2, r8
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8003e94:	eba1 0c0c 	sub.w	ip, r1, ip
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 8003e98:	4638      	mov	r0, r7
 8003e9a:	4651      	mov	r1, sl
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8003e9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003ea0:	f84e cd30 	str.w	ip, [lr, #-48]!
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 8003ea4:	f8cd e000 	str.w	lr, [sp]
 8003ea8:	47d8      	blx	fp
 8003eaa:	2801      	cmp	r0, #1
 8003eac:	f040 8319 	bne.w	80044e2 <_nx_dhcp_send_request_internal+0x80a>
 8003eb0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
            index += user_option_length;
 8003eb4:	4491      	add	r9, r2
 8003eb6:	eb04 0c09 	add.w	ip, r4, r9
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 8003eba:	f44f 7496 	mov.w	r4, #300	; 0x12c
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 8003ebe:	689a      	ldr	r2, [r3, #8]
    index ++;
 8003ec0:	f109 0101 	add.w	r1, r9, #1
    *(buffer + index) = NX_DHCP_OPTION_END;
 8003ec4:	20ff      	movs	r0, #255	; 0xff
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 8003ec6:	4422      	add	r2, r4
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 8003ec8:	625c      	str	r4, [r3, #36]	; 0x24
    if (index > NX_BOOTP_OFFSET_END)
 8003eca:	42a1      	cmp	r1, r4
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 8003ecc:	60da      	str	r2, [r3, #12]
    *(buffer + index) = NX_DHCP_OPTION_END;
 8003ece:	f88c 0000 	strb.w	r0, [ip]
        packet_ptr -> nx_packet_length = index;
 8003ed2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    if (index > NX_BOOTP_OFFSET_END)
 8003ed4:	d903      	bls.n	8003ede <_nx_dhcp_send_request_internal+0x206>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 8003ed6:	68a3      	ldr	r3, [r4, #8]
        packet_ptr -> nx_packet_length = index;
 8003ed8:	6261      	str	r1, [r4, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 8003eda:	4419      	add	r1, r3
 8003edc:	60e1      	str	r1, [r4, #12]
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 8003ede:	f1b8 0f03 	cmp.w	r8, #3
 8003ee2:	f000 8232 	beq.w	800434a <_nx_dhcp_send_request_internal+0x672>
 8003ee6:	f1b8 0f07 	cmp.w	r8, #7
 8003eea:	f000 822c 	beq.w	8004346 <_nx_dhcp_send_request_internal+0x66e>
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDISCOVER) ||
 8003eee:	f1b8 0f01 	cmp.w	r8, #1
 8003ef2:	f000 8232 	beq.w	800435a <_nx_dhcp_send_request_internal+0x682>
        targetIP = NX_BOOTP_BC_ADDRESS;
 8003ef6:	f04f 32ff 	mov.w	r2, #4294967295
        status = nx_udp_socket_interface_send(&(dhcp_ptr -> nx_dhcp_socket), packet_ptr, targetIP, NX_DHCP_SERVER_UDP_PORT, iface_index);
 8003efa:	f8cd a000 	str.w	sl, [sp]
 8003efe:	4621      	mov	r1, r4
 8003f00:	f607 30dc 	addw	r0, r7, #3036	; 0xbdc
 8003f04:	2343      	movs	r3, #67	; 0x43
 8003f06:	f005 fb8f 	bl	8009628 <_nx_udp_socket_source_send>
    if (status != NX_SUCCESS)
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	f43f aef9 	beq.w	8003d04 <_nx_dhcp_send_request_internal+0x2c>
 8003f12:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003f14:	e2e1      	b.n	80044da <_nx_dhcp_send_request_internal+0x802>
            if (dhcp_ptr -> nx_dhcp_name)
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	f000 8325 	beq.w	8004568 <_nx_dhcp_send_request_internal+0x890>
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8003f1e:	22ff      	movs	r2, #255	; 0xff
 8003f20:	a90b      	add	r1, sp, #44	; 0x2c
 8003f22:	f005 fc61 	bl	80097e8 <_nx_utility_string_length_check>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	f040 83cc 	bne.w	80046c4 <_nx_dhcp_send_request_internal+0x9ec>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8003f2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    *(bootp_message + (*index)) = (UCHAR)option;
 8003f2e:	220c      	movs	r2, #12
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8003f30:	687b      	ldr	r3, [r7, #4]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 8003f32:	f104 0ef5 	add.w	lr, r4, #245	; 0xf5
    *(bootp_message + (*index)) = (UCHAR)size; 
 8003f36:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
/**************************************************************************/
static VOID  _nx_dhcp_move_string(UCHAR *dest, UCHAR *source, UINT size)
{

    /* Loop to copy all bytes.  */
    while (size-- > 0)
 8003f3a:	f101 39ff 	add.w	r9, r1, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 8003f3e:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
    while (size-- > 0)
 8003f42:	2900      	cmp	r1, #0
 8003f44:	d075      	beq.n	8004032 <_nx_dhcp_send_request_internal+0x35a>
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	f104 00f9 	add.w	r0, r4, #249	; 0xf9
 8003f4c:	4283      	cmp	r3, r0
 8003f4e:	bf38      	it	cc
 8003f50:	4596      	cmpcc	lr, r2
 8003f52:	f0c0 8422 	bcc.w	800479a <_nx_dhcp_send_request_internal+0xac2>
 8003f56:	290b      	cmp	r1, #11
 8003f58:	f240 841f 	bls.w	800479a <_nx_dhcp_send_request_internal+0xac2>
 8003f5c:	425a      	negs	r2, r3
 8003f5e:	f002 0203 	and.w	r2, r2, #3
 8003f62:	1cd0      	adds	r0, r2, #3
 8003f64:	4548      	cmp	r0, r9
 8003f66:	d843      	bhi.n	8003ff0 <_nx_dhcp_send_request_internal+0x318>
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	f000 8430 	beq.w	80047ce <_nx_dhcp_send_request_internal+0xaf6>
    {
        
        /* Copy a byte.  */
        *dest++ = *source++;
 8003f6e:	f893 c000 	ldrb.w	ip, [r3]
 8003f72:	1c58      	adds	r0, r3, #1
 8003f74:	2a01      	cmp	r2, #1
 8003f76:	f104 0ef6 	add.w	lr, r4, #246	; 0xf6
 8003f7a:	9005      	str	r0, [sp, #20]
    while (size-- > 0)
 8003f7c:	f1a1 0902 	sub.w	r9, r1, #2
        *dest++ = *source++;
 8003f80:	f884 c0f5 	strb.w	ip, [r4, #245]	; 0xf5
 8003f84:	d015      	beq.n	8003fb2 <_nx_dhcp_send_request_internal+0x2da>
 8003f86:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003f8a:	1c98      	adds	r0, r3, #2
 8003f8c:	2a03      	cmp	r2, #3
 8003f8e:	f104 0ef7 	add.w	lr, r4, #247	; 0xf7
 8003f92:	9005      	str	r0, [sp, #20]
    while (size-- > 0)
 8003f94:	f1a1 0903 	sub.w	r9, r1, #3
        *dest++ = *source++;
 8003f98:	f884 c0f6 	strb.w	ip, [r4, #246]	; 0xf6
 8003f9c:	d109      	bne.n	8003fb2 <_nx_dhcp_send_request_internal+0x2da>
 8003f9e:	f893 c002 	ldrb.w	ip, [r3, #2]
 8003fa2:	1cd8      	adds	r0, r3, #3
 8003fa4:	f104 0ef8 	add.w	lr, r4, #248	; 0xf8
    while (size-- > 0)
 8003fa8:	f1a1 0904 	sub.w	r9, r1, #4
        *dest++ = *source++;
 8003fac:	9005      	str	r0, [sp, #20]
 8003fae:	f884 c0f7 	strb.w	ip, [r4, #247]	; 0xf7
 8003fb2:	1a88      	subs	r0, r1, r2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	468c      	mov	ip, r1
 8003fb8:	9004      	str	r0, [sp, #16]
 8003fba:	f102 00f5 	add.w	r0, r2, #245	; 0xf5
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4420      	add	r0, r4
 8003fc2:	9006      	str	r0, [sp, #24]
 8003fc4:	9804      	ldr	r0, [sp, #16]
 8003fc6:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 8003fca:	9806      	ldr	r0, [sp, #24]
 8003fcc:	3201      	adds	r2, #1
        *dest++ = *source++;
 8003fce:	f853 1b04 	ldr.w	r1, [r3], #4
 8003fd2:	4593      	cmp	fp, r2
 8003fd4:	f840 1b04 	str.w	r1, [r0], #4
 8003fd8:	d8f8      	bhi.n	8003fcc <_nx_dhcp_send_request_internal+0x2f4>
 8003fda:	9804      	ldr	r0, [sp, #16]
 8003fdc:	4661      	mov	r1, ip
 8003fde:	9b05      	ldr	r3, [sp, #20]
 8003fe0:	f020 0203 	bic.w	r2, r0, #3
 8003fe4:	4282      	cmp	r2, r0
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4496      	add	lr, r2
 8003fea:	eba9 0902 	sub.w	r9, r9, r2
 8003fee:	d020      	beq.n	8004032 <_nx_dhcp_send_request_internal+0x35a>
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	f88e 2000 	strb.w	r2, [lr]
    while (size-- > 0)
 8003ff6:	f1b9 0f00 	cmp.w	r9, #0
 8003ffa:	d01a      	beq.n	8004032 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 8003ffc:	785a      	ldrb	r2, [r3, #1]
    while (size-- > 0)
 8003ffe:	f1b9 0f01 	cmp.w	r9, #1
        *dest++ = *source++;
 8004002:	f88e 2001 	strb.w	r2, [lr, #1]
    while (size-- > 0)
 8004006:	d014      	beq.n	8004032 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 8004008:	789a      	ldrb	r2, [r3, #2]
    while (size-- > 0)
 800400a:	f1b9 0f02 	cmp.w	r9, #2
        *dest++ = *source++;
 800400e:	f88e 2002 	strb.w	r2, [lr, #2]
    while (size-- > 0)
 8004012:	d00e      	beq.n	8004032 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 8004014:	78da      	ldrb	r2, [r3, #3]
    while (size-- > 0)
 8004016:	f1b9 0f03 	cmp.w	r9, #3
        *dest++ = *source++;
 800401a:	f88e 2003 	strb.w	r2, [lr, #3]
    while (size-- > 0)
 800401e:	d008      	beq.n	8004032 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 8004020:	791a      	ldrb	r2, [r3, #4]
    while (size-- > 0)
 8004022:	f1b9 0f04 	cmp.w	r9, #4
        *dest++ = *source++;
 8004026:	f88e 2004 	strb.w	r2, [lr, #4]
    while (size-- > 0)
 800402a:	d002      	beq.n	8004032 <_nx_dhcp_send_request_internal+0x35a>
        *dest++ = *source++;
 800402c:	795b      	ldrb	r3, [r3, #5]
 800402e:	f88e 3005 	strb.w	r3, [lr, #5]
    (*index) += size;    
 8004032:	f101 0ef5 	add.w	lr, r1, #245	; 0xf5
 8004036:	f101 0cf6 	add.w	ip, r1, #246	; 0xf6
 800403a:	f101 00f7 	add.w	r0, r1, #247	; 0xf7
 800403e:	f101 09f8 	add.w	r9, r1, #248	; 0xf8
 8004042:	e298      	b.n	8004576 <_nx_dhcp_send_request_internal+0x89e>
 8004044:	00060101 	.word	0x00060101
 8004048:	63538263 	.word	0x63538263
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800404c:	68eb      	ldr	r3, [r5, #12]
 800404e:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
 8004052:	1e5a      	subs	r2, r3, #1
 8004054:	3203      	adds	r2, #3
 8004056:	f240 826a 	bls.w	800452e <_nx_dhcp_send_request_internal+0x856>
 800405a:	23f4      	movs	r3, #244	; 0xf4
 800405c:	f04f 09f9 	mov.w	r9, #249	; 0xf9
    (*index) += size;    
 8004060:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
 8004064:	9304      	str	r3, [sp, #16]
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8004066:	696a      	ldr	r2, [r5, #20]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004068:	2300      	movs	r3, #0
    *(bootp_message + (*index)) = (UCHAR)option;
 800406a:	f04f 0e36 	mov.w	lr, #54	; 0x36
        *data = (UCHAR) ((value >> 24) & 0xff);
 800406e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8004072:	f3c2 4007 	ubfx	r0, r2, #16, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 8004076:	f804 e00b 	strb.w	lr, [r4, fp]
        *data = (UCHAR) ((value >> 24) & 0xff);
 800407a:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 800407e:	f36c 0307 	bfi	r3, ip, #0, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004082:	f04f 0c04 	mov.w	ip, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004086:	f360 230f 	bfi	r3, r0, #8, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 800408a:	9804      	ldr	r0, [sp, #16]
        *data = (UCHAR) ((value >> 24) & 0xff);
 800408c:	f36e 4317 	bfi	r3, lr, #16, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004090:	f804 c000 	strb.w	ip, [r4, r0]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004094:	f362 631f 	bfi	r3, r2, #24, #8
 8004098:	600b      	str	r3, [r1, #0]
 800409a:	e6ec      	b.n	8003e76 <_nx_dhcp_send_request_internal+0x19e>
            if (dhcp_ptr -> nx_dhcp_name)
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	2800      	cmp	r0, #0
 80040a0:	f000 827a 	beq.w	8004598 <_nx_dhcp_send_request_internal+0x8c0>
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80040a4:	22ff      	movs	r2, #255	; 0xff
 80040a6:	a90b      	add	r1, sp, #44	; 0x2c
 80040a8:	f005 fb9e 	bl	80097e8 <_nx_utility_string_length_check>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	f040 8309 	bne.w	80046c4 <_nx_dhcp_send_request_internal+0x9ec>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80040b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    *(bootp_message + (*index)) = (UCHAR)option;
 80040b4:	210c      	movs	r1, #12
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80040b6:	687b      	ldr	r3, [r7, #4]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 80040b8:	f104 0ef5 	add.w	lr, r4, #245	; 0xf5
    *(bootp_message + (*index)) = (UCHAR)size; 
 80040bc:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
    while (size-- > 0)
 80040c0:	f102 39ff 	add.w	r9, r2, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 80040c4:	f884 10f3 	strb.w	r1, [r4, #243]	; 0xf3
    while (size-- > 0)
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	d075      	beq.n	80041b8 <_nx_dhcp_send_request_internal+0x4e0>
 80040cc:	f104 01f9 	add.w	r1, r4, #249	; 0xf9
 80040d0:	1d18      	adds	r0, r3, #4
 80040d2:	4586      	cmp	lr, r0
 80040d4:	bf38      	it	cc
 80040d6:	428b      	cmpcc	r3, r1
 80040d8:	f0c0 836c 	bcc.w	80047b4 <_nx_dhcp_send_request_internal+0xadc>
 80040dc:	2a0b      	cmp	r2, #11
 80040de:	f240 8369 	bls.w	80047b4 <_nx_dhcp_send_request_internal+0xadc>
 80040e2:	4259      	negs	r1, r3
 80040e4:	f001 0103 	and.w	r1, r1, #3
 80040e8:	1cc8      	adds	r0, r1, #3
 80040ea:	4581      	cmp	r9, r0
 80040ec:	d343      	bcc.n	8004176 <_nx_dhcp_send_request_internal+0x49e>
 80040ee:	2900      	cmp	r1, #0
 80040f0:	f000 8370 	beq.w	80047d4 <_nx_dhcp_send_request_internal+0xafc>
        *dest++ = *source++;
 80040f4:	f893 c000 	ldrb.w	ip, [r3]
 80040f8:	1c58      	adds	r0, r3, #1
 80040fa:	2901      	cmp	r1, #1
 80040fc:	f104 0ef6 	add.w	lr, r4, #246	; 0xf6
 8004100:	9005      	str	r0, [sp, #20]
    while (size-- > 0)
 8004102:	f1a2 0902 	sub.w	r9, r2, #2
        *dest++ = *source++;
 8004106:	f884 c0f5 	strb.w	ip, [r4, #245]	; 0xf5
 800410a:	d015      	beq.n	8004138 <_nx_dhcp_send_request_internal+0x460>
 800410c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8004110:	1c98      	adds	r0, r3, #2
 8004112:	2903      	cmp	r1, #3
 8004114:	f104 0ef7 	add.w	lr, r4, #247	; 0xf7
 8004118:	9005      	str	r0, [sp, #20]
    while (size-- > 0)
 800411a:	f1a2 0903 	sub.w	r9, r2, #3
        *dest++ = *source++;
 800411e:	f884 c0f6 	strb.w	ip, [r4, #246]	; 0xf6
 8004122:	d109      	bne.n	8004138 <_nx_dhcp_send_request_internal+0x460>
 8004124:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004128:	1cd8      	adds	r0, r3, #3
 800412a:	f104 0ef8 	add.w	lr, r4, #248	; 0xf8
    while (size-- > 0)
 800412e:	f1a2 0904 	sub.w	r9, r2, #4
        *dest++ = *source++;
 8004132:	9005      	str	r0, [sp, #20]
 8004134:	f884 c0f7 	strb.w	ip, [r4, #247]	; 0xf7
 8004138:	1a50      	subs	r0, r2, r1
 800413a:	440b      	add	r3, r1
 800413c:	4694      	mov	ip, r2
 800413e:	9004      	str	r0, [sp, #16]
 8004140:	f101 00f5 	add.w	r0, r1, #245	; 0xf5
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8004144:	2100      	movs	r1, #0
 8004146:	4420      	add	r0, r4
 8004148:	9006      	str	r0, [sp, #24]
 800414a:	9804      	ldr	r0, [sp, #16]
 800414c:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 8004150:	9806      	ldr	r0, [sp, #24]
 8004152:	3101      	adds	r1, #1
        *dest++ = *source++;
 8004154:	f853 2b04 	ldr.w	r2, [r3], #4
 8004158:	458b      	cmp	fp, r1
 800415a:	f840 2b04 	str.w	r2, [r0], #4
 800415e:	d8f8      	bhi.n	8004152 <_nx_dhcp_send_request_internal+0x47a>
 8004160:	9804      	ldr	r0, [sp, #16]
 8004162:	4662      	mov	r2, ip
 8004164:	9b05      	ldr	r3, [sp, #20]
 8004166:	f020 0103 	bic.w	r1, r0, #3
 800416a:	4288      	cmp	r0, r1
 800416c:	440b      	add	r3, r1
 800416e:	448e      	add	lr, r1
 8004170:	eba9 0901 	sub.w	r9, r9, r1
 8004174:	d020      	beq.n	80041b8 <_nx_dhcp_send_request_internal+0x4e0>
 8004176:	7819      	ldrb	r1, [r3, #0]
 8004178:	f88e 1000 	strb.w	r1, [lr]
    while (size-- > 0)
 800417c:	f1b9 0f00 	cmp.w	r9, #0
 8004180:	d01a      	beq.n	80041b8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 8004182:	7859      	ldrb	r1, [r3, #1]
    while (size-- > 0)
 8004184:	f1b9 0f01 	cmp.w	r9, #1
        *dest++ = *source++;
 8004188:	f88e 1001 	strb.w	r1, [lr, #1]
    while (size-- > 0)
 800418c:	d014      	beq.n	80041b8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 800418e:	7899      	ldrb	r1, [r3, #2]
    while (size-- > 0)
 8004190:	f1b9 0f02 	cmp.w	r9, #2
        *dest++ = *source++;
 8004194:	f88e 1002 	strb.w	r1, [lr, #2]
    while (size-- > 0)
 8004198:	d00e      	beq.n	80041b8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 800419a:	78d9      	ldrb	r1, [r3, #3]
    while (size-- > 0)
 800419c:	f1b9 0f03 	cmp.w	r9, #3
        *dest++ = *source++;
 80041a0:	f88e 1003 	strb.w	r1, [lr, #3]
    while (size-- > 0)
 80041a4:	d008      	beq.n	80041b8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 80041a6:	7919      	ldrb	r1, [r3, #4]
    while (size-- > 0)
 80041a8:	f1b9 0f04 	cmp.w	r9, #4
        *dest++ = *source++;
 80041ac:	f88e 1004 	strb.w	r1, [lr, #4]
    while (size-- > 0)
 80041b0:	d002      	beq.n	80041b8 <_nx_dhcp_send_request_internal+0x4e0>
        *dest++ = *source++;
 80041b2:	795b      	ldrb	r3, [r3, #5]
 80041b4:	f88e 3005 	strb.w	r3, [lr, #5]
    (*index) += size;    
 80041b8:	f102 00f5 	add.w	r0, r2, #245	; 0xf5
 80041bc:	f102 01f6 	add.w	r1, r2, #246	; 0xf6
 80041c0:	f102 03f7 	add.w	r3, r2, #247	; 0xf7
 80041c4:	e1eb      	b.n	800459e <_nx_dhcp_send_request_internal+0x8c6>
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80041c6:	68eb      	ldr	r3, [r5, #12]
 80041c8:	f104 02f5 	add.w	r2, r4, #245	; 0xf5
 80041cc:	1e59      	subs	r1, r3, #1
 80041ce:	3103      	adds	r1, #3
 80041d0:	f240 8191 	bls.w	80044f6 <_nx_dhcp_send_request_internal+0x81e>
 80041d4:	f04f 09f9 	mov.w	r9, #249	; 0xf9
 80041d8:	20f4      	movs	r0, #244	; 0xf4
    (*index) += size;    
 80041da:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
    *(bootp_message + (*index)) = (UCHAR)option;
 80041de:	f04f 0c33 	mov.w	ip, #51	; 0x33
    *(bootp_message + (*index)) = (UCHAR)size; 
 80041e2:	2104      	movs	r1, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 80041e8:	f804 c00b 	strb.w	ip, [r4, fp]
    *(bootp_message + (*index)) = (UCHAR)size; 
 80041ec:	5421      	strb	r1, [r4, r0]
        *data = (UCHAR) ((value >> 24) & 0xff);
 80041ee:	6013      	str	r3, [r2, #0]
            if (dhcp_ptr -> nx_dhcp_name)
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	2800      	cmp	r0, #0
 80041f4:	f000 808e 	beq.w	8004314 <_nx_dhcp_send_request_internal+0x63c>
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	a90b      	add	r1, sp, #44	; 0x2c
 80041fc:	f005 faf4 	bl	80097e8 <_nx_utility_string_length_check>
 8004200:	2800      	cmp	r0, #0
 8004202:	f040 825f 	bne.w	80046c4 <_nx_dhcp_send_request_internal+0x9ec>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8004206:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    *(bootp_message + (*index)) = (UCHAR)option;
 800420a:	210c      	movs	r1, #12
    (*index) ++;
 800420c:	f10b 0008 	add.w	r0, fp, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004210:	eb04 020b 	add.w	r2, r4, fp
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8004214:	687b      	ldr	r3, [r7, #4]
    while (size-- > 0)
 8004216:	f10c 3eff 	add.w	lr, ip, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 800421a:	f804 1009 	strb.w	r1, [r4, r9]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 800421e:	1821      	adds	r1, r4, r0
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004220:	f882 c007 	strb.w	ip, [r2, #7]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 8004224:	9004      	str	r0, [sp, #16]
    while (size-- > 0)
 8004226:	f1bc 0f00 	cmp.w	ip, #0
 800422a:	d070      	beq.n	800430e <_nx_dhcp_send_request_internal+0x636>
 800422c:	f10b 020c 	add.w	r2, fp, #12
 8004230:	1d18      	adds	r0, r3, #4
 8004232:	4422      	add	r2, r4
 8004234:	4281      	cmp	r1, r0
 8004236:	bf38      	it	cc
 8004238:	4293      	cmpcc	r3, r2
 800423a:	f0c0 82a4 	bcc.w	8004786 <_nx_dhcp_send_request_internal+0xaae>
 800423e:	f1bc 0f0b 	cmp.w	ip, #11
 8004242:	f240 82a0 	bls.w	8004786 <_nx_dhcp_send_request_internal+0xaae>
 8004246:	425a      	negs	r2, r3
 8004248:	f002 0903 	and.w	r9, r2, #3
 800424c:	f109 0003 	add.w	r0, r9, #3
 8004250:	4570      	cmp	r0, lr
 8004252:	d841      	bhi.n	80042d8 <_nx_dhcp_send_request_internal+0x600>
 8004254:	f1b9 0f00 	cmp.w	r9, #0
 8004258:	f000 82be 	beq.w	80047d8 <_nx_dhcp_send_request_internal+0xb00>
        *dest++ = *source++;
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	7818      	ldrb	r0, [r3, #0]
 8004260:	f1b9 0f01 	cmp.w	r9, #1
    while (size-- > 0)
 8004264:	f1ac 0e02 	sub.w	lr, ip, #2
        *dest++ = *source++;
 8004268:	9206      	str	r2, [sp, #24]
 800426a:	f101 0201 	add.w	r2, r1, #1
 800426e:	9205      	str	r2, [sp, #20]
 8004270:	9a04      	ldr	r2, [sp, #16]
 8004272:	54a0      	strb	r0, [r4, r2]
 8004274:	d013      	beq.n	800429e <_nx_dhcp_send_request_internal+0x5c6>
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	7858      	ldrb	r0, [r3, #1]
 800427a:	f1b9 0f03 	cmp.w	r9, #3
    while (size-- > 0)
 800427e:	f1ac 0e03 	sub.w	lr, ip, #3
        *dest++ = *source++;
 8004282:	9206      	str	r2, [sp, #24]
 8004284:	f101 0202 	add.w	r2, r1, #2
 8004288:	7048      	strb	r0, [r1, #1]
 800428a:	9205      	str	r2, [sp, #20]
 800428c:	d107      	bne.n	800429e <_nx_dhcp_send_request_internal+0x5c6>
 800428e:	1cca      	adds	r2, r1, #3
 8004290:	7898      	ldrb	r0, [r3, #2]
    while (size-- > 0)
 8004292:	f1ac 0e04 	sub.w	lr, ip, #4
        *dest++ = *source++;
 8004296:	9205      	str	r2, [sp, #20]
 8004298:	1cda      	adds	r2, r3, #3
 800429a:	7088      	strb	r0, [r1, #2]
 800429c:	9206      	str	r2, [sp, #24]
 800429e:	f109 0108 	add.w	r1, r9, #8
 80042a2:	ebac 0009 	sub.w	r0, ip, r9
 80042a6:	444b      	add	r3, r9
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80042a8:	2200      	movs	r2, #0
 80042aa:	4459      	add	r1, fp
 80042ac:	ea4f 0990 	mov.w	r9, r0, lsr #2
 80042b0:	9007      	str	r0, [sp, #28]
 80042b2:	4421      	add	r1, r4
 80042b4:	3201      	adds	r2, #1
        *dest++ = *source++;
 80042b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80042ba:	4591      	cmp	r9, r2
 80042bc:	f841 0b04 	str.w	r0, [r1], #4
 80042c0:	d8f8      	bhi.n	80042b4 <_nx_dhcp_send_request_internal+0x5dc>
 80042c2:	9807      	ldr	r0, [sp, #28]
 80042c4:	9b06      	ldr	r3, [sp, #24]
 80042c6:	f020 0203 	bic.w	r2, r0, #3
 80042ca:	9905      	ldr	r1, [sp, #20]
 80042cc:	4282      	cmp	r2, r0
 80042ce:	4413      	add	r3, r2
 80042d0:	4411      	add	r1, r2
 80042d2:	ebae 0e02 	sub.w	lr, lr, r2
 80042d6:	d01a      	beq.n	800430e <_nx_dhcp_send_request_internal+0x636>
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	700a      	strb	r2, [r1, #0]
    while (size-- > 0)
 80042dc:	f1be 0f00 	cmp.w	lr, #0
 80042e0:	d015      	beq.n	800430e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 80042e2:	785a      	ldrb	r2, [r3, #1]
    while (size-- > 0)
 80042e4:	f1be 0f01 	cmp.w	lr, #1
        *dest++ = *source++;
 80042e8:	704a      	strb	r2, [r1, #1]
    while (size-- > 0)
 80042ea:	d010      	beq.n	800430e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 80042ec:	789a      	ldrb	r2, [r3, #2]
    while (size-- > 0)
 80042ee:	f1be 0f02 	cmp.w	lr, #2
        *dest++ = *source++;
 80042f2:	708a      	strb	r2, [r1, #2]
    while (size-- > 0)
 80042f4:	d00b      	beq.n	800430e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 80042f6:	78da      	ldrb	r2, [r3, #3]
    while (size-- > 0)
 80042f8:	f1be 0f03 	cmp.w	lr, #3
        *dest++ = *source++;
 80042fc:	70ca      	strb	r2, [r1, #3]
    while (size-- > 0)
 80042fe:	d006      	beq.n	800430e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 8004300:	791a      	ldrb	r2, [r3, #4]
    while (size-- > 0)
 8004302:	f1be 0f04 	cmp.w	lr, #4
        *dest++ = *source++;
 8004306:	710a      	strb	r2, [r1, #4]
    while (size-- > 0)
 8004308:	d001      	beq.n	800430e <_nx_dhcp_send_request_internal+0x636>
        *dest++ = *source++;
 800430a:	795b      	ldrb	r3, [r3, #5]
 800430c:	714b      	strb	r3, [r1, #5]
    (*index) += size;    
 800430e:	9b04      	ldr	r3, [sp, #16]
 8004310:	4463      	add	r3, ip
 8004312:	4699      	mov	r9, r3
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004314:	eb04 0209 	add.w	r2, r4, r9
        *dest++ = *source++;
 8004318:	4b9e      	ldr	r3, [pc, #632]	; (8004594 <_nx_dhcp_send_request_internal+0x8bc>)
    *(bootp_message + (*index)) = (UCHAR)option;
 800431a:	2137      	movs	r1, #55	; 0x37
    *(bootp_message + (*index)) = (UCHAR)size; 
 800431c:	2003      	movs	r0, #3
    *(bootp_message + (*index)) = (UCHAR)option;
 800431e:	f804 1009 	strb.w	r1, [r4, r9]
    (*index) ++;
 8004322:	f109 0102 	add.w	r1, r9, #2
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004326:	7050      	strb	r0, [r2, #1]
    (*index) += size;    
 8004328:	f109 0905 	add.w	r9, r9, #5
        *dest++ = *source++;
 800432c:	7818      	ldrb	r0, [r3, #0]
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 800432e:	1862      	adds	r2, r4, r1
        *dest++ = *source++;
 8004330:	5460      	strb	r0, [r4, r1]
 8004332:	7859      	ldrb	r1, [r3, #1]
 8004334:	7051      	strb	r1, [r2, #1]
 8004336:	789b      	ldrb	r3, [r3, #2]
 8004338:	7093      	strb	r3, [r2, #2]
            interface_record -> nx_dhcp_discoveries_sent++;
 800433a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
 800433e:	3301      	adds	r3, #1
 8004340:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
            break;
 8004344:	e597      	b.n	8003e76 <_nx_dhcp_send_request_internal+0x19e>
        targetIP = interface_record -> nx_dhcp_server_ip;
 8004346:	696a      	ldr	r2, [r5, #20]
 8004348:	e5d7      	b.n	8003efa <_nx_dhcp_send_request_internal+0x222>
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 800434a:	786b      	ldrb	r3, [r5, #1]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d0fa      	beq.n	8004346 <_nx_dhcp_send_request_internal+0x66e>
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 8004350:	2b04      	cmp	r3, #4
        targetIP = NX_BOOTP_BC_ADDRESS;
 8004352:	f04f 32ff 	mov.w	r2, #4294967295
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 8004356:	f63f add0 	bhi.w	8003efa <_nx_dhcp_send_request_internal+0x222>
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 800435a:	9b03      	ldr	r3, [sp, #12]
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 800435c:	2200      	movs	r2, #0
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 800435e:	68bd      	ldr	r5, [r7, #8]
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 8004360:	f04f 31ff 	mov.w	r1, #4294967295
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 8004364:	4453      	add	r3, sl
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 8004366:	920c      	str	r2, [sp, #48]	; 0x30
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 8004368:	910d      	str	r1, [sp, #52]	; 0x34
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	f603 4248 	addw	r2, r3, #3144	; 0xc48
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8004370:	442b      	add	r3, r5
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 8004372:	442a      	add	r2, r5
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8004374:	f893 1c4c 	ldrb.w	r1, [r3, #3148]	; 0xc4c
    packet_ptr -> nx_packet_ip_interface = interface_ptr;
 8004378:	6362      	str	r2, [r4, #52]	; 0x34
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 800437a:	2900      	cmp	r1, #0
 800437c:	f000 80ac 	beq.w	80044d8 <_nx_dhcp_send_request_internal+0x800>
 8004380:	f893 2c4e 	ldrb.w	r2, [r3, #3150]	; 0xc4e
 8004384:	2a00      	cmp	r2, #0
 8004386:	f000 80a7 	beq.w	80044d8 <_nx_dhcp_send_request_internal+0x800>
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800438a:	2104      	movs	r1, #4
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800438c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800438e:	f8d4 8008 	ldr.w	r8, [r4, #8]
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8004392:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 8004396:	3208      	adds	r2, #8
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8004398:	f8d3 0c88 	ldr.w	r0, [r3, #3208]	; 0xc88
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800439c:	f1a8 0108 	sub.w	r1, r8, #8
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80043a0:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 80043a4:	ea4f 4e02 	mov.w	lr, r2, lsl #16
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 80043a8:	60a1      	str	r1, [r4, #8]
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80043aa:	041b      	lsls	r3, r3, #16
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 80043ac:	6262      	str	r2, [r4, #36]	; 0x24
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80043ae:	ea4e 413e 	orr.w	r1, lr, lr, ror #16
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80043b2:	f043 0c43 	orr.w	ip, r3, #67	; 0x43
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80043b6:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80043b8:	ea8c 433c 	eor.w	r3, ip, ip, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80043bc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80043c0:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80043c2:	ea81 213e 	eor.w	r1, r1, lr, ror #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80043c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80043ca:	ea83 233c 	eor.w	r3, r3, ip, ror #8
 80043ce:	e948 3102 	strd	r3, r1, [r8, #-8]
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 80043d2:	06c3      	lsls	r3, r0, #27
 80043d4:	f140 8194 	bpl.w	8004700 <_nx_dhcp_send_request_internal+0xa28>
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 80043d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043da:	f043 0310 	orr.w	r3, r3, #16
 80043de:	63e3      	str	r3, [r4, #60]	; 0x3c
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80043e0:	f205 633c 	addw	r3, r5, #1596	; 0x63c
 80043e4:	f04f 31ff 	mov.w	r1, #4294967295
 80043e8:	4618      	mov	r0, r3
 80043ea:	9303      	str	r3, [sp, #12]
 80043ec:	f009 ff92 	bl	800e314 <_txe_mutex_get>
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 80043f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 80043f2:	f8d7 1c10 	ldr.w	r1, [r7, #3088]	; 0xc10
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 80043f6:	f8d7 0c08 	ldr.w	r0, [r7, #3080]	; 0xc08
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 80043fa:	f103 0e14 	add.w	lr, r3, #20
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 80043fe:	f8d7 2c0c 	ldr.w	r2, [r7, #3084]	; 0xc0c
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8004402:	f8d5 3634 	ldr.w	r3, [r5, #1588]	; 0x634
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8004406:	f040 408a 	orr.w	r0, r0, #1157627904	; 0x45000000
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 800440a:	0612      	lsls	r2, r2, #24
    ip_header_ptr -> nx_ip_header_destination_ip =  ip_dest_addr;
 800440c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8004410:	ea41 4b03 	orr.w	fp, r1, r3, lsl #16
 8004414:	3301      	adds	r3, #1
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8004416:	fa1f fa8e 	uxth.w	sl, lr
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 800441a:	f442 1c88 	orr.w	ip, r2, #1114112	; 0x110000
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800441e:	ea8b 413b 	eor.w	r1, fp, fp, ror #16
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8004422:	9304      	str	r3, [sp, #16]
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8004424:	ea40 0a0a 	orr.w	sl, r0, sl
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8004428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800442a:	ea4c 423c 	orr.w	r2, ip, ip, ror #16
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 800442e:	f8d4 8008 	ldr.w	r8, [r4, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8004432:	ea8a 403a 	eor.w	r0, sl, sl, ror #16
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 8004436:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800443a:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800443c:	ea83 4333 	eor.w	r3, r3, r3, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8004440:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8004442:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8004446:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8004448:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800444a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800444e:	ea81 213b 	eor.w	r1, r1, fp, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8004452:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8004456:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800445a:	ea89 4339 	eor.w	r3, r9, r9, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800445e:	ea80 203a 	eor.w	r0, r0, sl, ror #8
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 8004462:	f1a8 0a14 	sub.w	sl, r8, #20
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8004466:	ea82 223c 	eor.w	r2, r2, ip, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800446a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 800446e:	9b04      	ldr	r3, [sp, #16]
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 8004470:	f8c4 a008 	str.w	sl, [r4, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8004474:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8004478:	f8c5 3634 	str.w	r3, [r5, #1588]	; 0x634
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800447c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800447e:	f848 0c14 	str.w	r0, [r8, #-20]
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8004482:	6b60      	ldr	r0, [r4, #52]	; 0x34
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8004484:	ea8b 2333 	eor.w	r3, fp, r3, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8004488:	f848 1c10 	str.w	r1, [r8, #-16]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800448c:	ea8c 2139 	eor.w	r1, ip, r9, ror #8
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8004490:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8004494:	f848 1c04 	str.w	r1, [r8, #-4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8004498:	e948 2303 	strd	r2, r3, [r8, #-12]
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800449c:	f01c 0301 	ands.w	r3, ip, #1
 80044a0:	f000 8116 	beq.w	80046d0 <_nx_dhcp_send_request_internal+0x9f8>
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 80044a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	63e3      	str	r3, [r4, #60]	; 0x3c
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80044ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80044b0:	2104      	movs	r1, #4
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80044b2:	f04f 32ff 	mov.w	r2, #4294967295
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 80044b6:	9514      	str	r5, [sp, #80]	; 0x50
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80044b8:	9310      	str	r3, [sp, #64]	; 0x40
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 80044ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
    driver_request.nx_ip_driver_packet =                packet_ptr;
 80044bc:	9412      	str	r4, [sp, #72]	; 0x48
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 80044be:	4573      	cmp	r3, lr
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_ip_interface;
 80044c0:	9015      	str	r0, [sp, #84]	; 0x54
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80044c2:	910e      	str	r1, [sp, #56]	; 0x38
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80044c4:	9211      	str	r2, [sp, #68]	; 0x44
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 80044c6:	f0c0 814f 	bcc.w	8004768 <_nx_dhcp_send_request_internal+0xa90>
    (packet_ptr -> nx_packet_ip_interface -> nx_interface_link_driver_entry) (&driver_request);
 80044ca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80044cc:	a80e      	add	r0, sp, #56	; 0x38
 80044ce:	4798      	blx	r3
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80044d0:	9803      	ldr	r0, [sp, #12]
 80044d2:	f009 ff53 	bl	800e37c <_txe_mutex_put>
 80044d6:	e415      	b.n	8003d04 <_nx_dhcp_send_request_internal+0x2c>
        return(NX_INVALID_INTERFACE);
 80044d8:	264c      	movs	r6, #76	; 0x4c
        nx_packet_release(packet_ptr);
 80044da:	4620      	mov	r0, r4
 80044dc:	f7fe fc36 	bl	8002d4c <_nx_packet_release>
 80044e0:	e410      	b.n	8003d04 <_nx_dhcp_send_request_internal+0x2c>
            nx_packet_release(packet_ptr);
 80044e2:	9809      	ldr	r0, [sp, #36]	; 0x24
            return(NX_DHCP_UNKNOWN_OPTION);
 80044e4:	269f      	movs	r6, #159	; 0x9f
            nx_packet_release(packet_ptr);
 80044e6:	f7fe fc31 	bl	8002d4c <_nx_packet_release>
            return(NX_DHCP_UNKNOWN_OPTION);
 80044ea:	e40b      	b.n	8003d04 <_nx_dhcp_send_request_internal+0x2c>
        *data = (UCHAR) ((value >> 24) & 0xff);
 80044ec:	72a6      	strb	r6, [r4, #10]
 80044ee:	e449      	b.n	8003d84 <_nx_dhcp_send_request_internal+0xac>
    (*index) += size;    
 80044f0:	f04f 09f3 	mov.w	r9, #243	; 0xf3
 80044f4:	e4bf      	b.n	8003e76 <_nx_dhcp_send_request_internal+0x19e>
        *data = (UCHAR) ((value >> 24) & 0xff);
 80044f6:	0e18      	lsrs	r0, r3, #24
    *(bootp_message + (*index)) = (UCHAR)option;
 80044f8:	2232      	movs	r2, #50	; 0x32
        *data = (UCHAR) ((value >> 24) & 0xff);
 80044fa:	f3c3 4107 	ubfx	r1, r3, #16, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 80044fe:	f04f 0c04 	mov.w	ip, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004502:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8004506:	f3c3 2307 	ubfx	r3, r3, #8, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 800450a:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
        *data = (UCHAR) ((value >> 24) & 0xff);
 800450e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8004512:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
 8004516:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
    *(bootp_message + (*index)) = (UCHAR)size; 
 800451a:	f884 c0f4 	strb.w	ip, [r4, #244]	; 0xf4
        *data = (UCHAR) ((value >> 24) & 0xff);
 800451e:	20fa      	movs	r0, #250	; 0xfa
 8004520:	f884 10f6 	strb.w	r1, [r4, #246]	; 0xf6
    (*index) += size;    
 8004524:	f04f 0bf9 	mov.w	fp, #249	; 0xf9
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004528:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 800452c:	e657      	b.n	80041de <_nx_dhcp_send_request_internal+0x506>
 800452e:	0e18      	lsrs	r0, r3, #24
    *(bootp_message + (*index)) = (UCHAR)option;
 8004530:	2132      	movs	r1, #50	; 0x32
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004532:	f3c3 4207 	ubfx	r2, r3, #16, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004536:	f04f 0c04 	mov.w	ip, #4
        *data = (UCHAR) ((value >> 24) & 0xff);
 800453a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 800453e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004542:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
 8004546:	20fa      	movs	r0, #250	; 0xfa
    *(bootp_message + (*index)) = (UCHAR)option;
 8004548:	f884 10f3 	strb.w	r1, [r4, #243]	; 0xf3
        *data = (UCHAR) ((value >> 24) & 0xff);
 800454c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8004550:	f104 01fb 	add.w	r1, r4, #251	; 0xfb
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004554:	f884 c0f4 	strb.w	ip, [r4, #244]	; 0xf4
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004558:	9004      	str	r0, [sp, #16]
    (*index) += size;    
 800455a:	f04f 0bf9 	mov.w	fp, #249	; 0xf9
        *data = (UCHAR) ((value >> 24) & 0xff);
 800455e:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
 8004562:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8004566:	e57e      	b.n	8004066 <_nx_dhcp_send_request_internal+0x38e>
 8004568:	f04f 09f6 	mov.w	r9, #246	; 0xf6
 800456c:	20f5      	movs	r0, #245	; 0xf5
 800456e:	f04f 0cf4 	mov.w	ip, #244	; 0xf4
    (*index) += size;    
 8004572:	f04f 0ef3 	mov.w	lr, #243	; 0xf3
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004576:	2301      	movs	r3, #1
    *(bootp_message + (*index)) = (UCHAR)option;
 8004578:	2237      	movs	r2, #55	; 0x37
 800457a:	f804 200e 	strb.w	r2, [r4, lr]
    *(bootp_message + (*index)) = (UCHAR)size; 
 800457e:	f804 300c 	strb.w	r3, [r4, ip]
        *dest++ = *source++;
 8004582:	78ab      	ldrb	r3, [r5, #2]
 8004584:	5423      	strb	r3, [r4, r0]
            interface_record -> nx_dhcp_informs_sent++;
 8004586:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
 800458a:	3301      	adds	r3, #1
 800458c:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
            break;
 8004590:	e471      	b.n	8003e76 <_nx_dhcp_send_request_internal+0x19e>
 8004592:	bf00      	nop
 8004594:	2000006c 	.word	0x2000006c
 8004598:	23f5      	movs	r3, #245	; 0xf5
 800459a:	21f4      	movs	r1, #244	; 0xf4
    (*index) += size;    
 800459c:	20f3      	movs	r0, #243	; 0xf3
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800459e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80045a2:	eb04 0b01 	add.w	fp, r4, r1
 80045a6:	4423      	add	r3, r4
 80045a8:	1822      	adds	r2, r4, r0
 80045aa:	f10e 31ff 	add.w	r1, lr, #4294967295
 80045ae:	3103      	adds	r1, #3
 80045b0:	d828      	bhi.n	8004604 <_nx_dhcp_send_request_internal+0x92c>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 80045b2:	7869      	ldrb	r1, [r5, #1]
 80045b4:	3906      	subs	r1, #6
 80045b6:	2901      	cmp	r1, #1
 80045b8:	d924      	bls.n	8004604 <_nx_dhcp_send_request_internal+0x92c>
        *data = (UCHAR) ((value >> 24) & 0xff);
 80045ba:	ea4f 6c1e 	mov.w	ip, lr, lsr #24
 80045be:	2100      	movs	r1, #0
 80045c0:	f3ce 4907 	ubfx	r9, lr, #16, #8
 80045c4:	f36c 0107 	bfi	r1, ip, #0, #8
 80045c8:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 80045cc:	f369 210f 	bfi	r1, r9, #8, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 80045d0:	f04f 0932 	mov.w	r9, #50	; 0x32
        *data = (UCHAR) ((value >> 24) & 0xff);
 80045d4:	f36c 4117 	bfi	r1, ip, #16, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 80045d8:	f882 9000 	strb.w	r9, [r2]
    (*index) += size;    
 80045dc:	f100 0c06 	add.w	ip, r0, #6
 80045e0:	f100 0907 	add.w	r9, r0, #7
        *data = (UCHAR) ((value >> 24) & 0xff);
 80045e4:	f36e 611f 	bfi	r1, lr, #24, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 80045e8:	f04f 0204 	mov.w	r2, #4
 80045ec:	f100 0e08 	add.w	lr, r0, #8
    (*index) += size;    
 80045f0:	4660      	mov	r0, ip
    *(bootp_message + (*index)) = (UCHAR)size; 
 80045f2:	f88b 2000 	strb.w	r2, [fp]
 80045f6:	eb04 020c 	add.w	r2, r4, ip
        *data = (UCHAR) ((value >> 24) & 0xff);
 80045fa:	6019      	str	r1, [r3, #0]
 80045fc:	eb04 0b09 	add.w	fp, r4, r9
 8004600:	eb04 030e 	add.w	r3, r4, lr
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 8004604:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8004606:	2900      	cmp	r1, #0
 8004608:	d046      	beq.n	8004698 <_nx_dhcp_send_request_internal+0x9c0>
 800460a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800460c:	2900      	cmp	r1, #0
 800460e:	d043      	beq.n	8004698 <_nx_dhcp_send_request_internal+0x9c0>
 8004610:	4681      	mov	r9, r0
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 8004612:	7869      	ldrb	r1, [r5, #1]
 8004614:	3906      	subs	r1, #6
 8004616:	2901      	cmp	r1, #1
 8004618:	f240 8094 	bls.w	8004744 <_nx_dhcp_send_request_internal+0xa6c>
                (interface_record -> nx_dhcp_server_ip != NX_BOOTP_BC_ADDRESS)
 800461c:	f8d5 c014 	ldr.w	ip, [r5, #20]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 8004620:	f1bc 3fff 	cmp.w	ip, #4294967295
 8004624:	d021      	beq.n	800466a <_nx_dhcp_send_request_internal+0x992>
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004626:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800462a:	2100      	movs	r1, #0
 800462c:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8004630:	f36e 0107 	bfi	r1, lr, #0, #8
 8004634:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8004638:	f360 210f 	bfi	r1, r0, #8, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 800463c:	2036      	movs	r0, #54	; 0x36
        *data = (UCHAR) ((value >> 24) & 0xff);
 800463e:	f36e 4117 	bfi	r1, lr, #16, #8
    *(bootp_message + (*index)) = (UCHAR)option;
 8004642:	7010      	strb	r0, [r2, #0]
 8004644:	f109 0e07 	add.w	lr, r9, #7
    (*index) += size;    
 8004648:	f109 0006 	add.w	r0, r9, #6
        *data = (UCHAR) ((value >> 24) & 0xff);
 800464c:	f36c 611f 	bfi	r1, ip, #24, #8
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004650:	f04f 0204 	mov.w	r2, #4
 8004654:	f109 0c08 	add.w	ip, r9, #8
    (*index) += size;    
 8004658:	4681      	mov	r9, r0
    *(bootp_message + (*index)) = (UCHAR)size; 
 800465a:	f88b 2000 	strb.w	r2, [fp]
 800465e:	1822      	adds	r2, r4, r0
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004660:	6019      	str	r1, [r3, #0]
 8004662:	eb04 0b0e 	add.w	fp, r4, lr
 8004666:	eb04 030c 	add.w	r3, r4, ip
        *dest++ = *source++;
 800466a:	495d      	ldr	r1, [pc, #372]	; (80047e0 <_nx_dhcp_send_request_internal+0xb08>)
    *(bootp_message + (*index)) = (UCHAR)option;
 800466c:	f04f 0c37 	mov.w	ip, #55	; 0x37
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004670:	2003      	movs	r0, #3
    (*index) += size;    
 8004672:	f109 0905 	add.w	r9, r9, #5
    *(bootp_message + (*index)) = (UCHAR)option;
 8004676:	f882 c000 	strb.w	ip, [r2]
    *(bootp_message + (*index)) = (UCHAR)size; 
 800467a:	f88b 0000 	strb.w	r0, [fp]
        *dest++ = *source++;
 800467e:	780a      	ldrb	r2, [r1, #0]
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	784a      	ldrb	r2, [r1, #1]
 8004684:	705a      	strb	r2, [r3, #1]
 8004686:	788a      	ldrb	r2, [r1, #2]
 8004688:	709a      	strb	r2, [r3, #2]
            interface_record -> nx_dhcp_requests_sent++;
 800468a:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
 800468e:	3301      	adds	r3, #1
 8004690:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
            break;
 8004694:	f7ff bbef 	b.w	8003e76 <_nx_dhcp_send_request_internal+0x19e>
    *(bootp_message + (*index)) = (UCHAR)size; 
 8004698:	f04f 0c04 	mov.w	ip, #4
    *(bootp_message + (*index)) = (UCHAR)option;
 800469c:	f04f 0e33 	mov.w	lr, #51	; 0x33
    (*index) += size;    
 80046a0:	f100 0906 	add.w	r9, r0, #6
        *data = (UCHAR) ((value >> 24) & 0xff);
 80046a4:	f04f 31ff 	mov.w	r1, #4294967295
    *(bootp_message + (*index)) = (UCHAR)option;
 80046a8:	f882 e000 	strb.w	lr, [r2]
    *(bootp_message + (*index)) = (UCHAR)size; 
 80046ac:	f88b c000 	strb.w	ip, [fp]
 80046b0:	f100 0c07 	add.w	ip, r0, #7
 80046b4:	3008      	adds	r0, #8
        *data = (UCHAR) ((value >> 24) & 0xff);
 80046b6:	6019      	str	r1, [r3, #0]
 80046b8:	eb04 0209 	add.w	r2, r4, r9
 80046bc:	eb04 0b0c 	add.w	fp, r4, ip
 80046c0:	1823      	adds	r3, r4, r0
 80046c2:	e7a6      	b.n	8004612 <_nx_dhcp_send_request_internal+0x93a>
                    nx_packet_release(packet_ptr);
 80046c4:	9809      	ldr	r0, [sp, #36]	; 0x24
                    return(NX_DHCP_INVALID_NAME);
 80046c6:	26a8      	movs	r6, #168	; 0xa8
                    nx_packet_release(packet_ptr);
 80046c8:	f7fe fb40 	bl	8002d4c <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 80046cc:	f7ff bb1a 	b.w	8003d04 <_nx_dhcp_send_request_internal+0x2c>
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4, 20, NULL, NULL);
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2214      	movs	r2, #20
 80046d4:	2104      	movs	r1, #4
 80046d6:	4620      	mov	r0, r4
 80046d8:	f7fd fb74 	bl	8001dc4 <_nx_ip_checksum_compute>
        val = val & NX_LOWER_16_MASK;
 80046dc:	43c1      	mvns	r1, r0
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 80046de:	f858 2c0c 	ldr.w	r2, [r8, #-12]
        val = val & NX_LOWER_16_MASK;
 80046e2:	b289      	uxth	r1, r1
 80046e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80046e6:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
        NX_CHANGE_ULONG_ENDIAN(val);
 80046ea:	ea41 4331 	orr.w	r3, r1, r1, ror #16
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80046f4:	ea83 2331 	eor.w	r3, r3, r1, ror #8
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f848 3c0c 	str.w	r3, [r8, #-12]
 80046fe:	e6d5      	b.n	80044ac <_nx_dhcp_send_request_internal+0x7d4>
        checksum = _nx_ip_checksum_compute(packet_ptr,
 8004700:	a80d      	add	r0, sp, #52	; 0x34
 8004702:	ab0c      	add	r3, sp, #48	; 0x30
 8004704:	2111      	movs	r1, #17
 8004706:	9000      	str	r0, [sp, #0]
 8004708:	4620      	mov	r0, r4
 800470a:	f7fd fb5b 	bl	8001dc4 <_nx_ip_checksum_compute>
        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800470e:	f858 1c04 	ldr.w	r1, [r8, #-4]
 8004712:	43c2      	mvns	r2, r0
        if (checksum == 0)
 8004714:	f64f 70ff 	movw	r0, #65535	; 0xffff
        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8004718:	ea81 4331 	eor.w	r3, r1, r1, ror #16
 800471c:	b292      	uxth	r2, r2
 800471e:	0a1b      	lsrs	r3, r3, #8
        if (checksum == 0)
 8004720:	2a00      	cmp	r2, #0
 8004722:	bf08      	it	eq
 8004724:	4602      	moveq	r2, r0
        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8004726:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800472a:	ea83 2331 	eor.w	r3, r3, r1, ror #8
        udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800472e:	4313      	orrs	r3, r2
        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8004730:	ea83 4233 	eor.w	r2, r3, r3, ror #16
 8004734:	0a12      	lsrs	r2, r2, #8
 8004736:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800473a:	ea82 2333 	eor.w	r3, r2, r3, ror #8
 800473e:	f848 3c04 	str.w	r3, [r8, #-4]
 8004742:	e64d      	b.n	80043e0 <_nx_dhcp_send_request_internal+0x708>
                _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8004744:	68e8      	ldr	r0, [r5, #12]
        *data = (UCHAR) ((value >> 24) & 0xff);
 8004746:	2100      	movs	r1, #0
 8004748:	ea4f 6c10 	mov.w	ip, r0, lsr #24
 800474c:	f3c0 4e07 	ubfx	lr, r0, #16, #8
 8004750:	f36c 0107 	bfi	r1, ip, #0, #8
 8004754:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8004758:	f36e 210f 	bfi	r1, lr, #8, #8
 800475c:	f36c 4117 	bfi	r1, ip, #16, #8
 8004760:	f360 611f 	bfi	r1, r0, #24, #8
 8004764:	60e1      	str	r1, [r4, #12]
 8004766:	e780      	b.n	800466a <_nx_dhcp_send_request_internal+0x992>
        if ((ip_ptr -> nx_ip_fragment_processing) && (socket_ptr -> nx_udp_socket_fragment_enable != NX_DONT_FRAGMENT))
 8004768:	f8d5 37b4 	ldr.w	r3, [r5, #1972]	; 0x7b4
 800476c:	b12b      	cbz	r3, 800477a <_nx_dhcp_send_request_internal+0xaa2>
 800476e:	f8d7 2c10 	ldr.w	r2, [r7, #3088]	; 0xc10
 8004772:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004776:	f47f aea9 	bne.w	80044cc <_nx_dhcp_send_request_internal+0x7f4>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800477a:	9803      	ldr	r0, [sp, #12]
            return(NX_NOT_SUCCESSFUL);
 800477c:	2643      	movs	r6, #67	; 0x43
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800477e:	f009 fdfd 	bl	800e37c <_txe_mutex_put>
 8004782:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004784:	e6a9      	b.n	80044da <_nx_dhcp_send_request_internal+0x802>
 8004786:	3901      	subs	r1, #1
 8004788:	eb03 000c 	add.w	r0, r3, ip
        *dest++ = *source++;
 800478c:	f813 2b01 	ldrb.w	r2, [r3], #1
    while (size-- > 0)
 8004790:	4283      	cmp	r3, r0
        *dest++ = *source++;
 8004792:	f801 2f01 	strb.w	r2, [r1, #1]!
    while (size-- > 0)
 8004796:	d1f9      	bne.n	800478c <_nx_dhcp_send_request_internal+0xab4>
 8004798:	e5b9      	b.n	800430e <_nx_dhcp_send_request_internal+0x636>
 800479a:	f101 0cf4 	add.w	ip, r1, #244	; 0xf4
 800479e:	3b01      	subs	r3, #1
 80047a0:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
 80047a4:	44a4      	add	ip, r4
        *dest++ = *source++;
 80047a6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80047aa:	f802 0f01 	strb.w	r0, [r2, #1]!
    while (size-- > 0)
 80047ae:	4562      	cmp	r2, ip
 80047b0:	d1f9      	bne.n	80047a6 <_nx_dhcp_send_request_internal+0xace>
 80047b2:	e43e      	b.n	8004032 <_nx_dhcp_send_request_internal+0x35a>
 80047b4:	f102 0cf4 	add.w	ip, r2, #244	; 0xf4
 80047b8:	3b01      	subs	r3, #1
 80047ba:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
 80047be:	44a4      	add	ip, r4
        *dest++ = *source++;
 80047c0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80047c4:	f801 0f01 	strb.w	r0, [r1, #1]!
    while (size-- > 0)
 80047c8:	4561      	cmp	r1, ip
 80047ca:	d1f9      	bne.n	80047c0 <_nx_dhcp_send_request_internal+0xae8>
 80047cc:	e4f4      	b.n	80041b8 <_nx_dhcp_send_request_internal+0x4e0>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80047ce:	9305      	str	r3, [sp, #20]
 80047d0:	f7ff bbef 	b.w	8003fb2 <_nx_dhcp_send_request_internal+0x2da>
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80047d4:	9305      	str	r3, [sp, #20]
 80047d6:	e4af      	b.n	8004138 <_nx_dhcp_send_request_internal+0x460>
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80047d8:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80047dc:	e55f      	b.n	800429e <_nx_dhcp_send_request_internal+0x5c6>
 80047de:	bf00      	nop
 80047e0:	2000006c 	.word	0x2000006c

080047e4 <_nx_dhcp_timeout_entry>:
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_TIMER_EVENT, TX_OR);
 80047e4:	f500 50ea 	add.w	r0, r0, #7488	; 0x1d40
 80047e8:	2200      	movs	r2, #0
 80047ea:	2102      	movs	r1, #2
 80047ec:	3014      	adds	r0, #20
 80047ee:	f009 bcf3 	b.w	800e1d8 <_txe_event_flags_set>
 80047f2:	bf00      	nop

080047f4 <_nx_dhcp_udp_receive_notify>:
    tx_event_flags_set(&(_nx_dhcp_created_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_RECEIVE_EVENT, TX_OR);
 80047f4:	4b04      	ldr	r3, [pc, #16]	; (8004808 <_nx_dhcp_udp_receive_notify+0x14>)
 80047f6:	f641 5054 	movw	r0, #7508	; 0x1d54
 80047fa:	2200      	movs	r2, #0
 80047fc:	2101      	movs	r1, #1
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4418      	add	r0, r3
 8004802:	f009 bce9 	b.w	800e1d8 <_txe_event_flags_set>
 8004806:	bf00      	nop
 8004808:	2000156c 	.word	0x2000156c

0800480c <_nx_dhcp_get_option_value>:
{
 800480c:	b4f0      	push	{r4, r5, r6, r7}
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 800480e:	f100 04f0 	add.w	r4, r0, #240	; 0xf0
 8004812:	f1a3 07f1 	sub.w	r7, r3, #241	; 0xf1
    i = 0;
 8004816:	2000      	movs	r0, #0
    while (i < length - 1)
 8004818:	42b8      	cmp	r0, r7
 800481a:	f100 0001 	add.w	r0, r0, #1
 800481e:	d207      	bcs.n	8004830 <_nx_dhcp_get_option_value+0x24>
        if (*data == NX_DHCP_OPTION_PAD)
 8004820:	7825      	ldrb	r5, [r4, #0]
 8004822:	b945      	cbnz	r5, 8004836 <_nx_dhcp_get_option_value+0x2a>
    while (i < length - 1)
 8004824:	42b8      	cmp	r0, r7
            data++;
 8004826:	f104 0401 	add.w	r4, r4, #1
 800482a:	f100 0001 	add.w	r0, r0, #1
    while (i < length - 1)
 800482e:	d3f7      	bcc.n	8004820 <_nx_dhcp_get_option_value+0x14>
    return(NX_OPTION_ERROR);
 8004830:	200a      	movs	r0, #10
}
 8004832:	bcf0      	pop	{r4, r5, r6, r7}
 8004834:	4770      	bx	lr
 8004836:	7866      	ldrb	r6, [r4, #1]
        else if (*data == option)
 8004838:	42a9      	cmp	r1, r5
            data += size + 1;
 800483a:	f106 0c02 	add.w	ip, r6, #2
 800483e:	4430      	add	r0, r6
        else if (*data == option)
 8004840:	d001      	beq.n	8004846 <_nx_dhcp_get_option_value+0x3a>
            data += size + 1;
 8004842:	4464      	add	r4, ip
 8004844:	e7e8      	b.n	8004818 <_nx_dhcp_get_option_value+0xc>
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8004846:	3bf0      	subs	r3, #240	; 0xf0
            if ((i + size + 1) > length)
 8004848:	4283      	cmp	r3, r0
 800484a:	d3f1      	bcc.n	8004830 <_nx_dhcp_get_option_value+0x24>
        if (data != NX_NULL)
 800484c:	1c63      	adds	r3, r4, #1
 800484e:	d0ef      	beq.n	8004830 <_nx_dhcp_get_option_value+0x24>
            if (*data > 4)
 8004850:	2e04      	cmp	r6, #4
 8004852:	d90f      	bls.n	8004874 <_nx_dhcp_get_option_value+0x68>
                if (option == NX_DHCP_OPTION_GATEWAYS)
 8004854:	2903      	cmp	r1, #3
 8004856:	d11b      	bne.n	8004890 <_nx_dhcp_get_option_value+0x84>
        value = (value << 8) | *data++;
 8004858:	78a3      	ldrb	r3, [r4, #2]
                    return(NX_SUCCESS);
 800485a:	2000      	movs	r0, #0
        value = (value << 8) | *data++;
 800485c:	78e5      	ldrb	r5, [r4, #3]
 800485e:	7921      	ldrb	r1, [r4, #4]
 8004860:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8004864:	7963      	ldrb	r3, [r4, #5]
 8004866:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800486a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
 800486e:	bcf0      	pop	{r4, r5, r6, r7}
                    *value =  _nx_dhcp_get_data(data + 1, 4);
 8004870:	6013      	str	r3, [r2, #0]
}
 8004872:	4770      	bx	lr
                *value = _nx_dhcp_get_data(data + 1, *data);
 8004874:	3402      	adds	r4, #2
    while (size-- > 0)
 8004876:	b13e      	cbz	r6, 8004888 <_nx_dhcp_get_option_value+0x7c>
 8004878:	19a1      	adds	r1, r4, r6
ULONG   value = 0;
 800487a:	2600      	movs	r6, #0
        value = (value << 8) | *data++;
 800487c:	f814 3b01 	ldrb.w	r3, [r4], #1
    while (size-- > 0)
 8004880:	428c      	cmp	r4, r1
        value = (value << 8) | *data++;
 8004882:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
    while (size-- > 0)
 8004886:	d1f9      	bne.n	800487c <_nx_dhcp_get_option_value+0x70>
                *value = _nx_dhcp_get_data(data + 1, *data);
 8004888:	6016      	str	r6, [r2, #0]
                return(NX_SUCCESS);  
 800488a:	2000      	movs	r0, #0
}
 800488c:	bcf0      	pop	{r4, r5, r6, r7}
 800488e:	4770      	bx	lr
                    return(NX_SIZE_ERROR);
 8004890:	2009      	movs	r0, #9
}
 8004892:	bcf0      	pop	{r4, r5, r6, r7}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop

08004898 <_nx_dhcp_extract_information.isra.1>:
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
 8004898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 800489c:	f102 0610 	add.w	r6, r2, #16
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
 80048a0:	b082      	sub	sp, #8
 80048a2:	f102 0414 	add.w	r4, r2, #20
ULONG   value = 0;
 80048a6:	2700      	movs	r7, #0
    while (size-- > 0)
 80048a8:	42a6      	cmp	r6, r4
 80048aa:	d004      	beq.n	80048b6 <_nx_dhcp_extract_information.isra.1+0x1e>
        value = (value << 8) | *data++;
 80048ac:	f816 5b01 	ldrb.w	r5, [r6], #1
 80048b0:	ea45 2707 	orr.w	r7, r5, r7, lsl #8
 80048b4:	e7f8      	b.n	80048a8 <_nx_dhcp_extract_information.isra.1+0x10>
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 80048b6:	2f00      	cmp	r7, #0
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 80048b8:	9700      	str	r7, [sp, #0]
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 80048ba:	d101      	bne.n	80048c0 <_nx_dhcp_extract_information.isra.1+0x28>
        return(NX_DHCP_BAD_IP_ADDRESS);
 80048bc:	2092      	movs	r0, #146	; 0x92
 80048be:	e0a3      	b.n	8004a08 <_nx_dhcp_extract_information.isra.1+0x170>
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 80048c0:	da09      	bge.n	80048d6 <_nx_dhcp_extract_information.isra.1+0x3e>
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80048c2:	f007 4440 	and.w	r4, r7, #3221225472	; 0xc0000000
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80048c6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80048ca:	d004      	beq.n	80048d6 <_nx_dhcp_extract_information.isra.1+0x3e>
         ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 80048cc:	f007 4460 	and.w	r4, r7, #3758096384	; 0xe0000000
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80048d0:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
 80048d4:	d1f2      	bne.n	80048bc <_nx_dhcp_extract_information.isra.1+0x24>
 80048d6:	4616      	mov	r6, r2
 80048d8:	460c      	mov	r4, r1
 80048da:	4680      	mov	r8, r0
        interface_record -> nx_dhcp_ip_address =  value;
 80048dc:	60cf      	str	r7, [r1, #12]
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_SUBNET_MASK, &value, length) == NX_SUCCESS)
 80048de:	466a      	mov	r2, sp
 80048e0:	2101      	movs	r1, #1
 80048e2:	4630      	mov	r0, r6
 80048e4:	461d      	mov	r5, r3
 80048e6:	f7ff ff91 	bl	800480c <_nx_dhcp_get_option_value>
 80048ea:	b958      	cbnz	r0, 8004904 <_nx_dhcp_extract_information.isra.1+0x6c>
        if (value != NX_BOOTP_NO_ADDRESS)
 80048ec:	9b00      	ldr	r3, [sp, #0]
 80048ee:	b10b      	cbz	r3, 80048f4 <_nx_dhcp_extract_information.isra.1+0x5c>
            interface_record -> nx_dhcp_network_mask =  value;
 80048f0:	61a3      	str	r3, [r4, #24]
 80048f2:	e007      	b.n	8004904 <_nx_dhcp_extract_information.isra.1+0x6c>
            nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, 
 80048f4:	f8d8 0000 	ldr.w	r0, [r8]
 80048f8:	f104 0318 	add.w	r3, r4, #24
 80048fc:	aa01      	add	r2, sp, #4
 80048fe:	69e1      	ldr	r1, [r4, #28]
 8004900:	f002 f9ae 	bl	8006c60 <_nx_ip_interface_address_get>
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_SERVER, &value, length) == NX_SUCCESS)
 8004904:	462b      	mov	r3, r5
 8004906:	466a      	mov	r2, sp
 8004908:	2136      	movs	r1, #54	; 0x36
 800490a:	4630      	mov	r0, r6
 800490c:	f7ff ff7e 	bl	800480c <_nx_dhcp_get_option_value>
 8004910:	b970      	cbnz	r0, 8004930 <_nx_dhcp_extract_information.isra.1+0x98>
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8004912:	9b00      	ldr	r3, [sp, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0d1      	beq.n	80048bc <_nx_dhcp_extract_information.isra.1+0x24>
 8004918:	da09      	bge.n	800492e <_nx_dhcp_extract_information.isra.1+0x96>
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 800491a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 800491e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004922:	d004      	beq.n	800492e <_nx_dhcp_extract_information.isra.1+0x96>
             ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8004924:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8004928:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800492c:	d1c6      	bne.n	80048bc <_nx_dhcp_extract_information.isra.1+0x24>
            interface_record -> nx_dhcp_server_ip = value;
 800492e:	6163      	str	r3, [r4, #20]
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_LEASE, &value, length) == NX_SUCCESS)
 8004930:	462b      	mov	r3, r5
 8004932:	466a      	mov	r2, sp
 8004934:	2133      	movs	r1, #51	; 0x33
 8004936:	4630      	mov	r0, r6
 8004938:	f7ff ff68 	bl	800480c <_nx_dhcp_get_option_value>
 800493c:	b978      	cbnz	r0, 800495e <_nx_dhcp_extract_information.isra.1+0xc6>
        if (value == 0xFFFFFFFF)
 800493e:	9a00      	ldr	r2, [sp, #0]
 8004940:	1c51      	adds	r1, r2, #1
 8004942:	d103      	bne.n	800494c <_nx_dhcp_extract_information.isra.1+0xb4>
            interface_record -> nx_dhcp_rebind_time = value;
 8004944:	6362      	str	r2, [r4, #52]	; 0x34
            interface_record -> nx_dhcp_renewal_time = value;
 8004946:	e9c4 220b 	strd	r2, r2, [r4, #44]	; 0x2c
 800494a:	e008      	b.n	800495e <_nx_dhcp_extract_information.isra.1+0xc6>
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 800494c:	2364      	movs	r3, #100	; 0x64
 800494e:	fb03 f302 	mul.w	r3, r3, r2
            interface_record -> nx_dhcp_renewal_time = interface_record -> nx_dhcp_lease_time / 2;
 8004952:	085a      	lsrs	r2, r3, #1
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8004954:	62e3      	str	r3, [r4, #44]	; 0x2c
            interface_record -> nx_dhcp_rebind_time =  interface_record -> nx_dhcp_lease_time - (interface_record -> nx_dhcp_lease_time / 8);
 8004956:	eba3 03d3 	sub.w	r3, r3, r3, lsr #3
 800495a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 800495e:	462b      	mov	r3, r5
 8004960:	466a      	mov	r2, sp
 8004962:	213a      	movs	r1, #58	; 0x3a
 8004964:	4630      	mov	r0, r6
 8004966:	f7ff ff51 	bl	800480c <_nx_dhcp_get_option_value>
 800496a:	b940      	cbnz	r0, 800497e <_nx_dhcp_extract_information.isra.1+0xe6>
        (value <= interface_record -> nx_dhcp_lease_time))
 800496c:	9b00      	ldr	r3, [sp, #0]
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 800496e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004970:	429a      	cmp	r2, r3
 8004972:	d304      	bcc.n	800497e <_nx_dhcp_extract_information.isra.1+0xe6>
        if (value == 0xFFFFFFFF)
 8004974:	1c5a      	adds	r2, r3, #1
            interface_record -> nx_dhcp_renewal_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8004976:	bf1c      	itt	ne
 8004978:	2264      	movne	r2, #100	; 0x64
 800497a:	4353      	mulne	r3, r2
 800497c:	6323      	str	r3, [r4, #48]	; 0x30
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_REBIND, &value, length) == NX_SUCCESS)
 800497e:	462b      	mov	r3, r5
 8004980:	466a      	mov	r2, sp
 8004982:	213b      	movs	r1, #59	; 0x3b
 8004984:	4630      	mov	r0, r6
 8004986:	f7ff ff41 	bl	800480c <_nx_dhcp_get_option_value>
 800498a:	b978      	cbnz	r0, 80049ac <_nx_dhcp_extract_information.isra.1+0x114>
        if (value == 0xFFFFFFFF)
 800498c:	9a00      	ldr	r2, [sp, #0]
 800498e:	1c53      	adds	r3, r2, #1
 8004990:	d101      	bne.n	8004996 <_nx_dhcp_extract_information.isra.1+0xfe>
            interface_record -> nx_dhcp_rebind_time = value;
 8004992:	6362      	str	r2, [r4, #52]	; 0x34
 8004994:	e00a      	b.n	80049ac <_nx_dhcp_extract_information.isra.1+0x114>
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 8004996:	2364      	movs	r3, #100	; 0x64
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8004998:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 800499a:	fb03 f302 	mul.w	r3, r3, r2
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 800499e:	428b      	cmp	r3, r1
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 80049a0:	9300      	str	r3, [sp, #0]
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 80049a2:	d803      	bhi.n	80049ac <_nx_dhcp_extract_information.isra.1+0x114>
 80049a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049a6:	4293      	cmp	r3, r2
                interface_record -> nx_dhcp_rebind_time =  value;
 80049a8:	bf28      	it	cs
 80049aa:	6363      	strcs	r3, [r4, #52]	; 0x34
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 80049ac:	7863      	ldrb	r3, [r4, #1]
 80049ae:	1f9a      	subs	r2, r3, #6
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 80049b0:	2a01      	cmp	r2, #1
 80049b2:	d901      	bls.n	80049b8 <_nx_dhcp_extract_information.isra.1+0x120>
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d117      	bne.n	80049e8 <_nx_dhcp_extract_information.isra.1+0x150>
        if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_GATEWAYS, &value, length) == NX_SUCCESS)
 80049b8:	466a      	mov	r2, sp
 80049ba:	462b      	mov	r3, r5
 80049bc:	2103      	movs	r1, #3
 80049be:	4630      	mov	r0, r6
 80049c0:	f7ff ff24 	bl	800480c <_nx_dhcp_get_option_value>
 80049c4:	b980      	cbnz	r0, 80049e8 <_nx_dhcp_extract_information.isra.1+0x150>
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 80049c6:	9b00      	ldr	r3, [sp, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f43f af77 	beq.w	80048bc <_nx_dhcp_extract_information.isra.1+0x24>
 80049ce:	da0a      	bge.n	80049e6 <_nx_dhcp_extract_information.isra.1+0x14e>
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80049d0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80049d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80049d8:	d005      	beq.n	80049e6 <_nx_dhcp_extract_information.isra.1+0x14e>
                 ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 80049da:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80049de:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 80049e2:	f47f af6b 	bne.w	80048bc <_nx_dhcp_extract_information.isra.1+0x24>
                interface_record -> nx_dhcp_gateway_address = value;
 80049e6:	6123      	str	r3, [r4, #16]
     if ((length - NX_BOOTP_OFFSET_OPTIONS) > NX_DHCP_OPTIONS_BUFFER_SIZE)
 80049e8:	f1a5 02f0 	sub.w	r2, r5, #240	; 0xf0
     memcpy(interface_record -> nx_dhcp_options_buffer, 
 80049ec:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
 80049f0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80049f4:	f5b2 7f9c 	cmp.w	r2, #312	; 0x138
 80049f8:	bf28      	it	cs
 80049fa:	f44f 729c 	movcs.w	r2, #312	; 0x138
 80049fe:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
 8004a02:	f00a f8d2 	bl	800ebaa <memcpy>
    return (NX_SUCCESS);
 8004a06:	2000      	movs	r0, #0
}
 8004a08:	b002      	add	sp, #8
 8004a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004a10 <_nx_dhcp_create>:
{
 8004a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a14:	4615      	mov	r5, r2
 8004a16:	b088      	sub	sp, #32
 8004a18:	460e      	mov	r6, r1
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 8004a1a:	f641 7268 	movw	r2, #8040	; 0x1f68
 8004a1e:	2100      	movs	r1, #0
{
 8004a20:	4604      	mov	r4, r0
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8004a22:	f100 070c 	add.w	r7, r0, #12
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 8004a26:	f00a f8e4 	bl	800ebf2 <memset>
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8004a2a:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    dhcp_ptr -> nx_dhcp_name =  name_ptr;
 8004a2e:	6065      	str	r5, [r4, #4]
    dhcp_ptr -> nx_dhcp_ip_ptr =  ip_ptr;
 8004a30:	60a6      	str	r6, [r4, #8]
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8004a32:	4638      	mov	r0, r7
 8004a34:	9200      	str	r2, [sp, #0]
 8004a36:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8004a3a:	f44f 7214 	mov.w	r2, #592	; 0x250
 8004a3e:	4963      	ldr	r1, [pc, #396]	; (8004bcc <_nx_dhcp_create+0x1bc>)
 8004a40:	f7fe f904 	bl	8002c4c <_nx_packet_pool_create>
    if (status != NX_SUCCESS)
 8004a44:	4605      	mov	r5, r0
 8004a46:	b118      	cbz	r0, 8004a50 <_nx_dhcp_create+0x40>
}
 8004a48:	4628      	mov	r0, r5
 8004a4a:	b008      	add	sp, #32
 8004a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 8004a50:	f04f 0e04 	mov.w	lr, #4
 8004a54:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8004a58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a5c:	f604 38dc 	addw	r8, r4, #3036	; 0xbdc
    dhcp_ptr -> nx_dhcp_packet_pool_ptr = &dhcp_ptr -> nx_dhcp_pool;
 8004a60:	f8c4 7bd8 	str.w	r7, [r4, #3032]	; 0xbd8
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 8004a64:	4603      	mov	r3, r0
 8004a66:	9200      	str	r2, [sp, #0]
 8004a68:	4630      	mov	r0, r6
 8004a6a:	4641      	mov	r1, r8
 8004a6c:	4a57      	ldr	r2, [pc, #348]	; (8004bcc <_nx_dhcp_create+0x1bc>)
 8004a6e:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8004a72:	f004 fc7f 	bl	8009374 <_nx_udp_socket_create>
    if (status != NX_SUCCESS)
 8004a76:	4605      	mov	r5, r0
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d173      	bne.n	8004b64 <_nx_dhcp_create+0x154>
    status = nx_udp_socket_receive_notify(&(dhcp_ptr -> nx_dhcp_socket), _nx_dhcp_udp_receive_notify);
 8004a7c:	4954      	ldr	r1, [pc, #336]	; (8004bd0 <_nx_dhcp_create+0x1c0>)
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f004 fdca 	bl	8009618 <_nx_udp_socket_receive_notify>
    if (status != NX_SUCCESS) 
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f040 8083 	bne.w	8004b90 <_nx_dhcp_create+0x180>
    status =  tx_timer_create(&(dhcp_ptr -> nx_dhcp_timer), "DHCP Client Timer", _nx_dhcp_timeout_entry,
 8004a8a:	f641 567c 	movw	r6, #7548	; 0x1d7c
 8004a8e:	212c      	movs	r1, #44	; 0x2c
 8004a90:	2300      	movs	r3, #0
 8004a92:	2264      	movs	r2, #100	; 0x64
 8004a94:	4426      	add	r6, r4
 8004a96:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8004a9a:	e9cd 2200 	strd	r2, r2, [sp]
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	4a4c      	ldr	r2, [pc, #304]	; (8004bd4 <_nx_dhcp_create+0x1c4>)
 8004aa4:	494c      	ldr	r1, [pc, #304]	; (8004bd8 <_nx_dhcp_create+0x1c8>)
 8004aa6:	f009 fd6b 	bl	800e580 <_txe_timer_create>
    if (status != NX_SUCCESS)
 8004aaa:	4605      	mov	r5, r0
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d156      	bne.n	8004b5e <_nx_dhcp_create+0x14e>
    status =  tx_mutex_create(&(dhcp_ptr -> nx_dhcp_mutex), "NetX DHCP Client", TX_NO_INHERIT);
 8004ab0:	f504 57e9 	add.w	r7, r4, #7456	; 0x1d20
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	2334      	movs	r3, #52	; 0x34
 8004ab8:	4944      	ldr	r1, [pc, #272]	; (8004bcc <_nx_dhcp_create+0x1bc>)
 8004aba:	4638      	mov	r0, r7
 8004abc:	f009 fba2 	bl	800e204 <_txe_mutex_create>
    if (status != NX_SUCCESS)
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d159      	bne.n	8004b7a <_nx_dhcp_create+0x16a>
    status =  tx_thread_create(&(dhcp_ptr -> nx_dhcp_thread), "NetX DHCP Client", _nx_dhcp_thread_entry, (ULONG)(ALIGN_TYPE)dhcp_ptr,
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	23c8      	movs	r3, #200	; 0xc8
 8004aca:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8004ace:	f504 6152 	add.w	r1, r4, #3360	; 0xd20
 8004ad2:	f604 4a58 	addw	sl, r4, #3160	; 0xc58
 8004ad6:	f04f 0901 	mov.w	r9, #1
 8004ada:	9005      	str	r0, [sp, #20]
 8004adc:	9306      	str	r3, [sp, #24]
 8004ade:	4650      	mov	r0, sl
 8004ae0:	9100      	str	r1, [sp, #0]
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	4939      	ldr	r1, [pc, #228]	; (8004bcc <_nx_dhcp_create+0x1bc>)
 8004ae6:	e9cd 2903 	strd	r2, r9, [sp, #12]
 8004aea:	e9cd c201 	strd	ip, r2, [sp, #4]
 8004aee:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <_nx_dhcp_create+0x1cc>)
 8004af0:	f009 fc60 	bl	800e3b4 <_txe_thread_create>
    if (status != NX_SUCCESS)
 8004af4:	4605      	mov	r5, r0
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d13c      	bne.n	8004b74 <_nx_dhcp_create+0x164>
    status = tx_event_flags_create(&(dhcp_ptr -> nx_dhcp_events), (CHAR *)"DHCP Client Events");
 8004afa:	f641 5054 	movw	r0, #7508	; 0x1d54
 8004afe:	2228      	movs	r2, #40	; 0x28
 8004b00:	4937      	ldr	r1, [pc, #220]	; (8004be0 <_nx_dhcp_create+0x1d0>)
 8004b02:	4420      	add	r0, r4
 8004b04:	f009 fae0 	bl	800e0c8 <_txe_event_flags_create>
    if (status != TX_SUCCESS)
 8004b08:	4605      	mov	r5, r0
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d14c      	bne.n	8004ba8 <_nx_dhcp_create+0x198>
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 8004b0e:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <_nx_dhcp_create+0x1d4>)
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8004b10:	f04f 31ff 	mov.w	r1, #4294967295
    _nx_dhcp_created_ptr = dhcp_ptr;
 8004b14:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <_nx_dhcp_create+0x1d8>)
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8004b16:	4638      	mov	r0, r7
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 8004b18:	6022      	str	r2, [r4, #0]
    _nx_dhcp_created_ptr = dhcp_ptr;
 8004b1a:	601c      	str	r4, [r3, #0]
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8004b1c:	f009 fbfa 	bl	800e314 <_txe_mutex_get>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 8004b20:	f641 53a8 	movw	r3, #7592	; 0x1da8
 8004b24:	5ce2      	ldrb	r2, [r4, r3]
 8004b26:	18e6      	adds	r6, r4, r3
 8004b28:	2a01      	cmp	r2, #1
 8004b2a:	d039      	beq.n	8004ba0 <_nx_dhcp_create+0x190>
    client_physical_msw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8004b2c:	68a2      	ldr	r2, [r4, #8]
    interface_record -> nx_dhcp_record_valid = NX_TRUE;
 8004b2e:	f804 9003 	strb.w	r9, [r4, r3]
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8004b36:	f8d2 4c54 	ldr.w	r4, [r2, #3156]	; 0xc54
 8004b3a:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
    interface_record -> nx_dhcp_interface_index = iface_index;
 8004b3e:	61f5      	str	r5, [r6, #28]
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8004b40:	4054      	eors	r4, r2
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS;
 8004b42:	60f5      	str	r5, [r6, #12]
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS;
 8004b44:	6175      	str	r5, [r6, #20]
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8004b46:	62f3      	str	r3, [r6, #44]	; 0x2c
    interface_record -> nx_dhcp_renewal_time =  0;
 8004b48:	e9c6 550c 	strd	r5, r5, [r6, #48]	; 0x30
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8004b4c:	f00a f8d6 	bl	800ecfc <rand>
 8004b50:	4044      	eors	r4, r0
    interface_record -> nx_dhcp_timeout = 0;
 8004b52:	6235      	str	r5, [r6, #32]
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 8004b54:	4638      	mov	r0, r7
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8004b56:	6074      	str	r4, [r6, #4]
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 8004b58:	f009 fc10 	bl	800e37c <_txe_mutex_put>
 8004b5c:	e774      	b.n	8004a48 <_nx_dhcp_create+0x38>
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8004b5e:	4640      	mov	r0, r8
 8004b60:	f004 fc48 	bl	80093f4 <_nx_udp_socket_delete>
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004b64:	f8d4 0bd8 	ldr.w	r0, [r4, #3032]	; 0xbd8
 8004b68:	f002 ff50 	bl	8007a0c <_nx_packet_pool_delete>
}
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	b008      	add	sp, #32
 8004b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 8004b74:	4638      	mov	r0, r7
 8004b76:	f009 fbaf 	bl	800e2d8 <_txe_mutex_delete>
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f004 fc3a 	bl	80093f4 <_nx_udp_socket_delete>
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004b80:	f8d4 0bd8 	ldr.w	r0, [r4, #3032]	; 0xbd8
 8004b84:	f002 ff42 	bl	8007a0c <_nx_packet_pool_delete>
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f009 fd77 	bl	800e67c <_txe_timer_delete>
        return(status);
 8004b8e:	e75b      	b.n	8004a48 <_nx_dhcp_create+0x38>
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004b90:	f8d4 0bd8 	ldr.w	r0, [r4, #3032]	; 0xbd8
 8004b94:	f002 ff3a 	bl	8007a0c <_nx_packet_pool_delete>
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8004b98:	4640      	mov	r0, r8
 8004b9a:	f004 fc2b 	bl	80093f4 <_nx_udp_socket_delete>
 8004b9e:	e774      	b.n	8004a8a <_nx_dhcp_create+0x7a>
                 tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004ba0:	4638      	mov	r0, r7
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004ba2:	f009 fbeb 	bl	800e37c <_txe_mutex_put>
 8004ba6:	e74f      	b.n	8004a48 <_nx_dhcp_create+0x38>
        tx_thread_delete(&(dhcp_ptr -> nx_dhcp_thread));
 8004ba8:	4650      	mov	r0, sl
 8004baa:	f009 fcbb 	bl	800e524 <_txe_thread_delete>
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f009 fb92 	bl	800e2d8 <_txe_mutex_delete>
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f009 fd61 	bl	800e67c <_txe_timer_delete>
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f004 fc1a 	bl	80093f4 <_nx_udp_socket_delete>
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004bc0:	f8d4 0bd8 	ldr.w	r0, [r4, #3032]	; 0xbd8
 8004bc4:	f002 ff22 	bl	8007a0c <_nx_packet_pool_delete>
        return(status);
 8004bc8:	e73e      	b.n	8004a48 <_nx_dhcp_create+0x38>
 8004bca:	bf00      	nop
 8004bcc:	0800fc50 	.word	0x0800fc50
 8004bd0:	080047f5 	.word	0x080047f5
 8004bd4:	080047e5 	.word	0x080047e5
 8004bd8:	0800fc64 	.word	0x0800fc64
 8004bdc:	08004c99 	.word	0x08004c99
 8004be0:	0800fc78 	.word	0x0800fc78
 8004be4:	44484350 	.word	0x44484350
 8004be8:	2000156c 	.word	0x2000156c

08004bec <_nx_dhcp_interface_reinitialize>:
{
 8004bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8004bee:	f500 56e9 	add.w	r6, r0, #7456	; 0x1d20
{
 8004bf2:	4605      	mov	r5, r0
    /* Find which DHCP Client interface record is assigned the input interface. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 8004bf4:	f641 54a8 	movw	r4, #7592	; 0x1da8
{
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	460f      	mov	r7, r1
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8004c02:	f009 fb87 	bl	800e314 <_txe_mutex_get>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 8004c06:	5d2b      	ldrb	r3, [r5, r4]
 8004c08:	442c      	add	r4, r5
 8004c0a:	b1eb      	cbz	r3, 8004c48 <_nx_dhcp_interface_reinitialize+0x5c>
            continue;

        /* Check if the interface index matches.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8004c0c:	f641 53c4 	movw	r3, #7620	; 0x1dc4
 8004c10:	58eb      	ldr	r3, [r5, r3]
 8004c12:	429f      	cmp	r7, r3
 8004c14:	d118      	bne.n	8004c48 <_nx_dhcp_interface_reinitialize+0x5c>
    if (interface_record -> nx_dhcp_ip_address)
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	b9e3      	cbnz	r3, 8004c54 <_nx_dhcp_interface_reinitialize+0x68>
    if (interface_record -> nx_dhcp_gateway_address)
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	bb6b      	cbnz	r3, 8004c7a <_nx_dhcp_interface_reinitialize+0x8e>
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 8004c1e:	2500      	movs	r5, #0
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004c24:	4630      	mov	r0, r6
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 8004c26:	60e5      	str	r5, [r4, #12]
    interface_record -> nx_dhcp_network_mask = NX_BOOTP_NO_ADDRESS;
 8004c28:	61a5      	str	r5, [r4, #24]
    interface_record -> nx_dhcp_skip_discovery = NX_FALSE;
 8004c2a:	6465      	str	r5, [r4, #68]	; 0x44
    interface_record -> nx_dhcp_seconds = 0;
 8004c2c:	60a5      	str	r5, [r4, #8]
    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_NOT_STARTED;
 8004c2e:	7065      	strb	r5, [r4, #1]
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8004c30:	62e3      	str	r3, [r4, #44]	; 0x2c
    interface_record -> nx_dhcp_gateway_address = NX_BOOTP_NO_ADDRESS; 
 8004c32:	e9c4 5504 	strd	r5, r5, [r4, #16]
    interface_record -> nx_dhcp_renewal_time =  0;
 8004c36:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    interface_record -> nx_dhcp_rtr_interval = 0;
 8004c3a:	e9c4 5508 	strd	r5, r5, [r4, #32]
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004c3e:	f009 fb9d 	bl	800e37c <_txe_mutex_put>
    return NX_SUCCESS;
 8004c42:	4628      	mov	r0, r5
}
 8004c44:	b005      	add	sp, #20
 8004c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f009 fb97 	bl	800e37c <_txe_mutex_put>
        return(status);
 8004c4e:	20a4      	movs	r0, #164	; 0xa4
}
 8004c50:	b005      	add	sp, #20
 8004c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, &ip_address, &network_mask);
 8004c54:	ab02      	add	r3, sp, #8
 8004c56:	aa01      	add	r2, sp, #4
 8004c58:	4639      	mov	r1, r7
 8004c5a:	68a8      	ldr	r0, [r5, #8]
 8004c5c:	f002 f800 	bl	8006c60 <_nx_ip_interface_address_get>
        if ((status == NX_SUCCESS) && (ip_address == interface_record -> nx_dhcp_ip_address))
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d1da      	bne.n	8004c1a <_nx_dhcp_interface_reinitialize+0x2e>
 8004c64:	68e2      	ldr	r2, [r4, #12]
 8004c66:	9b01      	ldr	r3, [sp, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d1d6      	bne.n	8004c1a <_nx_dhcp_interface_reinitialize+0x2e>
            nx_ip_interface_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, 0, 0);
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4602      	mov	r2, r0
 8004c70:	4639      	mov	r1, r7
 8004c72:	68a8      	ldr	r0, [r5, #8]
 8004c74:	f002 f818 	bl	8006ca8 <_nx_ip_interface_address_set>
 8004c78:	e7cf      	b.n	8004c1a <_nx_dhcp_interface_reinitialize+0x2e>
        status = nx_ip_gateway_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, &gateway_address);
 8004c7a:	a903      	add	r1, sp, #12
 8004c7c:	68a8      	ldr	r0, [r5, #8]
 8004c7e:	f001 ff25 	bl	8006acc <_nx_ip_gateway_address_get>
        if ((status == NX_SUCCESS) && (gateway_address == interface_record -> nx_dhcp_gateway_address))
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d1cb      	bne.n	8004c1e <_nx_dhcp_interface_reinitialize+0x32>
 8004c86:	6922      	ldr	r2, [r4, #16]
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d1c7      	bne.n	8004c1e <_nx_dhcp_interface_reinitialize+0x32>
            nx_ip_gateway_address_clear(dhcp_ptr -> nx_dhcp_ip_ptr);
 8004c8e:	68a8      	ldr	r0, [r5, #8]
 8004c90:	f001 ff06 	bl	8006aa0 <_nx_ip_gateway_address_clear>
 8004c94:	e7c3      	b.n	8004c1e <_nx_dhcp_interface_reinitialize+0x32>
 8004c96:	bf00      	nop

08004c98 <_nx_dhcp_thread_entry>:
{
 8004c98:	4684      	mov	ip, r0
 8004c9a:	f641 5154 	movw	r1, #7508	; 0x1d54
 8004c9e:	f641 725c 	movw	r2, #8028	; 0x1f5c
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8004ca2:	4663      	mov	r3, ip
{
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	1859      	adds	r1, r3, r1
 8004caa:	b09f      	sub	sp, #124	; 0x7c
 8004cac:	f641 7458 	movw	r4, #8024	; 0x1f58
 8004cb0:	f641 5ee4 	movw	lr, #7652	; 0x1de4
 8004cb4:	9105      	str	r1, [sp, #20]
 8004cb6:	4661      	mov	r1, ip
 8004cb8:	f641 58c4 	movw	r8, #7620	; 0x1dc4
 8004cbc:	f641 57c8 	movw	r7, #7624	; 0x1dc8
 8004cc0:	3108      	adds	r1, #8
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8004cc2:	f50c 5ae9 	add.w	sl, ip, #7456	; 0x1d20
 8004cc6:	44e0      	add	r8, ip
 8004cc8:	4467      	add	r7, ip
 8004cca:	9113      	str	r1, [sp, #76]	; 0x4c
 8004ccc:	1919      	adds	r1, r3, r4
 8004cce:	f641 56a8 	movw	r6, #7592	; 0x1da8
 8004cd2:	f641 5bb0 	movw	fp, #7600	; 0x1db0
 8004cd6:	9108      	str	r1, [sp, #32]
 8004cd8:	1899      	adds	r1, r3, r2
 8004cda:	f641 52a9 	movw	r2, #7593	; 0x1da9
{
 8004cde:	9004      	str	r0, [sp, #16]
 8004ce0:	9109      	str	r1, [sp, #36]	; 0x24
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	1899      	adds	r1, r3, r2
 8004ce6:	f641 52b4 	movw	r2, #7604	; 0x1db4
 8004cea:	f60c 35dc 	addw	r5, ip, #3036	; 0xbdc
 8004cee:	44e3      	add	fp, ip
 8004cf0:	9103      	str	r1, [sp, #12]
 8004cf2:	1899      	adds	r1, r3, r2
 8004cf4:	f641 52ec 	movw	r2, #7660	; 0x1dec
 8004cf8:	4466      	add	r6, ip
 8004cfa:	910e      	str	r1, [sp, #56]	; 0x38
 8004cfc:	1899      	adds	r1, r3, r2
 8004cfe:	f641 52cc 	movw	r2, #7628	; 0x1dcc
 8004d02:	9110      	str	r1, [sp, #64]	; 0x40
 8004d04:	1899      	adds	r1, r3, r2
 8004d06:	f641 52dc 	movw	r2, #7644	; 0x1ddc
 8004d0a:	9107      	str	r1, [sp, #28]
 8004d0c:	1899      	adds	r1, r3, r2
 8004d0e:	f641 52d8 	movw	r2, #7640	; 0x1dd8
 8004d12:	910d      	str	r1, [sp, #52]	; 0x34
 8004d14:	1899      	adds	r1, r3, r2
 8004d16:	4672      	mov	r2, lr
 8004d18:	910f      	str	r1, [sp, #60]	; 0x3c
 8004d1a:	f50c 51ef 	add.w	r1, ip, #7648	; 0x1de0
 8004d1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004d20:	1899      	adds	r1, r3, r2
 8004d22:	f641 52d4 	movw	r2, #7636	; 0x1dd4
 8004d26:	910c      	str	r1, [sp, #48]	; 0x30
 8004d28:	f04f 31ff 	mov.w	r1, #4294967295
 8004d2c:	4413      	add	r3, r2
 8004d2e:	9311      	str	r3, [sp, #68]	; 0x44
 8004d30:	f009 faf0 	bl	800e314 <_txe_mutex_get>
 8004d34:	4642      	mov	r2, r8
 8004d36:	463b      	mov	r3, r7
 8004d38:	46d8      	mov	r8, fp
 8004d3a:	462f      	mov	r7, r5
 8004d3c:	46d3      	mov	fp, sl
 8004d3e:	461d      	mov	r5, r3
 8004d40:	4692      	mov	sl, r2
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 8004d42:	4653      	mov	r3, sl
 8004d44:	46ba      	mov	sl, r7
 8004d46:	461f      	mov	r7, r3
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004d48:	4658      	mov	r0, fp
 8004d4a:	f009 fb17 	bl	800e37c <_txe_mutex_put>
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	2201      	movs	r2, #1
 8004d54:	f04f 31ff 	mov.w	r1, #4294967295
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	ab17      	add	r3, sp, #92	; 0x5c
 8004d5c:	9805      	ldr	r0, [sp, #20]
 8004d5e:	f009 fa0f 	bl	800e180 <_txe_event_flags_get>
        tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8004d62:	f04f 31ff 	mov.w	r1, #4294967295
 8004d66:	4658      	mov	r0, fp
 8004d68:	f009 fad4 	bl	800e314 <_txe_mutex_get>
        if  (events & NX_DHCP_CLIENT_RECEIVE_EVENT)
 8004d6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d6e:	07da      	lsls	r2, r3, #31
 8004d70:	f100 80f3 	bmi.w	8004f5a <_nx_dhcp_thread_entry+0x2c2>
        if (events & NX_DHCP_CLIENT_TIMER_EVENT)
 8004d74:	079b      	lsls	r3, r3, #30
 8004d76:	d5e7      	bpl.n	8004d48 <_nx_dhcp_thread_entry+0xb0>
         if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE)
 8004d78:	7833      	ldrb	r3, [r6, #0]
 8004d7a:	b163      	cbz	r3, 8004d96 <_nx_dhcp_thread_entry+0xfe>
         interface_record -> nx_dhcp_seconds ++;
 8004d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d80:	3301      	adds	r3, #1
 8004d82:	f8c8 3000 	str.w	r3, [r8]
        if (interface_record -> nx_dhcp_timeout != 0)
 8004d86:	682b      	ldr	r3, [r5, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0dd      	beq.n	8004d48 <_nx_dhcp_thread_entry+0xb0>
            if (interface_record -> nx_dhcp_timeout > NX_DHCP_TIME_INTERVAL)
 8004d8c:	2b64      	cmp	r3, #100	; 0x64
 8004d8e:	d906      	bls.n	8004d9e <_nx_dhcp_thread_entry+0x106>
                interface_record -> nx_dhcp_timeout -= (ULONG)NX_DHCP_TIME_INTERVAL;
 8004d90:	3b64      	subs	r3, #100	; 0x64
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	e7d8      	b.n	8004d48 <_nx_dhcp_thread_entry+0xb0>
 8004d96:	463b      	mov	r3, r7
 8004d98:	4657      	mov	r7, sl
 8004d9a:	469a      	mov	sl, r3
 8004d9c:	e7d1      	b.n	8004d42 <_nx_dhcp_thread_entry+0xaa>
                interface_record -> nx_dhcp_timeout = 0; 
 8004d9e:	2300      	movs	r3, #0
 8004da0:	602b      	str	r3, [r5, #0]
                original_state = interface_record -> nx_dhcp_state;
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	781c      	ldrb	r4, [r3, #0]
                switch (interface_record -> nx_dhcp_state)
 8004da6:	1ea3      	subs	r3, r4, #2
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d8cd      	bhi.n	8004d48 <_nx_dhcp_thread_entry+0xb0>
 8004dac:	e8df f003 	tbb	[pc, r3]
 8004db0:	53789fa1 	.word	0x53789fa1
 8004db4:	0335      	.short	0x0335
                        if (interface_record -> nx_dhcp_rebind_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 8004db6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004db8:	9a07      	ldr	r2, [sp, #28]
 8004dba:	680b      	ldr	r3, [r1, #0]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	f0c0 813d 	bcc.w	800503e <_nx_dhcp_thread_entry+0x3a6>
                            interface_record -> nx_dhcp_rebind_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
    if (timeout != 0)
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 813a 	beq.w	8005042 <_nx_dhcp_thread_entry+0x3aa>
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 8004dce:	f241 7270 	movw	r2, #6000	; 0x1770
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d905      	bls.n	8004de2 <_nx_dhcp_thread_entry+0x14a>
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 8004dd6:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8004dda:	428b      	cmp	r3, r1
 8004ddc:	f240 825f 	bls.w	800529e <_nx_dhcp_thread_entry+0x606>
                timeout = timeout / 2;
 8004de0:	085b      	lsrs	r3, r3, #1
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8004de2:	602b      	str	r3, [r5, #0]
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8004de4:	2203      	movs	r2, #3
 8004de6:	4631      	mov	r1, r6
 8004de8:	9804      	ldr	r0, [sp, #16]
 8004dea:	f7fe ff75 	bl	8003cd8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	9a07      	ldr	r2, [sp, #28]
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	7819      	ldrb	r1, [r3, #0]
                if (original_state != interface_record -> nx_dhcp_state)
 8004df8:	42a1      	cmp	r1, r4
 8004dfa:	d0a5      	beq.n	8004d48 <_nx_dhcp_thread_entry+0xb0>
                    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8004dfc:	9b08      	ldr	r3, [sp, #32]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b10b      	cbz	r3, 8004e06 <_nx_dhcp_thread_entry+0x16e>
                        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8004e02:	9804      	ldr	r0, [sp, #16]
 8004e04:	4798      	blx	r3
                    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8004e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d09c      	beq.n	8004d48 <_nx_dhcp_thread_entry+0xb0>
                        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8004e0e:	9a03      	ldr	r2, [sp, #12]
 8004e10:	9804      	ldr	r0, [sp, #16]
 8004e12:	7812      	ldrb	r2, [r2, #0]
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	4798      	blx	r3
 8004e18:	e796      	b.n	8004d48 <_nx_dhcp_thread_entry+0xb0>
                        if (interface_record -> nx_dhcp_renewal_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 8004e1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e1c:	9a07      	ldr	r2, [sp, #28]
 8004e1e:	680b      	ldr	r3, [r1, #0]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	4293      	cmp	r3, r2
 8004e24:	f0c0 813f 	bcc.w	80050a6 <_nx_dhcp_thread_entry+0x40e>
                            interface_record -> nx_dhcp_renewal_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]
    if (timeout != 0)
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ce      	bne.n	8004dce <_nx_dhcp_thread_entry+0x136>
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 8004e30:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8004e34:	f04f 0c07 	mov.w	ip, #7
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8004e38:	2203      	movs	r2, #3
 8004e3a:	4631      	mov	r1, r6
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 8004e3c:	f883 c000 	strb.w	ip, [r3]
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8004e40:	f7fe ff4a 	bl	8003cd8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rebind_remain_time = interface_record -> nx_dhcp_lease_time - interface_record -> nx_dhcp_rebind_time;
 8004e44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e50:	6013      	str	r3, [r2, #0]
    if (timeout != 0)
 8004e52:	b9ab      	cbnz	r3, 8004e80 <_nx_dhcp_thread_entry+0x1e8>
 8004e54:	e01e      	b.n	8004e94 <_nx_dhcp_thread_entry+0x1fc>
                        interface_record -> nx_dhcp_seconds = 0;
 8004e56:	2000      	movs	r0, #0
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 8004e58:	f04f 0c06 	mov.w	ip, #6
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	4631      	mov	r1, r6
                        interface_record -> nx_dhcp_seconds = 0;
 8004e60:	f8c8 0000 	str.w	r0, [r8]
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 8004e64:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8004e68:	f883 c000 	strb.w	ip, [r3]
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8004e6c:	f7fe ff34 	bl	8003cd8 <_nx_dhcp_send_request_internal>
                        interface_record -> nx_dhcp_renewal_remain_time = interface_record -> nx_dhcp_rebind_time - interface_record -> nx_dhcp_renewal_time;
 8004e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e7c:	6013      	str	r3, [r2, #0]
    if (timeout != 0)
 8004e7e:	b14b      	cbz	r3, 8004e94 <_nx_dhcp_thread_entry+0x1fc>
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 8004e80:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d905      	bls.n	8004e94 <_nx_dhcp_thread_entry+0x1fc>
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 8004e88:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8004e8c:	428b      	cmp	r3, r1
                timeout = timeout / 2;
 8004e8e:	bf8c      	ite	hi
 8004e90:	085b      	lsrhi	r3, r3, #1
                timeout =  NX_DHCP_MIN_RENEW_TIMEOUT ;
 8004e92:	4613      	movls	r3, r2
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8004e94:	9a07      	ldr	r2, [sp, #28]
                            interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8004e96:	602b      	str	r3, [r5, #0]
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	7819      	ldrb	r1, [r3, #0]
 8004e9e:	e7ab      	b.n	8004df8 <_nx_dhcp_thread_entry+0x160>
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	9804      	ldr	r0, [sp, #16]
 8004ea6:	f7fe ff17 	bl	8003cd8 <_nx_dhcp_send_request_internal>
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 8004eaa:	9a07      	ldr	r2, [sp, #28]
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8004eb2:	f5b9 5fc8 	cmp.w	r9, #6400	; 0x1900
 8004eb6:	f080 80a3 	bcs.w	8005000 <_nx_dhcp_thread_entry+0x368>
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8004eba:	f8c2 9000 	str.w	r9, [r2]
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 8004ebe:	f8c5 9000 	str.w	r9, [r5]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8004ec2:	f009 ff1b 	bl	800ecfc <rand>
 8004ec6:	4bae      	ldr	r3, [pc, #696]	; (8005180 <_nx_dhcp_thread_entry+0x4e8>)
 8004ec8:	22c9      	movs	r2, #201	; 0xc9
 8004eca:	fba3 1300 	umull	r1, r3, r3, r0
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	fb02 0313 	mls	r3, r2, r3, r0
    if (adjustment < NX_IP_PERIODIC_RATE)
 8004ed4:	2b63      	cmp	r3, #99	; 0x63
 8004ed6:	f200 80a2 	bhi.w	800501e <_nx_dhcp_thread_entry+0x386>
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 8004eda:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8004ede:	4591      	cmp	r9, r2
 8004ee0:	f200 809d 	bhi.w	800501e <_nx_dhcp_thread_entry+0x386>
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	7819      	ldrb	r1, [r3, #0]
                            interface_record -> nx_dhcp_timeout = 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	e784      	b.n	8004df8 <_nx_dhcp_thread_entry+0x160>
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8004eee:	2201      	movs	r2, #1
 8004ef0:	e7d7      	b.n	8004ea2 <_nx_dhcp_thread_entry+0x20a>
                        interface_record -> nx_dhcp_seconds = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c8 3000 	str.w	r3, [r8]
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8004ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	b123      	cbz	r3, 8004f08 <_nx_dhcp_thread_entry+0x270>
 8004efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 81be 	bne.w	8005284 <_nx_dhcp_thread_entry+0x5ec>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	9804      	ldr	r0, [sp, #16]
 8004f0e:	f7fe fee3 	bl	8003cd8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_SELECTING;
 8004f12:	2303      	movs	r3, #3
 8004f14:	9a03      	ldr	r2, [sp, #12]
 8004f16:	7013      	strb	r3, [r2, #0]
                        if (interface_record -> nx_dhcp_rtr_interval == 0)
 8004f18:	9a07      	ldr	r2, [sp, #28]
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 80a3 	bne.w	8005068 <_nx_dhcp_thread_entry+0x3d0>
                            interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8004f22:	f44f 79c8 	mov.w	r9, #400	; 0x190
 8004f26:	f8c2 9000 	str.w	r9, [r2]
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 8004f2a:	f8c5 9000 	str.w	r9, [r5]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8004f2e:	f009 fee5 	bl	800ecfc <rand>
 8004f32:	4b93      	ldr	r3, [pc, #588]	; (8005180 <_nx_dhcp_thread_entry+0x4e8>)
 8004f34:	22c9      	movs	r2, #201	; 0xc9
 8004f36:	fba3 1300 	umull	r1, r3, r3, r0
 8004f3a:	085b      	lsrs	r3, r3, #1
 8004f3c:	fb02 0313 	mls	r3, r2, r3, r0
    if (adjustment < NX_IP_PERIODIC_RATE)
 8004f40:	2b63      	cmp	r3, #99	; 0x63
 8004f42:	f200 808b 	bhi.w	800505c <_nx_dhcp_thread_entry+0x3c4>
 8004f46:	9a03      	ldr	r2, [sp, #12]
 8004f48:	7811      	ldrb	r1, [r2, #0]
            timeout -= (ULONG)(NX_IP_PERIODIC_RATE - adjustment);
 8004f4a:	f1a9 0264 	sub.w	r2, r9, #100	; 0x64
 8004f4e:	4413      	add	r3, r2
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8004f50:	602b      	str	r3, [r5, #0]
                        if (interface_record -> nx_dhcp_timeout == 0)
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f47f af50 	bne.w	8004df8 <_nx_dhcp_thread_entry+0x160>
 8004f58:	e7c6      	b.n	8004ee8 <_nx_dhcp_thread_entry+0x250>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8004f5a:	9506      	str	r5, [sp, #24]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	a916      	add	r1, sp, #88	; 0x58
 8004f60:	4650      	mov	r0, sl
 8004f62:	f004 fa79 	bl	8009458 <_nx_udp_socket_receive>
                if (status != NX_SUCCESS)
 8004f66:	b9d0      	cbnz	r0, 8004f9e <_nx_dhcp_thread_entry+0x306>
                status = nx_udp_packet_info_extract(packet_ptr, &source_ip_address, &protocol, &source_port, &iface_index);
 8004f68:	aa18      	add	r2, sp, #96	; 0x60
 8004f6a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004f6c:	ab19      	add	r3, sp, #100	; 0x64
 8004f6e:	a91a      	add	r1, sp, #104	; 0x68
 8004f70:	9200      	str	r2, [sp, #0]
 8004f72:	aa1b      	add	r2, sp, #108	; 0x6c
 8004f74:	f004 f94a 	bl	800920c <_nx_udp_packet_info_extract>
                if (status != NX_SUCCESS) 
 8004f78:	b9a0      	cbnz	r0, 8004fa4 <_nx_dhcp_thread_entry+0x30c>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 8004f7a:	7833      	ldrb	r3, [r6, #0]
 8004f7c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8004f7e:	b123      	cbz	r3, 8004f8a <_nx_dhcp_thread_entry+0x2f2>
                status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8004f80:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4599      	cmp	r9, r3
 8004f88:	d010      	beq.n	8004fac <_nx_dhcp_thread_entry+0x314>
                    nx_packet_release(packet_ptr);
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7fd fede 	bl	8002d4c <_nx_packet_release>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8004f90:	2200      	movs	r2, #0
 8004f92:	a916      	add	r1, sp, #88	; 0x58
 8004f94:	4650      	mov	r0, sl
 8004f96:	f004 fa5f 	bl	8009458 <_nx_udp_socket_receive>
                if (status != NX_SUCCESS)
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d0e4      	beq.n	8004f68 <_nx_dhcp_thread_entry+0x2d0>
 8004f9e:	9d06      	ldr	r5, [sp, #24]
 8004fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004fa2:	e6e7      	b.n	8004d74 <_nx_dhcp_thread_entry+0xdc>
                    nx_packet_release(packet_ptr); 
 8004fa4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004fa6:	f7fd fed1 	bl	8002d4c <_nx_packet_release>
                    continue;
 8004faa:	e7d7      	b.n	8004f5c <_nx_dhcp_thread_entry+0x2c4>
    if (packet_ptr -> nx_packet_length <= NX_BOOTP_OFFSET_OPTIONS)
 8004fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fae:	2bf0      	cmp	r3, #240	; 0xf0
 8004fb0:	d9eb      	bls.n	8004f8a <_nx_dhcp_thread_entry+0x2f2>
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8004fb2:	9d04      	ldr	r5, [sp, #16]
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	222c      	movs	r2, #44	; 0x2c
 8004fb8:	a91c      	add	r1, sp, #112	; 0x70
 8004fba:	f8d5 0bd8 	ldr.w	r0, [r5, #3032]	; 0xbd8
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8004fbe:	68ad      	ldr	r5, [r5, #8]
 8004fc0:	950a      	str	r5, [sp, #40]	; 0x28
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8004fc2:	f7fd fdab 	bl	8002b1c <_nx_packet_allocate>
    if (status != NX_SUCCESS)
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d1df      	bne.n	8004f8a <_nx_dhcp_thread_entry+0x2f2>
    if ((ULONG)(new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_prepend_ptr) < ((packet_ptr) -> nx_packet_length))
 8004fca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fce:	688a      	ldr	r2, [r1, #8]
 8004fd0:	694d      	ldr	r5, [r1, #20]
 8004fd2:	eba5 0c02 	sub.w	ip, r5, r2
 8004fd6:	459c      	cmp	ip, r3
 8004fd8:	d32a      	bcc.n	8005030 <_nx_dhcp_thread_entry+0x398>
    status = nx_packet_data_extract_offset(packet_ptr, offset, (VOID *)new_packet_ptr -> nx_packet_prepend_ptr, (packet_ptr) -> nx_packet_length, &bytes_copied);
 8004fda:	a91d      	add	r1, sp, #116	; 0x74
 8004fdc:	9100      	str	r1, [sp, #0]
 8004fde:	4601      	mov	r1, r0
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f002 fcd3 	bl	800798c <_nx_packet_data_extract_offset>
    if ((status != NX_SUCCESS) || (bytes_copied == 0))
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d15f      	bne.n	80050ac <_nx_dhcp_thread_entry+0x414>
 8004fec:	e9dd 021c 	ldrd	r0, r2, [sp, #112]	; 0x70
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d15d      	bne.n	80050b0 <_nx_dhcp_thread_entry+0x418>
        nx_packet_release(new_packet_ptr);
 8004ff4:	f7fd feaa 	bl	8002d4c <_nx_packet_release>
        nx_packet_release(packet_ptr);
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f7fd fea7 	bl	8002d4c <_nx_packet_release>
 8004ffe:	e7ad      	b.n	8004f5c <_nx_dhcp_thread_entry+0x2c4>
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8005000:	f44f 59c8 	mov.w	r9, #6400	; 0x1900
 8005004:	f8c2 9000 	str.w	r9, [r2]
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 8005008:	f8c5 9000 	str.w	r9, [r5]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800500c:	f009 fe76 	bl	800ecfc <rand>
 8005010:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <_nx_dhcp_thread_entry+0x4e8>)
 8005012:	22c9      	movs	r2, #201	; 0xc9
 8005014:	fba3 1300 	umull	r1, r3, r3, r0
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	fb02 0313 	mls	r3, r2, r3, r0
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 800501e:	444b      	add	r3, r9
 8005020:	9a03      	ldr	r2, [sp, #12]
 8005022:	3b64      	subs	r3, #100	; 0x64
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	7811      	ldrb	r1, [r2, #0]
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005028:	2b00      	cmp	r3, #0
 800502a:	f47f aee5 	bne.w	8004df8 <_nx_dhcp_thread_entry+0x160>
 800502e:	e75b      	b.n	8004ee8 <_nx_dhcp_thread_entry+0x250>
        nx_packet_release(new_packet_ptr);
 8005030:	4608      	mov	r0, r1
 8005032:	f7fd fe8b 	bl	8002d4c <_nx_packet_release>
        nx_packet_release(packet_ptr);
 8005036:	4620      	mov	r0, r4
 8005038:	f7fd fe88 	bl	8002d4c <_nx_packet_release>
 800503c:	e78e      	b.n	8004f5c <_nx_dhcp_thread_entry+0x2c4>
 800503e:	2300      	movs	r3, #0
 8005040:	600b      	str	r3, [r1, #0]
                            _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	9804      	ldr	r0, [sp, #16]
 8005046:	f7ff fdd1 	bl	8004bec <_nx_dhcp_interface_reinitialize>
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800504a:	2264      	movs	r2, #100	; 0x64
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800504c:	2102      	movs	r1, #2
 800504e:	9803      	ldr	r0, [sp, #12]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 8005050:	2300      	movs	r3, #0
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005052:	7001      	strb	r1, [r0, #0]
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005054:	602a      	str	r2, [r5, #0]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 8005056:	9a07      	ldr	r2, [sp, #28]
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e6cf      	b.n	8004dfc <_nx_dhcp_thread_entry+0x164>
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 800505c:	f1a9 0264 	sub.w	r2, r9, #100	; 0x64
 8005060:	9903      	ldr	r1, [sp, #12]
 8005062:	4413      	add	r3, r2
 8005064:	7809      	ldrb	r1, [r1, #0]
 8005066:	e773      	b.n	8004f50 <_nx_dhcp_thread_entry+0x2b8>
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 8005068:	ea4f 0943 	mov.w	r9, r3, lsl #1
                            interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800506c:	9b07      	ldr	r3, [sp, #28]
 800506e:	f5b9 5fc8 	cmp.w	r9, #6400	; 0x1900
 8005072:	bf28      	it	cs
 8005074:	f44f 59c8 	movcs.w	r9, #6400	; 0x1900
 8005078:	f8c3 9000 	str.w	r9, [r3]
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 800507c:	f8c5 9000 	str.w	r9, [r5]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8005080:	f009 fe3c 	bl	800ecfc <rand>
 8005084:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <_nx_dhcp_thread_entry+0x4e8>)
 8005086:	22c9      	movs	r2, #201	; 0xc9
 8005088:	fba3 1300 	umull	r1, r3, r3, r0
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	fb02 0313 	mls	r3, r2, r3, r0
    if (adjustment < NX_IP_PERIODIC_RATE)
 8005092:	2b63      	cmp	r3, #99	; 0x63
 8005094:	d8e2      	bhi.n	800505c <_nx_dhcp_thread_entry+0x3c4>
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 8005096:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800509a:	9903      	ldr	r1, [sp, #12]
 800509c:	4591      	cmp	r9, r2
 800509e:	7809      	ldrb	r1, [r1, #0]
 80050a0:	f67f af22 	bls.w	8004ee8 <_nx_dhcp_thread_entry+0x250>
 80050a4:	e751      	b.n	8004f4a <_nx_dhcp_thread_entry+0x2b2>
 80050a6:	2300      	movs	r3, #0
 80050a8:	600b      	str	r3, [r1, #0]
 80050aa:	e6c1      	b.n	8004e30 <_nx_dhcp_thread_entry+0x198>
 80050ac:	981c      	ldr	r0, [sp, #112]	; 0x70
 80050ae:	e7a1      	b.n	8004ff4 <_nx_dhcp_thread_entry+0x35c>
    new_packet_ptr -> nx_packet_length = bytes_copied; 
 80050b0:	6242      	str	r2, [r0, #36]	; 0x24
    nx_packet_release(packet_ptr);
 80050b2:	4620      	mov	r0, r4
 80050b4:	9312      	str	r3, [sp, #72]	; 0x48
 80050b6:	f7fd fe49 	bl	8002d4c <_nx_packet_release>
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 80050ba:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 80050be:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80050c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 80050c4:	f8dc e008 	ldr.w	lr, [ip, #8]
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 80050c8:	eb02 0409 	add.w	r4, r2, r9
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 80050cc:	f8be 101c 	ldrh.w	r1, [lr, #28]
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 80050d0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80050d4:	f8de 001e 	ldr.w	r0, [lr, #30]
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 80050d8:	ba49      	rev16	r1, r1
 80050da:	f8d4 4c54 	ldr.w	r4, [r4, #3156]	; 0xc54
 80050de:	ba00      	rev	r0, r0
 80050e0:	b289      	uxth	r1, r1
 80050e2:	42a1      	cmp	r1, r4
 80050e4:	f040 80d7 	bne.w	8005296 <_nx_dhcp_thread_entry+0x5fe>
    dhcp_client_mac_lsw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 80050e8:	444a      	add	r2, r9
 80050ea:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 80050ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050f0:	f8d2 2c58 	ldr.w	r2, [r2, #3160]	; 0xc58
 80050f4:	4282      	cmp	r2, r0
 80050f6:	f040 80ce 	bne.w	8005296 <_nx_dhcp_thread_entry+0x5fe>
        value = (value << 8) | *data++;
 80050fa:	f8be 2004 	ldrh.w	r2, [lr, #4]
 80050fe:	f89e 4006 	ldrb.w	r4, [lr, #6]
 8005102:	ba52      	rev16	r2, r2
 8005104:	f89e 0007 	ldrb.w	r0, [lr, #7]
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 8005108:	6871      	ldr	r1, [r6, #4]
        value = (value << 8) | *data++;
 800510a:	b292      	uxth	r2, r2
 800510c:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
 8005110:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 8005114:	4281      	cmp	r1, r0
 8005116:	f040 80be 	bne.w	8005296 <_nx_dhcp_thread_entry+0x5fe>
    original_state  = interface_record -> nx_dhcp_state;
 800511a:	7872      	ldrb	r2, [r6, #1]
 800511c:	9212      	str	r2, [sp, #72]	; 0x48
    switch (interface_record -> nx_dhcp_state)
 800511e:	3a03      	subs	r2, #3
 8005120:	2a04      	cmp	r2, #4
 8005122:	d816      	bhi.n	8005152 <_nx_dhcp_thread_entry+0x4ba>
 8005124:	e8df f002 	tbb	[pc, r2]
 8005128:	67152e46 	.word	0x67152e46
 800512c:	8b          	.byte	0x8b
 800512d:	00          	.byte	0x00
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 800512e:	4649      	mov	r1, r9
 8005130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005132:	69b3      	ldr	r3, [r6, #24]
 8005134:	68f2      	ldr	r2, [r6, #12]
 8005136:	f001 fdb7 	bl	8006ca8 <_nx_ip_interface_address_set>
                    if (interface_record -> nx_dhcp_gateway_address)
 800513a:	6931      	ldr	r1, [r6, #16]
 800513c:	b119      	cbz	r1, 8005146 <_nx_dhcp_thread_entry+0x4ae>
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 800513e:	9b04      	ldr	r3, [sp, #16]
 8005140:	6898      	ldr	r0, [r3, #8]
 8005142:	f001 fcdd 	bl	8006b00 <_nx_ip_gateway_address_set>
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8005146:	2205      	movs	r2, #5
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005148:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800514a:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 800514e:	7072      	strb	r2, [r6, #1]
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005150:	6233      	str	r3, [r6, #32]
    nx_packet_release(new_packet_ptr);
 8005152:	4660      	mov	r0, ip
 8005154:	f7fd fdfa 	bl	8002d4c <_nx_packet_release>
    if (original_state != interface_record -> nx_dhcp_state)
 8005158:	7871      	ldrb	r1, [r6, #1]
 800515a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800515c:	428b      	cmp	r3, r1
 800515e:	f43f aefd 	beq.w	8004f5c <_nx_dhcp_thread_entry+0x2c4>
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005162:	9b08      	ldr	r3, [sp, #32]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b10b      	cbz	r3, 800516c <_nx_dhcp_thread_entry+0x4d4>
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8005168:	9804      	ldr	r0, [sp, #16]
 800516a:	4798      	blx	r3
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800516c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f43f aef3 	beq.w	8004f5c <_nx_dhcp_thread_entry+0x2c4>
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005176:	7872      	ldrb	r2, [r6, #1]
 8005178:	9804      	ldr	r0, [sp, #16]
 800517a:	69f1      	ldr	r1, [r6, #28]
 800517c:	4798      	blx	r3
 800517e:	e6ed      	b.n	8004f5c <_nx_dhcp_thread_entry+0x2c4>
 8005180:	028c1979 	.word	0x028c1979
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8005184:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 8005188:	f10e 02f0 	add.w	r2, lr, #240	; 0xf0
 800518c:	9d06      	ldr	r5, [sp, #24]
 800518e:	f1a4 00f1 	sub.w	r0, r4, #241	; 0xf1
 8005192:	9415      	str	r4, [sp, #84]	; 0x54
    while (i < length - 1)
 8005194:	4283      	cmp	r3, r0
 8005196:	f103 0301 	add.w	r3, r3, #1
 800519a:	d209      	bcs.n	80051b0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800519c:	7811      	ldrb	r1, [r2, #0]
 800519e:	9106      	str	r1, [sp, #24]
 80051a0:	2900      	cmp	r1, #0
 80051a2:	d17e      	bne.n	80052a2 <_nx_dhcp_thread_entry+0x60a>
    while (i < length - 1)
 80051a4:	4283      	cmp	r3, r0
            data++;
 80051a6:	f102 0201 	add.w	r2, r2, #1
 80051aa:	f103 0301 	add.w	r3, r3, #1
    while (i < length - 1)
 80051ae:	d3f5      	bcc.n	800519c <_nx_dhcp_thread_entry+0x504>
 80051b0:	9506      	str	r5, [sp, #24]
 80051b2:	e7ce      	b.n	8005152 <_nx_dhcp_thread_entry+0x4ba>
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr -> nx_packet_length);
 80051b4:	f8dc 9024 	ldr.w	r9, [ip, #36]	; 0x24
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 80051b8:	f10e 02f0 	add.w	r2, lr, #240	; 0xf0
 80051bc:	9d06      	ldr	r5, [sp, #24]
 80051be:	f1a9 00f1 	sub.w	r0, r9, #241	; 0xf1
 80051c2:	4601      	mov	r1, r0
 80051c4:	900a      	str	r0, [sp, #40]	; 0x28
    while (i < length - 1)
 80051c6:	428b      	cmp	r3, r1
 80051c8:	f103 0301 	add.w	r3, r3, #1
 80051cc:	d2f0      	bcs.n	80051b0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 80051ce:	7814      	ldrb	r4, [r2, #0]
 80051d0:	b944      	cbnz	r4, 80051e4 <_nx_dhcp_thread_entry+0x54c>
    while (i < length - 1)
 80051d2:	428b      	cmp	r3, r1
            data++;
 80051d4:	f102 0201 	add.w	r2, r2, #1
 80051d8:	f103 0301 	add.w	r3, r3, #1
    while (i < length - 1)
 80051dc:	d2e8      	bcs.n	80051b0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 80051de:	7814      	ldrb	r4, [r2, #0]
 80051e0:	2c00      	cmp	r4, #0
 80051e2:	d0f6      	beq.n	80051d2 <_nx_dhcp_thread_entry+0x53a>
 80051e4:	7851      	ldrb	r1, [r2, #1]
        else if (*data == option)
 80051e6:	2c35      	cmp	r4, #53	; 0x35
            data += size + 1;
 80051e8:	f101 0002 	add.w	r0, r1, #2
 80051ec:	440b      	add	r3, r1
        else if (*data == option)
 80051ee:	d063      	beq.n	80052b8 <_nx_dhcp_thread_entry+0x620>
            data += size + 1;
 80051f0:	4402      	add	r2, r0
 80051f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051f4:	e7e7      	b.n	80051c6 <_nx_dhcp_thread_entry+0x52e>
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 80051f6:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 80051fa:	f10e 02f0 	add.w	r2, lr, #240	; 0xf0
 80051fe:	9d06      	ldr	r5, [sp, #24]
 8005200:	f1a4 00f1 	sub.w	r0, r4, #241	; 0xf1
 8005204:	9415      	str	r4, [sp, #84]	; 0x54
    while (i < length - 1)
 8005206:	4298      	cmp	r0, r3
 8005208:	f103 0301 	add.w	r3, r3, #1
 800520c:	d9d0      	bls.n	80051b0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 800520e:	7811      	ldrb	r1, [r2, #0]
 8005210:	9106      	str	r1, [sp, #24]
 8005212:	b949      	cbnz	r1, 8005228 <_nx_dhcp_thread_entry+0x590>
    while (i < length - 1)
 8005214:	4298      	cmp	r0, r3
            data++;
 8005216:	f102 0201 	add.w	r2, r2, #1
 800521a:	f103 0301 	add.w	r3, r3, #1
    while (i < length - 1)
 800521e:	d9c7      	bls.n	80051b0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 8005220:	7811      	ldrb	r1, [r2, #0]
 8005222:	9106      	str	r1, [sp, #24]
 8005224:	2900      	cmp	r1, #0
 8005226:	d0f5      	beq.n	8005214 <_nx_dhcp_thread_entry+0x57c>
 8005228:	7851      	ldrb	r1, [r2, #1]
            data += size + 1;
 800522a:	1c8c      	adds	r4, r1, #2
 800522c:	440b      	add	r3, r1
 800522e:	9414      	str	r4, [sp, #80]	; 0x50
        else if (*data == option)
 8005230:	9c06      	ldr	r4, [sp, #24]
 8005232:	2c35      	cmp	r4, #53	; 0x35
 8005234:	f000 80b5 	beq.w	80053a2 <_nx_dhcp_thread_entry+0x70a>
            data += size + 1;
 8005238:	9914      	ldr	r1, [sp, #80]	; 0x50
 800523a:	440a      	add	r2, r1
 800523c:	e7e3      	b.n	8005206 <_nx_dhcp_thread_entry+0x56e>
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 800523e:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 8005242:	f10e 02f0 	add.w	r2, lr, #240	; 0xf0
 8005246:	9d06      	ldr	r5, [sp, #24]
 8005248:	f1a4 00f1 	sub.w	r0, r4, #241	; 0xf1
 800524c:	9415      	str	r4, [sp, #84]	; 0x54
    while (i < length - 1)
 800524e:	4283      	cmp	r3, r0
 8005250:	f103 0301 	add.w	r3, r3, #1
 8005254:	d2ac      	bcs.n	80051b0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 8005256:	7811      	ldrb	r1, [r2, #0]
 8005258:	9106      	str	r1, [sp, #24]
 800525a:	b949      	cbnz	r1, 8005270 <_nx_dhcp_thread_entry+0x5d8>
    while (i < length - 1)
 800525c:	4283      	cmp	r3, r0
            data++;
 800525e:	f102 0201 	add.w	r2, r2, #1
 8005262:	f103 0301 	add.w	r3, r3, #1
    while (i < length - 1)
 8005266:	d2a3      	bcs.n	80051b0 <_nx_dhcp_thread_entry+0x518>
        if (*data == NX_DHCP_OPTION_PAD)
 8005268:	7811      	ldrb	r1, [r2, #0]
 800526a:	9106      	str	r1, [sp, #24]
 800526c:	2900      	cmp	r1, #0
 800526e:	d0f5      	beq.n	800525c <_nx_dhcp_thread_entry+0x5c4>
 8005270:	7851      	ldrb	r1, [r2, #1]
            data += size + 1;
 8005272:	1c8c      	adds	r4, r1, #2
 8005274:	440b      	add	r3, r1
 8005276:	9414      	str	r4, [sp, #80]	; 0x50
        else if (*data == option)
 8005278:	9c06      	ldr	r4, [sp, #24]
 800527a:	2c35      	cmp	r4, #53	; 0x35
 800527c:	d060      	beq.n	8005340 <_nx_dhcp_thread_entry+0x6a8>
            data += size + 1;
 800527e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005280:	440a      	add	r2, r1
 8005282:	e7e4      	b.n	800524e <_nx_dhcp_thread_entry+0x5b6>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005284:	2203      	movs	r2, #3
 8005286:	4631      	mov	r1, r6
 8005288:	9804      	ldr	r0, [sp, #16]
 800528a:	f7fe fd25 	bl	8003cd8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 800528e:	2304      	movs	r3, #4
 8005290:	9a03      	ldr	r2, [sp, #12]
 8005292:	7013      	strb	r3, [r2, #0]
 8005294:	e640      	b.n	8004f18 <_nx_dhcp_thread_entry+0x280>
        nx_packet_release(new_packet_ptr);
 8005296:	4660      	mov	r0, ip
 8005298:	f7fd fd58 	bl	8002d4c <_nx_packet_release>
 800529c:	e65e      	b.n	8004f5c <_nx_dhcp_thread_entry+0x2c4>
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 800529e:	602a      	str	r2, [r5, #0]
 80052a0:	e5a0      	b.n	8004de4 <_nx_dhcp_thread_entry+0x14c>
 80052a2:	7851      	ldrb	r1, [r2, #1]
            data += size + 1;
 80052a4:	1c8c      	adds	r4, r1, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	9414      	str	r4, [sp, #80]	; 0x50
        else if (*data == option)
 80052aa:	9c06      	ldr	r4, [sp, #24]
 80052ac:	2c35      	cmp	r4, #53	; 0x35
 80052ae:	f000 80a9 	beq.w	8005404 <_nx_dhcp_thread_entry+0x76c>
            data += size + 1;
 80052b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80052b4:	440a      	add	r2, r1
 80052b6:	e76d      	b.n	8005194 <_nx_dhcp_thread_entry+0x4fc>
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 80052b8:	f1a9 00f0 	sub.w	r0, r9, #240	; 0xf0
 80052bc:	9506      	str	r5, [sp, #24]
            if ((i + size + 1) > length)
 80052be:	4298      	cmp	r0, r3
 80052c0:	f4ff af47 	bcc.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
        if (data != NX_NULL)
 80052c4:	1c54      	adds	r4, r2, #1
 80052c6:	f43f af44 	beq.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
            if (*data > 4)
 80052ca:	2904      	cmp	r1, #4
 80052cc:	f63f af41 	bhi.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
                *value = _nx_dhcp_get_data(data + 1, *data);
 80052d0:	3202      	adds	r2, #2
    while (size-- > 0)
 80052d2:	2900      	cmp	r1, #0
 80052d4:	f43f af3d 	beq.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
 80052d8:	4411      	add	r1, r2
ULONG   value = 0;
 80052da:	2300      	movs	r3, #0
        value = (value << 8) | *data++;
 80052dc:	f812 0b01 	ldrb.w	r0, [r2], #1
    while (size-- > 0)
 80052e0:	428a      	cmp	r2, r1
        value = (value << 8) | *data++;
 80052e2:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    while (size-- > 0)
 80052e6:	d1f9      	bne.n	80052dc <_nx_dhcp_thread_entry+0x644>
            if ((status == NX_SUCCESS) && (dhcp_type == NX_DHCP_TYPE_DHCPOFFER))
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	9506      	str	r5, [sp, #24]
 80052ec:	f47f af31 	bne.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
                interface_record -> nx_dhcp_offers_received++;
 80052f0:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 80052f4:	464b      	mov	r3, r9
 80052f6:	4672      	mov	r2, lr
 80052f8:	4631      	mov	r1, r6
                interface_record -> nx_dhcp_offers_received++;
 80052fa:	1c44      	adds	r4, r0, #1
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 80052fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
                interface_record -> nx_dhcp_offers_received++;
 80052fe:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005302:	f7ff fac9 	bl	8004898 <_nx_dhcp_extract_information.isra.1>
 8005306:	2800      	cmp	r0, #0
 8005308:	f040 80a6 	bne.w	8005458 <_nx_dhcp_thread_entry+0x7c0>
                _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800530c:	2203      	movs	r2, #3
 800530e:	4631      	mov	r1, r6
 8005310:	9804      	ldr	r0, [sp, #16]
 8005312:	f7fe fce1 	bl	8003cd8 <_nx_dhcp_send_request_internal>
                interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8005316:	f44f 73c8 	mov.w	r3, #400	; 0x190
                interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 800531a:	e9c6 3308 	strd	r3, r3, [r6, #32]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 800531e:	f009 fced 	bl	800ecfc <rand>
 8005322:	4b5e      	ldr	r3, [pc, #376]	; (800549c <_nx_dhcp_thread_entry+0x804>)
 8005324:	22c9      	movs	r2, #201	; 0xc9
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8005326:	2104      	movs	r1, #4
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8005328:	fba3 4300 	umull	r4, r3, r3, r0
 800532c:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8005330:	7071      	strb	r1, [r6, #1]
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	fb02 0313 	mls	r3, r2, r3, r0
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 8005338:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 800533c:	6233      	str	r3, [r6, #32]
 800533e:	e708      	b.n	8005152 <_nx_dhcp_thread_entry+0x4ba>
 8005340:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8005342:	9506      	str	r5, [sp, #24]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8005344:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
            if ((i + size + 1) > length)
 8005348:	4298      	cmp	r0, r3
 800534a:	f4ff af02 	bcc.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
        if (data != NX_NULL)
 800534e:	1c50      	adds	r0, r2, #1
 8005350:	f43f aeff 	beq.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
            if (*data > 4)
 8005354:	2904      	cmp	r1, #4
 8005356:	f63f aefc 	bhi.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
                *value = _nx_dhcp_get_data(data + 1, *data);
 800535a:	3202      	adds	r2, #2
    while (size-- > 0)
 800535c:	2900      	cmp	r1, #0
 800535e:	f43f aef8 	beq.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
 8005362:	4411      	add	r1, r2
ULONG   value = 0;
 8005364:	2300      	movs	r3, #0
        value = (value << 8) | *data++;
 8005366:	f812 0b01 	ldrb.w	r0, [r2], #1
    while (size-- > 0)
 800536a:	428a      	cmp	r2, r1
        value = (value << 8) | *data++;
 800536c:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    while (size-- > 0)
 8005370:	d1f9      	bne.n	8005366 <_nx_dhcp_thread_entry+0x6ce>
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8005372:	2b05      	cmp	r3, #5
 8005374:	9506      	str	r5, [sp, #24]
 8005376:	d072      	beq.n	800545e <_nx_dhcp_thread_entry+0x7c6>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8005378:	2b06      	cmp	r3, #6
 800537a:	f47f aeea 	bne.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
                    interface_record -> nx_dhcp_nacks_received++;
 800537e:	f8d6 3198 	ldr.w	r3, [r6, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005382:	69f1      	ldr	r1, [r6, #28]
                    interface_record -> nx_dhcp_nacks_received++;
 8005384:	3301      	adds	r3, #1
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005386:	9804      	ldr	r0, [sp, #16]
                    interface_record -> nx_dhcp_nacks_received++;
 8005388:	f8c6 3198 	str.w	r3, [r6, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800538c:	f7ff fc2e 	bl	8004bec <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005390:	2202      	movs	r2, #2
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005392:	2364      	movs	r3, #100	; 0x64
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8005394:	2100      	movs	r1, #0
 8005396:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800539a:	6271      	str	r1, [r6, #36]	; 0x24
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800539c:	7072      	strb	r2, [r6, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800539e:	6233      	str	r3, [r6, #32]
 80053a0:	e6d7      	b.n	8005152 <_nx_dhcp_thread_entry+0x4ba>
 80053a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80053a4:	9506      	str	r5, [sp, #24]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 80053a6:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
            if ((i + size + 1) > length)
 80053aa:	4298      	cmp	r0, r3
 80053ac:	f4ff aed1 	bcc.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
        if (data != NX_NULL)
 80053b0:	1c53      	adds	r3, r2, #1
 80053b2:	f43f aece 	beq.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
            if (*data > 4)
 80053b6:	2904      	cmp	r1, #4
 80053b8:	f63f aecb 	bhi.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
                *value = _nx_dhcp_get_data(data + 1, *data);
 80053bc:	3202      	adds	r2, #2
    while (size-- > 0)
 80053be:	2900      	cmp	r1, #0
 80053c0:	f43f aec7 	beq.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
 80053c4:	4411      	add	r1, r2
ULONG   value = 0;
 80053c6:	2300      	movs	r3, #0
        value = (value << 8) | *data++;
 80053c8:	f812 0b01 	ldrb.w	r0, [r2], #1
    while (size-- > 0)
 80053cc:	428a      	cmp	r2, r1
        value = (value << 8) | *data++;
 80053ce:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    while (size-- > 0)
 80053d2:	d1f9      	bne.n	80053c8 <_nx_dhcp_thread_entry+0x730>
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	9506      	str	r5, [sp, #24]
 80053d8:	d041      	beq.n	800545e <_nx_dhcp_thread_entry+0x7c6>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 80053da:	2b06      	cmp	r3, #6
 80053dc:	f47f aeb9 	bne.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
                    interface_record -> nx_dhcp_nacks_received++;
 80053e0:	f8d6 3198 	ldr.w	r3, [r6, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80053e4:	69f1      	ldr	r1, [r6, #28]
                    interface_record -> nx_dhcp_nacks_received++;
 80053e6:	3301      	adds	r3, #1
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80053e8:	9804      	ldr	r0, [sp, #16]
                    interface_record -> nx_dhcp_nacks_received++;
 80053ea:	f8c6 3198 	str.w	r3, [r6, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80053ee:	f7ff fbfd 	bl	8004bec <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80053f2:	2202      	movs	r2, #2
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 80053f4:	2364      	movs	r3, #100	; 0x64
                    interface_record -> nx_dhcp_rtr_interval = 0;
 80053f6:	2100      	movs	r1, #0
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80053f8:	7072      	strb	r2, [r6, #1]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 80053fa:	6271      	str	r1, [r6, #36]	; 0x24
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 80053fc:	6233      	str	r3, [r6, #32]
 80053fe:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8005402:	e6a6      	b.n	8005152 <_nx_dhcp_thread_entry+0x4ba>
 8005404:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8005406:	9506      	str	r5, [sp, #24]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8005408:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
            if ((i + size + 1) > length)
 800540c:	4298      	cmp	r0, r3
 800540e:	f4ff aea0 	bcc.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
        if (data != NX_NULL)
 8005412:	1c50      	adds	r0, r2, #1
 8005414:	f43f ae9d 	beq.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
            if (*data > 4)
 8005418:	2904      	cmp	r1, #4
 800541a:	f63f ae9a 	bhi.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
                *value = _nx_dhcp_get_data(data + 1, *data);
 800541e:	3202      	adds	r2, #2
    while (size-- > 0)
 8005420:	2900      	cmp	r1, #0
 8005422:	f43f ae96 	beq.w	8005152 <_nx_dhcp_thread_entry+0x4ba>
 8005426:	4411      	add	r1, r2
ULONG   value = 0;
 8005428:	2300      	movs	r3, #0
        value = (value << 8) | *data++;
 800542a:	f812 0b01 	ldrb.w	r0, [r2], #1
    while (size-- > 0)
 800542e:	4291      	cmp	r1, r2
        value = (value << 8) | *data++;
 8005430:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    while (size-- > 0)
 8005434:	d1f9      	bne.n	800542a <_nx_dhcp_thread_entry+0x792>
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8005436:	2b05      	cmp	r3, #5
 8005438:	9506      	str	r5, [sp, #24]
 800543a:	d1ce      	bne.n	80053da <_nx_dhcp_thread_entry+0x742>
                    interface_record -> nx_dhcp_acks_received++;
 800543c:	f8d6 0194 	ldr.w	r0, [r6, #404]	; 0x194
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005440:	4623      	mov	r3, r4
 8005442:	4672      	mov	r2, lr
 8005444:	4631      	mov	r1, r6
                    interface_record -> nx_dhcp_acks_received++;
 8005446:	1c44      	adds	r4, r0, #1
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005448:	9813      	ldr	r0, [sp, #76]	; 0x4c
                    interface_record -> nx_dhcp_acks_received++;
 800544a:	f8c6 4194 	str.w	r4, [r6, #404]	; 0x194
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800544e:	f7ff fa23 	bl	8004898 <_nx_dhcp_extract_information.isra.1>
 8005452:	2800      	cmp	r0, #0
 8005454:	f43f ae6b 	beq.w	800512e <_nx_dhcp_thread_entry+0x496>
 8005458:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800545c:	e679      	b.n	8005152 <_nx_dhcp_thread_entry+0x4ba>
                    interface_record -> nx_dhcp_acks_received++;
 800545e:	f8d6 0194 	ldr.w	r0, [r6, #404]	; 0x194
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005462:	4623      	mov	r3, r4
 8005464:	4672      	mov	r2, lr
 8005466:	4631      	mov	r1, r6
                    interface_record -> nx_dhcp_acks_received++;
 8005468:	1c44      	adds	r4, r0, #1
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800546a:	9813      	ldr	r0, [sp, #76]	; 0x4c
                    interface_record -> nx_dhcp_acks_received++;
 800546c:	f8c6 4194 	str.w	r4, [r6, #404]	; 0x194
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005470:	f7ff fa12 	bl	8004898 <_nx_dhcp_extract_information.isra.1>
 8005474:	2800      	cmp	r0, #0
 8005476:	d1ef      	bne.n	8005458 <_nx_dhcp_thread_entry+0x7c0>
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8005478:	4649      	mov	r1, r9
 800547a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800547c:	69b3      	ldr	r3, [r6, #24]
 800547e:	68f2      	ldr	r2, [r6, #12]
 8005480:	f001 fc12 	bl	8006ca8 <_nx_ip_interface_address_set>
                    if (interface_record -> nx_dhcp_gateway_address)
 8005484:	6931      	ldr	r1, [r6, #16]
 8005486:	b119      	cbz	r1, 8005490 <_nx_dhcp_thread_entry+0x7f8>
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8005488:	9b04      	ldr	r3, [sp, #16]
 800548a:	6898      	ldr	r0, [r3, #8]
 800548c:	f001 fb38 	bl	8006b00 <_nx_ip_gateway_address_set>
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005490:	6b32      	ldr	r2, [r6, #48]	; 0x30
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 8005492:	2305      	movs	r3, #5
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005494:	6232      	str	r2, [r6, #32]
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 8005496:	7073      	strb	r3, [r6, #1]
 8005498:	e7de      	b.n	8005458 <_nx_dhcp_thread_entry+0x7c0>
 800549a:	bf00      	nop
 800549c:	028c1979 	.word	0x028c1979

080054a0 <_nx_dhcp_start>:
{
 80054a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 80054a4:	f641 59a8 	movw	r9, #7592	; 0x1da8
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80054a8:	f500 55e9 	add.w	r5, r0, #7456	; 0x1d20
{
 80054ac:	4604      	mov	r4, r0
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80054ae:	f04f 31ff 	mov.w	r1, #4294967295
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 80054b2:	eb00 0709 	add.w	r7, r0, r9
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80054b6:	4628      	mov	r0, r5
 80054b8:	f008 ff2c 	bl	800e314 <_txe_mutex_get>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 80054bc:	f814 3009 	ldrb.w	r3, [r4, r9]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d134      	bne.n	800552e <_nx_dhcp_start+0x8e>
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 80054c4:	f641 56c4 	movw	r6, #7620	; 0x1dc4
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80054c8:	f04f 31ff 	mov.w	r1, #4294967295
 80054cc:	4628      	mov	r0, r5
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 80054ce:	f854 8006 	ldr.w	r8, [r4, r6]
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80054d2:	f008 ff1f 	bl	800e314 <_txe_mutex_get>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 80054d6:	f814 3009 	ldrb.w	r3, [r4, r9]
 80054da:	b32b      	cbz	r3, 8005528 <_nx_dhcp_start+0x88>
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 80054dc:	59a3      	ldr	r3, [r4, r6]
 80054de:	4598      	cmp	r8, r3
 80054e0:	d122      	bne.n	8005528 <_nx_dhcp_start+0x88>
    if (interface_record -> nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED)
 80054e2:	787b      	ldrb	r3, [r7, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d143      	bne.n	8005570 <_nx_dhcp_start+0xd0>
        status =  nx_udp_socket_bind(&(dhcp_ptr -> nx_dhcp_socket), NX_DHCP_CLIENT_UDP_PORT, NX_WAIT_FOREVER);
 80054e8:	f604 38dc 	addw	r8, r4, #3036	; 0xbdc
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	2144      	movs	r1, #68	; 0x44
 80054f2:	4640      	mov	r0, r8
 80054f4:	f003 fe9e 	bl	8009234 <_nx_udp_socket_bind>
        if (status != NX_SUCCESS)
 80054f8:	4606      	mov	r6, r0
 80054fa:	b950      	cbnz	r0, 8005512 <_nx_dhcp_start+0x72>
        status = tx_thread_resume(&(dhcp_ptr -> nx_dhcp_thread));
 80054fc:	f604 4058 	addw	r0, r4, #3160	; 0xc58
 8005500:	f009 f826 	bl	800e550 <_txe_thread_resume>
        if ((status != TX_SUCCESS) && (status != TX_SUSPEND_LIFTED))
 8005504:	4606      	mov	r6, r0
 8005506:	b1c0      	cbz	r0, 800553a <_nx_dhcp_start+0x9a>
 8005508:	2819      	cmp	r0, #25
 800550a:	d016      	beq.n	800553a <_nx_dhcp_start+0x9a>
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 800550c:	4640      	mov	r0, r8
 800550e:	f004 f899 	bl	8009644 <_nx_udp_socket_unbind>
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005512:	4628      	mov	r0, r5
 8005514:	f008 ff32 	bl	800e37c <_txe_mutex_put>
             if ((status == NX_SUCCESS) || (status == NX_DHCP_ALREADY_STARTED))
 8005518:	2e93      	cmp	r6, #147	; 0x93
 800551a:	d108      	bne.n	800552e <_nx_dhcp_start+0x8e>
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800551c:	4628      	mov	r0, r5
 800551e:	f008 ff2d 	bl	800e37c <_txe_mutex_put>
    return(NX_SUCCESS);  
 8005522:	2000      	movs	r0, #0
}
 8005524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005528:	4628      	mov	r0, r5
 800552a:	f008 ff27 	bl	800e37c <_txe_mutex_put>
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800552e:	4628      	mov	r0, r5
 8005530:	f008 ff24 	bl	800e37c <_txe_mutex_put>
        return NX_DHCP_NO_INTERFACES_STARTED;
 8005534:	20a6      	movs	r0, #166	; 0xa6
}
 8005536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        status = tx_timer_activate(&(dhcp_ptr -> nx_dhcp_timer));
 800553a:	f641 507c 	movw	r0, #7548	; 0x1d7c
 800553e:	4420      	add	r0, r4
 8005540:	f009 f812 	bl	800e568 <_txe_timer_activate>
        if (status != NX_SUCCESS)
 8005544:	4606      	mov	r6, r0
 8005546:	2800      	cmp	r0, #0
 8005548:	d1e0      	bne.n	800550c <_nx_dhcp_start+0x6c>
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800554a:	2102      	movs	r1, #2
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800554c:	f641 7358 	movw	r3, #8024	; 0x1f58
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005550:	2264      	movs	r2, #100	; 0x64
    interface_record -> nx_dhcp_rtr_interval = 0;
 8005552:	6278      	str	r0, [r7, #36]	; 0x24
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005554:	7079      	strb	r1, [r7, #1]
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005556:	58e3      	ldr	r3, [r4, r3]
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005558:	623a      	str	r2, [r7, #32]
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800555a:	b10b      	cbz	r3, 8005560 <_nx_dhcp_start+0xc0>
        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 800555c:	4620      	mov	r0, r4
 800555e:	4798      	blx	r3
    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8005560:	f641 735c 	movw	r3, #8028	; 0x1f5c
 8005564:	58e3      	ldr	r3, [r4, r3]
 8005566:	b11b      	cbz	r3, 8005570 <_nx_dhcp_start+0xd0>
        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005568:	4620      	mov	r0, r4
 800556a:	787a      	ldrb	r2, [r7, #1]
 800556c:	69f9      	ldr	r1, [r7, #28]
 800556e:	4798      	blx	r3
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005570:	4628      	mov	r0, r5
 8005572:	f008 ff03 	bl	800e37c <_txe_mutex_put>
 8005576:	e7d1      	b.n	800551c <_nx_dhcp_start+0x7c>

08005578 <_nxd_ipv6_prefix_router_timer_tick>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nxd_ipv6_prefix_router_timer_tick(NX_IP *ip_ptr)
{
 8005578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
NX_IPV6_PREFIX_ENTRY         *tmp, *prefix_entry;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;


    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_default_router_table_size;
 800557c:	f8b0 6cec 	ldrh.w	r6, [r0, #3308]	; 0xcec
{
 8005580:	4607      	mov	r7, r0

    /* Check each entry in the default router table. */
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8005582:	b386      	cbz	r6, 80055e6 <_nxd_ipv6_prefix_router_timer_tick+0x6e>
 8005584:	2500      	movs	r5, #0
 8005586:	f600 44f4 	addw	r4, r0, #3316	; 0xcf4
            ip_ptr -> nx_ipv6_default_router_table_size--;
        }
        else
        {
            /* Is this a static router (infinite timeout)? */
            if (rt_entry -> nx_ipv6_default_router_entry_life_time != 0xFFFF)
 800558a:	f64f 78ff 	movw	r8, #65535	; 0xffff
            rt_entry -> nx_ipv6_default_router_entry_flag = 0;
 800558e:	46a9      	mov	r9, r5
 8005590:	e012      	b.n	80055b8 <_nxd_ipv6_prefix_router_timer_tick+0x40>
            if (rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr)
 8005592:	6962      	ldr	r2, [r4, #20]
 8005594:	b102      	cbz	r2, 8005598 <_nxd_ipv6_prefix_router_timer_tick+0x20>
                rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr -> nx_nd_cache_is_router = NX_NULL;
 8005596:	6253      	str	r3, [r2, #36]	; 0x24
            _nx_invalidate_destination_entry(ip_ptr, rt_entry -> nx_ipv6_default_router_entry_router_address);
 8005598:	f000 ff2a 	bl	80063f0 <_nx_invalidate_destination_entry>
            rt_entry -> nx_ipv6_default_router_entry_flag = 0;
 800559c:	f804 9c04 	strb.w	r9, [r4, #-4]
            rt_entry -> nx_ipv6_default_router_entry_interface_ptr = NX_NULL;
 80055a0:	f8c4 9010 	str.w	r9, [r4, #16]
            ip_ptr -> nx_ipv6_default_router_table_size--;
 80055a4:	f8b7 3cec 	ldrh.w	r3, [r7, #3308]	; 0xcec
 80055a8:	3b01      	subs	r3, #1
 80055aa:	f8a7 3cec 	strh.w	r3, [r7, #3308]	; 0xcec
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 80055ae:	3501      	adds	r5, #1
 80055b0:	341c      	adds	r4, #28
 80055b2:	b1c6      	cbz	r6, 80055e6 <_nxd_ipv6_prefix_router_timer_tick+0x6e>
 80055b4:	2d07      	cmp	r5, #7
 80055b6:	d816      	bhi.n	80055e6 <_nxd_ipv6_prefix_router_timer_tick+0x6e>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) == 0)
 80055b8:	f914 3c04 	ldrsb.w	r3, [r4, #-4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	daf6      	bge.n	80055ae <_nxd_ipv6_prefix_router_timer_tick+0x36>
        if (rt_entry -> nx_ipv6_default_router_entry_life_time == 0)
 80055c0:	f834 3c02 	ldrh.w	r3, [r4, #-2]
            _nx_invalidate_destination_entry(ip_ptr, rt_entry -> nx_ipv6_default_router_entry_router_address);
 80055c4:	4621      	mov	r1, r4
 80055c6:	4638      	mov	r0, r7
        table_size--;
 80055c8:	3e01      	subs	r6, #1
        if (rt_entry -> nx_ipv6_default_router_entry_life_time == 0)
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0e1      	beq.n	8005592 <_nxd_ipv6_prefix_router_timer_tick+0x1a>
            if (rt_entry -> nx_ipv6_default_router_entry_life_time != 0xFFFF)
 80055ce:	4543      	cmp	r3, r8
            {

                /* No, so decrement the lifetime by one tick.*/
                rt_entry -> nx_ipv6_default_router_entry_life_time--;
 80055d0:	f103 33ff 	add.w	r3, r3, #4294967295
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 80055d4:	f105 0501 	add.w	r5, r5, #1
 80055d8:	f104 041c 	add.w	r4, r4, #28
                rt_entry -> nx_ipv6_default_router_entry_life_time--;
 80055dc:	bf18      	it	ne
 80055de:	f824 3c1e 	strhne.w	r3, [r4, #-30]
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 80055e2:	2e00      	cmp	r6, #0
 80055e4:	d1e6      	bne.n	80055b4 <_nxd_ipv6_prefix_router_timer_tick+0x3c>
            }
        }
    }

    /* Set a pointer to the first prefix entry in the IP prefix list. */
    prefix_entry = ip_ptr -> nx_ipv6_prefix_list_ptr;
 80055e6:	f8d7 1ed4 	ldr.w	r1, [r7, #3796]	; 0xed4

    /* Loop through the entire list. */
    while (prefix_entry)
 80055ea:	b919      	cbnz	r1, 80055f4 <_nxd_ipv6_prefix_router_timer_tick+0x7c>
 80055ec:	e010      	b.n	8005610 <_nxd_ipv6_prefix_router_timer_tick+0x98>
            }
            else
            {

                /* Just decrement the time remaining. */
                tmp -> nx_ipv6_prefix_entry_valid_lifetime--;
 80055ee:	614a      	str	r2, [r1, #20]
    while (prefix_entry)
 80055f0:	4621      	mov	r1, r4
 80055f2:	b16c      	cbz	r4, 8005610 <_nxd_ipv6_prefix_router_timer_tick+0x98>
        if (tmp -> nx_ipv6_prefix_entry_valid_lifetime != (UINT)0xFFFFFFFF)
 80055f4:	694b      	ldr	r3, [r1, #20]
        prefix_entry = prefix_entry -> nx_ipv6_prefix_entry_next;
 80055f6:	69cc      	ldr	r4, [r1, #28]
        if (tmp -> nx_ipv6_prefix_entry_valid_lifetime != (UINT)0xFFFFFFFF)
 80055f8:	1c5a      	adds	r2, r3, #1
                tmp -> nx_ipv6_prefix_entry_valid_lifetime--;
 80055fa:	f103 32ff 	add.w	r2, r3, #4294967295
        if (tmp -> nx_ipv6_prefix_entry_valid_lifetime != (UINT)0xFFFFFFFF)
 80055fe:	d0f7      	beq.n	80055f0 <_nxd_ipv6_prefix_router_timer_tick+0x78>
            if (tmp -> nx_ipv6_prefix_entry_valid_lifetime == 0)
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f4      	bne.n	80055ee <_nxd_ipv6_prefix_router_timer_tick+0x76>
                _nx_ipv6_prefix_list_delete_entry(ip_ptr, tmp);
 8005604:	4638      	mov	r0, r7
 8005606:	f001 ffc5 	bl	8007594 <_nx_ipv6_prefix_list_delete_entry>
    while (prefix_entry)
 800560a:	4621      	mov	r1, r4
 800560c:	2c00      	cmp	r4, #0
 800560e:	d1f1      	bne.n	80055f4 <_nxd_ipv6_prefix_router_timer_tick+0x7c>
            }
        }
    }

    return;
}
 8005610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005614 <_nxd_ipv6_router_solicitation_check>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
void _nxd_ipv6_router_solicitation_check(NX_IP *ip_ptr)
{
 8005614:	b538      	push	{r3, r4, r5, lr}
UINT i;

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_TRUE)
 8005616:	f890 5c4c 	ldrb.w	r5, [r0, #3148]	; 0xc4c
 800561a:	2d01      	cmp	r5, #1
 800561c:	d103      	bne.n	8005626 <_nxd_ipv6_router_solicitation_check+0x12>
        {

            /* Check if max number of router solicitation messages have been sent. */
            if (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count != 0)
 800561e:	f8d0 2c74 	ldr.w	r2, [r0, #3188]	; 0xc74
 8005622:	4604      	mov	r4, r0
 8005624:	b902      	cbnz	r2, 8005628 <_nxd_ipv6_router_solicitation_check+0x14>
                    }
                }
            }
        }
    }
}
 8005626:	bd38      	pop	{r3, r4, r5, pc}
                ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer--;
 8005628:	f8d0 1c7c 	ldr.w	r1, [r0, #3196]	; 0xc7c
 800562c:	3901      	subs	r1, #1
 800562e:	f8c0 1c7c 	str.w	r1, [r0, #3196]	; 0xc7c
                if (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer == 0)
 8005632:	2900      	cmp	r1, #0
 8005634:	d1f7      	bne.n	8005626 <_nxd_ipv6_router_solicitation_check+0x12>
                    if (_nx_icmpv6_send_rs(ip_ptr, i) &&
 8005636:	f000 fdf3 	bl	8006220 <_nx_icmpv6_send_rs>
 800563a:	b948      	cbnz	r0, 8005650 <_nxd_ipv6_router_solicitation_check+0x3c>
 800563c:	f8d4 3c74 	ldr.w	r3, [r4, #3188]	; 0xc74
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count--;
 8005640:	3b01      	subs	r3, #1
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer = ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_interval;
 8005642:	f8d4 5c78 	ldr.w	r5, [r4, #3192]	; 0xc78
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count--;
 8005646:	f8c4 3c74 	str.w	r3, [r4, #3188]	; 0xc74
 800564a:	f8c4 5c7c 	str.w	r5, [r4, #3196]	; 0xc7c
}
 800564e:	bd38      	pop	{r3, r4, r5, pc}
                        (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count ==
 8005650:	f8d4 3c74 	ldr.w	r3, [r4, #3188]	; 0xc74
                    if (_nx_icmpv6_send_rs(ip_ptr, i) &&
 8005654:	f8d4 2c70 	ldr.w	r2, [r4, #3184]	; 0xc70
 8005658:	4293      	cmp	r3, r2
 800565a:	d1f1      	bne.n	8005640 <_nxd_ipv6_router_solicitation_check+0x2c>
 800565c:	e7f5      	b.n	800564a <_nxd_ipv6_router_solicitation_check+0x36>
 800565e:	bf00      	nop

08005660 <_nx_arp_dynamic_entry_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8005660:	b538      	push	{r3, r4, r5, lr}
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 8005662:	69cb      	ldr	r3, [r1, #28]
 8005664:	b30b      	cbz	r3, 80056aa <_nx_arp_dynamic_entry_delete+0x4a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005666:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800566a:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 800566c:	694b      	ldr	r3, [r1, #20]
 800566e:	428b      	cmp	r3, r1
 8005670:	d01d      	beq.n	80056ae <_nx_arp_dynamic_entry_delete+0x4e>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8005672:	69ca      	ldr	r2, [r1, #28]
 8005674:	6815      	ldr	r5, [r2, #0]
 8005676:	428d      	cmp	r5, r1
 8005678:	d01d      	beq.n	80056b6 <_nx_arp_dynamic_entry_delete+0x56>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 800567a:	698a      	ldr	r2, [r1, #24]
 800567c:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 800567e:	698a      	ldr	r2, [r1, #24]
 8005680:	6153      	str	r3, [r2, #20]

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8005682:	f8d0 2c00 	ldr.w	r2, [r0, #3072]	; 0xc00
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 8005686:	2500      	movs	r5, #0

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 8005688:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800568a:	3a01      	subs	r2, #1
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 800568c:	61cd      	str	r5, [r1, #28]
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800568e:	f8c0 2c00 	str.w	r2, [r0, #3072]	; 0xc00

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8005692:	630d      	str	r5, [r1, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005694:	f384 8810 	msr	PRIMASK, r4

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 8005698:	b13b      	cbz	r3, 80056aa <_nx_arp_dynamic_entry_delete+0x4a>

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 800569a:	69dc      	ldr	r4, [r3, #28]
            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 800569c:	4618      	mov	r0, r3
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800569e:	61dd      	str	r5, [r3, #28]
            _nx_packet_transmit_release(packet_ptr);
 80056a0:	f7fd fbba 	bl	8002e18 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 80056a4:	4623      	mov	r3, r4
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	d1f7      	bne.n	800569a <_nx_arp_dynamic_entry_delete+0x3a>
        }
    }

    return(NX_SUCCESS);
}
 80056aa:	2000      	movs	r0, #0
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 80056ae:	69cb      	ldr	r3, [r1, #28]
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e7e5      	b.n	8005682 <_nx_arp_dynamic_entry_delete+0x22>
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	694b      	ldr	r3, [r1, #20]
 80056ba:	e7de      	b.n	800567a <_nx_arp_dynamic_entry_delete+0x1a>

080056bc <_nx_arp_packet_deferred_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80056bc:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80056be:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80056c2:	b672      	cpsid	i

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 80056c4:	f8d0 3c14 	ldr.w	r3, [r0, #3092]	; 0xc14
 80056c8:	b1e3      	cbz	r3, 8005704 <_nx_arp_packet_deferred_receive+0x48>
        /* Return to caller.  */
        return;
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80056ca:	f8d0 2c04 	ldr.w	r2, [r0, #3076]	; 0xc04
 80056ce:	b15a      	cbz	r2, 80056e8 <_nx_arp_packet_deferred_receive+0x2c>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 80056d0:	f8d0 2c08 	ldr.w	r2, [r0, #3080]	; 0xc08
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80056d4:	2300      	movs	r3, #0
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 80056d6:	61d1      	str	r1, [r2, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80056d8:	61cb      	str	r3, [r1, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 80056da:	f8c0 1c08 	str.w	r1, [r0, #3080]	; 0xc08
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80056de:	f384 8810 	msr	PRIMASK, r4
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
    }
}
 80056e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056e6:	4770      	bx	lr
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 80056e8:	f8c0 1c04 	str.w	r1, [r0, #3076]	; 0xc04
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 80056ec:	f8c0 1c08 	str.w	r1, [r0, #3080]	; 0xc08
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 80056f0:	61ca      	str	r2, [r1, #28]
 80056f2:	f384 8810 	msr	PRIMASK, r4
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 80056f6:	2110      	movs	r1, #16
 80056f8:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
}
 80056fc:	f85d 4b04 	ldr.w	r4, [sp], #4
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8005700:	f007 bcb6 	b.w	800d070 <_tx_event_flags_set>
 8005704:	f384 8810 	msr	PRIMASK, r4
        _nx_packet_release(packet_ptr);
 8005708:	4608      	mov	r0, r1
}
 800570a:	f85d 4b04 	ldr.w	r4, [sp], #4
        _nx_packet_release(packet_ptr);
 800570e:	f7fd bb1d 	b.w	8002d4c <_nx_packet_release>
 8005712:	bf00      	nop

08005714 <_nx_arp_packet_receive>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	460e      	mov	r6, r1
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800571a:	6889      	ldr	r1, [r1, #8]
{
 800571c:	4680      	mov	r8, r0
 800571e:	b08d      	sub	sp, #52	; 0x34

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005720:	684b      	ldr	r3, [r1, #4]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005722:	f8d1 b014 	ldr.w	fp, [r1, #20]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005726:	ea83 4033 	eor.w	r0, r3, r3, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800572a:	f8d1 e010 	ldr.w	lr, [r1, #16]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800572e:	ea8b 4c3b 	eor.w	ip, fp, fp, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005732:	698f      	ldr	r7, [r1, #24]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005734:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005736:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800573a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800573e:	ea87 4237 	eor.w	r2, r7, r7, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005742:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005746:	ea80 2033 	eor.w	r0, r0, r3, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800574a:	ea8e 433e 	eor.w	r3, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800574e:	ea8c 2b3b 	eor.w	fp, ip, fp, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005752:	6048      	str	r0, [r1, #4]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005754:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005756:	0a12      	lsrs	r2, r2, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005758:	f8c1 b014 	str.w	fp, [r1, #20]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 800575c:	fa1f fc80 	uxth.w	ip, r0
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005760:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005764:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005768:	ea83 233e 	eor.w	r3, r3, lr, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800576c:	ea82 2237 	eor.w	r2, r2, r7, ror #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005770:	e9d1 a902 	ldrd	sl, r9, [r1, #8]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005774:	618a      	str	r2, [r1, #24]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005776:	ea8a 453a 	eor.w	r5, sl, sl, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800577a:	ea89 4439 	eor.w	r4, r9, r9, ror #16
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800577e:	0a2d      	lsrs	r5, r5, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005780:	0a24      	lsrs	r4, r4, #8
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005782:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005786:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800578a:	ea85 253a 	eor.w	r5, r5, sl, ror #8

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 800578e:	f10c 3aff 	add.w	sl, ip, #4294967295
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005792:	ea84 2439 	eor.w	r4, r4, r9, ror #8
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8005796:	f1ba 0f01 	cmp.w	sl, #1
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800579a:	608d      	str	r5, [r1, #8]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800579c:	e9c1 4303 	strd	r4, r3, [r1, #12]
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 80057a0:	d86d      	bhi.n	800587e <_nx_arp_packet_receive+0x16a>
        return;
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 80057a2:	ea4f 4914 	mov.w	r9, r4, lsr #16
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
    target_ip_address =    *(message_ptr + 6);

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 80057a6:	6b77      	ldr	r7, [r6, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 80057a8:	0c1b      	lsrs	r3, r3, #16
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 80057aa:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 80057ae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 80057b2:	0c2d      	lsrs	r5, r5, #16
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 80057b4:	2f00      	cmp	r7, #0
 80057b6:	f000 80dd 	beq.w	8005974 <_nx_arp_packet_receive+0x260>

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	b953      	cbnz	r3, 80057d4 <_nx_arp_packet_receive+0xc0>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 80057be:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 80057c2:	f1be 0f00 	cmp.w	lr, #0
 80057c6:	d060      	beq.n	800588a <_nx_arp_packet_receive+0x176>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 80057c8:	45a6      	cmp	lr, r4
 80057ca:	d049      	beq.n	8005860 <_nx_arp_packet_receive+0x14c>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 80057cc:	4596      	cmp	lr, r2
 80057ce:	d101      	bne.n	80057d4 <_nx_arp_packet_receive+0xc0>
 80057d0:	2c00      	cmp	r4, #0
 80057d2:	d045      	beq.n	8005860 <_nx_arp_packet_receive+0x14c>

        return;
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 80057d4:	2c00      	cmp	r4, #0
 80057d6:	d05a      	beq.n	800588e <_nx_arp_packet_receive+0x17a>
 80057d8:	42a3      	cmp	r3, r4
 80057da:	f000 80e2 	beq.w	80059a2 <_nx_arp_packet_receive+0x28e>
 80057de:	eb04 2a14 	add.w	sl, r4, r4, lsr #8
        return;
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 80057e2:	f1bc 0f01 	cmp.w	ip, #1
 80057e6:	f00a 0a1f 	and.w	sl, sl, #31
 80057ea:	f000 810b 	beq.w	8005a04 <_nx_arp_packet_receive+0x2f0>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 80057ee:	f20a 2bde 	addw	fp, sl, #734	; 0x2de
 80057f2:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 80057f6:	2900      	cmp	r1, #0
 80057f8:	f000 810a 	beq.w	8005a10 <_nx_arp_packet_receive+0x2fc>
UCHAR         consumed = NX_FALSE;
 80057fc:	f04f 0b00 	mov.w	fp, #0
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8005800:	6a0b      	ldr	r3, [r1, #32]
 8005802:	429c      	cmp	r4, r3
 8005804:	f000 80c6 	beq.w	8005994 <_nx_arp_packet_receive+0x280>
            /* Yes, we found a match.  Get out of the loop!  */
            break;
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8005808:	694b      	ldr	r3, [r1, #20]

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 800580a:	4299      	cmp	r1, r3
 800580c:	d007      	beq.n	800581e <_nx_arp_packet_receive+0x10a>
    while (arp_ptr)
 800580e:	b133      	cbz	r3, 800581e <_nx_arp_packet_receive+0x10a>
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8005810:	6a1a      	ldr	r2, [r3, #32]
 8005812:	42a2      	cmp	r2, r4
 8005814:	f000 80bf 	beq.w	8005996 <_nx_arp_packet_receive+0x282>
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8005818:	695b      	ldr	r3, [r3, #20]
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 800581a:	428b      	cmp	r3, r1
 800581c:	d1f7      	bne.n	800580e <_nx_arp_packet_receive+0xfa>
            break;
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 800581e:	f1bb 0f00 	cmp.w	fp, #0
 8005822:	f000 80f5 	beq.w	8005a10 <_nx_arp_packet_receive+0x2fc>
 8005826:	f04f 0b01 	mov.w	fp, #1
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 800582a:	b35c      	cbz	r4, 8005884 <_nx_arp_packet_receive+0x170>
 800582c:	f1bb 0f00 	cmp.w	fp, #0
 8005830:	d028      	beq.n	8005884 <_nx_arp_packet_receive+0x170>
 8005832:	f20a 2bde 	addw	fp, sl, #734	; 0x2de
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8005836:	f8d8 3c0c 	ldr.w	r3, [r8, #3084]	; 0xc0c
 800583a:	2200      	movs	r2, #0
 800583c:	eb08 018b 	add.w	r1, r8, fp, lsl #2
 8005840:	4640      	mov	r0, r8
 8005842:	4798      	blx	r3
 8005844:	b9f0      	cbnz	r0, 8005884 <_nx_arp_packet_receive+0x170>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8005846:	f858 302b 	ldr.w	r3, [r8, fp, lsl #2]
 800584a:	699b      	ldr	r3, [r3, #24]

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 800584c:	e9c3 4508 	strd	r4, r5, [r3, #32]
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005850:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
            arp_ptr -> nx_arp_retries =               0;
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8005854:	62df      	str	r7, [r3, #44]	; 0x2c
            arp_ptr -> nx_arp_retries =               0;
 8005856:	e9c3 0001 	strd	r0, r0, [r3, #4]
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 800585a:	b00d      	add	sp, #52	; 0x34
 800585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	42ab      	cmp	r3, r5
 8005864:	d102      	bne.n	800586c <_nx_arp_packet_receive+0x158>
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	454b      	cmp	r3, r9
 800586a:	d008      	beq.n	800587e <_nx_arp_packet_receive+0x16a>
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 800586c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800586e:	b134      	cbz	r4, 800587e <_nx_arp_packet_receive+0x16a>
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005870:	79f9      	ldrb	r1, [r7, #7]
 8005872:	462b      	mov	r3, r5
 8005874:	f8cd 9000 	str.w	r9, [sp]
 8005878:	4672      	mov	r2, lr
 800587a:	4640      	mov	r0, r8
 800587c:	47a0      	blx	r4
        _nx_packet_release(packet_ptr);
 800587e:	4630      	mov	r0, r6
 8005880:	f7fd fa64 	bl	8002d4c <_nx_packet_release>
}
 8005884:	b00d      	add	sp, #52	; 0x34
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 800588a:	2c00      	cmp	r4, #0
 800588c:	d1a7      	bne.n	80057de <_nx_arp_packet_receive+0xca>
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 800588e:	f1bc 0f01 	cmp.w	ip, #1
 8005892:	d177      	bne.n	8005984 <_nx_arp_packet_receive+0x270>
 8005894:	4293      	cmp	r3, r2
 8005896:	f04f 0a00 	mov.w	sl, #0
 800589a:	f040 80b9 	bne.w	8005a10 <_nx_arp_packet_receive+0x2fc>
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 800589e:	4a5e      	ldr	r2, [pc, #376]	; (8005a18 <_nx_arp_packet_receive+0x304>)
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80058a0:	ea89 4339 	eor.w	r3, r9, r9, ror #16
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 80058a4:	4002      	ands	r2, r0
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80058a6:	0a18      	lsrs	r0, r3, #8
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 80058a8:	f042 0202 	orr.w	r2, r2, #2
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80058ac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 80058b0:	604a      	str	r2, [r1, #4]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80058b2:	ea82 4b32 	eor.w	fp, r2, r2, ror #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 80058b6:	68fb      	ldr	r3, [r7, #12]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80058b8:	ea80 2039 	eor.w	r0, r0, r9, ror #8
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 80058bc:	f8b7 c012 	ldrh.w	ip, [r7, #18]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80058c0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 80058c4:	ea4c 4e03 	orr.w	lr, ip, r3, lsl #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80058c8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 80058cc:	f8c1 e008 	str.w	lr, [r1, #8]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80058d0:	ea8b 2b32 	eor.w	fp, fp, r2, ror #8
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 80058d4:	693b      	ldr	r3, [r7, #16]
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 80058d6:	f8b7 c016 	ldrh.w	ip, [r7, #22]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 80058da:	ea4c 4203 	orr.w	r2, ip, r3, lsl #16
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 80058de:	f101 031c 	add.w	r3, r1, #28
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 80058e2:	60ca      	str	r2, [r1, #12]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 80058e4:	9303      	str	r3, [sp, #12]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 80058e6:	697b      	ldr	r3, [r7, #20]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80058e8:	f8c1 b004 	str.w	fp, [r1, #4]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80058ec:	ea82 4b32 	eor.w	fp, r2, r2, ror #16
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 80058f0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80058f4:	6148      	str	r0, [r1, #20]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80058f6:	ea8e 403e 	eor.w	r0, lr, lr, ror #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80058fa:	ea83 4c33 	eor.w	ip, r3, r3, ror #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80058fe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005902:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005906:	0a00      	lsrs	r0, r0, #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005908:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800590c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005910:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005914:	ea8b 2232 	eor.w	r2, fp, r2, ror #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005918:	ea8c 2c33 	eor.w	ip, ip, r3, ror #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800591c:	ea84 4334 	eor.w	r3, r4, r4, ror #16
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005920:	f8c1 c010 	str.w	ip, [r1, #16]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005924:	ea80 203e 	eor.w	r0, r0, lr, ror #8
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005928:	0a1b      	lsrs	r3, r3, #8
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 800592a:	f04f 0c1c 	mov.w	ip, #28
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 800592e:	f04f 0e06 	mov.w	lr, #6
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005932:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8005936:	f8cd e010 	str.w	lr, [sp, #16]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800593a:	ea83 2334 	eor.w	r3, r3, r4, ror #8
 800593e:	618b      	str	r3, [r1, #24]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8005940:	9b03      	ldr	r3, [sp, #12]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005942:	e9c1 0202 	strd	r0, r2, [r1, #8]
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8005946:	60f3      	str	r3, [r6, #12]
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005948:	a804      	add	r0, sp, #16
        driver_request.nx_ip_driver_packet =   packet_ptr;
 800594a:	9608      	str	r6, [sp, #32]
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 800594c:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8005952:	e9cd 5906 	strd	r5, r9, [sp, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005956:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800595a:	4798      	blx	r3
    if (sender_ip_address != 0)
 800595c:	2c00      	cmp	r4, #0
 800595e:	d091      	beq.n	8005884 <_nx_arp_packet_receive+0x170>
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8005960:	f20a 2bde 	addw	fp, sl, #734	; 0x2de
 8005964:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
    while (arp_ptr)
 8005968:	2900      	cmp	r1, #0
 800596a:	f43f af64 	beq.w	8005836 <_nx_arp_packet_receive+0x122>
        consumed = NX_TRUE;
 800596e:	f04f 0b01 	mov.w	fp, #1
 8005972:	e745      	b.n	8005800 <_nx_arp_packet_receive+0xec>
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8005974:	f608 4748 	addw	r7, r8, #3144	; 0xc48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005978:	697b      	ldr	r3, [r7, #20]
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 800597a:	6377      	str	r7, [r6, #52]	; 0x34
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 800597c:	2b00      	cmp	r3, #0
 800597e:	f47f af29 	bne.w	80057d4 <_nx_arp_packet_receive+0xc0>
 8005982:	e71c      	b.n	80057be <_nx_arp_packet_receive+0xaa>
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8005984:	f04f 0b01 	mov.w	fp, #1
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005988:	f04f 0a00 	mov.w	sl, #0
        _nx_packet_release(packet_ptr);
 800598c:	4630      	mov	r0, r6
 800598e:	f7fd f9dd 	bl	8002d4c <_nx_packet_release>
 8005992:	e74a      	b.n	800582a <_nx_arp_packet_receive+0x116>
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8005994:	460b      	mov	r3, r1
            if (arp_ptr -> nx_arp_route_static)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	b1d2      	cbz	r2, 80059d0 <_nx_arp_packet_receive+0x2bc>
    if (consumed == NX_FALSE)
 800599a:	f1bb 0f00 	cmp.w	fp, #0
 800599e:	d0f5      	beq.n	800598c <_nx_arp_packet_receive+0x278>
 80059a0:	e770      	b.n	8005884 <_nx_arp_packet_receive+0x170>
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	42ab      	cmp	r3, r5
 80059a6:	d029      	beq.n	80059fc <_nx_arp_packet_receive+0x2e8>
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 80059a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059aa:	b1fb      	cbz	r3, 80059ec <_nx_arp_packet_receive+0x2d8>
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 80059ac:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80059ae:	b134      	cbz	r4, 80059be <_nx_arp_packet_receive+0x2aa>
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 80059b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b2:	462b      	mov	r3, r5
 80059b4:	79f9      	ldrb	r1, [r7, #7]
 80059b6:	4640      	mov	r0, r8
 80059b8:	f8cd 9000 	str.w	r9, [sp]
 80059bc:	47a0      	blx	r4
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 80059be:	f8d8 3c1c 	ldr.w	r3, [r8, #3100]	; 0xc1c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f43f af5b 	beq.w	800587e <_nx_arp_packet_receive+0x16a>
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 80059c8:	4631      	mov	r1, r6
 80059ca:	4640      	mov	r0, r8
 80059cc:	4798      	blx	r3
                return;
 80059ce:	e759      	b.n	8005884 <_nx_arp_packet_receive+0x170>
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 80059d0:	625d      	str	r5, [r3, #36]	; 0x24
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 80059d2:	4619      	mov	r1, r3
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 80059d4:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 80059d8:	4640      	mov	r0, r8
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 80059da:	62df      	str	r7, [r3, #44]	; 0x2c
            arp_ptr -> nx_arp_retries =  0;
 80059dc:	e9c3 2201 	strd	r2, r2, [r3, #4]
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 80059e0:	f000 f81c 	bl	8005a1c <_nx_arp_queue_send>
    if (consumed == NX_FALSE)
 80059e4:	f1bb 0f00 	cmp.w	fp, #0
 80059e8:	d0d0      	beq.n	800598c <_nx_arp_packet_receive+0x278>
 80059ea:	e74b      	b.n	8005884 <_nx_arp_packet_receive+0x170>
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 80059ec:	230a      	movs	r3, #10
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 80059ee:	4621      	mov	r1, r4
 80059f0:	463a      	mov	r2, r7
 80059f2:	4640      	mov	r0, r8
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 80059f4:	647b      	str	r3, [r7, #68]	; 0x44
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 80059f6:	f7fb fb3b 	bl	8001070 <_nx_arp_packet_send>
 80059fa:	e7d7      	b.n	80059ac <_nx_arp_packet_receive+0x298>
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	454b      	cmp	r3, r9
 8005a00:	d1d2      	bne.n	80059a8 <_nx_arp_packet_receive+0x294>
 8005a02:	e73c      	b.n	800587e <_nx_arp_packet_receive+0x16a>
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8005a04:	4293      	cmp	r3, r2
 8005a06:	f43f af4a 	beq.w	800589e <_nx_arp_packet_receive+0x18a>
    if (sender_ip_address != 0)
 8005a0a:	2c00      	cmp	r4, #0
 8005a0c:	f47f aeef 	bne.w	80057ee <_nx_arp_packet_receive+0xda>
 8005a10:	f04f 0b01 	mov.w	fp, #1
 8005a14:	e7ba      	b.n	800598c <_nx_arp_packet_receive+0x278>
 8005a16:	bf00      	nop
 8005a18:	ffff0000 	.word	0xffff0000

08005a1c <_nx_arp_queue_send>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8005a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a20:	b088      	sub	sp, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005a22:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005a26:	b672      	cpsid	i

    /* Disable interrupts before checking.  */
    TX_DISABLE

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 8005a28:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005a2a:	b10b      	cbz	r3, 8005a30 <_nx_arp_queue_send+0x14>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8005a2c:	2400      	movs	r4, #0
 8005a2e:	630c      	str	r4, [r1, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005a30:	f382 8810 	msr	PRIMASK, r2

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 8005a34:	b1cb      	cbz	r3, 8005a6a <_nx_arp_queue_send+0x4e>
 8005a36:	460c      	mov	r4, r1
 8005a38:	4680      	mov	r8, r0

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8005a3a:	2500      	movs	r5, #0

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8005a3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005a3e:	4668      	mov	r0, sp
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8005a40:	6a67      	ldr	r7, [r4, #36]	; 0x24
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8005a42:	6a51      	ldr	r1, [r2, #36]	; 0x24
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8005a44:	9702      	str	r7, [sp, #8]
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8005a46:	6a5f      	ldr	r7, [r3, #36]	; 0x24
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8005a48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8005a4a:	428f      	cmp	r7, r1
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8005a4c:	f8cd 8018 	str.w	r8, [sp, #24]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8005a50:	9603      	str	r6, [sp, #12]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8005a52:	9500      	str	r5, [sp, #0]
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 8005a54:	69de      	ldr	r6, [r3, #28]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 8005a56:	9304      	str	r3, [sp, #16]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8005a58:	61dd      	str	r5, [r3, #28]
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8005a5a:	635a      	str	r2, [r3, #52]	; 0x34
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005a5c:	9207      	str	r2, [sp, #28]
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8005a5e:	d807      	bhi.n	8005a70 <_nx_arp_queue_send+0x54>
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005a60:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005a62:	4798      	blx	r3
    while (queued_list_head)
 8005a64:	4633      	mov	r3, r6
 8005a66:	2e00      	cmp	r6, #0
 8005a68:	d1e8      	bne.n	8005a3c <_nx_arp_queue_send+0x20>
        }
    }
}
 8005a6a:	b008      	add	sp, #32
 8005a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ip_ptr -> nx_ip_fragment_processing)
 8005a70:	f8d8 27b4 	ldr.w	r2, [r8, #1972]	; 0x7b4
 8005a74:	b10a      	cbz	r2, 8005a7a <_nx_arp_queue_send+0x5e>
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8005a76:	4790      	blx	r2
 8005a78:	e7f4      	b.n	8005a64 <_nx_arp_queue_send+0x48>
                _nx_packet_transmit_release(packet_ptr);
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fd f9cc 	bl	8002e18 <_nx_packet_transmit_release>
 8005a80:	e7f0      	b.n	8005a64 <_nx_arp_queue_send+0x48>
 8005a82:	bf00      	nop

08005a84 <_nx_icmp_packet_process>:

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 8005a84:	f8d0 3888 	ldr.w	r3, [r0, #2184]	; 0x888
 8005a88:	b103      	cbz	r3, 8005a8c <_nx_icmp_packet_process+0x8>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 8005a8a:	4718      	bx	r3

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	f7fd b95d 	b.w	8002d4c <_nx_packet_release>
 8005a92:	bf00      	nop

08005a94 <_nx_icmpv4_send_error_message>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 8005a98:	2500      	movs	r5, #0
{
 8005a9a:	b089      	sub	sp, #36	; 0x24

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 8005a9c:	f8d0 4888 	ldr.w	r4, [r0, #2184]	; 0x888
ULONG            next_hop_address = NX_NULL;
 8005aa0:	9507      	str	r5, [sp, #28]
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 8005aa2:	2c00      	cmp	r4, #0
 8005aa4:	f000 80fa 	beq.w	8005c9c <_nx_icmpv4_send_error_message+0x208>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 8005aa8:	6b8d      	ldr	r5, [r1, #56]	; 0x38

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8005aaa:	692c      	ldr	r4, [r5, #16]
 8005aac:	1c66      	adds	r6, r4, #1
 8005aae:	f000 80f5 	beq.w	8005c9c <_nx_icmpv4_send_error_message+0x208>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8005ab2:	f004 4670 	and.w	r6, r4, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8005ab6:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8005aba:	f000 80ef 	beq.w	8005c9c <_nx_icmpv4_send_error_message+0x208>
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8005abe:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8005ac0:	e9d7 6706 	ldrd	r6, r7, [r7, #24]
 8005ac4:	ea04 0c06 	and.w	ip, r4, r6
 8005ac8:	45bc      	cmp	ip, r7
 8005aca:	f000 80ea 	beq.w	8005ca2 <_nx_icmpv4_send_error_message+0x20e>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8005ace:	686c      	ldr	r4, [r5, #4]
 8005ad0:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8005ad4:	2c00      	cmp	r4, #0
 8005ad6:	f040 80e1 	bne.w	8005c9c <_nx_icmpv4_send_error_message+0x208>
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 8005ada:	68ec      	ldr	r4, [r5, #12]
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8005adc:	fab4 f684 	clz	r6, r4
 8005ae0:	f104 4701 	add.w	r7, r4, #2164260864	; 0x81000000
 8005ae4:	0976      	lsrs	r6, r6, #5
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8005ae6:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005aea:	bf38      	it	cc
 8005aec:	f046 0601 	orrcc.w	r6, r6, #1
 8005af0:	2e00      	cmp	r6, #0
 8005af2:	f040 80d3 	bne.w	8005c9c <_nx_icmpv4_send_error_message+0x208>
 8005af6:	f1a4 3cff 	sub.w	ip, r4, #4294967295
 8005afa:	fabc fc8c 	clz	ip, ip
 8005afe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8005b02:	f1bc 0f00 	cmp.w	ip, #0
 8005b06:	f040 80c9 	bne.w	8005c9c <_nx_icmpv4_send_error_message+0x208>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8005b0a:	f004 4670 	and.w	r6, r4, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8005b0e:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8005b12:	f000 80c3 	beq.w	8005c9c <_nx_icmpv4_send_error_message+0x208>
 8005b16:	461e      	mov	r6, r3
 8005b18:	4617      	mov	r7, r2
 8005b1a:	468b      	mov	fp, r1
 8005b1c:	4680      	mov	r8, r0
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 8005b1e:	4663      	mov	r3, ip
 8005b20:	2224      	movs	r2, #36	; 0x24
 8005b22:	a906      	add	r1, sp, #24
 8005b24:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 8005b28:	f7fc fff8 	bl	8002b1c <_nx_packet_allocate>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f040 80b5 	bne.w	8005c9c <_nx_icmpv4_send_error_message+0x208>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8005b32:	9a06      	ldr	r2, [sp, #24]

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8005b34:	ea4f 6c17 	mov.w	ip, r7, lsr #24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8005b38:	0c39      	lsrs	r1, r7, #16
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8005b3a:	2304      	movs	r3, #4
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 8005b3c:	6897      	ldr	r7, [r2, #8]
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8005b3e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 8005b42:	0633      	lsls	r3, r6, #24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8005b44:	f887 c000 	strb.w	ip, [r7]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8005b48:	7079      	strb	r1, [r7, #1]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8005b4a:	ea43 4633 	orr.w	r6, r3, r3, ror #16

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 8005b4e:	78ed      	ldrb	r5, [r5, #3]
 8005b50:	1d39      	adds	r1, r7, #4
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8005b52:	0a36      	lsrs	r6, r6, #8
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 8005b54:	8078      	strh	r0, [r7, #2]
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 8005b56:	f005 050f 	and.w	r5, r5, #15
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8005b5a:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8005b5e:	ea86 2633 	eor.w	r6, r6, r3, ror #8
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 8005b62:	3502      	adds	r5, #2
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005b64:	9004      	str	r0, [sp, #16]
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8005b66:	607e      	str	r6, [r7, #4]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 8005b68:	00ad      	lsls	r5, r5, #2
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 8005b6a:	f105 0608 	add.w	r6, r5, #8
 8005b6e:	6256      	str	r6, [r2, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 8005b70:	eb07 0c06 	add.w	ip, r7, r6
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005b74:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8005b78:	68c3      	ldr	r3, [r0, #12]
 8005b7a:	e9d0 6a00 	ldrd	r6, sl, [r0]
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 8005b7e:	f8c2 c00c 	str.w	ip, [r2, #12]
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005b82:	ea86 4e36 	eor.w	lr, r6, r6, ror #16
 8005b86:	ea8a 4c3a 	eor.w	ip, sl, sl, ror #16
 8005b8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8005b8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8005b92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8005b96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8005b9a:	ea8e 2e36 	eor.w	lr, lr, r6, ror #8
 8005b9e:	ea89 4639 	eor.w	r6, r9, r9, ror #16
 8005ba2:	ea8c 2c3a 	eor.w	ip, ip, sl, ror #8
 8005ba6:	f8c0 e000 	str.w	lr, [r0]
 8005baa:	0a36      	lsrs	r6, r6, #8
 8005bac:	ea83 4e33 	eor.w	lr, r3, r3, ror #16
 8005bb0:	6903      	ldr	r3, [r0, #16]
 8005bb2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8005bb6:	f8c0 c004 	str.w	ip, [r0, #4]
 8005bba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8005bbe:	ea86 2639 	eor.w	r6, r6, r9, ror #8
 8005bc2:	ea83 4c33 	eor.w	ip, r3, r3, ror #16
 8005bc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8005bca:	68c3      	ldr	r3, [r0, #12]
 8005bcc:	6086      	str	r6, [r0, #8]
 8005bce:	ea4f 261c 	mov.w	r6, ip, lsr #8
 8005bd2:	ea8e 2e33 	eor.w	lr, lr, r3, ror #8
 8005bd6:	6903      	ldr	r3, [r0, #16]
 8005bd8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8005bdc:	f8c0 e00c 	str.w	lr, [r0, #12]
 8005be0:	ea86 2633 	eor.w	r6, r6, r3, ror #8
 8005be4:	4603      	mov	r3, r0
 8005be6:	6106      	str	r6, [r0, #16]

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
    {

        *dest_packet++ = *src_packet++;
 8005be8:	f853 6b04 	ldr.w	r6, [r3], #4
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8005bec:	3d04      	subs	r5, #4
        *dest_packet++ = *src_packet++;
 8005bee:	f841 6f04 	str.w	r6, [r1, #4]!
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8005bf2:	d1f9      	bne.n	8005be8 <_nx_icmpv4_send_error_message+0x154>
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005bf4:	6803      	ldr	r3, [r0, #0]
 8005bf6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8005bfa:	ea83 4633 	eor.w	r6, r3, r3, ror #16
        src_packet++;
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8005bfe:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005c02:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8005c06:	0a36      	lsrs	r6, r6, #8
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8005c08:	9304      	str	r3, [sp, #16]
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005c0a:	e9d0 a901 	ldrd	sl, r9, [r0, #4]
 8005c0e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8005c12:	ea8a 413a 	eor.w	r1, sl, sl, ror #16
 8005c16:	ea89 4339 	eor.w	r3, r9, r9, ror #16
 8005c1a:	0a09      	lsrs	r1, r1, #8
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8005c22:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8005c26:	9105      	str	r1, [sp, #20]
 8005c28:	6801      	ldr	r1, [r0, #0]
 8005c2a:	ea8b 2939 	eor.w	r9, fp, r9, ror #8
 8005c2e:	9b05      	ldr	r3, [sp, #20]
 8005c30:	ea86 2631 	eor.w	r6, r6, r1, ror #8
 8005c34:	f8c0 9008 	str.w	r9, [r0, #8]
 8005c38:	ea83 213a 	eor.w	r1, r3, sl, ror #8
 8005c3c:	6006      	str	r6, [r0, #0]
 8005c3e:	ea8c 463c 	eor.w	r6, ip, ip, ror #16
 8005c42:	ea8e 433e 	eor.w	r3, lr, lr, ror #16
 8005c46:	6041      	str	r1, [r0, #4]
 8005c48:	0a36      	lsrs	r6, r6, #8

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
 8005c4a:	4621      	mov	r1, r4
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8005c52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005c56:	ea86 263c 	eor.w	r6, r6, ip, ror #8
 8005c5a:	ea83 233e 	eor.w	r3, r3, lr, ror #8
 8005c5e:	6106      	str	r6, [r0, #16]
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8005c60:	9e04      	ldr	r6, [sp, #16]
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005c62:	60c3      	str	r3, [r0, #12]
    _nx_ip_route_find(ip_ptr, src_ip,
 8005c64:	ab07      	add	r3, sp, #28
 8005c66:	4640      	mov	r0, r8
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8005c68:	f842 6f34 	str.w	r6, [r2, #52]!
    _nx_ip_route_find(ip_ptr, src_ip,
 8005c6c:	f7fc fa94 	bl	8002198 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8005c70:	9906      	ldr	r1, [sp, #24]
 8005c72:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	065b      	lsls	r3, r3, #25
 8005c78:	d51a      	bpl.n	8005cb0 <_nx_icmpv4_send_error_message+0x21c>
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8005c7a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c80:	63cb      	str	r3, [r1, #60]	; 0x3c
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8005c82:	9d07      	ldr	r5, [sp, #28]
 8005c84:	2300      	movs	r3, #0
 8005c86:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8005c8a:	26ff      	movs	r6, #255	; 0xff
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	4640      	mov	r0, r8
 8005c90:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8005c94:	e9cd 6700 	strd	r6, r7, [sp]
 8005c98:	f7fc fa3e 	bl	8002118 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
}
 8005c9c:	b009      	add	sp, #36	; 0x24
 8005c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8005ca2:	ea6f 0c06 	mvn.w	ip, r6
         if_ptr -> nx_interface_ip_network) &&
 8005ca6:	ea3c 0404 	bics.w	r4, ip, r4
 8005caa:	f47f af10 	bne.w	8005ace <_nx_icmpv4_send_error_message+0x3a>
 8005cae:	e7f5      	b.n	8005c9c <_nx_icmpv4_send_error_message+0x208>
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8005cb0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005cb2:	462b      	mov	r3, r5
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	9500      	str	r5, [sp, #0]
 8005cb8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005cbc:	f7fc f882 	bl	8001dc4 <_nx_ip_checksum_compute>
        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 8005cc0:	43c3      	mvns	r3, r0
 8005cc2:	9906      	ldr	r1, [sp, #24]
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 8005cc4:	ba5b      	rev16	r3, r3
 8005cc6:	807b      	strh	r3, [r7, #2]
 8005cc8:	e7db      	b.n	8005c82 <_nx_icmpv4_send_error_message+0x1ee>
 8005cca:	bf00      	nop

08005ccc <_nx_icmpv6_perform_DAD>:
/**************************************************************************/

#ifndef NX_DISABLE_IPV6_DAD

VOID _nx_icmpv6_perform_DAD(NX_IP *ip_ptr)
{
 8005ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Go through all addresses bound to the IP instance. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {

        /* Check if this interface valid. */
        if (!ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head)
 8005cd0:	f8d0 4c68 	ldr.w	r4, [r0, #3176]	; 0xc68
{
 8005cd4:	b082      	sub	sp, #8
        if (!ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head)
 8005cd6:	b1d4      	cbz	r4, 8005d0e <_nx_icmpv6_perform_DAD+0x42>
 8005cd8:	4606      	mov	r6, r0
                {

                    /* So far we didn't get any conflict addresses back.
                       So promote the address to VALID */

                    nx_ipv6_address_next -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_VALID;
 8005cda:	f04f 0804 	mov.w	r8, #4
                    _nx_icmpv6_send_ns(ip_ptr,
 8005cde:	2700      	movs	r7, #0
 8005ce0:	e001      	b.n	8005ce6 <_nx_icmpv6_perform_DAD+0x1a>
             nx_ipv6_address_next = nx_ipv6_address_next -> nxd_ipv6_address_next)
 8005ce2:	69a4      	ldr	r4, [r4, #24]
        for (nx_ipv6_address_next = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8005ce4:	b19c      	cbz	r4, 8005d0e <_nx_icmpv6_perform_DAD+0x42>
            if (nx_ipv6_address_next -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_TENTATIVE)
 8005ce6:	78a3      	ldrb	r3, [r4, #2]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d1fa      	bne.n	8005ce2 <_nx_icmpv6_perform_DAD+0x16>
                if (nx_ipv6_address_next -> nxd_ipv6_address_DupAddrDetectTransmit)
 8005cec:	7f25      	ldrb	r5, [r4, #28]
                    _nx_icmpv6_send_ns(ip_ptr,
 8005cee:	4623      	mov	r3, r4
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f104 0108 	add.w	r1, r4, #8
                if (nx_ipv6_address_next -> nxd_ipv6_address_DupAddrDetectTransmit)
 8005cf8:	b165      	cbz	r5, 8005d14 <_nx_icmpv6_perform_DAD+0x48>
                    _nx_icmpv6_send_ns(ip_ptr,
 8005cfa:	e9cd 7700 	strd	r7, r7, [sp]
 8005cfe:	f000 f9c7 	bl	8006090 <_nx_icmpv6_send_ns>
                    nx_ipv6_address_next -> nxd_ipv6_address_DupAddrDetectTransmit--;
 8005d02:	7f23      	ldrb	r3, [r4, #28]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	7723      	strb	r3, [r4, #28]
             nx_ipv6_address_next = nx_ipv6_address_next -> nxd_ipv6_address_next)
 8005d08:	69a4      	ldr	r4, [r4, #24]
        for (nx_ipv6_address_next = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8005d0a:	2c00      	cmp	r4, #0
 8005d0c:	d1eb      	bne.n	8005ce6 <_nx_icmpv6_perform_DAD+0x1a>
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */
                }
            }
        }
    }
}
 8005d0e:	b002      	add	sp, #8
 8005d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    nx_ipv6_address_next -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_VALID;
 8005d14:	f884 8002 	strb.w	r8, [r4, #2]
                    _nx_icmpv6_DAD_clear_NDCache_entry(ip_ptr,
 8005d18:	f004 f902 	bl	8009f20 <_nx_icmpv6_DAD_clear_NDCache_entry>
 8005d1c:	e7e1      	b.n	8005ce2 <_nx_icmpv6_perform_DAD+0x16>
 8005d1e:	bf00      	nop

08005d20 <_nx_icmpv6_send_error_message>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv6 error message if ICMPv6 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 8005d24:	f8d0 488c 	ldr.w	r4, [r0, #2188]	; 0x88c
{
 8005d28:	b091      	sub	sp, #68	; 0x44
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 8005d2a:	b154      	cbz	r4, 8005d42 <_nx_icmpv6_send_error_message+0x22>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_source_ip);
 8005d2c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8005d2e:	4698      	mov	r8, r3
 8005d30:	9005      	str	r0, [sp, #20]
 8005d32:	4691      	mov	r9, r2
 8005d34:	f106 0708 	add.w	r7, r6, #8
 8005d38:	460d      	mov	r5, r1

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    dest_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_destination_ip);

    if (CHECK_UNSPECIFIED_ADDRESS(src_ip))
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	f7fc fe2c 	bl	8002998 <CHECK_UNSPECIFIED_ADDRESS>
 8005d40:	b110      	cbz	r0, 8005d48 <_nx_icmpv6_send_error_message+0x28>
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
                         pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
                         src_ip);

    return;
}
 8005d42:	b011      	add	sp, #68	; 0x44
 8005d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
 8005d48:	4603      	mov	r3, r0
 8005d4a:	9805      	ldr	r0, [sp, #20]
 8005d4c:	2238      	movs	r2, #56	; 0x38
 8005d4e:	a90f      	add	r1, sp, #60	; 0x3c
 8005d50:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 8005d54:	f7fc fee2 	bl	8002b1c <_nx_packet_allocate>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d1f2      	bne.n	8005d42 <_nx_icmpv6_send_error_message+0x22>
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < sizeof(NX_ICMPV6_ERROR))
 8005d5c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8005d60:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8005d64:	461a      	mov	r2, r3
 8005d66:	930a      	str	r3, [sp, #40]	; 0x28
 8005d68:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	2b07      	cmp	r3, #7
 8005d70:	f240 816c 	bls.w	800604c <_nx_icmpv6_send_error_message+0x32c>
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8005d74:	2306      	movs	r3, #6
 8005d76:	4611      	mov	r1, r2
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8005d78:	ea4f 6219 	mov.w	r2, r9, lsr #24
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8005d7c:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8005d80:	ea4f 4919 	mov.w	r9, r9, lsr #16
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 8005d84:	ea88 4338 	eor.w	r3, r8, r8, ror #16
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8005d88:	700a      	strb	r2, [r1, #0]
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8005d8a:	f881 9001 	strb.w	r9, [r1, #1]
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 8005d8e:	0a1b      	lsrs	r3, r3, #8
    bytes_to_copy = (UINT)(offending_packet -> nx_packet_append_ptr - offending_packet -> nx_packet_ip_header);
 8005d90:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005d92:	68e9      	ldr	r1, [r5, #12]
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 8005d94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    payload = pkt_ptr -> nx_packet_pool_owner -> nx_packet_pool_payload_size;
 8005d98:	f8dc 4000 	ldr.w	r4, [ip]
    bytes_to_copy = (UINT)(offending_packet -> nx_packet_append_ptr - offending_packet -> nx_packet_ip_header);
 8005d9c:	1a89      	subs	r1, r1, r2
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 8005d9e:	ea83 2338 	eor.w	r3, r3, r8, ror #8
    payload = pkt_ptr -> nx_packet_pool_owner -> nx_packet_pool_payload_size;
 8005da2:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
    if ((bytes_to_copy + sizeof(NX_ICMPV6_ERROR) + sizeof(NX_IPV6_HEADER)) >= NX_MINIMUM_IPV6_PATH_MTU)
 8005da6:	f101 0830 	add.w	r8, r1, #48	; 0x30
 8005daa:	910c      	str	r1, [sp, #48]	; 0x30
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum = 0;
 8005dac:	990a      	ldr	r1, [sp, #40]	; 0x28
        bytes_to_copy = (UINT)(NX_MINIMUM_IPV6_PATH_MTU - (sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR)));
 8005dae:	f5b8 6fa0 	cmp.w	r8, #1280	; 0x500
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum = 0;
 8005db2:	8048      	strh	r0, [r1, #2]
    if (((INT)(bytes_to_copy + sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR) + NX_PHYSICAL_HEADER) - (INT)payload) > 0)
 8005db4:	f1ce 0040 	rsb	r0, lr, #64	; 0x40
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 8005db8:	604b      	str	r3, [r1, #4]
        bytes_to_copy = (UINT)(NX_MINIMUM_IPV6_PATH_MTU - (sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR)));
 8005dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dbc:	bf28      	it	cs
 8005dbe:	f44f 639a 	movcs.w	r3, #1232	; 0x4d0
 8005dc2:	930c      	str	r3, [sp, #48]	; 0x30
    if (((INT)(bytes_to_copy + sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR) + NX_PHYSICAL_HEADER) - (INT)payload) > 0)
 8005dc4:	18c3      	adds	r3, r0, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dd02      	ble.n	8005dd0 <_nx_icmpv6_send_error_message+0xb0>
        bytes_to_copy = (UINT)(payload - (sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR) + NX_PHYSICAL_HEADER));
 8005dca:	f1ae 0340 	sub.w	r3, lr, #64	; 0x40
 8005dce:	930c      	str	r3, [sp, #48]	; 0x30
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV6_ERROR);
 8005dd0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005dd2:	f100 0308 	add.w	r3, r0, #8
 8005dd6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 8005dda:	18cb      	adds	r3, r1, r3
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005ddc:	68d0      	ldr	r0, [r2, #12]
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 8005dde:	f8cc 300c 	str.w	r3, [ip, #12]
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005de2:	6893      	ldr	r3, [r2, #8]
 8005de4:	9006      	str	r0, [sp, #24]
 8005de6:	4619      	mov	r1, r3
 8005de8:	6910      	ldr	r0, [r2, #16]
 8005dea:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8005dee:	910b      	str	r1, [sp, #44]	; 0x2c
 8005df0:	ea81 4831 	eor.w	r8, r1, r1, ror #16
 8005df4:	6951      	ldr	r1, [r2, #20]
 8005df6:	9007      	str	r0, [sp, #28]
 8005df8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8005dfc:	9108      	str	r1, [sp, #32]
 8005dfe:	6991      	ldr	r1, [r2, #24]
 8005e00:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8005e04:	9806      	ldr	r0, [sp, #24]
 8005e06:	9109      	str	r1, [sp, #36]	; 0x24
 8005e08:	ea80 4e30 	eor.w	lr, r0, r0, ror #16
 8005e0c:	6a10      	ldr	r0, [r2, #32]
 8005e0e:	e9d2 a400 	ldrd	sl, r4, [r2]
 8005e12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8005e16:	ea8a 433a 	eor.w	r3, sl, sl, ror #16
 8005e1a:	ea84 4934 	eor.w	r9, r4, r4, ror #16
 8005e1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005e2c:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8005e30:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8005e34:	9907      	ldr	r1, [sp, #28]
 8005e36:	ea89 2934 	eor.w	r9, r9, r4, ror #8
 8005e3a:	9c08      	ldr	r4, [sp, #32]
 8005e3c:	ea8c 2a3a 	eor.w	sl, ip, sl, ror #8
 8005e40:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8005e44:	ea81 4c31 	eor.w	ip, r1, r1, ror #16
 8005e48:	4649      	mov	r1, r9
 8005e4a:	ea84 4934 	eor.w	r9, r4, r4, ror #16
 8005e4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005e50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8005e54:	6051      	str	r1, [r2, #4]
 8005e56:	ea88 2834 	eor.w	r8, r8, r4, ror #8
 8005e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8005e60:	f8c2 a000 	str.w	sl, [r2]
 8005e64:	4644      	mov	r4, r8
 8005e66:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8005e6a:	ea4f 2819 	mov.w	r8, r9, lsr #8
 8005e6e:	6094      	str	r4, [r2, #8]
 8005e70:	ea81 4931 	eor.w	r9, r1, r1, ror #16
 8005e74:	9c06      	ldr	r4, [sp, #24]
 8005e76:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8005e7a:	9907      	ldr	r1, [sp, #28]
 8005e7c:	ea8e 2e34 	eor.w	lr, lr, r4, ror #8
 8005e80:	ea8c 2c31 	eor.w	ip, ip, r1, ror #8
 8005e84:	4674      	mov	r4, lr
 8005e86:	f8cd e018 	str.w	lr, [sp, #24]
 8005e8a:	ea4f 2e19 	mov.w	lr, r9, lsr #8
 8005e8e:	60d4      	str	r4, [r2, #12]
 8005e90:	4664      	mov	r4, ip
 8005e92:	f8cd c01c 	str.w	ip, [sp, #28]
 8005e96:	ea80 4c30 	eor.w	ip, r0, r0, ror #16
 8005e9a:	6114      	str	r4, [r2, #16]
 8005e9c:	ea8b 493b 	eor.w	r9, fp, fp, ror #16
 8005ea0:	9c08      	ldr	r4, [sp, #32]
 8005ea2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8005ea6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ea8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8005eac:	ea88 2434 	eor.w	r4, r8, r4, ror #8
 8005eb0:	ea4f 281c 	mov.w	r8, ip, lsr #8
 8005eb4:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8005eb8:	ea83 4c33 	eor.w	ip, r3, r3, ror #16
 8005ebc:	9408      	str	r4, [sp, #32]
 8005ebe:	6154      	str	r4, [r2, #20]
 8005ec0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8005ec4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8005ec8:	ea8e 2431 	eor.w	r4, lr, r1, ror #8
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 8005ecc:	990c      	ldr	r1, [sp, #48]	; 0x30
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005ece:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8005ed2:	ea89 2b3b 	eor.w	fp, r9, fp, ror #8
 8005ed6:	ea88 2030 	eor.w	r0, r8, r0, ror #8
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 8005eda:	2900      	cmp	r1, #0
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005edc:	ea8c 2333 	eor.w	r3, ip, r3, ror #8
 8005ee0:	9409      	str	r4, [sp, #36]	; 0x24
 8005ee2:	6194      	str	r4, [r2, #24]
 8005ee4:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005ee8:	e9c2 0308 	strd	r0, r3, [r2, #32]
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 8005eec:	dd20      	ble.n	8005f30 <_nx_icmpv6_send_error_message+0x210>
 8005eee:	1e4b      	subs	r3, r1, #1
 8005ef0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ef2:	9c05      	ldr	r4, [sp, #20]
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	1d08      	adds	r0, r1, #4
 8005efa:	4611      	mov	r1, r2
 8005efc:	3304      	adds	r3, #4
 8005efe:	4413      	add	r3, r2
 8005f00:	469c      	mov	ip, r3
        *dest_packet++ = *src_packet++;
 8005f02:	f851 3b04 	ldr.w	r3, [r1], #4
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 8005f06:	458c      	cmp	ip, r1
        *dest_packet++ = *src_packet++;
 8005f08:	f840 3f04 	str.w	r3, [r0, #4]!
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 8005f0c:	d1f9      	bne.n	8005f02 <_nx_icmpv6_send_error_message+0x1e2>
 8005f0e:	9405      	str	r4, [sp, #20]
 8005f10:	e9d2 a300 	ldrd	sl, r3, [r2]
 8005f14:	e9d2 b007 	ldrd	fp, r0, [r2, #28]
 8005f18:	930d      	str	r3, [sp, #52]	; 0x34
 8005f1a:	6893      	ldr	r3, [r2, #8]
 8005f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f1e:	68d3      	ldr	r3, [r2, #12]
 8005f20:	9306      	str	r3, [sp, #24]
 8005f22:	6913      	ldr	r3, [r2, #16]
 8005f24:	9307      	str	r3, [sp, #28]
 8005f26:	6953      	ldr	r3, [r2, #20]
 8005f28:	9308      	str	r3, [sp, #32]
 8005f2a:	6993      	ldr	r3, [r2, #24]
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    dest_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_destination_ip);
 8005f30:	f106 0418 	add.w	r4, r6, #24
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005f34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f36:	ea8a 4c3a 	eor.w	ip, sl, sl, ror #16
    dest_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_destination_ip);
 8005f3a:	940c      	str	r4, [sp, #48]	; 0x30
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005f3c:	ea81 4631 	eor.w	r6, r1, r1, ror #16
 8005f40:	9c06      	ldr	r4, [sp, #24]
 8005f42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8005f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f48:	0a36      	lsrs	r6, r6, #8
 8005f4a:	ea84 4e34 	eor.w	lr, r4, r4, ror #16
 8005f4e:	9c07      	ldr	r4, [sp, #28]
 8005f50:	ea81 4131 	eor.w	r1, r1, r1, ror #16
 8005f54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8005f58:	ea84 4934 	eor.w	r9, r4, r4, ror #16
 8005f5c:	9c08      	ldr	r4, [sp, #32]
 8005f5e:	ea8c 2c3a 	eor.w	ip, ip, sl, ror #8
 8005f62:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8005f66:	ea84 4834 	eor.w	r8, r4, r4, ror #16
 8005f6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005f6c:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8005f70:	f8c2 c000 	str.w	ip, [r2]
 8005f74:	ea84 4e34 	eor.w	lr, r4, r4, ror #16
 8005f78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005f7a:	0a09      	lsrs	r1, r1, #8
 8005f7c:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8005f80:	ea86 2634 	eor.w	r6, r6, r4, ror #8
 8005f84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005f86:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8005f8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8005f8e:	6056      	str	r6, [r2, #4]
 8005f90:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8005f94:	ea81 2134 	eor.w	r1, r1, r4, ror #8
 8005f98:	9c06      	ldr	r4, [sp, #24]
 8005f9a:	ea80 4630 	eor.w	r6, r0, r0, ror #16
 8005f9e:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8005fa2:	6091      	str	r1, [r2, #8]
 8005fa4:	ea8a 2a34 	eor.w	sl, sl, r4, ror #8
 8005fa8:	ea83 4133 	eor.w	r1, r3, r3, ror #16
 8005fac:	9c07      	ldr	r4, [sp, #28]
 8005fae:	ea8b 4c3b 	eor.w	ip, fp, fp, ror #16
 8005fb2:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8005fb6:	ea89 2934 	eor.w	r9, r9, r4, ror #8
 8005fba:	9c08      	ldr	r4, [sp, #32]
 8005fbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8005fc0:	f8c2 a00c 	str.w	sl, [r2, #12]
 8005fc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8005fc8:	f8c2 9010 	str.w	r9, [r2, #16]
 8005fcc:	0a36      	lsrs	r6, r6, #8
 8005fce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8005fd2:	0a09      	lsrs	r1, r1, #8
 8005fd4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8005fd8:	ea88 2834 	eor.w	r8, r8, r4, ror #8
 8005fdc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8005fe0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005fe2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8005fe6:	ea8c 2c3b 	eor.w	ip, ip, fp, ror #8
 8005fea:	f8c2 8014 	str.w	r8, [r2, #20]
 8005fee:	ea8e 2e34 	eor.w	lr, lr, r4, ror #8
 8005ff2:	ea86 2630 	eor.w	r6, r6, r0, ror #8
    if (IPv6_Address_Type(dest_ip) & IPV6_ADDRESS_MULTICAST)
 8005ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8005ff8:	ea81 2133 	eor.w	r1, r1, r3, ror #8
 8005ffc:	f8c2 e018 	str.w	lr, [r2, #24]
 8006000:	e9c2 c607 	strd	ip, r6, [r2, #28]
 8006004:	6251      	str	r1, [r2, #36]	; 0x24
    if (IPv6_Address_Type(dest_ip) & IPV6_ADDRESS_MULTICAST)
 8006006:	f7fc fcf5 	bl	80029f4 <IPv6_Address_Type>
 800600a:	0044      	lsls	r4, r0, #1
 800600c:	d422      	bmi.n	8006054 <_nx_icmpv6_send_error_message+0x334>
        pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = offending_packet -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800600e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006010:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006012:	634b      	str	r3, [r1, #52]	; 0x34
    if ((pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr == NX_NULL) ||
 8006014:	b113      	cbz	r3, 800601c <_nx_icmpv6_send_error_message+0x2fc>
 8006016:	789a      	ldrb	r2, [r3, #2]
 8006018:	2a04      	cmp	r2, #4
 800601a:	d003      	beq.n	8006024 <_nx_icmpv6_send_error_message+0x304>
        _nx_packet_release(pkt_ptr);
 800601c:	4608      	mov	r0, r1
 800601e:	f7fc fe95 	bl	8002d4c <_nx_packet_release>
        return;
 8006022:	e68e      	b.n	8005d42 <_nx_icmpv6_send_error_message+0x22>
    if (pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 8006024:	6858      	ldr	r0, [r3, #4]
 8006026:	3308      	adds	r3, #8
 8006028:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800602a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800602c:	0580      	lsls	r0, r0, #22
 800602e:	d520      	bpl.n	8006072 <_nx_icmpv6_send_error_message+0x352>
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
 8006030:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 8006032:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8006036:	63c8      	str	r0, [r1, #60]	; 0x3c
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
 8006038:	25ff      	movs	r5, #255	; 0xff
 800603a:	9805      	ldr	r0, [sp, #20]
 800603c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8006040:	9500      	str	r5, [sp, #0]
 8006042:	4613      	mov	r3, r2
 8006044:	223a      	movs	r2, #58	; 0x3a
 8006046:	f001 f987 	bl	8007358 <_nx_ipv6_packet_send>
    return;
 800604a:	e67a      	b.n	8005d42 <_nx_icmpv6_send_error_message+0x22>
        _nx_packet_release(pkt_ptr);
 800604c:	4660      	mov	r0, ip
 800604e:	f7fc fe7d 	bl	8002d4c <_nx_packet_release>
        return;
 8006052:	e676      	b.n	8005d42 <_nx_icmpv6_send_error_message+0x22>
                                     &pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr,
 8006054:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        if (_nxd_ipv6_interface_find(ip_ptr, dest_ip,
 8006056:	2300      	movs	r3, #0
 8006058:	990c      	ldr	r1, [sp, #48]	; 0x30
 800605a:	9805      	ldr	r0, [sp, #20]
 800605c:	3234      	adds	r2, #52	; 0x34
 800605e:	f003 fbe7 	bl	8009830 <_nxd_ipv6_interface_find>
 8006062:	b910      	cbnz	r0, 800606a <_nx_icmpv6_send_error_message+0x34a>
 8006064:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006066:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006068:	e7d4      	b.n	8006014 <_nx_icmpv6_send_error_message+0x2f4>
            _nx_packet_release(pkt_ptr);
 800606a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800606c:	f7fc fe6e 	bl	8002d4c <_nx_packet_release>
            return;
 8006070:	e667      	b.n	8005d42 <_nx_icmpv6_send_error_message+0x22>
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6,
 8006072:	4608      	mov	r0, r1
 8006074:	9700      	str	r7, [sp, #0]
 8006076:	213a      	movs	r1, #58	; 0x3a
 8006078:	f7fb fea4 	bl	8001dc4 <_nx_ip_checksum_compute>
 800607c:	990f      	ldr	r1, [sp, #60]	; 0x3c
        icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum = (USHORT)(~checksum);
 800607e:	43c0      	mvns	r0, r0
        NX_CHANGE_USHORT_ENDIAN(icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum);
 8006080:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006082:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006084:	ba40      	rev16	r0, r0
 8006086:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8006088:	3308      	adds	r3, #8
 800608a:	8060      	strh	r0, [r4, #2]
 800608c:	e7d4      	b.n	8006038 <_nx_icmpv6_send_error_message+0x318>
 800608e:	bf00      	nop

08006090 <_nx_icmpv6_send_ns>:
                        ULONG                 *neighbor_IP_address,
                        INT                    send_slla,
                        NXD_IPV6_ADDRESS      *outgoing_address,
                        INT                    sendUnicast,
                        ND_CACHE_ENTRY        *NDCacheEntry)
{
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	b093      	sub	sp, #76	; 0x4c
 8006096:	4606      	mov	r6, r0
 8006098:	460f      	mov	r7, r1
 800609a:	4692      	mov	sl, r2
 800609c:	461d      	mov	r5, r3
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
 800609e:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 80060a2:	a905      	add	r1, sp, #20
 80060a4:	2300      	movs	r3, #0
 80060a6:	2238      	movs	r2, #56	; 0x38
{
 80060a8:	e9dd 981c 	ldrd	r9, r8, [sp, #112]	; 0x70
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
 80060ac:	f7fc fd36 	bl	8002b1c <_nx_packet_allocate>
 80060b0:	b978      	cbnz	r0, 80060d2 <_nx_icmpv6_send_ns+0x42>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv6 packet. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 80060b2:	9805      	ldr	r0, [sp, #20]
 80060b4:	2306      	movs	r3, #6
 80060b6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30

    /* Setup the size of the ICMPv6 NS message */
    pkt_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND);

    /* Add 8 more bytes if sending source link layer address. */
    if (send_slla)
 80060ba:	f1ba 0f00 	cmp.w	sl, #0
 80060be:	d10b      	bne.n	80060d8 <_nx_icmpv6_send_ns+0x48>
    {
        pkt_ptr -> nx_packet_length += 8;
    }

    /* Check to see if the packet has enough room to fill with NS.  */
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 80060c0:	6884      	ldr	r4, [r0, #8]
    pkt_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND);
 80060c2:	2318      	movs	r3, #24
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 80060c4:	6942      	ldr	r2, [r0, #20]
    pkt_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND);
 80060c6:	6243      	str	r3, [r0, #36]	; 0x24
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 80060c8:	1b12      	subs	r2, r2, r4
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d20c      	bcs.n	80060e8 <_nx_icmpv6_send_ns+0x58>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(pkt_ptr);
 80060ce:	f7fc fe3d 	bl	8002d4c <_nx_packet_release>
    /* Driver entry must not be NULL. */
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry != NX_NULL);

    /* Send the IP packet out on the network via the attached driver.  */
    (outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
}
 80060d2:	b013      	add	sp, #76	; 0x4c
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pkt_ptr -> nx_packet_length += 8;
 80060d8:	2220      	movs	r2, #32
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 80060da:	6884      	ldr	r4, [r0, #8]
        pkt_ptr -> nx_packet_length += 8;
 80060dc:	4613      	mov	r3, r2
 80060de:	6242      	str	r2, [r0, #36]	; 0x24
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 80060e0:	6942      	ldr	r2, [r0, #20]
 80060e2:	1b12      	subs	r2, r2, r4
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d3f2      	bcc.n	80060ce <_nx_icmpv6_send_ns+0x3e>
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80060e8:	4423      	add	r3, r4
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_checksum = 0;
 80060ea:	2200      	movs	r2, #0
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 80060ec:	f104 0b08 	add.w	fp, r4, #8
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE;
 80060f0:	2187      	movs	r1, #135	; 0x87
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80060f2:	60c3      	str	r3, [r0, #12]
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 80060f4:	4638      	mov	r0, r7
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE;
 80060f6:	6021      	str	r1, [r4, #0]
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 80060f8:	4659      	mov	r1, fp
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_checksum = 0;
 80060fa:	6062      	str	r2, [r4, #4]
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 80060fc:	f7fc fc60 	bl	80029c0 <COPY_IPV6_ADDRESS>
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 8006100:	4658      	mov	r0, fp
 8006102:	f7fc fce1 	bl	8002ac8 <_nx_ipv6_address_change_endian>
        COPY_IPV6_ADDRESS(neighbor_IP_address, dest_address);
 8006106:	f10d 0b18 	add.w	fp, sp, #24
    if (sendUnicast)
 800610a:	f1b9 0f00 	cmp.w	r9, #0
 800610e:	d064      	beq.n	80061da <_nx_icmpv6_send_ns+0x14a>
        COPY_IPV6_ADDRESS(neighbor_IP_address, dest_address);
 8006110:	4638      	mov	r0, r7
 8006112:	4659      	mov	r1, fp
 8006114:	f7fc fc54 	bl	80029c0 <COPY_IPV6_ADDRESS>
    if (outgoing_address -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)
 8006118:	78ab      	ldrb	r3, [r5, #2]
    pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = outgoing_address;
 800611a:	9805      	ldr	r0, [sp, #20]
    if (outgoing_address -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)
 800611c:	2b04      	cmp	r3, #4
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached != NX_NULL);
 800611e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = outgoing_address;
 8006122:	6345      	str	r5, [r0, #52]	; 0x34
        src_address = outgoing_address -> nxd_ipv6_address;
 8006124:	bf0c      	ite	eq
 8006126:	f105 0708 	addeq.w	r7, r5, #8
        src_address = (ULONG *)_nx_ipv6_unspecified_address;
 800612a:	4f3b      	ldrne	r7, [pc, #236]	; (8006218 <_nx_icmpv6_send_ns+0x188>)
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached != NX_NULL);
 800612c:	f1bc 0f00 	cmp.w	ip, #0
 8006130:	d04a      	beq.n	80061c8 <_nx_icmpv6_send_ns+0x138>
    if (send_slla)  /* Need to send SLLA option */
 8006132:	f1ba 0f00 	cmp.w	sl, #0
 8006136:	d017      	beq.n	8006168 <_nx_icmpv6_send_ns+0xd8>
        nd_options -> nx_icmpv6_option_type = 1;
 8006138:	f240 1301 	movw	r3, #257	; 0x101
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800613c:	4937      	ldr	r1, [pc, #220]	; (800621c <_nx_icmpv6_send_ns+0x18c>)
        nd_options -> nx_icmpv6_option_type = 1;
 800613e:	8323      	strh	r3, [r4, #24]
        mac_addr[1] = (USHORT)((outgoing_address -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 8006140:	e9dc 3203 	ldrd	r3, r2, [ip, #12]
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8006144:	ea01 2e03 	and.w	lr, r1, r3, lsl #8
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8006148:	f3c2 2a07 	ubfx	sl, r2, #8, #8
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800614c:	f3c3 2307 	ubfx	r3, r3, #8, #8
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8006150:	ea01 2102 	and.w	r1, r1, r2, lsl #8
        mac_addr[1] = (USHORT)((outgoing_address -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 8006154:	0c12      	lsrs	r2, r2, #16
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8006156:	ea4e 0e03 	orr.w	lr, lr, r3
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 800615a:	ea41 010a 	orr.w	r1, r1, sl
        NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 800615e:	ba53      	rev16	r3, r2
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8006160:	f8a4 e01a 	strh.w	lr, [r4, #26]
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 8006164:	83e1      	strh	r1, [r4, #30]
        NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 8006166:	83a3      	strh	r3, [r4, #28]
    if (outgoing_address -> nxd_ipv6_address_attached -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 8006168:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
 800616c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800616e:	0592      	lsls	r2, r2, #22
 8006170:	d541      	bpl.n	80061f6 <_nx_icmpv6_send_ns+0x166>
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
 8006172:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006178:	63c2      	str	r2, [r0, #60]	; 0x3c
    if (_nx_ipv6_header_add(ip_ptr, &pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length,
 800617a:	2200      	movs	r2, #0
 800617c:	20ff      	movs	r0, #255	; 0xff
 800617e:	f8cd b008 	str.w	fp, [sp, #8]
 8006182:	a905      	add	r1, sp, #20
 8006184:	9203      	str	r2, [sp, #12]
 8006186:	223a      	movs	r2, #58	; 0x3a
 8006188:	9000      	str	r0, [sp, #0]
 800618a:	4630      	mov	r0, r6
 800618c:	9701      	str	r7, [sp, #4]
 800618e:	f001 f891 	bl	80072b4 <_nx_ipv6_header_add>
 8006192:	2800      	cmp	r0, #0
 8006194:	d19d      	bne.n	80060d2 <_nx_icmpv6_send_ns+0x42>
    driver_request.nx_ip_driver_interface            = outgoing_address -> nxd_ipv6_address_attached;
 8006196:	6869      	ldr	r1, [r5, #4]
    driver_request.nx_ip_driver_packet               = pkt_ptr;
 8006198:	9b05      	ldr	r3, [sp, #20]
    driver_request.nx_ip_driver_command              = NX_LINK_PACKET_SEND;
 800619a:	900a      	str	r0, [sp, #40]	; 0x28
    driver_request.nx_ip_driver_packet               = pkt_ptr;
 800619c:	930e      	str	r3, [sp, #56]	; 0x38
    driver_request.nx_ip_driver_ptr                  = ip_ptr;
 800619e:	e9cd 6110 	strd	r6, r1, [sp, #64]	; 0x40
    if (sendUnicast)
 80061a2:	f1b9 0f00 	cmp.w	r9, #0
 80061a6:	d033      	beq.n	8006210 <_nx_icmpv6_send_ns+0x180>
 80061a8:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 80061ac:	f8d8 2012 	ldr.w	r2, [r8, #18]
 80061b0:	ba5b      	rev16	r3, r3
 80061b2:	ba12      	rev	r2, r2
 80061b4:	b29b      	uxth	r3, r3
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry != NX_NULL);
 80061b6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80061b8:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 80061bc:	b191      	cbz	r1, 80061e4 <_nx_icmpv6_send_ns+0x154>
    (outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 80061be:	a80a      	add	r0, sp, #40	; 0x28
 80061c0:	4788      	blx	r1
}
 80061c2:	b013      	add	sp, #76	; 0x4c
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached != NX_NULL);
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295
 80061cc:	f007 fc36 	bl	800da3c <_tx_thread_sleep>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	f007 fc32 	bl	800da3c <_tx_thread_sleep>
 80061d8:	e7f6      	b.n	80061c8 <_nx_icmpv6_send_ns+0x138>
        SET_SOLICITED_NODE_MULTICAST_ADDRESS(dest_address, neighbor_IP_address);
 80061da:	4639      	mov	r1, r7
 80061dc:	4658      	mov	r0, fp
 80061de:	f7fc fbf9 	bl	80029d4 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
 80061e2:	e799      	b.n	8006118 <_nx_icmpv6_send_ns+0x88>
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry != NX_NULL);
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	f007 fc28 	bl	800da3c <_tx_thread_sleep>
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	f007 fc24 	bl	800da3c <_tx_thread_sleep>
 80061f4:	e7f6      	b.n	80061e4 <_nx_icmpv6_send_ns+0x154>
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6, (UINT)pkt_ptr -> nx_packet_length, src_address, dest_address);
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8cd b000 	str.w	fp, [sp]
 80061fc:	463b      	mov	r3, r7
 80061fe:	213a      	movs	r1, #58	; 0x3a
 8006200:	f7fb fde0 	bl	8001dc4 <_nx_ip_checksum_compute>
        checksum = (USHORT)(~checksum);
 8006204:	43c2      	mvns	r2, r0
 8006206:	9b05      	ldr	r3, [sp, #20]
        nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_checksum = checksum;
 8006208:	ba52      	rev16	r2, r2
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	8062      	strh	r2, [r4, #2]
 800620e:	e7b4      	b.n	800617a <_nx_icmpv6_send_ns+0xea>
        driver_request.nx_ip_driver_physical_address_lsw = dest_address[3];
 8006210:	9a09      	ldr	r2, [sp, #36]	; 0x24
        driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 8006212:	f243 3333 	movw	r3, #13107	; 0x3333
 8006216:	e7ce      	b.n	80061b6 <_nx_icmpv6_send_ns+0x126>
 8006218:	0800fc8c 	.word	0x0800fc8c
 800621c:	00ffff00 	.word	0x00ffff00

08006220 <_nx_icmpv6_send_rs>:
NX_ICMPV6_RS     *rs_ptr;
NX_ICMPV6_OPTION *rs_options;


    /* Do not send RS packet if ICMPv6 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 8006220:	f8d0 388c 	ldr.w	r3, [r0, #2188]	; 0x88c
{
 8006224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006228:	b087      	sub	sp, #28
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 800622a:	2b00      	cmp	r3, #0
 800622c:	d069      	beq.n	8006302 <_nx_icmpv6_send_rs+0xe2>
 800622e:	460c      	mov	r4, r1
 8006230:	4605      	mov	r5, r0
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &pkt_ptr, (NX_ICMP_PACKET + sizeof(NX_ICMPV6_RS) + 8), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 8006232:	2300      	movs	r3, #0
 8006234:	2248      	movs	r2, #72	; 0x48
 8006236:	a905      	add	r1, sp, #20
 8006238:	f8d0 0638 	ldr.w	r0, [r0, #1592]	; 0x638
 800623c:	f7fc fc6e 	bl	8002b1c <_nx_packet_allocate>
 8006240:	2800      	cmp	r0, #0
 8006242:	d15e      	bne.n	8006302 <_nx_icmpv6_send_rs+0xe2>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Find a valid IPv6 address. */
    if (_nxd_ipv6_interface_find(ip_ptr, (ULONG *)_nx_ipv6_all_router_address,
 8006244:	eb04 0484 	add.w	r4, r4, r4, lsl #2
                                 &pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr,
 8006248:	9a05      	ldr	r2, [sp, #20]
    if (_nxd_ipv6_interface_find(ip_ptr, (ULONG *)_nx_ipv6_all_router_address,
 800624a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8006338 <_nx_icmpv6_send_rs+0x118>
 800624e:	4628      	mov	r0, r5
 8006250:	0124      	lsls	r4, r4, #4
 8006252:	3234      	adds	r2, #52	; 0x34
 8006254:	4641      	mov	r1, r8
 8006256:	f604 4348 	addw	r3, r4, #3144	; 0xc48
 800625a:	442b      	add	r3, r5
 800625c:	f003 fae8 	bl	8009830 <_nxd_ipv6_interface_find>
 8006260:	4607      	mov	r7, r0
 8006262:	2800      	cmp	r0, #0
 8006264:	d162      	bne.n	800632c <_nx_icmpv6_send_rs+0x10c>
        _nx_packet_release(pkt_ptr);
        return(NX_NOT_SUCCESSFUL);
    }

    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8006266:	9905      	ldr	r1, [sp, #20]
    rs_options -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_SRC_LINK_ADDR;
    rs_options -> nx_icmpv6_option_length = 1;

    /* Fill in the source mac address. */
    mac_addr = &rs_options -> nx_icmpv6_option_data;
    mac_addr[0] = (USHORT)(ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_msw);
 8006268:	442c      	add	r4, r5
    rs_options -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_SRC_LINK_ADDR;
 800626a:	2301      	movs	r3, #1
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 800626c:	f04f 0c06 	mov.w	ip, #6
    pkt_ptr -> nx_packet_prepend_ptr -= pkt_ptr -> nx_packet_length;
 8006270:	688e      	ldr	r6, [r1, #8]
    pkt_ptr -> nx_packet_length = (sizeof(NX_ICMPV6_RS) + 8);
 8006272:	2210      	movs	r2, #16
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_type = NX_ICMPV6_ROUTER_SOLICITATION_TYPE;
 8006274:	2085      	movs	r0, #133	; 0x85
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8006276:	f881 c030 	strb.w	ip, [r1, #48]	; 0x30
    pkt_ptr -> nx_packet_prepend_ptr -= pkt_ptr -> nx_packet_length;
 800627a:	f1a6 0e10 	sub.w	lr, r6, #16
    pkt_ptr -> nx_packet_length = (sizeof(NX_ICMPV6_RS) + 8);
 800627e:	624a      	str	r2, [r1, #36]	; 0x24
    mac_addr[1] = (USHORT)((ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
    mac_addr[2] = (USHORT)(ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0x0000FFFF);

    /* Byte swapping. */
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 8006280:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800633c <_nx_icmpv6_send_rs+0x11c>
    pkt_ptr -> nx_packet_prepend_ptr -= pkt_ptr -> nx_packet_length;
 8006284:	f8c1 e008 	str.w	lr, [r1, #8]
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_code = 0;
 8006288:	f806 7c0f 	strb.w	r7, [r6, #-15]
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_type = NX_ICMPV6_ROUTER_SOLICITATION_TYPE;
 800628c:	f806 0c10 	strb.w	r0, [r6, #-16]
    rs_options -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_SRC_LINK_ADDR;
 8006290:	f806 3c08 	strb.w	r3, [r6, #-8]
    rs_options -> nx_icmpv6_option_length = 1;
 8006294:	f806 3c07 	strb.w	r3, [r6, #-7]
    mac_addr[0] = (USHORT)(ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_msw);
 8006298:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
    mac_addr[1] = (USHORT)((ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 800629c:	f8d4 0c58 	ldr.w	r0, [r4, #3160]	; 0xc58
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 80062a0:	ea0c 2e03 	and.w	lr, ip, r3, lsl #8
 80062a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 80062a8:	ea0c 2c00 	and.w	ip, ip, r0, lsl #8
 80062ac:	f3c0 2907 	ubfx	r9, r0, #8, #8
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 80062b0:	ea4e 0303 	orr.w	r3, lr, r3
    mac_addr[1] = (USHORT)((ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0xFFFF0000) >> 16);
 80062b4:	40d0      	lsrs	r0, r2
#ifdef NX_DISABLE_ICMPV6_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV6_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (ip_ptr -> nx_ip_interface[if_index].nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 80062b6:	f8d4 ec88 	ldr.w	lr, [r4, #3208]	; 0xc88
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 80062ba:	ea4c 0c09 	orr.w	ip, ip, r9
 80062be:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 80062c0:	ba40      	rev16	r0, r0
    if (ip_ptr -> nx_ip_interface[if_index].nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 80062c2:	f41e 7f00 	tst.w	lr, #512	; 0x200
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_checksum = 0;
 80062c6:	f826 7c0e 	strh.w	r7, [r6, #-14]
    rs_ptr -> nx_icmpv6_rs_reserved = 0;
 80062ca:	f846 7c0c 	str.w	r7, [r6, #-12]
 80062ce:	f104 0408 	add.w	r4, r4, #8
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 80062d2:	f826 3c06 	strh.w	r3, [r6, #-6]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]);
 80062d6:	f826 cc02 	strh.w	ip, [r6, #-2]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]);
 80062da:	f826 0c04 	strh.w	r0, [r6, #-4]
    if (ip_ptr -> nx_ip_interface[if_index].nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 80062de:	d015      	beq.n	800630c <_nx_icmpv6_send_rs+0xec>
        rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_checksum = checksum;
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
 80062e0:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 80062e2:	4613      	mov	r3, r2
 80062e4:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80062e8:	63c8      	str	r0, [r1, #60]	; 0x3c
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
 80062ea:	22ff      	movs	r2, #255	; 0xff
 80062ec:	4628      	mov	r0, r5
 80062ee:	9200      	str	r2, [sp, #0]
 80062f0:	223a      	movs	r2, #58	; 0x3a
 80062f2:	e9cd 4801 	strd	r4, r8, [sp, #4]
 80062f6:	f001 f82f 	bl	8007358 <_nx_ipv6_packet_send>
                         pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
                         (ULONG *)_nx_ipv6_all_router_address);

    return(NX_SUCCESS);
}
 80062fa:	4638      	mov	r0, r7
 80062fc:	b007      	add	sp, #28
 80062fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(NX_NOT_SUCCESSFUL);
 8006302:	2743      	movs	r7, #67	; 0x43
}
 8006304:	4638      	mov	r0, r7
 8006306:	b007      	add	sp, #28
 8006308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6,
 800630c:	4623      	mov	r3, r4
 800630e:	4608      	mov	r0, r1
 8006310:	f8cd 8000 	str.w	r8, [sp]
 8006314:	213a      	movs	r1, #58	; 0x3a
 8006316:	f7fb fd55 	bl	8001dc4 <_nx_ip_checksum_compute>
 800631a:	9905      	ldr	r1, [sp, #20]
        checksum = (USHORT)(~checksum);
 800631c:	43c0      	mvns	r0, r0
 800631e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
        rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_checksum = checksum;
 8006320:	ba40      	rev16	r0, r0
 8006322:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006324:	3408      	adds	r4, #8
 8006326:	f826 0c0e 	strh.w	r0, [r6, #-14]
 800632a:	e7de      	b.n	80062ea <_nx_icmpv6_send_rs+0xca>
        _nx_packet_release(pkt_ptr);
 800632c:	9805      	ldr	r0, [sp, #20]
        return(NX_NOT_SUCCESSFUL);
 800632e:	2743      	movs	r7, #67	; 0x43
        _nx_packet_release(pkt_ptr);
 8006330:	f7fc fd0c 	bl	8002d4c <_nx_packet_release>
        return(NX_NOT_SUCCESSFUL);
 8006334:	e7e6      	b.n	8006304 <_nx_icmpv6_send_rs+0xe4>
 8006336:	bf00      	nop
 8006338:	0800fc9c 	.word	0x0800fc9c
 800633c:	00ffff00 	.word	0x00ffff00

08006340 <_nx_igmp_multicast_check>:

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8006340:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <_nx_igmp_multicast_check+0xac>)
 8006342:	4299      	cmp	r1, r3
 8006344:	d021      	beq.n	800638a <_nx_igmp_multicast_check+0x4a>

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006346:	f8d0 37dc 	ldr.w	r3, [r0, #2012]	; 0x7dc
 800634a:	4299      	cmp	r1, r3
 800634c:	d019      	beq.n	8006382 <_nx_igmp_multicast_check+0x42>
 800634e:	f8d0 37f0 	ldr.w	r3, [r0, #2032]	; 0x7f0
 8006352:	4299      	cmp	r1, r3
 8006354:	d01b      	beq.n	800638e <_nx_igmp_multicast_check+0x4e>
 8006356:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800635a:	4299      	cmp	r1, r3
 800635c:	d01f      	beq.n	800639e <_nx_igmp_multicast_check+0x5e>
 800635e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006362:	4299      	cmp	r1, r3
 8006364:	d023      	beq.n	80063ae <_nx_igmp_multicast_check+0x6e>
 8006366:	f8d0 382c 	ldr.w	r3, [r0, #2092]	; 0x82c
 800636a:	4299      	cmp	r1, r3
 800636c:	d027      	beq.n	80063be <_nx_igmp_multicast_check+0x7e>
 800636e:	f8d0 3840 	ldr.w	r3, [r0, #2112]	; 0x840
 8006372:	4299      	cmp	r1, r3
 8006374:	d02b      	beq.n	80063ce <_nx_igmp_multicast_check+0x8e>
 8006376:	f8d0 3854 	ldr.w	r3, [r0, #2132]	; 0x854
 800637a:	428b      	cmp	r3, r1
 800637c:	d02f      	beq.n	80063de <_nx_igmp_multicast_check+0x9e>
            return(NX_TRUE);
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 800637e:	2000      	movs	r0, #0
}
 8006380:	4770      	bx	lr
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006382:	f8d0 37e0 	ldr.w	r3, [r0, #2016]	; 0x7e0
 8006386:	429a      	cmp	r2, r3
 8006388:	d1e1      	bne.n	800634e <_nx_igmp_multicast_check+0xe>
        return(NX_TRUE);
 800638a:	2001      	movs	r0, #1
 800638c:	4770      	bx	lr
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 800638e:	f8d0 37f4 	ldr.w	r3, [r0, #2036]	; 0x7f4
 8006392:	429a      	cmp	r2, r3
 8006394:	d0f9      	beq.n	800638a <_nx_igmp_multicast_check+0x4a>
 8006396:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800639a:	4299      	cmp	r1, r3
 800639c:	d1df      	bne.n	800635e <_nx_igmp_multicast_check+0x1e>
 800639e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d0f1      	beq.n	800638a <_nx_igmp_multicast_check+0x4a>
 80063a6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80063aa:	4299      	cmp	r1, r3
 80063ac:	d1db      	bne.n	8006366 <_nx_igmp_multicast_check+0x26>
 80063ae:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d0e9      	beq.n	800638a <_nx_igmp_multicast_check+0x4a>
 80063b6:	f8d0 382c 	ldr.w	r3, [r0, #2092]	; 0x82c
 80063ba:	4299      	cmp	r1, r3
 80063bc:	d1d7      	bne.n	800636e <_nx_igmp_multicast_check+0x2e>
 80063be:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d0e1      	beq.n	800638a <_nx_igmp_multicast_check+0x4a>
 80063c6:	f8d0 3840 	ldr.w	r3, [r0, #2112]	; 0x840
 80063ca:	4299      	cmp	r1, r3
 80063cc:	d1d3      	bne.n	8006376 <_nx_igmp_multicast_check+0x36>
 80063ce:	f8d0 3844 	ldr.w	r3, [r0, #2116]	; 0x844
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d0d9      	beq.n	800638a <_nx_igmp_multicast_check+0x4a>
 80063d6:	f8d0 3854 	ldr.w	r3, [r0, #2132]	; 0x854
 80063da:	428b      	cmp	r3, r1
 80063dc:	d1cf      	bne.n	800637e <_nx_igmp_multicast_check+0x3e>
 80063de:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    return(NX_FALSE);
 80063e2:	1a80      	subs	r0, r0, r2
 80063e4:	fab0 f080 	clz	r0, r0
 80063e8:	0940      	lsrs	r0, r0, #5
 80063ea:	4770      	bx	lr
 80063ec:	e0000001 	.word	0xe0000001

080063f0 <_nx_invalidate_destination_entry>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_invalidate_destination_entry(NX_IP *ip_ptr, ULONG *next_hop_ip)
{
 80063f0:	b570      	push	{r4, r5, r6, lr}

UINT i, table_size;

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 80063f2:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510

    /* Check if there have been any destinations in the table. */
    if (table_size == 0)
 80063f6:	2d00      	cmp	r5, #0
 80063f8:	f000 808d 	beq.w	8006516 <_nx_invalidate_destination_entry+0x126>
    /* Loop through the whole table to match the IP address. */
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
    {

        /* Skip over empty slots. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 80063fc:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8006400:	460e      	mov	r6, r1
 8006402:	4604      	mov	r4, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	f040 8087 	bne.w	8006518 <_nx_invalidate_destination_entry+0x128>
 800640a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800640e:	b183      	cbz	r3, 8006432 <_nx_invalidate_destination_entry+0x42>

        /* Keep track of valid entries we have checked. */
        table_size--;

        /* Match the supplied next hop with the table entry next hop. */
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006410:	4631      	mov	r1, r6
 8006412:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
        table_size--;
 8006416:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006418:	f7fc faa8 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800641c:	b138      	cbz	r0, 800642e <_nx_invalidate_destination_entry+0x3e>

            /* A matching entry is found.  Mark the entry as invalid. */
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;

            /* Decrease the count of available destinations. */
            ip_ptr -> nx_ipv6_destination_table_size--;
 800641e:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8006422:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006424:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8006426:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
            ip_ptr -> nx_ipv6_destination_table_size--;
 800642a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800642e:	2d00      	cmp	r5, #0
 8006430:	d071      	beq.n	8006516 <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8006432:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006436:	b183      	cbz	r3, 800645a <_nx_invalidate_destination_entry+0x6a>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006438:	4631      	mov	r1, r6
 800643a:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
        table_size--;
 800643e:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006440:	f7fc fa94 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 8006444:	b138      	cbz	r0, 8006456 <_nx_invalidate_destination_entry+0x66>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006446:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800644a:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800644c:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800644e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006452:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8006456:	2d00      	cmp	r5, #0
 8006458:	d05d      	beq.n	8006516 <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800645a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800645e:	b183      	cbz	r3, 8006482 <_nx_invalidate_destination_entry+0x92>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006460:	4631      	mov	r1, r6
 8006462:	f504 708e 	add.w	r0, r4, #284	; 0x11c
        table_size--;
 8006466:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006468:	f7fc fa80 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800646c:	b138      	cbz	r0, 800647e <_nx_invalidate_destination_entry+0x8e>
            ip_ptr -> nx_ipv6_destination_table_size--;
 800646e:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8006472:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006474:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8006476:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            ip_ptr -> nx_ipv6_destination_table_size--;
 800647a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800647e:	2d00      	cmp	r5, #0
 8006480:	d049      	beq.n	8006516 <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8006482:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8006486:	b17b      	cbz	r3, 80064a8 <_nx_invalidate_destination_entry+0xb8>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006488:	4631      	mov	r1, r6
 800648a:	f504 70a2 	add.w	r0, r4, #324	; 0x144
        table_size--;
 800648e:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006490:	f7fc fa6c 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 8006494:	b138      	cbz	r0, 80064a6 <_nx_invalidate_destination_entry+0xb6>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006496:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800649a:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800649c:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800649e:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
            ip_ptr -> nx_ipv6_destination_table_size--;
 80064a2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 80064a6:	b3b5      	cbz	r5, 8006516 <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 80064a8:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 80064ac:	b17b      	cbz	r3, 80064ce <_nx_invalidate_destination_entry+0xde>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 80064ae:	4631      	mov	r1, r6
 80064b0:	f504 70b6 	add.w	r0, r4, #364	; 0x16c
        table_size--;
 80064b4:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 80064b6:	f7fc fa59 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 80064ba:	b138      	cbz	r0, 80064cc <_nx_invalidate_destination_entry+0xdc>
            ip_ptr -> nx_ipv6_destination_table_size--;
 80064bc:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80064c0:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 80064c2:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80064c4:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
            ip_ptr -> nx_ipv6_destination_table_size--;
 80064c8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 80064cc:	b31d      	cbz	r5, 8006516 <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 80064ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064d2:	b17b      	cbz	r3, 80064f4 <_nx_invalidate_destination_entry+0x104>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 80064d4:	4631      	mov	r1, r6
 80064d6:	f504 70ca 	add.w	r0, r4, #404	; 0x194
 80064da:	f7fc fa47 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 80064de:	b138      	cbz	r0, 80064f0 <_nx_invalidate_destination_entry+0x100>
            ip_ptr -> nx_ipv6_destination_table_size--;
 80064e0:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80064e4:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 80064e6:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 80064e8:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
            ip_ptr -> nx_ipv6_destination_table_size--;
 80064ec:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 80064f0:	2d01      	cmp	r5, #1
 80064f2:	d010      	beq.n	8006516 <_nx_invalidate_destination_entry+0x126>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 80064f4:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 80064f8:	b16b      	cbz	r3, 8006516 <_nx_invalidate_destination_entry+0x126>
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 80064fa:	4631      	mov	r1, r6
 80064fc:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
 8006500:	f7fc fa34 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 8006504:	b138      	cbz	r0, 8006516 <_nx_invalidate_destination_entry+0x126>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006506:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800650a:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800650c:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800650e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006512:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        }
    }

    return;
}
 8006516:	bd70      	pop	{r4, r5, r6, pc}
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 8006518:	30a4      	adds	r0, #164	; 0xa4
        table_size--;
 800651a:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 800651c:	f7fc fa26 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 8006520:	b138      	cbz	r0, 8006532 <_nx_invalidate_destination_entry+0x142>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006522:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 8006526:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 8006528:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800652a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
            ip_ptr -> nx_ipv6_destination_table_size--;
 800652e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8006532:	2d00      	cmp	r5, #0
 8006534:	f47f af69 	bne.w	800640a <_nx_invalidate_destination_entry+0x1a>
}
 8006538:	bd70      	pop	{r4, r5, r6, pc}
 800653a:	bf00      	nop

0800653c <_nx_ip_deferred_link_status_process>:

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 800653c:	f8d0 3eec 	ldr.w	r3, [r0, #3820]	; 0xeec
 8006540:	b30b      	cbz	r3, 8006586 <_nx_ip_deferred_link_status_process+0x4a>
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8006542:	f890 3c4c 	ldrb.w	r3, [r0, #3148]	; 0xc4c
 8006546:	b11b      	cbz	r3, 8006550 <_nx_ip_deferred_link_status_process+0x14>
 8006548:	f890 3c50 	ldrb.w	r3, [r0, #3152]	; 0xc50
 800654c:	b90b      	cbnz	r3, 8006552 <_nx_ip_deferred_link_status_process+0x16>
 800654e:	4770      	bx	lr
 8006550:	4770      	bx	lr
{
 8006552:	b530      	push	{r4, r5, lr}
 8006554:	b08b      	sub	sp, #44	; 0x2c
 8006556:	4604      	mov	r4, r0
            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;

            driver_request.nx_ip_driver_ptr       = ip_ptr;
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8006558:	f600 4248 	addw	r2, r0, #3144	; 0xc48
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 800655c:	2500      	movs	r5, #0
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 800655e:	210a      	movs	r1, #10
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8006560:	ab01      	add	r3, sp, #4
            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8006562:	9008      	str	r0, [sp, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8006564:	a802      	add	r0, sp, #8
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8006566:	9102      	str	r1, [sp, #8]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8006568:	9209      	str	r2, [sp, #36]	; 0x24
            driver_request.nx_ip_driver_return_ptr = &link_up;
 800656a:	9307      	str	r3, [sp, #28]
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 800656c:	f884 5c50 	strb.w	r5, [r4, #3152]	; 0xc50
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8006570:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	; 0xc84
 8006574:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 8006576:	4629      	mov	r1, r5
 8006578:	f8d4 3eec 	ldr.w	r3, [r4, #3820]	; 0xeec
 800657c:	4620      	mov	r0, r4
 800657e:	9a01      	ldr	r2, [sp, #4]
 8006580:	4798      	blx	r3
        }
    }
}
 8006582:	b00b      	add	sp, #44	; 0x2c
 8006584:	bd30      	pop	{r4, r5, pc}
 8006586:	4770      	bx	lr

08006588 <_nx_ip_dispatch_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 8006588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	460c      	mov	r4, r1
 800658e:	4606      	mov	r6, r0


    /* Initialize local variables. */
    drop_packet = 0;
#ifdef FEATURE_NX_IPV6
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
 8006590:	2728      	movs	r7, #40	; 0x28
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8006592:	f8d1 a034 	ldr.w	sl, [r1, #52]	; 0x34

                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_1;
                }
                else
                {
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 8006596:	f04f 0905 	mov.w	r9, #5
 800659a:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_1;
 800659c:	f04f 0802 	mov.w	r8, #2
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 80065a0:	462b      	mov	r3, r5
        switch (protocol)
 80065a2:	2a3c      	cmp	r2, #60	; 0x3c
 80065a4:	f200 808e 	bhi.w	80066c4 <_nx_ip_dispatch_process+0x13c>
 80065a8:	e8df f002 	tbb	[pc, r2]
 80065ac:	8c8c8c4b 	.word	0x8c8c8c4b
 80065b0:	8c8c8c8c 	.word	0x8c8c8c8c
 80065b4:	8c8c8c8c 	.word	0x8c8c8c8c
 80065b8:	8c8c8c8c 	.word	0x8c8c8c8c
 80065bc:	8c8c8c8c 	.word	0x8c8c8c8c
 80065c0:	8c8c8c8c 	.word	0x8c8c8c8c
 80065c4:	8c8c8c8c 	.word	0x8c8c8c8c
 80065c8:	8c8c8c8c 	.word	0x8c8c8c8c
 80065cc:	8c8c8c8c 	.word	0x8c8c8c8c
 80065d0:	8c8c8c8c 	.word	0x8c8c8c8c
 80065d4:	668c8c8c 	.word	0x668c8c8c
 80065d8:	8c8c8c79 	.word	0x8c8c8c79
 80065dc:	48488c8c 	.word	0x48488c8c
 80065e0:	8c8c8c8c 	.word	0x8c8c8c8c
 80065e4:	488c8c8c 	.word	0x488c8c8c
 80065e8:	1f          	.byte	0x1f
 80065e9:	00          	.byte	0x00
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 80065ea:	f240 2505 	movw	r5, #517	; 0x205
            if (packet_ptr -> nx_packet_destination_header == 1)
 80065ee:	f894 b02d 	ldrb.w	fp, [r4, #45]	; 0x2d
 80065f2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80065f6:	f10b 0201 	add.w	r2, fp, #1
 80065fa:	f1bb 0f01 	cmp.w	fp, #1
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	f000 8097 	beq.w	8006732 <_nx_ip_dispatch_process+0x1aa>
                if (packet_ptr -> nx_packet_option_state < (UCHAR)ROUTING_HEADER)
 8006604:	2902      	cmp	r1, #2
                }
            }

            packet_ptr -> nx_packet_destination_header++;
 8006606:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_1;
 800660a:	bf94      	ite	ls
 800660c:	f884 802c 	strbls.w	r8, [r4, #44]	; 0x2c
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 8006610:	f884 902c 	strbhi.w	r9, [r4, #44]	; 0x2c

            if (!drop_packet)
            {
                /* Proceed with hop by hop handling if there are no errors. */
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8006614:	4621      	mov	r1, r4
 8006616:	4630      	mov	r0, r6
 8006618:	f001 f870 	bl	80076fc <_nx_ipv6_process_hop_by_hop_option>
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 800661c:	b978      	cbnz	r0, 800663e <_nx_ip_dispatch_process+0xb6>
                continue;
            }
#endif  /* NX_IPSEC_ENABLE */

#ifdef FEATURE_NX_IPV6
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 800661e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006622:	2b06      	cmp	r3, #6
 8006624:	f040 80a3 	bne.w	800676e <_nx_ip_dispatch_process+0x1e6>
            {

                /* Find the option we just processed. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                option = (NX_IPV6_HEADER_OPTION *)packet_ptr -> nx_packet_prepend_ptr;
 8006628:	68a1      	ldr	r1, [r4, #8]
                else
                {

                    /* Compute the current option length. */
                    /* For other IPv6 optional headers, hdr_ext_len is expressed in 64-bit words. */
                    option_hdr_len = (ULONG)((option -> nx_ipv6_header_option_ext_length + 1) << 3);
 800662a:	784b      	ldrb	r3, [r1, #1]
 800662c:	3301      	adds	r3, #1
 800662e:	00db      	lsls	r3, r3, #3
                }

                /* Obtain the next option header type. */
                protocol = option -> nx_ipv6_header_option_next_header;

                if (((ALIGN_TYPE)(packet_ptr -> nx_packet_prepend_ptr) + option_hdr_len) <
 8006630:	18c8      	adds	r0, r1, r3
 8006632:	68e2      	ldr	r2, [r4, #12]
 8006634:	b2bd      	uxth	r5, r7
 8006636:	4282      	cmp	r2, r0
 8006638:	d861      	bhi.n	80066fe <_nx_ip_dispatch_process+0x176>
                /*
                   Advance the nx_packet_option_offset as well.
                   Option Offset is used when constructing ICMPv6 parameter problem message.
                 */

                packet_ptr -> nx_packet_option_offset = (USHORT)next_option_offset;
 800663a:	85e5      	strh	r5, [r4, #46]	; 0x2e
                    drop_packet = 1;
 800663c:	2001      	movs	r0, #1
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
}
 800663e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 8006642:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
                packet_ptr -> nx_packet_option_state = (UCHAR)HOP_BY_HOP_HEADER;
 8006646:	2501      	movs	r5, #1
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8006648:	4621      	mov	r1, r4
 800664a:	4630      	mov	r0, r6
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 800664c:	b982      	cbnz	r2, 8006670 <_nx_ip_dispatch_process+0xe8>
                packet_ptr -> nx_packet_option_state = (UCHAR)HOP_BY_HOP_HEADER;
 800664e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8006652:	f001 f853 	bl	80076fc <_nx_ipv6_process_hop_by_hop_option>
        if (!drop_packet)
 8006656:	2800      	cmp	r0, #0
 8006658:	d1f1      	bne.n	800663e <_nx_ip_dispatch_process+0xb6>
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 800665a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800665e:	2b06      	cmp	r3, #6
 8006660:	d0e2      	beq.n	8006628 <_nx_ip_dispatch_process+0xa0>
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 8006662:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 8006666:	4621      	mov	r1, r4
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 8006668:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 800666a:	4630      	mov	r0, r6
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 800666c:	2a00      	cmp	r2, #0
 800666e:	d0ee      	beq.n	800664e <_nx_ip_dispatch_process+0xc6>
                    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 8006670:	4a54      	ldr	r2, [pc, #336]	; (80067c4 <_nx_ip_dispatch_process+0x23c>)
 8006672:	f7ff fb55 	bl	8005d20 <_nx_icmpv6_send_error_message>
 8006676:	e7e1      	b.n	800663c <_nx_ip_dispatch_process+0xb4>
                packet_ptr -> nx_packet_option_state = (UCHAR)ROUTING_HEADER;
 8006678:	2503      	movs	r5, #3
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)ROUTING_HEADER)
 800667a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_routing_option(ip_ptr, packet_ptr);
 800667e:	4621      	mov	r1, r4
 8006680:	4630      	mov	r0, r6
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)ROUTING_HEADER)
 8006682:	2a02      	cmp	r2, #2
 8006684:	d8f4      	bhi.n	8006670 <_nx_ip_dispatch_process+0xe8>
                packet_ptr -> nx_packet_option_state = (UCHAR)ROUTING_HEADER;
 8006686:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_routing_option(ip_ptr, packet_ptr);
 800668a:	f001 f873 	bl	8007774 <_nx_ipv6_process_routing_option>
        if (!drop_packet)
 800668e:	2800      	cmp	r0, #0
 8006690:	d1d5      	bne.n	800663e <_nx_ip_dispatch_process+0xb6>
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8006692:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006696:	2b06      	cmp	r3, #6
 8006698:	d0c6      	beq.n	8006628 <_nx_ip_dispatch_process+0xa0>
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 800669a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800669c:	e7ed      	b.n	800667a <_nx_ip_dispatch_process+0xf2>
                packet_ptr -> nx_packet_option_state = (UCHAR)FRAGMENT_HEADER;
 800669e:	2504      	movs	r5, #4
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)FRAGMENT_HEADER)
 80066a0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
                    drop_packet = _nx_ipv6_process_fragment_option(ip_ptr, packet_ptr);
 80066a4:	4621      	mov	r1, r4
 80066a6:	4630      	mov	r0, r6
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)FRAGMENT_HEADER)
 80066a8:	2a03      	cmp	r2, #3
 80066aa:	d8e1      	bhi.n	8006670 <_nx_ip_dispatch_process+0xe8>
                packet_ptr -> nx_packet_option_state = (UCHAR)FRAGMENT_HEADER;
 80066ac:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                    drop_packet = _nx_ipv6_process_fragment_option(ip_ptr, packet_ptr);
 80066b0:	f000 ffc0 	bl	8007634 <_nx_ipv6_process_fragment_option>
                if (drop_packet != NX_CONTINUE)
 80066b4:	2855      	cmp	r0, #85	; 0x55
 80066b6:	d1c2      	bne.n	800663e <_nx_ip_dispatch_process+0xb6>
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 80066b8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80066bc:	2b06      	cmp	r3, #6
 80066be:	d06b      	beq.n	8006798 <_nx_ip_dispatch_process+0x210>
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 80066c0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80066c2:	e7ed      	b.n	80066a0 <_nx_ip_dispatch_process+0x118>
            if (protocol == NX_PROTOCOL_TCP)
 80066c4:	2a06      	cmp	r2, #6
 80066c6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80066ca:	d021      	beq.n	8006710 <_nx_ip_dispatch_process+0x188>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 80066cc:	2b06      	cmp	r3, #6
 80066ce:	d03f      	beq.n	8006750 <_nx_ip_dispatch_process+0x1c8>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d04e      	beq.n	8006772 <_nx_ip_dispatch_process+0x1ea>
            else if (protocol == NX_PROTOCOL_UDP)
 80066d4:	2a11      	cmp	r2, #17
 80066d6:	d0b1      	beq.n	800663c <_nx_ip_dispatch_process+0xb4>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 80066d8:	f8d6 767c 	ldr.w	r7, [r6, #1660]	; 0x67c
 80066dc:	b14f      	cbz	r7, 80066f2 <_nx_ip_dispatch_process+0x16a>
                    if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 80066de:	0411      	lsls	r1, r2, #16
 80066e0:	4630      	mov	r0, r6
 80066e2:	4622      	mov	r2, r4
 80066e4:	47b8      	blx	r7
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d0a9      	beq.n	800663e <_nx_ip_dispatch_process+0xb6>
 80066ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d049      	beq.n	8006786 <_nx_ip_dispatch_process+0x1fe>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 80066f2:	2b06      	cmp	r3, #6
 80066f4:	d1a2      	bne.n	800663c <_nx_ip_dispatch_process+0xb4>
                    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 80066f6:	462b      	mov	r3, r5
 80066f8:	4621      	mov	r1, r4
 80066fa:	4630      	mov	r0, r6
 80066fc:	e7b8      	b.n	8006670 <_nx_ip_dispatch_process+0xe8>
                    packet_ptr -> nx_packet_length      -= option_hdr_len;
 80066fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
                next_option_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 8006700:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                    packet_ptr -> nx_packet_length      -= option_hdr_len;
 8006702:	1ad3      	subs	r3, r2, r3
                protocol = option -> nx_ipv6_header_option_next_header;
 8006704:	780a      	ldrb	r2, [r1, #0]
                next_option_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 8006706:	1bc7      	subs	r7, r0, r7
                    packet_ptr -> nx_packet_prepend_ptr += option_hdr_len;
 8006708:	60a0      	str	r0, [r4, #8]
                packet_ptr -> nx_packet_option_offset = (USHORT)next_option_offset;
 800670a:	85e5      	strh	r5, [r4, #46]	; 0x2e
                    packet_ptr -> nx_packet_length      -= option_hdr_len;
 800670c:	6263      	str	r3, [r4, #36]	; 0x24
 800670e:	e747      	b.n	80065a0 <_nx_ip_dispatch_process+0x18>
                if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) ||
 8006710:	2b04      	cmp	r3, #4
 8006712:	d005      	beq.n	8006720 <_nx_ip_dispatch_process+0x198>
 8006714:	2b06      	cmp	r3, #6
 8006716:	d191      	bne.n	800663c <_nx_ip_dispatch_process+0xb4>
                    ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 8006718:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800671c:	2b04      	cmp	r3, #4
 800671e:	d18d      	bne.n	800663c <_nx_ip_dispatch_process+0xb4>
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8006720:	f8d6 39bc 	ldr.w	r3, [r6, #2492]	; 0x9bc
 8006724:	2b00      	cmp	r3, #0
 8006726:	d089      	beq.n	800663c <_nx_ip_dispatch_process+0xb4>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8006728:	4630      	mov	r0, r6
 800672a:	4621      	mov	r1, r4
 800672c:	4798      	blx	r3
                        return(0);
 800672e:	2000      	movs	r0, #0
 8006730:	e785      	b.n	800663e <_nx_ip_dispatch_process+0xb6>
                if (packet_ptr -> nx_packet_option_state < (UCHAR)DESTINATION_HEADER_1)
 8006732:	2901      	cmp	r1, #1
 8006734:	d901      	bls.n	800673a <_nx_ip_dispatch_process+0x1b2>
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 8006736:	85a5      	strh	r5, [r4, #44]	; 0x2c
 8006738:	e76c      	b.n	8006614 <_nx_ip_dispatch_process+0x8c>
            packet_ptr -> nx_packet_destination_header++;
 800673a:	2202      	movs	r2, #2
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 800673c:	4630      	mov	r0, r6
 800673e:	4621      	mov	r1, r4
            packet_ptr -> nx_packet_destination_header++;
 8006740:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 8006744:	4a1f      	ldr	r2, [pc, #124]	; (80067c4 <_nx_ip_dispatch_process+0x23c>)
 8006746:	f7ff faeb 	bl	8005d20 <_nx_icmpv6_send_error_message>
 800674a:	4658      	mov	r0, fp
}
 800674c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 8006750:	2a3a      	cmp	r2, #58	; 0x3a
 8006752:	d024      	beq.n	800679e <_nx_ip_dispatch_process+0x216>
            else if (protocol == NX_PROTOCOL_UDP)
 8006754:	2a11      	cmp	r2, #17
 8006756:	d1bf      	bne.n	80066d8 <_nx_ip_dispatch_process+0x150>
                    ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 8006758:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800675c:	2b04      	cmp	r3, #4
 800675e:	f47f af6d 	bne.w	800663c <_nx_ip_dispatch_process+0xb4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 8006762:	f8d6 3930 	ldr.w	r3, [r6, #2352]	; 0x930
 8006766:	2b00      	cmp	r3, #0
 8006768:	f43f af68 	beq.w	800663c <_nx_ip_dispatch_process+0xb4>
 800676c:	e7dc      	b.n	8006728 <_nx_ip_dispatch_process+0x1a0>
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 800676e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006770:	e73d      	b.n	80065ee <_nx_ip_dispatch_process+0x66>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8006772:	2a01      	cmp	r2, #1
 8006774:	d019      	beq.n	80067aa <_nx_ip_dispatch_process+0x222>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8006776:	2a02      	cmp	r2, #2
 8006778:	d01d      	beq.n	80067b6 <_nx_ip_dispatch_process+0x22e>
            else if (protocol == NX_PROTOCOL_UDP)
 800677a:	2a11      	cmp	r2, #17
 800677c:	d0f1      	beq.n	8006762 <_nx_ip_dispatch_process+0x1da>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 800677e:	f8d6 767c 	ldr.w	r7, [r6, #1660]	; 0x67c
 8006782:	2f00      	cmp	r7, #0
 8006784:	d1ab      	bne.n	80066de <_nx_ip_dispatch_process+0x156>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 8006786:	2300      	movs	r3, #0
 8006788:	4a0f      	ldr	r2, [pc, #60]	; (80067c8 <_nx_ip_dispatch_process+0x240>)
 800678a:	4621      	mov	r1, r4
 800678c:	4630      	mov	r0, r6
 800678e:	f7ff f981 	bl	8005a94 <_nx_icmpv4_send_error_message>
 8006792:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006796:	e7ac      	b.n	80066f2 <_nx_ip_dispatch_process+0x16a>
                option = (NX_IPV6_HEADER_OPTION *)packet_ptr -> nx_packet_prepend_ptr;
 8006798:	68a1      	ldr	r1, [r4, #8]
                    option_hdr_len = sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800679a:	2308      	movs	r3, #8
 800679c:	e748      	b.n	8006630 <_nx_ip_dispatch_process+0xa8>
                if (ip_ptr -> nx_ip_icmpv6_packet_process != NX_NULL)
 800679e:	f8d6 388c 	ldr.w	r3, [r6, #2188]	; 0x88c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f43f af4a 	beq.w	800663c <_nx_ip_dispatch_process+0xb4>
 80067a8:	e7be      	b.n	8006728 <_nx_ip_dispatch_process+0x1a0>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 80067aa:	f8d6 3880 	ldr.w	r3, [r6, #2176]	; 0x880
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f43f af44 	beq.w	800663c <_nx_ip_dispatch_process+0xb4>
 80067b4:	e7b8      	b.n	8006728 <_nx_ip_dispatch_process+0x1a0>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 80067b6:	f8d6 386c 	ldr.w	r3, [r6, #2156]	; 0x86c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f43f af3e 	beq.w	800663c <_nx_ip_dispatch_process+0xb4>
 80067c0:	e7b2      	b.n	8006728 <_nx_ip_dispatch_process+0x1a0>
 80067c2:	bf00      	nop
 80067c4:	04010000 	.word	0x04010000
 80067c8:	03020000 	.word	0x03020000

080067cc <_nx_ip_driver_packet_send>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 80067cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d0:	460d      	mov	r5, r1
 80067d2:	b08a      	sub	sp, #40	; 0x28
 80067d4:	4604      	mov	r4, r0
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
    driver_request.nx_ip_driver_packet =                packet_ptr;
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80067d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 80067d8:	2000      	movs	r0, #0
{
 80067da:	461e      	mov	r6, r3
    driver_request.nx_ip_driver_packet =                packet_ptr;
 80067dc:	9506      	str	r5, [sp, #24]
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 80067de:	9002      	str	r0, [sp, #8]
{
 80067e0:	9f10      	ldr	r7, [sp, #64]	; 0x40
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80067e2:	e9cd 4108 	strd	r4, r1, [sp, #32]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 80067e6:	794b      	ldrb	r3, [r1, #5]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d05a      	beq.n	80068a2 <_nx_ip_driver_packet_send+0xd6>
        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80067ec:	1c53      	adds	r3, r2, #1
 80067ee:	f000 8098 	beq.w	8006922 <_nx_ip_driver_packet_send+0x156>
 80067f2:	e9d1 3006 	ldrd	r3, r0, [r1, #24]
            (((destination_ip & network_mask) == network) &&
 80067f6:	ea02 0c03 	and.w	ip, r2, r3
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80067fa:	4584      	cmp	ip, r0
 80067fc:	f000 808d 	beq.w	800691a <_nx_ip_driver_packet_send+0x14e>
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 8006800:	694b      	ldr	r3, [r1, #20]
 8006802:	4293      	cmp	r3, r2
 8006804:	d052      	beq.n	80068ac <_nx_ip_driver_packet_send+0xe0>
        {
            loopback = NX_TRUE;
            driver_request.nx_ip_driver_interface = NX_NULL;
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 8006806:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
 800680a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800680e:	f000 80a4 	beq.w	800695a <_nx_ip_driver_packet_send+0x18e>

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8006812:	eb07 2017 	add.w	r0, r7, r7, lsr #8
 8006816:	f000 001f 	and.w	r0, r0, #31
 800681a:	eb04 0880 	add.w	r8, r4, r0, lsl #2

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800681e:	f8d8 3b78 	ldr.w	r3, [r8, #2936]	; 0xb78

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 8006822:	b193      	cbz	r3, 800684a <_nx_ip_driver_packet_send+0x7e>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	4297      	cmp	r7, r2
 8006828:	f000 8084 	beq.w	8006934 <_nx_ip_driver_packet_send+0x168>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 800682c:	f8d3 c014 	ldr.w	ip, [r3, #20]

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8006830:	4563      	cmp	r3, ip
 8006832:	d00a      	beq.n	800684a <_nx_ip_driver_packet_send+0x7e>
            while (arp_ptr)
 8006834:	f1bc 0f00 	cmp.w	ip, #0
 8006838:	d007      	beq.n	800684a <_nx_ip_driver_packet_send+0x7e>
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 800683a:	f8dc 2020 	ldr.w	r2, [ip, #32]
 800683e:	42ba      	cmp	r2, r7
 8006840:	d079      	beq.n	8006936 <_nx_ip_driver_packet_send+0x16a>
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 8006842:	f8dc c014 	ldr.w	ip, [ip, #20]
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8006846:	4563      	cmp	r3, ip
 8006848:	d1f4      	bne.n	8006834 <_nx_ip_driver_packet_send+0x68>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800684a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800684c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800684e:	429a      	cmp	r2, r3
 8006850:	d905      	bls.n	800685e <_nx_ip_driver_packet_send+0x92>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 8006852:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d079      	beq.n	800694e <_nx_ip_driver_packet_send+0x182>
 800685a:	2e00      	cmp	r6, #0
 800685c:	d177      	bne.n	800694e <_nx_ip_driver_packet_send+0x182>

                    /* No ARP entry was found.  We need to allocate a new ARP entry, populate it, and
                       initiate an ARP request to get the specific physical mapping.  */

                    /* Allocate a new ARP entry.  */
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800685e:	f8d4 3c0c 	ldr.w	r3, [r4, #3084]	; 0xc0c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d073      	beq.n	800694e <_nx_ip_driver_packet_send+0x182>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 8006866:	f200 21de 	addw	r1, r0, #734	; 0x2de
 800686a:	2200      	movs	r2, #0
 800686c:	4620      	mov	r0, r4
 800686e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006872:	4798      	blx	r3
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8006874:	4606      	mov	r6, r0
 8006876:	2800      	cmp	r0, #0
 8006878:	d169      	bne.n	800694e <_nx_ip_driver_packet_send+0x182>
                        /* Just return!  */
                        return;
                    }

                    /* Otherwise, setup a pointer to the new ARP entry.  */
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800687a:	f8d8 3b78 	ldr.w	r3, [r8, #2936]	; 0xb78

                    /* Setup the IP address and clear the physical mapping.  */
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
                    arp_ptr -> nx_arp_physical_address_msw =  0;
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 800687e:	220a      	movs	r2, #10
                    arp_ptr -> nx_arp_retries =               0;
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8006880:	6b68      	ldr	r0, [r5, #52]	; 0x34

                    /* Queue the packet for output.  */
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;

                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8006882:	4639      	mov	r1, r7
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8006884:	699b      	ldr	r3, [r3, #24]
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 8006886:	e9c3 2601 	strd	r2, r6, [r3, #4]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800688a:	62d8      	str	r0, [r3, #44]	; 0x2c
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800688c:	4602      	mov	r2, r0
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 800688e:	629e      	str	r6, [r3, #40]	; 0x28
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8006890:	4620      	mov	r0, r4
 8006892:	f8d4 4c18 	ldr.w	r4, [r4, #3096]	; 0xc18
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 8006896:	e9c3 7608 	strd	r7, r6, [r3, #32]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800689a:	61ee      	str	r6, [r5, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800689c:	631d      	str	r5, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800689e:	47a0      	blx	r4
 80068a0:	e025      	b.n	80068ee <_nx_ip_driver_packet_send+0x122>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 80068a2:	f102 4301 	add.w	r3, r2, #2164260864	; 0x81000000
 80068a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068aa:	d223      	bcs.n	80068f4 <_nx_ip_driver_packet_send+0x128>
            driver_request.nx_ip_driver_interface = NX_NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	9309      	str	r3, [sp, #36]	; 0x24
    if (loopback == NX_TRUE)
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 80068b0:	2300      	movs	r3, #0
 80068b2:	f8d4 2638 	ldr.w	r2, [r4, #1592]	; 0x638
 80068b6:	a901      	add	r1, sp, #4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 ff6b 	bl	8007794 <_nx_packet_copy>
 80068be:	b930      	cbnz	r0, 80068ce <_nx_ip_driver_packet_send+0x102>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 80068c0:	9901      	ldr	r1, [sp, #4]
 80068c2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d16d      	bne.n	80069a4 <_nx_ip_driver_packet_send+0x1d8>
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7fb fc05 	bl	80020d8 <_nx_ip_packet_deferred_receive>
 80068ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d03c      	beq.n	800694e <_nx_ip_driver_packet_send+0x182>
 80068d4:	6b69      	ldr	r1, [r5, #52]	; 0x34
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80068d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80068d8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80068da:	429a      	cmp	r2, r3
 80068dc:	d911      	bls.n	8006902 <_nx_ip_driver_packet_send+0x136>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 80068de:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 80068e2:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
 80068e6:	d032      	beq.n	800694e <_nx_ip_driver_packet_send+0x182>
 80068e8:	b38b      	cbz	r3, 800694e <_nx_ip_driver_packet_send+0x182>

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 80068ea:	a802      	add	r0, sp, #8
 80068ec:	4798      	blx	r3
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
    }
}
 80068ee:	b00a      	add	sp, #40	; 0x28
 80068f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 80068f4:	694b      	ldr	r3, [r1, #20]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d0d8      	beq.n	80068ac <_nx_ip_driver_packet_send+0xe0>
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80068fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80068fc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80068fe:	429a      	cmp	r2, r3
 8006900:	d8ed      	bhi.n	80068de <_nx_ip_driver_packet_send+0x112>
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8006902:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1f0      	bne.n	80068ea <_nx_ip_driver_packet_send+0x11e>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	f007 f896 	bl	800da3c <_tx_thread_sleep>
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	f007 f892 	bl	800da3c <_tx_thread_sleep>
 8006918:	e7f6      	b.n	8006908 <_nx_ip_driver_packet_send+0x13c>
             ((destination_ip & ~network_mask) == ~network_mask)))
 800691a:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 800691c:	4393      	bics	r3, r2
 800691e:	f47f af6f 	bne.w	8006800 <_nx_ip_driver_packet_send+0x34>
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8006922:	2004      	movs	r0, #4
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8006924:	f64f 72ff 	movw	r2, #65535	; 0xffff
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8006928:	f04f 33ff 	mov.w	r3, #4294967295
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 800692c:	9002      	str	r0, [sp, #8]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800692e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006932:	e7d0      	b.n	80068d6 <_nx_ip_driver_packet_send+0x10a>
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8006934:	469c      	mov	ip, r3
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 8006936:	e9dc 2309 	ldrd	r2, r3, [ip, #36]	; 0x24
 800693a:	4313      	orrs	r3, r2
 800693c:	d14e      	bne.n	80069dc <_nx_ip_driver_packet_send+0x210>
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800693e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006940:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006942:	429a      	cmp	r2, r3
 8006944:	d933      	bls.n	80069ae <_nx_ip_driver_packet_send+0x1e2>
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 8006946:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
 800694a:	b103      	cbz	r3, 800694e <_nx_ip_driver_packet_send+0x182>
 800694c:	b37e      	cbz	r6, 80069ae <_nx_ip_driver_packet_send+0x1e2>
                        _nx_packet_transmit_release(packet_ptr);
 800694e:	4628      	mov	r0, r5
 8006950:	f7fc fa62 	bl	8002e18 <_nx_packet_transmit_release>
}
 8006954:	b00a      	add	sp, #40	; 0x28
 8006956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 800695a:	f8d4 37dc 	ldr.w	r3, [r4, #2012]	; 0x7dc
 800695e:	429a      	cmp	r2, r3
 8006960:	d079      	beq.n	8006a56 <_nx_ip_driver_packet_send+0x28a>
 8006962:	f8d4 37f0 	ldr.w	r3, [r4, #2032]	; 0x7f0
 8006966:	429a      	cmp	r2, r3
 8006968:	d073      	beq.n	8006a52 <_nx_ip_driver_packet_send+0x286>
 800696a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800696e:	429a      	cmp	r2, r3
 8006970:	d06d      	beq.n	8006a4e <_nx_ip_driver_packet_send+0x282>
 8006972:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8006976:	429a      	cmp	r2, r3
 8006978:	d067      	beq.n	8006a4a <_nx_ip_driver_packet_send+0x27e>
 800697a:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
 800697e:	429a      	cmp	r2, r3
 8006980:	d061      	beq.n	8006a46 <_nx_ip_driver_packet_send+0x27a>
 8006982:	f8d4 3840 	ldr.w	r3, [r4, #2112]	; 0x840
 8006986:	429a      	cmp	r2, r3
 8006988:	d05b      	beq.n	8006a42 <_nx_ip_driver_packet_send+0x276>
 800698a:	f8d4 3854 	ldr.w	r3, [r4, #2132]	; 0x854
 800698e:	4293      	cmp	r3, r2
 8006990:	d041      	beq.n	8006a16 <_nx_ip_driver_packet_send+0x24a>
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 8006992:	f3c2 0316 	ubfx	r3, r2, #0, #23
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8006996:	f44f 7280 	mov.w	r2, #256	; 0x100
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 800699a:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 800699e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069a2:	e798      	b.n	80068d6 <_nx_ip_driver_packet_send+0x10a>
                _nx_ip_packet_checksum_compute(packet_copy);
 80069a4:	4608      	mov	r0, r1
 80069a6:	f000 fa9b 	bl	8006ee0 <_nx_ip_packet_checksum_compute>
 80069aa:	9901      	ldr	r1, [sp, #4]
 80069ac:	e78c      	b.n	80068c8 <_nx_ip_driver_packet_send+0xfc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80069ae:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80069b2:	b672      	cpsid	i
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80069b4:	2300      	movs	r3, #0
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 80069b6:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80069ba:	61eb      	str	r3, [r5, #28]
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 80069bc:	b1d8      	cbz	r0, 80069f6 <_nx_ip_driver_packet_send+0x22a>
                        while (last_packet -> nx_packet_queue_next)
 80069be:	69c3      	ldr	r3, [r0, #28]
 80069c0:	b1f3      	cbz	r3, 8006a00 <_nx_ip_driver_packet_send+0x234>
                        queued_count = 1;
 80069c2:	2401      	movs	r4, #1
 80069c4:	e000      	b.n	80069c8 <_nx_ip_driver_packet_send+0x1fc>
 80069c6:	460b      	mov	r3, r1
                        while (last_packet -> nx_packet_queue_next)
 80069c8:	69d9      	ldr	r1, [r3, #28]
                            queued_count++;
 80069ca:	3401      	adds	r4, #1
                        while (last_packet -> nx_packet_queue_next)
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d1fa      	bne.n	80069c6 <_nx_ip_driver_packet_send+0x1fa>
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 80069d0:	2c03      	cmp	r4, #3
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 80069d2:	61dd      	str	r5, [r3, #28]
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 80069d4:	d816      	bhi.n	8006a04 <_nx_ip_driver_packet_send+0x238>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80069d6:	f382 8810 	msr	PRIMASK, r2
 80069da:	e788      	b.n	80068ee <_nx_ip_driver_packet_send+0x122>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80069dc:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80069e0:	b672      	cpsid	i
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80069e2:	e9dc 1209 	ldrd	r1, r2, [ip, #36]	; 0x24
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 80069e6:	f8c8 cb78 	str.w	ip, [r8, #2936]	; 0xb78
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80069ea:	e9cd 1204 	strd	r1, r2, [sp, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80069ee:	f383 8810 	msr	PRIMASK, r3
 80069f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f4:	e76c      	b.n	80068d0 <_nx_ip_driver_packet_send+0x104>
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 80069f6:	f8cc 5030 	str.w	r5, [ip, #48]	; 0x30
 80069fa:	f382 8810 	msr	PRIMASK, r2
 80069fe:	e776      	b.n	80068ee <_nx_ip_driver_packet_send+0x122>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 8006a00:	61c5      	str	r5, [r0, #28]
 8006a02:	e7e8      	b.n	80069d6 <_nx_ip_driver_packet_send+0x20a>
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 8006a04:	69c3      	ldr	r3, [r0, #28]
 8006a06:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 8006a0a:	61c1      	str	r1, [r0, #28]
 8006a0c:	f382 8810 	msr	PRIMASK, r2
                            _nx_packet_transmit_release(remove_packet);
 8006a10:	f7fc fa02 	bl	8002e18 <_nx_packet_transmit_release>
 8006a14:	e76b      	b.n	80068ee <_nx_ip_driver_packet_send+0x122>
                index++;
 8006a16:	2306      	movs	r3, #6
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 8006a18:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006a1c:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8006a20:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8006a24:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8006a28:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8006a2c:	b922      	cbnz	r2, 8006a38 <_nx_ip_driver_packet_send+0x26c>
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8006a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a36:	e74e      	b.n	80068d6 <_nx_ip_driver_packet_send+0x10a>
 8006a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a40:	e736      	b.n	80068b0 <_nx_ip_driver_packet_send+0xe4>
                index++;
 8006a42:	2305      	movs	r3, #5
 8006a44:	e7e8      	b.n	8006a18 <_nx_ip_driver_packet_send+0x24c>
 8006a46:	2304      	movs	r3, #4
 8006a48:	e7e6      	b.n	8006a18 <_nx_ip_driver_packet_send+0x24c>
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e7e4      	b.n	8006a18 <_nx_ip_driver_packet_send+0x24c>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e7e2      	b.n	8006a18 <_nx_ip_driver_packet_send+0x24c>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e7e0      	b.n	8006a18 <_nx_ip_driver_packet_send+0x24c>
            index =  0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	e7de      	b.n	8006a18 <_nx_ip_driver_packet_send+0x24c>
 8006a5a:	bf00      	nop

08006a5c <_nx_ip_fast_periodic_timer_entry>:

    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_FAST_EVENT, TX_OR);
 8006a5c:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 8006a60:	2200      	movs	r2, #0
 8006a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a66:	f006 bb03 	b.w	800d070 <_tx_event_flags_set>
 8006a6a:	bf00      	nop

08006a6c <_nx_ip_fast_periodic_timer_create>:
VOID _nx_ip_fast_periodic_timer_create(NX_IP *ip_ptr)
{

ULONG _nx_ip_fast_timer_rate;

    if (ip_ptr -> nx_ip_fast_periodic_timer_created)
 8006a6c:	f8d0 3b48 	ldr.w	r3, [r0, #2888]	; 0xb48
 8006a70:	b103      	cbz	r3, 8006a74 <_nx_ip_fast_periodic_timer_create+0x8>
 8006a72:	4770      	bx	lr
{
 8006a74:	b530      	push	{r4, r5, lr}

    _nx_ip_fast_timer_rate =  (NX_IP_PERIODIC_RATE + (NX_IP_FAST_TIMER_RATE - 1)) / NX_IP_FAST_TIMER_RATE;

    /* Create the fast TCP timer.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 8006a76:	220a      	movs	r2, #10
{
 8006a78:	b085      	sub	sp, #20
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 8006a7a:	2501      	movs	r5, #1
 8006a7c:	6841      	ldr	r1, [r0, #4]
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4603      	mov	r3, r0
 8006a82:	9200      	str	r2, [sp, #0]
 8006a84:	f600 304c 	addw	r0, r0, #2892	; 0xb4c
 8006a88:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8006a8c:	4a03      	ldr	r2, [pc, #12]	; (8006a9c <_nx_ip_fast_periodic_timer_create+0x30>)
 8006a8e:	f007 f993 	bl	800ddb8 <_tx_timer_create>
                    _nx_ip_fast_timer_rate, _nx_ip_fast_timer_rate, TX_AUTO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr)

    /* Set the flag to indicate that the fast timer has been created. */
    ip_ptr -> nx_ip_fast_periodic_timer_created = 1;
 8006a92:	f8c4 5b48 	str.w	r5, [r4, #2888]	; 0xb48
}
 8006a96:	b005      	add	sp, #20
 8006a98:	bd30      	pop	{r4, r5, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08006a5d 	.word	0x08006a5d

08006aa0 <_nx_ip_gateway_address_clear>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_clear(NX_IP *ip_ptr)
{
 8006aa0:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be cleared.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006aa2:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 8006aa6:	4605      	mov	r5, r0
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8006aac:	4630      	mov	r0, r6
 8006aae:	f006 fc6f 	bl	800d390 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ab2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006ab6:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Clear the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  0;
 8006ab8:	2400      	movs	r4, #0

    ip_ptr -> nx_ip_gateway_interface = NX_NULL;
 8006aba:	e9c5 4402 	strd	r4, r4, [r5, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006abe:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f006 fd4e 	bl	800d564 <_tx_mutex_put>
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}

08006acc <_nx_ip_gateway_address_get>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_get(NX_IP *ip_ptr, ULONG *ip_address)
{
 8006acc:	b570      	push	{r4, r5, r6, lr}
    /* Initialize the return value to be NX_NOT_FOUND.  If the gateway address
       is set, the return value changes to NX_SUCCESS. */
    status = NX_NOT_FOUND;

    /* Obtain the IP internal mutex to get the Gateway IP address.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006ace:	f200 643c 	addw	r4, r0, #1596	; 0x63c
{
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8006ada:	4620      	mov	r0, r4
 8006adc:	f006 fc58 	bl	800d390 <_tx_mutex_get>

    if (ip_ptr -> nx_ip_gateway_address)
 8006ae0:	68ab      	ldr	r3, [r5, #8]
 8006ae2:	b133      	cbz	r3, 8006af2 <_nx_ip_gateway_address_get+0x26>
    {

        /* Setup the Gateway IP address.  */
        *ip_address = ip_ptr -> nx_ip_gateway_address;

        status = NX_SUCCESS;
 8006ae4:	2500      	movs	r5, #0
        *ip_address = ip_ptr -> nx_ip_gateway_address;
 8006ae6:	6033      	str	r3, [r6, #0]
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f006 fd3b 	bl	800d564 <_tx_mutex_put>
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006aee:	4628      	mov	r0, r5
 8006af0:	bd70      	pop	{r4, r5, r6, pc}
    status = NX_NOT_FOUND;
 8006af2:	254e      	movs	r5, #78	; 0x4e
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006af4:	4620      	mov	r0, r4
 8006af6:	f006 fd35 	bl	800d564 <_tx_mutex_put>
}
 8006afa:	4628      	mov	r0, r5
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	bf00      	nop

08006b00 <_nx_ip_gateway_address_set>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_set(NX_IP *ip_ptr, ULONG ip_address)
{
 8006b00:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, ip_address, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be setup.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006b02:	f200 643c 	addw	r4, r0, #1596	; 0x63c
{
 8006b06:	4605      	mov	r5, r0
 8006b08:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006b0a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f006 fc3e 	bl	800d390 <_tx_mutex_get>
    /* Loop through all the interfaces to find the one for the input gateway address. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {

        /* Must be a valid interface. Match the network subnet of the interface and input address. */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8006b14:	f895 3c4c 	ldrb.w	r3, [r5, #3148]	; 0xc4c
 8006b18:	b923      	cbnz	r3, 8006b24 <_nx_ip_gateway_address_set+0x24>
    /* Check if we found an interface. */
    if (ip_interface_ptr == NX_NULL)
    {

        /* None found. Unlock the mutex, and return the error status. */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f006 fd22 	bl	800d564 <_tx_mutex_put>

        return(NX_IP_ADDRESS_ERROR);
 8006b20:	2021      	movs	r0, #33	; 0x21
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 8006b24:	f8d5 3c60 	ldr.w	r3, [r5, #3168]	; 0xc60
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8006b28:	f8d5 2c64 	ldr.w	r2, [r5, #3172]	; 0xc64
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 8006b2c:	4033      	ands	r3, r6
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d1f3      	bne.n	8006b1a <_nx_ip_gateway_address_set+0x1a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006b32:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006b36:	b672      	cpsid	i
            ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8006b38:	f605 4248 	addw	r2, r5, #3144	; 0xc48
    ip_ptr -> nx_ip_gateway_interface = ip_interface_ptr;
 8006b3c:	e9c5 6202 	strd	r6, r2, [r5, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b40:	f383 8810 	msr	PRIMASK, r3
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006b44:	4620      	mov	r0, r4
 8006b46:	f006 fd0d 	bl	800d564 <_tx_mutex_put>
    return(NX_SUCCESS);
 8006b4a:	2000      	movs	r0, #0
}
 8006b4c:	bd70      	pop	{r4, r5, r6, pc}
 8006b4e:	bf00      	nop

08006b50 <_nx_ip_header_add>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 8006b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b54:	b085      	sub	sp, #20
        router_alert = 4;
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 8006b56:	688c      	ldr	r4, [r1, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 8006b58:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 8006b5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 8006b5c:	f1a4 0714 	sub.w	r7, r4, #20
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 8006b60:	3514      	adds	r5, #20
{
 8006b62:	9603      	str	r6, [sp, #12]

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8006b64:	690e      	ldr	r6, [r1, #16]
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 8006b66:	608f      	str	r7, [r1, #8]
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8006b68:	42b7      	cmp	r7, r6
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 8006b6a:	624d      	str	r5, [r1, #36]	; 0x24
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8006b6c:	d35a      	bcc.n	8006c24 <_nx_ip_header_add+0xd4>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8006b6e:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
                                                       sizeof(NX_IPV4_HEADER) + router_alert);

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 8006b72:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8006b76:	f10c 0c14 	add.w	ip, ip, #20
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8006b7a:	638f      	str	r7, [r1, #56]	; 0x38
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 8006b7c:	f1be 0f01 	cmp.w	lr, #1
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8006b80:	f881 c032 	strb.w	ip, [r1, #50]	; 0x32
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 8006b84:	d04a      	beq.n	8006c1c <_nx_ip_header_add+0xcc>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8006b86:	b2ad      	uxth	r5, r5
 8006b88:	f043 438a 	orr.w	r3, r3, #1157627904	; 0x45000000

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8006b8c:	9f03      	ldr	r7, [sp, #12]
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8006b8e:	432b      	orrs	r3, r5
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8006b90:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8006b92:	f8d0 c634 	ldr.w	ip, [r0, #1588]	; 0x634
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006b96:	ea83 4933 	eor.w	r9, r3, r3, ror #16
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8006b9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8006b9c:	ea47 6606 	orr.w	r6, r7, r6, lsl #24
    ip_header_ptr -> nx_ip_header_source_ip =  packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address;
 8006ba0:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006ba2:	ea4f 2919 	mov.w	r9, r9, lsr #8
    ip_header_ptr -> nx_ip_header_source_ip =  packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address;
 8006ba6:	f8d7 e014 	ldr.w	lr, [r7, #20]
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8006baa:	ea45 480c 	orr.w	r8, r5, ip, lsl #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006bae:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8006bb2:	f10c 0501 	add.w	r5, ip, #1

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8006bb6:	6c3f      	ldr	r7, [r7, #64]	; 0x40
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006bb8:	ea88 4c38 	eor.w	ip, r8, r8, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006bbc:	ea89 2933 	eor.w	r9, r9, r3, ror #8
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8006bc0:	f8c0 5634 	str.w	r5, [r0, #1588]	; 0x634
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006bc4:	ea82 4332 	eor.w	r3, r2, r2, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006bc8:	ea8e 453e 	eor.w	r5, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006bcc:	f844 9c14 	str.w	r9, [r4, #-20]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006bd0:	ea86 4036 	eor.w	r0, r6, r6, ror #16
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006bd4:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006bd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006bda:	0a2d      	lsrs	r5, r5, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006bdc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006be0:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006be2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006be6:	ea83 2332 	eor.w	r3, r3, r2, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006bea:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006bee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006bf2:	ea8c 2c38 	eor.w	ip, ip, r8, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006bf6:	ea85 253e 	eor.w	r5, r5, lr, ror #8
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006bfa:	f844 3c04 	str.w	r3, [r4, #-4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006bfe:	ea80 2036 	eor.w	r0, r0, r6, ror #8
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8006c02:	f017 0301 	ands.w	r3, r7, #1
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006c06:	f844 cc10 	str.w	ip, [r4, #-16]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006c0a:	f844 5c08 	str.w	r5, [r4, #-8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006c0e:	f844 0c0c 	str.w	r0, [r4, #-12]
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8006c12:	d010      	beq.n	8006c36 <_nx_ip_header_add+0xe6>
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 8006c14:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
}
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	b005      	add	sp, #20
 8006c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	f006 ff08 	bl	800da3c <_tx_thread_sleep>
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c30:	f006 ff04 	bl	800da3c <_tx_thread_sleep>
 8006c34:	e7f6      	b.n	8006c24 <_nx_ip_header_add+0xd4>
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	4608      	mov	r0, r1
 8006c3a:	2214      	movs	r2, #20
 8006c3c:	2104      	movs	r1, #4
 8006c3e:	f7fb f8c1 	bl	8001dc4 <_nx_ip_checksum_compute>
        val = val & NX_LOWER_16_MASK;
 8006c42:	43c2      	mvns	r2, r0
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8006c44:	f854 1c0c 	ldr.w	r1, [r4, #-12]
        val = val & NX_LOWER_16_MASK;
 8006c48:	b292      	uxth	r2, r2
        NX_CHANGE_ULONG_ENDIAN(val);
 8006c4a:	ea42 4332 	orr.w	r3, r2, r2, ror #16
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006c54:	ea83 2332 	eor.w	r3, r3, r2, ror #8
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	f844 3c0c 	str.w	r3, [r4, #-12]
 8006c5e:	e7dd      	b.n	8006c1c <_nx_ip_header_add+0xcc>

08006c60 <_nx_ip_interface_address_get>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_get(NX_IP *ip_ptr, UINT interface_index, ULONG *ip_address, ULONG *network_mask)
{
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                            ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);



    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006c64:	f200 663c 	addw	r6, r0, #1596	; 0x63c
{
 8006c68:	4604      	mov	r4, r0
 8006c6a:	460d      	mov	r5, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c70:	4630      	mov	r0, r6
{
 8006c72:	4690      	mov	r8, r2
 8006c74:	461f      	mov	r7, r3
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006c76:	f006 fb8b 	bl	800d390 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c7a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c7e:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE


    /* Pickup the IP address and the network mask. */
    *ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8006c80:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006c84:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8006c88:	f8d4 3c5c 	ldr.w	r3, [r4, #3164]	; 0xc5c
 8006c8c:	f8c8 3000 	str.w	r3, [r8]
    *network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 8006c90:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
 8006c94:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c96:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f006 fc62 	bl	800d564 <_tx_mutex_put>
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca6:	bf00      	nop

08006ca8 <_nx_ip_interface_address_set>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_set(NX_IP *ip_ptr, UINT interface_index, ULONG ip_address, ULONG network_mask)
{
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_SET, ip_ptr, ip_address, network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006cac:	f200 6a3c 	addw	sl, r0, #1596	; 0x63c
{
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	460e      	mov	r6, r1
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f04f 31ff 	mov.w	r1, #4294967295
{
 8006cbc:	4617      	mov	r7, r2
 8006cbe:	4698      	mov	r8, r3
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006cc0:	f006 fb66 	bl	800d390 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006cc4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006cc8:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Save previous IP address and network mask.  */
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8006cca:	00b5      	lsls	r5, r6, #2
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;

    /* Setup the IP address and the network mask. */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 8006ccc:	ea07 0308 	and.w	r3, r7, r8
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 8006cd0:	f8d4 27d8 	ldr.w	r2, [r4, #2008]	; 0x7d8

    /* Ensure the RARP function is disabled.  */
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 8006cd4:	2000      	movs	r0, #0
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8006cd6:	19a9      	adds	r1, r5, r6
    address_change_notify =  ip_ptr -> nx_ip_address_change_notify;
 8006cd8:	f8d4 b7d4 	ldr.w	fp, [r4, #2004]	; 0x7d4
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 8006cdc:	9200      	str	r2, [sp, #0]
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8006cde:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 8006ce2:	f8c1 3c64 	str.w	r3, [r1, #3172]	; 0xc64
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 8006ce6:	f8d1 3c60 	ldr.w	r3, [r1, #3168]	; 0xc60
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8006cea:	f8d1 9c5c 	ldr.w	r9, [r1, #3164]	; 0xc5c
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
 8006cee:	f8c1 8c60 	str.w	r8, [r1, #3168]	; 0xc60
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
 8006cf2:	f8c1 7c5c 	str.w	r7, [r1, #3164]	; 0xc5c
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 8006cf6:	9301      	str	r3, [sp, #4]
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 8006cf8:	f8c4 0c28 	str.w	r0, [r4, #3112]	; 0xc28
    ip_ptr -> nx_ip_rarp_queue_process =    NX_NULL;
 8006cfc:	f8c4 0c2c 	str.w	r0, [r4, #3116]	; 0xc2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d00:	f38c 8810 	msr	PRIMASK, ip

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006d04:	4650      	mov	r0, sl
 8006d06:	f006 fc2d 	bl	800d564 <_tx_mutex_put>

    /* Determine if the application should be notified of the IP address and/or
       network mask change.  */
    if ((address_change_notify) &&
 8006d0a:	f1bb 0f00 	cmp.w	fp, #0
 8006d0e:	d007      	beq.n	8006d20 <_nx_ip_interface_address_set+0x78>
 8006d10:	45b9      	cmp	r9, r7
 8006d12:	d102      	bne.n	8006d1a <_nx_ip_interface_address_set+0x72>
 8006d14:	9b01      	ldr	r3, [sp, #4]
 8006d16:	4543      	cmp	r3, r8
 8006d18:	d002      	beq.n	8006d20 <_nx_ip_interface_address_set+0x78>
        ((ip_address != previous_ip_address) || (network_mask != previous_network_mask)))
    {

        /* Yes, call the application's IP address change notify function.  */
        (address_change_notify)(ip_ptr, additional_info);
 8006d1a:	9900      	ldr	r1, [sp, #0]
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	47d8      	blx	fp
    }

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	4435      	add	r5, r6
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006d24:	4618      	mov	r0, r3
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 8006d26:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8006d2a:	f8c4 3c8c 	str.w	r3, [r4, #3212]	; 0xc8c
}
 8006d2e:	b003      	add	sp, #12
 8006d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d34 <_nx_ip_interface_status_check>:

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
            driver_request.nx_ip_driver_return_ptr =  &return_value;
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006d34:	eb01 0181 	add.w	r1, r1, r1, lsl #2
{
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006d3c:	010e      	lsls	r6, r1, #4
{
 8006d3e:	b095      	sub	sp, #84	; 0x54
 8006d40:	4617      	mov	r7, r2
        if (needed_status & NX_IP_INITIALIZE_DONE)
 8006d42:	f002 0801 	and.w	r8, r2, #1
{
 8006d46:	9309      	str	r3, [sp, #36]	; 0x24
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006d48:	f606 4348 	addw	r3, r6, #3144	; 0xc48
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 8006d4c:	f002 0b02 	and.w	fp, r2, #2
        if (needed_status & NX_IP_ARP_ENABLED)
 8006d50:	f002 0a08 	and.w	sl, r2, #8
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006d54:	18c3      	adds	r3, r0, r3
        if (needed_status & NX_IP_RARP_COMPLETE)
 8006d56:	f002 0280 	and.w	r2, r2, #128	; 0x80
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_TCP_ENABLED;
            }
        }

        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8006d5a:	4644      	mov	r4, r8
{
 8006d5c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006d5e:	9307      	str	r3, [sp, #28]
        if (needed_status & NX_IP_IGMP_ENABLED)
 8006d60:	f007 0340 	and.w	r3, r7, #64	; 0x40
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8006d64:	4406      	add	r6, r0
        if (needed_status & NX_IP_RARP_COMPLETE)
 8006d66:	9201      	str	r2, [sp, #4]
        if (needed_status & NX_IP_IGMP_ENABLED)
 8006d68:	9302      	str	r3, [sp, #8]
        if (needed_status & NX_IP_LINK_ENABLED)
 8006d6a:	f007 0304 	and.w	r3, r7, #4
        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8006d6e:	4680      	mov	r8, r0
        if (needed_status & NX_IP_LINK_ENABLED)
 8006d70:	9303      	str	r3, [sp, #12]
        if (needed_status &  NX_IP_UDP_ENABLED)
 8006d72:	f007 0310 	and.w	r3, r7, #16
 8006d76:	9304      	str	r3, [sp, #16]
        if (needed_status & NX_IP_TCP_ENABLED)
 8006d78:	f007 0320 	and.w	r3, r7, #32
 8006d7c:	9305      	str	r3, [sp, #20]
        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8006d7e:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8006d82:	9306      	str	r3, [sp, #24]
 8006d84:	463b      	mov	r3, r7
 8006d86:	465f      	mov	r7, fp
 8006d88:	469b      	mov	fp, r3
        if (needed_status & NX_IP_INITIALIZE_DONE)
 8006d8a:	2c00      	cmp	r4, #0
 8006d8c:	d043      	beq.n	8006e16 <_nx_ip_interface_status_check+0xe2>
            if (ip_ptr -> nx_ip_initialize_done)
 8006d8e:	f8d8 2670 	ldr.w	r2, [r8, #1648]	; 0x670
 8006d92:	f112 0900 	adds.w	r9, r2, #0
 8006d96:	bf18      	it	ne
 8006d98:	f04f 0901 	movne.w	r9, #1
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 8006d9c:	b127      	cbz	r7, 8006da8 <_nx_ip_interface_status_check+0x74>
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8006d9e:	f8d6 2c5c 	ldr.w	r2, [r6, #3164]	; 0xc5c
 8006da2:	b10a      	cbz	r2, 8006da8 <_nx_ip_interface_status_check+0x74>
                current_status =  current_status | NX_IP_ADDRESS_RESOLVED;
 8006da4:	f049 0902 	orr.w	r9, r9, #2
        if (needed_status & NX_IP_ARP_ENABLED)
 8006da8:	f1ba 0f00 	cmp.w	sl, #0
 8006dac:	d004      	beq.n	8006db8 <_nx_ip_interface_status_check+0x84>
            if (ip_ptr -> nx_ip_arp_periodic_update)
 8006dae:	f8d8 2c10 	ldr.w	r2, [r8, #3088]	; 0xc10
 8006db2:	b10a      	cbz	r2, 8006db8 <_nx_ip_interface_status_check+0x84>
                current_status =  current_status | NX_IP_ARP_ENABLED;
 8006db4:	f049 0908 	orr.w	r9, r9, #8
        if (needed_status & NX_IP_RARP_COMPLETE)
 8006db8:	9b01      	ldr	r3, [sp, #4]
 8006dba:	b123      	cbz	r3, 8006dc6 <_nx_ip_interface_status_check+0x92>
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8006dbc:	f8d6 2c5c 	ldr.w	r2, [r6, #3164]	; 0xc5c
 8006dc0:	b10a      	cbz	r2, 8006dc6 <_nx_ip_interface_status_check+0x92>
                current_status =  current_status | NX_IP_RARP_COMPLETE;
 8006dc2:	f049 0980 	orr.w	r9, r9, #128	; 0x80
        if (needed_status & NX_IP_IGMP_ENABLED)
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	b123      	cbz	r3, 8006dd4 <_nx_ip_interface_status_check+0xa0>
            if (ip_ptr -> nx_ip_igmp_packet_receive)
 8006dca:	f8d8 286c 	ldr.w	r2, [r8, #2156]	; 0x86c
 8006dce:	b10a      	cbz	r2, 8006dd4 <_nx_ip_interface_status_check+0xa0>
                current_status =  current_status | NX_IP_IGMP_ENABLED;
 8006dd0:	f049 0940 	orr.w	r9, r9, #64	; 0x40
        if (needed_status & NX_IP_LINK_ENABLED)
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	bb03      	cbnz	r3, 8006e1a <_nx_ip_interface_status_check+0xe6>
        if (needed_status &  NX_IP_UDP_ENABLED)
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	b123      	cbz	r3, 8006de6 <_nx_ip_interface_status_check+0xb2>
            if (ip_ptr -> nx_ip_udp_packet_receive)
 8006ddc:	f8d8 2930 	ldr.w	r2, [r8, #2352]	; 0x930
 8006de0:	b10a      	cbz	r2, 8006de6 <_nx_ip_interface_status_check+0xb2>
                current_status =  current_status | NX_IP_UDP_ENABLED;
 8006de2:	f049 0910 	orr.w	r9, r9, #16
        if (needed_status & NX_IP_TCP_ENABLED)
 8006de6:	9b05      	ldr	r3, [sp, #20]
 8006de8:	b123      	cbz	r3, 8006df4 <_nx_ip_interface_status_check+0xc0>
            if (ip_ptr -> nx_ip_tcp_packet_receive)
 8006dea:	f8d8 29bc 	ldr.w	r2, [r8, #2492]	; 0x9bc
 8006dee:	b10a      	cbz	r2, 8006df4 <_nx_ip_interface_status_check+0xc0>
                current_status =  current_status | NX_IP_TCP_ENABLED;
 8006df0:	f049 0920 	orr.w	r9, r9, #32
        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8006df4:	9b06      	ldr	r3, [sp, #24]
 8006df6:	bb6b      	cbnz	r3, 8006e54 <_nx_ip_interface_status_check+0x120>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
        }

        /* Determine if current status is the same.  If so, break out
           of this polling loop.  */
        if (current_status == needed_status)
 8006df8:	45d9      	cmp	r9, fp
 8006dfa:	d049      	beq.n	8006e90 <_nx_ip_interface_status_check+0x15c>
        {
            break;
        }

        /* Check for suspension request.  */
        if (wait_option)
 8006dfc:	2d00      	cmp	r5, #0
 8006dfe:	d05a      	beq.n	8006eb6 <_nx_ip_interface_status_check+0x182>
        {

            /* Decrease the wait time and sleep.  */
            if (wait_option > NX_IP_STATUS_CHECK_WAIT_TIME)
 8006e00:	2d01      	cmp	r5, #1
            {
                wait_option = 0;
            }

            /* Sleep for a tick and check again.  */
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 8006e02:	f04f 0001 	mov.w	r0, #1
                wait_option -= NX_IP_STATUS_CHECK_WAIT_TIME;
 8006e06:	bf8c      	ite	hi
 8006e08:	f105 35ff 	addhi.w	r5, r5, #4294967295
                wait_option = 0;
 8006e0c:	2500      	movls	r5, #0
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 8006e0e:	f006 fe15 	bl	800da3c <_tx_thread_sleep>
        if (needed_status & NX_IP_INITIALIZE_DONE)
 8006e12:	2c00      	cmp	r4, #0
 8006e14:	d1bb      	bne.n	8006d8e <_nx_ip_interface_status_check+0x5a>
        current_status =  0;
 8006e16:	46a1      	mov	r9, r4
 8006e18:	e7c0      	b.n	8006d9c <_nx_ip_interface_status_check+0x68>
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006e1a:	f208 623c 	addw	r2, r8, #1596	; 0x63c
 8006e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e22:	4610      	mov	r0, r2
 8006e24:	9208      	str	r2, [sp, #32]
 8006e26:	f006 fab3 	bl	800d390 <_tx_mutex_get>
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006e2a:	9a07      	ldr	r2, [sp, #28]
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8006e2c:	230a      	movs	r3, #10
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8006e2e:	a90b      	add	r1, sp, #44	; 0x2c
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006e30:	9213      	str	r2, [sp, #76]	; 0x4c
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8006e32:	a80c      	add	r0, sp, #48	; 0x30
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8006e34:	9111      	str	r1, [sp, #68]	; 0x44
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 8006e36:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8006e3a:	f8d6 1c84 	ldr.w	r1, [r6, #3204]	; 0xc84
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8006e3e:	930c      	str	r3, [sp, #48]	; 0x30
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8006e40:	4788      	blx	r1
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8006e42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e44:	9a08      	ldr	r2, [sp, #32]
 8006e46:	b351      	cbz	r1, 8006e9e <_nx_ip_interface_status_check+0x16a>
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8006e48:	2944      	cmp	r1, #68	; 0x44
 8006e4a:	d042      	beq.n	8006ed2 <_nx_ip_interface_status_check+0x19e>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f006 fb89 	bl	800d564 <_tx_mutex_put>
 8006e52:	e7c1      	b.n	8006dd8 <_nx_ip_interface_status_check+0xa4>
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006e54:	f208 623c 	addw	r2, r8, #1596	; 0x63c
 8006e58:	f04f 31ff 	mov.w	r1, #4294967295
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	9208      	str	r2, [sp, #32]
 8006e60:	f006 fa96 	bl	800d390 <_tx_mutex_get>
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006e64:	9a07      	ldr	r2, [sp, #28]
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8006e66:	230a      	movs	r3, #10
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8006e68:	a90b      	add	r1, sp, #44	; 0x2c
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8006e6a:	9213      	str	r2, [sp, #76]	; 0x4c
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8006e6c:	a80c      	add	r0, sp, #48	; 0x30
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8006e6e:	9111      	str	r1, [sp, #68]	; 0x44
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 8006e70:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8006e74:	f8d6 1c84 	ldr.w	r1, [r6, #3204]	; 0xc84
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8006e78:	930c      	str	r3, [sp, #48]	; 0x30
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8006e7a:	4788      	blx	r1
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8006e7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e7e:	9a08      	ldr	r2, [sp, #32]
 8006e80:	b199      	cbz	r1, 8006eaa <_nx_ip_interface_status_check+0x176>
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8006e82:	2944      	cmp	r1, #68	; 0x44
 8006e84:	d01e      	beq.n	8006ec4 <_nx_ip_interface_status_check+0x190>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006e86:	4610      	mov	r0, r2
 8006e88:	f006 fb6c 	bl	800d564 <_tx_mutex_put>
        if (current_status == needed_status)
 8006e8c:	45d9      	cmp	r9, fp
 8006e8e:	d1b5      	bne.n	8006dfc <_nx_ip_interface_status_check+0xc8>
    /* Determine what status to return.  */
    if (needed_status == current_status)
    {

        /* Return a success.  */
        return(NX_SUCCESS);
 8006e90:	2000      	movs	r0, #0
    *actual_status =  current_status;
 8006e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e94:	f8c3 9000 	str.w	r9, [r3]
    {

        /* Return an error.  */
        return(NX_NOT_SUCCESSFUL);
    }
}
 8006e98:	b015      	add	sp, #84	; 0x54
 8006e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (return_value == NX_TRUE)
 8006e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ea0:	2901      	cmp	r1, #1
 8006ea2:	d1d3      	bne.n	8006e4c <_nx_ip_interface_status_check+0x118>
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 8006ea4:	f049 0904 	orr.w	r9, r9, #4
 8006ea8:	e7d0      	b.n	8006e4c <_nx_ip_interface_status_check+0x118>
                if (return_value == NX_TRUE)
 8006eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eac:	2901      	cmp	r1, #1
 8006eae:	d1ea      	bne.n	8006e86 <_nx_ip_interface_status_check+0x152>
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8006eb0:	f449 7980 	orr.w	r9, r9, #256	; 0x100
 8006eb4:	e7e7      	b.n	8006e86 <_nx_ip_interface_status_check+0x152>
    *actual_status =  current_status;
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        return(NX_NOT_SUCCESSFUL);
 8006eb8:	2043      	movs	r0, #67	; 0x43
    *actual_status =  current_status;
 8006eba:	f8c3 9000 	str.w	r9, [r3]
}
 8006ebe:	b015      	add	sp, #84	; 0x54
 8006ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8006ec4:	f896 1c4e 	ldrb.w	r1, [r6, #3150]	; 0xc4e
 8006ec8:	2900      	cmp	r1, #0
 8006eca:	d0dc      	beq.n	8006e86 <_nx_ip_interface_status_check+0x152>
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8006ecc:	f449 7980 	orr.w	r9, r9, #256	; 0x100
 8006ed0:	e7d9      	b.n	8006e86 <_nx_ip_interface_status_check+0x152>
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8006ed2:	f896 1c4e 	ldrb.w	r1, [r6, #3150]	; 0xc4e
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	d0b8      	beq.n	8006e4c <_nx_ip_interface_status_check+0x118>
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 8006eda:	f049 0904 	orr.w	r9, r9, #4
 8006ede:	e7b5      	b.n	8006e4c <_nx_ip_interface_status_check+0x118>

08006ee0 <_nx_ip_packet_checksum_compute>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 8006ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
NX_IPV6_HEADER   *ipv6_header_ptr;
#endif

    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8006ee4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
ULONG             data_length = 0;
 8006ee8:	2200      	movs	r2, #0
{
 8006eea:	b08a      	sub	sp, #40	; 0x28
 8006eec:	4604      	mov	r4, r0
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 8006eee:	2b04      	cmp	r3, #4

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8006ef0:	4615      	mov	r5, r2
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 8006ef2:	6886      	ldr	r6, [r0, #8]
        next_protocol = NX_PROTOCOL_IPV4;
 8006ef4:	bf14      	ite	ne
 8006ef6:	2329      	movne	r3, #41	; 0x29
 8006ef8:	2304      	moveq	r3, #4
        switch (next_protocol)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	2b39      	cmp	r3, #57	; 0x39
 8006efe:	d83f      	bhi.n	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
 8006f00:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f04:	00d600b3 	.word	0x00d600b3
 8006f08:	0081003e 	.word	0x0081003e
 8006f0c:	010f003e 	.word	0x010f003e
 8006f10:	003e003e 	.word	0x003e003e
 8006f14:	003e003e 	.word	0x003e003e
 8006f18:	003e003e 	.word	0x003e003e
 8006f1c:	003e003e 	.word	0x003e003e
 8006f20:	003e003e 	.word	0x003e003e
 8006f24:	003e005b 	.word	0x003e005b
 8006f28:	003e003e 	.word	0x003e003e
 8006f2c:	003e003e 	.word	0x003e003e
 8006f30:	003e003e 	.word	0x003e003e
 8006f34:	003e003e 	.word	0x003e003e
 8006f38:	003e003e 	.word	0x003e003e
 8006f3c:	003e003e 	.word	0x003e003e
 8006f40:	003e003e 	.word	0x003e003e
 8006f44:	003e003e 	.word	0x003e003e
 8006f48:	003e003e 	.word	0x003e003e
 8006f4c:	003e003e 	.word	0x003e003e
 8006f50:	003e003e 	.word	0x003e003e
 8006f54:	003e0042 	.word	0x003e0042
 8006f58:	003e003e 	.word	0x003e003e
 8006f5c:	003e003e 	.word	0x003e003e
 8006f60:	003e003e 	.word	0x003e003e
 8006f64:	003e003e 	.word	0x003e003e
 8006f68:	003e003e 	.word	0x003e003e
 8006f6c:	003e003e 	.word	0x003e003e
 8006f70:	003e003e 	.word	0x003e003e
 8006f74:	003a003e 	.word	0x003a003e
#ifdef FEATURE_NX_IPV6
        case NX_PROTOCOL_ICMPV6:
        {

            /* Check if ICMPv6 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM)
 8006f78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f7a:	059b      	lsls	r3, r3, #22
 8006f7c:	f100 80f5 	bmi.w	800716a <_nx_ip_packet_checksum_compute+0x28a>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 8006f80:	60a6      	str	r6, [r4, #8]
    return;
}
 8006f82:	b00a      	add	sp, #40	; 0x28
 8006f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ipv6_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8006f88:	68a7      	ldr	r7, [r4, #8]
            COPY_IPV6_ADDRESS(ipv6_header_ptr -> nx_ip_header_source_ip, ip_src_addr);
 8006f8a:	a902      	add	r1, sp, #8
 8006f8c:	f107 0008 	add.w	r0, r7, #8
 8006f90:	f7fb fd16 	bl	80029c0 <COPY_IPV6_ADDRESS>
            COPY_IPV6_ADDRESS(ipv6_header_ptr -> nx_ip_header_destination_ip, ip_dst_addr);
 8006f94:	a906      	add	r1, sp, #24
 8006f96:	f107 0018 	add.w	r0, r7, #24
 8006f9a:	f7fb fd11 	bl	80029c0 <COPY_IPV6_ADDRESS>
            NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_src_addr);
 8006f9e:	a802      	add	r0, sp, #8
 8006fa0:	f7fb fd92 	bl	8002ac8 <_nx_ipv6_address_change_endian>
            NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_dst_addr);
 8006fa4:	a806      	add	r0, sp, #24
 8006fa6:	f7fb fd8f 	bl	8002ac8 <_nx_ipv6_address_change_endian>
            packet_ptr -> nx_packet_prepend_ptr += (ULONG)sizeof(NX_IPV6_HEADER);
 8006faa:	68a3      	ldr	r3, [r4, #8]
            data_length = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER);
 8006fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr += (ULONG)sizeof(NX_IPV6_HEADER);
 8006fae:	f103 0128 	add.w	r1, r3, #40	; 0x28
            next_protocol = (val >> 8) & 0xFF;
 8006fb2:	79bb      	ldrb	r3, [r7, #6]
            data_length = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER);
 8006fb4:	3a28      	subs	r2, #40	; 0x28
            packet_ptr -> nx_packet_prepend_ptr += (ULONG)sizeof(NX_IPV6_HEADER);
 8006fb6:	60a1      	str	r1, [r4, #8]
 8006fb8:	e79f      	b.n	8006efa <_nx_ip_packet_checksum_compute+0x1a>
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8006fba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fbc:	06d8      	lsls	r0, r3, #27
 8006fbe:	d5df      	bpl.n	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 8006fc0:	a806      	add	r0, sp, #24
 8006fc2:	ab02      	add	r3, sp, #8
 8006fc4:	2111      	movs	r1, #17
 8006fc6:	9000      	str	r0, [sp, #0]
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7fa fefb 	bl	8001dc4 <_nx_ip_checksum_compute>
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8006fce:	68a1      	ldr	r1, [r4, #8]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8006fd0:	43c3      	mvns	r3, r0
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8006fd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006fd4:	684d      	ldr	r5, [r1, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8006fd6:	b29b      	uxth	r3, r3
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8006fd8:	f020 0010 	bic.w	r0, r0, #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006fdc:	ea85 4235 	eor.w	r2, r5, r5, ror #16
 8006fe0:	0a12      	lsrs	r2, r2, #8
 8006fe2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8006fe6:	ea82 2235 	eor.w	r2, r2, r5, ror #8
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8006fea:	431a      	orrs	r2, r3
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006fec:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 8006ff0:	0a1b      	lsrs	r3, r3, #8
 8006ff2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006ff6:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 8006ffa:	604b      	str	r3, [r1, #4]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8006ffc:	63e0      	str	r0, [r4, #60]	; 0x3c
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 8006ffe:	60a6      	str	r6, [r4, #8]
}
 8007000:	b00a      	add	sp, #40	; 0x28
 8007002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007006:	f8d4 8008 	ldr.w	r8, [r4, #8]
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800700a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800700c:	f898 2000 	ldrb.w	r2, [r8]
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007010:	4641      	mov	r1, r8
 8007012:	07db      	lsls	r3, r3, #31
 8007014:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8007018:	f002 073c 	and.w	r7, r2, #60	; 0x3c
 800701c:	f100 80b5 	bmi.w	800718a <_nx_ip_packet_checksum_compute+0x2aa>
 8007020:	f8d8 0008 	ldr.w	r0, [r8, #8]
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 8007024:	f8d8 e00c 	ldr.w	lr, [r8, #12]
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 8007028:	19ca      	adds	r2, r1, r7
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 800702a:	f8d8 c010 	ldr.w	ip, [r8, #16]
            NX_CHANGE_ULONG_ENDIAN(val);
 800702e:	ea80 4330 	eor.w	r3, r0, r0, ror #16
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 8007032:	ea8e 483e 	eor.w	r8, lr, lr, ror #16
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 8007036:	60a2      	str	r2, [r4, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007038:	ea8c 413c 	eor.w	r1, ip, ip, ror #16
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 800703c:	6a62      	ldr	r2, [r4, #36]	; 0x24
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 800703e:	ea4f 2818 	mov.w	r8, r8, lsr #8
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007042:	0a09      	lsrs	r1, r1, #8
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 8007044:	1bd2      	subs	r2, r2, r7
            NX_CHANGE_ULONG_ENDIAN(val);
 8007046:	0a1b      	lsrs	r3, r3, #8
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 8007048:	f008 17ff 	and.w	r7, r8, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 800704c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(val);
 8007050:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 8007054:	ea87 273e 	eor.w	r7, r7, lr, ror #8
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007058:	ea81 213c 	eor.w	r1, r1, ip, ror #8
            NX_CHANGE_ULONG_ENDIAN(val);
 800705c:	ea83 2330 	eor.w	r3, r3, r0, ror #8
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 8007060:	9702      	str	r7, [sp, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007062:	9106      	str	r1, [sp, #24]
            next_protocol = (val >> 16) & 0xFF;
 8007064:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007068:	e747      	b.n	8006efa <_nx_ip_packet_checksum_compute+0x1a>
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800706a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800706c:	0659      	lsls	r1, r3, #25
 800706e:	d587      	bpl.n	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8007070:	2300      	movs	r3, #0
 8007072:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007076:	4620      	mov	r0, r4
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	f7fa fea3 	bl	8001dc4 <_nx_ip_checksum_compute>
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800707e:	68a1      	ldr	r1, [r4, #8]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007080:	43c3      	mvns	r3, r0
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 8007082:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007084:	680d      	ldr	r5, [r1, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007086:	b29b      	uxth	r3, r3
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 8007088:	f020 0040 	bic.w	r0, r0, #64	; 0x40
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 800708c:	ea85 4235 	eor.w	r2, r5, r5, ror #16
 8007090:	0a12      	lsrs	r2, r2, #8
 8007092:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8007096:	ea82 2235 	eor.w	r2, r2, r5, ror #8
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 800709a:	431a      	orrs	r2, r3
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 800709c:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80070a6:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 80070aa:	600b      	str	r3, [r1, #0]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 80070ac:	63e0      	str	r0, [r4, #60]	; 0x3c
 80070ae:	e767      	b.n	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 80070b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80070b2:	0542      	lsls	r2, r0, #21
 80070b4:	f57f af64 	bpl.w	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80070b8:	68a5      	ldr	r5, [r4, #8]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 80070ba:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070be:	e9d5 1700 	ldrd	r1, r7, [r5]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 80070c2:	ea81 4331 	eor.w	r3, r1, r1, ror #16
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070c6:	ea87 4237 	eor.w	r2, r7, r7, ror #16
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 80070ca:	0a1b      	lsrs	r3, r3, #8
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070cc:	0a12      	lsrs	r2, r2, #8
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 80070ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 80070d6:	ea83 2131 	eor.w	r1, r3, r1, ror #8
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070da:	ea82 2237 	eor.w	r2, r2, r7, ror #8
                checksum += (val & NX_LOWER_16_MASK);
 80070de:	b28b      	uxth	r3, r1
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070e0:	ea82 4732 	eor.w	r7, r2, r2, ror #16
                checksum += (val & NX_LOWER_16_MASK);
 80070e4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070e8:	0a3f      	lsrs	r7, r7, #8
                checksum += (val >> NX_SHIFT_BY_16);
 80070ea:	eb03 4312 	add.w	r3, r3, r2, lsr #16
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
                checksum += (val & NX_LOWER_16_MASK);
 80070f2:	fa13 f382 	uxtah	r3, r3, r2
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070f6:	ea87 2232 	eor.w	r2, r7, r2, ror #8
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 80070fa:	b29f      	uxth	r7, r3
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 80070fc:	606a      	str	r2, [r5, #4]
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 80070fe:	eb07 4213 	add.w	r2, r7, r3, lsr #16
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007102:	b293      	uxth	r3, r2
 8007104:	eb03 4312 	add.w	r3, r3, r2, lsr #16
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007108:	43db      	mvns	r3, r3
 800710a:	b29b      	uxth	r3, r3
 800710c:	430b      	orrs	r3, r1
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 800710e:	ea83 4233 	eor.w	r2, r3, r3, ror #16
 8007112:	0a12      	lsrs	r2, r2, #8
 8007114:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8007118:	ea82 2333 	eor.w	r3, r2, r3, ror #8
 800711c:	602b      	str	r3, [r5, #0]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 800711e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007120:	e72e      	b.n	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8007122:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007124:	075d      	lsls	r5, r3, #29
 8007126:	f57f af2b 	bpl.w	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800712a:	a806      	add	r0, sp, #24
 800712c:	ab02      	add	r3, sp, #8
 800712e:	2106      	movs	r1, #6
 8007130:	9000      	str	r0, [sp, #0]
 8007132:	4620      	mov	r0, r4
 8007134:	f7fa fe46 	bl	8001dc4 <_nx_ip_checksum_compute>
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007138:	68a1      	ldr	r1, [r4, #8]
                checksum = ~checksum & NX_LOWER_16_MASK;
 800713a:	43c5      	mvns	r5, r0
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 800713c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800713e:	6908      	ldr	r0, [r1, #16]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 8007140:	f022 0204 	bic.w	r2, r2, #4
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007144:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 8007148:	0a1b      	lsrs	r3, r3, #8
 800714a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800714e:	ea83 2330 	eor.w	r3, r3, r0, ror #8
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 8007152:	ea43 4005 	orr.w	r0, r3, r5, lsl #16
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007156:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 800715a:	0a1b      	lsrs	r3, r3, #8
 800715c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007160:	ea83 2030 	eor.w	r0, r3, r0, ror #8
 8007164:	6108      	str	r0, [r1, #16]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 8007166:	63e2      	str	r2, [r4, #60]	; 0x3c
 8007168:	e70a      	b.n	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
 800716a:	a806      	add	r0, sp, #24
 800716c:	ab02      	add	r3, sp, #8
 800716e:	213a      	movs	r1, #58	; 0x3a
 8007170:	9000      	str	r0, [sp, #0]
 8007172:	4620      	mov	r0, r4
 8007174:	f7fa fe26 	bl	8001dc4 <_nx_ip_checksum_compute>
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM);
 8007178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                short_val = (USHORT) ~checksum;
 800717a:	43c0      	mvns	r0, r0
                icmpv6_header_ptr -> nx_icmpv6_header_checksum = short_val;
 800717c:	68a2      	ldr	r2, [r4, #8]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM);
 800717e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
                icmpv6_header_ptr -> nx_icmpv6_header_checksum = short_val;
 8007182:	ba40      	rev16	r0, r0
 8007184:	8050      	strh	r0, [r2, #2]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM);
 8007186:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007188:	e6fa      	b.n	8006f80 <_nx_ip_packet_checksum_compute+0xa0>
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800718a:	2300      	movs	r3, #0
 800718c:	463a      	mov	r2, r7
 800718e:	2104      	movs	r1, #4
 8007190:	9500      	str	r5, [sp, #0]
 8007192:	4620      	mov	r0, r4
 8007194:	f7fa fe16 	bl	8001dc4 <_nx_ip_checksum_compute>
                val = val & NX_LOWER_16_MASK;
 8007198:	43c0      	mvns	r0, r0
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 800719a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                val = val & NX_LOWER_16_MASK;
 800719c:	b280      	uxth	r0, r0
 800719e:	68a1      	ldr	r1, [r4, #8]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 80071a0:	f022 0201 	bic.w	r2, r2, #1
                NX_CHANGE_ULONG_ENDIAN(val);
 80071a4:	ea40 4330 	orr.w	r3, r0, r0, ror #16
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80071ae:	ea83 2330 	eor.w	r3, r3, r0, ror #8
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 80071b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80071b6:	4318      	orrs	r0, r3
 80071b8:	f8c8 0008 	str.w	r0, [r8, #8]
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 80071bc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80071be:	e731      	b.n	8007024 <_nx_ip_packet_checksum_compute+0x144>

080071c0 <_nx_ip_packet_receive>:
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 80071c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80071c2:	b1a3      	cbz	r3, 80071ee <_nx_ip_packet_receive+0x2e>
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 80071c4:	688a      	ldr	r2, [r1, #8]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 80071c6:	7813      	ldrb	r3, [r2, #0]

    packet_ptr -> nx_packet_ip_version = ip_version;

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 80071c8:	638a      	str	r2, [r1, #56]	; 0x38
    ip_version = (version_byte >> 4);
 80071ca:	091b      	lsrs	r3, r3, #4
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 80071cc:	2b04      	cmp	r3, #4
    packet_ptr -> nx_packet_ip_version = ip_version;
 80071ce:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 80071d2:	d005      	beq.n	80071e0 <_nx_ip_packet_receive+0x20>
        return;
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (ip_version == NX_IP_VERSION_V6 && ip_ptr -> nx_ipv6_packet_receive)
 80071d4:	2b06      	cmp	r3, #6
 80071d6:	d107      	bne.n	80071e8 <_nx_ip_packet_receive+0x28>
 80071d8:	f8d0 3edc 	ldr.w	r3, [r0, #3804]	; 0xedc
 80071dc:	b123      	cbz	r3, 80071e8 <_nx_ip_packet_receive+0x28>
    {

        /* Call the IPv6 packet handler. */
        (ip_ptr -> nx_ipv6_packet_receive)(ip_ptr, packet_ptr);
 80071de:	4718      	bx	r3
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 80071e0:	f8d0 3ce8 	ldr.w	r3, [r0, #3304]	; 0xce8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1fa      	bne.n	80071de <_nx_ip_packet_receive+0x1e>

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
#endif

    _nx_packet_release(packet_ptr);
 80071e8:	4608      	mov	r0, r1
 80071ea:	f7fb bdaf 	b.w	8002d4c <_nx_packet_release>
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 80071ee:	f600 4348 	addw	r3, r0, #3144	; 0xc48
 80071f2:	634b      	str	r3, [r1, #52]	; 0x34
 80071f4:	e7e6      	b.n	80071c4 <_nx_ip_packet_receive+0x4>
 80071f6:	bf00      	nop

080071f8 <_nx_ipv4_option_process>:
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 80071f8:	688a      	ldr	r2, [r1, #8]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 80071fa:	78d3      	ldrb	r3, [r2, #3]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	3b05      	subs	r3, #5
 8007202:	b2db      	uxtb	r3, r3
{
 8007204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 8007208:	b37b      	cbz	r3, 800726a <_nx_ipv4_option_process+0x72>
UINT            op_timestamp_counter = 0;
 800720a:	2500      	movs	r5, #0
 800720c:	009e      	lsls	r6, r3, #2
 800720e:	3214      	adds	r2, #20
UINT            index = 0;
 8007210:	462b      	mov	r3, r5

        /* Get the option type.  */
        op_type = *option_ptr;

        /* Process the option type. */
        switch (op_type)
 8007212:	7814      	ldrb	r4, [r2, #0]
 8007214:	2c01      	cmp	r4, #1
 8007216:	d031      	beq.n	800727c <_nx_ipv4_option_process+0x84>
 8007218:	d327      	bcc.n	800726a <_nx_ipv4_option_process+0x72>
 800721a:	2c44      	cmp	r4, #68	; 0x44
 800721c:	d129      	bne.n	8007272 <_nx_ipv4_option_process+0x7a>

            /* Update the counter;  */
            op_timestamp_counter++;

            /* Check the counter.  */
            if (op_timestamp_counter > 1)
 800721e:	2d00      	cmp	r5, #0
 8007220:	d141      	bne.n	80072a6 <_nx_ipv4_option_process+0xae>
                /* Return NX_FALSE.  */
                return(NX_FALSE);
            }

            /* Get the option length.  */
            op_length = *(option_ptr + 1);
 8007222:	7854      	ldrb	r4, [r2, #1]

            /* Get the option offset.  */
            op_timestamp_offset = *(option_ptr + 2);

            /* Get the option overflow and flag.  */
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 8007224:	78d7      	ldrb	r7, [r2, #3]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;

            /* Only check the option errors.  */

            /* Check the option length error.  */
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8007226:	f1a4 0e08 	sub.w	lr, r4, #8
            op_timestamp_offset = *(option_ptr + 2);
 800722a:	f892 c002 	ldrb.w	ip, [r2, #2]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800722e:	ea4f 1817 	mov.w	r8, r7, lsr #4
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 8007232:	f007 070f 	and.w	r7, r7, #15
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8007236:	f1be 0f20 	cmp.w	lr, #32
 800723a:	d828      	bhi.n	800728e <_nx_ipv4_option_process+0x96>
 800723c:	f014 0f03 	tst.w	r4, #3
 8007240:	d125      	bne.n	800728e <_nx_ipv4_option_process+0x96>
                /* Return NX_FALSE.  */
                return(NX_FALSE);
            }

            /* Check the option offset error, offset must be greater than 5, and offset must be an odd number.  */
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 8007242:	f1bc 0f04 	cmp.w	ip, #4
 8007246:	d928      	bls.n	800729a <_nx_ipv4_option_process+0xa2>
 8007248:	f01c 0f01 	tst.w	ip, #1
 800724c:	d025      	beq.n	800729a <_nx_ipv4_option_process+0xa2>
                /* Return NX_FALSE.  */
                return(NX_FALSE);
            }

            /* Check the option overflow error.  */
            if (op_timestamp_overflow == 15)
 800724e:	f1b8 0f0f 	cmp.w	r8, #15
 8007252:	d016      	beq.n	8007282 <_nx_ipv4_option_process+0x8a>
                /* Return NX_FALSE.  */
                return(NX_FALSE);
            }

            /* Check the option flags error.  */
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 8007254:	2f01      	cmp	r7, #1
 8007256:	d901      	bls.n	800725c <_nx_ipv4_option_process+0x64>
 8007258:	2f03      	cmp	r7, #3
 800725a:	d112      	bne.n	8007282 <_nx_ipv4_option_process+0x8a>
 800725c:	2501      	movs	r5, #1
        op_length = *(option_ptr + 1);

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 800725e:	4423      	add	r3, r4
 8007260:	42b3      	cmp	r3, r6
 8007262:	d809      	bhi.n	8007278 <_nx_ipv4_option_process+0x80>
        {
            return(NX_FALSE);
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 8007264:	4422      	add	r2, r4
    while (index < ip_option_length)
 8007266:	42b3      	cmp	r3, r6
 8007268:	d3d3      	bcc.n	8007212 <_nx_ipv4_option_process+0x1a>
            return(NX_TRUE);
 800726a:	2501      	movs	r5, #1
        index += op_length;
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
}
 800726c:	4628      	mov	r0, r5
 800726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007272:	7854      	ldrb	r4, [r2, #1]
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 8007274:	2c01      	cmp	r4, #1
 8007276:	d8f2      	bhi.n	800725e <_nx_ipv4_option_process+0x66>
            return(NX_FALSE);
 8007278:	2500      	movs	r5, #0
 800727a:	e7f7      	b.n	800726c <_nx_ipv4_option_process+0x74>
            option_ptr++;
 800727c:	3201      	adds	r2, #1
            index++;
 800727e:	3301      	adds	r3, #1
            continue;
 8007280:	e7f1      	b.n	8007266 <_nx_ipv4_option_process+0x6e>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 8007282:	3318      	adds	r3, #24
 8007284:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8007288:	f7fe fc04 	bl	8005a94 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800728c:	e7ee      	b.n	800726c <_nx_ipv4_option_process+0x74>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800728e:	3316      	adds	r3, #22
 8007290:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8007294:	f7fe fbfe 	bl	8005a94 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8007298:	e7e8      	b.n	800726c <_nx_ipv4_option_process+0x74>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 800729a:	3317      	adds	r3, #23
 800729c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80072a0:	f7fe fbf8 	bl	8005a94 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80072a4:	e7e2      	b.n	800726c <_nx_ipv4_option_process+0x74>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 80072a6:	3316      	adds	r3, #22
 80072a8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80072ac:	f7fe fbf2 	bl	8005a94 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80072b0:	2500      	movs	r5, #0
 80072b2:	e7db      	b.n	800726c <_nx_ipv4_option_process+0x74>

080072b4 <_nx_ipv6_header_add>:
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_header_add(NX_IP *ip_ptr, NX_PACKET **packet_pptr,
                         ULONG protocol, ULONG payload_size, ULONG hop_limit,
                         ULONG *src_address, ULONG *dest_address, ULONG *fragment)
{
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	9c09      	ldr	r4, [sp, #36]	; 0x24

NX_IPV6_HEADER            *ip_header_ptr;
NX_PACKET                 *packet_ptr = *packet_pptr;
 80072b8:	6808      	ldr	r0, [r1, #0]
{
 80072ba:	9906      	ldr	r1, [sp, #24]
#endif

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    if (fragment)
 80072bc:	b10c      	cbz	r4, 80072c2 <_nx_ipv6_header_add+0xe>
    {
#ifndef NX_DISABLE_FRAGMENTATION
        /* By default, it is fragmentable. */
        *fragment = NX_TRUE;
 80072be:	2501      	movs	r5, #1
 80072c0:	6025      	str	r5, [r4, #0]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);

        /* Increase header length. */
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80072c2:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);
 80072c6:	6a47      	ldr	r7, [r0, #36]	; 0x24
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 80072c8:	6884      	ldr	r4, [r0, #8]
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80072ca:	3528      	adds	r5, #40	; 0x28
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);
 80072cc:	3728      	adds	r7, #40	; 0x28
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV6_HEADER);
 80072ce:	f1a4 0628 	sub.w	r6, r4, #40	; 0x28
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80072d2:	b2ed      	uxtb	r5, r5
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);
 80072d4:	6247      	str	r7, [r0, #36]	; 0x24
                                                           sizeof(NX_IPV6_HEADER));


        /* If the interface IP address is not valid (in DAD state), only ICMP is allowed */
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 80072d6:	6b47      	ldr	r7, [r0, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 80072d8:	6384      	str	r4, [r0, #56]	; 0x38
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80072da:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV6_HEADER);
 80072de:	6086      	str	r6, [r0, #8]
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 80072e0:	78bf      	ldrb	r7, [r7, #2]
 80072e2:	2f04      	cmp	r7, #4
 80072e4:	d006      	beq.n	80072f4 <_nx_ipv6_header_add+0x40>
               check whether the interface address is in tentative state and the protocol
               is ICMPv6-DAD. */

            /* This check is needed only if DAD is not disabled.
               If DAD is disabled, we drop the packet. */
            if (!((protocol == NX_PROTOCOL_ICMPV6) &&
 80072e6:	2f01      	cmp	r7, #1
 80072e8:	d10c      	bne.n	8007304 <_nx_ipv6_header_add+0x50>
 80072ea:	2a3a      	cmp	r2, #58	; 0x3a
 80072ec:	d10a      	bne.n	8007304 <_nx_ipv6_header_add+0x50>
 80072ee:	5d75      	ldrb	r5, [r6, r5]
 80072f0:	2d87      	cmp	r5, #135	; 0x87
 80072f2:	d107      	bne.n	8007304 <_nx_ipv6_header_add+0x50>
            }
        }

        /* If the IP header won't fit, return an error.  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 80072f4:	6905      	ldr	r5, [r0, #16]
 80072f6:	42ae      	cmp	r6, r5
 80072f8:	d208      	bcs.n	800730c <_nx_ipv6_header_add+0x58>
 80072fa:	f04f 30ff 	mov.w	r0, #4294967295
 80072fe:	f006 fb9d 	bl	800da3c <_tx_thread_sleep>
 8007302:	e7fa      	b.n	80072fa <_nx_ipv6_header_add+0x46>
                _nx_packet_transmit_release(packet_ptr);
 8007304:	f7fb fd88 	bl	8002e18 <_nx_packet_transmit_release>
                return(NX_NO_INTERFACE_ADDRESS);
 8007308:	2050      	movs	r0, #80	; 0x50
    }

#endif /* NX_IPSEC_ENABLE */

    return(NX_SUCCESS);
}
 800730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ip_header_ptr -> nx_ip_header_word_1 = (payload_size << 16) | (protocol << 8) | (hop_limit);
 800730c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 8007310:	f1a4 0520 	sub.w	r5, r4, #32
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8007314:	2160      	movs	r1, #96	; 0x60
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8007316:	6386      	str	r6, [r0, #56]	; 0x38
        ip_header_ptr -> nx_ip_header_word_1 = (payload_size << 16) | (protocol << 8) | (hop_limit);
 8007318:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        COPY_IPV6_ADDRESS(dest_address, ip_header_ptr -> nx_ip_header_destination_ip);
 800731c:	f1a4 0610 	sub.w	r6, r4, #16
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8007320:	f844 1c28 	str.w	r1, [r4, #-40]
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 8007324:	4629      	mov	r1, r5
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8007326:	ea82 4332 	eor.w	r3, r2, r2, ror #16
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 800732a:	9807      	ldr	r0, [sp, #28]
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007332:	ea83 2332 	eor.w	r3, r3, r2, ror #8
 8007336:	f844 3c24 	str.w	r3, [r4, #-36]
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 800733a:	f7fb fb41 	bl	80029c0 <COPY_IPV6_ADDRESS>
        COPY_IPV6_ADDRESS(dest_address, ip_header_ptr -> nx_ip_header_destination_ip);
 800733e:	4631      	mov	r1, r6
 8007340:	9808      	ldr	r0, [sp, #32]
 8007342:	f7fb fb3d 	bl	80029c0 <COPY_IPV6_ADDRESS>
        NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8007346:	4630      	mov	r0, r6
 8007348:	f7fb fbbe 	bl	8002ac8 <_nx_ipv6_address_change_endian>
        NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800734c:	4628      	mov	r0, r5
 800734e:	f7fb fbbb 	bl	8002ac8 <_nx_ipv6_address_change_endian>
    return(NX_SUCCESS);
 8007352:	2000      	movs	r0, #0
}
 8007354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007356:	bf00      	nop

08007358 <_nx_ipv6_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                          ULONG protocol, ULONG payload_size, ULONG hop_limit,
                          ULONG *src_address, ULONG *dest_address)
{
 8007358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UINT                       same_address;
NX_INTERFACE              *if_ptr;
NX_IPV6_DESTINATION_ENTRY *dest_entry_ptr;

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800735c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
{
 800735e:	b096      	sub	sp, #88	; 0x58
ULONG                      fragment = NX_TRUE;
 8007360:	2601      	movs	r6, #1
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8007362:	6864      	ldr	r4, [r4, #4]
ULONG                      fragment = NX_TRUE;
 8007364:	9607      	str	r6, [sp, #28]
{
 8007366:	9105      	str	r1, [sp, #20]
 8007368:	e9dd 861d 	ldrd	r8, r6, [sp, #116]	; 0x74

    /* Interface can not be NULL. */
    NX_ASSERT(if_ptr != NX_NULL);
 800736c:	b174      	cbz	r4, 800738c <_nx_ipv6_packet_send+0x34>

    /* Add IPv6 header. */
    if (_nx_ipv6_header_add(ip_ptr, &packet_ptr, protocol, payload_size,
 800736e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007370:	af07      	add	r7, sp, #28
 8007372:	4605      	mov	r5, r0
 8007374:	9100      	str	r1, [sp, #0]
 8007376:	a905      	add	r1, sp, #20
 8007378:	9703      	str	r7, [sp, #12]
 800737a:	e9cd 8601 	strd	r8, r6, [sp, #4]
 800737e:	f7ff ff99 	bl	80072b4 <_nx_ipv6_header_add>
 8007382:	4607      	mov	r7, r0
 8007384:	b158      	cbz	r0, 800739e <_nx_ipv6_packet_send+0x46>
    /* Driver entry must not be NULL. */
    NX_ASSERT(if_ptr -> nx_interface_link_driver_entry != NX_NULL);

    /* Send the IP packet out on the network via the attached driver.  */
    (if_ptr -> nx_interface_link_driver_entry)(&driver_request);
}
 8007386:	b016      	add	sp, #88	; 0x58
 8007388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NX_ASSERT(if_ptr != NX_NULL);
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	f006 fb54 	bl	800da3c <_tx_thread_sleep>
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	f006 fb50 	bl	800da3c <_tx_thread_sleep>
 800739c:	e7f6      	b.n	800738c <_nx_ipv6_packet_send+0x34>
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800739e:	9a05      	ldr	r2, [sp, #20]
    same_address = (UINT)CHECK_IPV6_ADDRESSES_SAME(dest_address, src_address);
 80073a0:	4641      	mov	r1, r8
 80073a2:	4630      	mov	r0, r6
    next_hop_mtu = if_ptr -> nx_interface_ip_mtu_size;
 80073a4:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 80073a8:	6893      	ldr	r3, [r2, #8]
 80073aa:	6393      	str	r3, [r2, #56]	; 0x38
    same_address = (UINT)CHECK_IPV6_ADDRESSES_SAME(dest_address, src_address);
 80073ac:	f7fb fade 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
    if (same_address == 1)
 80073b0:	2801      	cmp	r0, #1
 80073b2:	d073      	beq.n	800749c <_nx_ipv6_packet_send+0x144>
        address_type = IPv6_Address_Type(dest_address);
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7fb fb1d 	bl	80029f4 <IPv6_Address_Type>
    if (address_type == IPV6_ADDRESS_LOOPBACK)
 80073ba:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80073be:	d06d      	beq.n	800749c <_nx_ipv6_packet_send+0x144>
    driver_request.nx_ip_driver_packet               = packet_ptr;
 80073c0:	9905      	ldr	r1, [sp, #20]
    driver_request.nx_ip_driver_ptr                  = ip_ptr;
 80073c2:	9514      	str	r5, [sp, #80]	; 0x50
    driver_request.nx_ip_driver_command              = NX_LINK_PACKET_SEND;
 80073c4:	970e      	str	r7, [sp, #56]	; 0x38
    driver_request.nx_ip_driver_interface            = NX_NULL;
 80073c6:	9715      	str	r7, [sp, #84]	; 0x54
    driver_request.nx_ip_driver_packet               = packet_ptr;
 80073c8:	9112      	str	r1, [sp, #72]	; 0x48
    if (if_ptr -> nx_interface_address_mapping_needed)
 80073ca:	7963      	ldrb	r3, [r4, #5]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d061      	beq.n	8007494 <_nx_ipv6_packet_send+0x13c>
        if ((dest_address[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 80073d0:	6833      	ldr	r3, [r6, #0]
 80073d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80073d6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80073da:	d11b      	bne.n	8007414 <_nx_ipv6_packet_send+0xbc>
            driver_request.nx_ip_driver_physical_address_lsw = dest_address[3];
 80073dc:	68f2      	ldr	r2, [r6, #12]
            driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 80073de:	f243 3333 	movw	r3, #13107	; 0x3333
            driver_request.nx_ip_driver_interface            = if_ptr;
 80073e2:	9415      	str	r4, [sp, #84]	; 0x54
            driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 80073e4:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    if (packet_ptr -> nx_packet_length > next_hop_mtu)
 80073e8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80073ea:	4543      	cmp	r3, r8
 80073ec:	d80d      	bhi.n	800740a <_nx_ipv6_packet_send+0xb2>
    NX_ASSERT(if_ptr -> nx_interface_link_driver_entry != NX_NULL);
 80073ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80073f0:	b113      	cbz	r3, 80073f8 <_nx_ipv6_packet_send+0xa0>
    (if_ptr -> nx_interface_link_driver_entry)(&driver_request);
 80073f2:	a80e      	add	r0, sp, #56	; 0x38
 80073f4:	4798      	blx	r3
 80073f6:	e7c6      	b.n	8007386 <_nx_ipv6_packet_send+0x2e>
    NX_ASSERT(if_ptr -> nx_interface_link_driver_entry != NX_NULL);
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	f006 fb1e 	bl	800da3c <_tx_thread_sleep>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	f006 fb1a 	bl	800da3c <_tx_thread_sleep>
 8007408:	e7f6      	b.n	80073f8 <_nx_ipv6_packet_send+0xa0>
            _nx_ipv6_fragment_process(&driver_request, next_hop_mtu);
 800740a:	4641      	mov	r1, r8
 800740c:	a80e      	add	r0, sp, #56	; 0x38
 800740e:	f002 febb 	bl	800a188 <_nx_ipv6_fragment_process>
        return;
 8007412:	e7b8      	b.n	8007386 <_nx_ipv6_packet_send+0x2e>
            SET_UNSPECIFIED_ADDRESS(next_hop_address);
 8007414:	a80a      	add	r0, sp, #40	; 0x28
        ND_CACHE_ENTRY *NDCacheEntry = NX_NULL;
 8007416:	9709      	str	r7, [sp, #36]	; 0x24
            SET_UNSPECIFIED_ADDRESS(next_hop_address);
 8007418:	f7fb facc 	bl	80029b4 <SET_UNSPECIFIED_ADDRESS>
            status = _nx_icmpv6_dest_table_find(ip_ptr, dest_address, &dest_entry_ptr, 0, 0);
 800741c:	9700      	str	r7, [sp, #0]
 800741e:	463b      	mov	r3, r7
 8007420:	aa08      	add	r2, sp, #32
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	f002 fe21 	bl	800a06c <_nx_icmpv6_dest_table_find>
            if (status != NX_SUCCESS)
 800742a:	2800      	cmp	r0, #0
 800742c:	f000 8082 	beq.w	8007534 <_nx_ipv6_packet_send+0x1dc>
                if (_nxd_ipv6_search_onlink(ip_ptr, dest_address))
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	f002 fcee 	bl	8009e14 <_nxd_ipv6_search_onlink>
 8007438:	2800      	cmp	r0, #0
 800743a:	d05f      	beq.n	80074fc <_nx_ipv6_packet_send+0x1a4>
                    COPY_IPV6_ADDRESS(dest_address, next_hop_address);
 800743c:	4630      	mov	r0, r6
 800743e:	a90a      	add	r1, sp, #40	; 0x28
 8007440:	f7fb fabe 	bl	80029c0 <COPY_IPV6_ADDRESS>
                                                       NX_WAIT_FOREVER, packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
 8007444:	9905      	ldr	r1, [sp, #20]
                    status = _nx_icmpv6_dest_table_add(ip_ptr, dest_address, &dest_entry_ptr,
 8007446:	f04f 33ff 	mov.w	r3, #4294967295
 800744a:	aa08      	add	r2, sp, #32
 800744c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800744e:	4631      	mov	r1, r6
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	ab0a      	add	r3, sp, #40	; 0x28
 8007454:	9002      	str	r0, [sp, #8]
 8007456:	4628      	mov	r0, r5
 8007458:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800745a:	9600      	str	r6, [sp, #0]
 800745c:	f002 fd6c 	bl	8009f38 <_nx_icmpv6_dest_table_add>
                    if (status == NX_SUCCESS)
 8007460:	2800      	cmp	r0, #0
 8007462:	d132      	bne.n	80074ca <_nx_ipv6_packet_send+0x172>
                        NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 8007464:	9b08      	ldr	r3, [sp, #32]
 8007466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007468:	9209      	str	r2, [sp, #36]	; 0x24
            if ((NDCacheEntry -> nx_nd_cache_nd_status >= ND_CACHE_STATE_REACHABLE) &&
 800746a:	7e56      	ldrb	r6, [r2, #25]
 800746c:	9905      	ldr	r1, [sp, #20]
 800746e:	1eb3      	subs	r3, r6, #2
 8007470:	2b03      	cmp	r3, #3
 8007472:	d82e      	bhi.n	80074d2 <_nx_ipv6_packet_send+0x17a>
                driver_request.nx_ip_driver_physical_address_msw = ((ULONG)mac_addr[0] << 8) | mac_addr[1];
 8007474:	8a13      	ldrh	r3, [r2, #16]
                if (NDCacheEntry -> nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 8007476:	2e03      	cmp	r6, #3
                driver_request.nx_ip_driver_physical_address_msw = ((ULONG)mac_addr[0] << 8) | mac_addr[1];
 8007478:	ba5b      	rev16	r3, r3
 800747a:	b29b      	uxth	r3, r3
 800747c:	9310      	str	r3, [sp, #64]	; 0x40
 800747e:	f8d2 3012 	ldr.w	r3, [r2, #18]
                driver_request.nx_ip_driver_interface            = if_ptr;
 8007482:	9415      	str	r4, [sp, #84]	; 0x54
 8007484:	ba1b      	rev	r3, r3
                driver_request.nx_ip_driver_physical_address_lsw =
 8007486:	9311      	str	r3, [sp, #68]	; 0x44
                if (NDCacheEntry -> nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 8007488:	d1ae      	bne.n	80073e8 <_nx_ipv6_packet_send+0x90>
                    NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_DELAY;
 800748a:	2004      	movs	r0, #4
                    NDCacheEntry -> nx_nd_cache_timer_tick = NX_DELAY_FIRST_PROBE_TIME;
 800748c:	2305      	movs	r3, #5
                    NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_DELAY;
 800748e:	7650      	strb	r0, [r2, #25]
                    NDCacheEntry -> nx_nd_cache_timer_tick = NX_DELAY_FIRST_PROBE_TIME;
 8007490:	61d3      	str	r3, [r2, #28]
 8007492:	e7a9      	b.n	80073e8 <_nx_ipv6_packet_send+0x90>
        driver_request.nx_ip_driver_physical_address_lsw = 0;
 8007494:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
        driver_request.nx_ip_driver_interface            = if_ptr;
 8007498:	9415      	str	r4, [sp, #84]	; 0x54
 800749a:	e7a5      	b.n	80073e8 <_nx_ipv6_packet_send+0x90>
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 800749c:	2300      	movs	r3, #0
 800749e:	f8d5 2638 	ldr.w	r2, [r5, #1592]	; 0x638
 80074a2:	a90e      	add	r1, sp, #56	; 0x38
 80074a4:	9805      	ldr	r0, [sp, #20]
 80074a6:	f000 f975 	bl	8007794 <_nx_packet_copy>
 80074aa:	b970      	cbnz	r0, 80074ca <_nx_ipv6_packet_send+0x172>
            if (packet_copy -> nx_packet_interface_capability_flag)
 80074ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b0:	b11a      	cbz	r2, 80074ba <_nx_ipv6_packet_send+0x162>
                _nx_ip_packet_checksum_compute(packet_copy);
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fd14 	bl	8006ee0 <_nx_ip_packet_checksum_compute>
 80074b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            packet_copy -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 80074ba:	9a05      	ldr	r2, [sp, #20]
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 80074bc:	4628      	mov	r0, r5
 80074be:	4619      	mov	r1, r3
            packet_copy -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 80074c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074c2:	6852      	ldr	r2, [r2, #4]
 80074c4:	635a      	str	r2, [r3, #52]	; 0x34
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 80074c6:	f7fa fe07 	bl	80020d8 <_nx_ip_packet_deferred_receive>
                    _nx_packet_transmit_release(packet_ptr);
 80074ca:	9805      	ldr	r0, [sp, #20]
 80074cc:	f7fb fca4 	bl	8002e18 <_nx_packet_transmit_release>
                    return;
 80074d0:	e759      	b.n	8007386 <_nx_ipv6_packet_send+0x2e>
                packet_ptr -> nx_packet_queue_next = NX_NULL;
 80074d2:	2300      	movs	r3, #0
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_head == NX_NULL)
 80074d4:	6a90      	ldr	r0, [r2, #40]	; 0x28
                packet_ptr -> nx_packet_queue_next = NX_NULL;
 80074d6:	61cb      	str	r3, [r1, #28]
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_head == NX_NULL)
 80074d8:	2800      	cmp	r0, #0
 80074da:	d03b      	beq.n	8007554 <_nx_ipv6_packet_send+0x1fc>
                NDCacheEntry -> nx_nd_cache_packet_waiting_tail -> nx_packet_queue_next = packet_ptr;
 80074dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80074de:	61d9      	str	r1, [r3, #28]
                NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length++;
 80074e0:	7e94      	ldrb	r4, [r2, #26]
                NDCacheEntry -> nx_nd_cache_packet_waiting_tail = packet_ptr;
 80074e2:	62d1      	str	r1, [r2, #44]	; 0x2c
                NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length++;
 80074e4:	1c63      	adds	r3, r4, #1
 80074e6:	b2db      	uxtb	r3, r3
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length > NX_ND_MAX_QUEUE_DEPTH)
 80074e8:	2b04      	cmp	r3, #4
                NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length++;
 80074ea:	7693      	strb	r3, [r2, #26]
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length > NX_ND_MAX_QUEUE_DEPTH)
 80074ec:	f67f af4b 	bls.w	8007386 <_nx_ipv6_packet_send+0x2e>
                    NDCacheEntry -> nx_nd_cache_packet_waiting_head = remove_packet -> nx_packet_queue_next;
 80074f0:	69c3      	ldr	r3, [r0, #28]
                    NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length--;
 80074f2:	7694      	strb	r4, [r2, #26]
                    NDCacheEntry -> nx_nd_cache_packet_waiting_head = remove_packet -> nx_packet_queue_next;
 80074f4:	6293      	str	r3, [r2, #40]	; 0x28
                    _nx_packet_transmit_release(remove_packet);
 80074f6:	f7fb fc8f 	bl	8002e18 <_nx_packet_transmit_release>
 80074fa:	e744      	b.n	8007386 <_nx_ipv6_packet_send+0x2e>
                else if (_nxd_ipv6_router_lookup(ip_ptr, if_ptr, next_hop_address, /*lint -e{929}*/ (void **)&NDCacheEntry) == NX_SUCCESS)
 80074fc:	ab09      	add	r3, sp, #36	; 0x24
 80074fe:	aa0a      	add	r2, sp, #40	; 0x28
 8007500:	4621      	mov	r1, r4
 8007502:	4628      	mov	r0, r5
 8007504:	f002 fa92 	bl	8009a2c <_nxd_ipv6_router_lookup>
 8007508:	2800      	cmp	r0, #0
 800750a:	d1de      	bne.n	80074ca <_nx_ipv6_packet_send+0x172>
                                                       NX_WAIT_FOREVER, packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
 800750c:	9b05      	ldr	r3, [sp, #20]
                    status = _nx_icmpv6_dest_table_add(ip_ptr, dest_address, &dest_entry_ptr,
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	4631      	mov	r1, r6
 8007514:	aa08      	add	r2, sp, #32
 8007516:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007518:	ab0a      	add	r3, sp, #40	; 0x28
 800751a:	9001      	str	r0, [sp, #4]
 800751c:	4628      	mov	r0, r5
 800751e:	9602      	str	r6, [sp, #8]
 8007520:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007522:	9600      	str	r6, [sp, #0]
 8007524:	f002 fd08 	bl	8009f38 <_nx_icmpv6_dest_table_add>
                    if ((status == NX_SUCCESS) && !NDCacheEntry)
 8007528:	2800      	cmp	r0, #0
 800752a:	d1ce      	bne.n	80074ca <_nx_ipv6_packet_send+0x172>
 800752c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800752e:	2a00      	cmp	r2, #0
 8007530:	d19b      	bne.n	800746a <_nx_ipv6_packet_send+0x112>
 8007532:	e797      	b.n	8007464 <_nx_ipv6_packet_send+0x10c>
                NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 8007534:	9808      	ldr	r0, [sp, #32]
                COPY_IPV6_ADDRESS(dest_entry_ptr -> nx_ipv6_destination_entry_next_hop, next_hop_address);
 8007536:	a90a      	add	r1, sp, #40	; 0x28
                NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 8007538:	6a43      	ldr	r3, [r0, #36]	; 0x24
                COPY_IPV6_ADDRESS(dest_entry_ptr -> nx_ipv6_destination_entry_next_hop, next_hop_address);
 800753a:	3014      	adds	r0, #20
                NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 800753c:	9309      	str	r3, [sp, #36]	; 0x24
                COPY_IPV6_ADDRESS(dest_entry_ptr -> nx_ipv6_destination_entry_next_hop, next_hop_address);
 800753e:	f7fb fa3f 	bl	80029c0 <COPY_IPV6_ADDRESS>
                NX_ASSERT(NDCacheEntry -> nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID);
 8007542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007544:	7e53      	ldrb	r3, [r2, #25]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d18f      	bne.n	800746a <_nx_ipv6_packet_send+0x112>
 800754a:	f04f 30ff 	mov.w	r0, #4294967295
 800754e:	f006 fa75 	bl	800da3c <_tx_thread_sleep>
 8007552:	e7fa      	b.n	800754a <_nx_ipv6_packet_send+0x1f2>
                    if (ip_ptr -> nx_ip_icmpv6_packet_process)
 8007554:	f8d5 388c 	ldr.w	r3, [r5, #2188]	; 0x88c
 8007558:	b1c3      	cbz	r3, 800758c <_nx_ipv6_packet_send+0x234>
                        NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length = 1;
 800755a:	2001      	movs	r0, #1
                        if (NDCacheEntry -> nx_nd_cache_nd_status == ND_CACHE_STATE_CREATED)
 800755c:	2e06      	cmp	r6, #6
                        NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length = 1;
 800755e:	7690      	strb	r0, [r2, #26]
                        NDCacheEntry -> nx_nd_cache_outgoing_address = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8007560:	6b4b      	ldr	r3, [r1, #52]	; 0x34
                            NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INCOMPLETE;
 8007562:	bf08      	it	eq
 8007564:	7650      	strbeq	r0, [r2, #25]
                        _nx_icmpv6_send_ns(ip_ptr, next_hop_address,
 8007566:	2000      	movs	r0, #0
                        NDCacheEntry -> nx_nd_cache_outgoing_address = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8007568:	6313      	str	r3, [r2, #48]	; 0x30
                        NDCacheEntry -> nx_nd_cache_interface_ptr = if_ptr;
 800756a:	6214      	str	r4, [r2, #32]
                        NDCacheEntry -> nx_nd_cache_packet_waiting_tail = packet_ptr;
 800756c:	e9c2 110a 	strd	r1, r1, [r2, #40]	; 0x28
                        _nx_icmpv6_send_ns(ip_ptr, next_hop_address,
 8007570:	9201      	str	r2, [sp, #4]
 8007572:	a90a      	add	r1, sp, #40	; 0x28
 8007574:	9000      	str	r0, [sp, #0]
 8007576:	2201      	movs	r2, #1
 8007578:	4628      	mov	r0, r5
 800757a:	f7fe fd89 	bl	8006090 <_nx_icmpv6_send_ns>
                        NDCacheEntry -> nx_nd_cache_num_solicit = NX_MAX_MULTICAST_SOLICIT - 1;
 800757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007580:	2202      	movs	r2, #2
 8007582:	761a      	strb	r2, [r3, #24]
                        NDCacheEntry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_retrans_timer_ticks;
 8007584:	f8d5 2ee0 	ldr.w	r2, [r5, #3808]	; 0xee0
 8007588:	61da      	str	r2, [r3, #28]
 800758a:	e6fc      	b.n	8007386 <_nx_ipv6_packet_send+0x2e>
                        _nx_packet_transmit_release(packet_ptr);
 800758c:	4608      	mov	r0, r1
 800758e:	f7fb fc43 	bl	8002e18 <_nx_packet_transmit_release>
 8007592:	e6f8      	b.n	8007386 <_nx_ipv6_packet_send+0x2e>

08007594 <_nx_ipv6_prefix_list_delete_entry>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_prefix_list_delete_entry(NX_IP *ip_ptr, NX_IPV6_PREFIX_ENTRY *entry)
{
 8007594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Search through each physical interface for a match. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
    {

        /* Get a pointer to the first address in the interface list. */
        interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8007598:	f8d0 4c68 	ldr.w	r4, [r0, #3176]	; 0xc68
{
 800759c:	b088      	sub	sp, #32
 800759e:	4680      	mov	r8, r0
 80075a0:	460e      	mov	r6, r1
        interface_ipv6_address_prev = NX_NULL;

        /* Search the address list for a match. */
        while (interface_ipv6_address)
 80075a2:	b364      	cbz	r4, 80075fe <_nx_ipv6_prefix_list_delete_entry+0x6a>
        interface_ipv6_address_prev = NX_NULL;
 80075a4:	2500      	movs	r5, #0
            {

                /* Yes.  Extract the prefix to match on. The prefix length is 64 bits. */
                address_prefix[0] = interface_ipv6_address -> nxd_ipv6_address[0];
                address_prefix[1] = interface_ipv6_address -> nxd_ipv6_address[1];
                address_prefix[2] = 0;
 80075a6:	462f      	mov	r7, r5
 80075a8:	e003      	b.n	80075b2 <_nx_ipv6_prefix_list_delete_entry+0x1e>

            /* Set the previous address. */
            interface_ipv6_address_prev = interface_ipv6_address;

            /* Get the next address. */
            interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 80075aa:	69a3      	ldr	r3, [r4, #24]
 80075ac:	4625      	mov	r5, r4
 80075ae:	461c      	mov	r4, r3
        while (interface_ipv6_address)
 80075b0:	b32b      	cbz	r3, 80075fe <_nx_ipv6_prefix_list_delete_entry+0x6a>
            if (interface_ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_UNKNOWN &&
 80075b2:	78a3      	ldrb	r3, [r4, #2]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0f8      	beq.n	80075aa <_nx_ipv6_prefix_list_delete_entry+0x16>
 80075b8:	7f63      	ldrb	r3, [r4, #29]
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d1f5      	bne.n	80075aa <_nx_ipv6_prefix_list_delete_entry+0x16>
                address_prefix[0] = interface_ipv6_address -> nxd_ipv6_address[0];
 80075be:	68a2      	ldr	r2, [r4, #8]
                if (CHECK_IPV6_ADDRESSES_SAME(address_prefix, entry -> nx_ipv6_prefix_entry_network_address))
 80075c0:	4631      	mov	r1, r6
                address_prefix[1] = interface_ipv6_address -> nxd_ipv6_address[1];
 80075c2:	68e3      	ldr	r3, [r4, #12]
                if (CHECK_IPV6_ADDRESSES_SAME(address_prefix, entry -> nx_ipv6_prefix_entry_network_address))
 80075c4:	4668      	mov	r0, sp
                address_prefix[1] = interface_ipv6_address -> nxd_ipv6_address[1];
 80075c6:	e9cd 2300 	strd	r2, r3, [sp]
                address_prefix[3] = 0;
 80075ca:	e9cd 7702 	strd	r7, r7, [sp, #8]
                if (CHECK_IPV6_ADDRESSES_SAME(address_prefix, entry -> nx_ipv6_prefix_entry_network_address))
 80075ce:	f7fb f9cd 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d0e9      	beq.n	80075aa <_nx_ipv6_prefix_list_delete_entry+0x16>
                    interface_ipv6_address -> nxd_ipv6_address_valid = NX_FALSE;
 80075d6:	7027      	strb	r7, [r4, #0]
                    interface_ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_UNKNOWN;
 80075d8:	70a7      	strb	r7, [r4, #2]
                    interface_ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit = 0;
 80075da:	83a7      	strh	r7, [r4, #28]
 80075dc:	69a3      	ldr	r3, [r4, #24]
                    if (interface_ipv6_address_prev == NX_NULL)
 80075de:	b315      	cbz	r5, 8007626 <_nx_ipv6_prefix_list_delete_entry+0x92>
                        interface_ipv6_address_prev -> nxd_ipv6_address_next = interface_ipv6_address -> nxd_ipv6_address_next;
 80075e0:	61ab      	str	r3, [r5, #24]
                    SET_SOLICITED_NODE_MULTICAST_ADDRESS(multicast_address, interface_ipv6_address -> nxd_ipv6_address);
 80075e2:	f104 0508 	add.w	r5, r4, #8
 80075e6:	a804      	add	r0, sp, #16
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7fb f9f3 	bl	80029d4 <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
                    _nx_ipv6_multicast_leave(ip_ptr, &multicast_address[0], interface_ipv6_address -> nxd_ipv6_address_attached);
 80075ee:	a904      	add	r1, sp, #16
 80075f0:	6862      	ldr	r2, [r4, #4]
 80075f2:	4640      	mov	r0, r8
 80075f4:	f002 fed2 	bl	800a39c <_nx_ipv6_multicast_leave>
                    SET_UNSPECIFIED_ADDRESS(interface_ipv6_address -> nxd_ipv6_address);
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7fb f9db 	bl	80029b4 <SET_UNSPECIFIED_ADDRESS>
 80075fe:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
        } /* while (interface_ipv6_address) */
    } /* for(i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++) */

    /* Unlink the previous node, if it exists. */
    if (entry -> nx_ipv6_prefix_entry_prev == NX_NULL)
 8007602:	b19a      	cbz	r2, 800762c <_nx_ipv6_prefix_list_delete_entry+0x98>
    {
        ip_ptr -> nx_ipv6_prefix_list_ptr = entry -> nx_ipv6_prefix_entry_next;
    }
    else
    {
        entry -> nx_ipv6_prefix_entry_prev -> nx_ipv6_prefix_entry_next = entry -> nx_ipv6_prefix_entry_next;
 8007604:	61d3      	str	r3, [r2, #28]
 8007606:	69f3      	ldr	r3, [r6, #28]
    }

    /* Unlink the next node if it exists. */
    if (entry -> nx_ipv6_prefix_entry_next)
 8007608:	b103      	cbz	r3, 800760c <_nx_ipv6_prefix_list_delete_entry+0x78>
    {
        entry -> nx_ipv6_prefix_entry_next -> nx_ipv6_prefix_entry_prev = entry -> nx_ipv6_prefix_entry_prev;
 800760a:	619a      	str	r2, [r3, #24]
    }

    /* Clean up this entry. */
    entry -> nx_ipv6_prefix_entry_next = NX_NULL;
 800760c:	2200      	movs	r2, #0
    entry -> nx_ipv6_prefix_entry_prev = NX_NULL;

    /* Put entry onto the free list.*/
    if (ip_ptr -> nx_ipv6_prefix_entry_free_list == NX_NULL)
 800760e:	f8d8 3ed8 	ldr.w	r3, [r8, #3800]	; 0xed8
    entry -> nx_ipv6_prefix_entry_prev = NX_NULL;
 8007612:	e9c6 2206 	strd	r2, r2, [r6, #24]
    if (ip_ptr -> nx_ipv6_prefix_entry_free_list == NX_NULL)
 8007616:	b10b      	cbz	r3, 800761c <_nx_ipv6_prefix_list_delete_entry+0x88>
    }
    else
    {

        /* Free list is not empty.  Insert the entry to the head of the list. */
        ip_ptr -> nx_ipv6_prefix_entry_free_list -> nx_ipv6_prefix_entry_prev = entry;
 8007618:	619e      	str	r6, [r3, #24]
        entry -> nx_ipv6_prefix_entry_next = ip_ptr -> nx_ipv6_prefix_entry_free_list;
 800761a:	61f3      	str	r3, [r6, #28]
        ip_ptr -> nx_ipv6_prefix_entry_free_list = entry;
 800761c:	f8c8 6ed8 	str.w	r6, [r8, #3800]	; 0xed8
    }

    /* All done. Return. */
    return;
}
 8007620:	b008      	add	sp, #32
 8007622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head = interface_ipv6_address -> nxd_ipv6_address_next;
 8007626:	f8c8 3c68 	str.w	r3, [r8, #3176]	; 0xc68
 800762a:	e7da      	b.n	80075e2 <_nx_ipv6_prefix_list_delete_entry+0x4e>
        ip_ptr -> nx_ipv6_prefix_list_ptr = entry -> nx_ipv6_prefix_entry_next;
 800762c:	f8c8 3ed4 	str.w	r3, [r8, #3796]	; 0xed4
 8007630:	e7ea      	b.n	8007608 <_nx_ipv6_prefix_list_delete_entry+0x74>
 8007632:	bf00      	nop

08007634 <_nx_ipv6_process_fragment_option>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_process_fragment_option(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ip_ptr -> nx_ip_total_fragments_received++;

#endif /* NX_DISABLE_IP_INFO */

    /* If fragmentation is not enabled, we drop this packet. */
    if (!ip_ptr -> nx_ip_fragment_assembly)
 8007636:	f8d0 37b8 	ldr.w	r3, [r0, #1976]	; 0x7b8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d048      	beq.n	80076d0 <_nx_ipv6_process_fragment_option+0x9c>
        return(NX_OPTION_HEADER_ERROR);
    }

    /* Set a pointer to the starting of the fragment option. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)packet_ptr -> nx_packet_prepend_ptr;
 800763e:	688e      	ldr	r6, [r1, #8]
 8007640:	4605      	mov	r5, r0
 8007642:	460c      	mov	r4, r1

    /* Byte swap the offset_flag.  The identification field is only used for checking matches.
       The absolute value of the Id is not used in arithmatic operations.  Therefore there is
       need to byte-swap this field. */
    NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 8007644:	8873      	ldrh	r3, [r6, #2]
 8007646:	021a      	lsls	r2, r3, #8
 8007648:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
 800764c:	b292      	uxth	r2, r2

    /* Check whether or not the payload size is not multiple of 8 bytes if the
       M bit is set. */
    if (fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0x0001) /* M bit is set */
 800764e:	07d7      	lsls	r7, r2, #31
    NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 8007650:	8072      	strh	r2, [r6, #2]
    if (fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0x0001) /* M bit is set */
 8007652:	d421      	bmi.n	8007698 <_nx_ipv6_process_fragment_option+0x64>
 8007654:	f022 0307 	bic.w	r3, r2, #7
 8007658:	b299      	uxth	r1, r3
#endif
            return(NX_OPTION_HEADER_ERROR);
        }
    }
    /* M bit is clear: This is the last (tail) packet fragment. */
    else if ((fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0xFFF8) == 0)
 800765a:	2900      	cmp	r1, #0
 800765c:	d040      	beq.n	80076e0 <_nx_ipv6_process_fragment_option+0xac>
        /* Continue processing. */
        return(NX_CONTINUE);
    }

    /* Payload size cannot exceeding 65535. */
    if (((fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0xFFF8) + packet_ptr -> nx_packet_length -
 800765e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007660:	3b08      	subs	r3, #8
 8007662:	440b      	add	r3, r1
 8007664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007668:	d223      	bcs.n	80076b2 <_nx_ipv6_process_fragment_option+0x7e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800766a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800766e:	b672      	cpsid	i
    TX_DISABLE

    /* In IPv6 IP fragmentation is required. */

    /* Determine if the queue is empty.  */
    if (ip_ptr -> nx_ip_received_fragment_head)
 8007670:	f8d5 37c4 	ldr.w	r3, [r5, #1988]	; 0x7c4
 8007674:	b373      	cbz	r3, 80076d4 <_nx_ipv6_process_fragment_option+0xa0>
    {

        /* Raw receive queue is not empty, add this packet to the end of the queue.  */
        (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 8007676:	f8d5 17c8 	ldr.w	r1, [r5, #1992]	; 0x7c8
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800767a:	2300      	movs	r3, #0
        (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800767c:	61cc      	str	r4, [r1, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800767e:	61e3      	str	r3, [r4, #28]
        ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8007680:	f8c5 47c8 	str.w	r4, [r5, #1992]	; 0x7c8
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007684:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
    /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 8007688:	2200      	movs	r2, #0
 800768a:	f505 60ec 	add.w	r0, r5, #1888	; 0x760
 800768e:	2102      	movs	r1, #2
 8007690:	f005 fcee 	bl	800d070 <_tx_event_flags_set>
#else
    /* Process the IP fragment reassemble.  */
    (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
#endif /* NX_FRAGMENT_IMMEDIATE_ASSEMBLY */

    return(NX_SUCCESS);
 8007694:	2000      	movs	r0, #0
}
 8007696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        payload_length = ip_header -> nx_ip_header_word_1 >> 16;
 8007698:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800769a:	88db      	ldrh	r3, [r3, #6]
        if ((payload_length & 0xFFF8) != payload_length)
 800769c:	075b      	lsls	r3, r3, #29
 800769e:	d121      	bne.n	80076e4 <_nx_ipv6_process_fragment_option+0xb0>
 80076a0:	f022 0307 	bic.w	r3, r2, #7
 80076a4:	b299      	uxth	r1, r3
    if (((fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0xFFF8) + packet_ptr -> nx_packet_length -
 80076a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076a8:	3b08      	subs	r3, #8
 80076aa:	440b      	add	r3, r1
 80076ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b0:	d3db      	bcc.n	800766a <_nx_ipv6_process_fragment_option+0x36>
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 80076b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80076b4:	0217      	lsls	r7, r2, #8
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80076ba:	ea47 2412 	orr.w	r4, r7, r2, lsr #8
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 80076be:	1af3      	subs	r3, r6, r3
 80076c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80076c4:	8074      	strh	r4, [r6, #2]
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 80076c6:	3302      	adds	r3, #2
 80076c8:	f7fe fb2a 	bl	8005d20 <_nx_icmpv6_send_error_message>
        return(NX_OPTION_HEADER_ERROR);
 80076cc:	2054      	movs	r0, #84	; 0x54
}
 80076ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(NX_OPTION_HEADER_ERROR);
 80076d0:	2054      	movs	r0, #84	; 0x54
}
 80076d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 80076d4:	f8c5 47c4 	str.w	r4, [r5, #1988]	; 0x7c4
        ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 80076d8:	f8c5 47c8 	str.w	r4, [r5, #1992]	; 0x7c8
        packet_ptr -> nx_packet_queue_next     =  NX_NULL;
 80076dc:	61e3      	str	r3, [r4, #28]
 80076de:	e7d1      	b.n	8007684 <_nx_ipv6_process_fragment_option+0x50>
        return(NX_CONTINUE);
 80076e0:	2055      	movs	r0, #85	; 0x55
}
 80076e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80076e4:	0214      	lsls	r4, r2, #8
            NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, 4);
 80076e6:	2304      	movs	r3, #4
            NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80076e8:	ea44 2412 	orr.w	r4, r4, r2, lsr #8
            NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, 4);
 80076ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
            NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 80076f0:	8074      	strh	r4, [r6, #2]
            NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, 4);
 80076f2:	f7fe fb15 	bl	8005d20 <_nx_icmpv6_send_error_message>
            return(NX_OPTION_HEADER_ERROR);
 80076f6:	2054      	movs	r0, #84	; 0x54
}
 80076f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076fa:	bf00      	nop

080076fc <_nx_ipv6_process_hop_by_hop_option>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_process_hop_by_hop_option(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80076fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Read the Hdr Ext Len field. */
    header_length = *(packet_ptr -> nx_packet_prepend_ptr + 1);
 8007700:	688d      	ldr	r5, [r1, #8]
    offset_base = (UINT)((ULONG)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header) - (ULONG)sizeof(NX_IPV6_HEADER));
    header_length = header_length - (INT)offset;

    /* Sanity check; does the header length data go past the end of the end of the packet buffer? */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) <
 8007702:	68cc      	ldr	r4, [r1, #12]
    header_length = *(packet_ptr -> nx_packet_prepend_ptr + 1);
 8007704:	786a      	ldrb	r2, [r5, #1]
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) <
 8007706:	1b64      	subs	r4, r4, r5
    offset_base = (UINT)((ULONG)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header) - (ULONG)sizeof(NX_IPV6_HEADER));
 8007708:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    header_length = (header_length + 1) << 3;
 800770a:	3201      	adds	r2, #1
    offset_base = (UINT)((ULONG)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header) - (ULONG)sizeof(NX_IPV6_HEADER));
 800770c:	1aeb      	subs	r3, r5, r3
    header_length = (header_length + 1) << 3;
 800770e:	00d2      	lsls	r2, r2, #3
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) <
 8007710:	4294      	cmp	r4, r2
 8007712:	d328      	bcc.n	8007766 <_nx_ipv6_process_hop_by_hop_option+0x6a>
 8007714:	460f      	mov	r7, r1
 8007716:	4681      	mov	r9, r0
 8007718:	f1a3 0828 	sub.w	r8, r3, #40	; 0x28
 800771c:	1e96      	subs	r6, r2, #2
    offset = 2;
 800771e:	2402      	movs	r4, #2
 8007720:	e006      	b.n	8007730 <_nx_ipv6_process_hop_by_hop_option+0x34>
            break;

        case 1:

            /* PadN option. Skip N+2 bytes. */
            offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8007722:	786c      	ldrb	r4, [r5, #1]
            header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8007724:	1ca2      	adds	r2, r4, #2
            offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8007726:	441c      	add	r4, r3
            header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8007728:	1ab6      	subs	r6, r6, r2
    while (header_length > 0)
 800772a:	2e00      	cmp	r6, #0
 800772c:	dd15      	ble.n	800775a <_nx_ipv6_process_hop_by_hop_option+0x5e>
 800772e:	68bd      	ldr	r5, [r7, #8]
        switch (option -> nx_ipv6_hop_by_hop_option_type)
 8007730:	5d2a      	ldrb	r2, [r5, r4]
        option = (NX_IPV6_HOP_BY_HOP_OPTION *)(packet_ptr -> nx_packet_prepend_ptr + offset);
 8007732:	4425      	add	r5, r4
        switch (option -> nx_ipv6_hop_by_hop_option_type)
 8007734:	b1a2      	cbz	r2, 8007760 <_nx_ipv6_process_hop_by_hop_option+0x64>
 8007736:	2a01      	cmp	r2, #1
 8007738:	f104 0302 	add.w	r3, r4, #2
 800773c:	d0f1      	beq.n	8007722 <_nx_ipv6_process_hop_by_hop_option+0x26>
#endif /* NX_ENABLE_THREAD  */

        default:

            /* Unknown option.  */
            rv = _nx_ipv6_option_error(ip_ptr, packet_ptr, option -> nx_ipv6_hop_by_hop_option_type, offset_base + offset);
 800773e:	eb08 0304 	add.w	r3, r8, r4
 8007742:	4639      	mov	r1, r7
 8007744:	4648      	mov	r0, r9
 8007746:	3402      	adds	r4, #2
 8007748:	f002 fe44 	bl	800a3d4 <_nx_ipv6_option_error>

            /* If no errors, just skip this option and move onto the next option.*/
            if (rv == NX_SUCCESS)
 800774c:	b930      	cbnz	r0, 800775c <_nx_ipv6_process_hop_by_hop_option+0x60>
            {

                /* Skip this option and continue processing the rest of the header. */
                offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 800774e:	786b      	ldrb	r3, [r5, #1]
                header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8007750:	1c9a      	adds	r2, r3, #2
                offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8007752:	441c      	add	r4, r3
                header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 8007754:	1ab6      	subs	r6, r6, r2
    while (header_length > 0)
 8007756:	2e00      	cmp	r6, #0
 8007758:	dce9      	bgt.n	800772e <_nx_ipv6_process_hop_by_hop_option+0x32>
            }
        }
    }

    /* Successful processing of option header. */
    return(NX_SUCCESS);
 800775a:	2000      	movs	r0, #0
}
 800775c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            offset++;
 8007760:	3401      	adds	r4, #1
            header_length--;
 8007762:	3e01      	subs	r6, #1
            break;
 8007764:	e7e1      	b.n	800772a <_nx_ipv6_process_hop_by_hop_option+0x2e>
        _nx_ipv6_option_error(ip_ptr, packet_ptr, option -> nx_ipv6_hop_by_hop_option_type, offset_base + offset);
 8007766:	3b26      	subs	r3, #38	; 0x26
 8007768:	78aa      	ldrb	r2, [r5, #2]
 800776a:	f002 fe33 	bl	800a3d4 <_nx_ipv6_option_error>
        return(NX_OPTION_HEADER_ERROR);
 800776e:	2054      	movs	r0, #84	; 0x54
}
 8007770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007774 <_nx_ipv6_process_routing_option>:
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Set a pointer to the routing header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    option = (NX_IPV6_HEADER_ROUTING_OPTION *)(packet_ptr -> nx_packet_prepend_ptr);
 8007774:	688b      	ldr	r3, [r1, #8]

    if (option -> nx_ipv6_header_routing_option_segments_left == 0)
 8007776:	78da      	ldrb	r2, [r3, #3]
 8007778:	b90a      	cbnz	r2, 800777e <_nx_ipv6_process_routing_option+0xa>
    {
        /* Skip the rest of the routing header and continue processing this packet. */
        return(NX_SUCCESS);
 800777a:	4610      	mov	r0, r2
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif

    /* Return error status, so the caller knows to free the packet. */
    return(NX_OPTION_HEADER_ERROR);
}
 800777c:	4770      	bx	lr
{
 800777e:	b510      	push	{r4, lr}
    base_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 8007780:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, base_offset + 2);
 8007782:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    base_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 8007786:	1b1b      	subs	r3, r3, r4
    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, base_offset + 2);
 8007788:	3302      	adds	r3, #2
 800778a:	f7fe fac9 	bl	8005d20 <_nx_icmpv6_send_error_message>
    return(NX_OPTION_HEADER_ERROR);
 800778e:	2054      	movs	r0, #84	; 0x54
}
 8007790:	bd10      	pop	{r4, pc}
 8007792:	bf00      	nop

08007794 <_nx_packet_copy>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8007794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 8007798:	2400      	movs	r4, #0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 800779a:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 800779c:	b085      	sub	sp, #20
    *new_packet_ptr =  NX_NULL;
 800779e:	600c      	str	r4, [r1, #0]
    if (packet_ptr -> nx_packet_length == 0)
 80077a0:	b175      	cbz	r5, 80077c0 <_nx_packet_copy+0x2c>
 80077a2:	4617      	mov	r7, r2
 80077a4:	4689      	mov	r9, r1
 80077a6:	4606      	mov	r6, r0
        return(NX_INVALID_PACKET);
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 80077a8:	4622      	mov	r2, r4
 80077aa:	a903      	add	r1, sp, #12
 80077ac:	4638      	mov	r0, r7
 80077ae:	4698      	mov	r8, r3
 80077b0:	f7fb f9b4 	bl	8002b1c <_nx_packet_allocate>

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 80077b4:	4605      	mov	r5, r0
 80077b6:	b140      	cbz	r0, 80077ca <_nx_packet_copy+0x36>
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
    }
}
 80077b8:	4628      	mov	r0, r5
 80077ba:	b005      	add	sp, #20
 80077bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return(NX_INVALID_PACKET);
 80077c0:	2512      	movs	r5, #18
}
 80077c2:	4628      	mov	r0, r5
 80077c4:	b005      	add	sp, #20
 80077c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80077ca:	9903      	ldr	r1, [sp, #12]
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 80077cc:	463b      	mov	r3, r7
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80077ce:	6b72      	ldr	r2, [r6, #52]	; 0x34
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 80077d0:	4608      	mov	r0, r1
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80077d2:	634a      	str	r2, [r1, #52]	; 0x34
    work_ptr -> nx_packet_ip_version = packet_ptr -> nx_packet_ip_version;
 80077d4:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 80077d8:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 80077dc:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 80077de:	6932      	ldr	r2, [r6, #16]
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 80077e0:	63cc      	str	r4, [r1, #60]	; 0x3c
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 80077e2:	68f4      	ldr	r4, [r6, #12]
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 80077e4:	4611      	mov	r1, r2
 80077e6:	f8cd 8000 	str.w	r8, [sp]
 80077ea:	1aa2      	subs	r2, r4, r2
 80077ec:	f000 f834 	bl	8007858 <_nx_packet_data_append>
        if (status != NX_SUCCESS)
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d12e      	bne.n	8007852 <_nx_packet_copy+0xbe>
        packet_ptr =  packet_ptr -> nx_packet_next;
 80077f4:	6874      	ldr	r4, [r6, #4]
    } while (packet_ptr);
 80077f6:	b914      	cbnz	r4, 80077fe <_nx_packet_copy+0x6a>
 80077f8:	e012      	b.n	8007820 <_nx_packet_copy+0x8c>
        packet_ptr =  packet_ptr -> nx_packet_next;
 80077fa:	6864      	ldr	r4, [r4, #4]
    } while (packet_ptr);
 80077fc:	b184      	cbz	r4, 8007820 <_nx_packet_copy+0x8c>
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 80077fe:	68a5      	ldr	r5, [r4, #8]
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 8007800:	463b      	mov	r3, r7
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8007802:	68e2      	ldr	r2, [r4, #12]
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 8007804:	4629      	mov	r1, r5
 8007806:	9803      	ldr	r0, [sp, #12]
 8007808:	1b52      	subs	r2, r2, r5
 800780a:	f8cd 8000 	str.w	r8, [sp]
 800780e:	f000 f823 	bl	8007858 <_nx_packet_data_append>
        if (status != NX_SUCCESS)
 8007812:	4605      	mov	r5, r0
 8007814:	2800      	cmp	r0, #0
 8007816:	d0f0      	beq.n	80077fa <_nx_packet_copy+0x66>
            _nx_packet_release(work_ptr);
 8007818:	9803      	ldr	r0, [sp, #12]
 800781a:	f7fb fa97 	bl	8002d4c <_nx_packet_release>
            return(status);
 800781e:	e7cb      	b.n	80077b8 <_nx_packet_copy+0x24>
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8007820:	6934      	ldr	r4, [r6, #16]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 8007822:	9803      	ldr	r0, [sp, #12]
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8007824:	68b3      	ldr	r3, [r6, #8]
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 8007826:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8007828:	1b1b      	subs	r3, r3, r4
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 800782a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 800782c:	1b0c      	subs	r4, r1, r4
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800782e:	6901      	ldr	r1, [r0, #16]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8007830:	1ad2      	subs	r2, r2, r3
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 8007832:	440b      	add	r3, r1
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 8007834:	4421      	add	r1, r4
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8007836:	6242      	str	r2, [r0, #36]	; 0x24
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 8007838:	6a74      	ldr	r4, [r6, #36]	; 0x24
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800783a:	6083      	str	r3, [r0, #8]
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 800783c:	42a2      	cmp	r2, r4
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 800783e:	6381      	str	r1, [r0, #56]	; 0x38
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 8007840:	d103      	bne.n	800784a <_nx_packet_copy+0xb6>
        *new_packet_ptr =  work_ptr;
 8007842:	f8c9 0000 	str.w	r0, [r9]
        return(NX_SUCCESS);
 8007846:	2500      	movs	r5, #0
 8007848:	e7b6      	b.n	80077b8 <_nx_packet_copy+0x24>
        return(NX_INVALID_PACKET);
 800784a:	2512      	movs	r5, #18
        _nx_packet_release(work_ptr);
 800784c:	f7fb fa7e 	bl	8002d4c <_nx_packet_release>
        return(NX_INVALID_PACKET);
 8007850:	e7b2      	b.n	80077b8 <_nx_packet_copy+0x24>
        if (status != NX_SUCCESS)
 8007852:	4605      	mov	r5, r0
 8007854:	e7e0      	b.n	8007818 <_nx_packet_copy+0x84>
 8007856:	bf00      	nop

08007858 <_nx_packet_data_append>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	4699      	mov	r9, r3
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800785e:	6983      	ldr	r3, [r0, #24]
{
 8007860:	b083      	sub	sp, #12
 8007862:	4680      	mov	r8, r0
 8007864:	460f      	mov	r7, r1
 8007866:	4615      	mov	r5, r2
    if (packet_ptr -> nx_packet_last)
 8007868:	2b00      	cmp	r3, #0
 800786a:	d05c      	beq.n	8007926 <_nx_packet_data_append+0xce>
 800786c:	461e      	mov	r6, r3
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 800786e:	2400      	movs	r4, #0
 8007870:	e000      	b.n	8007874 <_nx_packet_data_append+0x1c>
 8007872:	460e      	mov	r6, r1

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 8007874:	6972      	ldr	r2, [r6, #20]
 8007876:	68f0      	ldr	r0, [r6, #12]
            /* Remember the last packet.  */
            last_packet =  work_ptr;

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 8007878:	6871      	ldr	r1, [r6, #4]
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800787a:	1a12      	subs	r2, r2, r0
            available_bytes =  available_bytes +
 800787c:	4414      	add	r4, r2
        } while (work_ptr);
 800787e:	2900      	cmp	r1, #0
 8007880:	d1f7      	bne.n	8007872 <_nx_packet_data_append+0x1a>
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 8007882:	42ac      	cmp	r4, r5
 8007884:	9101      	str	r1, [sp, #4]
 8007886:	d21e      	bcs.n	80078c6 <_nx_packet_data_append+0x6e>
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 8007888:	f04f 0a00 	mov.w	sl, #0
 800788c:	e00c      	b.n	80078a8 <_nx_packet_data_append+0x50>
            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800788e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8007892:	2a00      	cmp	r2, #0
 8007894:	d042      	beq.n	800791c <_nx_packet_data_append+0xc4>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 8007896:	6053      	str	r3, [r2, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 8007898:	f8ca 3018 	str.w	r3, [sl, #24]
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	1ad3      	subs	r3, r2, r3
            available_bytes =  available_bytes +
 80078a2:	441c      	add	r4, r3
        while (available_bytes < data_size)
 80078a4:	42a5      	cmp	r5, r4
 80078a6:	d945      	bls.n	8007934 <_nx_packet_data_append+0xdc>
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 80078a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078aa:	2200      	movs	r2, #0
 80078ac:	a901      	add	r1, sp, #4
 80078ae:	4648      	mov	r0, r9
 80078b0:	f7fb f934 	bl	8002b1c <_nx_packet_allocate>
            if (status)
 80078b4:	4683      	mov	fp, r0
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d155      	bne.n	8007966 <_nx_packet_data_append+0x10e>
 80078ba:	9b01      	ldr	r3, [sp, #4]
            if (new_list_ptr)
 80078bc:	f1ba 0f00 	cmp.w	sl, #0
 80078c0:	d1e5      	bne.n	800788e <_nx_packet_data_append+0x36>
 80078c2:	469a      	mov	sl, r3
 80078c4:	e7ea      	b.n	800789c <_nx_packet_data_append+0x44>
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 80078c6:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80078ca:	442a      	add	r2, r5
 80078cc:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 80078d0:	9301      	str	r3, [sp, #4]
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 80078d2:	2d00      	cmp	r5, #0
 80078d4:	d041      	beq.n	800795a <_nx_packet_data_append+0x102>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80078d6:	68de      	ldr	r6, [r3, #12]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80078d8:	4639      	mov	r1, r7
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80078da:	695c      	ldr	r4, [r3, #20]
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80078dc:	4630      	mov	r0, r6
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80078de:	1ba4      	subs	r4, r4, r6
 80078e0:	42ac      	cmp	r4, r5
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80078e2:	4622      	mov	r2, r4
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80078e4:	d80d      	bhi.n	8007902 <_nx_packet_data_append+0xaa>
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 80078e6:	f007 f960 	bl	800ebaa <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 80078ea:	9b01      	ldr	r3, [sp, #4]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 80078ec:	1b2d      	subs	r5, r5, r4
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 80078ee:	4427      	add	r7, r4
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	4422      	add	r2, r4
 80078f4:	60da      	str	r2, [r3, #12]
        if (data_size)
 80078f6:	d030      	beq.n	800795a <_nx_packet_data_append+0x102>
            work_ptr =  work_ptr -> nx_packet_next;
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	9301      	str	r3, [sp, #4]
            packet_ptr -> nx_packet_last =  work_ptr;
 80078fc:	f8c8 3018 	str.w	r3, [r8, #24]
 8007900:	e7e9      	b.n	80078d6 <_nx_packet_data_append+0x7e>
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 8007902:	462a      	mov	r2, r5

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 8007904:	f04f 0b00 	mov.w	fp, #0
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size);
 8007908:	f007 f94f 	bl	800ebaa <memcpy>
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 800790c:	9a01      	ldr	r2, [sp, #4]
 800790e:	68d3      	ldr	r3, [r2, #12]
 8007910:	441d      	add	r5, r3
 8007912:	60d5      	str	r5, [r2, #12]
}
 8007914:	4658      	mov	r0, fp
 8007916:	b003      	add	sp, #12
 8007918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800791c:	f8ca 3018 	str.w	r3, [sl, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 8007920:	f8ca 3004 	str.w	r3, [sl, #4]
 8007924:	e7ba      	b.n	800789c <_nx_packet_data_append+0x44>
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 8007926:	6944      	ldr	r4, [r0, #20]
 8007928:	68c2      	ldr	r2, [r0, #12]
 800792a:	1aa4      	subs	r4, r4, r2
    if (available_bytes < data_size)
 800792c:	42ac      	cmp	r4, r5
 800792e:	d224      	bcs.n	800797a <_nx_packet_data_append+0x122>
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 8007930:	461e      	mov	r6, r3
 8007932:	e7a9      	b.n	8007888 <_nx_packet_data_append+0x30>
        if (last_packet)
 8007934:	b336      	cbz	r6, 8007984 <_nx_packet_data_append+0x12c>
            last_packet -> nx_packet_next =  new_list_ptr;
 8007936:	f8c6 a004 	str.w	sl, [r6, #4]
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800793a:	2300      	movs	r3, #0
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800793c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
        new_list_ptr -> nx_packet_last =  NX_NULL;
 8007940:	f8ca 3018 	str.w	r3, [sl, #24]
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 8007944:	442a      	add	r2, r5
 8007946:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800794a:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
    if (packet_ptr -> nx_packet_last)
 800794e:	2b00      	cmp	r3, #0
 8007950:	bf08      	it	eq
 8007952:	4643      	moveq	r3, r8
 8007954:	9301      	str	r3, [sp, #4]
    while (data_size)
 8007956:	2d00      	cmp	r5, #0
 8007958:	d1bd      	bne.n	80078d6 <_nx_packet_data_append+0x7e>
    return(NX_SUCCESS);
 800795a:	f04f 0b00 	mov.w	fp, #0
}
 800795e:	4658      	mov	r0, fp
 8007960:	b003      	add	sp, #12
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (new_list_ptr)
 8007966:	f1ba 0f00 	cmp.w	sl, #0
 800796a:	d0d3      	beq.n	8007914 <_nx_packet_data_append+0xbc>
                    _nx_packet_release(new_list_ptr);
 800796c:	4650      	mov	r0, sl
 800796e:	f7fb f9ed 	bl	8002d4c <_nx_packet_release>
}
 8007972:	4658      	mov	r0, fp
 8007974:	b003      	add	sp, #12
 8007976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800797a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800797c:	4603      	mov	r3, r0
 800797e:	442a      	add	r2, r5
 8007980:	6242      	str	r2, [r0, #36]	; 0x24
 8007982:	e7a5      	b.n	80078d0 <_nx_packet_data_append+0x78>
            packet_ptr -> nx_packet_next =  new_list_ptr;
 8007984:	f8c8 a004 	str.w	sl, [r8, #4]
 8007988:	e7d7      	b.n	800793a <_nx_packet_data_append+0xe2>
 800798a:	bf00      	nop

0800798c <_nx_packet_data_extract_offset>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_extract_offset(NX_PACKET *packet_ptr, ULONG offset, VOID *buffer_start, ULONG buffer_length, ULONG *bytes_copied)
{
 800798c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


    working_packet_ptr =  packet_ptr;

    /* Check for an invalid offset or packet length.  */
    if (offset >= working_packet_ptr -> nx_packet_length)
 8007990:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007992:	428d      	cmp	r5, r1
 8007994:	d805      	bhi.n	80079a2 <_nx_packet_data_extract_offset+0x16>
    {

        /* Note: A zero offset with a packet of zero length is ok. */
        if (offset == 0)
 8007996:	b981      	cbnz	r1, 80079ba <_nx_packet_data_extract_offset+0x2e>
        {

            *bytes_copied = 0;
 8007998:	9b06      	ldr	r3, [sp, #24]
            return(NX_SUCCESS);
 800799a:	4608      	mov	r0, r1
            *bytes_copied = 0;
 800799c:	6019      	str	r1, [r3, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_EXTRACT_OFFSET, packet_ptr, buffer_length, *bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 800799e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a2:	4604      	mov	r4, r0
 80079a4:	4617      	mov	r7, r2
 80079a6:	460e      	mov	r6, r1
        packet_fragment_length =  (ULONG)((working_packet_ptr -> nx_packet_append_ptr - working_packet_ptr -> nx_packet_prepend_ptr));
 80079a8:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
 80079ac:	1a12      	subs	r2, r2, r0
        if (packet_fragment_length > offset_bytes)
 80079ae:	42b2      	cmp	r2, r6
 80079b0:	d806      	bhi.n	80079c0 <_nx_packet_data_extract_offset+0x34>
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 80079b2:	6864      	ldr	r4, [r4, #4]
        offset_bytes = offset_bytes - packet_fragment_length;
 80079b4:	1ab6      	subs	r6, r6, r2
    while (working_packet_ptr)
 80079b6:	2c00      	cmp	r4, #0
 80079b8:	d1f6      	bne.n	80079a8 <_nx_packet_data_extract_offset+0x1c>
        return(NX_PACKET_OFFSET_ERROR);
 80079ba:	2053      	movs	r0, #83	; 0x53
}
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (source_ptr == NX_NULL)
 80079c0:	1986      	adds	r6, r0, r6
 80079c2:	d0fa      	beq.n	80079ba <_nx_packet_data_extract_offset+0x2e>
    bytes_to_copy =   (packet_ptr -> nx_packet_length - offset);
 80079c4:	eba5 0801 	sub.w	r8, r5, r1
 80079c8:	4598      	cmp	r8, r3
 80079ca:	bf28      	it	cs
 80079cc:	4698      	movcs	r8, r3
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	f8c3 8000 	str.w	r8, [r3]
        memcpy(destination_ptr, source_ptr, bytes_to_copy);
 80079d4:	4631      	mov	r1, r6
 80079d6:	4638      	mov	r0, r7
    while (working_packet_ptr && remaining_bytes)
 80079d8:	b1ac      	cbz	r4, 8007a06 <_nx_packet_data_extract_offset+0x7a>
 80079da:	f1b8 0f00 	cmp.w	r8, #0
 80079de:	d012      	beq.n	8007a06 <_nx_packet_data_extract_offset+0x7a>
        bytes_to_copy = (ULONG)(working_packet_ptr -> nx_packet_append_ptr - source_ptr);
 80079e0:	68e5      	ldr	r5, [r4, #12]
 80079e2:	1bad      	subs	r5, r5, r6
 80079e4:	4545      	cmp	r5, r8
 80079e6:	bf28      	it	cs
 80079e8:	4645      	movcs	r5, r8
        memcpy(destination_ptr, source_ptr, bytes_to_copy);
 80079ea:	462a      	mov	r2, r5
        destination_ptr += bytes_to_copy;
 80079ec:	442f      	add	r7, r5
        memcpy(destination_ptr, source_ptr, bytes_to_copy);
 80079ee:	f007 f8dc 	bl	800ebaa <memcpy>
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 80079f2:	6864      	ldr	r4, [r4, #4]
        remaining_bytes -= bytes_to_copy;
 80079f4:	eba8 0805 	sub.w	r8, r8, r5
        if (working_packet_ptr)
 80079f8:	2c00      	cmp	r4, #0
 80079fa:	d0eb      	beq.n	80079d4 <_nx_packet_data_extract_offset+0x48>
            source_ptr = working_packet_ptr -> nx_packet_prepend_ptr;
 80079fc:	68a6      	ldr	r6, [r4, #8]
        memcpy(destination_ptr, source_ptr, bytes_to_copy);
 80079fe:	4638      	mov	r0, r7
 8007a00:	4631      	mov	r1, r6
    while (working_packet_ptr && remaining_bytes)
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	d1e9      	bne.n	80079da <_nx_packet_data_extract_offset+0x4e>
    return(NX_SUCCESS);
 8007a06:	2000      	movs	r0, #0
}
 8007a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a0c <_nx_packet_pool_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_delete(NX_PACKET_POOL *pool_ptr)
{
 8007a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a10:	4605      	mov	r5, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007a12:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007a16:	b672      	cpsid	i

    /* Disable interrupts to remove the packet pool from the created list.  */
    TX_DISABLE

    /* Decrement the number of packet pools created.  */
    _nx_packet_pool_created_count--;
 8007a18:	4925      	ldr	r1, [pc, #148]	; (8007ab0 <_nx_packet_pool_delete+0xa4>)

    /* Clear the packet pool ID to make it invalid.  */
    pool_ptr -> nx_packet_pool_id =  0;
 8007a1a:	2000      	movs	r0, #0

    /* See if the packet pool only one on the list.  */
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 8007a1c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    _nx_packet_pool_created_count--;
 8007a1e:	680b      	ldr	r3, [r1, #0]
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 8007a20:	42aa      	cmp	r2, r5
    _nx_packet_pool_created_count--;
 8007a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a26:	600b      	str	r3, [r1, #0]
    pool_ptr -> nx_packet_pool_id =  0;
 8007a28:	6028      	str	r0, [r5, #0]
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 8007a2a:	d03d      	beq.n	8007aa8 <_nx_packet_pool_delete+0x9c>
    else
    {

        /* Link-up the neighbors.  */
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
            pool_ptr -> nx_packet_pool_created_previous;
 8007a2c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
            pool_ptr -> nx_packet_pool_created_next;

        /* See if we have to update the created list head pointer.  */
        if (_nx_packet_pool_created_ptr == pool_ptr)
 8007a2e:	4b21      	ldr	r3, [pc, #132]	; (8007ab4 <_nx_packet_pool_delete+0xa8>)
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 8007a30:	6391      	str	r1, [r2, #56]	; 0x38
        if (_nx_packet_pool_created_ptr == pool_ptr)
 8007a32:	6819      	ldr	r1, [r3, #0]
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 8007a34:	6ba8      	ldr	r0, [r5, #56]	; 0x38
        if (_nx_packet_pool_created_ptr == pool_ptr)
 8007a36:	42a9      	cmp	r1, r5
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 8007a38:	6342      	str	r2, [r0, #52]	; 0x34
        if (_nx_packet_pool_created_ptr == pool_ptr)
 8007a3a:	d032      	beq.n	8007aa2 <_nx_packet_pool_delete+0x96>
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007a3c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8007ab8 <_nx_packet_pool_delete+0xac>
 8007a40:	f8d8 3000 	ldr.w	r3, [r8]
 8007a44:	3301      	adds	r3, #1
 8007a46:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007a4a:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the packet pool suspension list to resume any and all
       threads suspended on this packet pool.  */
    thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 8007a4e:	e9d5 430b 	ldrd	r4, r3, [r5, #44]	; 0x2c
    while (pool_ptr -> nx_packet_pool_suspended_count)
 8007a52:	b1bb      	cbz	r3, 8007a84 <_nx_packet_pool_delete+0x78>
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007a54:	2700      	movs	r7, #0

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the return status in the thread to NX_POOL_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 8007a56:	2630      	movs	r6, #48	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007a58:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007a5c:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 8007a5e:	f8d8 3000 	ldr.w	r3, [r8]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007a62:	66a7      	str	r7, [r4, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8007a64:	3301      	adds	r3, #1
 8007a66:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007a6a:	f382 8810 	msr	PRIMASK, r2
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 8007a6e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007a72:	6f24      	ldr	r4, [r4, #112]	; 0x70

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 8007a74:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007a76:	f006 f835 	bl	800dae4 <_tx_thread_system_resume>

        /* Decrease the suspended count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 8007a7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	632b      	str	r3, [r5, #48]	; 0x30
    while (pool_ptr -> nx_packet_pool_suspended_count)
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e9      	bne.n	8007a58 <_nx_packet_pool_delete+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007a84:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007a88:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8007a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007a94:	f382 8810 	msr	PRIMASK, r2

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(pool_ptr);

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8007a98:	f006 f806 	bl	800daa8 <_tx_thread_system_preempt_check>

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
}
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
 8007aa2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	e7c9      	b.n	8007a3c <_nx_packet_pool_delete+0x30>
        _nx_packet_pool_created_ptr =  NX_NULL;
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <_nx_packet_pool_delete+0xa8>)
 8007aaa:	6018      	str	r0, [r3, #0]
 8007aac:	e7c6      	b.n	8007a3c <_nx_packet_pool_delete+0x30>
 8007aae:	bf00      	nop
 8007ab0:	200190d4 	.word	0x200190d4
 8007ab4:	200190d8 	.word	0x200190d8
 8007ab8:	20019244 	.word	0x20019244

08007abc <_nx_tcp_cleanup_deferred>:
{
    NX_PARAMETER_NOT_USED(thread_ptr);

    NX_CLEANUP_EXTENSION
    /* This function is never called... so do nothing!  */
}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <_nx_tcp_connect_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007ac0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007ac4:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8007ac6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03f      	beq.n	8007b4c <_nx_tcp_connect_cleanup+0x8c>
 8007acc:	4922      	ldr	r1, [pc, #136]	; (8007b58 <_nx_tcp_connect_cleanup+0x98>)
{
 8007ace:	b430      	push	{r4, r5}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8007ad0:	681c      	ldr	r4, [r3, #0]
 8007ad2:	428c      	cmp	r4, r1
 8007ad4:	d003      	beq.n	8007ade <_nx_tcp_connect_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ad6:	f382 8810 	msr	PRIMASK, r2
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8007ada:	bc30      	pop	{r4, r5}
 8007adc:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8007ade:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d0f8      	beq.n	8007ad6 <_nx_tcp_connect_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007ae4:	f3ef 8405 	mrs	r4, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8007ae8:	491c      	ldr	r1, [pc, #112]	; (8007b5c <_nx_tcp_connect_cleanup+0x9c>)
 8007aea:	6809      	ldr	r1, [r1, #0]
 8007aec:	4321      	orrs	r1, r4
 8007aee:	d11f      	bne.n	8007b30 <_nx_tcp_connect_cleanup+0x70>
 8007af0:	4d1b      	ldr	r5, [pc, #108]	; (8007b60 <_nx_tcp_connect_cleanup+0xa0>)
 8007af2:	4c1c      	ldr	r4, [pc, #112]	; (8007b64 <_nx_tcp_connect_cleanup+0xa4>)
 8007af4:	682d      	ldr	r5, [r5, #0]
 8007af6:	42a5      	cmp	r5, r4
 8007af8:	d01a      	beq.n	8007b30 <_nx_tcp_connect_cleanup+0x70>
        if (socket_ptr -> nx_tcp_socket_client_type)
 8007afa:	689c      	ldr	r4, [r3, #8]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007afc:	6681      	str	r1, [r0, #104]	; 0x68
        socket_ptr -> nx_tcp_socket_connect_suspended_thread =  NX_NULL;
 8007afe:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8007b02:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
        if (socket_ptr -> nx_tcp_socket_client_type)
 8007b06:	bb24      	cbnz	r4, 8007b52 <_nx_tcp_connect_cleanup+0x92>
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 8007b08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8007b0a:	2402      	movs	r4, #2
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 8007b0c:	3901      	subs	r1, #1
 8007b0e:	64d9      	str	r1, [r3, #76]	; 0x4c
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8007b10:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007b12:	645c      	str	r4, [r3, #68]	; 0x44
 8007b14:	290c      	cmp	r1, #12
 8007b16:	d1de      	bne.n	8007ad6 <_nx_tcp_connect_cleanup+0x16>
            _tx_thread_preempt_disable++;
 8007b18:	4913      	ldr	r1, [pc, #76]	; (8007b68 <_nx_tcp_connect_cleanup+0xa8>)
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8007b1a:	2438      	movs	r4, #56	; 0x38
            _tx_thread_preempt_disable++;
 8007b1c:	680b      	ldr	r3, [r1, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8007b1e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 8007b22:	3301      	adds	r3, #1
 8007b24:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007b26:	f382 8810 	msr	PRIMASK, r2
}
 8007b2a:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 8007b2c:	f005 bfda 	b.w	800dae4 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8007b30:	490e      	ldr	r1, [pc, #56]	; (8007b6c <_nx_tcp_connect_cleanup+0xac>)
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8007b32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8007b36:	6681      	str	r1, [r0, #104]	; 0x68
 8007b38:	f382 8810 	msr	PRIMASK, r2
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 8007b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 8007b46:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8007b48:	f005 ba92 	b.w	800d070 <_tx_event_flags_set>
 8007b4c:	f382 8810 	msr	PRIMASK, r2
 8007b50:	4770      	bx	lr
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 8007b52:	2401      	movs	r4, #1
 8007b54:	e7dc      	b.n	8007b10 <_nx_tcp_connect_cleanup+0x50>
 8007b56:	bf00      	nop
 8007b58:	54435020 	.word	0x54435020
 8007b5c:	2000007c 	.word	0x2000007c
 8007b60:	20019248 	.word	0x20019248
 8007b64:	200192f0 	.word	0x200192f0
 8007b68:	20019244 	.word	0x20019244
 8007b6c:	08007abd 	.word	0x08007abd

08007b70 <_nx_tcp_deferred_cleanup_check>:
TX_THREAD     *thread_ptr;


    /* Pickup the first socket and the created count.  */
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
    created_sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 8007b70:	f8d0 39b8 	ldr.w	r3, [r0, #2488]	; 0x9b8
{
 8007b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 8007b78:	f8d0 69b4 	ldr.w	r6, [r0, #2484]	; 0x9b4

    /* Loop through all created TCP sockets on the IP instance.  */
    while (created_sockets--)
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d04d      	beq.n	8007c1c <_nx_tcp_deferred_cleanup_check+0xac>
 8007b80:	f103 38ff 	add.w	r8, r3, #4294967295
 8007b84:	4d34      	ldr	r5, [pc, #208]	; (8007c58 <_nx_tcp_deferred_cleanup_check+0xe8>)
 8007b86:	e019      	b.n	8007bbc <_nx_tcp_deferred_cleanup_check+0x4c>
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
            } while (--suspended_threads);
        }

        /* Check the socket for deferred connect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_connect_suspended_thread;
 8007b88:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
        if (thread_ptr)
 8007b8c:	b110      	cbz	r0, 8007b94 <_nx_tcp_deferred_cleanup_check+0x24>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8007b8e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8007b90:	42ab      	cmp	r3, r5
 8007b92:	d05c      	beq.n	8007c4e <_nx_tcp_deferred_cleanup_check+0xde>
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
            }
        }

        /* Check the socket for deferred disconnect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_disconnect_suspended_thread;
 8007b94:	f8d6 010c 	ldr.w	r0, [r6, #268]	; 0x10c
        if (thread_ptr)
 8007b98:	b110      	cbz	r0, 8007ba0 <_nx_tcp_deferred_cleanup_check+0x30>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8007b9a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	d052      	beq.n	8007c46 <_nx_tcp_deferred_cleanup_check+0xd6>
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
            }
        }

        /* Check the socket for deferred receive cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_receive_suspended_count;
 8007ba0:	f8d6 40fc 	ldr.w	r4, [r6, #252]	; 0xfc
        if (suspended_threads)
 8007ba4:	2c00      	cmp	r4, #0
 8007ba6:	d13b      	bne.n	8007c20 <_nx_tcp_deferred_cleanup_check+0xb0>
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
            } while (--suspended_threads);
        }

        /* Check the socket for deferred transmit cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_transmit_suspended_count;
 8007ba8:	f8d6 4104 	ldr.w	r4, [r6, #260]	; 0x104
        if (suspended_threads)
 8007bac:	b9ec      	cbnz	r4, 8007bea <_nx_tcp_deferred_cleanup_check+0x7a>
    while (created_sockets--)
 8007bae:	f108 38ff 	add.w	r8, r8, #4294967295
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
            } while (--suspended_threads);
        }

        /* Move to next created TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8007bb2:	f8d6 6118 	ldr.w	r6, [r6, #280]	; 0x118
    while (created_sockets--)
 8007bb6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007bba:	d02f      	beq.n	8007c1c <_nx_tcp_deferred_cleanup_check+0xac>
        suspended_threads =  socket_ptr -> nx_tcp_socket_bind_suspended_count;
 8007bbc:	f8d6 4114 	ldr.w	r4, [r6, #276]	; 0x114
        if (suspended_threads)
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	d0e1      	beq.n	8007b88 <_nx_tcp_deferred_cleanup_check+0x18>
            thread_ptr =  socket_ptr -> nx_tcp_socket_bind_suspension_list;
 8007bc4:	f8d6 7110 	ldr.w	r7, [r6, #272]	; 0x110
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8007bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bca:	42ab      	cmp	r3, r5
 8007bcc:	d005      	beq.n	8007bda <_nx_tcp_deferred_cleanup_check+0x6a>
            } while (--suspended_threads);
 8007bce:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007bd0:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8007bd2:	d0d9      	beq.n	8007b88 <_nx_tcp_deferred_cleanup_check+0x18>
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8007bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bd6:	42ab      	cmp	r3, r5
 8007bd8:	d1f9      	bne.n	8007bce <_nx_tcp_deferred_cleanup_check+0x5e>
                    _nx_tcp_client_bind_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8007bda:	4638      	mov	r0, r7
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f002 fe63 	bl	800a8a8 <_nx_tcp_client_bind_cleanup>
            } while (--suspended_threads);
 8007be2:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007be4:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8007be6:	d1ef      	bne.n	8007bc8 <_nx_tcp_deferred_cleanup_check+0x58>
 8007be8:	e7ce      	b.n	8007b88 <_nx_tcp_deferred_cleanup_check+0x18>
            thread_ptr =  socket_ptr -> nx_tcp_socket_transmit_suspension_list;
 8007bea:	f8d6 7100 	ldr.w	r7, [r6, #256]	; 0x100
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8007bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	d005      	beq.n	8007c00 <_nx_tcp_deferred_cleanup_check+0x90>
            } while (--suspended_threads);
 8007bf4:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007bf6:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8007bf8:	d0d9      	beq.n	8007bae <_nx_tcp_deferred_cleanup_check+0x3e>
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8007bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	d1f9      	bne.n	8007bf4 <_nx_tcp_deferred_cleanup_check+0x84>
                    _nx_tcp_transmit_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8007c00:	4638      	mov	r0, r7
 8007c02:	2100      	movs	r1, #0
 8007c04:	f7fb fe84 	bl	8003910 <_nx_tcp_transmit_cleanup>
            } while (--suspended_threads);
 8007c08:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007c0a:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8007c0c:	d1ef      	bne.n	8007bee <_nx_tcp_deferred_cleanup_check+0x7e>
    while (created_sockets--)
 8007c0e:	f108 38ff 	add.w	r8, r8, #4294967295
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8007c12:	f8d6 6118 	ldr.w	r6, [r6, #280]	; 0x118
    while (created_sockets--)
 8007c16:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007c1a:	d1cf      	bne.n	8007bbc <_nx_tcp_deferred_cleanup_check+0x4c>
    }
}
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 8007c20:	f8d6 70f8 	ldr.w	r7, [r6, #248]	; 0xf8
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8007c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c26:	42ab      	cmp	r3, r5
 8007c28:	d005      	beq.n	8007c36 <_nx_tcp_deferred_cleanup_check+0xc6>
            } while (--suspended_threads);
 8007c2a:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007c2c:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8007c2e:	d0bb      	beq.n	8007ba8 <_nx_tcp_deferred_cleanup_check+0x38>
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8007c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c32:	42ab      	cmp	r3, r5
 8007c34:	d1f9      	bne.n	8007c2a <_nx_tcp_deferred_cleanup_check+0xba>
                    _nx_tcp_receive_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8007c36:	4638      	mov	r0, r7
 8007c38:	2100      	movs	r1, #0
 8007c3a:	f000 facd 	bl	80081d8 <_nx_tcp_receive_cleanup>
            } while (--suspended_threads);
 8007c3e:	3c01      	subs	r4, #1
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007c40:	6f3f      	ldr	r7, [r7, #112]	; 0x70
            } while (--suspended_threads);
 8007c42:	d1ef      	bne.n	8007c24 <_nx_tcp_deferred_cleanup_check+0xb4>
 8007c44:	e7b0      	b.n	8007ba8 <_nx_tcp_deferred_cleanup_check+0x38>
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8007c46:	2100      	movs	r1, #0
 8007c48:	f000 f808 	bl	8007c5c <_nx_tcp_disconnect_cleanup>
 8007c4c:	e7a8      	b.n	8007ba0 <_nx_tcp_deferred_cleanup_check+0x30>
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8007c4e:	2100      	movs	r1, #0
 8007c50:	f7ff ff36 	bl	8007ac0 <_nx_tcp_connect_cleanup>
 8007c54:	e79e      	b.n	8007b94 <_nx_tcp_deferred_cleanup_check+0x24>
 8007c56:	bf00      	nop
 8007c58:	08007abd 	.word	0x08007abd

08007c5c <_nx_tcp_disconnect_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007c5c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007c60:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8007c62:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d037      	beq.n	8007cd8 <_nx_tcp_disconnect_cleanup+0x7c>
{
 8007c68:	b470      	push	{r4, r5, r6}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8007c6a:	4c1d      	ldr	r4, [pc, #116]	; (8007ce0 <_nx_tcp_disconnect_cleanup+0x84>)
 8007c6c:	681d      	ldr	r5, [r3, #0]
 8007c6e:	42a5      	cmp	r5, r4
 8007c70:	d003      	beq.n	8007c7a <_nx_tcp_disconnect_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007c72:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8007c76:	bc70      	pop	{r4, r5, r6}
 8007c78:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8007c7a:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	2c00      	cmp	r4, #0
 8007c80:	d0f7      	beq.n	8007c72 <_nx_tcp_disconnect_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007c82:	f3ef 8505 	mrs	r5, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8007c86:	4c17      	ldr	r4, [pc, #92]	; (8007ce4 <_nx_tcp_disconnect_cleanup+0x88>)
 8007c88:	6824      	ldr	r4, [r4, #0]
 8007c8a:	432c      	orrs	r4, r5
 8007c8c:	d116      	bne.n	8007cbc <_nx_tcp_disconnect_cleanup+0x60>
 8007c8e:	4e16      	ldr	r6, [pc, #88]	; (8007ce8 <_nx_tcp_disconnect_cleanup+0x8c>)
 8007c90:	4d16      	ldr	r5, [pc, #88]	; (8007cec <_nx_tcp_disconnect_cleanup+0x90>)
 8007c92:	6836      	ldr	r6, [r6, #0]
 8007c94:	42ae      	cmp	r6, r5
 8007c96:	d011      	beq.n	8007cbc <_nx_tcp_disconnect_cleanup+0x60>
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8007c98:	6b05      	ldr	r5, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007c9a:	6684      	str	r4, [r0, #104]	; 0x68
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8007c9c:	2d0c      	cmp	r5, #12
        socket_ptr -> nx_tcp_socket_disconnect_suspended_thread =  NX_NULL;
 8007c9e:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8007ca2:	d1e6      	bne.n	8007c72 <_nx_tcp_disconnect_cleanup+0x16>
            _tx_thread_preempt_disable++;
 8007ca4:	4c12      	ldr	r4, [pc, #72]	; (8007cf0 <_nx_tcp_disconnect_cleanup+0x94>)
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 8007ca6:	2541      	movs	r5, #65	; 0x41
            _tx_thread_preempt_disable++;
 8007ca8:	6823      	ldr	r3, [r4, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 8007caa:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 8007cae:	3301      	adds	r3, #1
 8007cb0:	6023      	str	r3, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007cb2:	f381 8810 	msr	PRIMASK, r1
}
 8007cb6:	bc70      	pop	{r4, r5, r6}
            _tx_thread_system_resume(thread_ptr);
 8007cb8:	f005 bf14 	b.w	800dae4 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8007cbc:	4c0d      	ldr	r4, [pc, #52]	; (8007cf4 <_nx_tcp_disconnect_cleanup+0x98>)
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8007cbe:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8007cc2:	6694      	str	r4, [r2, #104]	; 0x68
 8007cc4:	f381 8810 	msr	PRIMASK, r1
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f500 60ec 	add.w	r0, r0, #1888	; 0x760
 8007cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 8007cd2:	bc70      	pop	{r4, r5, r6}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8007cd4:	f005 b9cc 	b.w	800d070 <_tx_event_flags_set>
 8007cd8:	f381 8810 	msr	PRIMASK, r1
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	54435020 	.word	0x54435020
 8007ce4:	2000007c 	.word	0x2000007c
 8007ce8:	20019248 	.word	0x20019248
 8007cec:	200192f0 	.word	0x200192f0
 8007cf0:	20019244 	.word	0x20019244
 8007cf4:	08007abd 	.word	0x08007abd

08007cf8 <_nx_tcp_packet_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Pickup the source IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8007cfc:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
{
 8007d00:	b08b      	sub	sp, #44	; 0x2c
ULONG                        mss = 0;
 8007d02:	2300      	movs	r3, #0
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8007d04:	2a04      	cmp	r2, #4
ULONG                        mss = 0;
 8007d06:	9309      	str	r3, [sp, #36]	; 0x24
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8007d08:	f000 812c 	beq.w	8007f64 <_nx_tcp_packet_process+0x26c>
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8007d0c:	2a06      	cmp	r2, #6
 8007d0e:	f040 809b 	bne.w	8007e48 <_nx_tcp_packet_process+0x150>

    /* IPv6 */
    NX_IPV6_HEADER *ipv6_header;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8007d12:	6b8b      	ldr	r3, [r1, #56]	; 0x38

        source_ip = &ipv6_header -> nx_ip_header_source_ip[0];

        dest_ip = &ipv6_header -> nx_ip_header_destination_ip[0];

        mss = 1220;
 8007d14:	f240 42c4 	movw	r2, #1220	; 0x4c4

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8007d18:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007d1a:	4682      	mov	sl, r0
        source_ip = &ipv6_header -> nx_ip_header_source_ip[0];
 8007d1c:	f103 0508 	add.w	r5, r3, #8
        dest_ip = &ipv6_header -> nx_ip_header_destination_ip[0];
 8007d20:	3318      	adds	r3, #24
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8007d22:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8007d26:	4689      	mov	r9, r1
        dest_ip = &ipv6_header -> nx_ip_header_destination_ip[0];
 8007d28:	9304      	str	r3, [sp, #16]
    }
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8007d2a:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
        mss = 1220;
 8007d2e:	9209      	str	r2, [sp, #36]	; 0x24
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8007d30:	071a      	lsls	r2, r3, #28
        source_ip = &ipv6_header -> nx_ip_header_source_ip[0];
 8007d32:	9503      	str	r5, [sp, #12]
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8007d34:	f140 8128 	bpl.w	8007f88 <_nx_tcp_packet_process+0x290>
        }
    }

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007d38:	f8d9 8008 	ldr.w	r8, [r9, #8]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8007d3c:	e9d8 6501 	ldrd	r6, r5, [r8, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8007d40:	f8d8 700c 	ldr.w	r7, [r8, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8007d44:	ea86 4336 	eor.w	r3, r6, r6, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007d48:	f8d8 0010 	ldr.w	r0, [r8, #16]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8007d4c:	ea87 4137 	eor.w	r1, r7, r7, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8007d50:	f8d8 2000 	ldr.w	r2, [r8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8007d54:	0a1b      	lsrs	r3, r3, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8007d56:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8007d58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8007d5c:	ea85 4435 	eor.w	r4, r5, r5, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8007d60:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8007d64:	ea83 2336 	eor.w	r3, r3, r6, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8007d68:	ea81 2137 	eor.w	r1, r1, r7, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8007d6c:	ea82 4632 	eor.w	r6, r2, r2, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 8007d70:	f8c8 3004 	str.w	r3, [r8, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007d74:	ea80 4730 	eor.w	r7, r0, r0, ror #16
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8007d78:	f8c8 100c 	str.w	r1, [r8, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8007d7c:	0a24      	lsrs	r4, r4, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007d7e:	0a3f      	lsrs	r7, r7, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8007d80:	0a36      	lsrs	r6, r6, #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8007d82:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007d86:	f007 13ff 	and.w	r3, r7, #16711935	; 0xff00ff

    /* Determine if there are any option words...  Note there are always 5 words in a TCP header.  */
    option_words =  (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 8007d8a:	0f09      	lsrs	r1, r1, #28
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8007d8c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8007d90:	ea84 2435 	eor.w	r4, r4, r5, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007d94:	ea83 2330 	eor.w	r3, r3, r0, ror #8
        /* The function is complete, just return!  */
        return;
    }
#endif

    if (option_words)
 8007d98:	3905      	subs	r1, #5
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8007d9a:	ea86 2632 	eor.w	r6, r6, r2, ror #8
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8007d9e:	f8c8 4008 	str.w	r4, [r8, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007da2:	f8c8 3010 	str.w	r3, [r8, #16]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8007da6:	f8c8 6000 	str.w	r6, [r8]
    if (option_words)
 8007daa:	d14f      	bne.n	8007e4c <_nx_tcp_packet_process+0x154>
 8007dac:	b2b5      	uxth	r5, r6
 8007dae:	0c36      	lsrs	r6, r6, #16
 8007db0:	eb05 2315 	add.w	r3, r5, r5, lsr #8
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007dbe:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
 8007dc2:	6854      	ldr	r4, [r2, #4]

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];

    /* Determine if there are any sockets bound on this port index.  */
    if (socket_ptr)
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	d066      	beq.n	8007e96 <_nx_tcp_packet_process+0x19e>
 8007dc8:	2201      	movs	r2, #1
                }
            }

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 8007dca:	eb0a 0783 	add.w	r7, sl, r3, lsl #2
 8007dce:	e005      	b.n	8007ddc <_nx_tcp_packet_process+0xe4>
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
 8007dd0:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	42a1      	cmp	r1, r4
 8007dd8:	f000 80b4 	beq.w	8007f44 <_nx_tcp_packet_process+0x24c>
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 8007ddc:	68e1      	ldr	r1, [r4, #12]
 8007dde:	42a9      	cmp	r1, r5
 8007de0:	d1f6      	bne.n	8007dd0 <_nx_tcp_packet_process+0xd8>
 8007de2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007de4:	42b1      	cmp	r1, r6
 8007de6:	d1f3      	bne.n	8007dd0 <_nx_tcp_packet_process+0xd8>
                if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == packet_ptr -> nx_packet_ip_version)
 8007de8:	f899 0030 	ldrb.w	r0, [r9, #48]	; 0x30
 8007dec:	6961      	ldr	r1, [r4, #20]
 8007dee:	4281      	cmp	r1, r0
 8007df0:	d1ee      	bne.n	8007dd0 <_nx_tcp_packet_process+0xd8>
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8007df2:	2904      	cmp	r1, #4
 8007df4:	f000 80ff 	beq.w	8007ff6 <_nx_tcp_packet_process+0x2fe>
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8007df8:	2906      	cmp	r1, #6
 8007dfa:	d1e9      	bne.n	8007dd0 <_nx_tcp_packet_process+0xd8>
                        if (CHECK_IPV6_ADDRESSES_SAME(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6, source_ip))
 8007dfc:	9903      	ldr	r1, [sp, #12]
 8007dfe:	f104 0018 	add.w	r0, r4, #24
 8007e02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e06:	f7fa fdb1 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 8007e0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d0de      	beq.n	8007dd0 <_nx_tcp_packet_process+0xd8>
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 8007e12:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 8007e16:	f8d8 200c 	ldr.w	r2, [r8, #12]
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 8007e1a:	605c      	str	r4, [r3, #4]
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 8007e1c:	0393      	lsls	r3, r2, #14
 8007e1e:	d50e      	bpl.n	8007e3e <_nx_tcp_packet_process+0x146>
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8007e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 8007e22:	6922      	ldr	r2, [r4, #16]
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8007e24:	6323      	str	r3, [r4, #48]	; 0x30
                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 8007e26:	b112      	cbz	r2, 8007e2e <_nx_tcp_packet_process+0x136>
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	f200 81a0 	bhi.w	800816e <_nx_tcp_packet_process+0x476>
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 8007e2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007e30:	2a03      	cmp	r2, #3
 8007e32:	f000 8196 	beq.w	8008162 <_nx_tcp_packet_process+0x46a>
                            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 8007e36:	62e3      	str	r3, [r4, #44]	; 0x2c
                            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 8007e38:	fb03 f303 	mul.w	r3, r3, r3
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
 8007e3c:	63e3      	str	r3, [r4, #60]	; 0x3c
                    _nx_tcp_socket_packet_process(socket_ptr, packet_ptr);
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fa29 	bl	8008298 <_nx_tcp_socket_packet_process>
                    return;
 8007e46:	e087      	b.n	8007f58 <_nx_tcp_packet_process+0x260>
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	deff      	udf	#255	; 0xff
        status = _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 8007e4c:	aa09      	add	r2, sp, #36	; 0x24
 8007e4e:	0089      	lsls	r1, r1, #2
 8007e50:	f108 0014 	add.w	r0, r8, #20
 8007e54:	f002 fd88 	bl	800a968 <_nx_tcp_mss_option_get>
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 8007e58:	f8d8 6000 	ldr.w	r6, [r8]
        if (status == NX_FALSE)
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f000 80a0 	beq.w	8007fa4 <_nx_tcp_packet_process+0x2ac>
 8007e64:	b2b5      	uxth	r5, r6
            if (mss == 0)
 8007e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e68:	0c36      	lsrs	r6, r6, #16
 8007e6a:	eb05 2315 	add.w	r3, r5, r5, lsr #8
 8007e6e:	f003 031f 	and.w	r3, r3, #31
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007e78:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 8007e7c:	684c      	ldr	r4, [r1, #4]
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	d1a0      	bne.n	8007dc4 <_nx_tcp_packet_process+0xcc>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8007e82:	f899 2030 	ldrb.w	r2, [r9, #48]	; 0x30
 8007e86:	2a04      	cmp	r2, #4
 8007e88:	f040 80bc 	bne.w	8008004 <_nx_tcp_packet_process+0x30c>
                    mss = 536;
 8007e8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007e90:	9209      	str	r2, [sp, #36]	; 0x24
    if (socket_ptr)
 8007e92:	2c00      	cmp	r4, #0
 8007e94:	d198      	bne.n	8007dc8 <_nx_tcp_packet_process+0xd0>
#endif

    /* Handle new connection requests without ACK bit in NX_TCP_SYN_RECEIVED state.
       NX_TCP_SYN_RECEIVED state is equal of LISTEN state of RFC.
       RFC793, Section3.9, Page65. */
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 8007e96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e9a:	02df      	lsls	r7, r3, #11
 8007e9c:	d45f      	bmi.n	8007f5e <_nx_tcp_packet_process+0x266>
        (ip_ptr -> nx_ip_tcp_active_listen_requests))
 8007e9e:	f8da 2b44 	ldr.w	r2, [sl, #2884]	; 0xb44
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 8007ea2:	2a00      	cmp	r2, #0
 8007ea4:	d05b      	beq.n	8007f5e <_nx_tcp_packet_process+0x266>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8007ea6:	f899 1030 	ldrb.w	r1, [r9, #48]	; 0x30
 8007eaa:	2904      	cmp	r1, #4
 8007eac:	f000 808a 	beq.w	8007fc4 <_nx_tcp_packet_process+0x2cc>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8007eb0:	2906      	cmp	r1, #6
 8007eb2:	f000 80ae 	beq.w	8008012 <_nx_tcp_packet_process+0x31a>
            }
        }
#endif /* FEATURE_NX_IPV6*/

        /* Search all ports in listen mode for a match. */
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 8007eb6:	4614      	mov	r4, r2
 8007eb8:	e002      	b.n	8007ec0 <_nx_tcp_packet_process+0x1c8>
                /* Finished processing, just return.  */
                return;
            }

            /* Move to the next listen request.  */
            listen_ptr = listen_ptr -> nx_tcp_listen_next;
 8007eba:	69e4      	ldr	r4, [r4, #28]
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 8007ebc:	4294      	cmp	r4, r2
 8007ebe:	d04e      	beq.n	8007f5e <_nx_tcp_packet_process+0x266>
            if (listen_ptr -> nx_tcp_listen_port == port)
 8007ec0:	6827      	ldr	r7, [r4, #0]
 8007ec2:	42af      	cmp	r7, r5
 8007ec4:	d1f9      	bne.n	8007eba <_nx_tcp_packet_process+0x1c2>
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 8007ec6:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8007eca:	d042      	beq.n	8007f52 <_nx_tcp_packet_process+0x25a>
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 8007ecc:	68a5      	ldr	r5, [r4, #8]
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	f000 80b4 	beq.w	800803c <_nx_tcp_packet_process+0x344>
 8007ed4:	f413 2180 	ands.w	r1, r3, #262144	; 0x40000
 8007ed8:	f040 810d 	bne.w	80080f6 <_nx_tcp_packet_process+0x3fe>
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 8007edc:	60a1      	str	r1, [r4, #8]
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8007ede:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	f000 8145 	beq.w	8008174 <_nx_tcp_packet_process+0x47c>
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8007eea:	2b06      	cmp	r3, #6
 8007eec:	f000 812c 	beq.w	8008148 <_nx_tcp_packet_process+0x450>
 8007ef0:	9b05      	ldr	r3, [sp, #20]
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8007ef2:	2000      	movs	r0, #0
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8007ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef6:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 8007efa:	f8d8 3004 	ldr.w	r3, [r8, #4]
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8007efe:	6e29      	ldr	r1, [r5, #96]	; 0x60
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 8007f00:	64eb      	str	r3, [r5, #76]	; 0x4c
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 8007f02:	f8da 3934 	ldr.w	r3, [sl, #2356]	; 0x934
                    socket_ptr -> nx_tcp_socket_connect_port = source_port;
 8007f06:	62ae      	str	r6, [r5, #40]	; 0x28
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8007f08:	632a      	str	r2, [r5, #48]	; 0x30
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = mss;
 8007f0a:	666a      	str	r2, [r5, #100]	; 0x64
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8007f0c:	6429      	str	r1, [r5, #64]	; 0x40
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8007f0e:	66a8      	str	r0, [r5, #104]	; 0x68
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8114 	beq.w	800813e <_nx_tcp_packet_process+0x446>
                            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 8007f16:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
                        socket_ptr -> nx_tcp_socket_bound_previous =
 8007f1a:	e9c5 323b 	strd	r3, r2, [r5, #236]	; 0xec
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 8007f1e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007f22:	f8c2 50ec 	str.w	r5, [r2, #236]	; 0xec
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous = socket_ptr;
 8007f26:	f8c3 50f0 	str.w	r5, [r3, #240]	; 0xf0
                    _nx_packet_release(packet_ptr);
 8007f2a:	4648      	mov	r0, r9
                    listen_callback = listen_ptr -> nx_tcp_listen_callback;
 8007f2c:	6864      	ldr	r4, [r4, #4]
                    _nx_packet_release(packet_ptr);
 8007f2e:	f7fa ff0d 	bl	8002d4c <_nx_packet_release>
                    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 8007f32:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	f000 80be 	beq.w	80080b6 <_nx_tcp_packet_process+0x3be>
                    if (listen_callback)
 8007f3a:	b16c      	cbz	r4, 8007f58 <_nx_tcp_packet_process+0x260>
                        (listen_callback)(socket_ptr, port);
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47a0      	blx	r4
 8007f42:	e009      	b.n	8007f58 <_nx_tcp_packet_process+0x260>
    if (is_valid_option_flag == NX_FALSE)
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	d1a6      	bne.n	8007e96 <_nx_tcp_packet_process+0x19e>
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 8007f48:	4642      	mov	r2, r8
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f002 fd3d 	bl	800a9cc <_nx_tcp_no_connection_reset>
        _nx_packet_release(packet_ptr);
 8007f52:	4648      	mov	r0, r9
 8007f54:	f7fa fefa 	bl	8002d4c <_nx_packet_release>

    /* Not a connection request, just release the packet.  */
    _nx_packet_release(packet_ptr);

    return;
}
 8007f58:	b00b      	add	sp, #44	; 0x2c
 8007f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 8007f5e:	035b      	lsls	r3, r3, #13
 8007f60:	d4f7      	bmi.n	8007f52 <_nx_tcp_packet_process+0x25a>
 8007f62:	e7f1      	b.n	8007f48 <_nx_tcp_packet_process+0x250>
        ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8007f64:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        mss = 536;
 8007f66:	f44f 7206 	mov.w	r2, #536	; 0x218
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007f6a:	f8d1 b034 	ldr.w	fp, [r1, #52]	; 0x34
 8007f6e:	4682      	mov	sl, r0
        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 8007f70:	f103 040c 	add.w	r4, r3, #12
        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 8007f74:	3310      	adds	r3, #16
        mss = 536;
 8007f76:	9209      	str	r2, [sp, #36]	; 0x24
 8007f78:	4689      	mov	r9, r1
        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 8007f7a:	9304      	str	r3, [sp, #16]
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8007f7c:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 8007f80:	9403      	str	r4, [sp, #12]
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 8007f82:	071a      	lsls	r2, r3, #28
 8007f84:	f53f aed8 	bmi.w	8007d38 <_nx_tcp_packet_process+0x40>
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8007f88:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8007f8a:	4648      	mov	r0, r9
 8007f8c:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 8007f90:	9100      	str	r1, [sp, #0]
 8007f92:	2106      	movs	r1, #6
 8007f94:	f7f9 ff16 	bl	8001dc4 <_nx_ip_checksum_compute>
        if (checksum != 0)
 8007f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f9c:	4298      	cmp	r0, r3
 8007f9e:	f43f aecb 	beq.w	8007d38 <_nx_tcp_packet_process+0x40>
 8007fa2:	e7d6      	b.n	8007f52 <_nx_tcp_packet_process+0x25a>
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 8007fa4:	b2b5      	uxth	r5, r6
    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 8007fa6:	0c36      	lsrs	r6, r6, #16
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 8007fa8:	eb05 2315 	add.w	r3, r5, r5, lsr #8
 8007fac:	f003 031f 	and.w	r3, r3, #31
 8007fb0:	9305      	str	r3, [sp, #20]
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 8007fb2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007fb6:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 8007fba:	684c      	ldr	r4, [r1, #4]
    if (socket_ptr)
 8007fbc:	2c00      	cmp	r4, #0
 8007fbe:	f47f af04 	bne.w	8007dca <_nx_tcp_packet_process+0xd2>
 8007fc2:	e7c1      	b.n	8007f48 <_nx_tcp_packet_process+0x250>
            if ((*source_ip == *dest_ip) && (source_port == port))
 8007fc4:	9904      	ldr	r1, [sp, #16]
 8007fc6:	6808      	ldr	r0, [r1, #0]
 8007fc8:	9903      	ldr	r1, [sp, #12]
 8007fca:	6809      	ldr	r1, [r1, #0]
 8007fcc:	4288      	cmp	r0, r1
 8007fce:	d101      	bne.n	8007fd4 <_nx_tcp_packet_process+0x2dc>
 8007fd0:	42b5      	cmp	r5, r6
 8007fd2:	d0be      	beq.n	8007f52 <_nx_tcp_packet_process+0x25a>
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8007fd4:	f001 4070 	and.w	r0, r1, #4026531840	; 0xf0000000
            if (
 8007fd8:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
 8007fdc:	d0b9      	beq.n	8007f52 <_nx_tcp_packet_process+0x25a>
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 8007fde:	e9db 4006 	ldrd	r4, r0, [fp, #24]
 8007fe2:	ea01 0704 	and.w	r7, r1, r4
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8007fe6:	4287      	cmp	r7, r0
 8007fe8:	d024      	beq.n	8008034 <_nx_tcp_packet_process+0x33c>
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 8007fea:	1c4c      	adds	r4, r1, #1
 8007fec:	d0b1      	beq.n	8007f52 <_nx_tcp_packet_process+0x25a>
 8007fee:	4281      	cmp	r1, r0
 8007ff0:	f47f af61 	bne.w	8007eb6 <_nx_tcp_packet_process+0x1be>
 8007ff4:	e7ad      	b.n	8007f52 <_nx_tcp_packet_process+0x25a>
                if (find_a_match)
 8007ff6:	9903      	ldr	r1, [sp, #12]
 8007ff8:	69a0      	ldr	r0, [r4, #24]
 8007ffa:	6809      	ldr	r1, [r1, #0]
 8007ffc:	4288      	cmp	r0, r1
 8007ffe:	f47f aee7 	bne.w	8007dd0 <_nx_tcp_packet_process+0xd8>
 8008002:	e706      	b.n	8007e12 <_nx_tcp_packet_process+0x11a>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8008004:	2a06      	cmp	r2, #6
 8008006:	f47f aedd 	bne.w	8007dc4 <_nx_tcp_packet_process+0xcc>
                    mss = 1220;
 800800a:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800800e:	9209      	str	r2, [sp, #36]	; 0x24
 8008010:	e6d8      	b.n	8007dc4 <_nx_tcp_packet_process+0xcc>
            if ((CHECK_IPV6_ADDRESSES_SAME(source_ip, dest_ip)) && (source_port == port))
 8008012:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8008016:	f7fa fca9 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800801a:	b108      	cbz	r0, 8008020 <_nx_tcp_packet_process+0x328>
 800801c:	42b5      	cmp	r5, r6
 800801e:	d098      	beq.n	8007f52 <_nx_tcp_packet_process+0x25a>
            if (IPv6_Address_Type(source_ip) & IPV6_ADDRESS_MULTICAST)
 8008020:	9803      	ldr	r0, [sp, #12]
 8008022:	f7fa fce7 	bl	80029f4 <IPv6_Address_Type>
 8008026:	0040      	lsls	r0, r0, #1
 8008028:	d493      	bmi.n	8007f52 <_nx_tcp_packet_process+0x25a>
 800802a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800802e:	f8da 2b44 	ldr.w	r2, [sl, #2884]	; 0xb44
 8008032:	e740      	b.n	8007eb6 <_nx_tcp_packet_process+0x1be>
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 8008034:	43e4      	mvns	r4, r4
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 8008036:	438c      	bics	r4, r1
 8008038:	d1d7      	bne.n	8007fea <_nx_tcp_packet_process+0x2f2>
 800803a:	e78a      	b.n	8007f52 <_nx_tcp_packet_process+0x25a>
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800803c:	e9d4 3b04 	ldrd	r3, fp, [r4, #16]
                    while (queued_count--)
 8008040:	1e5f      	subs	r7, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d05e      	beq.n	8008104 <_nx_tcp_packet_process+0x40c>
 8008046:	9404      	str	r4, [sp, #16]
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 8008048:	465d      	mov	r5, fp
 800804a:	4634      	mov	r4, r6
 800804c:	9e03      	ldr	r6, [sp, #12]
 800804e:	e008      	b.n	8008062 <_nx_tcp_packet_process+0x36a>
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8008050:	2b06      	cmp	r3, #6
 8008052:	d041      	beq.n	80080d8 <_nx_tcp_packet_process+0x3e0>
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 8008054:	69e9      	ldr	r1, [r5, #28]
 8008056:	46ab      	mov	fp, r5
                    while (queued_count--)
 8008058:	1e7b      	subs	r3, r7, #1
 800805a:	2f00      	cmp	r7, #0
 800805c:	d051      	beq.n	8008102 <_nx_tcp_packet_process+0x40a>
 800805e:	461f      	mov	r7, r3
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 8008060:	460d      	mov	r5, r1
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8008062:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 8008066:	68a8      	ldr	r0, [r5, #8]
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8008068:	2b04      	cmp	r3, #4
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 800806a:	f8b0 a002 	ldrh.w	sl, [r0, #2]
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800806e:	d1ef      	bne.n	8008050 <_nx_tcp_packet_process+0x358>
                            if ((*queued_source_ip == *source_ip) && (queued_source_port == source_port))
 8008070:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008074:	6833      	ldr	r3, [r6, #0]
 8008076:	4299      	cmp	r1, r3
 8008078:	d1ec      	bne.n	8008054 <_nx_tcp_packet_process+0x35c>
 800807a:	45a2      	cmp	sl, r4
 800807c:	d1ea      	bne.n	8008054 <_nx_tcp_packet_process+0x35c>
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800807e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008082:	9c04      	ldr	r4, [sp, #16]
 8008084:	0359      	lsls	r1, r3, #13
 8008086:	f57f af64 	bpl.w	8007f52 <_nx_tcp_packet_process+0x25a>
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 800808a:	6962      	ldr	r2, [r4, #20]
                            _nx_packet_release(queued_ptr);
 800808c:	4628      	mov	r0, r5
 800808e:	69eb      	ldr	r3, [r5, #28]
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 8008090:	42aa      	cmp	r2, r5
                                listen_ptr -> nx_tcp_listen_queue_head = queued_ptr -> nx_packet_queue_next;
 8008092:	bf0c      	ite	eq
 8008094:	6163      	streq	r3, [r4, #20]
                                queued_prev_ptr -> nx_packet_queue_next = queued_ptr -> nx_packet_queue_next;
 8008096:	f8cb 301c 	strne.w	r3, [fp, #28]
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 800809a:	69a3      	ldr	r3, [r4, #24]
 800809c:	42ab      	cmp	r3, r5
                                listen_ptr -> nx_tcp_listen_queue_tail = queued_prev_ptr;
 800809e:	bf08      	it	eq
 80080a0:	f8c4 b018 	streq.w	fp, [r4, #24]
                            _nx_packet_release(queued_ptr);
 80080a4:	f7fa fe52 	bl	8002d4c <_nx_packet_release>
                            listen_ptr -> nx_tcp_listen_queue_current--;
 80080a8:	6923      	ldr	r3, [r4, #16]
                            _nx_packet_release(packet_ptr);
 80080aa:	4648      	mov	r0, r9
                            listen_ptr -> nx_tcp_listen_queue_current--;
 80080ac:	3b01      	subs	r3, #1
 80080ae:	6123      	str	r3, [r4, #16]
                            _nx_packet_release(packet_ptr);
 80080b0:	f7fa fe4c 	bl	8002d4c <_nx_packet_release>
                            return;
 80080b4:	e750      	b.n	8007f58 <_nx_tcp_packet_process+0x260>
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 80080b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 80080b8:	2200      	movs	r2, #0
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 80080ba:	6ca9      	ldr	r1, [r5, #72]	; 0x48
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 80080bc:	3301      	adds	r3, #1
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 80080be:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 80080c2:	1c48      	adds	r0, r1, #1
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 80080c4:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 80080c8:	e9c5 0312 	strd	r0, r3, [r5, #72]	; 0x48
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 80080cc:	f8c5 20d8 	str.w	r2, [r5, #216]	; 0xd8
                        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80080d0:	4628      	mov	r0, r5
 80080d2:	f7fb f96b 	bl	80033ac <_nx_tcp_packet_send_syn>
 80080d6:	e730      	b.n	8007f3a <_nx_tcp_packet_process+0x242>
                            if ((CHECK_IPV6_ADDRESSES_SAME(queued_source_ip, source_ip)) && (queued_source_port == source_port))
 80080d8:	3820      	subs	r0, #32
 80080da:	4631      	mov	r1, r6
 80080dc:	f7fa fc46 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 80080e0:	45a2      	cmp	sl, r4
 80080e2:	d1b7      	bne.n	8008054 <_nx_tcp_packet_process+0x35c>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d0b5      	beq.n	8008054 <_nx_tcp_packet_process+0x35c>
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 80080e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080ec:	9c04      	ldr	r4, [sp, #16]
 80080ee:	035a      	lsls	r2, r3, #13
 80080f0:	f57f af2f 	bpl.w	8007f52 <_nx_tcp_packet_process+0x25a>
 80080f4:	e7c9      	b.n	800808a <_nx_tcp_packet_process+0x392>
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 80080f6:	e9d4 3b04 	ldrd	r3, fp, [r4, #16]
                    while (queued_count--)
 80080fa:	1e5f      	subs	r7, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1a2      	bne.n	8008046 <_nx_tcp_packet_process+0x34e>
 8008100:	e727      	b.n	8007f52 <_nx_tcp_packet_process+0x25a>
 8008102:	9c04      	ldr	r4, [sp, #16]
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8008104:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008108:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 800810c:	f47f af21 	bne.w	8007f52 <_nx_tcp_packet_process+0x25a>
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 8008110:	6960      	ldr	r0, [r4, #20]
                    packet_ptr -> nx_packet_queue_next = NX_NULL;
 8008112:	f8c9 301c 	str.w	r3, [r9, #28]
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 8008116:	2800      	cmp	r0, #0
 8008118:	d041      	beq.n	800819e <_nx_tcp_packet_process+0x4a6>
                        (listen_ptr -> nx_tcp_listen_queue_tail) -> nx_packet_queue_next = packet_ptr;
 800811a:	69a3      	ldr	r3, [r4, #24]
 800811c:	f8c3 901c 	str.w	r9, [r3, #28]
                    listen_ptr -> nx_tcp_listen_queue_tail =  packet_ptr;
 8008120:	f8c4 9018 	str.w	r9, [r4, #24]
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 8008124:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
                    listen_ptr -> nx_tcp_listen_queue_current++;
 8008128:	1c5a      	adds	r2, r3, #1
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 800812a:	428a      	cmp	r2, r1
                    listen_ptr -> nx_tcp_listen_queue_current++;
 800812c:	6122      	str	r2, [r4, #16]
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 800812e:	f67f af13 	bls.w	8007f58 <_nx_tcp_packet_process+0x260>
                        listen_ptr -> nx_tcp_listen_queue_head = (listen_ptr -> nx_tcp_listen_queue_head) -> nx_packet_queue_next;
 8008132:	69c2      	ldr	r2, [r0, #28]
 8008134:	e9c4 3204 	strd	r3, r2, [r4, #16]
                        _nx_packet_release(packet_ptr);
 8008138:	f7fa fe08 	bl	8002d4c <_nx_packet_release>
 800813c:	e70c      	b.n	8007f58 <_nx_tcp_packet_process+0x260>
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 800813e:	e9c5 553b 	strd	r5, r5, [r5, #236]	; 0xec
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 8008142:	f8ca 5934 	str.w	r5, [sl, #2356]	; 0x934
 8008146:	e6f0      	b.n	8007f2a <_nx_tcp_packet_process+0x232>
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V6;
 8008148:	616b      	str	r3, [r5, #20]
                        COPY_IPV6_ADDRESS(source_ip, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 800814a:	f105 0118 	add.w	r1, r5, #24
 800814e:	9803      	ldr	r0, [sp, #12]
 8008150:	f7fa fc36 	bl	80029c0 <COPY_IPV6_ADDRESS>
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8008154:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 8008158:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800815c:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
 8008160:	e6c6      	b.n	8007ef0 <_nx_tcp_packet_process+0x1f8>
                                 (socket_ptr -> nx_tcp_socket_connect_mss > mss))
 8008162:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 8008164:	4293      	cmp	r3, r2
 8008166:	f4ff ae66 	bcc.w	8007e36 <_nx_tcp_packet_process+0x13e>
 800816a:	4613      	mov	r3, r2
 800816c:	e664      	b.n	8007e38 <_nx_tcp_packet_process+0x140>
                            socket_ptr -> nx_tcp_socket_connect_mss  = socket_ptr -> nx_tcp_socket_mss;
 800816e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008170:	4613      	mov	r3, r2
 8008172:	e661      	b.n	8007e38 <_nx_tcp_packet_process+0x140>
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 8008174:	462b      	mov	r3, r5
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 8008176:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 800817a:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800817e:	4650      	mov	r0, sl
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 8008180:	f843 1f38 	str.w	r1, [r3, #56]!
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 8008184:	9903      	ldr	r1, [sp, #12]
 8008186:	6809      	ldr	r1, [r1, #0]
 8008188:	f7fa f806 	bl	8002198 <_nx_ip_route_find>
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 800818c:	9b04      	ldr	r3, [sp, #16]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 800818e:	9903      	ldr	r1, [sp, #12]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 8008190:	616b      	str	r3, [r5, #20]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 8008192:	680b      	ldr	r3, [r1, #0]
 8008194:	61ab      	str	r3, [r5, #24]
 8008196:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	e6a5      	b.n	8007eea <_nx_tcp_packet_process+0x1f2>
                        listen_ptr -> nx_tcp_listen_queue_head = packet_ptr;
 800819e:	4648      	mov	r0, r9
 80081a0:	f8c4 9014 	str.w	r9, [r4, #20]
 80081a4:	e7bc      	b.n	8008120 <_nx_tcp_packet_process+0x428>
 80081a6:	bf00      	nop

080081a8 <_nx_tcp_packet_send_probe>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_probe(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence, UCHAR data)
{
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	b086      	sub	sp, #24

    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 80081ac:	2600      	movs	r6, #0
 80081ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 80081b0:	4605      	mov	r5, r0
 80081b2:	ac06      	add	r4, sp, #24
 80081b4:	f804 2d01 	strb.w	r2, [r4, #-1]!
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 80081b8:	460a      	mov	r2, r1
 80081ba:	9402      	str	r4, [sp, #8]
 80081bc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80081c0:	e9cd 6600 	strd	r6, r6, [sp]
 80081c4:	f7fa fffa 	bl	80031bc <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, &data);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 80081c8:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <_nx_tcp_packet_send_probe+0x2c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	656b      	str	r3, [r5, #84]	; 0x54
}
 80081ce:	b006      	add	sp, #24
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	bf00      	nop
 80081d4:	200190fc 	.word	0x200190fc

080081d8 <_nx_tcp_receive_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80081d8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80081dc:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80081de:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d046      	beq.n	8008272 <_nx_tcp_receive_cleanup+0x9a>
 80081e4:	4926      	ldr	r1, [pc, #152]	; (8008280 <_nx_tcp_receive_cleanup+0xa8>)
{
 80081e6:	b430      	push	{r4, r5}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 80081e8:	681c      	ldr	r4, [r3, #0]
 80081ea:	428c      	cmp	r4, r1
 80081ec:	d003      	beq.n	80081f6 <_nx_tcp_receive_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80081ee:	f382 8810 	msr	PRIMASK, r2
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 80081f2:	bc30      	pop	{r4, r5}
 80081f4:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 80081f6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d0f8      	beq.n	80081ee <_nx_tcp_receive_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80081fc:	f3ef 8405 	mrs	r4, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8008200:	4920      	ldr	r1, [pc, #128]	; (8008284 <_nx_tcp_receive_cleanup+0xac>)
 8008202:	6809      	ldr	r1, [r1, #0]
 8008204:	4321      	orrs	r1, r4
 8008206:	d126      	bne.n	8008256 <_nx_tcp_receive_cleanup+0x7e>
 8008208:	4d1f      	ldr	r5, [pc, #124]	; (8008288 <_nx_tcp_receive_cleanup+0xb0>)
 800820a:	4c20      	ldr	r4, [pc, #128]	; (800828c <_nx_tcp_receive_cleanup+0xb4>)
 800820c:	682d      	ldr	r5, [r5, #0]
 800820e:	42a5      	cmp	r5, r4
 8008210:	d021      	beq.n	8008256 <_nx_tcp_receive_cleanup+0x7e>
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8008212:	6f04      	ldr	r4, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008214:	6681      	str	r1, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8008216:	4284      	cmp	r4, r0
 8008218:	d02e      	beq.n	8008278 <_nx_tcp_receive_cleanup+0xa0>
                thread_ptr -> tx_thread_suspended_previous;
 800821a:	6f41      	ldr	r1, [r0, #116]	; 0x74
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800821c:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008220:	6761      	str	r1, [r4, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008222:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008224:	670c      	str	r4, [r1, #112]	; 0x70
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8008226:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800822a:	6b04      	ldr	r4, [r0, #48]	; 0x30
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800822c:	3901      	subs	r1, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800822e:	2c0c      	cmp	r4, #12
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8008230:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8008234:	d1db      	bne.n	80081ee <_nx_tcp_receive_cleanup+0x16>
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 8008236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            _tx_thread_preempt_disable++;
 8008238:	4915      	ldr	r1, [pc, #84]	; (8008290 <_nx_tcp_receive_cleanup+0xb8>)
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800823a:	2b05      	cmp	r3, #5
            _tx_thread_preempt_disable++;
 800823c:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800823e:	bf14      	ite	ne
 8008240:	2438      	movne	r4, #56	; 0x38
 8008242:	2401      	moveq	r4, #1
            _tx_thread_preempt_disable++;
 8008244:	3301      	adds	r3, #1
 8008246:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 800824a:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800824c:	f382 8810 	msr	PRIMASK, r2
}
 8008250:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 8008252:	f005 bc47 	b.w	800dae4 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8008256:	490f      	ldr	r1, [pc, #60]	; (8008294 <_nx_tcp_receive_cleanup+0xbc>)
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8008258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800825c:	6681      	str	r1, [r0, #104]	; 0x68
 800825e:	f382 8810 	msr	PRIMASK, r2
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8008262:	2200      	movs	r2, #0
 8008264:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 8008268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 800826c:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800826e:	f004 beff 	b.w	800d070 <_tx_event_flags_set>
 8008272:	f382 8810 	msr	PRIMASK, r2
 8008276:	4770      	bx	lr
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  NX_NULL;
 8008278:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
 800827c:	e7d3      	b.n	8008226 <_nx_tcp_receive_cleanup+0x4e>
 800827e:	bf00      	nop
 8008280:	54435020 	.word	0x54435020
 8008284:	2000007c 	.word	0x2000007c
 8008288:	20019248 	.word	0x20019248
 800828c:	200192f0 	.word	0x200192f0
 8008290:	20019244 	.word	0x20019244
 8008294:	08007abd 	.word	0x08007abd

08008298 <_nx_tcp_socket_packet_process>:

    /* Copy the TCP header, since the actual packet can be delivered to
       a waiting socket/thread during this routine and before we are done
       using the header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 8008298:	f8d1 c008 	ldr.w	ip, [r1, #8]
ULONG         mss = 0;
 800829c:	2300      	movs	r3, #0
{
 800829e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 80082a2:	4665      	mov	r5, ip
{
 80082a4:	b086      	sub	sp, #24

    /* Get the size of the TCP header.  */
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

    /* Process the segment if socket state is equal or greater than NX_TCP_SYN_RECEIVED. According to RFC 793, Section 3.9, Page 69.  */
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 80082a6:	f8d0 e044 	ldr.w	lr, [r0, #68]	; 0x44
{
 80082aa:	460f      	mov	r7, r1
 80082ac:	4606      	mov	r6, r0
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 80082ae:	ac01      	add	r4, sp, #4
ULONG         mss = 0;
 80082b0:	9300      	str	r3, [sp, #0]
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 80082b2:	f1be 0f03 	cmp.w	lr, #3
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 80082b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 80082ba:	9b04      	ldr	r3, [sp, #16]
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 80082bc:	6829      	ldr	r1, [r5, #0]
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 80082be:	ea4f 7213 	mov.w	r2, r3, lsr #28
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 80082c2:	6021      	str	r1, [r4, #0]
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 80082c4:	ea4f 0482 	mov.w	r4, r2, lsl #2
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 80082c8:	d91d      	bls.n	8008306 <_nx_tcp_socket_packet_process+0x6e>

        /* Pickup the sequence of this packet. */
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;

        /* Calculate the data length in the packet.  */
        packet_data_length = packet_ptr -> nx_packet_length - header_length;
 80082ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;
 80082cc:	9802      	ldr	r0, [sp, #8]

        /* There are four cases for the acceptability test for an incoming segment.
           Section 3.9 Page 69, RFC 793.  */
        outside_of_window = NX_TRUE;

        if (packet_data_length == 0)
 80082ce:	1b12      	subs	r2, r2, r4
        rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 80082d0:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
        rx_window = socket_ptr -> nx_tcp_socket_rx_window_current;
 80082d2:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        if (packet_data_length == 0)
 80082d6:	d123      	bne.n	8008320 <_nx_tcp_socket_packet_process+0x88>
        {
            if (rx_window == 0)
 80082d8:	2d00      	cmp	r5, #0
 80082da:	d067      	beq.n	80083ac <_nx_tcp_socket_packet_process+0x114>
                       special allowance should be made to accept valid ACKs, URGs and RSTs.
                       Section 3.9 Page 69, RFC 793. */
                    outside_of_window = NX_FALSE;
                }
            }
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 80082dc:	1a42      	subs	r2, r0, r1
 80082de:	2a00      	cmp	r2, #0
 80082e0:	db38      	blt.n	8008354 <_nx_tcp_socket_packet_process+0xbc>
                     ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0))
 80082e2:	4429      	add	r1, r5
 80082e4:	1a09      	subs	r1, r1, r0
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 80082e6:	2900      	cmp	r1, #0
 80082e8:	dd34      	ble.n	8008354 <_nx_tcp_socket_packet_process+0xbc>
            /* Finished processing, simply return!  */
            return;
        }

        /* Step2: Check the RST bit. According to RFC 793, Section 3.9, Page 70.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 80082ea:	035a      	lsls	r2, r3, #13
 80082ec:	d45a      	bmi.n	80083a4 <_nx_tcp_socket_packet_process+0x10c>
            /* Finished processing, simply return!  */
            return;
        }

        /* Step3: Check the SYN bit. According to RFC 793, Section 3.9, Page 71.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 80082ee:	039d      	lsls	r5, r3, #14
 80082f0:	f100 80b7 	bmi.w	8008462 <_nx_tcp_socket_packet_process+0x1ca>
            /* Finished processing, simply return!  */
            return;
        }

        /* Step4: Check the ACK field. According to RFC 793, Section 3.9, Page 72.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED)
 80082f4:	f1be 0f04 	cmp.w	lr, #4
 80082f8:	f000 80a9 	beq.w	800844e <_nx_tcp_socket_packet_process+0x1b6>
        {

            /* Check the ACK field.  */
            if (_nx_tcp_socket_state_ack_check(socket_ptr, &tcp_header_copy) == NX_FALSE)
 80082fc:	a901      	add	r1, sp, #4
 80082fe:	4630      	mov	r0, r6
 8008300:	f000 f8c0 	bl	8008484 <_nx_tcp_socket_state_ack_check>
 8008304:	b340      	cbz	r0, 8008358 <_nx_tcp_socket_packet_process+0xc0>
            }
        }
    }

    /* Illegal option length check. */
    if (header_length > sizeof(NX_TCP_HEADER))
 8008306:	2c14      	cmp	r4, #20
 8008308:	d83a      	bhi.n	8008380 <_nx_tcp_socket_packet_process+0xe8>
        }

    }

    /* Process relative to the state of the socket.  */
    switch (socket_ptr -> nx_tcp_socket_state)
 800830a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800830c:	3b03      	subs	r3, #3
 800830e:	2b08      	cmp	r3, #8
 8008310:	d82c      	bhi.n	800836c <_nx_tcp_socket_packet_process+0xd4>
 8008312:	e8df f003 	tbb	[pc, r3]
 8008316:	9e8e      	.short	0x9e8e
 8008318:	60757e82 	.word	0x60757e82
 800831c:	2b5b      	.short	0x2b5b
 800831e:	27          	.byte	0x27
 800831f:	00          	.byte	0x00
            if ((rx_window > 0) &&
 8008320:	b1c5      	cbz	r5, 8008354 <_nx_tcp_socket_packet_process+0xbc>
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 8008322:	eba0 0801 	sub.w	r8, r0, r1
            if ((rx_window > 0) &&
 8008326:	f1b8 0f00 	cmp.w	r8, #0
 800832a:	db06      	blt.n	800833a <_nx_tcp_socket_packet_process+0xa2>
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 800832c:	eb05 0801 	add.w	r8, r5, r1
 8008330:	eba8 0800 	sub.w	r8, r8, r0
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 8008334:	f1b8 0f00 	cmp.w	r8, #0
 8008338:	dcd7      	bgt.n	80082ea <_nx_tcp_socket_packet_process+0x52>
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 800833a:	f100 38ff 	add.w	r8, r0, #4294967295
 800833e:	eba8 0801 	sub.w	r8, r8, r1
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 8008342:	eb18 0f02 	cmn.w	r8, r2
 8008346:	d405      	bmi.n	8008354 <_nx_tcp_socket_packet_process+0xbc>
                  ((INT)rx_sequence + 1 + ((INT)rx_window - (INT)packet_sequence) - (INT)packet_data_length > 0))))
 8008348:	3101      	adds	r1, #1
 800834a:	1a2d      	subs	r5, r5, r0
 800834c:	4429      	add	r1, r5
 800834e:	1a8a      	subs	r2, r1, r2
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 8008350:	2a00      	cmp	r2, #0
 8008352:	dcca      	bgt.n	80082ea <_nx_tcp_socket_packet_process+0x52>
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 8008354:	0359      	lsls	r1, r3, #13
 8008356:	d534      	bpl.n	80083c2 <_nx_tcp_socket_packet_process+0x12a>
            _nx_packet_release(packet_ptr);
 8008358:	4638      	mov	r0, r7
 800835a:	f7fa fcf7 	bl	8002d4c <_nx_packet_release>
    {

        /* Yes, the packet was not queued up above, so it needs to be released.  */
        _nx_packet_release(packet_ptr);
    }
}
 800835e:	b006      	add	sp, #24
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _nx_tcp_socket_state_last_ack(socket_ptr, &tcp_header_copy);
 8008364:	a901      	add	r1, sp, #4
 8008366:	4630      	mov	r0, r6
 8008368:	f000 fe36 	bl	8008fd8 <_nx_tcp_socket_state_last_ack>
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 800836c:	9b04      	ldr	r3, [sp, #16]
 800836e:	029b      	lsls	r3, r3, #10
 8008370:	d5f2      	bpl.n	8008358 <_nx_tcp_socket_packet_process+0xc0>
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 8008372:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
        if (urgent_callback)
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0ee      	beq.n	8008358 <_nx_tcp_socket_packet_process+0xc0>
            (urgent_callback)(socket_ptr);
 800837a:	4630      	mov	r0, r6
 800837c:	4798      	blx	r3
 800837e:	e7eb      	b.n	8008358 <_nx_tcp_socket_packet_process+0xc0>
 8008380:	f8d7 c008 	ldr.w	ip, [r7, #8]
        if (!_nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)),
 8008384:	f10c 0014 	add.w	r0, ip, #20
 8008388:	466a      	mov	r2, sp
 800838a:	f1a4 0114 	sub.w	r1, r4, #20
 800838e:	f002 faeb 	bl	800a968 <_nx_tcp_mss_option_get>
 8008392:	2800      	cmp	r0, #0
 8008394:	d1b9      	bne.n	800830a <_nx_tcp_socket_packet_process+0x72>
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 8008396:	9a04      	ldr	r2, [sp, #16]
 8008398:	02d1      	lsls	r1, r2, #11
 800839a:	d567      	bpl.n	800846c <_nx_tcp_socket_packet_process+0x1d4>
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800839c:	a901      	add	r1, sp, #4
 800839e:	4630      	mov	r0, r6
 80083a0:	f002 fb5c 	bl	800aa5c <_nx_tcp_packet_send_rst>
            _nx_tcp_socket_connection_reset(socket_ptr);
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7fb f889 	bl	80034bc <_nx_tcp_socket_connection_reset>
 80083aa:	e7d5      	b.n	8008358 <_nx_tcp_socket_packet_process+0xc0>
                if (packet_sequence == rx_sequence)
 80083ac:	4288      	cmp	r0, r1
 80083ae:	d09c      	beq.n	80082ea <_nx_tcp_socket_packet_process+0x52>
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 80083b0:	f413 1f10 	tst.w	r3, #2359296	; 0x240000
 80083b4:	d199      	bne.n	80082ea <_nx_tcp_socket_packet_process+0x52>
                         ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_CONTROL_MASK) == NX_TCP_ACK_BIT))
 80083b6:	f403 12b8 	and.w	r2, r3, #1507328	; 0x170000
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 80083ba:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80083be:	d1c9      	bne.n	8008354 <_nx_tcp_socket_packet_process+0xbc>
 80083c0:	e793      	b.n	80082ea <_nx_tcp_socket_packet_process+0x52>
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 80083c2:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80083c4:	4630      	mov	r0, r6
 80083c6:	f7fa fee5 	bl	8003194 <_nx_tcp_packet_send_ack>
 80083ca:	e7c5      	b.n	8008358 <_nx_tcp_socket_packet_process+0xc0>
        _nx_tcp_socket_state_closing(socket_ptr, &tcp_header_copy);
 80083cc:	a901      	add	r1, sp, #4
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 fa98 	bl	8008904 <_nx_tcp_socket_state_closing>
        break;
 80083d4:	e7ca      	b.n	800836c <_nx_tcp_socket_packet_process+0xd4>
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 80083d6:	4639      	mov	r1, r7
 80083d8:	4630      	mov	r0, r6
 80083da:	f000 fab9 	bl	8008950 <_nx_tcp_socket_state_data_check>
 80083de:	4604      	mov	r4, r0
        _nx_tcp_socket_state_fin_wait2(socket_ptr);
 80083e0:	4630      	mov	r0, r6
 80083e2:	f000 fdd1 	bl	8008f88 <_nx_tcp_socket_state_fin_wait2>
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	029a      	lsls	r2, r3, #10
 80083ea:	d504      	bpl.n	80083f6 <_nx_tcp_socket_packet_process+0x15e>
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 80083ec:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
        if (urgent_callback)
 80083f0:	b10b      	cbz	r3, 80083f6 <_nx_tcp_socket_packet_process+0x15e>
            (urgent_callback)(socket_ptr);
 80083f2:	4630      	mov	r0, r6
 80083f4:	4798      	blx	r3
    if (!packet_queued)
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d0ae      	beq.n	8008358 <_nx_tcp_socket_packet_process+0xc0>
}
 80083fa:	b006      	add	sp, #24
 80083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8008400:	4639      	mov	r1, r7
 8008402:	4630      	mov	r0, r6
 8008404:	f000 faa4 	bl	8008950 <_nx_tcp_socket_state_data_check>
 8008408:	4604      	mov	r4, r0
        _nx_tcp_socket_state_fin_wait1(socket_ptr);
 800840a:	4630      	mov	r0, r6
 800840c:	f000 fd7e 	bl	8008f0c <_nx_tcp_socket_state_fin_wait1>
        break;
 8008410:	e7e9      	b.n	80083e6 <_nx_tcp_socket_packet_process+0x14e>
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 8008412:	4630      	mov	r0, r6
 8008414:	f000 fea8 	bl	8009168 <_nx_tcp_socket_state_transmit_check>
        break;
 8008418:	e7a8      	b.n	800836c <_nx_tcp_socket_packet_process+0xd4>
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800841a:	4639      	mov	r1, r7
 800841c:	4630      	mov	r0, r6
 800841e:	f000 fa97 	bl	8008950 <_nx_tcp_socket_state_data_check>
 8008422:	4604      	mov	r4, r0
        _nx_tcp_socket_state_established(socket_ptr);
 8008424:	4630      	mov	r0, r6
 8008426:	f000 fd4d 	bl	8008ec4 <_nx_tcp_socket_state_established>
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 800842a:	4630      	mov	r0, r6
 800842c:	f000 fe9c 	bl	8009168 <_nx_tcp_socket_state_transmit_check>
        break;
 8008430:	e7d9      	b.n	80083e6 <_nx_tcp_socket_packet_process+0x14e>
        _nx_tcp_socket_state_syn_sent(socket_ptr, &tcp_header_copy, packet_ptr);
 8008432:	a901      	add	r1, sp, #4
 8008434:	463a      	mov	r2, r7
 8008436:	4630      	mov	r0, r6
 8008438:	f000 fe1c 	bl	8009074 <_nx_tcp_socket_state_syn_sent>
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800843c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800843e:	2b05      	cmp	r3, #5
 8008440:	d194      	bne.n	800836c <_nx_tcp_socket_packet_process+0xd4>
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8008442:	4639      	mov	r1, r7
 8008444:	4630      	mov	r0, r6
 8008446:	f000 fa83 	bl	8008950 <_nx_tcp_socket_state_data_check>
 800844a:	4604      	mov	r4, r0
 800844c:	e7cb      	b.n	80083e6 <_nx_tcp_socket_packet_process+0x14e>
    if (header_length > sizeof(NX_TCP_HEADER))
 800844e:	2c14      	cmp	r4, #20
 8008450:	d898      	bhi.n	8008384 <_nx_tcp_socket_packet_process+0xec>
        _nx_tcp_socket_state_syn_received(socket_ptr, &tcp_header_copy);
 8008452:	a901      	add	r1, sp, #4
 8008454:	4630      	mov	r0, r6
 8008456:	f000 fddb 	bl	8009010 <_nx_tcp_socket_state_syn_received>
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800845a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800845c:	2b05      	cmp	r3, #5
 800845e:	d185      	bne.n	800836c <_nx_tcp_socket_packet_process+0xd4>
 8008460:	e7ef      	b.n	8008442 <_nx_tcp_socket_packet_process+0x1aa>
            tcp_header_copy.nx_tcp_sequence_number++;
 8008462:	1c43      	adds	r3, r0, #1
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 8008464:	a901      	add	r1, sp, #4
 8008466:	4630      	mov	r0, r6
            tcp_header_copy.nx_tcp_sequence_number++;
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	e799      	b.n	80083a0 <_nx_tcp_socket_packet_process+0x108>
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800846c:	9b02      	ldr	r3, [sp, #8]
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800846e:	f412 3f40 	tst.w	r2, #196608	; 0x30000
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 8008472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008474:	eba3 0304 	sub.w	r3, r3, r4
 8008478:	440b      	add	r3, r1
                    tcp_header_copy.nx_tcp_sequence_number++;
 800847a:	bf18      	it	ne
 800847c:	3301      	addne	r3, #1
 800847e:	9302      	str	r3, [sp, #8]
 8008480:	e78c      	b.n	800839c <_nx_tcp_socket_packet_process+0x104>
 8008482:	bf00      	nop

08008484 <_nx_tcp_socket_state_ack_check>:
UINT           wrapped_flag = NX_FALSE;


    /* Determine if the header has an ACK bit set.  This is an
       acknowledgement of a previous transmission.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8008484:	68cb      	ldr	r3, [r1, #12]
 8008486:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 800848a:	f000 80a4 	beq.w	80085d6 <_nx_tcp_socket_state_ack_check+0x152>
 800848e:	6c82      	ldr	r2, [r0, #72]	; 0x48
{
 8008490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {

        /* Initialize tx sequence. */
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 8008494:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
{
 8008498:	b083      	sub	sp, #12
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 800849a:	2b00      	cmp	r3, #0
 800849c:	d169      	bne.n	8008572 <_nx_tcp_socket_state_ack_check+0xee>
        }
        else
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
        }
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800849e:	6e83      	ldr	r3, [r0, #104]	; 0x68
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 80084a0:	4691      	mov	r9, r2

        /* Initialize ending rx sequence. */
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 80084a2:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 80084a6:	eba2 0803 	sub.w	r8, r2, r3
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 80084aa:	2c00      	cmp	r4, #0
 80084ac:	d06a      	beq.n	8008584 <_nx_tcp_socket_state_ack_check+0x100>
        {
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;

            /* Setup a pointer to header of this packet in the sent list.  */
#ifndef NX_DISABLE_IPV4
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80084ae:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80084b2:	2a04      	cmp	r2, #4
 80084b4:	f000 8148 	beq.w	8008748 <_nx_tcp_socket_state_ack_check+0x2c4>
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
                                                       sizeof(NX_IPV4_HEADER));
            }
#endif /* NX_DISABLE_IPV4 */
#ifdef FEATURE_NX_IPV6
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 80084b8:	2a06      	cmp	r2, #6
 80084ba:	f040 8089 	bne.w	80085d0 <_nx_tcp_socket_state_ack_check+0x14c>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 80084be:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80084c0:	3628      	adds	r6, #40	; 0x28
            temp =  search_header_ptr -> nx_tcp_header_word_3;
            NX_CHANGE_ULONG_ENDIAN(temp);
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

            /* Determine the sequence number in the TCP header.  */
            search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 80084c2:	6877      	ldr	r7, [r6, #4]
 80084c4:	468a      	mov	sl, r1
                                  (header_length +
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
                                           (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));

            /* Calculate the ending packet sequence.  */
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 80084c6:	68a5      	ldr	r5, [r4, #8]
            NX_CHANGE_ULONG_ENDIAN(search_sequence);
 80084c8:	ea87 4237 	eor.w	r2, r7, r7, ror #16
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 80084cc:	6a64      	ldr	r4, [r4, #36]	; 0x24
        }
#endif

        /* First, determine if incoming ACK matches our transmit sequence.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 80084ce:	6889      	ldr	r1, [r1, #8]
            NX_CHANGE_ULONG_ENDIAN(search_sequence);
 80084d0:	0a12      	lsrs	r2, r2, #8
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 80084d2:	442c      	add	r4, r5
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 80084d4:	68f5      	ldr	r5, [r6, #12]
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 80084d6:	4549      	cmp	r1, r9
            NX_CHANGE_ULONG_ENDIAN(search_sequence);
 80084d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 80084dc:	eba4 0406 	sub.w	r4, r4, r6
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 80084e0:	f3c5 1503 	ubfx	r5, r5, #4, #4
            NX_CHANGE_ULONG_ENDIAN(search_sequence);
 80084e4:	ea82 2237 	eor.w	r2, r2, r7, ror #8
 80084e8:	4607      	mov	r7, r0
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 80084ea:	4422      	add	r2, r4
 80084ec:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 80084f0:	9201      	str	r2, [sp, #4]
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 80084f2:	d04e      	beq.n	8008592 <_nx_tcp_socket_state_ack_check+0x10e>
        {

            /* Calculate the start and end of the transmit sequence.  */

            /* Pickup the head of the transmit queue.  */
            search_ptr =    socket_ptr -> nx_tcp_socket_transmit_sent_head;
 80084f4:	f8d0 60d0 	ldr.w	r6, [r0, #208]	; 0xd0

            /* Determine if there is a packet on the transmit queue... and determine if the packet has been
               transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if ((search_ptr) && (search_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_DRIVER_TX_DONE)))
 80084f8:	2e00      	cmp	r6, #0
 80084fa:	d078      	beq.n	80085ee <_nx_tcp_socket_state_ack_check+0x16a>
 80084fc:	69f5      	ldr	r5, [r6, #28]
 80084fe:	f1b5 3fdd 	cmp.w	r5, #3722304989	; 0xdddddddd
 8008502:	f000 8166 	beq.w	80087d2 <_nx_tcp_socket_state_ack_check+0x34e>
 8008506:	f04f 0b00 	mov.w	fp, #0
            while (search_ptr)
            {

                /* Determine if the packet has been transmitted.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800850a:	f1b5 3fdd 	cmp.w	r5, #3722304989	; 0xdddddddd
 800850e:	68b3      	ldr	r3, [r6, #8]
 8008510:	465c      	mov	r4, fp
 8008512:	d02a      	beq.n	800856a <_nx_tcp_socket_state_ack_check+0xe6>
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
                                                           search_ptr -> nx_packet_ip_header_length);
 8008514:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8008518:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800851a:	4402      	add	r2, r0
 800851c:	eba3 0c02 	sub.w	ip, r3, r2
                temp =  search_header_ptr -> nx_tcp_header_word_3;
                NX_CHANGE_ULONG_ENDIAN(temp);
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

                /* Determine the sequence number in the TCP header.  */
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 8008520:	6855      	ldr	r5, [r2, #4]
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 8008522:	68d0      	ldr	r0, [r2, #12]
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8008524:	ea85 4335 	eor.w	r3, r5, r5, ror #16
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));

                /* Calculate the ending packet sequence.  */
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8008528:	6a72      	ldr	r2, [r6, #36]	; 0x24
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800852a:	f3c0 1003 	ubfx	r0, r0, #4, #4
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 800852e:	0a1b      	lsrs	r3, r3, #8
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8008530:	4462      	add	r2, ip
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8008532:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008536:	ea83 2335 	eor.w	r3, r3, r5, ror #8
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 800853a:	4413      	add	r3, r2
 800853c:	eba3 0380 	sub.w	r3, r3, r0, lsl #2

                    /* No, the transmit window is not wrapped. Perform a simple compare to determine if the ACK
                       covers the current search packet.  */

                    /* Is this ACK before the current search packet or after the transmit sequence?  */
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 8008540:	428b      	cmp	r3, r1
 8008542:	f200 80ff 	bhi.w	8008744 <_nx_tcp_socket_state_ack_check+0x2c0>
 8008546:	4589      	cmp	r9, r1
 8008548:	f0c0 80fc 	bcc.w	8008744 <_nx_tcp_socket_state_ack_check+0x2c0>
                /* Increase the packet release count.  */
                packet_release_count++;

                /* Move the search and previous pointers forward.  */
                previous_ptr =  search_ptr;
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800854c:	6a33      	ldr	r3, [r6, #32]
                packet_release_count++;
 800854e:	f10b 0b01 	add.w	fp, fp, #1

                /* Determine if we are at the end of the TCP queue.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 8008552:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 8008556:	d045      	beq.n	80085e4 <_nx_tcp_socket_state_ack_check+0x160>
            while (search_ptr)
 8008558:	2b00      	cmp	r3, #0
 800855a:	d043      	beq.n	80085e4 <_nx_tcp_socket_state_ack_check+0x160>
 800855c:	69dd      	ldr	r5, [r3, #28]
 800855e:	4634      	mov	r4, r6
 8008560:	461e      	mov	r6, r3
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8008562:	f1b5 3fdd 	cmp.w	r5, #3722304989	; 0xdddddddd
 8008566:	68b3      	ldr	r3, [r6, #8]
 8008568:	d1d4      	bne.n	8008514 <_nx_tcp_socket_state_ack_check+0x90>
 800856a:	461a      	mov	r2, r3
 800856c:	f04f 0c00 	mov.w	ip, #0
 8008570:	e7d6      	b.n	8008520 <_nx_tcp_socket_state_ack_check+0x9c>
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 8008572:	6e83      	ldr	r3, [r0, #104]	; 0x68
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence + 1;
 8008574:	f102 0901 	add.w	r9, r2, #1
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8008578:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800857c:	eba2 0803 	sub.w	r8, r2, r3
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8008580:	2c00      	cmp	r4, #0
 8008582:	d194      	bne.n	80084ae <_nx_tcp_socket_state_ack_check+0x2a>
 8008584:	468a      	mov	sl, r1
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 8008586:	6889      	ldr	r1, [r1, #8]
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 8008588:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800858a:	4607      	mov	r7, r0
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 800858c:	4549      	cmp	r1, r9
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800858e:	9201      	str	r2, [sp, #4]
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 8008590:	d1b0      	bne.n	80084f4 <_nx_tcp_socket_state_ack_check+0x70>
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 8008592:	6c42      	ldr	r2, [r0, #68]	; 0x44
            packet_release_count =  socket_ptr -> nx_tcp_socket_transmit_sent_count;
 8008594:	f8d0 b0cc 	ldr.w	fp, [r0, #204]	; 0xcc
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 8008598:	2a06      	cmp	r2, #6
            previous_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_tail;
 800859a:	f8d0 60d4 	ldr.w	r6, [r0, #212]	; 0xd4
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 800859e:	d902      	bls.n	80085a6 <_nx_tcp_socket_state_ack_check+0x122>
                socket_ptr -> nx_tcp_socket_fin_acked = NX_TRUE;
 80085a0:	2201      	movs	r2, #1
 80085a2:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
                }
            }
        }

        /* Determine if anything needs to be released.  */
        if (!packet_release_count)
 80085a6:	4649      	mov	r1, r9
 80085a8:	f1bb 0f00 	cmp.w	fp, #0
 80085ac:	f040 8094 	bne.w	80086d8 <_nx_tcp_socket_state_ack_check+0x254>
                       side of the connection figure out if everything is still okay.  */
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
                    return(NX_FALSE);
                }
            }
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 80085b0:	f8d7 b080 	ldr.w	fp, [r7, #128]	; 0x80
 80085b4:	f1bb 0f00 	cmp.w	fp, #0
 80085b8:	f040 8152 	bne.w	8008860 <_nx_tcp_socket_state_ack_check+0x3dc>
 80085bc:	f8da 2004 	ldr.w	r2, [sl, #4]
 80085c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c2:	429a      	cmp	r2, r3
 80085c4:	f000 817a 	beq.w	80088bc <_nx_tcp_socket_state_ack_check+0x438>
 80085c8:	eba1 0808 	sub.w	r8, r1, r8
 80085cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085ce:	e09e      	b.n	800870e <_nx_tcp_socket_state_ack_check+0x28a>
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 80085d0:	2300      	movs	r3, #0
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	deff      	udf	#255	; 0xff
    else
    {

        /* The ACK bit is off drop the segment and return.  */
        /* RFC793, Section3.9, Page72.  */
        return(NX_FALSE);
 80085d6:	4618      	mov	r0, r3
    }
}
 80085d8:	4770      	bx	lr
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 80085da:	b910      	cbnz	r0, 80085e2 <_nx_tcp_socket_state_ack_check+0x15e>
 80085dc:	2a00      	cmp	r2, #0
 80085de:	f000 812b 	beq.w	8008838 <_nx_tcp_socket_state_ack_check+0x3b4>
 80085e2:	4666      	mov	r6, ip
        if (!packet_release_count)
 80085e4:	f1bb 0f00 	cmp.w	fp, #0
 80085e8:	d175      	bne.n	80086d6 <_nx_tcp_socket_state_ack_check+0x252>
            if (tcp_header_ptr -> nx_tcp_acknowledgment_number != ending_tx_sequence)
 80085ea:	4589      	cmp	r9, r1
 80085ec:	d0e0      	beq.n	80085b0 <_nx_tcp_socket_state_ack_check+0x12c>
                if ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence > 0)
 80085ee:	eba1 0309 	sub.w	r3, r1, r9
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f300 80ce 	bgt.w	8008794 <_nx_tcp_socket_state_ack_check+0x310>
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 80085f8:	eba1 0808 	sub.w	r8, r1, r8
 80085fc:	f04f 0b00 	mov.w	fp, #0
 8008600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008602:	f1b8 0f00 	cmp.w	r8, #0
 8008606:	f340 808b 	ble.w	8008720 <_nx_tcp_socket_state_ack_check+0x29c>
            socket_ptr -> nx_tcp_socket_tx_window_advertised =  (tcp_header_ptr -> nx_tcp_header_word_3) & NX_LOWER_16_MASK;
 800860a:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 800860e:	663a      	str	r2, [r7, #96]	; 0x60
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 8008610:	4293      	cmp	r3, r2
 8008612:	d306      	bcc.n	8008622 <_nx_tcp_socket_state_ack_check+0x19e>
 8008614:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008618:	4288      	cmp	r0, r1
 800861a:	d802      	bhi.n	8008622 <_nx_tcp_socket_state_ack_check+0x19e>
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800861c:	2100      	movs	r1, #0
 800861e:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
        if (!packet_release_count)
 8008622:	f1bb 0f00 	cmp.w	fp, #0
 8008626:	d052      	beq.n	80086ce <_nx_tcp_socket_state_ack_check+0x24a>
        search_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8008628:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
        if (previous_ptr != socket_ptr -> nx_tcp_socket_transmit_sent_tail)
 800862c:	42b1      	cmp	r1, r6
 800862e:	f000 80b7 	beq.w	80087a0 <_nx_tcp_socket_state_ack_check+0x31c>
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8008632:	6a31      	ldr	r1, [r6, #32]
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8008634:	2400      	movs	r4, #0
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 8008636:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800863a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 800863e:	eba2 020b 	sub.w	r2, r2, fp
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8008642:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8008646:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 800864a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800864e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
        while (packet_release_count--)
 8008652:	f10b 3bff 	add.w	fp, fp, #4294967295
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 8008656:	f04f 36aa 	mov.w	r6, #2863311530	; 0xaaaaaaaa
 800865a:	e015      	b.n	8008688 <_nx_tcp_socket_state_ack_check+0x204>
                                                       previous_ptr -> nx_packet_ip_header_length);
 800865c:	f890 c032 	ldrb.w	ip, [r0, #50]	; 0x32
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 8008660:	442a      	add	r2, r5
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 8008662:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008664:	4461      	add	r1, ip
                temp = search_header_ptr -> nx_tcp_header_word_3;
 8008666:	68cd      	ldr	r5, [r1, #12]
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 8008668:	1a52      	subs	r2, r2, r1
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800866a:	f3c5 1103 	ubfx	r1, r5, #4, #4
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800866e:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > tcp_payload_length)
 8008672:	429a      	cmp	r2, r3
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= tcp_payload_length;
 8008674:	bf34      	ite	cc
 8008676:	1a9a      	subcc	r2, r3, r2
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8008678:	2200      	movcs	r2, #0
        while (packet_release_count--)
 800867a:	f11b 3bff 	adds.w	fp, fp, #4294967295
 800867e:	66ba      	str	r2, [r7, #104]	; 0x68
                previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = ((NX_PACKET *)NX_PACKET_ALLOCATED);
 8008680:	6206      	str	r6, [r0, #32]
        while (packet_release_count--)
 8008682:	d318      	bcc.n	80086b6 <_nx_tcp_socket_state_ack_check+0x232>
 8008684:	4620      	mov	r0, r4
 8008686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008688:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800868a:	6882      	ldr	r2, [r0, #8]
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800868c:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 8008690:	6206      	str	r6, [r0, #32]
            if (previous_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8008692:	f1b1 3fdd 	cmp.w	r1, #3722304989	; 0xdddddddd
 8008696:	d1e1      	bne.n	800865c <_nx_tcp_socket_state_ack_check+0x1d8>
                temp = search_header_ptr -> nx_tcp_header_word_3;
 8008698:	68d2      	ldr	r2, [r2, #12]
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800869a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800869e:	0091      	lsls	r1, r2, #2
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > (previous_ptr -> nx_packet_length - header_length))
 80086a0:	1a6a      	subs	r2, r5, r1
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d24c      	bcs.n	8008740 <_nx_tcp_socket_state_ack_check+0x2bc>
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= previous_ptr -> nx_packet_length - header_length;
 80086a6:	1b5a      	subs	r2, r3, r5
 80086a8:	440a      	add	r2, r1
 80086aa:	66ba      	str	r2, [r7, #104]	; 0x68
                _nx_packet_release(previous_ptr);
 80086ac:	f7fa fb4e 	bl	8002d4c <_nx_packet_release>
        while (packet_release_count--)
 80086b0:	f11b 3bff 	adds.w	fp, fp, #4294967295
 80086b4:	d2e6      	bcs.n	8008684 <_nx_tcp_socket_state_ack_check+0x200>
        if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 80086b6:	f897 40aa 	ldrb.w	r4, [r7, #170]	; 0xaa
 80086ba:	2c01      	cmp	r4, #1
 80086bc:	d107      	bne.n	80086ce <_nx_tcp_socket_state_ack_check+0x24a>
            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_FALSE);
 80086be:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80086c2:	2200      	movs	r2, #0
 80086c4:	4639      	mov	r1, r7
 80086c6:	f7fa ff4f 	bl	8003568 <_nx_tcp_socket_retransmit>
        return(NX_TRUE);
 80086ca:	4620      	mov	r0, r4
 80086cc:	e000      	b.n	80086d0 <_nx_tcp_socket_state_ack_check+0x24c>
            return(NX_TRUE);
 80086ce:	2001      	movs	r0, #1
}
 80086d0:	b003      	add	sp, #12
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 80086d8:	f897 40aa 	ldrb.w	r4, [r7, #170]	; 0xaa
 80086dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086de:	2c01      	cmp	r4, #1
 80086e0:	d048      	beq.n	8008774 <_nx_tcp_socket_state_ack_check+0x2f0>
 80086e2:	6e78      	ldr	r0, [r7, #100]	; 0x64
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 80086e4:	1a52      	subs	r2, r2, r1
 80086e6:	f112 0f02 	cmn.w	r2, #2
 80086ea:	d430      	bmi.n	800874e <_nx_tcp_socket_state_ack_check+0x2ca>
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 80086ec:	2200      	movs	r2, #0
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 80086ee:	f8c7 8070 	str.w	r8, [r7, #112]	; 0x70
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 80086f2:	eba1 0808 	sub.w	r8, r1, r8
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 80086f6:	67ba      	str	r2, [r7, #120]	; 0x78
                if (socket_ptr -> nx_tcp_socket_tx_window_congestion >= socket_ptr -> nx_tcp_socket_tx_slow_start_threshold)
 80086f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086fa:	4282      	cmp	r2, r0
 80086fc:	d844      	bhi.n	8008788 <_nx_tcp_socket_state_ack_check+0x304>
                    temp = socket_ptr -> nx_tcp_socket_connect_mss2 / socket_ptr -> nx_tcp_socket_tx_window_congestion;
 80086fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008700:	fbb2 f2f0 	udiv	r2, r2, r0
                        temp = 1;
 8008704:	2a00      	cmp	r2, #0
 8008706:	bf08      	it	eq
 8008708:	2201      	moveq	r2, #1
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_window_congestion + temp;
 800870a:	4402      	add	r2, r0
 800870c:	667a      	str	r2, [r7, #100]	; 0x64
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 800870e:	f1b8 0f00 	cmp.w	r8, #0
 8008712:	dd05      	ble.n	8008720 <_nx_tcp_socket_state_ack_check+0x29c>
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 8008714:	eba1 0909 	sub.w	r9, r1, r9
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 8008718:	f1b9 0f00 	cmp.w	r9, #0
 800871c:	f77f af75 	ble.w	800860a <_nx_tcp_socket_state_ack_check+0x186>
            ((INT)tcp_header_ptr -> nx_tcp_sequence_number - (INT)ending_rx_sequence > 0) ||
 8008720:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008724:	9801      	ldr	r0, [sp, #4]
 8008726:	1a10      	subs	r0, r2, r0
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 8008728:	2800      	cmp	r0, #0
 800872a:	f73f af6e 	bgt.w	800860a <_nx_tcp_socket_state_ack_check+0x186>
            (((INT)tcp_header_ptr -> nx_tcp_sequence_number == (INT)ending_rx_sequence) &&
 800872e:	f1b8 0f00 	cmp.w	r8, #0
 8008732:	db03      	blt.n	800873c <_nx_tcp_socket_state_ack_check+0x2b8>
 8008734:	9801      	ldr	r0, [sp, #4]
 8008736:	4282      	cmp	r2, r0
 8008738:	f43f af67 	beq.w	800860a <_nx_tcp_socket_state_ack_check+0x186>
 800873c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800873e:	e767      	b.n	8008610 <_nx_tcp_socket_state_ack_check+0x18c>
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8008740:	2200      	movs	r2, #0
 8008742:	e7b2      	b.n	80086aa <_nx_tcp_socket_state_ack_check+0x226>
 8008744:	4626      	mov	r6, r4
 8008746:	e74d      	b.n	80085e4 <_nx_tcp_socket_state_ack_check+0x160>
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8008748:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800874a:	3614      	adds	r6, #20
 800874c:	e6b9      	b.n	80084c2 <_nx_tcp_socket_state_ack_check+0x3e>
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 800874e:	1e8d      	subs	r5, r1, #2
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8008750:	2200      	movs	r2, #0
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 8008752:	2c01      	cmp	r4, #1
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 8008754:	f8c7 8070 	str.w	r8, [r7, #112]	; 0x70
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 8008758:	66fd      	str	r5, [r7, #108]	; 0x6c
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 800875a:	eba1 0808 	sub.w	r8, r1, r8
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800875e:	67ba      	str	r2, [r7, #120]	; 0x78
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 8008760:	d1ca      	bne.n	80086f8 <_nx_tcp_socket_state_ack_check+0x274>
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 8008762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 8008764:	eba0 0008 	sub.w	r0, r0, r8
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 8008768:	4542      	cmp	r2, r8
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 800876a:	6678      	str	r0, [r7, #100]	; 0x64
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 800876c:	d2cf      	bcs.n	800870e <_nx_tcp_socket_state_ack_check+0x28a>
                    socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800876e:	4410      	add	r0, r2
 8008770:	6678      	str	r0, [r7, #100]	; 0x64
 8008772:	e7cc      	b.n	800870e <_nx_tcp_socket_state_ack_check+0x28a>
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 8008774:	1a88      	subs	r0, r1, r2
 8008776:	2800      	cmp	r0, #0
 8008778:	f340 8093 	ble.w	80088a2 <_nx_tcp_socket_state_ack_check+0x41e>
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800877c:	2400      	movs	r4, #0
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800877e:	6c38      	ldr	r0, [r7, #64]	; 0x40
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 8008780:	f887 40aa 	strb.w	r4, [r7, #170]	; 0xaa
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 8008784:	6678      	str	r0, [r7, #100]	; 0x64
 8008786:	e7ad      	b.n	80086e4 <_nx_tcp_socket_state_ack_check+0x260>
                    if (acked_bytes < socket_ptr -> nx_tcp_socket_connect_mss)
 8008788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878a:	4542      	cmp	r2, r8
 800878c:	d96e      	bls.n	800886c <_nx_tcp_socket_state_ack_check+0x3e8>
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += acked_bytes;
 800878e:	4440      	add	r0, r8
 8008790:	6678      	str	r0, [r7, #100]	; 0x64
 8008792:	e7bc      	b.n	800870e <_nx_tcp_socket_state_ack_check+0x28a>
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 8008794:	4638      	mov	r0, r7
 8008796:	4649      	mov	r1, r9
 8008798:	f7fa fcfc 	bl	8003194 <_nx_tcp_packet_send_ack>
                    return(NX_FALSE);
 800879c:	2000      	movs	r0, #0
 800879e:	e797      	b.n	80086d0 <_nx_tcp_socket_state_ack_check+0x24c>
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 80087a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  NX_NULL;
 80087a2:	2400      	movs	r4, #0
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 80087a4:	f021 0502 	bic.w	r5, r1, #2
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 80087a8:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 80087ac:	2d09      	cmp	r5, #9
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 80087ae:	e9c7 4434 	strd	r4, r4, [r7, #208]	; 0xd0
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 80087b2:	d006      	beq.n	80087c2 <_nx_tcp_socket_state_ack_check+0x33e>
 80087b4:	f1a1 0107 	sub.w	r1, r1, #7
 80087b8:	fab1 f181 	clz	r1, r1
 80087bc:	0949      	lsrs	r1, r1, #5
 80087be:	2900      	cmp	r1, #0
 80087c0:	d063      	beq.n	800888a <_nx_tcp_socket_state_ack_check+0x406>
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 80087c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 80087c6:	2200      	movs	r2, #0
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 80087c8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 80087cc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80087d0:	e73f      	b.n	8008652 <_nx_tcp_socket_state_ack_check+0x1ce>
                if (tcp_header_ptr -> nx_tcp_acknowledgment_number == starting_tx_sequence)
 80087d2:	4541      	cmp	r1, r8
 80087d4:	d04d      	beq.n	8008872 <_nx_tcp_socket_state_ack_check+0x3ee>
 80087d6:	45c1      	cmp	r9, r8
 80087d8:	f63f ae95 	bhi.w	8008506 <_nx_tcp_socket_state_ack_check+0x82>
 80087dc:	462a      	mov	r2, r5
            packet_release_count =  0;
 80087de:	f04f 0b00 	mov.w	fp, #0
 80087e2:	68b5      	ldr	r5, [r6, #8]
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 80087e4:	f1b2 3fdd 	cmp.w	r2, #3722304989	; 0xdddddddd
            previous_ptr =  NX_NULL;
 80087e8:	46dc      	mov	ip, fp
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 80087ea:	d036      	beq.n	800885a <_nx_tcp_socket_state_ack_check+0x3d6>
                                                           search_ptr -> nx_packet_ip_header_length);
 80087ec:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 80087f0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80087f2:	441a      	add	r2, r3
 80087f4:	1aad      	subs	r5, r5, r2
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 80087f6:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80087fa:	4588      	cmp	r8, r1
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 80087fc:	68d4      	ldr	r4, [r2, #12]
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 80087fe:	ea8e 433e 	eor.w	r3, lr, lr, ror #16
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8008802:	6a72      	ldr	r2, [r6, #36]	; 0x24
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008804:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8008808:	bf88      	it	hi
 800880a:	2000      	movhi	r0, #0
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 800880c:	ea4f 2313 	mov.w	r3, r3, lsr #8
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8008810:	442a      	add	r2, r5
 8008812:	bf98      	it	ls
 8008814:	2001      	movls	r0, #1
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 8008816:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800881a:	ea83 233e 	eor.w	r3, r3, lr, ror #8
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 800881e:	4413      	add	r3, r2
 8008820:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 8008824:	428b      	cmp	r3, r1
 8008826:	bf94      	ite	ls
 8008828:	2200      	movls	r2, #0
 800882a:	2201      	movhi	r2, #1
                    if (ending_packet_sequence < starting_tx_sequence)
 800882c:	4598      	cmp	r8, r3
 800882e:	f63f aed4 	bhi.w	80085da <_nx_tcp_socket_state_ack_check+0x156>
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 8008832:	2800      	cmp	r0, #0
 8008834:	f47f aed2 	bne.w	80085dc <_nx_tcp_socket_state_ack_check+0x158>
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8008838:	6a33      	ldr	r3, [r6, #32]
                packet_release_count++;
 800883a:	f10b 0b01 	add.w	fp, fp, #1
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800883e:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 8008842:	f43f aecf 	beq.w	80085e4 <_nx_tcp_socket_state_ack_check+0x160>
            while (search_ptr)
 8008846:	2b00      	cmp	r3, #0
 8008848:	f43f aecc 	beq.w	80085e4 <_nx_tcp_socket_state_ack_check+0x160>
 800884c:	69da      	ldr	r2, [r3, #28]
 800884e:	46b4      	mov	ip, r6
 8008850:	461e      	mov	r6, r3
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8008852:	f1b2 3fdd 	cmp.w	r2, #3722304989	; 0xdddddddd
 8008856:	68b5      	ldr	r5, [r6, #8]
 8008858:	d1c8      	bne.n	80087ec <_nx_tcp_socket_state_ack_check+0x368>
 800885a:	462a      	mov	r2, r5
 800885c:	2500      	movs	r5, #0
 800885e:	e7ca      	b.n	80087f6 <_nx_tcp_socket_state_ack_check+0x372>
 8008860:	eba1 0808 	sub.w	r8, r1, r8
 8008864:	f04f 0b00 	mov.w	fp, #0
 8008868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800886a:	e750      	b.n	800870e <_nx_tcp_socket_state_ack_check+0x28a>
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800886c:	4402      	add	r2, r0
 800886e:	667a      	str	r2, [r7, #100]	; 0x64
 8008870:	e74d      	b.n	800870e <_nx_tcp_socket_state_ack_check+0x28a>
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 8008872:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8008874:	3301      	adds	r3, #1
                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 8008876:	2b03      	cmp	r3, #3
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 8008878:	6783      	str	r3, [r0, #120]	; 0x78
                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 800887a:	d028      	beq.n	80088ce <_nx_tcp_socket_state_ack_check+0x44a>
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800887c:	d903      	bls.n	8008886 <_nx_tcp_socket_state_ack_check+0x402>
 800887e:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8008882:	2b01      	cmp	r3, #1
 8008884:	d007      	beq.n	8008896 <_nx_tcp_socket_state_ack_check+0x412>
 8008886:	4641      	mov	r1, r8
 8008888:	e7a5      	b.n	80087d6 <_nx_tcp_socket_state_ack_check+0x352>
            else if (socket_ptr -> nx_tcp_socket_tx_window_advertised != 0)
 800888a:	2a00      	cmp	r2, #0
 800888c:	f43f aee1 	beq.w	8008652 <_nx_tcp_socket_state_ack_check+0x1ce>
                socket_ptr -> nx_tcp_socket_timeout =  0;
 8008890:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008894:	e6dd      	b.n	8008652 <_nx_tcp_socket_state_ack_check+0x1ce>
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 8008896:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008898:	4641      	mov	r1, r8
 800889a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800889c:	4413      	add	r3, r2
 800889e:	6643      	str	r3, [r0, #100]	; 0x64
 80088a0:	e799      	b.n	80087d6 <_nx_tcp_socket_state_ack_check+0x352>
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 80088a2:	1a52      	subs	r2, r2, r1
 80088a4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80088a6:	f112 0f02 	cmn.w	r2, #2
 80088aa:	f53f af50 	bmi.w	800874e <_nx_tcp_socket_state_ack_check+0x2ca>
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 80088ae:	2200      	movs	r2, #0
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 80088b0:	f8c7 8070 	str.w	r8, [r7, #112]	; 0x70
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 80088b4:	eba1 0808 	sub.w	r8, r1, r8
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 80088b8:	67ba      	str	r2, [r7, #120]	; 0x78
 80088ba:	e752      	b.n	8008762 <_nx_tcp_socket_state_ack_check+0x2de>
                _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 80088bc:	4638      	mov	r0, r7
 80088be:	f7fa fc69 	bl	8003194 <_nx_tcp_packet_send_ack>
 80088c2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80088c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088c8:	eba1 0808 	sub.w	r8, r1, r8
 80088cc:	e71f      	b.n	800870e <_nx_tcp_socket_state_ack_check+0x28a>
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 80088ce:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80088d0:	eba8 0303 	sub.w	r3, r8, r3
 80088d4:	3b01      	subs	r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dc09      	bgt.n	80088ee <_nx_tcp_socket_state_ack_check+0x46a>
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 80088da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80088dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80088de:	4293      	cmp	r3, r2
 80088e0:	d9d1      	bls.n	8008886 <_nx_tcp_socket_state_ack_check+0x402>
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 80088e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80088e4:	eba8 0303 	sub.w	r3, r8, r3
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 80088e8:	ebb3 0382 	subs.w	r3, r3, r2, lsl #2
 80088ec:	d5cb      	bpl.n	8008886 <_nx_tcp_socket_state_ack_check+0x402>
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 80088ee:	4639      	mov	r1, r7
 80088f0:	2201      	movs	r2, #1
 80088f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80088f6:	f7fa fe37 	bl	8003568 <_nx_tcp_socket_retransmit>
 80088fa:	f8da 1008 	ldr.w	r1, [sl, #8]
 80088fe:	69f5      	ldr	r5, [r6, #28]
 8008900:	e769      	b.n	80087d6 <_nx_tcp_socket_state_ack_check+0x352>
 8008902:	bf00      	nop

08008904 <_nx_tcp_socket_state_closing>:
VOID  _nx_tcp_socket_state_closing(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{


    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8008904:	68cb      	ldr	r3, [r1, #12]
 8008906:	02db      	lsls	r3, r3, #11
 8008908:	d503      	bpl.n	8008912 <_nx_tcp_socket_state_closing+0xe>
    {

        /* If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800890a:	688a      	ldr	r2, [r1, #8]
 800890c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800890e:	429a      	cmp	r2, r3
 8008910:	d000      	beq.n	8008914 <_nx_tcp_socket_state_closing+0x10>
 8008912:	4770      	bx	lr
 8008914:	684a      	ldr	r2, [r1, #4]
 8008916:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008918:	429a      	cmp	r2, r3
 800891a:	d1fa      	bne.n	8008912 <_nx_tcp_socket_state_closing+0xe>

            /* Set the socket state to TIMED WAIT now.  */
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;

            /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800891c:	4a0b      	ldr	r2, [pc, #44]	; (800894c <_nx_tcp_socket_state_closing+0x48>)
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800891e:	210a      	movs	r1, #10

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8008920:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8008924:	6812      	ldr	r2, [r2, #0]
{
 8008926:	b510      	push	{r4, lr}
 8008928:	4604      	mov	r4, r0
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800892a:	6441      	str	r1, [r0, #68]	; 0x44
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800892c:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8008930:	b123      	cbz	r3, 800893c <_nx_tcp_socket_state_closing+0x38>
            {

                /* Resume the thread suspended for the disconnect.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8008932:	2100      	movs	r1, #0
 8008934:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 8008938:	f000 fc42 	bl	80091c0 <_nx_tcp_socket_thread_resume>
            }

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 800893c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8008940:	b11b      	cbz	r3, 800894a <_nx_tcp_socket_state_closing+0x46>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8008942:	4620      	mov	r0, r4
#endif
        }

        /* Ignore the segment.  According to RFC 793, Section 3.9, Page 73.  */
    }
}
 8008944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8008948:	4718      	bx	r3
}
 800894a:	bd10      	pop	{r4, pc}
 800894c:	200190f8 	.word	0x200190f8

08008950 <_nx_tcp_socket_state_data_check>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_data_check(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif


    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008954:	f8d1 b008 	ldr.w	fp, [r1, #8]
{
 8008958:	b083      	sub	sp, #12

    /* Pickup the begin sequence of this packet. */
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;

    /* Calculate the data length in the packet.  */
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800895a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
{
 800895c:	4605      	mov	r5, r0
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800895e:	f8db 300c 	ldr.w	r3, [fp, #12]
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;
 8008962:	f8db 9004 	ldr.w	r9, [fp, #4]
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008966:	0f1c      	lsrs	r4, r3, #28
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 8008968:	eba2 0484 	sub.w	r4, r2, r4, lsl #2

    /* Pickup the end sequence of this packet. The end sequence is one byte to the last byte in this packet. */
    packet_end_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800896c:	eb09 0704 	add.w	r7, r9, r4

    /* Trim the data that out of the receive window, make sure all data are in receive window.  */
    if (packet_data_length)
 8008970:	2c00      	cmp	r4, #0
 8008972:	f000 813a 	beq.w	8008bea <_nx_tcp_socket_state_data_check+0x29a>
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 8008976:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008978:	4688      	mov	r8, r1
    {

        /* Step1. trim the data on the left side of the receive window.  */
        if (((INT)socket_ptr -> nx_tcp_socket_rx_sequence - (INT)packet_begin_sequence) > 0)
 800897a:	464e      	mov	r6, r9
 800897c:	eba3 0a09 	sub.w	sl, r3, r9
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 8008980:	9300      	str	r3, [sp, #0]
        if (((INT)socket_ptr -> nx_tcp_socket_rx_sequence - (INT)packet_begin_sequence) > 0)
 8008982:	f1ba 0f00 	cmp.w	sl, #0
 8008986:	f300 813e 	bgt.w	8008c06 <_nx_tcp_socket_state_data_check+0x2b6>
 800898a:	461a      	mov	r2, r3
            packet_begin_sequence += trim_data_length;
        }

        /* Step2. trim the data on the right side of the receive window.  */
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
             (INT)socket_ptr -> nx_tcp_socket_rx_window_current) > 0)
 800898c:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 8008990:	1afb      	subs	r3, r7, r3
 8008992:	eba3 030c 	sub.w	r3, r3, ip
 8008996:	2b00      	cmp	r3, #0
 8008998:	f300 814e 	bgt.w	8008c38 <_nx_tcp_socket_state_data_check+0x2e8>
            packet_end_sequence -= trim_data_length;
        }
    }

    /* Determine if the packet has the FIN bit set to signal a disconnect.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 800899c:	f8db 300c 	ldr.w	r3, [fp, #12]
 80089a0:	03d9      	lsls	r1, r3, #15
 80089a2:	d506      	bpl.n	80089b2 <_nx_tcp_socket_state_data_check+0x62>
    {

        /* Setup the FIN sequence number that we need to look at.  */
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 80089a4:	f8db 3004 	ldr.w	r3, [fp, #4]

        /* Indicate that the FIN sequence is now valid.  Once the receive chain is complete
           we will process (ACK) the FIN command which is part of a disconnect started by the
           other side of the connection.  */
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 80089a8:	2201      	movs	r2, #1
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 80089aa:	4423      	add	r3, r4
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 80089ac:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 80089b0:	65ab      	str	r3, [r5, #88]	; 0x58
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_FIN_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
    }

    /* Compute the amount of payload data in this packet. */
    if (packet_data_length == 0)
 80089b2:	2c00      	cmp	r4, #0
 80089b4:	f000 811f 	beq.w	8008bf6 <_nx_tcp_socket_state_data_check+0x2a6>
 80089b8:	f8db 3004 	ldr.w	r3, [fp, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Ensure the next pointer in the packet is set to NULL, which will indicate to the
       receive logic that it is not yet part of a contiguous stream.  */
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 80089bc:	2200      	movs	r2, #0
 80089be:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

    /* Otherwise, the packet is within the receive window so continue processing
       the incoming TCP data.  */

    /* Pickup the tail pointer of the receive queue.  */
    search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 80089c0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80089c4:	1a5c      	subs	r4, r3, r1
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 80089c6:	f8c8 201c 	str.w	r2, [r8, #28]
 80089ca:	fab4 f484 	clz	r4, r4
 80089ce:	0964      	lsrs	r4, r4, #5

    /* Check to see if the tail pointer is part of a contiguous stream.  */
    if (search_ptr)
 80089d0:	2800      	cmp	r0, #0
 80089d2:	f000 8203 	beq.w	8008ddc <_nx_tcp_socket_state_data_check+0x48c>
    {

        /* Setup a pointer to header of this packet in the sent list.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 80089d6:	6882      	ldr	r2, [r0, #8]

        /* Determine the size of the search TCP header.  */
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

        /* Now see if the current sequence number accounts for the last packet.  */
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 80089d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80089da:	f8d2 c004 	ldr.w	ip, [r2, #4]
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 80089de:	68d2      	ldr	r2, [r2, #12]
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 80089e0:	4463      	add	r3, ip
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 80089e2:	0f12      	lsrs	r2, r2, #28
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 80089e4:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
#endif /* NX_ENABLE_LOW_WATERMARK */

    /* Determine if we have a simple case of TCP data coming in the correct order.  This means
       the socket's sequence number matches the incoming packet sequence number and the last packet's
       data on the socket's receive queue (if any) matches the current sequence number.  */
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 80089e8:	428b      	cmp	r3, r1
 80089ea:	d102      	bne.n	80089f2 <_nx_tcp_socket_state_data_check+0xa2>
 80089ec:	2c00      	cmp	r4, #0
 80089ee:	f040 8235 	bne.w	8008e5c <_nx_tcp_socket_state_data_check+0x50c>
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* End of the simple case: add new packet towards the end of the recv queue.
           All packets in the receive queue are in sequence. */
    }
    else if (socket_ptr -> nx_tcp_socket_receive_queue_head == NX_NULL)
 80089f2:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 80089f6:	2c00      	cmp	r4, #0
 80089f8:	f000 820a 	beq.w	8008e10 <_nx_tcp_socket_state_data_check+0x4c0>

        /* Go through the received packet chain, and locate the first packet that the
           packet_begin_sequence is to the right of the end of it. */

        /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
        if (((INT)packet_begin_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) > 0)
 80089fc:	1a76      	subs	r6, r6, r1
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	f300 819b 	bgt.w	8008d3a <_nx_tcp_socket_state_data_check+0x3ea>
        }

        /* At this point, it is guaranteed that the receive queue contains packets. */
        search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;

        previous_ptr = NX_NULL;
 8008a04:	f04f 0a00 	mov.w	sl, #0
        work_ptr -> nx_packet_next = NX_NULL;
 8008a08:	4652      	mov	r2, sl

        while (search_ptr)
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 8008a0a:	f1b4 3fee 	cmp.w	r4, #4008636142	; 0xeeeeeeee
 8008a0e:	f000 8155 	beq.w	8008cbc <_nx_tcp_socket_state_data_check+0x36c>
 8008a12:	fab4 f684 	clz	r6, r4
 8008a16:	0976      	lsrs	r6, r6, #5
 8008a18:	2e00      	cmp	r6, #0
 8008a1a:	f040 814f 	bne.w	8008cbc <_nx_tcp_socket_state_data_check+0x36c>
                break;
            }

            /* Setup a pointer to header of this packet in the receive list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 8008a1e:	68a3      	ldr	r3, [r4, #8]
            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;

            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8008a20:	6a60      	ldr	r0, [r4, #36]	; 0x24
            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 8008a22:	f8d3 c004 	ldr.w	ip, [r3, #4]
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008a26:	68d9      	ldr	r1, [r3, #12]
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8008a28:	eb00 0e0c 	add.w	lr, r0, ip
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008a2c:	0f09      	lsrs	r1, r1, #28
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8008a2e:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
             *        In this configuration, the incoming packet is completely to the right of      *
             *        search_ptr.  Move to the next search packet.                                  *
             *                                                                                      *
             ****************************************************************************************/
            /* packet_ptr is to the right of search_ptr */
            if (((INT)(packet_begin_sequence - search_end_sequence)) >= 0)
 8008a32:	eba9 0e01 	sub.w	lr, r9, r1
 8008a36:	f1be 0f00 	cmp.w	lr, #0
 8008a3a:	f280 8139 	bge.w	8008cb0 <_nx_tcp_socket_state_data_check+0x360>
             *              SSSSSSSSS                                                               *
             *        In this configuration, the incoming packet is completely to the left of       *
             *        search_ptr.  Incoming packet needs to be inserted in front of search ptr.     *
             *                                                                                      *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_end_sequence)) >= 0)
 8008a3e:	ebac 0e07 	sub.w	lr, ip, r7
 8008a42:	f1be 0f00 	cmp.w	lr, #0
 8008a46:	da2f      	bge.n	8008aa8 <_nx_tcp_socket_state_data_check+0x158>
             *        to search for contigous data, therefore no need to wake up user thread.       *
             *        Howerver may need to send out ACK if new packet is to the right of the seq    *
             *        number.                                                                       *
             *                                                                                      *
             ****************************************************************************************/
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 8008a48:	eba9 0e0c 	sub.w	lr, r9, ip
 8008a4c:	f1be 0f00 	cmp.w	lr, #0
 8008a50:	db05      	blt.n	8008a5e <_nx_tcp_socket_state_data_check+0x10e>
                (((INT)(search_end_sequence - packet_end_sequence)) >= 0))
 8008a52:	eba1 0e07 	sub.w	lr, r1, r7
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 8008a56:	f1be 0f00 	cmp.w	lr, #0
 8008a5a:	f280 8168 	bge.w	8008d2e <_nx_tcp_socket_state_data_check+0x3de>
             *         Release existing packet, and insert new packet, then check for the next      *
             *         packet on the chain.  The next search may yield case (5).  Need to check     *
             *         for contingous data, may need to send ACK.                                   *
             *                                                                                      *
            ****************************************************************************************/
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 8008a5e:	ebac 0609 	sub.w	r6, ip, r9
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	f2c0 8108 	blt.w	8008c78 <_nx_tcp_socket_state_data_check+0x328>
                (((INT)(packet_end_sequence - search_end_sequence) >= 0)))
 8008a68:	1a79      	subs	r1, r7, r1
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	f280 8138 	bge.w	8008ce0 <_nx_tcp_socket_state_data_check+0x390>
             *        contigous data, may need to send out ACK.                                     *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_begin_sequence)) >= 0)
            {

                _nx_tcp_socket_state_data_trim(packet_ptr, (packet_end_sequence - search_begin_sequence));
 8008a70:	eba7 070c 	sub.w	r7, r7, ip
    if (amount >= packet_ptr -> nx_packet_length)
 8008a74:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8008a78:	429f      	cmp	r7, r3
 8008a7a:	d215      	bcs.n	8008aa8 <_nx_tcp_socket_state_data_check+0x158>
    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 8008a7c:	1bdf      	subs	r7, r3, r7
    packet_ptr -> nx_packet_length = bytes_to_keep;
 8008a7e:	4641      	mov	r1, r8
 8008a80:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
 8008a84:	684e      	ldr	r6, [r1, #4]
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 8008a86:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8008a8a:	1ad0      	subs	r0, r2, r3
 8008a8c:	42b8      	cmp	r0, r7
 8008a8e:	f2c0 81fc 	blt.w	8008e8a <_nx_tcp_socket_state_data_check+0x53a>
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8008a92:	443b      	add	r3, r7
        work_ptr -> nx_packet_next = NX_NULL;
 8008a94:	2200      	movs	r2, #0
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8008a96:	60cb      	str	r3, [r1, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 8008a98:	604a      	str	r2, [r1, #4]
        if (work_ptr)
 8008a9a:	b12e      	cbz	r6, 8008aa8 <_nx_tcp_socket_state_data_check+0x158>
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008a9c:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
            _nx_packet_release(work_ptr);
 8008aa0:	4630      	mov	r0, r6
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008aa2:	6233      	str	r3, [r6, #32]
            _nx_packet_release(work_ptr);
 8008aa4:	f7fa f952 	bl	8002d4c <_nx_packet_release>
            previous_ptr = search_ptr;
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
        }   /* End of while (search_ptr) */

        /* At this point, the logic (within the while loop) finds a location where this packet should be inserted. */
        if (previous_ptr == NX_NULL)
 8008aa8:	f1ba 0f00 	cmp.w	sl, #0
 8008aac:	f000 81ad 	beq.w	8008e0a <_nx_tcp_socket_state_data_check+0x4ba>
        }
        else
        {

            /* The packet needs to be inserted after previous_ptr. */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = packet_ptr;
 8008ab0:	f8ca 8020 	str.w	r8, [sl, #32]
        }

        if (search_ptr == NX_NULL)
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	f000 81a1 	beq.w	8008dfc <_nx_tcp_socket_state_data_check+0x4ac>
        }
        else
        {

            /* Chain search_ptr onto packet_ptr. */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = search_ptr;
 8008aba:	f8c8 4020 	str.w	r4, [r8, #32]

        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

        /* Increment the receive TCP packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8008abe:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
ULONG          acked_packets = 0;
 8008ac2:	2400      	movs	r4, #0

        /* End of the out-of-order search.  At this point, the packet has been inserted. */

        /* Now we need to figure out how much, if any, we can ACK.  */
        search_ptr =    socket_ptr -> nx_tcp_socket_receive_queue_head;
 8008ac4:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0

                    acked_packets++;

                    /* Mark this packet as ready for retrieval.  */
                    /*lint -e{923} suppress cast of ULONG to pointer.  */
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8008ac8:	f04f 3cbb 	mov.w	ip, #3149642683	; 0xbbbbbbbb
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8008acc:	3201      	adds	r2, #1
        expected_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 8008ace:	6cef      	ldr	r7, [r5, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8008ad0:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 8008ad4:	6886      	ldr	r6, [r0, #8]
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8008ad6:	6a43      	ldr	r3, [r0, #36]	; 0x24
            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 8008ad8:	6871      	ldr	r1, [r6, #4]
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008ada:	68f6      	ldr	r6, [r6, #12]
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8008adc:	440b      	add	r3, r1
            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 8008ade:	1a79      	subs	r1, r7, r1
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008ae0:	0f36      	lsrs	r6, r6, #28
            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 8008ae2:	2900      	cmp	r1, #0
            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8008ae4:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
                if ((INT)(search_end_sequence - expected_sequence) > 0)
 8008ae8:	eba3 0107 	sub.w	r1, r3, r7
            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 8008aec:	db0d      	blt.n	8008b0a <_nx_tcp_socket_state_data_check+0x1ba>
                if ((INT)(search_end_sequence - expected_sequence) > 0)
 8008aee:	2900      	cmp	r1, #0
 8008af0:	f340 80ed 	ble.w	8008cce <_nx_tcp_socket_state_data_check+0x37e>
                    socket_ptr -> nx_tcp_socket_rx_sequence = expected_sequence;
 8008af4:	64eb      	str	r3, [r5, #76]	; 0x4c
                    acked_packets++;
 8008af6:	3401      	adds	r4, #1
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8008af8:	f8c0 c01c 	str.w	ip, [r0, #28]
                    expected_sequence = search_end_sequence;
 8008afc:	461f      	mov	r7, r3
                /* Expected number is to the left of search_ptr.   Get out of the do-while loop!  */
                break;
            }

            /* Move the search pointer to the next queued receive packet.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8008afe:	6a00      	ldr	r0, [r0, #32]

                /* Get out of the loop!  */
                break;
            }
#endif /* NX_ENABLE_LOW_WATERMARK */
        } while (search_ptr);
 8008b00:	f1b0 3fee 	cmp.w	r0, #4008636142	; 0xeeeeeeee
 8008b04:	d001      	beq.n	8008b0a <_nx_tcp_socket_state_data_check+0x1ba>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d1e4      	bne.n	8008ad4 <_nx_tcp_socket_state_data_check+0x184>
 8008b0a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
    socket_ptr -> nx_tcp_socket_packets_received++;
    socket_ptr -> nx_tcp_socket_bytes_received += packet_data_length;
#endif

    /* Check if the rx sequence number has been updated.  */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8008b0c:	9b00      	ldr	r3, [sp, #0]
 8008b0e:	42bb      	cmp	r3, r7
 8008b10:	f000 8171 	beq.w	8008df6 <_nx_tcp_socket_state_data_check+0x4a6>
    {

        /* Decrease the receive window size since rx_sequence is updated.  */
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8008b14:	1bdf      	subs	r7, r3, r7

        /* Update the rx_window_last_sent for SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98.  */
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8008b16:	e9d5 c320 	ldrd	ip, r3, [r5, #128]	; 0x80
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8008b1a:	44bc      	add	ip, r7
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8008b1c:	443b      	add	r3, r7
 8008b1e:	e9c5 c320 	strd	ip, r3, [r5, #128]	; 0x80

    /* At this point, we can use the packet TCP header pointers since the received
       packet is already queued.  */

    /* Any packets for receving? */
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8008b22:	2c00      	cmp	r4, #0
 8008b24:	d040      	beq.n	8008ba8 <_nx_tcp_socket_state_data_check+0x258>
 8008b26:	f8d5 10f8 	ldr.w	r1, [r5, #248]	; 0xf8
 8008b2a:	2900      	cmp	r1, #0
 8008b2c:	d03c      	beq.n	8008ba8 <_nx_tcp_socket_state_data_check+0x258>
 8008b2e:	f105 08f8 	add.w	r8, r5, #248	; 0xf8
        /* Simply update the head pointer of the queue.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;

        /* Mark the packet as no longer being part of the TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008b32:	f04f 37aa 	mov.w	r7, #2863311530	; 0xaaaaaaaa

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008b36:	f04f 0a00 	mov.w	sl, #0
 8008b3a:	46c1      	mov	r9, r8
 8008b3c:	e006      	b.n	8008b4c <_nx_tcp_socket_state_data_check+0x1fc>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8008b3e:	f8d5 10f8 	ldr.w	r1, [r5, #248]	; 0xf8
 8008b42:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 8008b46:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 8008b4a:	b369      	cbz	r1, 8008ba8 <_nx_tcp_socket_state_data_check+0x258>
        packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 8008b4c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8008b50:	f102 3eff 	add.w	lr, r2, #4294967295

        /* Setup a pointer to the first thread suspended on the receive queue.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;

        /* Place the packet pointer in the return pointer.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8008b54:	f8d1 807c 	ldr.w	r8, [r1, #124]	; 0x7c

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;

        /* Decrement the acked_packets count. */
        acked_packets--;
 8008b58:	3c01      	subs	r4, #1
        tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008b5a:	f8d3 b008 	ldr.w	fp, [r3, #8]

        /* Resume thread.  */
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 8008b5e:	2100      	movs	r1, #0
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 8008b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008b62:	f8db 000c 	ldr.w	r0, [fp, #12]
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8008b66:	6a1e      	ldr	r6, [r3, #32]
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008b68:	0f00      	lsrs	r0, r0, #28
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8008b6a:	f8c5 60c0 	str.w	r6, [r5, #192]	; 0xc0
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8008b6e:	0080      	lsls	r0, r0, #2
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8008b70:	f8d5 60fc 	ldr.w	r6, [r5, #252]	; 0xfc
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 8008b74:	1a12      	subs	r2, r2, r0
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 8008b76:	4458      	add	r0, fp
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008b78:	e9c3 a707 	strd	sl, r7, [r3, #28]
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 8008b7c:	4494      	add	ip, r2
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8008b7e:	f8c5 e0bc 	str.w	lr, [r5, #188]	; 0xbc
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8008b82:	f106 3eff 	add.w	lr, r6, #4294967295
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 8008b86:	6098      	str	r0, [r3, #8]
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 8008b8a:	4648      	mov	r0, r9
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8008b8c:	f8c8 3000 	str.w	r3, [r8]
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 8008b90:	f8c5 c080 	str.w	ip, [r5, #128]	; 0x80
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8008b94:	f8c5 e0fc 	str.w	lr, [r5, #252]	; 0xfc
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 8008b98:	f000 fb12 	bl	80091c0 <_nx_tcp_socket_thread_resume>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8008b9c:	2c00      	cmp	r4, #0
 8008b9e:	d1ce      	bne.n	8008b3e <_nx_tcp_socket_state_data_check+0x1ee>
 8008ba0:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 8008ba4:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 8008ba8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    }

    /* Is the queue empty?.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 8008baa:	b90a      	cbnz	r2, 8008bb0 <_nx_tcp_socket_state_data_check+0x260>
    {

        /* Yes. Set both head and tail pointers to NULL.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
        socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 8008bac:	e9c5 2230 	strd	r2, r2, [r5, #192]	; 0xc0
    }

    /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
       RFC1122, Section4.2.3.3, Page97-98. */
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 8008bb0:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8008bb4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8008bb6:	ebac 0c01 	sub.w	ip, ip, r1
 8008bba:	ebbc 0f52 	cmp.w	ip, r2, lsr #1
 8008bbe:	f080 809f 	bcs.w	8008d00 <_nx_tcp_socket_state_data_check+0x3b0>
        need_ack = NX_TRUE;
    }

    /* If the incoming packet caused the sequence number to move forward,
       indicating the new piece of data is in order, in sequence, and valid for receiving. */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8008bc2:	9a00      	ldr	r2, [sp, #0]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d00c      	beq.n	8008be2 <_nx_tcp_socket_state_data_check+0x292>
UINT           need_ack = NX_FALSE;
 8008bc8:	2400      	movs	r4, #0
    {
        /* Determine if there is a socket receive notification function specified.  */
        if (socket_ptr -> nx_tcp_receive_callback)
 8008bca:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8008bce:	b10b      	cbz	r3, 8008bd4 <_nx_tcp_socket_state_data_check+0x284>
        {

            /* Yes, notification is requested.  Call the application's receive notification
               function for this socket.  */
            (socket_ptr -> nx_tcp_receive_callback)(socket_ptr);
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	4798      	blx	r3
#ifdef NX_TCP_ACK_EVERY_N_PACKETS
        /* Determine if we need to ACK up to the current sequence number.  */

        /* If we are still in an ESTABLISHED state, a FIN isn't present and we can
           allocate a packet for the ACK message, send an ACK message.  */
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 8008bd4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008bd6:	2b05      	cmp	r3, #5
 8008bd8:	f000 80ec 	beq.w	8008db4 <_nx_tcp_socket_state_data_check+0x464>
            }
        }
#endif
    }

    if (need_ack == NX_TRUE)
 8008bdc:	2c00      	cmp	r4, #0
 8008bde:	f040 8092 	bne.w	8008d06 <_nx_tcp_socket_state_data_check+0x3b6>
        /* Need to send ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
    }

    /* Return true since the packet was queued.  */
    return(NX_TRUE);
 8008be2:	2001      	movs	r0, #1
}
 8008be4:	b003      	add	sp, #12
 8008be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 8008bea:	03db      	lsls	r3, r3, #15
 8008bec:	d503      	bpl.n	8008bf6 <_nx_tcp_socket_state_data_check+0x2a6>
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 8008bee:	2301      	movs	r3, #1
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 8008bf0:	6587      	str	r7, [r0, #88]	; 0x58
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 8008bf2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 8008bf6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008bf8:	2b05      	cmp	r3, #5
 8008bfa:	f000 8089 	beq.w	8008d10 <_nx_tcp_socket_state_data_check+0x3c0>
        return(NX_FALSE);
 8008bfe:	2000      	movs	r0, #0
}
 8008c00:	b003      	add	sp, #12
 8008c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (amount >= packet_ptr -> nx_packet_length || amount == 0)
 8008c06:	4552      	cmp	r2, sl
 8008c08:	bf8c      	ite	hi
 8008c0a:	2600      	movhi	r6, #0
 8008c0c:	2601      	movls	r6, #1
 8008c0e:	2e00      	cmp	r6, #0
 8008c10:	f000 809a 	beq.w	8008d48 <_nx_tcp_socket_state_data_check+0x3f8>
 8008c14:	461a      	mov	r2, r3
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 8008c16:	1afb      	subs	r3, r7, r3
             (INT)socket_ptr -> nx_tcp_socket_rx_window_current) > 0)
 8008c18:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 8008c1c:	eb0a 0109 	add.w	r1, sl, r9
            packet_data_length -= trim_data_length;
 8008c20:	f8dd 9000 	ldr.w	r9, [sp]
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 8008c24:	eba3 030c 	sub.w	r3, r3, ip
            packet_data_length -= trim_data_length;
 8008c28:	eba4 040a 	sub.w	r4, r4, sl
 8008c2c:	464e      	mov	r6, r9
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 8008c2e:	f8cb 1004 	str.w	r1, [fp, #4]
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f77f aeb2 	ble.w	800899c <_nx_tcp_socket_state_data_check+0x4c>
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 8008c38:	eb0c 0a02 	add.w	sl, ip, r2
    if (amount >= packet_ptr -> nx_packet_length)
 8008c3c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 8008c40:	eba7 070a 	sub.w	r7, r7, sl
    if (amount >= packet_ptr -> nx_packet_length)
 8008c44:	4287      	cmp	r7, r0
 8008c46:	d214      	bcs.n	8008c72 <_nx_tcp_socket_state_data_check+0x322>
    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 8008c48:	1bc0      	subs	r0, r0, r7
    packet_ptr -> nx_packet_length = bytes_to_keep;
 8008c4a:	4641      	mov	r1, r8
 8008c4c:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 8008c50:	f8d1 c004 	ldr.w	ip, [r1, #4]
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 8008c54:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8008c58:	eba2 0e03 	sub.w	lr, r2, r3
 8008c5c:	4586      	cmp	lr, r0
 8008c5e:	f2c0 80b6 	blt.w	8008dce <_nx_tcp_socket_state_data_check+0x47e>
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8008c62:	4403      	add	r3, r0
        work_ptr -> nx_packet_next = NX_NULL;
 8008c64:	2200      	movs	r2, #0
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8008c66:	60cb      	str	r3, [r1, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 8008c68:	604a      	str	r2, [r1, #4]
        if (work_ptr)
 8008c6a:	f1bc 0f00 	cmp.w	ip, #0
 8008c6e:	f040 80ed 	bne.w	8008e4c <_nx_tcp_socket_state_data_check+0x4fc>
            packet_data_length -= trim_data_length;
 8008c72:	1be4      	subs	r4, r4, r7
            packet_end_sequence -= trim_data_length;
 8008c74:	4657      	mov	r7, sl
 8008c76:	e691      	b.n	800899c <_nx_tcp_socket_state_data_check+0x4c>
            _nx_tcp_socket_state_data_trim(search_ptr, (ULONG)(search_end_sequence - packet_begin_sequence));
 8008c78:	eba1 0109 	sub.w	r1, r1, r9
    if (amount >= packet_ptr -> nx_packet_length)
 8008c7c:	4288      	cmp	r0, r1
 8008c7e:	d917      	bls.n	8008cb0 <_nx_tcp_socket_state_data_check+0x360>
    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 8008c80:	1a41      	subs	r1, r0, r1
    packet_ptr -> nx_packet_length = bytes_to_keep;
 8008c82:	46a4      	mov	ip, r4
 8008c84:	6261      	str	r1, [r4, #36]	; 0x24
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 8008c86:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8008c8a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008c8e:	eba6 0e03 	sub.w	lr, r6, r3
 8008c92:	458e      	cmp	lr, r1
 8008c94:	db14      	blt.n	8008cc0 <_nx_tcp_socket_state_data_check+0x370>
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8008c96:	440b      	add	r3, r1
        work_ptr -> nx_packet_next = NX_NULL;
 8008c98:	f8cc 2004 	str.w	r2, [ip, #4]
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8008c9c:	f8cc 300c 	str.w	r3, [ip, #12]
        if (work_ptr)
 8008ca0:	b130      	cbz	r0, 8008cb0 <_nx_tcp_socket_state_data_check+0x360>
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008ca2:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8008ca6:	9201      	str	r2, [sp, #4]
 8008ca8:	6203      	str	r3, [r0, #32]
            _nx_packet_release(work_ptr);
 8008caa:	f7fa f84f 	bl	8002d4c <_nx_packet_release>
 8008cae:	9a01      	ldr	r2, [sp, #4]
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8008cb0:	46a2      	mov	sl, r4
 8008cb2:	6a24      	ldr	r4, [r4, #32]
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 8008cb4:	f1b4 3fee 	cmp.w	r4, #4008636142	; 0xeeeeeeee
 8008cb8:	f47f aeab 	bne.w	8008a12 <_nx_tcp_socket_state_data_check+0xc2>
                search_ptr = NX_NULL;
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	e6f3      	b.n	8008aa8 <_nx_tcp_socket_state_data_check+0x158>
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 8008cc0:	1b9e      	subs	r6, r3, r6
 8008cc2:	4684      	mov	ip, r0
 8008cc4:	4431      	add	r1, r6
    while (work_ptr)
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d0f2      	beq.n	8008cb0 <_nx_tcp_socket_state_data_check+0x360>
 8008cca:	6883      	ldr	r3, [r0, #8]
 8008ccc:	e7db      	b.n	8008c86 <_nx_tcp_socket_state_data_check+0x336>
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8008cce:	6a00      	ldr	r0, [r0, #32]
        } while (search_ptr);
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	f43f af1a 	beq.w	8008b0a <_nx_tcp_socket_state_data_check+0x1ba>
 8008cd6:	f1b0 3fee 	cmp.w	r0, #4008636142	; 0xeeeeeeee
 8008cda:	f47f aefb 	bne.w	8008ad4 <_nx_tcp_socket_state_data_check+0x184>
 8008cde:	e714      	b.n	8008b0a <_nx_tcp_socket_state_data_check+0x1ba>
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8008ce0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
                _nx_packet_release(search_ptr);
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	9201      	str	r2, [sp, #4]
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008ce8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8008cec:	3b01      	subs	r3, #1
                tmp_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8008cee:	6a21      	ldr	r1, [r4, #32]
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008cf0:	6222      	str	r2, [r4, #32]
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8008cf2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
                search_ptr = tmp_ptr;
 8008cf6:	460c      	mov	r4, r1
                _nx_packet_release(search_ptr);
 8008cf8:	f7fa f828 	bl	8002d4c <_nx_packet_release>
                continue;
 8008cfc:	9a01      	ldr	r2, [sp, #4]
 8008cfe:	e684      	b.n	8008a0a <_nx_tcp_socket_state_data_check+0xba>
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8008d00:	9a00      	ldr	r2, [sp, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d161      	bne.n	8008dca <_nx_tcp_socket_state_data_check+0x47a>
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008d06:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f7fa fa43 	bl	8003194 <_nx_tcp_packet_send_ack>
 8008d0e:	e768      	b.n	8008be2 <_nx_tcp_socket_state_data_check+0x292>
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 8008d10:	f8d5 60bc 	ldr.w	r6, [r5, #188]	; 0xbc
 8008d14:	2e00      	cmp	r6, #0
 8008d16:	f47f af72 	bne.w	8008bfe <_nx_tcp_socket_state_data_check+0x2ae>
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 8008d1a:	f8db 2004 	ldr.w	r2, [fp, #4]
 8008d1e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 8008d20:	4293      	cmp	r3, r2
 8008d22:	f43f af6c 	beq.w	8008bfe <_nx_tcp_socket_state_data_check+0x2ae>
            ((socket_ptr -> nx_tcp_socket_rx_sequence - 1) != tcp_header_ptr -> nx_tcp_sequence_number))
 8008d26:	3b01      	subs	r3, #1
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	f43f af68 	beq.w	8008bfe <_nx_tcp_socket_state_data_check+0x2ae>
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008d2e:	4628      	mov	r0, r5
 8008d30:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8008d32:	f7fa fa2f 	bl	8003194 <_nx_tcp_packet_send_ack>
                return(NX_FALSE);
 8008d36:	4630      	mov	r0, r6
 8008d38:	e762      	b.n	8008c00 <_nx_tcp_socket_state_data_check+0x2b0>
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008d3a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f7fa fa29 	bl	8003194 <_nx_tcp_packet_send_ack>
 8008d42:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 8008d46:	e65d      	b.n	8008a04 <_nx_tcp_socket_state_data_check+0xb4>
    packet_ptr -> nx_packet_length -= amount;
 8008d48:	eba2 020a 	sub.w	r2, r2, sl
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 8008d4c:	f10b 0314 	add.w	r3, fp, #20
                work_ptr -> nx_packet_next = NX_NULL;
 8008d50:	9601      	str	r6, [sp, #4]
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 8008d52:	46d1      	mov	r9, sl
 8008d54:	4641      	mov	r1, r8
    packet_ptr -> nx_packet_length -= amount;
 8008d56:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 8008d5a:	f8c8 3008 	str.w	r3, [r8, #8]
 8008d5e:	e00f      	b.n	8008d80 <_nx_tcp_socket_state_data_check+0x430>
                packet_ptr -> nx_packet_next = work_ptr -> nx_packet_next;
 8008d60:	684b      	ldr	r3, [r1, #4]
 8008d62:	f8c8 3004 	str.w	r3, [r8, #4]
                work_ptr -> nx_packet_next = NX_NULL;
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	604b      	str	r3, [r1, #4]
                work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008d6a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8008d6e:	620b      	str	r3, [r1, #32]
                _nx_packet_release(work_ptr);
 8008d70:	f7f9 ffec 	bl	8002d4c <_nx_packet_release>
    while (amount)
 8008d74:	ebb9 0906 	subs.w	r9, r9, r6
            work_ptr = packet_ptr -> nx_packet_next;
 8008d78:	f8d8 1004 	ldr.w	r1, [r8, #4]
    while (amount)
 8008d7c:	d00f      	beq.n	8008d9e <_nx_tcp_socket_state_data_check+0x44e>
 8008d7e:	688b      	ldr	r3, [r1, #8]
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 8008d80:	68ce      	ldr	r6, [r1, #12]
                _nx_packet_release(work_ptr);
 8008d82:	4608      	mov	r0, r1
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 8008d84:	1af6      	subs	r6, r6, r3
        if (amount > work_length)
 8008d86:	454e      	cmp	r6, r9
 8008d88:	f080 8086 	bcs.w	8008e98 <_nx_tcp_socket_state_data_check+0x548>
            if (work_ptr == packet_ptr)
 8008d8c:	4588      	cmp	r8, r1
 8008d8e:	d1e7      	bne.n	8008d60 <_nx_tcp_socket_state_data_check+0x410>
    while (amount)
 8008d90:	ebb9 0906 	subs.w	r9, r9, r6
                work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr;
 8008d94:	f8c8 300c 	str.w	r3, [r8, #12]
            work_ptr = packet_ptr -> nx_packet_next;
 8008d98:	f8d8 1004 	ldr.w	r1, [r8, #4]
    while (amount)
 8008d9c:	d1ef      	bne.n	8008d7e <_nx_tcp_socket_state_data_check+0x42e>
    packet_ptr -> nx_packet_prepend_ptr -= sizeof(NX_TCP_HEADER);
 8008d9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008da2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8008da4:	f1a3 0114 	sub.w	r1, r3, #20
 8008da8:	f8db 9004 	ldr.w	r9, [fp, #4]
 8008dac:	4613      	mov	r3, r2
 8008dae:	f8c8 1008 	str.w	r1, [r8, #8]
 8008db2:	e730      	b.n	8008c16 <_nx_tcp_socket_state_data_check+0x2c6>
            ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT) == 0))
 8008db4:	f8db 300c 	ldr.w	r3, [fp, #12]
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 8008db8:	03da      	lsls	r2, r3, #15
 8008dba:	f53f af0f 	bmi.w	8008bdc <_nx_tcp_socket_state_data_check+0x28c>
            if (socket_ptr -> nx_tcp_socket_ack_n_packet_counter >= NX_TCP_ACK_EVERY_N_PACKETS)
 8008dbe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d95f      	bls.n	8008e84 <_nx_tcp_socket_state_data_check+0x534>
                socket_ptr -> nx_tcp_socket_ack_n_packet_counter = 1;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	676b      	str	r3, [r5, #116]	; 0x74
 8008dc8:	e79d      	b.n	8008d06 <_nx_tcp_socket_state_data_check+0x3b6>
        need_ack = NX_TRUE;
 8008dca:	2401      	movs	r4, #1
 8008dcc:	e6fd      	b.n	8008bca <_nx_tcp_socket_state_data_check+0x27a>
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 8008dce:	1a9b      	subs	r3, r3, r2
    while (work_ptr)
 8008dd0:	4661      	mov	r1, ip
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 8008dd2:	4418      	add	r0, r3
    while (work_ptr)
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	f47f af3b 	bne.w	8008c50 <_nx_tcp_socket_state_data_check+0x300>
 8008dda:	e74a      	b.n	8008c72 <_nx_tcp_socket_state_data_check+0x322>
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 8008ddc:	428b      	cmp	r3, r1
 8008dde:	f47f ae08 	bne.w	80089f2 <_nx_tcp_socket_state_data_check+0xa2>
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8008de2:	4b37      	ldr	r3, [pc, #220]	; (8008ec0 <_nx_tcp_socket_state_data_check+0x570>)
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8008de4:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8008de8:	681b      	ldr	r3, [r3, #0]
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8008dea:	f8c8 201c 	str.w	r2, [r8, #28]
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8008dee:	656b      	str	r3, [r5, #84]	; 0x54
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 8008df0:	e9c5 8830 	strd	r8, r8, [r5, #192]	; 0xc0
 8008df4:	e03a      	b.n	8008e6c <_nx_tcp_socket_state_data_check+0x51c>
 8008df6:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 8008dfa:	e692      	b.n	8008b22 <_nx_tcp_socket_state_data_check+0x1d2>
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 8008dfc:	f04f 33ee 	mov.w	r3, #4008636142	; 0xeeeeeeee
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 8008e00:	f8c5 80c4 	str.w	r8, [r5, #196]	; 0xc4
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 8008e04:	f8c8 3020 	str.w	r3, [r8, #32]
 8008e08:	e659      	b.n	8008abe <_nx_tcp_socket_state_data_check+0x16e>
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 8008e0a:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
 8008e0e:	e651      	b.n	8008ab4 <_nx_tcp_socket_state_data_check+0x164>
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008e10:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7fa f9be 	bl	8003194 <_nx_tcp_packet_send_ack>
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8008e18:	4b29      	ldr	r3, [pc, #164]	; (8008ec0 <_nx_tcp_socket_state_data_check+0x570>)
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8008e1a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 8008e1c:	2201      	movs	r2, #1
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8008e1e:	681b      	ldr	r3, [r3, #0]
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 8008e20:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 8008e24:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8008e28:	656b      	str	r3, [r5, #84]	; 0x54
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8008e2a:	9b00      	ldr	r3, [sp, #0]
 8008e2c:	429f      	cmp	r7, r3
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 8008e2e:	e9c5 8830 	strd	r8, r8, [r5, #192]	; 0xc0
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 8008e32:	f8c8 1020 	str.w	r1, [r8, #32]
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8008e36:	f47f ae6d 	bne.w	8008b14 <_nx_tcp_socket_state_data_check+0x1c4>
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 8008e3a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8008e3c:	e9d5 3120 	ldrd	r3, r1, [r5, #128]	; 0x80
 8008e40:	1a5b      	subs	r3, r3, r1
 8008e42:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8008e46:	f4bf af5e 	bcs.w	8008d06 <_nx_tcp_socket_state_data_check+0x3b6>
 8008e4a:	e6ca      	b.n	8008be2 <_nx_tcp_socket_state_data_check+0x292>
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008e4c:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
            _nx_packet_release(work_ptr);
 8008e50:	4660      	mov	r0, ip
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008e52:	f8cc 3020 	str.w	r3, [ip, #32]
            _nx_packet_release(work_ptr);
 8008e56:	f7f9 ff79 	bl	8002d4c <_nx_packet_release>
 8008e5a:	e70a      	b.n	8008c72 <_nx_tcp_socket_state_data_check+0x322>
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8008e5c:	f04f 33bb 	mov.w	r3, #3149642683	; 0xbbbbbbbb
 8008e60:	f8c8 301c 	str.w	r3, [r8, #28]
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  packet_ptr;
 8008e64:	f8c0 8020 	str.w	r8, [r0, #32]
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 8008e68:	f8c5 80c4 	str.w	r8, [r5, #196]	; 0xc4
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8008e6c:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 8008e70:	f04f 33ee 	mov.w	r3, #4008636142	; 0xeeeeeeee
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8008e74:	3401      	adds	r4, #1
 8008e76:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 8008e7a:	4622      	mov	r2, r4
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 8008e7c:	f8c8 3020 	str.w	r3, [r8, #32]
            socket_ptr -> nx_tcp_socket_rx_sequence =  packet_end_sequence;
 8008e80:	64ef      	str	r7, [r5, #76]	; 0x4c
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 8008e82:	e643      	b.n	8008b0c <_nx_tcp_socket_state_data_check+0x1bc>
                socket_ptr -> nx_tcp_socket_ack_n_packet_counter++;
 8008e84:	3301      	adds	r3, #1
 8008e86:	676b      	str	r3, [r5, #116]	; 0x74
 8008e88:	e6a8      	b.n	8008bdc <_nx_tcp_socket_state_data_check+0x28c>
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 8008e8a:	1a9b      	subs	r3, r3, r2
    while (work_ptr)
 8008e8c:	4631      	mov	r1, r6
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 8008e8e:	441f      	add	r7, r3
    while (work_ptr)
 8008e90:	2e00      	cmp	r6, #0
 8008e92:	f47f adf7 	bne.w	8008a84 <_nx_tcp_socket_state_data_check+0x134>
 8008e96:	e607      	b.n	8008aa8 <_nx_tcp_socket_state_data_check+0x158>
            if (work_ptr == packet_ptr)
 8008e98:	4588      	cmp	r8, r1
 8008e9a:	eb03 0009 	add.w	r0, r3, r9
 8008e9e:	d001      	beq.n	8008ea4 <_nx_tcp_socket_state_data_check+0x554>
                work_ptr -> nx_packet_prepend_ptr += amount;
 8008ea0:	6088      	str	r0, [r1, #8]
 8008ea2:	e77c      	b.n	8008d9e <_nx_tcp_socket_state_data_check+0x44e>
                memmove(packet_ptr -> nx_packet_prepend_ptr,
 8008ea4:	eba6 0209 	sub.w	r2, r6, r9
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f005 fe88 	bl	800ebc0 <memmove>
                packet_ptr -> nx_packet_append_ptr -= amount;
 8008eb0:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8008eb4:	eba2 0309 	sub.w	r3, r2, r9
 8008eb8:	f8c8 300c 	str.w	r3, [r8, #12]
 8008ebc:	e76f      	b.n	8008d9e <_nx_tcp_socket_state_data_check+0x44e>
 8008ebe:	bf00      	nop
 8008ec0:	200190fc 	.word	0x200190fc

08008ec4 <_nx_tcp_socket_state_established>:
    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
#endif
    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8008ec4:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
 8008ec8:	b11b      	cbz	r3, 8008ed2 <_nx_tcp_socket_state_established+0xe>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8008eca:	6d83      	ldr	r3, [r0, #88]	; 0x58
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8008ecc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d000      	beq.n	8008ed4 <_nx_tcp_socket_state_established+0x10>
 8008ed2:	4770      	bx	lr
{
 8008ed4:	b510      	push	{r4, lr}

        /* The FIN bit is set, we need to go into the finished state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;

        /* Increment the received sequence.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	4604      	mov	r4, r0
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 8008eda:	2206      	movs	r2, #6

        /* Loop to release all threads suspended while trying to receive on the socket.  */
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8008edc:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8008ee0:	64e3      	str	r3, [r4, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 8008ee2:	6462      	str	r2, [r4, #68]	; 0x44
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8008ee4:	b130      	cbz	r0, 8008ef4 <_nx_tcp_socket_state_established+0x30>
        {

            /* Release the head of the receive suspension list. */
            _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	f7ff f976 	bl	80081d8 <_nx_tcp_receive_cleanup>
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8008eec:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1f8      	bne.n	8008ee6 <_nx_tcp_socket_state_established+0x22>
        }

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008ef4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7fa f94c 	bl	8003194 <_nx_tcp_packet_send_ack>

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8008efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8008f00:	b11b      	cbz	r3, 8008f0a <_nx_tcp_socket_state_established+0x46>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8008f02:	4620      	mov	r0, r4
        }
    }
}
 8008f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8008f08:	4718      	bx	r3
}
 8008f0a:	bd10      	pop	{r4, pc}

08008f0c <_nx_tcp_socket_state_fin_wait1>:
{


    /* Determine if the peer has proper ACK number but FIN is not sent,
       move into the FIN WAIT 2 state and do nothing else.  */
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8008f0c:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8008f10:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
{
 8008f14:	b570      	push	{r4, r5, r6, lr}
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8008f16:	b909      	cbnz	r1, 8008f1c <_nx_tcp_socket_state_fin_wait1+0x10>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8008f18:	bb32      	cbnz	r2, 8008f68 <_nx_tcp_socket_state_fin_wait1+0x5c>
        socket_ptr -> nx_tcp_socket_rx_sequence++;

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
    }
}
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8008f1c:	b1fa      	cbz	r2, 8008f5e <_nx_tcp_socket_state_fin_wait1+0x52>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8008f1e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8008f20:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008f22:	428a      	cmp	r2, r1
 8008f24:	d1f9      	bne.n	8008f1a <_nx_tcp_socket_state_fin_wait1+0xe>
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8008f26:	4d17      	ldr	r5, [pc, #92]	; (8008f84 <_nx_tcp_socket_state_fin_wait1+0x78>)
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8008f28:	230a      	movs	r3, #10
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	4604      	mov	r4, r0
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8008f2e:	682d      	ldr	r5, [r5, #0]
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8008f30:	6443      	str	r3, [r0, #68]	; 0x44
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008f32:	6c81      	ldr	r1, [r0, #72]	; 0x48
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8008f34:	64c2      	str	r2, [r0, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8008f36:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008f3a:	f7fa f92b 	bl	8003194 <_nx_tcp_packet_send_ack>
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8008f3e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8008f42:	b123      	cbz	r3, 8008f4e <_nx_tcp_socket_state_fin_wait1+0x42>
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8008f44:	2100      	movs	r1, #0
 8008f46:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8008f4a:	f000 f939 	bl	80091c0 <_nx_tcp_socket_thread_resume>
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8008f4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0e1      	beq.n	8008f1a <_nx_tcp_socket_state_fin_wait1+0xe>
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8008f56:	4620      	mov	r0, r4
}
 8008f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8008f5c:	4718      	bx	r3
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 8008f5e:	2108      	movs	r1, #8
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8008f60:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 8008f64:	6441      	str	r1, [r0, #68]	; 0x44
}
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	6d81      	ldr	r1, [r0, #88]	; 0x58
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8008f6a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008f6c:	428a      	cmp	r2, r1
 8008f6e:	d1d4      	bne.n	8008f1a <_nx_tcp_socket_state_fin_wait1+0xe>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 8008f70:	2409      	movs	r4, #9
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8008f72:	3201      	adds	r2, #1
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008f74:	6c81      	ldr	r1, [r0, #72]	; 0x48
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 8008f76:	6444      	str	r4, [r0, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8008f78:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 8008f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008f7e:	f7fa b909 	b.w	8003194 <_nx_tcp_packet_send_ack>
 8008f82:	bf00      	nop
 8008f84:	200190f8 	.word	0x200190f8

08008f88 <_nx_tcp_socket_state_fin_wait2>:
{


    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8008f88:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8008f8c:	b132      	cbz	r2, 8008f9c <_nx_tcp_socket_state_fin_wait2+0x14>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8008f8e:	6d82      	ldr	r2, [r0, #88]	; 0x58
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8008f90:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008f92:	428a      	cmp	r2, r1
{
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4604      	mov	r4, r0
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8008f98:	d001      	beq.n	8008f9e <_nx_tcp_socket_state_fin_wait2+0x16>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
}
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	4770      	bx	lr
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8008f9e:	4d0d      	ldr	r5, [pc, #52]	; (8008fd4 <_nx_tcp_socket_state_fin_wait2+0x4c>)
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8008fa0:	230a      	movs	r3, #10
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8008fa2:	3201      	adds	r2, #1
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008fa4:	6c81      	ldr	r1, [r0, #72]	; 0x48
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8008fa6:	682d      	ldr	r5, [r5, #0]
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8008fa8:	6443      	str	r3, [r0, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8008faa:	64c2      	str	r2, [r0, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8008fac:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8008fb0:	f7fa f8f0 	bl	8003194 <_nx_tcp_packet_send_ack>
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8008fb4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8008fb8:	b123      	cbz	r3, 8008fc4 <_nx_tcp_socket_state_fin_wait2+0x3c>
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8008fba:	2100      	movs	r1, #0
 8008fbc:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8008fc0:	f000 f8fe 	bl	80091c0 <_nx_tcp_socket_thread_resume>
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8008fc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0e6      	beq.n	8008f9a <_nx_tcp_socket_state_fin_wait2+0x12>
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8008fcc:	4620      	mov	r0, r4
}
 8008fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8008fd2:	4718      	bx	r3
 8008fd4:	200190f8 	.word	0x200190f8

08008fd8 <_nx_tcp_socket_state_last_ack>:
/**************************************************************************/
VOID  _nx_tcp_socket_state_last_ack(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{

    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8008fd8:	68cb      	ldr	r3, [r1, #12]
 8008fda:	02db      	lsls	r3, r3, #11
 8008fdc:	d517      	bpl.n	800900e <_nx_tcp_socket_state_last_ack+0x36>
    {

        /*   If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8008fde:	688a      	ldr	r2, [r1, #8]
 8008fe0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008fe2:	429a      	cmp	r2, r3
{
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	4604      	mov	r4, r0
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8008fe8:	d000      	beq.n	8008fec <_nx_tcp_socket_state_last_ack+0x14>
                (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
            }
#endif
        }
    }
}
 8008fea:	bd10      	pop	{r4, pc}
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8008fec:	6849      	ldr	r1, [r1, #4]
 8008fee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	d1fa      	bne.n	8008fea <_nx_tcp_socket_state_last_ack+0x12>
            _nx_tcp_socket_block_cleanup(socket_ptr);
 8008ff4:	f7fa fa4c 	bl	8003490 <_nx_tcp_socket_block_cleanup>
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8008ff8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0f4      	beq.n	8008fea <_nx_tcp_socket_state_last_ack+0x12>
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8009000:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8009004:	2100      	movs	r1, #0
}
 8009006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800900a:	f000 b8d9 	b.w	80091c0 <_nx_tcp_socket_thread_resume>
 800900e:	4770      	bx	lr

08009010 <_nx_tcp_socket_state_syn_received>:
{


    /* Determine if the incoming message is an ACK message.  If it is and
       if it is proper, move into the ESTABLISHED state.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8009010:	68ca      	ldr	r2, [r1, #12]
 8009012:	02d3      	lsls	r3, r2, #11
 8009014:	d528      	bpl.n	8009068 <_nx_tcp_socket_state_syn_received+0x58>
 8009016:	4603      	mov	r3, r0
{
 8009018:	b430      	push	{r4, r5}
    {

        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence)
 800901a:	688d      	ldr	r5, [r1, #8]
 800901c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800901e:	42a5      	cmp	r5, r4
 8009020:	d11f      	bne.n	8009062 <_nx_tcp_socket_state_syn_received+0x52>
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Save the window size.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
                tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8009022:	b292      	uxth	r2, r2
            /* Set the initial slow start threshold to be the advertised window size. */
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;

            /* Set the initial congestion control window size. */
            /* Section 3.1, Page 5, RFC5681. */
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 8009024:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8009028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
 800902a:	661a      	str	r2, [r3, #96]	; 0x60
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800902c:	641a      	str	r2, [r3, #64]	; 0x40
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800902e:	b9e0      	cbnz	r0, 800906a <_nx_tcp_socket_state_syn_received+0x5a>
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
            }
            else
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8009030:	f5b1 6f89 	cmp.w	r1, #1096	; 0x448
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8009034:	ea4f 0281 	mov.w	r2, r1, lsl #2
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8009038:	d305      	bcc.n	8009046 <_nx_tcp_socket_state_syn_received+0x36>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
                }
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800903a:	f640 008e 	movw	r0, #2190	; 0x88e
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800903e:	1a52      	subs	r2, r2, r1
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 8009040:	4281      	cmp	r1, r0
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8009042:	bf88      	it	hi
 8009044:	1a52      	subhi	r2, r2, r1
 8009046:	665a      	str	r2, [r3, #100]	; 0x64
                }
            }

            /* Move into the ESTABLISHED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 8009048:	2005      	movs	r0, #5
                socket_ptr -> nx_tcp_socket_keepalive_timeout =  NX_TCP_KEEPALIVE_INITIAL;
                socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
            }
#endif
            /* Update the value of nx_tcp_socket_rx_sequence_acked */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800904a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800904c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 8009050:	6458      	str	r0, [r3, #68]	; 0x44
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 8009052:	6519      	str	r1, [r3, #80]	; 0x50
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 8009054:	b15a      	cbz	r2, 800906e <_nx_tcp_socket_state_syn_received+0x5e>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 8009056:	f503 7084 	add.w	r0, r3, #264	; 0x108
 800905a:	2100      	movs	r1, #0

            /* Send the RST packet.  */
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
        }
    }
}
 800905c:	bc30      	pop	{r4, r5}
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800905e:	f000 b8af 	b.w	80091c0 <_nx_tcp_socket_thread_resume>
}
 8009062:	bc30      	pop	{r4, r5}
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 8009064:	f001 bcfa 	b.w	800aa5c <_nx_tcp_packet_send_rst>
 8009068:	4770      	bx	lr
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800906a:	6659      	str	r1, [r3, #100]	; 0x64
 800906c:	e7ec      	b.n	8009048 <_nx_tcp_socket_state_syn_received+0x38>
}
 800906e:	bc30      	pop	{r4, r5}
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop

08009074 <_nx_tcp_socket_state_syn_sent>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_sent(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr, NX_PACKET *packet_ptr)
{
 8009074:	b538      	push	{r3, r4, r5, lr}
#ifndef TX_ENABLE_EVENT_TRACE
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Check if a RST is present. */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8009076:	68cb      	ldr	r3, [r1, #12]
{
 8009078:	4602      	mov	r2, r0
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800907a:	f413 2480 	ands.w	r4, r3, #262144	; 0x40000
 800907e:	d006      	beq.n	800908e <_nx_tcp_socket_state_syn_sent+0x1a>
    {

        /* Check if the ACK was acceptable. According to RFC 793, Section 3.9, Page 67.  */
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 8009080:	02dc      	lsls	r4, r3, #11
 8009082:	d503      	bpl.n	800908c <_nx_tcp_socket_state_syn_sent+0x18>
 8009084:	6889      	ldr	r1, [r1, #8]
 8009086:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009088:	4299      	cmp	r1, r3
 800908a:	d03a      	beq.n	8009102 <_nx_tcp_socket_state_syn_sent+0x8e>
           the other side to clear any previous connection.  */

        /* Send the RST packet.  */
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
    }
}
 800908c:	bd38      	pop	{r3, r4, r5, pc}
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800908e:	f403 1090 	and.w	r0, r3, #1179648	; 0x120000
 8009092:	f5b0 1f90 	cmp.w	r0, #1179648	; 0x120000
 8009096:	d009      	beq.n	80090ac <_nx_tcp_socket_state_syn_sent+0x38>
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 8009098:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 800909c:	d011      	beq.n	80090c2 <_nx_tcp_socket_state_syn_sent+0x4e>
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800909e:	02d8      	lsls	r0, r3, #11
 80090a0:	d5f4      	bpl.n	800908c <_nx_tcp_socket_state_syn_sent+0x18>
 80090a2:	6888      	ldr	r0, [r1, #8]
 80090a4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80090a6:	4298      	cmp	r0, r3
 80090a8:	d106      	bne.n	80090b8 <_nx_tcp_socket_state_syn_sent+0x44>
}
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
             (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 80090ac:	6c90      	ldr	r0, [r2, #72]	; 0x48
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 80090ae:	688d      	ldr	r5, [r1, #8]
 80090b0:	4285      	cmp	r5, r0
 80090b2:	d02c      	beq.n	800910e <_nx_tcp_socket_state_syn_sent+0x9a>
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 80090b4:	02db      	lsls	r3, r3, #11
 80090b6:	d5e9      	bpl.n	800908c <_nx_tcp_socket_state_syn_sent+0x18>
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 80090b8:	4610      	mov	r0, r2
}
 80090ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 80090be:	f001 bccd 	b.w	800aa5c <_nx_tcp_packet_send_rst>
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 80090c2:	6848      	ldr	r0, [r1, #4]
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 80090c4:	b29b      	uxth	r3, r3
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 80090c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 80090c8:	3001      	adds	r0, #1
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 80090ca:	6613      	str	r3, [r2, #96]	; 0x60
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 80090cc:	f5b1 6f89 	cmp.w	r1, #1096	; 0x448
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 80090d0:	6413      	str	r3, [r2, #64]	; 0x40
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 80090d2:	64d0      	str	r0, [r2, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 80090d4:	ea4f 0381 	mov.w	r3, r1, lsl #2
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 80090d8:	d317      	bcc.n	800910a <_nx_tcp_socket_state_syn_sent+0x96>
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 80090da:	f640 008e 	movw	r0, #2190	; 0x88e
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 80090de:	1a5b      	subs	r3, r3, r1
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 80090e0:	4281      	cmp	r1, r0
 80090e2:	d912      	bls.n	800910a <_nx_tcp_socket_state_syn_sent+0x96>
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 80090e4:	1a59      	subs	r1, r3, r1
 80090e6:	6651      	str	r1, [r2, #100]	; 0x64
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 80090e8:	2300      	movs	r3, #0
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 80090ea:	2404      	movs	r4, #4
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80090ec:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80090ee:	4610      	mov	r0, r2
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 80090f0:	6693      	str	r3, [r2, #104]	; 0x68
        socket_ptr -> nx_tcp_socket_timeout =  0;
 80090f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80090f6:	3901      	subs	r1, #1
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 80090f8:	6454      	str	r4, [r2, #68]	; 0x44
}
 80090fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80090fe:	f7fa b955 	b.w	80033ac <_nx_tcp_packet_send_syn>
}
 8009102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            _nx_tcp_socket_connection_reset(socket_ptr);
 8009106:	f7fa b9d9 	b.w	80034bc <_nx_tcp_socket_connection_reset>
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800910a:	6653      	str	r3, [r2, #100]	; 0x64
 800910c:	e7ec      	b.n	80090e8 <_nx_tcp_socket_state_syn_sent+0x74>
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800910e:	6849      	ldr	r1, [r1, #4]
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8009110:	b29b      	uxth	r3, r3
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 8009112:	f8d2 50e0 	ldr.w	r5, [r2, #224]	; 0xe0
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 8009116:	3101      	adds	r1, #1
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8009118:	6613      	str	r3, [r2, #96]	; 0x60
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800911a:	6413      	str	r3, [r2, #64]	; 0x40
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800911c:	64d1      	str	r1, [r2, #76]	; 0x4c
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800911e:	6694      	str	r4, [r2, #104]	; 0x68
 8009120:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 8009122:	b9fd      	cbnz	r5, 8009164 <_nx_tcp_socket_state_syn_sent+0xf0>
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8009124:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
            socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8009128:	ea4f 0183 	mov.w	r1, r3, lsl #2
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800912c:	d305      	bcc.n	800913a <_nx_tcp_socket_state_syn_sent+0xc6>
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800912e:	f640 048e 	movw	r4, #2190	; 0x88e
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8009132:	1ac9      	subs	r1, r1, r3
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 8009134:	42a3      	cmp	r3, r4
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8009136:	bf88      	it	hi
 8009138:	1ac9      	subhi	r1, r1, r3
 800913a:	6651      	str	r1, [r2, #100]	; 0x64
 800913c:	4614      	mov	r4, r2
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800913e:	4601      	mov	r1, r0
 8009140:	4610      	mov	r0, r2
 8009142:	f7fa f827 	bl	8003194 <_nx_tcp_packet_send_ack>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 8009146:	2205      	movs	r2, #5
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8009148:	2100      	movs	r1, #0
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800914a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800914e:	6462      	str	r2, [r4, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8009150:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 8009154:	2b00      	cmp	r3, #0
 8009156:	d099      	beq.n	800908c <_nx_tcp_socket_state_syn_sent+0x18>
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 8009158:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
 800915c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 8009160:	f000 b82e 	b.w	80091c0 <_nx_tcp_socket_thread_resume>
            socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 8009164:	6653      	str	r3, [r2, #100]	; 0x64
 8009166:	e7e9      	b.n	800913c <_nx_tcp_socket_state_syn_sent+0xc8>

08009168 <_nx_tcp_socket_state_transmit_check>:
{

ULONG tx_window_current;

    /* Now check to see if there is a thread suspended attempting to transmit.  */
    if (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 8009168:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800916c:	b333      	cbz	r3, 80091bc <_nx_tcp_socket_state_transmit_check+0x54>
        /* Yes, a thread is suspended attempting to transmit when the transmit window
           is lower than its request size.  Determine if the current transmit window
           size can now accommodate the request.  */

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 800916e:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
 8009172:	4293      	cmp	r3, r2
 8009174:	d909      	bls.n	800918a <_nx_tcp_socket_state_transmit_check+0x22>
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 8009176:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8009178:	3901      	subs	r1, #1
 800917a:	2901      	cmp	r1, #1
 800917c:	d802      	bhi.n	8009184 <_nx_tcp_socket_state_transmit_check+0x1c>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800917e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009180:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8009184:	4293      	cmp	r3, r2
 8009186:	bf28      	it	cs
 8009188:	4613      	movcs	r3, r2
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 800918a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800918c:	429a      	cmp	r2, r3
 800918e:	d215      	bcs.n	80091bc <_nx_tcp_socket_state_transmit_check+0x54>
        }


        /* Determine if the current transmit window (received from the connected socket)
           is large enough to handle the transmit.  */
        if ((tx_window_current) &&
 8009190:	e9d0 3232 	ldrd	r3, r2, [r0, #200]	; 0xc8
 8009194:	429a      	cmp	r2, r3
 8009196:	d211      	bcs.n	80091bc <_nx_tcp_socket_state_transmit_check+0x54>
            (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
        {

            /* Is NetX set up with a windows update callback? */
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 8009198:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
{
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 80091a0:	b103      	cbz	r3, 80091a4 <_nx_tcp_socket_state_transmit_check+0x3c>
            {

                /* Yes; Call this function when there is a change in transmit windows size. */
                (socket_ptr -> nx_tcp_socket_window_update_notify)(socket_ptr);
 80091a2:	4798      	blx	r3
            }


            /* Decrement the suspension count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 80091a4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104

            /* Remove the suspended thread from the list.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 80091a8:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80091ac:	2100      	movs	r1, #0
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 80091ae:	3b01      	subs	r3, #1
 80091b0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        }
    }
}
 80091b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 80091b8:	f000 b802 	b.w	80091c0 <_nx_tcp_socket_thread_resume>
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop

080091c0 <_nx_tcp_socket_thread_resume>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_resume(TX_THREAD **suspension_list_head, UINT status)
{
 80091c0:	b430      	push	{r4, r5}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80091c2:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80091c6:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the thread pointer.  */
    thread_ptr =  *suspension_list_head;
 80091c8:	6803      	ldr	r3, [r0, #0]

    /* Determine if there still is a thread suspended.  */
    if (thread_ptr)
 80091ca:	b1cb      	cbz	r3, 8009200 <_nx_tcp_socket_thread_resume+0x40>
    {

        /* Determine if there are anymore threads on the suspension list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80091cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d013      	beq.n	80091fa <_nx_tcp_socket_thread_resume+0x3a>
        {

            /* More than one thread is on the suspension list, we need to
               adjust the link pointers and move the next entry to the
               front of the list.  */
            *suspension_list_head =  thread_ptr -> tx_thread_suspended_next;
 80091d2:	6002      	str	r2, [r0, #0]

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
                thread_ptr -> tx_thread_suspended_previous;
 80091d4:	e9d3 201c 	ldrd	r2, r0, [r3, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80091d8:	6750      	str	r0, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80091da:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80091dc:	6702      	str	r2, [r0, #112]	; 0x70

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80091de:	480a      	ldr	r0, [pc, #40]	; (8009208 <_nx_tcp_socket_thread_resume+0x48>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80091e0:	2500      	movs	r5, #0
        _tx_thread_preempt_disable++;
 80091e2:	6802      	ldr	r2, [r0, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80091e4:	669d      	str	r5, [r3, #104]	; 0x68
        _tx_thread_preempt_disable++;
 80091e6:	3201      	adds	r2, #1
 80091e8:	6002      	str	r2, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80091ea:	f384 8810 	msr	PRIMASK, r4

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  status;
 80091ee:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80091f2:	4618      	mov	r0, r3
    {

        /* Nothing was suspended.  Simply restore interrupts.  */
        TX_RESTORE
    }
}
 80091f4:	bc30      	pop	{r4, r5}
        _tx_thread_system_resume(thread_ptr);
 80091f6:	f004 bc75 	b.w	800dae4 <_tx_thread_system_resume>
            *suspension_list_head =  TX_NULL;
 80091fa:	2200      	movs	r2, #0
 80091fc:	6002      	str	r2, [r0, #0]
 80091fe:	e7ee      	b.n	80091de <_nx_tcp_socket_thread_resume+0x1e>
 8009200:	f384 8810 	msr	PRIMASK, r4
}
 8009204:	bc30      	pop	{r4, r5}
 8009206:	4770      	bx	lr
 8009208:	20019244 	.word	0x20019244

0800920c <_nx_udp_packet_info_extract>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_packet_info_extract(NX_PACKET *packet_ptr, ULONG *ip_address,
                                  UINT *protocol, UINT *port, UINT *interface_index)
{
 800920c:	b530      	push	{r4, r5, lr}
 800920e:	b089      	sub	sp, #36	; 0x24
 8009210:	460d      	mov	r5, r1
 8009212:	9c0c      	ldr	r4, [sp, #48]	; 0x30
NXD_ADDRESS nxd_ip_address;
UINT        status;


    /* Call the NXD version of the service. */
    status = _nxd_udp_packet_info_extract(packet_ptr, &nxd_ip_address, protocol, port, interface_index);
 8009214:	a903      	add	r1, sp, #12
 8009216:	9400      	str	r4, [sp, #0]
 8009218:	f000 fe40 	bl	8009e9c <_nxd_udp_packet_info_extract>

    if (status == NX_SUCCESS)
 800921c:	b928      	cbnz	r0, 800922a <_nx_udp_packet_info_extract+0x1e>
    {
        if (ip_address)
 800921e:	b125      	cbz	r5, 800922a <_nx_udp_packet_info_extract+0x1e>
        {

            /*lint -e{644} suppress variable might not be initialized, since "nxd_ip_address" was initialized in _nxd_udp_packet_info_extract. */
            if (nxd_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	2b04      	cmp	r3, #4
 8009224:	d103      	bne.n	800922e <_nx_udp_packet_info_extract+0x22>
            {
                *ip_address = nxd_ip_address.nxd_ip_address.v4;
 8009226:	9b04      	ldr	r3, [sp, #16]
 8009228:	602b      	str	r3, [r5, #0]
    NX_PARAMETER_NOT_USED(port);
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800922a:	b009      	add	sp, #36	; 0x24
 800922c:	bd30      	pop	{r4, r5, pc}
                return(NX_INVALID_PACKET);
 800922e:	2012      	movs	r0, #18
}
 8009230:	b009      	add	sp, #36	; 0x24
 8009232:	bd30      	pop	{r4, r5, pc}

08009234 <_nx_udp_socket_bind>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8009234:	b5f0      	push	{r4, r5, r6, r7, lr}
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8009236:	68c5      	ldr	r5, [r0, #12]
{
 8009238:	b083      	sub	sp, #12
 800923a:	4604      	mov	r4, r0
 800923c:	4617      	mov	r7, r2
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800923e:	f205 663c 	addw	r6, r5, #1596	; 0x63c
{
 8009242:	9101      	str	r1, [sp, #4]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009244:	f04f 31ff 	mov.w	r1, #4294967295
 8009248:	4630      	mov	r0, r6
 800924a:	f004 f8a1 	bl	800d390 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800924e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009250:	b90b      	cbnz	r3, 8009256 <_nx_udp_socket_bind+0x22>
 8009252:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009254:	b12b      	cbz	r3, 8009262 <_nx_udp_socket_bind+0x2e>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009256:	4630      	mov	r0, r6
 8009258:	f004 f984 	bl	800d564 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800925c:	2022      	movs	r0, #34	; 0x22
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));

        /* Return the port unavailable error.  */
        return(NX_PORT_UNAVAILABLE);
    }
}
 800925e:	b003      	add	sp, #12
 8009260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (port == NX_ANY_PORT)
 8009262:	9a01      	ldr	r2, [sp, #4]
 8009264:	2a00      	cmp	r2, #0
 8009266:	d03e      	beq.n	80092e6 <_nx_udp_socket_bind+0xb2>
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009268:	eb02 2312 	add.w	r3, r2, r2, lsr #8
    socket_ptr -> nx_udp_socket_port =  port;
 800926c:	60a2      	str	r2, [r4, #8]
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8009276:	f8d5 08a8 	ldr.w	r0, [r5, #2216]	; 0x8a8
    if (search_ptr)
 800927a:	2800      	cmp	r0, #0
 800927c:	d05e      	beq.n	800933c <_nx_udp_socket_bind+0x108>
 800927e:	4603      	mov	r3, r0
 8009280:	e002      	b.n	8009288 <_nx_udp_socket_bind+0x54>
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8009282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        } while (search_ptr != end_ptr);
 8009284:	4298      	cmp	r0, r3
 8009286:	d043      	beq.n	8009310 <_nx_udp_socket_bind+0xdc>
            if (search_ptr -> nx_udp_socket_port == port)
 8009288:	6899      	ldr	r1, [r3, #8]
 800928a:	4291      	cmp	r1, r2
 800928c:	d1f9      	bne.n	8009282 <_nx_udp_socket_bind+0x4e>
    else if (wait_option)
 800928e:	2f00      	cmp	r7, #0
 8009290:	d065      	beq.n	800935e <_nx_udp_socket_bind+0x12a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009292:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009296:	b672      	cpsid	i
        thread_ptr =  _tx_thread_current_ptr;
 8009298:	4a33      	ldr	r2, [pc, #204]	; (8009368 <_nx_udp_socket_bind+0x134>)
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 800929a:	4934      	ldr	r1, [pc, #208]	; (800936c <_nx_udp_socket_bind+0x138>)
        thread_ptr =  _tx_thread_current_ptr;
 800929c:	6815      	ldr	r5, [r2, #0]
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800929e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 80092a0:	e9c5 141a 	strd	r1, r4, [r5, #104]	; 0x68
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 80092a4:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d04f      	beq.n	800934c <_nx_udp_socket_bind+0x118>
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 80092ac:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80092ae:	e9c5 211c 	strd	r2, r1, [r5, #112]	; 0x70
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 80092b2:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80092b4:	670d      	str	r5, [r1, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 80092b6:	6755      	str	r5, [r2, #116]	; 0x74
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 80092b8:	6e59      	ldr	r1, [r3, #100]	; 0x64
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80092ba:	240c      	movs	r4, #12
        _tx_thread_preempt_disable++;
 80092bc:	482c      	ldr	r0, [pc, #176]	; (8009370 <_nx_udp_socket_bind+0x13c>)
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 80092be:	3101      	adds	r1, #1
        _tx_thread_preempt_disable++;
 80092c0:	6802      	ldr	r2, [r0, #0]
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 80092c2:	6659      	str	r1, [r3, #100]	; 0x64
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80092c4:	2301      	movs	r3, #1
        _tx_thread_preempt_disable++;
 80092c6:	3201      	adds	r2, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80092c8:	64ef      	str	r7, [r5, #76]	; 0x4c
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80092ca:	632c      	str	r4, [r5, #48]	; 0x30
        _tx_thread_preempt_disable++;
 80092cc:	6002      	str	r2, [r0, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80092ce:	63ab      	str	r3, [r5, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80092d0:	f38c 8810 	msr	PRIMASK, ip
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80092d4:	4630      	mov	r0, r6
 80092d6:	f004 f945 	bl	800d564 <_tx_mutex_put>
        _tx_thread_system_suspend(thread_ptr);
 80092da:	4628      	mov	r0, r5
 80092dc:	f004 fc88 	bl	800dbf0 <_tx_thread_system_suspend>
        return(thread_ptr -> tx_thread_suspend_status);
 80092e0:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 80092e4:	e7bb      	b.n	800925e <_nx_udp_socket_bind+0x2a>
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 80092e6:	f005 fd09 	bl	800ecfc <rand>
 80092ea:	4601      	mov	r1, r0
 80092ec:	aa02      	add	r2, sp, #8
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 80092ee:	4628      	mov	r0, r5
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 80092f0:	424b      	negs	r3, r1
 80092f2:	f3c1 010d 	ubfx	r1, r1, #0, #14
 80092f6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80092fa:	bf58      	it	pl
 80092fc:	4259      	negpl	r1, r3
 80092fe:	f501 4140 	add.w	r1, r1, #49152	; 0xc000
 8009302:	f842 1d04 	str.w	r1, [r2, #-4]!
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8009306:	f001 fbff 	bl	800ab08 <_nx_udp_free_port_find>
 800930a:	bb18      	cbnz	r0, 8009354 <_nx_udp_socket_bind+0x120>
 800930c:	9a01      	ldr	r2, [sp, #4]
 800930e:	e7ab      	b.n	8009268 <_nx_udp_socket_bind+0x34>
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 8009310:	6881      	ldr	r1, [r0, #8]
 8009312:	4291      	cmp	r1, r2
 8009314:	d0bb      	beq.n	800928e <_nx_udp_socket_bind+0x5a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009316:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800931a:	b672      	cpsid	i
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 800931c:	f8d5 38a8 	ldr.w	r3, [r5, #2216]	; 0x8a8
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8009320:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009322:	e9c4 3113 	strd	r3, r1, [r4, #76]	; 0x4c
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 8009326:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009328:	64cc      	str	r4, [r1, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 800932a:	651c      	str	r4, [r3, #80]	; 0x50
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800932c:	f382 8810 	msr	PRIMASK, r2
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009330:	4630      	mov	r0, r6
 8009332:	f004 f917 	bl	800d564 <_tx_mutex_put>
        return(NX_SUCCESS);
 8009336:	2000      	movs	r0, #0
}
 8009338:	b003      	add	sp, #12
 800933a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800933c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009340:	b672      	cpsid	i
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 8009342:	e9c4 4413 	strd	r4, r4, [r4, #76]	; 0x4c
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 8009346:	f8c5 48a8 	str.w	r4, [r5, #2216]	; 0x8a8
 800934a:	e7ef      	b.n	800932c <_nx_udp_socket_bind+0xf8>
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800934c:	661d      	str	r5, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 800934e:	e9c5 551c 	strd	r5, r5, [r5, #112]	; 0x70
 8009352:	e7b1      	b.n	80092b8 <_nx_udp_socket_bind+0x84>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009354:	4630      	mov	r0, r6
 8009356:	f004 f905 	bl	800d564 <_tx_mutex_put>
            return(NX_NO_FREE_PORTS);
 800935a:	2045      	movs	r0, #69	; 0x45
 800935c:	e77f      	b.n	800925e <_nx_udp_socket_bind+0x2a>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800935e:	4630      	mov	r0, r6
 8009360:	f004 f900 	bl	800d564 <_tx_mutex_put>
        return(NX_PORT_UNAVAILABLE);
 8009364:	2023      	movs	r0, #35	; 0x23
 8009366:	e77a      	b.n	800925e <_nx_udp_socket_bind+0x2a>
 8009368:	20019248 	.word	0x20019248
 800936c:	0800aa99 	.word	0x0800aa99
 8009370:	20019244 	.word	0x20019244

08009374 <_nx_udp_socket_create>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 8009374:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8009378:	460c      	mov	r4, r1
 800937a:	4606      	mov	r6, r0
 800937c:	4692      	mov	sl, r2

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800937e:	4608      	mov	r0, r1
 8009380:	2278      	movs	r2, #120	; 0x78
 8009382:	2100      	movs	r1, #0
{
 8009384:	461f      	mov	r7, r3
 8009386:	9d08      	ldr	r5, [sp, #32]
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 8009388:	f005 fc33 	bl	800ebf2 <memset>

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 800938c:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800938e:	f206 693c 	addw	r9, r6, #1596	; 0x63c
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8009392:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 8009396:	6323      	str	r3, [r4, #48]	; 0x30
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009398:	f04f 31ff 	mov.w	r1, #4294967295
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 800939c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800939e:	4648      	mov	r0, r9
    socket_ptr -> nx_udp_socket_name =  name;
 80093a0:	f8c4 a004 	str.w	sl, [r4, #4]
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 80093a4:	60e6      	str	r6, [r4, #12]
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 80093a6:	6365      	str	r5, [r4, #52]	; 0x34
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 80093a8:	62e7      	str	r7, [r4, #44]	; 0x2c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 80093aa:	6423      	str	r3, [r4, #64]	; 0x40
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80093ac:	f003 fff0 	bl	800d390 <_tx_mutex_get>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80093b0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80093b4:	b672      	cpsid	i

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 80093b6:	490e      	ldr	r1, [pc, #56]	; (80093f0 <_nx_udp_socket_create+0x7c>)

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 80093b8:	f8d6 3928 	ldr.w	r3, [r6, #2344]	; 0x928
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 80093bc:	6021      	str	r1, [r4, #0]
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 80093be:	b18b      	cbz	r3, 80093e4 <_nx_udp_socket_create+0x70>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 80093c0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 80093c2:	66dc      	str	r4, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 80093c4:	668c      	str	r4, [r1, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 80093c6:	e9c4 311a 	strd	r3, r1, [r4, #104]	; 0x68
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 80093ca:	f8d6 392c 	ldr.w	r3, [r6, #2348]	; 0x92c
 80093ce:	3301      	adds	r3, #1
 80093d0:	f8c6 392c 	str.w	r3, [r6, #2348]	; 0x92c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80093d4:	f382 8810 	msr	PRIMASK, r2

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80093d8:	4648      	mov	r0, r9
 80093da:	f004 f8c3 	bl	800d564 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 80093de:	2000      	movs	r0, #0
 80093e0:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 80093e4:	f8c6 4928 	str.w	r4, [r6, #2344]	; 0x928
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 80093e8:	e9c4 441a 	strd	r4, r4, [r4, #104]	; 0x68
 80093ec:	e7ed      	b.n	80093ca <_nx_udp_socket_create+0x56>
 80093ee:	bf00      	nop
 80093f0:	55445020 	.word	0x55445020

080093f4 <_nx_udp_socket_delete>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 80093f4:	b570      	push	{r4, r5, r6, lr}

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 80093f6:	68c5      	ldr	r5, [r0, #12]
{
 80093f8:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80093fa:	f04f 31ff 	mov.w	r1, #4294967295
 80093fe:	f205 663c 	addw	r6, r5, #1596	; 0x63c
 8009402:	4630      	mov	r0, r6
 8009404:	f003 ffc4 	bl	800d390 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 8009408:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800940a:	bb03      	cbnz	r3, 800944e <_nx_udp_socket_delete+0x5a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800940c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009410:	b672      	cpsid	i

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 8009412:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    socket_ptr -> nx_udp_socket_id =  0;
 8009414:	6023      	str	r3, [r4, #0]
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 8009416:	42a2      	cmp	r2, r4
 8009418:	d016      	beq.n	8009448 <_nx_udp_socket_delete+0x54>
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
            socket_ptr -> nx_udp_socket_created_previous;
 800941a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
            socket_ptr -> nx_udp_socket_created_next;

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 800941c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8009420:	66d0      	str	r0, [r2, #108]	; 0x6c
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 8009422:	42a3      	cmp	r3, r4
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8009424:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009426:	6682      	str	r2, [r0, #104]	; 0x68
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 8009428:	d00d      	beq.n	8009446 <_nx_udp_socket_delete+0x52>
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 800942a:	f8d5 392c 	ldr.w	r3, [r5, #2348]	; 0x92c
 800942e:	3b01      	subs	r3, #1
 8009430:	f8c5 392c 	str.w	r3, [r5, #2348]	; 0x92c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009434:	f381 8810 	msr	PRIMASK, r1

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009438:	4630      	mov	r0, r6
 800943a:	f004 f893 	bl	800d564 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800943e:	f004 fb33 	bl	800daa8 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8009442:	2000      	movs	r0, #0
}
 8009444:	bd70      	pop	{r4, r5, r6, pc}
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 8009446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009448:	f8c5 3928 	str.w	r3, [r5, #2344]	; 0x928
 800944c:	e7ed      	b.n	800942a <_nx_udp_socket_delete+0x36>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800944e:	4630      	mov	r0, r6
 8009450:	f004 f888 	bl	800d564 <_tx_mutex_put>
        return(NX_STILL_BOUND);
 8009454:	2042      	movs	r0, #66	; 0x42
}
 8009456:	bd70      	pop	{r4, r5, r6, pc}

08009458 <_nx_udp_socket_receive>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8009458:	2300      	movs	r3, #0
{
 800945a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *packet_ptr =   NX_NULL;
 800945e:	600b      	str	r3, [r1, #0]
{
 8009460:	b083      	sub	sp, #12
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009462:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009466:	b672      	cpsid	i

        /* Lockout interrupts.  */
        TX_DISABLE

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 8009468:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800946a:	2c00      	cmp	r4, #0
 800946c:	f000 80b9 	beq.w	80095e2 <_nx_udp_socket_receive+0x18a>
 8009470:	4691      	mov	r9, r2
 8009472:	4606      	mov	r6, r0
 8009474:	460f      	mov	r7, r1
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 8009476:	f8df b198 	ldr.w	fp, [pc, #408]	; 8009610 <_nx_udp_socket_receive+0x1b8>

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800947a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8009614 <_nx_udp_socket_receive+0x1bc>
 800947e:	462a      	mov	r2, r5
 8009480:	461c      	mov	r4, r3
 8009482:	e047      	b.n	8009514 <_nx_udp_socket_receive+0xbc>
            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 8009484:	686a      	ldr	r2, [r5, #4]
 8009486:	fa1f fc82 	uxth.w	ip, r2
 800948a:	f1bc 0f00 	cmp.w	ip, #0
 800948e:	d05e      	beq.n	800954e <_nx_udp_socket_receive+0xf6>
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8009490:	2b04      	cmp	r3, #4
 8009492:	f040 80b5 	bne.w	8009600 <_nx_udp_socket_receive+0x1a8>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 8009496:	6b81      	ldr	r1, [r0, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 8009498:	f101 030c 	add.w	r3, r1, #12
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 800949c:	f101 0e10 	add.w	lr, r1, #16

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094a0:	f8d5 8000 	ldr.w	r8, [r5]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094a4:	ea82 4c32 	eor.w	ip, r2, r2, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094a8:	ea88 4138 	eor.w	r1, r8, r8, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094b0:	0a09      	lsrs	r1, r1, #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094b6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094ba:	ea8c 2c32 	eor.w	ip, ip, r2, ror #8
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 80094be:	6a42      	ldr	r2, [r0, #36]	; 0x24
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094c0:	ea81 2138 	eor.w	r1, r1, r8, ror #8
 80094c4:	e9c5 1c00 	strd	r1, ip, [r5]
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 80094c8:	2111      	movs	r1, #17
 80094ca:	f8cd e000 	str.w	lr, [sp]
 80094ce:	f7f8 fc79 	bl	8001dc4 <_nx_ip_checksum_compute>

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;

                /* Determine if it is valid.  */
                if (checksum == 0)
 80094d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094d6:	e9d5 2c00 	ldrd	r2, ip, [r5]
                if (checksum == 0)
 80094da:	4288      	cmp	r0, r1
 80094dc:	6838      	ldr	r0, [r7, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094de:	ea82 4e32 	eor.w	lr, r2, r2, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094e2:	ea8c 433c 	eor.w	r3, ip, ip, ror #16
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094ea:	ea4f 2313 	mov.w	r3, r3, lsr #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80094f6:	ea8e 2232 	eor.w	r2, lr, r2, ror #8
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80094fa:	ea83 233c 	eor.w	r3, r3, ip, ror #8
 80094fe:	e9c5 2300 	strd	r2, r3, [r5]
                if (checksum == 0)
 8009502:	d075      	beq.n	80095f0 <_nx_udp_socket_receive+0x198>
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 8009504:	f7f9 fc22 	bl	8002d4c <_nx_packet_release>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009508:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800950c:	b672      	cpsid	i
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 800950e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8009510:	2b00      	cmp	r3, #0
 8009512:	d065      	beq.n	80095e0 <_nx_udp_socket_receive+0x188>
        if (socket_ptr -> nx_udp_socket_receive_head)
 8009514:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8009516:	2b00      	cmp	r3, #0
 8009518:	d031      	beq.n	800957e <_nx_udp_socket_receive+0x126>
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800951a:	603b      	str	r3, [r7, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	6473      	str	r3, [r6, #68]	; 0x44
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 8009520:	2b00      	cmp	r3, #0
 8009522:	d057      	beq.n	80095d4 <_nx_udp_socket_receive+0x17c>
            socket_ptr -> nx_udp_socket_receive_count--;
 8009524:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8009526:	3b01      	subs	r3, #1
 8009528:	63f3      	str	r3, [r6, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800952a:	f382 8810 	msr	PRIMASK, r2
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800952e:	6838      	ldr	r0, [r7, #0]
 8009530:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009534:	2b04      	cmp	r3, #4
 8009536:	d013      	beq.n	8009560 <_nx_udp_socket_receive+0x108>
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8009538:	2b06      	cmp	r3, #6
 800953a:	d101      	bne.n	8009540 <_nx_udp_socket_receive+0xe8>
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800953c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800953e:	6854      	ldr	r4, [r2, #4]
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 8009540:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009542:	6885      	ldr	r5, [r0, #8]
 8009544:	0692      	lsls	r2, r2, #26
 8009546:	d410      	bmi.n	800956a <_nx_udp_socket_receive+0x112>
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 8009548:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800954a:	2900      	cmp	r1, #0
 800954c:	d09a      	beq.n	8009484 <_nx_udp_socket_receive+0x2c>
 800954e:	2b06      	cmp	r3, #6
 8009550:	d10b      	bne.n	800956a <_nx_udp_socket_receive+0x112>
                    ipv6_header = (NX_IPV6_HEADER *)(current_ptr -> nx_packet_ip_header);
 8009552:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009554:	686a      	ldr	r2, [r5, #4]
                    ip_src_addr = (&ipv6_header -> nx_ip_header_source_ip[0]);
 8009556:	f101 0308 	add.w	r3, r1, #8
                    ip_dest_addr = (&ipv6_header -> nx_ip_header_destination_ip[0]);
 800955a:	f101 0e18 	add.w	lr, r1, #24
 800955e:	e79f      	b.n	80094a0 <_nx_udp_socket_receive+0x48>
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 8009560:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009562:	6885      	ldr	r5, [r0, #8]
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 8009564:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009566:	0692      	lsls	r2, r2, #26
 8009568:	d5ee      	bpl.n	8009548 <_nx_udp_socket_receive+0xf0>
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800956a:	6a42      	ldr	r2, [r0, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 800956c:	3508      	adds	r5, #8

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 800956e:	2300      	movs	r3, #0
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009570:	3a08      	subs	r2, #8
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 8009572:	6085      	str	r5, [r0, #8]
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009574:	6242      	str	r2, [r0, #36]	; 0x24
}
 8009576:	4618      	mov	r0, r3
 8009578:	b003      	add	sp, #12
 800957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (wait_option)
 800957e:	f1b9 0f00 	cmp.w	r9, #0
 8009582:	d037      	beq.n	80095f4 <_nx_udp_socket_receive+0x19c>
                thread_ptr =  _tx_thread_current_ptr;
 8009584:	f8db 5000 	ldr.w	r5, [fp]
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 8009588:	6db3      	ldr	r3, [r6, #88]	; 0x58
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 800958a:	4920      	ldr	r1, [pc, #128]	; (800960c <_nx_udp_socket_receive+0x1b4>)
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800958c:	67ef      	str	r7, [r5, #124]	; 0x7c
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800958e:	e9c5 161a 	strd	r1, r6, [r5, #104]	; 0x68
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 8009592:	b30b      	cbz	r3, 80095d8 <_nx_udp_socket_receive+0x180>
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 8009594:	6f59      	ldr	r1, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 8009596:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800959a:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800959c:	670d      	str	r5, [r1, #112]	; 0x70
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800959e:	675d      	str	r5, [r3, #116]	; 0x74
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 80095a0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80095a2:	2001      	movs	r0, #1
                _tx_thread_preempt_disable++;
 80095a4:	f8da 3000 	ldr.w	r3, [sl]
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80095a8:	f04f 0c0c 	mov.w	ip, #12
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 80095ac:	4401      	add	r1, r0
                _tx_thread_preempt_disable++;
 80095ae:	4403      	add	r3, r0
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 80095b0:	65f1      	str	r1, [r6, #92]	; 0x5c
                _tx_thread_preempt_disable++;
 80095b2:	f8ca 3000 	str.w	r3, [sl]
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80095b6:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80095ba:	f8c5 c030 	str.w	ip, [r5, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80095be:	63a8      	str	r0, [r5, #56]	; 0x38
 80095c0:	f382 8810 	msr	PRIMASK, r2
                _tx_thread_system_suspend(thread_ptr);
 80095c4:	4628      	mov	r0, r5
 80095c6:	f004 fb13 	bl	800dbf0 <_tx_thread_system_suspend>
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 80095ca:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0ad      	beq.n	800952e <_nx_udp_socket_receive+0xd6>
 80095d2:	e7d0      	b.n	8009576 <_nx_udp_socket_receive+0x11e>
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 80095d4:	64b3      	str	r3, [r6, #72]	; 0x48
 80095d6:	e7a5      	b.n	8009524 <_nx_udp_socket_receive+0xcc>
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 80095d8:	65b5      	str	r5, [r6, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 80095da:	e9c5 551c 	strd	r5, r5, [r5, #112]	; 0x70
 80095de:	e7df      	b.n	80095a0 <_nx_udp_socket_receive+0x148>
 80095e0:	4615      	mov	r5, r2
 80095e2:	f385 8810 	msr	PRIMASK, r5
            return(NX_NOT_BOUND);
 80095e6:	2324      	movs	r3, #36	; 0x24
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	b003      	add	sp, #12
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	6885      	ldr	r5, [r0, #8]
 80095f2:	e7ba      	b.n	800956a <_nx_udp_socket_receive+0x112>
 80095f4:	f382 8810 	msr	PRIMASK, r2
                return(NX_NO_PACKET);
 80095f8:	2301      	movs	r3, #1
                *packet_ptr =   NX_NULL;
 80095fa:	f8c7 9000 	str.w	r9, [r7]
                return(NX_NO_PACKET);
 80095fe:	e7ba      	b.n	8009576 <_nx_udp_socket_receive+0x11e>
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) /*  IPv6 */
 8009600:	2b06      	cmp	r3, #6
 8009602:	d0a6      	beq.n	8009552 <_nx_udp_socket_receive+0xfa>
 8009604:	468e      	mov	lr, r1
 8009606:	460b      	mov	r3, r1
 8009608:	e74a      	b.n	80094a0 <_nx_udp_socket_receive+0x48>
 800960a:	bf00      	nop
 800960c:	0800ab79 	.word	0x0800ab79
 8009610:	20019248 	.word	0x20019248
 8009614:	20019244 	.word	0x20019244

08009618 <_nx_udp_socket_receive_notify>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009618:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800961c:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Setup the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =  udp_receive_notify;
 800961e:	6701      	str	r1, [r0, #112]	; 0x70
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009620:	f383 8810 	msr	PRIMASK, r3
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE_NOTIFY, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, udp_receive_notify, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
}
 8009624:	2000      	movs	r0, #0
 8009626:	4770      	bx	lr

08009628 <_nx_udp_socket_source_send>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_source_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                                 ULONG ip_address, UINT port, UINT address_index)
{
 8009628:	b430      	push	{r4, r5}
 800962a:	9c02      	ldr	r4, [sp, #8]

    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;

    /* Store interface information into the packet structure. */
    packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[address_index]);
 800962c:	68c5      	ldr	r5, [r0, #12]
 800962e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009632:	0124      	lsls	r4, r4, #4
 8009634:	f604 4448 	addw	r4, r4, #3144	; 0xc48
 8009638:	442c      	add	r4, r5
 800963a:	634c      	str	r4, [r1, #52]	; 0x34

    /* Call udp_socket_send service */
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);

    return(status);
}
 800963c:	bc30      	pop	{r4, r5}
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800963e:	f001 bad3 	b.w	800abe8 <_nx_udp_socket_send>
 8009642:	bf00      	nop

08009644 <_nx_udp_socket_unbind>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 8009644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8009648:	68c7      	ldr	r7, [r0, #12]
{
 800964a:	4604      	mov	r4, r0
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800964c:	f04f 31ff 	mov.w	r1, #4294967295
 8009650:	f207 663c 	addw	r6, r7, #1596	; 0x63c
 8009654:	4630      	mov	r0, r6
 8009656:	f003 fe9b 	bl	800d390 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 800965a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800965c:	2d00      	cmp	r5, #0
 800965e:	f000 80a6 	beq.w	80097ae <_nx_udp_socket_unbind+0x16a>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 8009662:	68a3      	ldr	r3, [r4, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009664:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8009668:	f003 081f 	and.w	r8, r3, #31
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800966c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009670:	b672      	cpsid	i

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 8009672:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009674:	42a3      	cmp	r3, r4
 8009676:	d05e      	beq.n	8009736 <_nx_udp_socket_unbind+0xf2>
 8009678:	eb07 0188 	add.w	r1, r7, r8, lsl #2

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
            socket_ptr -> nx_udp_socket_bound_previous;
 800967c:	6d20      	ldr	r0, [r4, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
            socket_ptr -> nx_udp_socket_bound_next;

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 800967e:	f8d1 58a8 	ldr.w	r5, [r1, #2216]	; 0x8a8
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 8009682:	6518      	str	r0, [r3, #80]	; 0x50
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 8009684:	42a5      	cmp	r5, r4
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8009686:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009688:	64c3      	str	r3, [r0, #76]	; 0x4c
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 800968a:	f000 80a2 	beq.w	80097d2 <_nx_udp_socket_unbind+0x18e>
            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	64e3      	str	r3, [r4, #76]	; 0x4c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009692:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 8009696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d057      	beq.n	800974c <_nx_udp_socket_unbind+0x108>

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 800969c:	2200      	movs	r2, #0
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800969e:	6c65      	ldr	r5, [r4, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 80096a0:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 80096a4:	4628      	mov	r0, r5
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 80096a6:	69ed      	ldr	r5, [r5, #28]
            _nx_packet_release(packet_ptr);
 80096a8:	f7f9 fb50 	bl	8002d4c <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 80096ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80096ae:	3a01      	subs	r2, #1
 80096b0:	63e2      	str	r2, [r4, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	d1f6      	bne.n	80096a4 <_nx_udp_socket_unbind+0x60>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80096b6:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 80096ba:	b672      	cpsid	i
    /* Disable interrupts again.  */
    TX_DISABLE

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 80096bc:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    if (thread_ptr)
 80096c0:	f1b9 0f00 	cmp.w	r9, #0
 80096c4:	d06b      	beq.n	800979e <_nx_udp_socket_unbind+0x15a>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80096c6:	f8d9 1070 	ldr.w	r1, [r9, #112]	; 0x70
 80096ca:	4549      	cmp	r1, r9
 80096cc:	d07f      	beq.n	80097ce <_nx_udp_socket_unbind+0x18a>
            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
                thread_ptr -> tx_thread_suspended_previous;
 80096ce:	f8d9 3074 	ldr.w	r3, [r9, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80096d2:	674b      	str	r3, [r1, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80096d4:	f8d9 3074 	ldr.w	r3, [r9, #116]	; 0x74
 80096d8:	6719      	str	r1, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_next;
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 80096da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096dc:	eb07 0788 	add.w	r7, r7, r8, lsl #2

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80096e0:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 80096e4:	f04f 0c00 	mov.w	ip, #0
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 80096e8:	1e55      	subs	r5, r2, #1
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 80096ea:	f8d7 28a8 	ldr.w	r2, [r7, #2216]	; 0x8a8
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 80096ee:	6665      	str	r5, [r4, #100]	; 0x64
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 80096f0:	6619      	str	r1, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 80096f2:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 80096f6:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
        if (ip_ptr -> nx_ip_udp_port_table[index])
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	d062      	beq.n	80097c4 <_nx_udp_socket_unbind+0x180>
            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 80096fe:	6d11      	ldr	r1, [r2, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 8009700:	e9c3 2113 	strd	r2, r1, [r3, #76]	; 0x4c
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8009704:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8009706:	64cb      	str	r3, [r1, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 8009708:	6513      	str	r3, [r2, #80]	; 0x50

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800970a:	4a36      	ldr	r2, [pc, #216]	; (80097e4 <_nx_udp_socket_unbind+0x1a0>)
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800970c:	2500      	movs	r5, #0
        _tx_thread_preempt_disable++;
 800970e:	6813      	ldr	r3, [r2, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009710:	f8c9 5068 	str.w	r5, [r9, #104]	; 0x68
        _tx_thread_preempt_disable++;
 8009714:	3301      	adds	r3, #1
 8009716:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009718:	f380 8810 	msr	PRIMASK, r0

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800971c:	f8c9 5084 	str.w	r5, [r9, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009720:	4630      	mov	r0, r6
 8009722:	f003 ff1f 	bl	800d564 <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009726:	4648      	mov	r0, r9
 8009728:	f004 f9dc 	bl	800dae4 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800972c:	f004 f9bc 	bl	800daa8 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8009730:	4628      	mov	r0, r5
}
 8009732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 8009736:	2100      	movs	r1, #0
 8009738:	f208 232a 	addw	r3, r8, #554	; 0x22a
 800973c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 8009740:	64e1      	str	r1, [r4, #76]	; 0x4c
 8009742:	f382 8810 	msr	PRIMASK, r2
    if (socket_ptr -> nx_udp_socket_receive_count)
 8009746:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1a7      	bne.n	800969c <_nx_udp_socket_unbind+0x58>
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800974c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800974e:	2a00      	cmp	r2, #0
 8009750:	d0b1      	beq.n	80096b6 <_nx_udp_socket_unbind+0x72>
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009752:	469a      	mov	sl, r3
 8009754:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80097e4 <_nx_udp_socket_unbind+0x1a0>
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 8009758:	f04f 0926 	mov.w	r9, #38	; 0x26
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800975c:	6da5      	ldr	r5, [r4, #88]	; 0x58
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800975e:	65a3      	str	r3, [r4, #88]	; 0x58
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009760:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009764:	b672      	cpsid	i
            _tx_thread_preempt_disable++;
 8009766:	f8db 3000 	ldr.w	r3, [fp]
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800976a:	f8c5 a068 	str.w	sl, [r5, #104]	; 0x68
            _tx_thread_preempt_disable++;
 800976e:	3301      	adds	r3, #1
 8009770:	f8cb 3000 	str.w	r3, [fp]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009774:	f382 8810 	msr	PRIMASK, r2
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 8009778:	f8c5 9084 	str.w	r9, [r5, #132]	; 0x84
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800977c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800977e:	6f68      	ldr	r0, [r5, #116]	; 0x74
 8009780:	f004 f9b0 	bl	800dae4 <_tx_thread_system_resume>
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009784:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009786:	3b01      	subs	r3, #1
 8009788:	65e3      	str	r3, [r4, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e8      	bne.n	8009760 <_nx_udp_socket_unbind+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800978e:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009792:	b672      	cpsid	i
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 8009794:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    if (thread_ptr)
 8009798:	f1b9 0f00 	cmp.w	r9, #0
 800979c:	d193      	bne.n	80096c6 <_nx_udp_socket_unbind+0x82>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800979e:	f380 8810 	msr	PRIMASK, r0
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80097a2:	4630      	mov	r0, r6
 80097a4:	f003 fede 	bl	800d564 <_tx_mutex_put>
        return(NX_SUCCESS);
 80097a8:	4648      	mov	r0, r9
}
 80097aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 80097ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097b0:	b198      	cbz	r0, 80097da <_nx_udp_socket_unbind+0x196>
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 80097b2:	4629      	mov	r1, r5
 80097b4:	f001 f970 	bl	800aa98 <_nx_udp_bind_cleanup>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80097b8:	4630      	mov	r0, r6
 80097ba:	f003 fed3 	bl	800d564 <_tx_mutex_put>
            return(NX_SUCCESS);
 80097be:	4628      	mov	r0, r5
}
 80097c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 80097c4:	e9c3 3313 	strd	r3, r3, [r3, #76]	; 0x4c
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 80097c8:	f8c7 38a8 	str.w	r3, [r7, #2216]	; 0x8a8
 80097cc:	e79d      	b.n	800970a <_nx_udp_socket_unbind+0xc6>
 80097ce:	2100      	movs	r1, #0
 80097d0:	e783      	b.n	80096da <_nx_udp_socket_unbind+0x96>
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 80097d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80097d4:	f8c1 38a8 	str.w	r3, [r1, #2216]	; 0x8a8
 80097d8:	e759      	b.n	800968e <_nx_udp_socket_unbind+0x4a>
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80097da:	4630      	mov	r0, r6
 80097dc:	f003 fec2 	bl	800d564 <_tx_mutex_put>
            return(NX_NOT_BOUND);
 80097e0:	2024      	movs	r0, #36	; 0x24
 80097e2:	e7a6      	b.n	8009732 <_nx_udp_socket_unbind+0xee>
 80097e4:	20019244 	.word	0x20019244

080097e8 <_nx_utility_string_length_check>:

UINT    i;


    /* Check for invalid input pointers.  */
    if (input_string == NX_NULL)
 80097e8:	b1b0      	cbz	r0, 8009818 <_nx_utility_string_length_check+0x30>
    {
        return(NX_PTR_ERROR);
    }

    /* Traverse the string.  */
    for (i = 0; input_string[i]; i++)
 80097ea:	7803      	ldrb	r3, [r0, #0]
 80097ec:	b1e3      	cbz	r3, 8009828 <_nx_utility_string_length_check+0x40>
    {

        /* Check if the string length is bigger than the max string length.  */
        if (i >= max_string_length)
 80097ee:	b1ca      	cbz	r2, 8009824 <_nx_utility_string_length_check+0x3c>
    for (i = 0; input_string[i]; i++)
 80097f0:	2300      	movs	r3, #0
{
 80097f2:	b410      	push	{r4}
 80097f4:	e001      	b.n	80097fa <_nx_utility_string_length_check+0x12>
        if (i >= max_string_length)
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d00a      	beq.n	8009810 <_nx_utility_string_length_check+0x28>
    for (i = 0; input_string[i]; i++)
 80097fa:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80097fe:	3301      	adds	r3, #1
 8009800:	2c00      	cmp	r4, #0
 8009802:	d1f8      	bne.n	80097f6 <_nx_utility_string_length_check+0xe>
    }

    /* Return the string length if string_length is not NULL.
       String_length being NULL indicates the caller needs to check for string 
       length within the max_string_length. */
    if (string_length)
 8009804:	b151      	cbz	r1, 800981c <_nx_utility_string_length_check+0x34>
    {
        *string_length = i;
    }

    /* Return success.  */
    return(NX_SUCCESS);
 8009806:	2000      	movs	r0, #0
        *string_length = i;
 8009808:	600b      	str	r3, [r1, #0]
}
 800980a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800980e:	4770      	bx	lr
            return(NX_SIZE_ERROR);
 8009810:	2009      	movs	r0, #9
}
 8009812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009816:	4770      	bx	lr
        return(NX_PTR_ERROR);
 8009818:	2007      	movs	r0, #7
 800981a:	4770      	bx	lr
    return(NX_SUCCESS);
 800981c:	4608      	mov	r0, r1
}
 800981e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009822:	4770      	bx	lr
            return(NX_SIZE_ERROR);
 8009824:	2009      	movs	r0, #9
 8009826:	4770      	bx	lr
    if (string_length)
 8009828:	b101      	cbz	r1, 800982c <_nx_utility_string_length_check+0x44>
        *string_length = i;
 800982a:	600b      	str	r3, [r1, #0]
    return(NX_SUCCESS);
 800982c:	2000      	movs	r0, #0
 800982e:	4770      	bx	lr

08009830 <_nxd_ipv6_interface_find>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_interface_find(NX_IP *ip_ptr, ULONG *dest_address,
                              NXD_IPV6_ADDRESS **ipv6_addr, NX_INTERFACE *if_ptr)
{
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	4691      	mov	r9, r2
 8009836:	b085      	sub	sp, #20
 8009838:	4605      	mov	r5, r0
UINT                          i;
NXD_IPV6_ADDRESS             *ipv6_address;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;
UINT                          start_index;
UINT                          end_index;
ULONG                         address_type = IPv6_Address_Type(dest_address);
 800983a:	4608      	mov	r0, r1
{
 800983c:	460e      	mov	r6, r1
 800983e:	469a      	mov	sl, r3
ULONG                         address_type = IPv6_Address_Type(dest_address);
 8009840:	f7f9 f8d8 	bl	80029f4 <IPv6_Address_Type>

    /* ipv6_addr must not be NULL. */
    NX_ASSERT(ipv6_addr != NX_NULL);
 8009844:	f1b9 0f00 	cmp.w	r9, #0
 8009848:	d039      	beq.n	80098be <_nxd_ipv6_interface_find+0x8e>
        }
    }
#endif /* NX_ENABLE_IPV6_MULTICAST  */

    /* Loop through addresses. */
    if (address_type & IPV6_ADDRESS_UNICAST)
 800984a:	2800      	cmp	r0, #0
 800984c:	4683      	mov	fp, r0
 800984e:	db77      	blt.n	8009940 <_nxd_ipv6_interface_find+0x110>
                return(NX_SUCCESS);
            }
        }
    }

    if (if_ptr)
 8009850:	f1ba 0f00 	cmp.w	sl, #0
 8009854:	f000 80ba 	beq.w	80099cc <_nxd_ipv6_interface_find+0x19c>
    {

        /* Search addresses from specified interface only. */
        start_index = if_ptr -> nx_interface_index;
 8009858:	f89a 8007 	ldrb.w	r8, [sl, #7]
        end_index = (UINT)(if_ptr -> nx_interface_index + 1);
 800985c:	f108 0301 	add.w	r3, r8, #1
        start_index = 0;
        end_index = NX_MAX_PHYSICAL_INTERFACES;
    }

    /* Loop through interfaces. */
    for (i = start_index; i < end_index; i++)
 8009860:	4598      	cmp	r8, r3
        end_index = (UINT)(if_ptr -> nx_interface_index + 1);
 8009862:	9301      	str	r3, [sp, #4]
    for (i = start_index; i < end_index; i++)
 8009864:	d249      	bcs.n	80098fa <_nxd_ipv6_interface_find+0xca>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
            {
                continue;
            }

            if (address_type & IPV6_ADDRESS_LINKLOCAL)
 8009866:	f00b 0301 	and.w	r3, fp, #1
 800986a:	eb08 0788 	add.w	r7, r8, r8, lsl #2
 800986e:	9503      	str	r5, [sp, #12]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	eb05 1707 	add.w	r7, r5, r7, lsl #4

                /* Found a proper outgoing address. */
                break;
            }
            /* Check for a multicast destination address.*/
            else if (address_type & IPV6_ADDRESS_MULTICAST)
 8009876:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 800987a:	9302      	str	r3, [sp, #8]
        if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up == NX_FALSE)
 800987c:	f897 3c4e 	ldrb.w	r3, [r7, #3150]	; 0xc4e
 8009880:	2b00      	cmp	r3, #0
 8009882:	d033      	beq.n	80098ec <_nxd_ipv6_interface_find+0xbc>
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8009884:	f8d7 4c68 	ldr.w	r4, [r7, #3176]	; 0xc68
 8009888:	b384      	cbz	r4, 80098ec <_nxd_ipv6_interface_find+0xbc>
 800988a:	9b02      	ldr	r3, [sp, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d16d      	bne.n	800996c <_nxd_ipv6_interface_find+0x13c>
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	b9fb      	cbnz	r3, 80098d4 <_nxd_ipv6_interface_find+0xa4>
 8009894:	e001      	b.n	800989a <_nxd_ipv6_interface_find+0x6a>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 8009896:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8009898:	b344      	cbz	r4, 80098ec <_nxd_ipv6_interface_find+0xbc>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800989a:	78a3      	ldrb	r3, [r4, #2]
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 800989c:	f104 0108 	add.w	r1, r4, #8
 80098a0:	4630      	mov	r0, r6
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	d1f7      	bne.n	8009896 <_nxd_ipv6_interface_find+0x66>
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 80098a6:	78e2      	ldrb	r2, [r4, #3]
 80098a8:	f001 f9aa 	bl	800ac00 <_nxd_ipv6_find_max_prefix_length>
                     ipv6_address -> nxd_ipv6_address_prefix_length)
 80098ac:	78e3      	ldrb	r3, [r4, #3]
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 80098ae:	4283      	cmp	r3, r0
 80098b0:	d8f1      	bhi.n	8009896 <_nxd_ipv6_interface_find+0x66>
        if (ipv6_address)
        {

            /* Found a proper address. */
            *ipv6_addr = ipv6_address;
            return(NX_SUCCESS);
 80098b2:	2000      	movs	r0, #0
            *ipv6_addr = ipv6_address;
 80098b4:	f8c9 4000 	str.w	r4, [r9]
        }
    }

    /* No available interface. */
    return(NX_NO_INTERFACE_ADDRESS);
}
 80098b8:	b005      	add	sp, #20
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NX_ASSERT(ipv6_addr != NX_NULL);
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	f004 f8bb 	bl	800da3c <_tx_thread_sleep>
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ca:	f004 f8b7 	bl	800da3c <_tx_thread_sleep>
 80098ce:	e7f6      	b.n	80098be <_nxd_ipv6_interface_find+0x8e>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 80098d0:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 80098d2:	b15c      	cbz	r4, 80098ec <_nxd_ipv6_interface_find+0xbc>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 80098d4:	78a3      	ldrb	r3, [r4, #2]
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 80098d6:	f104 0008 	add.w	r0, r4, #8
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 80098da:	2b04      	cmp	r3, #4
 80098dc:	d1f8      	bne.n	80098d0 <_nxd_ipv6_interface_find+0xa0>
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 80098de:	f7f9 f889 	bl	80029f4 <IPv6_Address_Type>
 80098e2:	07c0      	lsls	r0, r0, #31
 80098e4:	d4e5      	bmi.n	80098b2 <_nxd_ipv6_interface_find+0x82>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 80098e6:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 80098e8:	2c00      	cmp	r4, #0
 80098ea:	d1f3      	bne.n	80098d4 <_nxd_ipv6_interface_find+0xa4>
    for (i = start_index; i < end_index; i++)
 80098ec:	f108 0801 	add.w	r8, r8, #1
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	3750      	adds	r7, #80	; 0x50
 80098f4:	4543      	cmp	r3, r8
 80098f6:	d8c1      	bhi.n	800987c <_nxd_ipv6_interface_find+0x4c>
 80098f8:	9d03      	ldr	r5, [sp, #12]
    ipv6_address = ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nxd_interface_ipv6_address_list_head;
 80098fa:	f8d5 4cb8 	ldr.w	r4, [r5, #3256]	; 0xcb8
    if (ipv6_address)
 80098fe:	b13c      	cbz	r4, 8009910 <_nxd_ipv6_interface_find+0xe0>
        if (CHECK_IPV6_ADDRESSES_SAME(ipv6_address -> nxd_ipv6_address, dest_address))
 8009900:	4631      	mov	r1, r6
 8009902:	f104 0008 	add.w	r0, r4, #8
 8009906:	f7f9 f831 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800990a:	2800      	cmp	r0, #0
 800990c:	f040 8089 	bne.w	8009a22 <_nxd_ipv6_interface_find+0x1f2>
    if (address_type & IPV6_ADDRESS_GLOBAL)
 8009910:	f01b 0f04 	tst.w	fp, #4
 8009914:	d010      	beq.n	8009938 <_nxd_ipv6_interface_find+0x108>
 8009916:	f105 06e0 	add.w	r6, r5, #224	; 0xe0
 800991a:	4657      	mov	r7, sl
            if (rt_entry -> nx_ipv6_default_router_entry_flag == 0)
 800991c:	f895 3cf0 	ldrb.w	r3, [r5, #3312]	; 0xcf0
 8009920:	b13b      	cbz	r3, 8009932 <_nxd_ipv6_interface_find+0x102>
            if (rt_entry -> nx_ipv6_default_router_entry_interface_ptr -> nx_interface_link_up == NX_FALSE)
 8009922:	f8d5 3d04 	ldr.w	r3, [r5, #3332]	; 0xd04
 8009926:	799a      	ldrb	r2, [r3, #6]
 8009928:	b11a      	cbz	r2, 8009932 <_nxd_ipv6_interface_find+0x102>
            if (if_ptr && (rt_entry -> nx_ipv6_default_router_entry_interface_ptr != if_ptr))
 800992a:	2f00      	cmp	r7, #0
 800992c:	d052      	beq.n	80099d4 <_nxd_ipv6_interface_find+0x1a4>
 800992e:	42bb      	cmp	r3, r7
 8009930:	d050      	beq.n	80099d4 <_nxd_ipv6_interface_find+0x1a4>
 8009932:	351c      	adds	r5, #28
        for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8009934:	42b5      	cmp	r5, r6
 8009936:	d1f1      	bne.n	800991c <_nxd_ipv6_interface_find+0xec>
    return(NX_NO_INTERFACE_ADDRESS);
 8009938:	2050      	movs	r0, #80	; 0x50
}
 800993a:	b005      	add	sp, #20
 800993c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 8009940:	7c2b      	ldrb	r3, [r5, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d15f      	bne.n	8009a06 <_nxd_ipv6_interface_find+0x1d6>
 8009946:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800994a:	2b00      	cmp	r3, #0
 800994c:	d152      	bne.n	80099f4 <_nxd_ipv6_interface_find+0x1c4>
 800994e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8009952:	2b00      	cmp	r3, #0
 8009954:	f43f af7c 	beq.w	8009850 <_nxd_ipv6_interface_find+0x20>
                (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address, dest_address)))
 8009958:	4631      	mov	r1, r6
 800995a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800995e:	f7f9 f805 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 8009962:	2800      	cmp	r0, #0
 8009964:	f43f af74 	beq.w	8009850 <_nxd_ipv6_interface_find+0x20>
 8009968:	2340      	movs	r3, #64	; 0x40
 800996a:	e054      	b.n	8009a16 <_nxd_ipv6_interface_find+0x1e6>
 800996c:	9b00      	ldr	r3, [sp, #0]
 800996e:	bb1b      	cbnz	r3, 80099b8 <_nxd_ipv6_interface_find+0x188>
 8009970:	e006      	b.n	8009980 <_nxd_ipv6_interface_find+0x150>
                else if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_GLOBAL)
 8009972:	f7f9 f83f 	bl	80029f4 <IPv6_Address_Type>
 8009976:	0741      	lsls	r1, r0, #29
 8009978:	d49b      	bmi.n	80098b2 <_nxd_ipv6_interface_find+0x82>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 800997a:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 800997c:	2c00      	cmp	r4, #0
 800997e:	d0b5      	beq.n	80098ec <_nxd_ipv6_interface_find+0xbc>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8009980:	78a3      	ldrb	r3, [r4, #2]
 8009982:	f104 0508 	add.w	r5, r4, #8
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8009986:	4630      	mov	r0, r6
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8009988:	2b04      	cmp	r3, #4
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 800998a:	4629      	mov	r1, r5
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800998c:	d1f5      	bne.n	800997a <_nxd_ipv6_interface_find+0x14a>
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 800998e:	78e2      	ldrb	r2, [r4, #3]
 8009990:	f001 f936 	bl	800ac00 <_nxd_ipv6_find_max_prefix_length>
                     ipv6_address -> nxd_ipv6_address_prefix_length)
 8009994:	78e3      	ldrb	r3, [r4, #3]
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8009996:	4298      	cmp	r0, r3
                else if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_GLOBAL)
 8009998:	4628      	mov	r0, r5
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 800999a:	d28a      	bcs.n	80098b2 <_nxd_ipv6_interface_find+0x82>
                if ((dest_address[0] & 0x000F0000) == 0x00020000)
 800999c:	6833      	ldr	r3, [r6, #0]
 800999e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80099a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099a6:	d1e4      	bne.n	8009972 <_nxd_ipv6_interface_find+0x142>
                    if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 80099a8:	f7f9 f824 	bl	80029f4 <IPv6_Address_Type>
 80099ac:	07c2      	lsls	r2, r0, #31
 80099ae:	d480      	bmi.n	80098b2 <_nxd_ipv6_interface_find+0x82>
 80099b0:	e7e3      	b.n	800997a <_nxd_ipv6_interface_find+0x14a>
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 80099b2:	69a4      	ldr	r4, [r4, #24]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 80099b4:	2c00      	cmp	r4, #0
 80099b6:	d099      	beq.n	80098ec <_nxd_ipv6_interface_find+0xbc>
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 80099b8:	78a3      	ldrb	r3, [r4, #2]
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 80099ba:	f104 0008 	add.w	r0, r4, #8
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d1f7      	bne.n	80099b2 <_nxd_ipv6_interface_find+0x182>
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 80099c2:	f7f9 f817 	bl	80029f4 <IPv6_Address_Type>
 80099c6:	07c3      	lsls	r3, r0, #31
 80099c8:	d5f3      	bpl.n	80099b2 <_nxd_ipv6_interface_find+0x182>
 80099ca:	e772      	b.n	80098b2 <_nxd_ipv6_interface_find+0x82>
        end_index = NX_MAX_PHYSICAL_INTERFACES;
 80099cc:	2301      	movs	r3, #1
        start_index = 0;
 80099ce:	46d0      	mov	r8, sl
        end_index = NX_MAX_PHYSICAL_INTERFACES;
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	e748      	b.n	8009866 <_nxd_ipv6_interface_find+0x36>
            ipv6_address = rt_entry -> nx_ipv6_default_router_entry_interface_ptr -> nxd_interface_ipv6_address_list_head;
 80099d4:	6a1c      	ldr	r4, [r3, #32]
            while (ipv6_address)
 80099d6:	2c00      	cmp	r4, #0
 80099d8:	d0ab      	beq.n	8009932 <_nxd_ipv6_interface_find+0x102>
                if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 80099da:	78a3      	ldrb	r3, [r4, #2]
 80099dc:	2b04      	cmp	r3, #4
 80099de:	d001      	beq.n	80099e4 <_nxd_ipv6_interface_find+0x1b4>
                    ipv6_address = ipv6_address -> nxd_ipv6_address_next;
 80099e0:	69a4      	ldr	r4, [r4, #24]
 80099e2:	e7f8      	b.n	80099d6 <_nxd_ipv6_interface_find+0x1a6>
                else if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 80099e4:	f104 0008 	add.w	r0, r4, #8
 80099e8:	f7f9 f804 	bl	80029f4 <IPv6_Address_Type>
 80099ec:	f010 0001 	ands.w	r0, r0, #1
 80099f0:	d1f6      	bne.n	80099e0 <_nxd_ipv6_interface_find+0x1b0>
 80099f2:	e75f      	b.n	80098b4 <_nxd_ipv6_interface_find+0x84>
                (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address, dest_address)))
 80099f4:	4631      	mov	r1, r6
 80099f6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80099fa:	f7f8 ffb7 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d0a5      	beq.n	800994e <_nxd_ipv6_interface_find+0x11e>
 8009a02:	2320      	movs	r3, #32
 8009a04:	e007      	b.n	8009a16 <_nxd_ipv6_interface_find+0x1e6>
                (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address, dest_address)))
 8009a06:	4631      	mov	r1, r6
 8009a08:	f105 0018 	add.w	r0, r5, #24
 8009a0c:	f7f8 ffae 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d098      	beq.n	8009946 <_nxd_ipv6_interface_find+0x116>
 8009a14:	2300      	movs	r3, #0
                *ipv6_addr = &(ip_ptr -> nx_ipv6_address[i]);
 8009a16:	3310      	adds	r3, #16
                return(NX_SUCCESS);
 8009a18:	2000      	movs	r0, #0
                *ipv6_addr = &(ip_ptr -> nx_ipv6_address[i]);
 8009a1a:	441d      	add	r5, r3
 8009a1c:	f8c9 5000 	str.w	r5, [r9]
                return(NX_SUCCESS);
 8009a20:	e74a      	b.n	80098b8 <_nxd_ipv6_interface_find+0x88>
            *ipv6_addr = ipv6_address;
 8009a22:	f8c9 4000 	str.w	r4, [r9]
            return(NX_SUCCESS);
 8009a26:	2000      	movs	r0, #0
 8009a28:	e746      	b.n	80098b8 <_nxd_ipv6_interface_find+0x88>
 8009a2a:	bf00      	nop

08009a2c <_nxd_ipv6_router_lookup>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_router_lookup(NX_IP *ip_ptr, NX_INTERFACE *if_ptr, ULONG *router_address, void **nd_cache_entry)
{
 8009a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UINT                          table_size;
UINT                          routers_checked;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;
ND_CACHE_ENTRY               *NDCacheEntry;

    NX_ASSERT(nd_cache_entry != NX_NULL)
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8097 	beq.w	8009b64 <_nxd_ipv6_router_lookup+0x138>
 8009a36:	4604      	mov	r4, r0

    /* Initialize cache pointer to NULL (if no router found). */
    *nd_cache_entry = NULL;
 8009a38:	2600      	movs	r6, #0

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_default_router_table_size;
 8009a3a:	f8b0 0cec 	ldrh.w	r0, [r0, #3308]	; 0xcec
 8009a3e:	4698      	mov	r8, r3
    *nd_cache_entry = NULL;
 8009a40:	601e      	str	r6, [r3, #0]

    /* Check if there have been any routers added to the table. */
    if (table_size == 0)
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f000 808b 	beq.w	8009b5e <_nxd_ipv6_router_lookup+0x132>

        /* Local pointer for convenience. */
        rt_entry = &(ip_ptr -> nx_ipv6_default_router_table[i]);

        /* Does this slot contain a valid router? */
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009a48:	f994 7cf0 	ldrsb.w	r7, [r4, #3312]	; 0xcf0
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	4611      	mov	r1, r2
 8009a50:	42b7      	cmp	r7, r6
 8009a52:	f2c0 8090 	blt.w	8009b76 <_nxd_ipv6_router_lookup+0x14a>
 8009a56:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f2c0 81c2 	blt.w	8009de4 <_nxd_ipv6_router_lookup+0x3b8>
 8009a60:	f994 3d28 	ldrsb.w	r3, [r4, #3368]	; 0xd28
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f2c0 819d 	blt.w	8009da4 <_nxd_ipv6_router_lookup+0x378>
 8009a6a:	f994 3d44 	ldrsb.w	r3, [r4, #3396]	; 0xd44
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f2c0 81a8 	blt.w	8009dc4 <_nxd_ipv6_router_lookup+0x398>
 8009a74:	f994 3d60 	ldrsb.w	r3, [r4, #3424]	; 0xd60
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f2c0 8183 	blt.w	8009d84 <_nxd_ipv6_router_lookup+0x358>
 8009a7e:	f994 3d7c 	ldrsb.w	r3, [r4, #3452]	; 0xd7c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f2c0 816a 	blt.w	8009d5c <_nxd_ipv6_router_lookup+0x330>
 8009a88:	f994 3d98 	ldrsb.w	r3, [r4, #3480]	; 0xd98
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f2c0 8155 	blt.w	8009d3c <_nxd_ipv6_router_lookup+0x310>
 8009a92:	f994 3db4 	ldrsb.w	r3, [r4, #3508]	; 0xdb4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f2c0 813f 	blt.w	8009d1a <_nxd_ipv6_router_lookup+0x2ee>
    /* If we are here, we did not find a suitable default router. Do a search
       of routers previously reachable. */

    /* Start at the round robin index so we don't always choose the first
       less-than-reachable router in the table. */
    i = ip_ptr -> nx_ipv6_default_router_table_round_robin_index;
 8009a9c:	f8d4 0dd0 	ldr.w	r0, [r4, #3536]	; 0xdd0

        /* Local pointer for convenience. */
        rt_entry = &(ip_ptr -> nx_ipv6_default_router_table[i]);

        /* Does this slot contain a valid router? */
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009aa0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009aa8:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f2c0 812b 	blt.w	8009d08 <_nxd_ipv6_router_lookup+0x2dc>
            /* We're done. Return successful outcome status. */
            return(NX_SUCCESS);
        }

        /* Are we past the end of the table? */
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8009ab2:	2807      	cmp	r0, #7
 8009ab4:	f000 8103 	beq.w	8009cbe <_nxd_ipv6_router_lookup+0x292>
            /* Yes, wrap to the first slot.*/
            i = 0;
        }
        else
        {
            i++;
 8009ab8:	1c43      	adds	r3, r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009aba:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009abe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ac2:	f992 2cf0 	ldrsb.w	r2, [r2, #3312]	; 0xcf0
 8009ac6:	2a00      	cmp	r2, #0
 8009ac8:	f2c0 810a 	blt.w	8009ce0 <_nxd_ipv6_router_lookup+0x2b4>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8009acc:	2b07      	cmp	r3, #7
 8009ace:	f000 80db 	beq.w	8009c88 <_nxd_ipv6_router_lookup+0x25c>
            i++;
 8009ad2:	3002      	adds	r0, #2
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009ad4:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009ad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009adc:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f2c0 80f4 	blt.w	8009cce <_nxd_ipv6_router_lookup+0x2a2>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8009ae6:	2807      	cmp	r0, #7
 8009ae8:	f000 80bd 	beq.w	8009c66 <_nxd_ipv6_router_lookup+0x23a>
            i++;
 8009aec:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009aee:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009af2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009af6:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f2c0 80cc 	blt.w	8009c98 <_nxd_ipv6_router_lookup+0x26c>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8009b00:	2807      	cmp	r0, #7
 8009b02:	f000 8095 	beq.w	8009c30 <_nxd_ipv6_router_lookup+0x204>
            i++;
 8009b06:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009b08:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b10:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f2c0 80ae 	blt.w	8009c76 <_nxd_ipv6_router_lookup+0x24a>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8009b1a:	2807      	cmp	r0, #7
 8009b1c:	d079      	beq.n	8009c12 <_nxd_ipv6_router_lookup+0x1e6>
            i++;
 8009b1e:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009b20:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b28:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f2c0 8087 	blt.w	8009c40 <_nxd_ipv6_router_lookup+0x214>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8009b32:	2807      	cmp	r0, #7
 8009b34:	d03f      	beq.n	8009bb6 <_nxd_ipv6_router_lookup+0x18a>
            i++;
 8009b36:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009b38:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b40:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	db6b      	blt.n	8009c20 <_nxd_ipv6_router_lookup+0x1f4>
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 8009b48:	2807      	cmp	r0, #7
 8009b4a:	d05a      	beq.n	8009c02 <_nxd_ipv6_router_lookup+0x1d6>
            i++;
 8009b4c:	3001      	adds	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009b4e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009b52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b56:	f993 3cf0 	ldrsb.w	r3, [r3, #3312]	; 0xcf0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	db32      	blt.n	8009bc4 <_nxd_ipv6_router_lookup+0x198>
        return(NX_NOT_SUCCESSFUL);
 8009b5e:	2043      	movs	r0, #67	; 0x43
        }
    }

    /* Router not found. */
    return(NX_NOT_SUCCESSFUL);
}
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NX_ASSERT(nd_cache_entry != NX_NULL)
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	f003 ff68 	bl	800da3c <_tx_thread_sleep>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	f003 ff64 	bl	800da3c <_tx_thread_sleep>
 8009b74:	e7f6      	b.n	8009b64 <_nxd_ipv6_router_lookup+0x138>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009b76:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8009b7a:	429d      	cmp	r5, r3
 8009b7c:	f47f af6b 	bne.w	8009a56 <_nxd_ipv6_router_lookup+0x2a>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009b80:	f8d4 3d08 	ldr.w	r3, [r4, #3336]	; 0xd08
            if (!NDCacheEntry ||
 8009b84:	b11b      	cbz	r3, 8009b8e <_nxd_ipv6_router_lookup+0x162>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8009b86:	7e5b      	ldrb	r3, [r3, #25]
 8009b88:	3b02      	subs	r3, #2
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d903      	bls.n	8009b96 <_nxd_ipv6_router_lookup+0x16a>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8009b8e:	3801      	subs	r0, #1
 8009b90:	f47f af61 	bne.w	8009a56 <_nxd_ipv6_router_lookup+0x2a>
 8009b94:	e782      	b.n	8009a9c <_nxd_ipv6_router_lookup+0x70>
 8009b96:	4630      	mov	r0, r6
            COPY_IPV6_ADDRESS(ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address, router_address);
 8009b98:	251c      	movs	r5, #28
 8009b9a:	fb05 f500 	mul.w	r5, r5, r0
 8009b9e:	f605 40f4 	addw	r0, r5, #3316	; 0xcf4
 8009ba2:	4420      	add	r0, r4
            *nd_cache_entry = ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009ba4:	442c      	add	r4, r5
            COPY_IPV6_ADDRESS(ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address, router_address);
 8009ba6:	f7f8 ff0b 	bl	80029c0 <COPY_IPV6_ADDRESS>
            return(NX_SUCCESS);
 8009baa:	2000      	movs	r0, #0
            *nd_cache_entry = ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009bac:	f8d4 3d08 	ldr.w	r3, [r4, #3336]	; 0xd08
 8009bb0:	f8c8 3000 	str.w	r3, [r8]
            return(NX_SUCCESS);
 8009bb4:	e7d4      	b.n	8009b60 <_nxd_ipv6_router_lookup+0x134>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009bb6:	2f00      	cmp	r7, #0
 8009bb8:	db4b      	blt.n	8009c52 <_nxd_ipv6_router_lookup+0x226>
 8009bba:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	dacd      	bge.n	8009b5e <_nxd_ipv6_router_lookup+0x132>
            i++;
 8009bc2:	2001      	movs	r0, #1
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8009bc4:	231c      	movs	r3, #28
 8009bc6:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009bca:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009bce:	42ab      	cmp	r3, r5
 8009bd0:	d1c5      	bne.n	8009b5e <_nxd_ipv6_router_lookup+0x132>
            COPY_IPV6_ADDRESS(rt_entry -> nx_ipv6_default_router_entry_router_address, router_address);
 8009bd2:	251c      	movs	r5, #28
 8009bd4:	fb05 f500 	mul.w	r5, r5, r0
 8009bd8:	f605 40f4 	addw	r0, r5, #3316	; 0xcf4
 8009bdc:	4420      	add	r0, r4
 8009bde:	f7f8 feef 	bl	80029c0 <COPY_IPV6_ADDRESS>
            ip_ptr -> nx_ipv6_default_router_table_round_robin_index++;
 8009be2:	f8d4 3dd0 	ldr.w	r3, [r4, #3536]	; 0xdd0
            *nd_cache_entry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009be6:	1960      	adds	r0, r4, r5
            ip_ptr -> nx_ipv6_default_router_table_round_robin_index++;
 8009be8:	3301      	adds	r3, #1
            *nd_cache_entry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009bea:	f8d0 2d08 	ldr.w	r2, [r0, #3336]	; 0xd08
                ip_ptr -> nx_ipv6_default_router_table_round_robin_index = 0;
 8009bee:	2000      	movs	r0, #0
            if (ip_ptr -> nx_ipv6_default_router_table_round_robin_index == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE)
 8009bf0:	2b08      	cmp	r3, #8
            *nd_cache_entry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009bf2:	f8c8 2000 	str.w	r2, [r8]
            ip_ptr -> nx_ipv6_default_router_table_round_robin_index++;
 8009bf6:	f8c4 3dd0 	str.w	r3, [r4, #3536]	; 0xdd0
            if (ip_ptr -> nx_ipv6_default_router_table_round_robin_index == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE)
 8009bfa:	d1b1      	bne.n	8009b60 <_nxd_ipv6_router_lookup+0x134>
                ip_ptr -> nx_ipv6_default_router_table_round_robin_index = 0;
 8009bfc:	f8c4 0dd0 	str.w	r0, [r4, #3536]	; 0xdd0
 8009c00:	e7ae      	b.n	8009b60 <_nxd_ipv6_router_lookup+0x134>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c02:	2f00      	cmp	r7, #0
 8009c04:	daab      	bge.n	8009b5e <_nxd_ipv6_router_lookup+0x132>
 8009c06:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8009c0a:	429d      	cmp	r5, r3
 8009c0c:	d1a7      	bne.n	8009b5e <_nxd_ipv6_router_lookup+0x132>
            i = 0;
 8009c0e:	2000      	movs	r0, #0
 8009c10:	e7df      	b.n	8009bd2 <_nxd_ipv6_router_lookup+0x1a6>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c12:	2f00      	cmp	r7, #0
 8009c14:	db22      	blt.n	8009c5c <_nxd_ipv6_router_lookup+0x230>
 8009c16:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 8009c1a:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	da95      	bge.n	8009b4c <_nxd_ipv6_router_lookup+0x120>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8009c20:	231c      	movs	r3, #28
 8009c22:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c26:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009c2a:	429d      	cmp	r5, r3
 8009c2c:	d18c      	bne.n	8009b48 <_nxd_ipv6_router_lookup+0x11c>
 8009c2e:	e7d0      	b.n	8009bd2 <_nxd_ipv6_router_lookup+0x1a6>
 8009c30:	2f00      	cmp	r7, #0
 8009c32:	db3a      	blt.n	8009caa <_nxd_ipv6_router_lookup+0x27e>
 8009c34:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 8009c38:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f6bf af7b 	bge.w	8009b36 <_nxd_ipv6_router_lookup+0x10a>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8009c40:	231c      	movs	r3, #28
 8009c42:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c46:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009c4a:	429d      	cmp	r5, r3
 8009c4c:	f47f af71 	bne.w	8009b32 <_nxd_ipv6_router_lookup+0x106>
 8009c50:	e7bf      	b.n	8009bd2 <_nxd_ipv6_router_lookup+0x1a6>
 8009c52:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8009c56:	429d      	cmp	r5, r3
 8009c58:	d1af      	bne.n	8009bba <_nxd_ipv6_router_lookup+0x18e>
 8009c5a:	e7d8      	b.n	8009c0e <_nxd_ipv6_router_lookup+0x1e2>
 8009c5c:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8009c60:	429d      	cmp	r5, r3
 8009c62:	d1d8      	bne.n	8009c16 <_nxd_ipv6_router_lookup+0x1ea>
 8009c64:	e7d3      	b.n	8009c0e <_nxd_ipv6_router_lookup+0x1e2>
 8009c66:	2f00      	cmp	r7, #0
 8009c68:	db24      	blt.n	8009cb4 <_nxd_ipv6_router_lookup+0x288>
 8009c6a:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 8009c6e:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f6bf af54 	bge.w	8009b1e <_nxd_ipv6_router_lookup+0xf2>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8009c76:	231c      	movs	r3, #28
 8009c78:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c7c:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009c80:	429d      	cmp	r5, r3
 8009c82:	f47f af4a 	bne.w	8009b1a <_nxd_ipv6_router_lookup+0xee>
 8009c86:	e7a4      	b.n	8009bd2 <_nxd_ipv6_router_lookup+0x1a6>
 8009c88:	2f00      	cmp	r7, #0
 8009c8a:	db33      	blt.n	8009cf4 <_nxd_ipv6_router_lookup+0x2c8>
 8009c8c:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 8009c90:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f6bf af37 	bge.w	8009b06 <_nxd_ipv6_router_lookup+0xda>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8009c98:	231c      	movs	r3, #28
 8009c9a:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009c9e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009ca2:	429d      	cmp	r5, r3
 8009ca4:	f47f af2c 	bne.w	8009b00 <_nxd_ipv6_router_lookup+0xd4>
 8009ca8:	e793      	b.n	8009bd2 <_nxd_ipv6_router_lookup+0x1a6>
 8009caa:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8009cae:	429d      	cmp	r5, r3
 8009cb0:	d1c0      	bne.n	8009c34 <_nxd_ipv6_router_lookup+0x208>
 8009cb2:	e7ac      	b.n	8009c0e <_nxd_ipv6_router_lookup+0x1e2>
 8009cb4:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8009cb8:	429d      	cmp	r5, r3
 8009cba:	d1d6      	bne.n	8009c6a <_nxd_ipv6_router_lookup+0x23e>
 8009cbc:	e7a7      	b.n	8009c0e <_nxd_ipv6_router_lookup+0x1e2>
 8009cbe:	2f00      	cmp	r7, #0
 8009cc0:	db1d      	blt.n	8009cfe <_nxd_ipv6_router_lookup+0x2d2>
 8009cc2:	f994 3d0c 	ldrsb.w	r3, [r4, #3340]	; 0xd0c
            i++;
 8009cc6:	2001      	movs	r0, #1
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f6bf af0f 	bge.w	8009aec <_nxd_ipv6_router_lookup+0xc0>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8009cce:	231c      	movs	r3, #28
 8009cd0:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009cd4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009cd8:	42ab      	cmp	r3, r5
 8009cda:	f47f af04 	bne.w	8009ae6 <_nxd_ipv6_router_lookup+0xba>
 8009cde:	e778      	b.n	8009bd2 <_nxd_ipv6_router_lookup+0x1a6>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8009ce0:	221c      	movs	r2, #28
 8009ce2:	fb02 4203 	mla	r2, r2, r3, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009ce6:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
 8009cea:	4295      	cmp	r5, r2
 8009cec:	f47f aeee 	bne.w	8009acc <_nxd_ipv6_router_lookup+0xa0>
            i++;
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	e76e      	b.n	8009bd2 <_nxd_ipv6_router_lookup+0x1a6>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009cf4:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8009cf8:	429d      	cmp	r5, r3
 8009cfa:	d1c7      	bne.n	8009c8c <_nxd_ipv6_router_lookup+0x260>
 8009cfc:	e787      	b.n	8009c0e <_nxd_ipv6_router_lookup+0x1e2>
 8009cfe:	f8d4 3d04 	ldr.w	r3, [r4, #3332]	; 0xd04
 8009d02:	429d      	cmp	r5, r3
 8009d04:	d1dd      	bne.n	8009cc2 <_nxd_ipv6_router_lookup+0x296>
 8009d06:	e782      	b.n	8009c0e <_nxd_ipv6_router_lookup+0x1e2>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8009d08:	231c      	movs	r3, #28
 8009d0a:	fb03 4300 	mla	r3, r3, r0, r4
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009d0e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009d12:	429d      	cmp	r5, r3
 8009d14:	f47f aecd 	bne.w	8009ab2 <_nxd_ipv6_router_lookup+0x86>
 8009d18:	e75b      	b.n	8009bd2 <_nxd_ipv6_router_lookup+0x1a6>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009d1a:	f8d4 3dc8 	ldr.w	r3, [r4, #3528]	; 0xdc8
 8009d1e:	42ab      	cmp	r3, r5
 8009d20:	f47f aebc 	bne.w	8009a9c <_nxd_ipv6_router_lookup+0x70>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009d24:	f8d4 3dcc 	ldr.w	r3, [r4, #3532]	; 0xdcc
            if (!NDCacheEntry ||
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f43f aeb7 	beq.w	8009a9c <_nxd_ipv6_router_lookup+0x70>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8009d2e:	7e5b      	ldrb	r3, [r3, #25]
 8009d30:	3b02      	subs	r3, #2
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	f63f aeb2 	bhi.w	8009a9c <_nxd_ipv6_router_lookup+0x70>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8009d38:	2007      	movs	r0, #7
 8009d3a:	e72d      	b.n	8009b98 <_nxd_ipv6_router_lookup+0x16c>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009d3c:	f8d4 3dac 	ldr.w	r3, [r4, #3500]	; 0xdac
 8009d40:	429d      	cmp	r5, r3
 8009d42:	f47f aea6 	bne.w	8009a92 <_nxd_ipv6_router_lookup+0x66>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009d46:	f8d4 3db0 	ldr.w	r3, [r4, #3504]	; 0xdb0
            if (!NDCacheEntry ||
 8009d4a:	b11b      	cbz	r3, 8009d54 <_nxd_ipv6_router_lookup+0x328>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8009d4c:	7e5b      	ldrb	r3, [r3, #25]
 8009d4e:	3b02      	subs	r3, #2
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d913      	bls.n	8009d7c <_nxd_ipv6_router_lookup+0x350>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8009d54:	2801      	cmp	r0, #1
 8009d56:	f47f ae9c 	bne.w	8009a92 <_nxd_ipv6_router_lookup+0x66>
 8009d5a:	e69f      	b.n	8009a9c <_nxd_ipv6_router_lookup+0x70>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009d5c:	f8d4 3d90 	ldr.w	r3, [r4, #3472]	; 0xd90
 8009d60:	429d      	cmp	r5, r3
 8009d62:	f47f ae91 	bne.w	8009a88 <_nxd_ipv6_router_lookup+0x5c>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009d66:	f8d4 3d94 	ldr.w	r3, [r4, #3476]	; 0xd94
            if (!NDCacheEntry ||
 8009d6a:	b11b      	cbz	r3, 8009d74 <_nxd_ipv6_router_lookup+0x348>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8009d6c:	7e5b      	ldrb	r3, [r3, #25]
 8009d6e:	3b02      	subs	r3, #2
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d905      	bls.n	8009d80 <_nxd_ipv6_router_lookup+0x354>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8009d74:	3801      	subs	r0, #1
 8009d76:	f47f ae87 	bne.w	8009a88 <_nxd_ipv6_router_lookup+0x5c>
 8009d7a:	e68f      	b.n	8009a9c <_nxd_ipv6_router_lookup+0x70>
 8009d7c:	2006      	movs	r0, #6
 8009d7e:	e70b      	b.n	8009b98 <_nxd_ipv6_router_lookup+0x16c>
 8009d80:	2005      	movs	r0, #5
 8009d82:	e709      	b.n	8009b98 <_nxd_ipv6_router_lookup+0x16c>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009d84:	f8d4 3d74 	ldr.w	r3, [r4, #3444]	; 0xd74
 8009d88:	429d      	cmp	r5, r3
 8009d8a:	f47f ae78 	bne.w	8009a7e <_nxd_ipv6_router_lookup+0x52>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009d8e:	f8d4 3d78 	ldr.w	r3, [r4, #3448]	; 0xd78
            if (!NDCacheEntry ||
 8009d92:	b11b      	cbz	r3, 8009d9c <_nxd_ipv6_router_lookup+0x370>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8009d94:	7e5b      	ldrb	r3, [r3, #25]
 8009d96:	3b02      	subs	r3, #2
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d933      	bls.n	8009e04 <_nxd_ipv6_router_lookup+0x3d8>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8009d9c:	3801      	subs	r0, #1
 8009d9e:	f47f ae6e 	bne.w	8009a7e <_nxd_ipv6_router_lookup+0x52>
 8009da2:	e67b      	b.n	8009a9c <_nxd_ipv6_router_lookup+0x70>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009da4:	f8d4 3d3c 	ldr.w	r3, [r4, #3388]	; 0xd3c
 8009da8:	429d      	cmp	r5, r3
 8009daa:	f47f ae5e 	bne.w	8009a6a <_nxd_ipv6_router_lookup+0x3e>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009dae:	f8d4 3d40 	ldr.w	r3, [r4, #3392]	; 0xd40
            if (!NDCacheEntry ||
 8009db2:	b11b      	cbz	r3, 8009dbc <_nxd_ipv6_router_lookup+0x390>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8009db4:	7e5b      	ldrb	r3, [r3, #25]
 8009db6:	3b02      	subs	r3, #2
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d927      	bls.n	8009e0c <_nxd_ipv6_router_lookup+0x3e0>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8009dbc:	3801      	subs	r0, #1
 8009dbe:	f47f ae54 	bne.w	8009a6a <_nxd_ipv6_router_lookup+0x3e>
 8009dc2:	e66b      	b.n	8009a9c <_nxd_ipv6_router_lookup+0x70>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009dc4:	f8d4 3d58 	ldr.w	r3, [r4, #3416]	; 0xd58
 8009dc8:	429d      	cmp	r5, r3
 8009dca:	f47f ae53 	bne.w	8009a74 <_nxd_ipv6_router_lookup+0x48>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009dce:	f8d4 3d5c 	ldr.w	r3, [r4, #3420]	; 0xd5c
            if (!NDCacheEntry ||
 8009dd2:	b11b      	cbz	r3, 8009ddc <_nxd_ipv6_router_lookup+0x3b0>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8009dd4:	7e5b      	ldrb	r3, [r3, #25]
 8009dd6:	3b02      	subs	r3, #2
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d915      	bls.n	8009e08 <_nxd_ipv6_router_lookup+0x3dc>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8009ddc:	3801      	subs	r0, #1
 8009dde:	f47f ae49 	bne.w	8009a74 <_nxd_ipv6_router_lookup+0x48>
 8009de2:	e65b      	b.n	8009a9c <_nxd_ipv6_router_lookup+0x70>
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 8009de4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009de8:	429d      	cmp	r5, r3
 8009dea:	f47f ae39 	bne.w	8009a60 <_nxd_ipv6_router_lookup+0x34>
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8009dee:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
            if (!NDCacheEntry ||
 8009df2:	b11b      	cbz	r3, 8009dfc <_nxd_ipv6_router_lookup+0x3d0>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8009df4:	7e5b      	ldrb	r3, [r3, #25]
 8009df6:	3b02      	subs	r3, #2
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d909      	bls.n	8009e10 <_nxd_ipv6_router_lookup+0x3e4>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8009dfc:	3801      	subs	r0, #1
 8009dfe:	f47f ae2f 	bne.w	8009a60 <_nxd_ipv6_router_lookup+0x34>
 8009e02:	e64b      	b.n	8009a9c <_nxd_ipv6_router_lookup+0x70>
 8009e04:	2004      	movs	r0, #4
 8009e06:	e6c7      	b.n	8009b98 <_nxd_ipv6_router_lookup+0x16c>
 8009e08:	2003      	movs	r0, #3
 8009e0a:	e6c5      	b.n	8009b98 <_nxd_ipv6_router_lookup+0x16c>
 8009e0c:	2002      	movs	r0, #2
 8009e0e:	e6c3      	b.n	8009b98 <_nxd_ipv6_router_lookup+0x16c>
 8009e10:	2001      	movs	r0, #1
 8009e12:	e6c1      	b.n	8009b98 <_nxd_ipv6_router_lookup+0x16c>

08009e14 <_nxd_ipv6_search_onlink>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
INT _nxd_ipv6_search_onlink(NX_IP *ip_ptr, ULONG *dest_addr)
{
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4606      	mov	r6, r0
NXD_IPV6_ADDRESS     *ipv6_address;


    /* First special case is the link local address. All these
       addresses are onlink.  */
    if (IPv6_Address_Type(dest_addr) & IPV6_ADDRESS_LINKLOCAL)
 8009e18:	4608      	mov	r0, r1
{
 8009e1a:	460d      	mov	r5, r1
    if (IPv6_Address_Type(dest_addr) & IPV6_ADDRESS_LINKLOCAL)
 8009e1c:	f7f8 fdea 	bl	80029f4 <IPv6_Address_Type>
 8009e20:	07c3      	lsls	r3, r0, #31
 8009e22:	d439      	bmi.n	8009e98 <_nxd_ipv6_search_onlink+0x84>
    {
        return(1);
    }

    /* Set a local pointer for convenience. */
    prefix_entry = ip_ptr -> nx_ipv6_prefix_list_ptr;
 8009e24:	f8d6 4ed4 	ldr.w	r4, [r6, #3796]	; 0xed4

    /* Loop through the prefix table. Prefixes are the IPv6 equivalent of
       network domains in IPv4.  */
    while (prefix_entry)
 8009e28:	bb7c      	cbnz	r4, 8009e8a <_nxd_ipv6_search_onlink+0x76>
    for (addr_index = 0; addr_index < NX_MAX_IPV6_ADDRESSES; addr_index++)
    {

        ipv6_address = &ip_ptr -> nx_ipv6_address[addr_index];
        /* Skip invalid entries. */
        if (!(ipv6_address -> nxd_ipv6_address_valid))
 8009e2a:	7c33      	ldrb	r3, [r6, #16]
 8009e2c:	b153      	cbz	r3, 8009e44 <_nxd_ipv6_search_onlink+0x30>
        {
            continue;
        }

        /* Skip non-manually configured entires. */
        if (ipv6_address -> nxd_ipv6_address_ConfigurationMethod != NX_IPV6_ADDRESS_MANUAL_CONFIG)
 8009e2e:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d106      	bne.n	8009e44 <_nxd_ipv6_search_onlink+0x30>
        {
            continue;
        }

        /* Check whether or not the destination address is matched. */
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 8009e36:	7cf2      	ldrb	r2, [r6, #19]
 8009e38:	f106 0118 	add.w	r1, r6, #24
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f7f8 fd75 	bl	800292c <CHECK_IP_ADDRESSES_BY_PREFIX>
 8009e42:	bb48      	cbnz	r0, 8009e98 <_nxd_ipv6_search_onlink+0x84>
        if (!(ipv6_address -> nxd_ipv6_address_valid))
 8009e44:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8009e48:	b15b      	cbz	r3, 8009e62 <_nxd_ipv6_search_onlink+0x4e>
        if (ipv6_address -> nxd_ipv6_address_ConfigurationMethod != NX_IPV6_ADDRESS_MANUAL_CONFIG)
 8009e4a:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d107      	bne.n	8009e62 <_nxd_ipv6_search_onlink+0x4e>
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 8009e52:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
 8009e56:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f7f8 fd66 	bl	800292c <CHECK_IP_ADDRESSES_BY_PREFIX>
 8009e60:	b9d0      	cbnz	r0, 8009e98 <_nxd_ipv6_search_onlink+0x84>
        if (!(ipv6_address -> nxd_ipv6_address_valid))
 8009e62:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8009e66:	b15b      	cbz	r3, 8009e80 <_nxd_ipv6_search_onlink+0x6c>
        if (ipv6_address -> nxd_ipv6_address_ConfigurationMethod != NX_IPV6_ADDRESS_MANUAL_CONFIG)
 8009e68:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d107      	bne.n	8009e80 <_nxd_ipv6_search_onlink+0x6c>
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 8009e70:	4628      	mov	r0, r5
 8009e72:	f896 2053 	ldrb.w	r2, [r6, #83]	; 0x53
 8009e76:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8009e7a:	f7f8 fd57 	bl	800292c <CHECK_IP_ADDRESSES_BY_PREFIX>
 8009e7e:	b958      	cbnz	r0, 8009e98 <_nxd_ipv6_search_onlink+0x84>
        }
    }


    /* No matches found. Not an onlink address. */
    return(0);
 8009e80:	2000      	movs	r0, #0
}
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
        prefix_entry = prefix_entry -> nx_ipv6_prefix_entry_next;
 8009e84:	69e4      	ldr	r4, [r4, #28]
    while (prefix_entry)
 8009e86:	2c00      	cmp	r4, #0
 8009e88:	d0cf      	beq.n	8009e2a <_nxd_ipv6_search_onlink+0x16>
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 8009e8a:	6922      	ldr	r2, [r4, #16]
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f7f8 fd4c 	bl	800292c <CHECK_IP_ADDRESSES_BY_PREFIX>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d0f5      	beq.n	8009e84 <_nxd_ipv6_search_onlink+0x70>
        return(1);
 8009e98:	2001      	movs	r0, #1
}
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}

08009e9c <_nxd_udp_packet_info_extract>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_packet_info_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address,
                                   UINT *protocol, UINT *port, UINT *interface_index)
{
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	9d06      	ldr	r5, [sp, #24]
#ifdef FEATURE_NX_IPV6
NX_IPV6_HEADER *ipv6_header;
#endif /* FEATURE_NX_IPV6 */


    if (ip_address)
 8009ea4:	b191      	cbz	r1, 8009ecc <_nxd_udp_packet_info_extract+0x30>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8009ea6:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 8009eaa:	2e04      	cmp	r6, #4
 8009eac:	d023      	beq.n	8009ef6 <_nxd_udp_packet_info_extract+0x5a>
        }
        else
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8009eae:	2e06      	cmp	r6, #6
 8009eb0:	d002      	beq.n	8009eb8 <_nxd_udp_packet_info_extract+0x1c>
        else
#endif /* FEATURE_NX_IPV6 */
        {

            /* Invalid IP version . */
            return(NX_INVALID_PACKET);
 8009eb2:	2012      	movs	r0, #18
    }

    *interface_index = (UINT)nx_interface -> nx_interface_index;

    return(NX_SUCCESS);
}
 8009eb4:	b002      	add	sp, #8
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
            ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8009eb8:	6b80      	ldr	r0, [r0, #56]	; 0x38
            ip_address -> nxd_ip_version = NX_IP_VERSION_V6;
 8009eba:	f841 6b04 	str.w	r6, [r1], #4
            COPY_IPV6_ADDRESS(ipv6_header -> nx_ip_header_source_ip, ip_address -> nxd_ip_address.v6);
 8009ebe:	3008      	adds	r0, #8
 8009ec0:	e9cd 2300 	strd	r2, r3, [sp]
 8009ec4:	f7f8 fd7c 	bl	80029c0 <COPY_IPV6_ADDRESS>
 8009ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
    if (port != NX_NULL)
 8009ecc:	b11b      	cbz	r3, 8009ed6 <_nxd_udp_packet_info_extract+0x3a>
    source_port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 8009ece:	68a1      	ldr	r1, [r4, #8]
 8009ed0:	f831 1c06 	ldrh.w	r1, [r1, #-6]
        *port = source_port;
 8009ed4:	6019      	str	r1, [r3, #0]
    if (protocol != NX_NULL)
 8009ed6:	b10a      	cbz	r2, 8009edc <_nxd_udp_packet_info_extract+0x40>
        *protocol = 0x11;
 8009ed8:	2311      	movs	r3, #17
 8009eda:	6013      	str	r3, [r2, #0]
    if (interface_index == NX_NULL)
 8009edc:	b145      	cbz	r5, 8009ef0 <_nxd_udp_packet_info_extract+0x54>
    *interface_index = 0xFFFFFFFF;
 8009ede:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee2:	602b      	str	r3, [r5, #0]
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8009ee4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d00b      	beq.n	8009f04 <_nxd_udp_packet_info_extract+0x68>
    else if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8009eec:	2b06      	cmp	r3, #6
 8009eee:	d011      	beq.n	8009f14 <_nxd_udp_packet_info_extract+0x78>
        return(NX_SUCCESS);
 8009ef0:	2000      	movs	r0, #0
}
 8009ef2:	b002      	add	sp, #8
 8009ef4:	bd70      	pop	{r4, r5, r6, pc}
            ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8009ef6:	6b80      	ldr	r0, [r0, #56]	; 0x38
            ip_address -> nxd_ip_version = NX_IP_VERSION_V4;
 8009ef8:	600e      	str	r6, [r1, #0]
            ip_address -> nxd_ip_address.v4 = ipv4_header -> nx_ip_header_source_ip;
 8009efa:	68c0      	ldr	r0, [r0, #12]
 8009efc:	6048      	str	r0, [r1, #4]
    if (port != NX_NULL)
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e5      	bne.n	8009ece <_nxd_udp_packet_info_extract+0x32>
 8009f02:	e7e8      	b.n	8009ed6 <_nxd_udp_packet_info_extract+0x3a>
        nx_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009f04:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (nx_interface == NX_NULL)
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0f2      	beq.n	8009ef0 <_nxd_udp_packet_info_extract+0x54>
    *interface_index = (UINT)nx_interface -> nx_interface_index;
 8009f0a:	79db      	ldrb	r3, [r3, #7]
    return(NX_SUCCESS);
 8009f0c:	2000      	movs	r0, #0
    *interface_index = (UINT)nx_interface -> nx_interface_index;
 8009f0e:	602b      	str	r3, [r5, #0]
}
 8009f10:	b002      	add	sp, #8
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr == NX_NULL)
 8009f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0ea      	beq.n	8009ef0 <_nxd_udp_packet_info_extract+0x54>
            nx_interface = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	e7f3      	b.n	8009f06 <_nxd_udp_packet_info_extract+0x6a>
 8009f1e:	bf00      	nop

08009f20 <_nx_icmpv6_DAD_clear_NDCache_entry>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
void _nx_icmpv6_DAD_clear_NDCache_entry(NX_IP *ip_ptr, ULONG *ip_addr)
{
 8009f20:	b500      	push	{lr}
 8009f22:	b083      	sub	sp, #12

ND_CACHE_ENTRY *NDCacheEntry;

    /* Find the ND CACHE entry.  */
    if (_nx_nd_cache_find_entry(ip_ptr, ip_addr, &NDCacheEntry) == NX_SUCCESS)
 8009f24:	aa01      	add	r2, sp, #4
 8009f26:	f000 fc87 	bl	800a838 <_nx_nd_cache_find_entry>
 8009f2a:	b908      	cbnz	r0, 8009f30 <_nx_icmpv6_DAD_clear_NDCache_entry+0x10>
    {

        /*lint -e{644} suppress variable might not be initialized, since "NDCacheEntry" was initialized in _nx_nd_cache_find_entry. */
        NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INVALID;
 8009f2c:	9b01      	ldr	r3, [sp, #4]
 8009f2e:	7658      	strb	r0, [r3, #25]
    }

    return;
}
 8009f30:	b003      	add	sp, #12
 8009f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f36:	bf00      	nop

08009f38 <_nx_icmpv6_dest_table_add>:
/**************************************************************************/

UINT _nx_icmpv6_dest_table_add(NX_IP *ip_ptr, ULONG *destination_address,
                               NX_IPV6_DESTINATION_ENTRY **dest_entry_ptr, ULONG *next_hop,
                               ULONG path_mtu, ULONG mtu_timeout, NXD_IPV6_ADDRESS *ipv6_address)
{
 8009f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

UINT i, table_size;
UINT status;

    /* Pointers must not be NULL. */
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NX_NULL) && (next_hop != NX_NULL));
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	bf18      	it	ne
 8009f40:	2a00      	cmpne	r2, #0
{
 8009f42:	b082      	sub	sp, #8
 8009f44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NX_NULL) && (next_hop != NX_NULL));
 8009f46:	d001      	beq.n	8009f4c <_nx_icmpv6_dest_table_add+0x14>
 8009f48:	468a      	mov	sl, r1
 8009f4a:	b921      	cbnz	r1, 8009f56 <_nx_icmpv6_dest_table_add+0x1e>
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	f003 fd74 	bl	800da3c <_tx_thread_sleep>
 8009f54:	e7fa      	b.n	8009f4c <_nx_icmpv6_dest_table_add+0x14>

    /* Check if destination table already exist. */
    status = _nx_icmpv6_dest_table_find(ip_ptr, destination_address, dest_entry_ptr, path_mtu, mtu_timeout);
 8009f56:	9500      	str	r5, [sp, #0]
 8009f58:	461f      	mov	r7, r3
 8009f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	4691      	mov	r9, r2
 8009f60:	f000 f884 	bl	800a06c <_nx_icmpv6_dest_table_find>

    /* Check status.  */
    if (status == NX_SUCCESS)
 8009f64:	4605      	mov	r5, r0
 8009f66:	b348      	cbz	r0, 8009fbc <_nx_icmpv6_dest_table_add+0x84>
 8009f68:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;

    /* There is no invalid destination in table. */
    if (table_size == NX_IPV6_DESTINATION_TABLE_SIZE)
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d06e      	beq.n	800a04e <_nx_icmpv6_dest_table_add+0x116>
    {
        return(NX_NOT_SUCCESSFUL);
    }

    /* Initialize the pointer to the table location where we will update/add information. */
    *dest_entry_ptr = NX_NULL;
 8009f70:	2300      	movs	r3, #0
    /* Go through the table to find an empty slot. */
    for (i = 0; i < NX_IPV6_DESTINATION_TABLE_SIZE; i++)
    {

        /* Is this slot empty? */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8009f72:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    *dest_entry_ptr = NX_NULL;
 8009f76:	f8c9 3000 	str.w	r3, [r9]
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8009f7a:	b385      	cbz	r5, 8009fde <_nx_icmpv6_dest_table_add+0xa6>
 8009f7c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d06c      	beq.n	800a05e <_nx_icmpv6_dest_table_add+0x126>
 8009f84:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d066      	beq.n	800a05a <_nx_icmpv6_dest_table_add+0x122>
 8009f8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d068      	beq.n	800a066 <_nx_icmpv6_dest_table_add+0x12e>
 8009f94:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d062      	beq.n	800a062 <_nx_icmpv6_dest_table_add+0x12a>
 8009f9c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d058      	beq.n	800a056 <_nx_icmpv6_dest_table_add+0x11e>
 8009fa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d052      	beq.n	800a052 <_nx_icmpv6_dest_table_add+0x11a>
 8009fac:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 8009fb0:	b1a3      	cbz	r3, 8009fdc <_nx_icmpv6_dest_table_add+0xa4>
            break;
        }
    }

    /* Destination is not empty so i must be less than table size. */
    NX_ASSERT(i < NX_IPV6_DESTINATION_TABLE_SIZE);
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb6:	f003 fd41 	bl	800da3c <_tx_thread_sleep>
 8009fba:	e7fa      	b.n	8009fb2 <_nx_icmpv6_dest_table_add+0x7a>
        if (CHECK_IPV6_ADDRESSES_SAME(next_hop, (*dest_entry_ptr) -> nx_ipv6_destination_entry_next_hop))
 8009fbc:	f8d9 1000 	ldr.w	r1, [r9]
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	3114      	adds	r1, #20
 8009fc4:	f7f8 fcd2 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 8009fc8:	bba8      	cbnz	r0, 800a036 <_nx_icmpv6_dest_table_add+0xfe>
            ip_ptr -> nx_ipv6_destination_table_size--;
 8009fca:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
            (*dest_entry_ptr) -> nx_ipv6_destination_entry_valid = 0;
 8009fce:	f8d9 2000 	ldr.w	r2, [r9]
            ip_ptr -> nx_ipv6_destination_table_size--;
 8009fd2:	3b01      	subs	r3, #1
            (*dest_entry_ptr) -> nx_ipv6_destination_entry_valid = 0;
 8009fd4:	6010      	str	r0, [r2, #0]
            ip_ptr -> nx_ipv6_destination_table_size--;
 8009fd6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
 8009fda:	e7c7      	b.n	8009f6c <_nx_icmpv6_dest_table_add+0x34>
    for (i = 0; i < NX_IPV6_DESTINATION_TABLE_SIZE; i++)
 8009fdc:	2507      	movs	r5, #7
 8009fde:	2228      	movs	r2, #40	; 0x28
       matching entry, so we handle it separately.
     */

    /* Clear out any previous data from this slot. */
    /*lint -e{669} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    memset(&ip_ptr -> nx_ipv6_destination_table[i], 0, sizeof(NX_IPV6_DESTINATION_ENTRY));
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	fb02 f605 	mul.w	r6, r2, r5
 8009fe6:	f106 0890 	add.w	r8, r6, #144	; 0x90
 8009fea:	44a0      	add	r8, r4
 8009fec:	4640      	mov	r0, r8
 8009fee:	f004 fe00 	bl	800ebf2 <memset>

    /* Fill in the newly created table entry with the supplied and/or default information. */
    COPY_IPV6_ADDRESS(destination_address, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address);
 8009ff2:	f106 0194 	add.w	r1, r6, #148	; 0x94
 8009ff6:	4650      	mov	r0, sl
 8009ff8:	4421      	add	r1, r4
 8009ffa:	f7f8 fce1 	bl	80029c0 <COPY_IPV6_ADDRESS>

    /* Add next hop information to the entry. */
    COPY_IPV6_ADDRESS(next_hop, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop);
 8009ffe:	f106 01a4 	add.w	r1, r6, #164	; 0xa4

    /* Attempt to find the matching entry in the cache table. NetX Duo will need to know
       how to get a packet to the next hop, not just the destination! */
    status = _nx_nd_cache_find_entry(ip_ptr, next_hop, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 800a002:	36b4      	adds	r6, #180	; 0xb4
    COPY_IPV6_ADDRESS(next_hop, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop);
 800a004:	4638      	mov	r0, r7
 800a006:	4421      	add	r1, r4
    status = _nx_nd_cache_find_entry(ip_ptr, next_hop, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 800a008:	4426      	add	r6, r4
    COPY_IPV6_ADDRESS(next_hop, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop);
 800a00a:	f7f8 fcd9 	bl	80029c0 <COPY_IPV6_ADDRESS>
    status = _nx_nd_cache_find_entry(ip_ptr, next_hop, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 800a00e:	4639      	mov	r1, r7
 800a010:	4620      	mov	r0, r4
 800a012:	4632      	mov	r2, r6
 800a014:	f000 fc10 	bl	800a838 <_nx_nd_cache_find_entry>

    /* Did not find the matching entry. Try to add one. */
    if (status)
 800a018:	b988      	cbnz	r0, 800a03e <_nx_icmpv6_dest_table_add+0x106>
        }
    }


    /* Validate this entry to ensure it will not be overwritten with new entries. */
    ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 1;
 800a01a:	2228      	movs	r2, #40	; 0x28

    /* Update the count of destinations currently in the table. */
    ip_ptr -> nx_ipv6_destination_table_size++;
 800a01c:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
    ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 1;
 800a020:	fb02 4505 	mla	r5, r2, r5, r4
 800a024:	2201      	movs	r2, #1
 800a026:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    ip_ptr -> nx_ipv6_destination_table_size++;
 800a02a:	4413      	add	r3, r2
#endif  /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

    /* Set the table location pointer to the entry we just added/updated. */
    *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];

    return(NX_SUCCESS);
 800a02c:	2500      	movs	r5, #0
    ip_ptr -> nx_ipv6_destination_table_size++;
 800a02e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];
 800a032:	f8c9 8000 	str.w	r8, [r9]
}
 800a036:	4628      	mov	r0, r5
 800a038:	b002      	add	sp, #8
 800a03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        status = _nx_nd_cache_add_entry(ip_ptr, next_hop, ipv6_address, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 800a03e:	4633      	mov	r3, r6
 800a040:	4639      	mov	r1, r7
 800a042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a044:	4620      	mov	r0, r4
 800a046:	f000 facb 	bl	800a5e0 <_nx_nd_cache_add_entry>
        if (status)
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d0e5      	beq.n	800a01a <_nx_icmpv6_dest_table_add+0xe2>
        return(NX_NOT_SUCCESSFUL);
 800a04e:	2543      	movs	r5, #67	; 0x43
 800a050:	e7f1      	b.n	800a036 <_nx_icmpv6_dest_table_add+0xfe>
    for (i = 0; i < NX_IPV6_DESTINATION_TABLE_SIZE; i++)
 800a052:	2506      	movs	r5, #6
 800a054:	e7c3      	b.n	8009fde <_nx_icmpv6_dest_table_add+0xa6>
 800a056:	2505      	movs	r5, #5
 800a058:	e7c1      	b.n	8009fde <_nx_icmpv6_dest_table_add+0xa6>
 800a05a:	2502      	movs	r5, #2
 800a05c:	e7bf      	b.n	8009fde <_nx_icmpv6_dest_table_add+0xa6>
 800a05e:	2501      	movs	r5, #1
 800a060:	e7bd      	b.n	8009fde <_nx_icmpv6_dest_table_add+0xa6>
 800a062:	2504      	movs	r5, #4
 800a064:	e7bb      	b.n	8009fde <_nx_icmpv6_dest_table_add+0xa6>
 800a066:	2503      	movs	r5, #3
 800a068:	e7b9      	b.n	8009fde <_nx_icmpv6_dest_table_add+0xa6>
 800a06a:	bf00      	nop

0800a06c <_nx_icmpv6_dest_table_find>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_icmpv6_dest_table_find(NX_IP *ip_ptr, ULONG *destination_address, NX_IPV6_DESTINATION_ENTRY **dest_entry_ptr,
                                ULONG path_mtu, ULONG mtu_timeout)
{
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

UINT i, table_size;

    /* Destination address must be valid. */
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NULL));
 800a070:	2900      	cmp	r1, #0
 800a072:	d062      	beq.n	800a13a <_nx_icmpv6_dest_table_find+0xce>
 800a074:	fab2 f682 	clz	r6, r2
 800a078:	4690      	mov	r8, r2
 800a07a:	0976      	lsrs	r6, r6, #5
 800a07c:	2e00      	cmp	r6, #0
 800a07e:	d15c      	bne.n	800a13a <_nx_icmpv6_dest_table_find+0xce>

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 800a080:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
 800a084:	4604      	mov	r4, r0

    /* Check the destination num. */
    if (table_size == 0)
 800a086:	2d00      	cmp	r5, #0
 800a088:	d054      	beq.n	800a134 <_nx_icmpv6_dest_table_find+0xc8>
    /* Loop through all entries. */
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
    {

        /* Skip invalid entries. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a08a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800a08e:	460f      	mov	r7, r1
    *dest_entry_ptr = NX_NULL;
 800a090:	6016      	str	r6, [r2, #0]
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a092:	b13b      	cbz	r3, 800a0a4 <_nx_icmpv6_dest_table_find+0x38>

        /* Keep track of valid entries we have checked. */
        table_size--;

        /* Check whether or not the address is the same. */
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a094:	3094      	adds	r0, #148	; 0x94
        table_size--;
 800a096:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a098:	f7f8 fc68 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d170      	bne.n	800a182 <_nx_icmpv6_dest_table_find+0x116>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a0a0:	2d00      	cmp	r5, #0
 800a0a2:	d047      	beq.n	800a134 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a0a4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800a0a8:	b143      	cbz	r3, 800a0bc <_nx_icmpv6_dest_table_find+0x50>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
        table_size--;
 800a0b0:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a0b2:	f7f8 fc5b 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d161      	bne.n	800a17e <_nx_icmpv6_dest_table_find+0x112>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a0ba:	b3dd      	cbz	r5, 800a134 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a0bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a0c0:	b143      	cbz	r3, 800a0d4 <_nx_icmpv6_dest_table_find+0x68>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
        table_size--;
 800a0c8:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a0ca:	f7f8 fc4f 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d153      	bne.n	800a17a <_nx_icmpv6_dest_table_find+0x10e>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a0d2:	b37d      	cbz	r5, 800a134 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a0d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a0d8:	b143      	cbz	r3, 800a0ec <_nx_icmpv6_dest_table_find+0x80>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f504 7086 	add.w	r0, r4, #268	; 0x10c
        table_size--;
 800a0e0:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a0e2:	f7f8 fc43 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d145      	bne.n	800a176 <_nx_icmpv6_dest_table_find+0x10a>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a0ea:	b31d      	cbz	r5, 800a134 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a0ec:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800a0f0:	b13b      	cbz	r3, 800a102 <_nx_icmpv6_dest_table_find+0x96>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f504 709a 	add.w	r0, r4, #308	; 0x134
        table_size--;
 800a0f8:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a0fa:	f7f8 fc37 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800a0fe:	bbc0      	cbnz	r0, 800a172 <_nx_icmpv6_dest_table_find+0x106>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a100:	b1c5      	cbz	r5, 800a134 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a102:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 800a106:	b13b      	cbz	r3, 800a118 <_nx_icmpv6_dest_table_find+0xac>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a108:	4639      	mov	r1, r7
 800a10a:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
        table_size--;
 800a10e:	3d01      	subs	r5, #1
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a110:	f7f8 fc2c 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800a114:	bb58      	cbnz	r0, 800a16e <_nx_icmpv6_dest_table_find+0x102>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a116:	b16d      	cbz	r5, 800a134 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a118:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a11c:	b13b      	cbz	r3, 800a12e <_nx_icmpv6_dest_table_find+0xc2>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a11e:	4639      	mov	r1, r7
 800a120:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 800a124:	f7f8 fc22 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800a128:	b9d0      	cbnz	r0, 800a160 <_nx_icmpv6_dest_table_find+0xf4>
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a12a:	2d01      	cmp	r5, #1
 800a12c:	d002      	beq.n	800a134 <_nx_icmpv6_dest_table_find+0xc8>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a12e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 800a132:	b95b      	cbnz	r3, 800a14c <_nx_icmpv6_dest_table_find+0xe0>
        return(NX_NOT_SUCCESSFUL);
 800a134:	2043      	movs	r0, #67	; 0x43
            return(NX_SUCCESS);
        }
    }

    return(NX_NOT_SUCCESSFUL);
}
 800a136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NULL));
 800a13a:	f04f 30ff 	mov.w	r0, #4294967295
 800a13e:	f003 fc7d 	bl	800da3c <_tx_thread_sleep>
 800a142:	f04f 30ff 	mov.w	r0, #4294967295
 800a146:	f003 fc79 	bl	800da3c <_tx_thread_sleep>
 800a14a:	e7f6      	b.n	800a13a <_nx_icmpv6_dest_table_find+0xce>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a14c:	4639      	mov	r1, r7
 800a14e:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 800a152:	f7f8 fc0b 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
 800a156:	2800      	cmp	r0, #0
 800a158:	d0ec      	beq.n	800a134 <_nx_icmpv6_dest_table_find+0xc8>
 800a15a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800a15e:	e000      	b.n	800a162 <_nx_icmpv6_dest_table_find+0xf6>
 800a160:	23f0      	movs	r3, #240	; 0xf0
            *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];
 800a162:	3390      	adds	r3, #144	; 0x90
            return(NX_SUCCESS);
 800a164:	2000      	movs	r0, #0
            *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];
 800a166:	441c      	add	r4, r3
 800a168:	f8c8 4000 	str.w	r4, [r8]
            return(NX_SUCCESS);
 800a16c:	e7e3      	b.n	800a136 <_nx_icmpv6_dest_table_find+0xca>
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a16e:	23c8      	movs	r3, #200	; 0xc8
 800a170:	e7f7      	b.n	800a162 <_nx_icmpv6_dest_table_find+0xf6>
 800a172:	23a0      	movs	r3, #160	; 0xa0
 800a174:	e7f5      	b.n	800a162 <_nx_icmpv6_dest_table_find+0xf6>
 800a176:	2378      	movs	r3, #120	; 0x78
 800a178:	e7f3      	b.n	800a162 <_nx_icmpv6_dest_table_find+0xf6>
 800a17a:	2350      	movs	r3, #80	; 0x50
 800a17c:	e7f1      	b.n	800a162 <_nx_icmpv6_dest_table_find+0xf6>
 800a17e:	2328      	movs	r3, #40	; 0x28
 800a180:	e7ef      	b.n	800a162 <_nx_icmpv6_dest_table_find+0xf6>
 800a182:	4633      	mov	r3, r6
 800a184:	e7ed      	b.n	800a162 <_nx_icmpv6_dest_table_find+0xf6>
 800a186:	bf00      	nop

0800a188 <_nx_ipv6_fragment_process>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_fragment_process(struct NX_IP_DRIVER_STRUCT *driver_req_ptr, UINT mtu)
{
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       fragment.  There will be a unique packet pointer for each request, but
       otherwise all the other fields will remain constant.  */
    driver_request = *driver_req_ptr;

    /* Setup the IP pointer. */
    ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 800a18c:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
 800a190:	b095      	sub	sp, #84	; 0x54
    driver_request = *driver_req_ptr;
 800a192:	4605      	mov	r5, r0

    /* Byte swap packet_id */
    NX_CHANGE_ULONG_ENDIAN(packet_id);

    /* Pickup the source packet pointer.  */
    source_packet = driver_req_ptr -> nx_ip_driver_packet;
 800a194:	6907      	ldr	r7, [r0, #16]
    packet_id = ip_ptr -> nx_ip_packet_id++;
 800a196:	f8d8 9634 	ldr.w	r9, [r8, #1588]	; 0x634
{
 800a19a:	460c      	mov	r4, r1
    driver_request = *driver_req_ptr;
 800a19c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    source_packet -> nx_packet_last = source_packet;
    source_packet -> nx_packet_ip_header = source_packet -> nx_packet_prepend_ptr;
 800a1a0:	68be      	ldr	r6, [r7, #8]
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 800a1a2:	ea89 4e39 	eor.w	lr, r9, r9, ror #16
    packet_id = ip_ptr -> nx_ip_packet_id++;
 800a1a6:	f109 0a01 	add.w	sl, r9, #1
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 800a1aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    driver_request = *driver_req_ptr;
 800a1ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 800a1b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
    driver_request = *driver_req_ptr;
 800a1b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 800a1bc:	ea8e 2539 	eor.w	r5, lr, r9, ror #8
    packet_id = ip_ptr -> nx_ip_packet_id++;
 800a1c0:	f8c8 a634 	str.w	sl, [r8, #1588]	; 0x634
    pool_ptr = source_packet -> nx_packet_pool_owner;
 800a1c4:	f8d7 8000 	ldr.w	r8, [r7]
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 800a1c8:	9509      	str	r5, [sp, #36]	; 0x24
    NX_PACKET_DEBUG(__FILE__, __LINE__, source_packet);

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Compute checksum for upper layer protocol. */
    if (source_packet -> nx_packet_interface_capability_flag)
 800a1ca:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
    driver_request = *driver_req_ptr;
 800a1cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    source_packet -> nx_packet_last = source_packet;
 800a1d0:	61bf      	str	r7, [r7, #24]
    source_packet -> nx_packet_ip_header = source_packet -> nx_packet_prepend_ptr;
 800a1d2:	63be      	str	r6, [r7, #56]	; 0x38
    if (source_packet -> nx_packet_interface_capability_flag)
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	f040 80d1 	bne.w	800a37c <_nx_ipv6_fragment_process+0x1f4>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Find out the unfragmentable part. */
    fragmentable_ptr = source_packet -> nx_packet_prepend_ptr + sizeof(NX_IPV6_HEADER);
    last_header_location  = (source_packet -> nx_packet_prepend_ptr + 6);
    next_header = *last_header_location;
 800a1da:	79b3      	ldrb	r3, [r6, #6]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	9306      	str	r3, [sp, #24]
    fragmentable_ptr = source_packet -> nx_packet_prepend_ptr + sizeof(NX_IPV6_HEADER);
 800a1e0:	f106 0328 	add.w	r3, r6, #40	; 0x28

#endif

    /* Fragment Option header appears after Hop-by-hop and routing headers.  So we need
       to skip these headers if they are present. */
    while ((next_header == NX_PROTOCOL_NEXT_HEADER_HOP_BY_HOP) ||
 800a1e4:	b112      	cbz	r2, 800a1ec <_nx_ipv6_fragment_process+0x64>
 800a1e6:	2a2b      	cmp	r2, #43	; 0x2b
 800a1e8:	f040 80d4 	bne.w	800a394 <_nx_ipv6_fragment_process+0x20c>
        last_header_location = fragmentable_ptr;

        next_header = *fragmentable_ptr;

        /*lint -e{923} suppress cast between pointer and UINT.  */
        fragmentable_ptr = NX_UCHAR_POINTER_ADD(fragmentable_ptr, ((hdr_ext_len + 1) << 3));
 800a1ec:	785a      	ldrb	r2, [r3, #1]
        next_header = *fragmentable_ptr;
 800a1ee:	7819      	ldrb	r1, [r3, #0]
        fragmentable_ptr = NX_UCHAR_POINTER_ADD(fragmentable_ptr, ((hdr_ext_len + 1) << 3));
 800a1f0:	3201      	adds	r2, #1
 800a1f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    while ((next_header == NX_PROTOCOL_NEXT_HEADER_HOP_BY_HOP) ||
 800a1f6:	b109      	cbz	r1, 800a1fc <_nx_ipv6_fragment_process+0x74>
 800a1f8:	292b      	cmp	r1, #43	; 0x2b
 800a1fa:	d101      	bne.n	800a200 <_nx_ipv6_fragment_process+0x78>
        fragmentable_ptr = NX_UCHAR_POINTER_ADD(fragmentable_ptr, ((hdr_ext_len + 1) << 3));
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	e7f5      	b.n	800a1ec <_nx_ipv6_fragment_process+0x64>
 800a200:	9106      	str	r1, [sp, #24]
 800a202:	4611      	mov	r1, r2
 800a204:	9203      	str	r2, [sp, #12]
    }

    /* If hdr_ext_len == 0, there are no optional headers in the unfragmentable region. */
    *last_header_location = NX_PROTOCOL_NEXT_HEADER_FRAGMENT;
 800a206:	222c      	movs	r2, #44	; 0x2c
 800a208:	701a      	strb	r2, [r3, #0]

    /* Change the very last "next_header" to
       compute the unfragmentable size which includes MAC header, IPv6 header,
       and any unfragmentable header, but not the fragment header option. */
    /*lint -e{923} suppress cast between pointer and UINT.  */
    unfragmentable_size = (UINT)((ALIGN_TYPE)fragmentable_ptr - (ALIGN_TYPE)source_packet -> nx_packet_prepend_ptr);
 800a20a:	68ba      	ldr	r2, [r7, #8]

    /* Compute the fragmentable size. */
    packet_length = (UINT)(source_packet -> nx_packet_length - unfragmentable_size);
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    unfragmentable_size = (UINT)((ALIGN_TYPE)fragmentable_ptr - (ALIGN_TYPE)source_packet -> nx_packet_prepend_ptr);
 800a20e:	1a8a      	subs	r2, r1, r2

    /* Now fragmentable_ptr points to the begining of fragmentable part of 'remaining_pkt' */
    /* Also packet_prepend_ptr points to the data (fragmentable) area.  */

    /* The fragmentable pointer starts from the first packet.*/
    while (packet_length)
 800a210:	ebb3 0902 	subs.w	r9, r3, r2
    unfragmentable_size = (UINT)((ALIGN_TYPE)fragmentable_ptr - (ALIGN_TYPE)source_packet -> nx_packet_prepend_ptr);
 800a214:	9202      	str	r2, [sp, #8]
    while (packet_length)
 800a216:	f000 809d 	beq.w	800a354 <_nx_ipv6_fragment_process+0x1cc>
 800a21a:	1aa3      	subs	r3, r4, r2
 800a21c:	f64f 72f8 	movw	r2, #65528	; 0xfff8
INT                             last_fragment = 0;
 800a220:	2100      	movs	r1, #0
 800a222:	f104 0010 	add.w	r0, r4, #16
 800a226:	4013      	ands	r3, r2

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, new_packet);

            /*lint -e{644} suppress variable might not be initialized, since "new_packet" was initialized in _nx_packet_allocate. */
            new_packet -> nx_packet_ip_version = NX_IP_VERSION_V6;
 800a228:	f04f 0b06 	mov.w	fp, #6
INT                             last_fragment = 0;
 800a22c:	9105      	str	r1, [sp, #20]
 800a22e:	3b08      	subs	r3, #8
 800a230:	9007      	str	r0, [sp, #28]
UINT                            fragment_offset = 0;
 800a232:	9101      	str	r1, [sp, #4]
 800a234:	9308      	str	r3, [sp, #32]
        if (fragment_size >= packet_length)
 800a236:	9b08      	ldr	r3, [sp, #32]
 800a238:	4599      	cmp	r9, r3
 800a23a:	f240 8091 	bls.w	800a360 <_nx_ipv6_fragment_process+0x1d8>
 800a23e:	eba9 0203 	sub.w	r2, r9, r3
 800a242:	4699      	mov	r9, r3
 800a244:	9204      	str	r2, [sp, #16]
        nx_packet_size = (UINT)((pool_ptr -> nx_packet_pool_payload_size) & 0xFFFC);
 800a246:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800a24a:	f64f 75fc 	movw	r5, #65532	; 0xfffc
        remaining_bytes = fragment_size + unfragmentable_size + (UINT)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION) + NX_PHYSICAL_HEADER;
 800a24e:	9a02      	ldr	r2, [sp, #8]
        nx_packet_size = (UINT)((pool_ptr -> nx_packet_pool_payload_size) & 0xFFFC);
 800a250:	2400      	movs	r4, #0
 800a252:	401d      	ands	r5, r3
 800a254:	9b07      	ldr	r3, [sp, #28]
        remaining_bytes = fragment_size + unfragmentable_size + (UINT)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION) + NX_PHYSICAL_HEADER;
 800a256:	eb09 0a02 	add.w	sl, r9, r2
 800a25a:	429d      	cmp	r5, r3
 800a25c:	f10a 0618 	add.w	r6, sl, #24
 800a260:	bf28      	it	cs
 800a262:	461d      	movcs	r5, r3
 800a264:	e007      	b.n	800a276 <_nx_ipv6_fragment_process+0xee>
                /* first_fragment -> nx_packet_length = fragment_size + unfragmentable_size. */
                /* May need to configure additional header information. */
            }
            else
            {
                first_fragment -> nx_packet_last -> nx_packet_next = new_packet;
 800a266:	69a2      	ldr	r2, [r4, #24]
            /* Establish the "usable" size of the packet.
               The actual copy routine uses this information to figure out how many
               bytes to transer to the fragmented packets.*/

            /* The true packet size is set in the first packet. */
            if (nx_packet_size > remaining_bytes)
 800a268:	42ae      	cmp	r6, r5
                first_fragment -> nx_packet_last -> nx_packet_next = new_packet;
 800a26a:	6053      	str	r3, [r2, #4]
                first_fragment -> nx_packet_last = new_packet;
 800a26c:	61a3      	str	r3, [r4, #24]
            if (nx_packet_size > remaining_bytes)
 800a26e:	d313      	bcc.n	800a298 <_nx_ipv6_fragment_process+0x110>
            else
            {
                new_packet -> nx_packet_length = nx_packet_size;
                remaining_bytes -= nx_packet_size;
            }
        } while (remaining_bytes);
 800a270:	1b76      	subs	r6, r6, r5
                new_packet -> nx_packet_length = nx_packet_size;
 800a272:	625d      	str	r5, [r3, #36]	; 0x24
        } while (remaining_bytes);
 800a274:	d011      	beq.n	800a29a <_nx_ipv6_fragment_process+0x112>
            if (_nx_packet_allocate(pool_ptr, &new_packet,
 800a276:	2300      	movs	r3, #0
 800a278:	a90b      	add	r1, sp, #44	; 0x2c
 800a27a:	4640      	mov	r0, r8
 800a27c:	461a      	mov	r2, r3
 800a27e:	f7f8 fc4d 	bl	8002b1c <_nx_packet_allocate>
 800a282:	2800      	cmp	r0, #0
 800a284:	d17e      	bne.n	800a384 <_nx_ipv6_fragment_process+0x1fc>
            new_packet -> nx_packet_ip_version = NX_IP_VERSION_V6;
 800a286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a288:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
            if (first_fragment == NX_NULL)
 800a28c:	2c00      	cmp	r4, #0
 800a28e:	d1ea      	bne.n	800a266 <_nx_ipv6_fragment_process+0xde>
            if (nx_packet_size > remaining_bytes)
 800a290:	42ae      	cmp	r6, r5
                first_fragment -> nx_packet_last = new_packet;
 800a292:	619b      	str	r3, [r3, #24]
 800a294:	461c      	mov	r4, r3
            if (nx_packet_size > remaining_bytes)
 800a296:	d2eb      	bcs.n	800a270 <_nx_ipv6_fragment_process+0xe8>
                new_packet -> nx_packet_length = remaining_bytes;
 800a298:	625e      	str	r6, [r3, #36]	; 0x24
        /* First step:  copy the unfragmentable part. */
        /* Save the state from last iteration. */
        previous_packet = source_packet -> nx_packet_last;

        source_packet -> nx_packet_last = source_packet;
        source_packet -> nx_packet_prepend_ptr = source_packet -> nx_packet_ip_header;
 800a29a:	6bb8      	ldr	r0, [r7, #56]	; 0x38

        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;

        /* For the first packet, the prepend pointer is already at the begining of the IP header. */
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 800a29c:	4621      	mov	r1, r4
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;
 800a29e:	68e3      	ldr	r3, [r4, #12]
        source_packet -> nx_packet_prepend_ptr = source_packet -> nx_packet_ip_header;
 800a2a0:	60b8      	str	r0, [r7, #8]
        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
 800a2a2:	68a0      	ldr	r0, [r4, #8]
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;
 800a2a4:	3310      	adds	r3, #16
        previous_packet = source_packet -> nx_packet_last;
 800a2a6:	69bd      	ldr	r5, [r7, #24]
        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
 800a2a8:	3010      	adds	r0, #16
        source_packet -> nx_packet_last = source_packet;
 800a2aa:	61bf      	str	r7, [r7, #24]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 800a2ac:	9a02      	ldr	r2, [sp, #8]
        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
 800a2ae:	60a0      	str	r0, [r4, #8]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 800a2b0:	4638      	mov	r0, r7
        first_fragment -> nx_packet_last = first_fragment;
 800a2b2:	61a4      	str	r4, [r4, #24]
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;
 800a2b4:	60e3      	str	r3, [r4, #12]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 800a2b6:	f000 f8a9 	bl	800a40c <_nx_ipv6_packet_copy>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d155      	bne.n	800a36a <_nx_ipv6_fragment_process+0x1e2>
        /* Fill in the fragment header area.  Be careful here: we assume the unfragmentable part does not
           span over multiple packets. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)first_fragment -> nx_packet_last -> nx_packet_append_ptr;
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800a2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800a2c0:	68e2      	ldr	r2, [r4, #12]
        fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)first_fragment -> nx_packet_last -> nx_packet_append_ptr;
 800a2c2:	69a1      	ldr	r1, [r4, #24]
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800a2c4:	3308      	adds	r3, #8
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800a2c6:	3208      	adds	r2, #8
 800a2c8:	f8bd 6004 	ldrh.w	r6, [sp, #4]
        fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)first_fragment -> nx_packet_last -> nx_packet_append_ptr;
 800a2cc:	68c9      	ldr	r1, [r1, #12]
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800a2ce:	6263      	str	r3, [r4, #36]	; 0x24

        fragment_option -> nx_ipv6_header_fragment_option_reserved = 0;
        fragment_option -> nx_ipv6_header_fragment_option_next_header = next_header;
 800a2d0:	9b06      	ldr	r3, [sp, #24]
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800a2d2:	60e2      	str	r2, [r4, #12]
        fragment_option -> nx_ipv6_header_fragment_option_next_header = next_header;
 800a2d4:	700b      	strb	r3, [r1, #0]

        if (!last_fragment)
 800a2d6:	9b05      	ldr	r3, [sp, #20]
        fragment_option -> nx_ipv6_header_fragment_option_reserved = 0;
 800a2d8:	7048      	strb	r0, [r1, #1]
        if (!last_fragment)
 800a2da:	b90b      	cbnz	r3, 800a2e0 <_nx_ipv6_fragment_process+0x158>
        {
            fragment_option -> nx_ipv6_header_fragment_option_offset_flag = (USHORT)(fragment_offset + 1);
 800a2dc:	3601      	adds	r6, #1
 800a2de:	b2b6      	uxth	r6, r6
        }

        /* Convert to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);

        fragment_option -> nx_ipv6_header_fragment_option_packet_id = packet_id;
 800a2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 800a2e2:	ba76      	rev16	r6, r6
        /* Restore the nx_packet_last and the prepend pointer within the last packet. */
        source_packet -> nx_packet_last = previous_packet;
        source_packet -> nx_packet_last -> nx_packet_prepend_ptr = fragmentable_ptr;

        /* Copy the rest of the frame. */
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, fragment_size))
 800a2e4:	464a      	mov	r2, r9
 800a2e6:	4638      	mov	r0, r7
        fragment_option -> nx_ipv6_header_fragment_option_packet_id = packet_id;
 800a2e8:	604b      	str	r3, [r1, #4]
        source_packet -> nx_packet_last -> nx_packet_prepend_ptr = fragmentable_ptr;
 800a2ea:	9b03      	ldr	r3, [sp, #12]
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 800a2ec:	804e      	strh	r6, [r1, #2]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, fragment_size))
 800a2ee:	4621      	mov	r1, r4
        source_packet -> nx_packet_last = previous_packet;
 800a2f0:	61bd      	str	r5, [r7, #24]
        source_packet -> nx_packet_last -> nx_packet_prepend_ptr = fragmentable_ptr;
 800a2f2:	60ab      	str	r3, [r5, #8]
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, fragment_size))
 800a2f4:	f000 f88a 	bl	800a40c <_nx_ipv6_packet_copy>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d136      	bne.n	800a36a <_nx_ipv6_fragment_process+0x1e2>
        /*
           Set up the IP frame length.  first_fragment -> nx_packet_prepend_ptr points to the
           beginning of the IPv6 header.
         */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header = (NX_IPV6_HEADER *)first_fragment -> nx_packet_prepend_ptr;
 800a2fc:	68a5      	ldr	r5, [r4, #8]
        /* Convert to host byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);

        val = val & 0x0000FFFF;

        word_1 = (ULONG)(((fragment_size + unfragmentable_size - sizeof(NX_IPV6_HEADER)) + sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION)) << 16);
 800a2fe:	f1aa 0120 	sub.w	r1, sl, #32

        ipv6_header -> nx_ip_header_word_1 = word_1;

        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;

        fragment_offset += fragment_size;
 800a302:	9b01      	ldr	r3, [sp, #4]

        /* This fragment is ready to be transmitted. */
        /* Send the packet to the associated driver for output.  */
        first_fragment -> nx_packet_length = unfragmentable_size + fragment_size;
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800a304:	f10a 0608 	add.w	r6, sl, #8
        val = ipv6_header -> nx_ip_header_word_1;
 800a308:	686a      	ldr	r2, [r5, #4]
#endif /* !NX_DISABLE_IP_INFO */

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, source_packet);

        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 800a30a:	a80c      	add	r0, sp, #48	; 0x30
        fragment_offset += fragment_size;
 800a30c:	444b      	add	r3, r9
    while (packet_length)
 800a30e:	f8dd 9010 	ldr.w	r9, [sp, #16]
        fragment_offset += fragment_size;
 800a312:	9301      	str	r3, [sp, #4]
        NX_CHANGE_ULONG_ENDIAN(val);
 800a314:	ea82 4332 	eor.w	r3, r2, r2, ror #16
 800a318:	0a1b      	lsrs	r3, r3, #8
 800a31a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800a31e:	ea83 2332 	eor.w	r3, r3, r2, ror #8
        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 800a322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        val = val & 0x0000FFFF;
 800a324:	b29b      	uxth	r3, r3
        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 800a326:	6852      	ldr	r2, [r2, #4]
        word_1 = val | word_1;
 800a328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;
 800a32c:	69b9      	ldr	r1, [r7, #24]
        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 800a32e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
        NX_CHANGE_ULONG_ENDIAN(word_1);
 800a330:	ea83 4c33 	eor.w	ip, r3, r3, ror #16
        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;
 800a334:	6889      	ldr	r1, [r1, #8]
        NX_CHANGE_ULONG_ENDIAN(word_1);
 800a336:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;
 800a33a:	9103      	str	r1, [sp, #12]
        NX_CHANGE_ULONG_ENDIAN(word_1);
 800a33c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 800a340:	ea8c 2333 	eor.w	r3, ip, r3, ror #8
        ipv6_header -> nx_ip_header_word_1 = word_1;
 800a344:	606b      	str	r3, [r5, #4]
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800a346:	6266      	str	r6, [r4, #36]	; 0x24
        driver_request.nx_ip_driver_packet =   first_fragment;
 800a348:	9410      	str	r4, [sp, #64]	; 0x40
        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 800a34a:	4790      	blx	r2
    while (packet_length)
 800a34c:	f1b9 0f00 	cmp.w	r9, #0
 800a350:	f47f af71 	bne.w	800a236 <_nx_ipv6_fragment_process+0xae>

        first_fragment = NX_NULL;
    }

    /* Release the original packet. */
    _nx_packet_transmit_release(source_packet);
 800a354:	4638      	mov	r0, r7
 800a356:	f7f8 fd5f 	bl	8002e18 <_nx_packet_transmit_release>
    {
        _nx_packet_release(first_fragment);
    }

    return;
}
 800a35a:	b015      	add	sp, #84	; 0x54
 800a35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            last_fragment = 1;
 800a360:	2200      	movs	r2, #0
 800a362:	2301      	movs	r3, #1
 800a364:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a368:	e76d      	b.n	800a246 <_nx_ipv6_fragment_process+0xbe>
    _nx_packet_transmit_release(source_packet);
 800a36a:	4638      	mov	r0, r7
 800a36c:	f7f8 fd54 	bl	8002e18 <_nx_packet_transmit_release>
        _nx_packet_release(first_fragment);
 800a370:	4620      	mov	r0, r4
 800a372:	f7f8 fceb 	bl	8002d4c <_nx_packet_release>
}
 800a376:	b015      	add	sp, #84	; 0x54
 800a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_ip_packet_checksum_compute(source_packet);
 800a37c:	f7fc fdb0 	bl	8006ee0 <_nx_ip_packet_checksum_compute>
 800a380:	68be      	ldr	r6, [r7, #8]
 800a382:	e72a      	b.n	800a1da <_nx_ipv6_fragment_process+0x52>
    _nx_packet_transmit_release(source_packet);
 800a384:	4638      	mov	r0, r7
 800a386:	f7f8 fd47 	bl	8002e18 <_nx_packet_transmit_release>
    if (first_fragment)
 800a38a:	2c00      	cmp	r4, #0
 800a38c:	d1f0      	bne.n	800a370 <_nx_ipv6_fragment_process+0x1e8>
}
 800a38e:	b015      	add	sp, #84	; 0x54
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragmentable_ptr = source_packet -> nx_packet_prepend_ptr + sizeof(NX_IPV6_HEADER);
 800a394:	9303      	str	r3, [sp, #12]
    last_header_location  = (source_packet -> nx_packet_prepend_ptr + 6);
 800a396:	1db3      	adds	r3, r6, #6
 800a398:	9903      	ldr	r1, [sp, #12]
 800a39a:	e734      	b.n	800a206 <_nx_ipv6_fragment_process+0x7e>

0800a39c <_nx_ipv6_multicast_leave>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_multicast_leave(NX_IP *ip_ptr, ULONG *multicast_addr, NX_INTERFACE *nx_interface)
{
 800a39c:	b570      	push	{r4, r5, r6, lr}
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
    driver_request.nx_ip_driver_interface = nx_interface;

    /* Obtain the IP mutex so we can search the multicast join list.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a39e:	f200 643c 	addw	r4, r0, #1596	; 0x63c
{
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	4615      	mov	r5, r2
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 800a3a6:	68ce      	ldr	r6, [r1, #12]
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_LEAVE;
 800a3a8:	2209      	movs	r2, #9
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 800a3aa:	f243 3333 	movw	r3, #13107	; 0x3333
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a3ae:	f04f 31ff 	mov.w	r1, #4294967295
    driver_request.nx_ip_driver_ptr = ip_ptr;
 800a3b2:	9006      	str	r0, [sp, #24]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a3b4:	4620      	mov	r0, r4
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_LEAVE;
 800a3b6:	9200      	str	r2, [sp, #0]
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 800a3b8:	9302      	str	r3, [sp, #8]
    driver_request.nx_ip_driver_interface = nx_interface;
 800a3ba:	9507      	str	r5, [sp, #28]
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 800a3bc:	9603      	str	r6, [sp, #12]
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a3be:	f002 ffe7 	bl	800d390 <_tx_mutex_get>


    /* Call the device driver with the driver request. */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800a3c2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a3c4:	4668      	mov	r0, sp
 800a3c6:	4798      	blx	r3

    /* Release the protection over the IP instance.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f003 f8cb 	bl	800d564 <_tx_mutex_put>

    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
}
 800a3ce:	9801      	ldr	r0, [sp, #4]
 800a3d0:	b008      	add	sp, #32
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}

0800a3d4 <_nx_ipv6_option_error>:
/*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
NX_IPV6_HEADER *ip_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;

    /* Top 2 bits of the option type indicate how we shall process this option
       in case of an error. */
    switch (option_type >> 6)
 800a3d4:	0992      	lsrs	r2, r2, #6
 800a3d6:	2a02      	cmp	r2, #2
 800a3d8:	d00d      	beq.n	800a3f6 <_nx_ipv6_option_error+0x22>
 800a3da:	2a03      	cmp	r2, #3
 800a3dc:	d004      	beq.n	800a3e8 <_nx_ipv6_option_error+0x14>
UINT rv = NX_SUCCESS;
 800a3de:	2a01      	cmp	r2, #1
 800a3e0:	bf0c      	ite	eq
 800a3e2:	2054      	moveq	r0, #84	; 0x54
 800a3e4:	2000      	movne	r0, #0
 800a3e6:	4770      	bx	lr
    {

    case 3: /* Discard the packet and send ICMP Parameter Problem to unicast address */
        if ((ip_header_ptr -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800a3e8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800a3ea:	6992      	ldr	r2, [r2, #24]
 800a3ec:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a3f0:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a3f4:	d006      	beq.n	800a404 <_nx_ipv6_option_error+0x30>
    /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
    case 2: /* Discard the packet and send ICMP Parameter Problem */

#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE

        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 2, (ULONG)(offset + sizeof(NX_IPV6_HEADER)));
 800a3f6:	4a04      	ldr	r2, [pc, #16]	; (800a408 <_nx_ipv6_option_error+0x34>)
{
 800a3f8:	b508      	push	{r3, lr}
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 2, (ULONG)(offset + sizeof(NX_IPV6_HEADER)));
 800a3fa:	3328      	adds	r3, #40	; 0x28
 800a3fc:	f7fb fc90 	bl	8005d20 <_nx_icmpv6_send_error_message>

    /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
    case 1: /* Discard the packet */

        /* Error status - Drop the packet */
        rv = NX_OPTION_HEADER_ERROR;
 800a400:	2054      	movs	r0, #84	; 0x54
    default:
        break;
    }

    return(rv);
}
 800a402:	bd08      	pop	{r3, pc}
            rv = NX_OPTION_HEADER_ERROR;
 800a404:	2054      	movs	r0, #84	; 0x54
}
 800a406:	4770      	bx	lr
 800a408:	04020000 	.word	0x04020000

0800a40c <_nx_ipv6_packet_copy>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_packet_copy(NX_PACKET *source_pkt_head, NX_PACKET *dest_pkt_head, UINT size)
{
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	b083      	sub	sp, #12

    /* Number of bytes to be copied. */
    bytes_remaining = size;

    /* Obtain points to the source and destination packets. */
    source_pkt = source_pkt_head -> nx_packet_last;
 800a412:	f8d0 8018 	ldr.w	r8, [r0, #24]
    dest_pkt = dest_pkt_head -> nx_packet_last;
 800a416:	f8d1 e018 	ldr.w	lr, [r1, #24]
{
 800a41a:	e9cd 0100 	strd	r0, r1, [sp]

    while (bytes_remaining > 0)
 800a41e:	2a00      	cmp	r2, #0
 800a420:	f000 80d6 	beq.w	800a5d0 <_nx_ipv6_packet_copy+0x1c4>
    {

        /* Make sure source or destination packets are valid. */
        if ((source_pkt == NX_NULL) || (dest_pkt == NX_NULL))
 800a424:	f1be 0f00 	cmp.w	lr, #0
 800a428:	d07e      	beq.n	800a528 <_nx_ipv6_packet_copy+0x11c>
 800a42a:	f1b8 0f00 	cmp.w	r8, #0
 800a42e:	d07b      	beq.n	800a528 <_nx_ipv6_packet_copy+0x11c>

        flag = PACKET_COPY_DONE;

        /* Check if the source packet is running out of data. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (bytes_to_copy > (UINT)(source_pkt -> nx_packet_append_ptr - source_pkt -> nx_packet_prepend_ptr))
 800a430:	e9d8 1602 	ldrd	r1, r6, [r8, #8]
 800a434:	1a76      	subs	r6, r6, r1
 800a436:	4296      	cmp	r6, r2
 800a438:	f0c0 80c5 	bcc.w	800a5c6 <_nx_ipv6_packet_copy+0x1ba>
 800a43c:	4616      	mov	r6, r2
 800a43e:	f04f 0904 	mov.w	r9, #4
 800a442:	f04f 0a00 	mov.w	sl, #0
            flag = PACKET_MORE_TO_COPY;
        }

        /* Check if the destination packet is running ouf of space.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (bytes_to_copy > (UINT)(dest_pkt -> nx_packet_data_end - dest_pkt -> nx_packet_append_ptr))
 800a446:	f8de 5014 	ldr.w	r5, [lr, #20]
 800a44a:	f8de 300c 	ldr.w	r3, [lr, #12]

        /* Adjust packet pointers. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        dest_ptr = (ULONG *)dest_pkt -> nx_packet_append_ptr;
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 800a44e:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
        if (bytes_to_copy > (UINT)(dest_pkt -> nx_packet_data_end - dest_pkt -> nx_packet_append_ptr))
 800a452:	1aec      	subs	r4, r5, r3
 800a454:	42b4      	cmp	r4, r6
 800a456:	f0c0 80a6 	bcc.w	800a5a6 <_nx_ipv6_packet_copy+0x19a>
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
 800a45a:	199d      	adds	r5, r3, r6

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        source_ptr = (ULONG *)source_pkt -> nx_packet_prepend_ptr;
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 800a45c:	198c      	adds	r4, r1, r6
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 800a45e:	1b80      	subs	r0, r0, r6
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
 800a460:	f8ce 500c 	str.w	r5, [lr, #12]
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 800a464:	f8ce 0024 	str.w	r0, [lr, #36]	; 0x24
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 800a468:	f8c8 4008 	str.w	r4, [r8, #8]

        while (bytes_to_copy)
 800a46c:	2e00      	cmp	r6, #0
 800a46e:	f000 80b5 	beq.w	800a5dc <_nx_ipv6_packet_copy+0x1d0>
 800a472:	f04f 0b00 	mov.w	fp, #0
        {
            /* Loop unrolling: copy 32 bytes in one iteration. */
            switch (bytes_to_copy >> 2)
 800a476:	08b7      	lsrs	r7, r6, #2
 800a478:	1d08      	adds	r0, r1, #4
 800a47a:	1d1c      	adds	r4, r3, #4
 800a47c:	680d      	ldr	r5, [r1, #0]
 800a47e:	3f01      	subs	r7, #1
 800a480:	2f06      	cmp	r7, #6
 800a482:	d805      	bhi.n	800a490 <_nx_ipv6_packet_copy+0x84>
 800a484:	e8df f007 	tbb	[pc, r7]
 800a488:	1c546072 	.word	0x1c546072
 800a48c:	1459      	.short	0x1459
 800a48e:	0e          	.byte	0x0e
 800a48f:	00          	.byte	0x00
            {
            default:
                *dest_ptr++ = *source_ptr++;
 800a490:	461f      	mov	r7, r3
 800a492:	f101 0c08 	add.w	ip, r1, #8
 800a496:	4623      	mov	r3, r4
 800a498:	f847 5b08 	str.w	r5, [r7], #8
 800a49c:	463c      	mov	r4, r7
 800a49e:	684d      	ldr	r5, [r1, #4]
 800a4a0:	4601      	mov	r1, r0
 800a4a2:	4660      	mov	r0, ip
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 7:
                *dest_ptr++ = *source_ptr++;
 800a4a4:	601d      	str	r5, [r3, #0]
 800a4a6:	4623      	mov	r3, r4
 800a4a8:	684d      	ldr	r5, [r1, #4]
 800a4aa:	3404      	adds	r4, #4
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	3004      	adds	r0, #4
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 6:
                *dest_ptr++ = *source_ptr++;
 800a4b0:	601d      	str	r5, [r3, #0]
 800a4b2:	1d23      	adds	r3, r4, #4
 800a4b4:	684d      	ldr	r5, [r1, #4]
 800a4b6:	1d01      	adds	r1, r0, #4
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 5:
                *dest_ptr++ = *source_ptr++;
 800a4b8:	6025      	str	r5, [r4, #0]
 800a4ba:	1d1c      	adds	r4, r3, #4
 800a4bc:	6845      	ldr	r5, [r0, #4]
 800a4be:	1d08      	adds	r0, r1, #4
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 4:
                *dest_ptr++ = *source_ptr++;
 800a4c0:	601d      	str	r5, [r3, #0]
 800a4c2:	1d27      	adds	r7, r4, #4
 800a4c4:	f100 0c04 	add.w	ip, r0, #4
 800a4c8:	684d      	ldr	r5, [r1, #4]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 3:
                *dest_ptr++ = *source_ptr++;
 800a4ca:	6025      	str	r5, [r4, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 2:
                *dest_ptr++ = *source_ptr++;
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	6840      	ldr	r0, [r0, #4]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 1:
                *dest_ptr++ = *source_ptr++;
            }
            if (bytes_to_copy >= 32)
 800a4d0:	2e1f      	cmp	r6, #31
                *dest_ptr++ = *source_ptr++;
 800a4d2:	f10c 0108 	add.w	r1, ip, #8
 800a4d6:	f107 0404 	add.w	r4, r7, #4
                *dest_ptr++ = *source_ptr++;
 800a4da:	f843 0b08 	str.w	r0, [r3], #8
 800a4de:	f10c 0004 	add.w	r0, ip, #4
                *dest_ptr++ = *source_ptr++;
 800a4e2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800a4e6:	607d      	str	r5, [r7, #4]
            if (bytes_to_copy >= 32)
 800a4e8:	d936      	bls.n	800a558 <_nx_ipv6_packet_copy+0x14c>
        while (bytes_to_copy)
 800a4ea:	3e20      	subs	r6, #32
            {
                bytes_to_copy -= 32;
                bytes_remaining -= 32;
 800a4ec:	f1a2 0220 	sub.w	r2, r2, #32
        while (bytes_to_copy)
 800a4f0:	d1c1      	bne.n	800a476 <_nx_ipv6_packet_copy+0x6a>
                bytes_to_copy = 0;
            }
        }

        /* Check if the flag has been set to more data to copy. */
        if (flag & PACKET_MORE_TO_COPY)
 800a4f2:	f1ba 0f00 	cmp.w	sl, #0
 800a4f6:	d004      	beq.n	800a502 <_nx_ipv6_packet_copy+0xf6>
        {
            source_pkt_head -> nx_packet_last = source_pkt -> nx_packet_next;
 800a4f8:	f8d8 8004 	ldr.w	r8, [r8, #4]
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	f8c3 8018 	str.w	r8, [r3, #24]
            source_pkt = source_pkt_head -> nx_packet_last;
        }

        /* Check if we need to chain another buffer to the packet chain for more data copy. */
        if (flag & PACKET_ADD_BUFFER)
 800a502:	f1bb 0f00 	cmp.w	fp, #0
 800a506:	d004      	beq.n	800a512 <_nx_ipv6_packet_copy+0x106>
        {
            dest_pkt_head -> nx_packet_last = dest_pkt -> nx_packet_next;
 800a508:	f8de e004 	ldr.w	lr, [lr, #4]
 800a50c:	9b01      	ldr	r3, [sp, #4]
 800a50e:	f8c3 e018 	str.w	lr, [r3, #24]
            dest_pkt = dest_pkt -> nx_packet_next;
        }

        /* Check if we are done. */
        if (flag & PACKET_COPY_DONE)
 800a512:	f1b9 0f00 	cmp.w	r9, #0
 800a516:	d15b      	bne.n	800a5d0 <_nx_ipv6_packet_copy+0x1c4>
    while (bytes_remaining > 0)
 800a518:	2a00      	cmp	r2, #0
 800a51a:	d059      	beq.n	800a5d0 <_nx_ipv6_packet_copy+0x1c4>
        if ((source_pkt == NX_NULL) || (dest_pkt == NX_NULL))
 800a51c:	f1b8 0f00 	cmp.w	r8, #0
 800a520:	d002      	beq.n	800a528 <_nx_ipv6_packet_copy+0x11c>
 800a522:	f1be 0f00 	cmp.w	lr, #0
 800a526:	d183      	bne.n	800a430 <_nx_ipv6_packet_copy+0x24>
            return(NX_NOT_SUCCESSFUL);
 800a528:	2043      	movs	r0, #67	; 0x43
            break;
        }
    }

    return(NX_SUCCESS);
}
 800a52a:	b003      	add	sp, #12
 800a52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            switch (bytes_to_copy >> 2)
 800a530:	4627      	mov	r7, r4
 800a532:	4684      	mov	ip, r0
 800a534:	461c      	mov	r4, r3
 800a536:	4608      	mov	r0, r1
 800a538:	e7c7      	b.n	800a4ca <_nx_ipv6_packet_copy+0xbe>
 800a53a:	46a4      	mov	ip, r4
 800a53c:	4607      	mov	r7, r0
 800a53e:	461c      	mov	r4, r3
 800a540:	4608      	mov	r0, r1
 800a542:	4663      	mov	r3, ip
 800a544:	4639      	mov	r1, r7
 800a546:	e7b7      	b.n	800a4b8 <_nx_ipv6_packet_copy+0xac>
                *dest_ptr++ = *source_ptr++;
 800a548:	461f      	mov	r7, r3
                *dest_ptr++ = *source_ptr++;
 800a54a:	3108      	adds	r1, #8
                *dest_ptr++ = *source_ptr++;
 800a54c:	f847 5b08 	str.w	r5, [r7], #8
                *dest_ptr++ = *source_ptr++;
 800a550:	f851 5c04 	ldr.w	r5, [r1, #-4]
 800a554:	605d      	str	r5, [r3, #4]
 800a556:	463b      	mov	r3, r7
                switch (bytes_to_copy & 3)
 800a558:	f006 0503 	and.w	r5, r6, #3
 800a55c:	2d02      	cmp	r5, #2
 800a55e:	d010      	beq.n	800a582 <_nx_ipv6_packet_copy+0x176>
 800a560:	2d03      	cmp	r5, #3
 800a562:	d016      	beq.n	800a592 <_nx_ipv6_packet_copy+0x186>
 800a564:	2d01      	cmp	r5, #1
 800a566:	d011      	beq.n	800a58c <_nx_ipv6_packet_copy+0x180>
                bytes_remaining -= bytes_to_copy;
 800a568:	1b92      	subs	r2, r2, r6
 800a56a:	e7c2      	b.n	800a4f2 <_nx_ipv6_packet_copy+0xe6>
                *dest_ptr++ = *source_ptr++;
 800a56c:	601d      	str	r5, [r3, #0]
                switch (bytes_to_copy & 3)
 800a56e:	f006 0503 	and.w	r5, r6, #3
                *dest_ptr++ = *source_ptr++;
 800a572:	46a4      	mov	ip, r4
 800a574:	4607      	mov	r7, r0
                switch (bytes_to_copy & 3)
 800a576:	2d02      	cmp	r5, #2
                *dest_ptr++ = *source_ptr++;
 800a578:	461c      	mov	r4, r3
 800a57a:	4608      	mov	r0, r1
 800a57c:	4663      	mov	r3, ip
 800a57e:	4639      	mov	r1, r7
                switch (bytes_to_copy & 3)
 800a580:	d1ee      	bne.n	800a560 <_nx_ipv6_packet_copy+0x154>
                    *dest_byte++ = *source_byte++;
 800a582:	7808      	ldrb	r0, [r1, #0]
 800a584:	3301      	adds	r3, #1
 800a586:	3101      	adds	r1, #1
 800a588:	f803 0c01 	strb.w	r0, [r3, #-1]
                    *dest_byte++ = *source_byte++;
 800a58c:	7809      	ldrb	r1, [r1, #0]
 800a58e:	7019      	strb	r1, [r3, #0]
                    break;
 800a590:	e7ea      	b.n	800a568 <_nx_ipv6_packet_copy+0x15c>
                    *dest_byte++ = *source_byte++;
 800a592:	7905      	ldrb	r5, [r0, #4]
 800a594:	1d41      	adds	r1, r0, #5
 800a596:	1d63      	adds	r3, r4, #5
 800a598:	7125      	strb	r5, [r4, #4]
                    *dest_byte++ = *source_byte++;
 800a59a:	3101      	adds	r1, #1
 800a59c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800a5a0:	7018      	strb	r0, [r3, #0]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	e7f2      	b.n	800a58c <_nx_ipv6_packet_copy+0x180>
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 800a5a6:	190e      	adds	r6, r1, r4
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 800a5a8:	1b00      	subs	r0, r0, r4
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
 800a5aa:	f8ce 500c 	str.w	r5, [lr, #12]
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 800a5ae:	f8ce 0024 	str.w	r0, [lr, #36]	; 0x24
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 800a5b2:	f8c8 6008 	str.w	r6, [r8, #8]
        while (bytes_to_copy)
 800a5b6:	b17c      	cbz	r4, 800a5d8 <_nx_ipv6_packet_copy+0x1cc>
 800a5b8:	f04f 0900 	mov.w	r9, #0
 800a5bc:	4626      	mov	r6, r4
 800a5be:	f04f 0b02 	mov.w	fp, #2
 800a5c2:	46ca      	mov	sl, r9
 800a5c4:	e757      	b.n	800a476 <_nx_ipv6_packet_copy+0x6a>
 800a5c6:	f04f 0900 	mov.w	r9, #0
 800a5ca:	f04f 0a01 	mov.w	sl, #1
 800a5ce:	e73a      	b.n	800a446 <_nx_ipv6_packet_copy+0x3a>
    return(NX_SUCCESS);
 800a5d0:	2000      	movs	r0, #0
}
 800a5d2:	b003      	add	sp, #12
 800a5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (bytes_to_copy)
 800a5d8:	46a1      	mov	r9, r4
 800a5da:	e795      	b.n	800a508 <_nx_ipv6_packet_copy+0xfc>
 800a5dc:	46b3      	mov	fp, r6
 800a5de:	e788      	b.n	800a4f2 <_nx_ipv6_packet_copy+0xe6>

0800a5e0 <_nx_nd_cache_add_entry>:
/**************************************************************************/

UINT _nx_nd_cache_add_entry(NX_IP *ip_ptr, ULONG *dest_ip,
                            NXD_IPV6_ADDRESS *iface_address,
                            ND_CACHE_ENTRY **nd_cache_entry)
{
 800a5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Initialize the return value. */
    *nd_cache_entry = NX_NULL;

    /* Compute a simple hash based on the destination IP address. */
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a5e4:	e9d1 5400 	ldrd	r5, r4, [r1]
 800a5e8:	688e      	ldr	r6, [r1, #8]
    *nd_cache_entry = NX_NULL;
 800a5ea:	f04f 0c00 	mov.w	ip, #0
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a5ee:	442c      	add	r4, r5
 800a5f0:	68cd      	ldr	r5, [r1, #12]
 800a5f2:	2710      	movs	r7, #16
                   (NX_IPV6_NEIGHBOR_CACHE_SIZE));

#ifndef NX_DISABLE_IPV6_PURGE_UNUSED_CACHE_ENTRIES

    /* Set the lowest possible timer ticks left to compare to. */
    stale_timer_ticks = 0;
 800a5f4:	46e6      	mov	lr, ip
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a5f6:	4434      	add	r4, r6
    *nd_cache_entry = NX_NULL;
 800a5f8:	f8c3 c000 	str.w	ip, [r3]
{
 800a5fc:	4693      	mov	fp, r2
    first_available = NX_IPV6_NEIGHBOR_CACHE_SIZE;
 800a5fe:	46b8      	mov	r8, r7
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a600:	442c      	add	r4, r5

    /* Start out at a very high number of remaining ticks to compare to. */
    timer_ticks_left = 0xFFFFFFFF;
 800a602:	f04f 39ff 	mov.w	r9, #4294967295
            /* Start back at the first table entry. */
            index = 0;
        }

        /* Is the current entry available? */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 800a606:	f04f 0c34 	mov.w	ip, #52	; 0x34
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a60a:	f004 040f 	and.w	r4, r4, #15
 800a60e:	e003      	b.n	800a618 <_nx_nd_cache_add_entry+0x38>
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++, index++)
 800a610:	3f01      	subs	r7, #1
 800a612:	f104 0401 	add.w	r4, r4, #1
 800a616:	d021      	beq.n	800a65c <_nx_nd_cache_add_entry+0x7c>
            index = 0;
 800a618:	2c10      	cmp	r4, #16
 800a61a:	bf08      	it	eq
 800a61c:	2400      	moveq	r4, #0
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 800a61e:	fb0c 0504 	mla	r5, ip, r4, r0
 800a622:	f895 61e9 	ldrb.w	r6, [r5, #489]	; 0x1e9
 800a626:	b33e      	cbz	r6, 800a678 <_nx_nd_cache_add_entry+0x98>
            break;
        }

#ifndef NX_DISABLE_IPV6_PURGE_UNUSED_CACHE_ENTRIES
        /* Skip over routers and static entries. */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_is_router != NX_NULL || ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_is_static)
 800a628:	f8d5 21f4 	ldr.w	r2, [r5, #500]	; 0x1f4
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	d1ef      	bne.n	800a610 <_nx_nd_cache_add_entry+0x30>
 800a630:	f895 a1eb 	ldrb.w	sl, [r5, #491]	; 0x1eb
 800a634:	f1ba 0f00 	cmp.w	sl, #0
 800a638:	d1ea      	bne.n	800a610 <_nx_nd_cache_add_entry+0x30>
        /* Purging is enabled;
           Attempt to find a STALE entry and if there is more than one,
           choose the oldest one e.g. the highest timer ticks elapsed. */

        /* Check for stale entries. These are the best candidates for 'recycling.' */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 800a63a:	2e03      	cmp	r6, #3
 800a63c:	d014      	beq.n	800a668 <_nx_nd_cache_add_entry+0x88>
                stale_timer_ticks = (UINT)ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick;
                first_available = index;
            }
        }
        /* Next try finding a REACHABLE entry closest to its cache table expiration date. */
        else if (stale_timer_ticks == 0 &&
 800a63e:	f1be 0f00 	cmp.w	lr, #0
 800a642:	d1e5      	bne.n	800a610 <_nx_nd_cache_add_entry+0x30>
 800a644:	2e02      	cmp	r6, #2
 800a646:	d1e3      	bne.n	800a610 <_nx_nd_cache_add_entry+0x30>
                 ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
        {

            /* Is this entry older that our previous oldest entry? */
            if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick < timer_ticks_left)
 800a648:	f8d5 51ec 	ldr.w	r5, [r5, #492]	; 0x1ec
 800a64c:	454d      	cmp	r5, r9
 800a64e:	d2df      	bcs.n	800a610 <_nx_nd_cache_add_entry+0x30>
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++, index++)
 800a650:	3f01      	subs	r7, #1
            if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick < timer_ticks_left)
 800a652:	46a0      	mov	r8, r4
 800a654:	46a9      	mov	r9, r5
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++, index++)
 800a656:	f104 0401 	add.w	r4, r4, #1
 800a65a:	d1dd      	bne.n	800a618 <_nx_nd_cache_add_entry+0x38>
        }
#endif
    }

    /* Did not find a available entry. */
    if (first_available == NX_IPV6_NEIGHBOR_CACHE_SIZE)
 800a65c:	f1b8 0f10 	cmp.w	r8, #16
 800a660:	d109      	bne.n	800a676 <_nx_nd_cache_add_entry+0x96>
    {

        /* Return unsuccessful status. */
        return(NX_NOT_SUCCESSFUL);
 800a662:	2043      	movs	r0, #67	; 0x43

    /* Release the protection. */
    *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[first_available];

    return(NX_SUCCESS);
}
 800a664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick > stale_timer_ticks)
 800a668:	f8d5 51ec 	ldr.w	r5, [r5, #492]	; 0x1ec
 800a66c:	4575      	cmp	r5, lr
 800a66e:	d9cf      	bls.n	800a610 <_nx_nd_cache_add_entry+0x30>
 800a670:	46ae      	mov	lr, r5
 800a672:	46a0      	mov	r8, r4
 800a674:	e7cc      	b.n	800a610 <_nx_nd_cache_add_entry+0x30>
 800a676:	4644      	mov	r4, r8
 800a678:	4699      	mov	r9, r3
    _nx_nd_cache_delete_internal(ip_ptr, &ip_ptr -> nx_ipv6_nd_cache[first_available]);
 800a67a:	2334      	movs	r3, #52	; 0x34
 800a67c:	460d      	mov	r5, r1
 800a67e:	4606      	mov	r6, r0
 800a680:	fb03 f404 	mul.w	r4, r3, r4
 800a684:	f504 77e8 	add.w	r7, r4, #464	; 0x1d0
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_nd_status = ND_CACHE_STATE_CREATED;
 800a688:	4426      	add	r6, r4
    _nx_nd_cache_delete_internal(ip_ptr, &ip_ptr -> nx_ipv6_nd_cache[first_available]);
 800a68a:	4407      	add	r7, r0
 800a68c:	4639      	mov	r1, r7
 800a68e:	f000 f813 	bl	800a6b8 <_nx_nd_cache_delete_internal>
    COPY_IPV6_ADDRESS(dest_ip, ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_dest_ip);
 800a692:	4628      	mov	r0, r5
 800a694:	4639      	mov	r1, r7
 800a696:	f7f8 f993 	bl	80029c0 <COPY_IPV6_ADDRESS>
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_nd_status = ND_CACHE_STATE_CREATED;
 800a69a:	2306      	movs	r3, #6
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_outgoing_address = iface_address;
 800a69c:	f8c6 b200 	str.w	fp, [r6, #512]	; 0x200
    return(NX_SUCCESS);
 800a6a0:	2000      	movs	r0, #0
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_nd_status = ND_CACHE_STATE_CREATED;
 800a6a2:	f886 31e9 	strb.w	r3, [r6, #489]	; 0x1e9
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_interface_ptr = iface_address -> nxd_ipv6_address_attached;
 800a6a6:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a6aa:	f8c6 31f0 	str.w	r3, [r6, #496]	; 0x1f0
    *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[first_available];
 800a6ae:	f8c9 7000 	str.w	r7, [r9]
}
 800a6b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	bf00      	nop

0800a6b8 <_nx_nd_cache_delete_internal>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_nd_cache_delete_internal(NX_IP *ip_ptr, ND_CACHE_ENTRY *entry)
{
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	4605      	mov	r5, r0

UINT       i = 0, table_size;
NX_PACKET *pkt, *next_pkt;

    /* Free up the queued packets. */
    pkt = entry -> nx_nd_cache_packet_waiting_head;
 800a6bc:	6a88      	ldr	r0, [r1, #40]	; 0x28
{
 800a6be:	460c      	mov	r4, r1

    /* Flush any packets enqueued waiting on neighbor reachability confirmation. */
    while (pkt)
 800a6c0:	b128      	cbz	r0, 800a6ce <_nx_nd_cache_delete_internal+0x16>
    {

        next_pkt = pkt -> nx_packet_queue_next;
 800a6c2:	69c6      	ldr	r6, [r0, #28]
        _nx_packet_transmit_release(pkt);
 800a6c4:	f7f8 fba8 	bl	8002e18 <_nx_packet_transmit_release>
    while (pkt)
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	d1f9      	bne.n	800a6c2 <_nx_nd_cache_delete_internal+0xa>
        pkt = next_pkt;
    }
    entry -> nx_nd_cache_packet_waiting_queue_length = 0;
 800a6ce:	2300      	movs	r3, #0
    /* Clear the entry out.  */
    entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INVALID;
    entry -> nx_nd_cache_is_static = 0;

    /* Is there a corresponding link in the default router list? */
    if (entry -> nx_nd_cache_is_router)
 800a6d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    entry -> nx_nd_cache_packet_waiting_queue_length = 0;
 800a6d2:	76a3      	strb	r3, [r4, #26]
    memset(entry -> nx_nd_cache_mac_addr, 0, 6);
 800a6d4:	6123      	str	r3, [r4, #16]
 800a6d6:	82a3      	strh	r3, [r4, #20]
    entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INVALID;
 800a6d8:	7663      	strb	r3, [r4, #25]
    entry -> nx_nd_cache_is_static = 0;
 800a6da:	76e3      	strb	r3, [r4, #27]
    entry -> nx_nd_cache_packet_waiting_tail = NX_NULL;
 800a6dc:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    if (entry -> nx_nd_cache_is_router)
 800a6e0:	b102      	cbz	r2, 800a6e4 <_nx_nd_cache_delete_internal+0x2c>
    {

        /* Set its pointer to this entry in the cache table to NULL. */
        entry -> nx_nd_cache_is_router -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 800a6e2:	6193      	str	r3, [r2, #24]
    }

    /* And indicate that this cache entry is no longer a router. */
    entry -> nx_nd_cache_is_router = NX_NULL;
 800a6e4:	2200      	movs	r2, #0

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 800a6e6:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    entry -> nx_nd_cache_is_router = NX_NULL;
 800a6ea:	6262      	str	r2, [r4, #36]	; 0x24

    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d050      	beq.n	800a792 <_nx_nd_cache_delete_internal+0xda>
    {

        /* Skip invalid entries. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a6f0:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800a6f4:	b131      	cbz	r1, 800a704 <_nx_nd_cache_delete_internal+0x4c>

        /* Keep track of valid entries we have checked. */
        table_size--;

        /* Find the destination unit. */
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a6f6:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
        table_size--;
 800a6fa:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a6fc:	42a1      	cmp	r1, r4
 800a6fe:	d04a      	beq.n	800a796 <_nx_nd_cache_delete_internal+0xde>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a700:	2b00      	cmp	r3, #0
 800a702:	d046      	beq.n	800a792 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a704:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
 800a708:	b12a      	cbz	r2, 800a716 <_nx_nd_cache_delete_internal+0x5e>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a70a:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
        table_size--;
 800a70e:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a710:	4294      	cmp	r4, r2
 800a712:	d049      	beq.n	800a7a8 <_nx_nd_cache_delete_internal+0xf0>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a714:	b3eb      	cbz	r3, 800a792 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a716:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 800a71a:	b12a      	cbz	r2, 800a728 <_nx_nd_cache_delete_internal+0x70>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a71c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
        table_size--;
 800a720:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a722:	4294      	cmp	r4, r2
 800a724:	d04d      	beq.n	800a7c2 <_nx_nd_cache_delete_internal+0x10a>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a726:	b3a3      	cbz	r3, 800a792 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a728:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
 800a72c:	b12a      	cbz	r2, 800a73a <_nx_nd_cache_delete_internal+0x82>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a72e:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
        table_size--;
 800a732:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a734:	4294      	cmp	r4, r2
 800a736:	d051      	beq.n	800a7dc <_nx_nd_cache_delete_internal+0x124>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a738:	b35b      	cbz	r3, 800a792 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a73a:	f8d5 2130 	ldr.w	r2, [r5, #304]	; 0x130
 800a73e:	b12a      	cbz	r2, 800a74c <_nx_nd_cache_delete_internal+0x94>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a740:	f8d5 2154 	ldr.w	r2, [r5, #340]	; 0x154
        table_size--;
 800a744:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a746:	4294      	cmp	r4, r2
 800a748:	d053      	beq.n	800a7f2 <_nx_nd_cache_delete_internal+0x13a>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a74a:	b313      	cbz	r3, 800a792 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a74c:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
 800a750:	b12a      	cbz	r2, 800a75e <_nx_nd_cache_delete_internal+0xa6>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a752:	f8d5 217c 	ldr.w	r2, [r5, #380]	; 0x17c
        table_size--;
 800a756:	3b01      	subs	r3, #1
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a758:	4294      	cmp	r4, r2
 800a75a:	d055      	beq.n	800a808 <_nx_nd_cache_delete_internal+0x150>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a75c:	b1cb      	cbz	r3, 800a792 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a75e:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
 800a762:	b12a      	cbz	r2, 800a770 <_nx_nd_cache_delete_internal+0xb8>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a764:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 800a768:	4294      	cmp	r4, r2
 800a76a:	d05a      	beq.n	800a822 <_nx_nd_cache_delete_internal+0x16a>
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d010      	beq.n	800a792 <_nx_nd_cache_delete_internal+0xda>
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a770:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
 800a774:	b16b      	cbz	r3, 800a792 <_nx_nd_cache_delete_internal+0xda>
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800a776:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
 800a77a:	429c      	cmp	r4, r3
 800a77c:	d109      	bne.n	800a792 <_nx_nd_cache_delete_internal+0xda>

            /* Set its pointer to this entry in the destination table to NULL. */
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;

            /* Update the destination_table size. */
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a77e:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a782:	2200      	movs	r2, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a784:	3b01      	subs	r3, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a786:	f8c5 21a8 	str.w	r2, [r5, #424]	; 0x1a8
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800a78a:	f8c5 21cc 	str.w	r2, [r5, #460]	; 0x1cc
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a78e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510

        i++;
    }

    return(NX_SUCCESS);
}
 800a792:	2000      	movs	r0, #0
 800a794:	bd70      	pop	{r4, r5, r6, pc}
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a796:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800a79a:	f8c5 20b4 	str.w	r2, [r5, #180]	; 0xb4
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a79e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1ae      	bne.n	800a704 <_nx_nd_cache_delete_internal+0x4c>
 800a7a6:	e7f4      	b.n	800a792 <_nx_nd_cache_delete_internal+0xda>
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7a8:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a7ac:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7ae:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a7b0:	f8c5 10b8 	str.w	r1, [r5, #184]	; 0xb8
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800a7b4:	f8c5 10dc 	str.w	r1, [r5, #220]	; 0xdc
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7b8:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1aa      	bne.n	800a716 <_nx_nd_cache_delete_internal+0x5e>
 800a7c0:	e7e7      	b.n	800a792 <_nx_nd_cache_delete_internal+0xda>
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7c2:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a7c6:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7c8:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a7ca:	f8c5 10e0 	str.w	r1, [r5, #224]	; 0xe0
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800a7ce:	f8c5 1104 	str.w	r1, [r5, #260]	; 0x104
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7d2:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1a6      	bne.n	800a728 <_nx_nd_cache_delete_internal+0x70>
 800a7da:	e7da      	b.n	800a792 <_nx_nd_cache_delete_internal+0xda>
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7dc:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a7e0:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7e2:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a7e4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800a7e8:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7ec:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
 800a7f0:	e7a2      	b.n	800a738 <_nx_nd_cache_delete_internal+0x80>
 800a7f2:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a7f6:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a7f8:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a7fa:	f8c5 1130 	str.w	r1, [r5, #304]	; 0x130
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800a7fe:	f8c5 1154 	str.w	r1, [r5, #340]	; 0x154
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a802:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
 800a806:	e7a0      	b.n	800a74a <_nx_nd_cache_delete_internal+0x92>
 800a808:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a80c:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a80e:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a810:	f8c5 1158 	str.w	r1, [r5, #344]	; 0x158
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800a814:	f8c5 117c 	str.w	r1, [r5, #380]	; 0x17c
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a818:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d19e      	bne.n	800a75e <_nx_nd_cache_delete_internal+0xa6>
 800a820:	e7b7      	b.n	800a792 <_nx_nd_cache_delete_internal+0xda>
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a822:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a826:	2100      	movs	r1, #0
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a828:	3a01      	subs	r2, #1
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800a82a:	f8c5 1180 	str.w	r1, [r5, #384]	; 0x180
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800a82e:	f8c5 11a4 	str.w	r1, [r5, #420]	; 0x1a4
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a832:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
 800a836:	e799      	b.n	800a76c <_nx_nd_cache_delete_internal+0xb4>

0800a838 <_nx_nd_cache_find_entry>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nx_nd_cache_find_entry(NX_IP *ip_ptr,
                             ULONG *dest_ip, ND_CACHE_ENTRY **nd_cache_entry)
{
 800a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    /* Initialize the return value. */
    *nd_cache_entry = NX_NULL;

    /* Compute a simple hash based on the dest_ip */
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a83c:	684b      	ldr	r3, [r1, #4]
{
 800a83e:	4690      	mov	r8, r2
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a840:	680c      	ldr	r4, [r1, #0]
    *nd_cache_entry = NX_NULL;
 800a842:	2200      	movs	r2, #0
{
 800a844:	4689      	mov	r9, r1
 800a846:	4607      	mov	r7, r0
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a848:	441c      	add	r4, r3
 800a84a:	688b      	ldr	r3, [r1, #8]
 800a84c:	2610      	movs	r6, #16
                   (NX_IPV6_NEIGHBOR_CACHE_SIZE));

    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
    {

        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 800a84e:	f04f 0a34 	mov.w	sl, #52	; 0x34
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a852:	441c      	add	r4, r3
 800a854:	68cb      	ldr	r3, [r1, #12]
    *nd_cache_entry = NX_NULL;
 800a856:	f8c8 2000 	str.w	r2, [r8]
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800a85a:	441c      	add	r4, r3
 800a85c:	f004 040f 	and.w	r4, r4, #15
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 800a860:	fb0a f004 	mul.w	r0, sl, r4
            *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[index];

            return(NX_SUCCESS);
        }

        index++;
 800a864:	3401      	adds	r4, #1
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 800a866:	183b      	adds	r3, r7, r0
 800a868:	f893 21e9 	ldrb.w	r2, [r3, #489]	; 0x1e9
 800a86c:	b152      	cbz	r2, 800a884 <_nx_nd_cache_find_entry+0x4c>
            (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_dest_ip[0], dest_ip)))
 800a86e:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 800a872:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
            (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_dest_ip[0], dest_ip)))
 800a876:	4649      	mov	r1, r9
 800a878:	183d      	adds	r5, r7, r0
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 800a87a:	b11b      	cbz	r3, 800a884 <_nx_nd_cache_find_entry+0x4c>
            (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_dest_ip[0], dest_ip)))
 800a87c:	4628      	mov	r0, r5
 800a87e:	f7f8 f875 	bl	800296c <CHECK_IPV6_ADDRESSES_SAME>
            (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_interface_ptr) &&
 800a882:	b958      	cbnz	r0, 800a89c <_nx_nd_cache_find_entry+0x64>

        /* Check for overflow */
        if (index == NX_IPV6_NEIGHBOR_CACHE_SIZE)
 800a884:	2c10      	cmp	r4, #16
 800a886:	d004      	beq.n	800a892 <_nx_nd_cache_find_entry+0x5a>
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 800a888:	3e01      	subs	r6, #1
 800a88a:	d1e9      	bne.n	800a860 <_nx_nd_cache_find_entry+0x28>
        {
            index = 0;
        }
    }

    return(NX_NOT_SUCCESSFUL);
 800a88c:	2043      	movs	r0, #67	; 0x43
}
 800a88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 800a892:	3e01      	subs	r6, #1
            index = 0;
 800a894:	f04f 0400 	mov.w	r4, #0
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 800a898:	d1e2      	bne.n	800a860 <_nx_nd_cache_find_entry+0x28>
 800a89a:	e7f7      	b.n	800a88c <_nx_nd_cache_find_entry+0x54>
            *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[index];
 800a89c:	f8c8 5000 	str.w	r5, [r8]
            return(NX_SUCCESS);
 800a8a0:	2000      	movs	r0, #0
}
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	bf00      	nop

0800a8a8 <_nx_tcp_client_bind_cleanup>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a8a8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a8ac:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the TCP socket.  */
    TX_DISABLE

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800a8ae:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d046      	beq.n	800a942 <_nx_tcp_client_bind_cleanup+0x9a>
 800a8b4:	4926      	ldr	r1, [pc, #152]	; (800a950 <_nx_tcp_client_bind_cleanup+0xa8>)
{
 800a8b6:	b430      	push	{r4, r5}
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800a8b8:	681c      	ldr	r4, [r3, #0]
 800a8ba:	428c      	cmp	r4, r1
 800a8bc:	d003      	beq.n	800a8c6 <_nx_tcp_client_bind_cleanup+0x1e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a8be:	f382 8810 	msr	PRIMASK, r2
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800a8c2:	bc30      	pop	{r4, r5}
 800a8c4:	4770      	bx	lr
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800a8c6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	d0f8      	beq.n	800a8be <_nx_tcp_client_bind_cleanup+0x16>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8cc:	f3ef 8405 	mrs	r4, IPSR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800a8d0:	4920      	ldr	r1, [pc, #128]	; (800a954 <_nx_tcp_client_bind_cleanup+0xac>)
 800a8d2:	6809      	ldr	r1, [r1, #0]
 800a8d4:	4321      	orrs	r1, r4
 800a8d6:	d126      	bne.n	800a926 <_nx_tcp_client_bind_cleanup+0x7e>
 800a8d8:	4d1f      	ldr	r5, [pc, #124]	; (800a958 <_nx_tcp_client_bind_cleanup+0xb0>)
 800a8da:	4c20      	ldr	r4, [pc, #128]	; (800a95c <_nx_tcp_client_bind_cleanup+0xb4>)
 800a8dc:	682d      	ldr	r5, [r5, #0]
 800a8de:	42a5      	cmp	r5, r4
 800a8e0:	d021      	beq.n	800a926 <_nx_tcp_client_bind_cleanup+0x7e>
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a8e2:	6f04      	ldr	r4, [r0, #112]	; 0x70
        socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 800a8e4:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a8e8:	4284      	cmp	r4, r0
        owning_socket_ptr =  socket_ptr -> nx_tcp_socket_bound_previous;
 800a8ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a8ee:	6681      	str	r1, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a8f0:	d02a      	beq.n	800a948 <_nx_tcp_client_bind_cleanup+0xa0>
                thread_ptr -> tx_thread_suspended_previous;
 800a8f2:	6f41      	ldr	r1, [r0, #116]	; 0x74
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800a8f4:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a8f8:	6761      	str	r1, [r4, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a8fa:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800a8fc:	670c      	str	r4, [r1, #112]	; 0x70
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 800a8fe:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800a902:	6b04      	ldr	r4, [r0, #48]	; 0x30
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 800a904:	3901      	subs	r1, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800a906:	2c0c      	cmp	r4, #12
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 800a908:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800a90c:	d1d7      	bne.n	800a8be <_nx_tcp_client_bind_cleanup+0x16>
            _tx_thread_preempt_disable++;
 800a90e:	4914      	ldr	r1, [pc, #80]	; (800a960 <_nx_tcp_client_bind_cleanup+0xb8>)
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800a910:	2423      	movs	r4, #35	; 0x23
            _tx_thread_preempt_disable++;
 800a912:	680b      	ldr	r3, [r1, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800a914:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 800a918:	3301      	adds	r3, #1
 800a91a:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a91c:	f382 8810 	msr	PRIMASK, r2
}
 800a920:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 800a922:	f003 b8df 	b.w	800dae4 <_tx_thread_system_resume>
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800a926:	490f      	ldr	r1, [pc, #60]	; (800a964 <_nx_tcp_client_bind_cleanup+0xbc>)
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800a928:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800a92c:	6681      	str	r1, [r0, #104]	; 0x68
 800a92e:	f382 8810 	msr	PRIMASK, r2
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800a932:	2200      	movs	r2, #0
 800a934:	f503 60ec 	add.w	r0, r3, #1888	; 0x760
 800a938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 800a93c:	bc30      	pop	{r4, r5}
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800a93e:	f002 bb97 	b.w	800d070 <_tx_event_flags_set>
 800a942:	f382 8810 	msr	PRIMASK, r2
 800a946:	4770      	bx	lr
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 800a948:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 800a94c:	e7d7      	b.n	800a8fe <_nx_tcp_client_bind_cleanup+0x56>
 800a94e:	bf00      	nop
 800a950:	54435020 	.word	0x54435020
 800a954:	2000007c 	.word	0x2000007c
 800a958:	20019248 	.word	0x20019248
 800a95c:	200192f0 	.word	0x200192f0
 800a960:	20019244 	.word	0x20019244
 800a964:	08007abd 	.word	0x08007abd

0800a968 <_nx_tcp_mss_option_get>:
{

ULONG option_length;

    /* Initialize the value.  */
    *mss = 0;
 800a968:	2300      	movs	r3, #0

    /* Loop through the option area looking for the MSS.  */
    while (option_area_size >= 4)
 800a96a:	2903      	cmp	r1, #3
    *mss = 0;
 800a96c:	6013      	str	r3, [r2, #0]
    while (option_area_size >= 4)
 800a96e:	d92a      	bls.n	800a9c6 <_nx_tcp_mss_option_get+0x5e>
{
 800a970:	b410      	push	{r4}
    {

        /* Is the current character the MSS type?  */
        if (*option_ptr == NX_TCP_MSS_KIND)
 800a972:	7803      	ldrb	r3, [r0, #0]
 800a974:	4604      	mov	r4, r0
 800a976:	2b02      	cmp	r3, #2
 800a978:	d00e      	beq.n	800a998 <_nx_tcp_mss_option_get+0x30>
        }

        /* Otherwise, process relative to the option type.  */

        /* Check for end of list.  */
        if (*option_ptr == NX_TCP_EOL_KIND)
 800a97a:	b1c3      	cbz	r3, 800a9ae <_nx_tcp_mss_option_get+0x46>
            /* Yes, end of list, get out!  */
            break;
        }

        /* Check for NOP.  */
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d012      	beq.n	800a9a6 <_nx_tcp_mss_option_get+0x3e>
        }
        else
        {

            /* Derive the option length.  */
            option_length =  ((ULONG)*option_ptr);
 800a980:	7860      	ldrb	r0, [r4, #1]
            {
                return(NX_FALSE);
            }

            /* Move the option pointer forward.  */
            option_ptr =  option_ptr + (option_length - 1);
 800a982:	4404      	add	r4, r0
            if (option_length == 0)
 800a984:	b160      	cbz	r0, 800a9a0 <_nx_tcp_mss_option_get+0x38>

            /* Determine if this is greater than the option area size.  */
            if (option_length > option_area_size)
 800a986:	4288      	cmp	r0, r1
            {
                return(NX_FALSE);
            }
            else
            {
                option_area_size =  option_area_size - option_length;
 800a988:	eba1 0100 	sub.w	r1, r1, r0
            if (option_length > option_area_size)
 800a98c:	d807      	bhi.n	800a99e <_nx_tcp_mss_option_get+0x36>
    while (option_area_size >= 4)
 800a98e:	2903      	cmp	r1, #3
 800a990:	d90d      	bls.n	800a9ae <_nx_tcp_mss_option_get+0x46>
        if (*option_ptr == NX_TCP_MSS_KIND)
 800a992:	7823      	ldrb	r3, [r4, #0]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d1f0      	bne.n	800a97a <_nx_tcp_mss_option_get+0x12>
            if (*option_ptr++ != 4)
 800a998:	7863      	ldrb	r3, [r4, #1]
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	d00b      	beq.n	800a9b6 <_nx_tcp_mss_option_get+0x4e>
                return(NX_FALSE);
 800a99e:	2000      	movs	r0, #0
        }
    }

    /* Return.  */
    return(NX_TRUE);
}
 800a9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a4:	4770      	bx	lr
            option_area_size--;
 800a9a6:	3901      	subs	r1, #1
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 800a9a8:	3401      	adds	r4, #1
    while (option_area_size >= 4)
 800a9aa:	2903      	cmp	r1, #3
 800a9ac:	d8f1      	bhi.n	800a992 <_nx_tcp_mss_option_get+0x2a>
    return(NX_TRUE);
 800a9ae:	2001      	movs	r0, #1
}
 800a9b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b4:	4770      	bx	lr
            *mss = (ULONG)*option_ptr++;
 800a9b6:	78a1      	ldrb	r1, [r4, #2]
    return(NX_TRUE);
 800a9b8:	2001      	movs	r0, #1
            *mss = (ULONG)*option_ptr++;
 800a9ba:	6011      	str	r1, [r2, #0]
            *mss = (*mss << 8) | (ULONG)*option_ptr;
 800a9bc:	78e3      	ldrb	r3, [r4, #3]
 800a9be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a9c2:	6013      	str	r3, [r2, #0]
            break;
 800a9c4:	e7ec      	b.n	800a9a0 <_nx_tcp_mss_option_get+0x38>
    return(NX_TRUE);
 800a9c6:	2001      	movs	r0, #1
}
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop

0800a9cc <_nx_tcp_no_connection_reset>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_no_connection_reset(NX_IP *ip_ptr, NX_PACKET *packet_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800a9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ce:	b0d1      	sub	sp, #324	; 0x144
 800a9d0:	460e      	mov	r6, r1
 800a9d2:	4607      	mov	r7, r0
 800a9d4:	4614      	mov	r4, r2
ULONG         data_offset = 0;
#endif /* NX_IPSEC_ENABLE */


    /* Clear the fake socket first.  */
    memset((void *)&fake_socket, 0, sizeof(NX_TCP_SOCKET));
 800a9d6:	a801      	add	r0, sp, #4
 800a9d8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a9dc:	2100      	movs	r1, #0
 800a9de:	f004 f908 	bl	800ebf2 <memset>
    /* Build a fake socket so we can send a reset TCP requests that are not valid.  */
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;

    /* Set the connection IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a9e2:	f896 5030 	ldrb.w	r5, [r6, #48]	; 0x30
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;
 800a9e6:	972c      	str	r7, [sp, #176]	; 0xb0
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a9e8:	2d04      	cmp	r5, #4
 800a9ea:	d01c      	beq.n	800aa26 <_nx_tcp_no_connection_reset+0x5a>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 800a9ec:	2d06      	cmp	r5, #6
 800a9ee:	d029      	beq.n	800aa44 <_nx_tcp_no_connection_reset+0x78>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* FEATURE_NX_IPV6 */

    /* Set the source port and destination port.  */
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800a9f0:	6823      	ldr	r3, [r4, #0]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);

    /* Set the sequence number only if the incoming segment does not have the ACK flag, according to
       Section 3.4, "Reset Generation" on page 37, RFC793. */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800a9f2:	68e2      	ldr	r2, [r4, #12]
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800a9f4:	b299      	uxth	r1, r3
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800a9f6:	0c1b      	lsrs	r3, r3, #16
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800a9f8:	9104      	str	r1, [sp, #16]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800a9fa:	930b      	str	r3, [sp, #44]	; 0x2c
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800a9fc:	02d3      	lsls	r3, r2, #11
 800a9fe:	d40a      	bmi.n	800aa16 <_nx_tcp_no_connection_reset+0x4a>
    {
        /* Get the header length.  */
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);

        /* Update sequence number to set the reset acknowledge number.  */
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800aa00:	6a70      	ldr	r0, [r6, #36]	; 0x24
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800aa02:	0f11      	lsrs	r1, r2, #28
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800aa04:	6863      	ldr	r3, [r4, #4]

        /* Check the SYN and FIN bits.  */
        if (tcp_header_ptr -> nx_tcp_header_word_3 & (NX_TCP_SYN_BIT | NX_TCP_FIN_BIT))
 800aa06:	f412 3f40 	tst.w	r2, #196608	; 0x30000
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800aa0a:	4403      	add	r3, r0
 800aa0c:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
        {

            /* Update sequence number to set the reset acknowledge number.  */
            tcp_header_ptr -> nx_tcp_sequence_number++;
 800aa10:	bf18      	it	ne
 800aa12:	3301      	addne	r3, #1
 800aa14:	6063      	str	r3, [r4, #4]
            fake_socket.nx_tcp_socket_egress_sa_data_offset = 0;
        }
    }
#endif

    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 800aa16:	2380      	movs	r3, #128	; 0x80

    /* Send a RST to indicate the connection was not available.  */
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 800aa18:	4621      	mov	r1, r4
 800aa1a:	a801      	add	r0, sp, #4
    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 800aa1c:	932e      	str	r3, [sp, #184]	; 0xb8
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 800aa1e:	f000 f81d 	bl	800aa5c <_nx_tcp_packet_send_rst>
}
 800aa22:	b051      	add	sp, #324	; 0x144
 800aa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800aa26:	6bb2      	ldr	r2, [r6, #56]	; 0x38
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 800aa28:	4638      	mov	r0, r7
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800aa2a:	6b77      	ldr	r7, [r6, #52]	; 0x34
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 800aa2c:	ab0f      	add	r3, sp, #60	; 0x3c
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 800aa2e:	68d1      	ldr	r1, [r2, #12]
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 800aa30:	aa0e      	add	r2, sp, #56	; 0x38
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800aa32:	970e      	str	r7, [sp, #56]	; 0x38
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 800aa34:	e9cd 5106 	strd	r5, r1, [sp, #24]
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 800aa38:	f7f7 fbae 	bl	8002198 <_nx_ip_route_find>
 800aa3c:	f896 5030 	ldrb.w	r5, [r6, #48]	; 0x30
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 800aa40:	2d06      	cmp	r5, #6
 800aa42:	d1d5      	bne.n	800a9f0 <_nx_tcp_no_connection_reset+0x24>
        ipv6_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800aa44:	6bb0      	ldr	r0, [r6, #56]	; 0x38
        COPY_IPV6_ADDRESS(&ipv6_header_ptr -> nx_ip_header_source_ip[0], fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 800aa46:	a907      	add	r1, sp, #28
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V6;
 800aa48:	9506      	str	r5, [sp, #24]
        COPY_IPV6_ADDRESS(&ipv6_header_ptr -> nx_ip_header_source_ip[0], fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 800aa4a:	3008      	adds	r0, #8
 800aa4c:	f7f7 ffb8 	bl	80029c0 <COPY_IPV6_ADDRESS>
        fake_socket.nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800aa50:	6b73      	ldr	r3, [r6, #52]	; 0x34
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800aa52:	685a      	ldr	r2, [r3, #4]
        fake_socket.nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800aa54:	934f      	str	r3, [sp, #316]	; 0x13c
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800aa56:	920e      	str	r2, [sp, #56]	; 0x38
 800aa58:	e7ca      	b.n	800a9f0 <_nx_tcp_no_connection_reset+0x24>
 800aa5a:	bf00      	nop

0800aa5c <_nx_tcp_packet_send_rst>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_rst(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *header_ptr)
{
 800aa5c:	b510      	push	{r4, lr}
    /* Reset Generation, RFC793, Section3.4, Page37, the RST packet is set up based on if the incoming packet has the ACK bit set. */
    /* If the incoming segment has an ACK field, the reset takes its sequence number from the ACK field of the segment,
       otherwise the reset has sequence number zero and the ACK field is set to the sum of the sequence number and segment length of the incoming segment.  */

    /* Check for the ACK bit in the incoming TCP header.  */
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800aa5e:	68cc      	ldr	r4, [r1, #12]
{
 800aa60:	b084      	sub	sp, #16
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800aa62:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
 800aa66:	d10a      	bne.n	800aa7e <_nx_tcp_packet_send_rst+0x22>
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
                                    0, 0, 0, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_RST_BIT | NX_TCP_ACK_BIT), 0,
 800aa68:	684b      	ldr	r3, [r1, #4]
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800aa70:	9402      	str	r4, [sp, #8]
 800aa72:	e9cd 4400 	strd	r4, r4, [sp]
 800aa76:	f7f8 fba1 	bl	80031bc <_nx_tcp_packet_send_control>

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the resets sent count.  */
    socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_resets_sent++;
#endif /* NX_DISABLE_TCP_INFO */
}
 800aa7a:	b004      	add	sp, #16
 800aa7c:	bd10      	pop	{r4, pc}
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
 800aa7e:	2400      	movs	r4, #0
 800aa80:	688a      	ldr	r2, [r1, #8]
 800aa82:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800aa86:	4623      	mov	r3, r4
 800aa88:	9400      	str	r4, [sp, #0]
 800aa8a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800aa8e:	f7f8 fb95 	bl	80031bc <_nx_tcp_packet_send_control>
}
 800aa92:	b004      	add	sp, #16
 800aa94:	bd10      	pop	{r4, pc}
 800aa96:	bf00      	nop

0800aa98 <_nx_udp_bind_cleanup>:
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800aa98:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800aa9a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800aa9e:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800aaa0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800aaa2:	b14a      	cbz	r2, 800aab8 <_nx_udp_bind_cleanup+0x20>
 800aaa4:	b143      	cbz	r3, 800aab8 <_nx_udp_bind_cleanup+0x20>
 800aaa6:	4a16      	ldr	r2, [pc, #88]	; (800ab00 <_nx_udp_bind_cleanup+0x68>)
{
 800aaa8:	b430      	push	{r4, r5}
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800aaaa:	681c      	ldr	r4, [r3, #0]
 800aaac:	4294      	cmp	r4, r2
 800aaae:	d006      	beq.n	800aabe <_nx_udp_bind_cleanup+0x26>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800aab0:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800aab4:	bc30      	pop	{r4, r5}
 800aab6:	4770      	bx	lr
 800aab8:	f381 8810 	msr	PRIMASK, r1
 800aabc:	4770      	bx	lr
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800aabe:	6f02      	ldr	r2, [r0, #112]	; 0x70
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800aac0:	2500      	movs	r5, #0
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 800aac2:	6d1c      	ldr	r4, [r3, #80]	; 0x50
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800aac4:	4282      	cmp	r2, r0
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800aac6:	655d      	str	r5, [r3, #84]	; 0x54
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800aac8:	6685      	str	r5, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800aaca:	d016      	beq.n	800aafa <_nx_udp_bind_cleanup+0x62>
                thread_ptr -> tx_thread_suspended_previous;
 800aacc:	6f43      	ldr	r3, [r0, #116]	; 0x74
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800aace:	6622      	str	r2, [r4, #96]	; 0x60
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800aad0:	6753      	str	r3, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800aad2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800aad4:	671a      	str	r2, [r3, #112]	; 0x70
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800aad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800aad8:	6b02      	ldr	r2, [r0, #48]	; 0x30
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800aada:	3b01      	subs	r3, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800aadc:	2a0c      	cmp	r2, #12
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800aade:	6663      	str	r3, [r4, #100]	; 0x64
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800aae0:	d1e6      	bne.n	800aab0 <_nx_udp_bind_cleanup+0x18>
            _tx_thread_preempt_disable++;
 800aae2:	4a08      	ldr	r2, [pc, #32]	; (800ab04 <_nx_udp_bind_cleanup+0x6c>)
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800aae4:	2423      	movs	r4, #35	; 0x23
            _tx_thread_preempt_disable++;
 800aae6:	6813      	ldr	r3, [r2, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800aae8:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 800aaec:	3301      	adds	r3, #1
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	f381 8810 	msr	PRIMASK, r1
}
 800aaf4:	bc30      	pop	{r4, r5}
            _tx_thread_system_resume(thread_ptr);
 800aaf6:	f002 bff5 	b.w	800dae4 <_tx_thread_system_resume>
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800aafa:	6625      	str	r5, [r4, #96]	; 0x60
 800aafc:	e7eb      	b.n	800aad6 <_nx_udp_bind_cleanup+0x3e>
 800aafe:	bf00      	nop
 800ab00:	55445020 	.word	0x55445020
 800ab04:	20019244 	.word	0x20019244

0800ab08 <_nx_udp_free_port_find>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	460f      	mov	r7, r1
 800ab10:	4690      	mov	r8, r2
 800ab12:	f200 653c 	addw	r5, r0, #1596	; 0x63c
        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800ab16:	460c      	mov	r4, r1
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ab18:	f04f 31ff 	mov.w	r1, #4294967295
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f002 fc37 	bl	800d390 <_tx_mutex_get>
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800ab22:	eb04 2314 	add.w	r3, r4, r4, lsr #8
 800ab26:	f003 031f 	and.w	r3, r3, #31
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800ab2a:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800ab2e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
        if (search_ptr)
 800ab32:	b1a1      	cbz	r1, 800ab5e <_nx_udp_free_port_find+0x56>
 800ab34:	460b      	mov	r3, r1
 800ab36:	e002      	b.n	800ab3e <_nx_udp_free_port_find+0x36>
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800ab38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            } while (search_ptr != end_ptr);
 800ab3a:	4299      	cmp	r1, r3
 800ab3c:	d00f      	beq.n	800ab5e <_nx_udp_free_port_find+0x56>
                if (search_ptr -> nx_udp_socket_port == port)
 800ab3e:	689a      	ldr	r2, [r3, #8]
 800ab40:	42a2      	cmp	r2, r4
 800ab42:	d1f9      	bne.n	800ab38 <_nx_udp_free_port_find+0x30>
        port++;
 800ab44:	3401      	adds	r4, #1
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ab46:	4628      	mov	r0, r5
 800ab48:	f002 fd0c 	bl	800d564 <_tx_mutex_put>
        if (port > NX_MAX_PORT)
 800ab4c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800ab50:	d30d      	bcc.n	800ab6e <_nx_udp_free_port_find+0x66>
        }
    } while (starting_port != port);
 800ab52:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 800ab56:	d00c      	beq.n	800ab72 <_nx_udp_free_port_find+0x6a>
            port =  NX_SEARCH_PORT_START;
 800ab58:	f44f 4440 	mov.w	r4, #49152	; 0xc000
 800ab5c:	e7dc      	b.n	800ab18 <_nx_udp_free_port_find+0x10>
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f002 fd00 	bl	800d564 <_tx_mutex_put>
            *free_port_ptr =  port;
 800ab64:	f8c8 4000 	str.w	r4, [r8]
            return(NX_SUCCESS);
 800ab68:	2000      	movs	r0, #0

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
}
 800ab6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } while (starting_port != port);
 800ab6e:	42a7      	cmp	r7, r4
 800ab70:	d1d2      	bne.n	800ab18 <_nx_udp_free_port_find+0x10>
    return(NX_NO_FREE_PORTS);
 800ab72:	2045      	movs	r0, #69	; 0x45
}
 800ab74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab78 <_nx_udp_receive_cleanup>:
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800ab78:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ab7a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ab7e:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800ab80:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800ab82:	b152      	cbz	r2, 800ab9a <_nx_udp_receive_cleanup+0x22>
 800ab84:	b14b      	cbz	r3, 800ab9a <_nx_udp_receive_cleanup+0x22>
 800ab86:	4a16      	ldr	r2, [pc, #88]	; (800abe0 <_nx_udp_receive_cleanup+0x68>)
{
 800ab88:	b410      	push	{r4}
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800ab8a:	681c      	ldr	r4, [r3, #0]
 800ab8c:	4294      	cmp	r4, r2
 800ab8e:	d007      	beq.n	800aba0 <_nx_udp_receive_cleanup+0x28>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ab90:	f381 8810 	msr	PRIMASK, r1
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ab94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	f381 8810 	msr	PRIMASK, r1
 800ab9e:	4770      	bx	lr
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800aba0:	6f02      	ldr	r2, [r0, #112]	; 0x70
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800aba2:	2400      	movs	r4, #0
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800aba4:	4282      	cmp	r2, r0
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800aba6:	6684      	str	r4, [r0, #104]	; 0x68
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800aba8:	d017      	beq.n	800abda <_nx_udp_receive_cleanup+0x62>
                thread_ptr -> tx_thread_suspended_previous;
 800abaa:	6f44      	ldr	r4, [r0, #116]	; 0x74
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800abac:	659a      	str	r2, [r3, #88]	; 0x58
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800abae:	6754      	str	r4, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800abb0:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800abb2:	6722      	str	r2, [r4, #112]	; 0x70
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800abb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800abb6:	6b04      	ldr	r4, [r0, #48]	; 0x30
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800abb8:	3a01      	subs	r2, #1
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800abba:	2c0c      	cmp	r4, #12
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800abbc:	65da      	str	r2, [r3, #92]	; 0x5c
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800abbe:	d1e7      	bne.n	800ab90 <_nx_udp_receive_cleanup+0x18>
            _tx_thread_preempt_disable++;
 800abc0:	4a08      	ldr	r2, [pc, #32]	; (800abe4 <_nx_udp_receive_cleanup+0x6c>)
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800abc2:	2401      	movs	r4, #1
            _tx_thread_preempt_disable++;
 800abc4:	6813      	ldr	r3, [r2, #0]
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800abc6:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
            _tx_thread_preempt_disable++;
 800abca:	4423      	add	r3, r4
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	f381 8810 	msr	PRIMASK, r1
}
 800abd2:	f85d 4b04 	ldr.w	r4, [sp], #4
            _tx_thread_system_resume(thread_ptr);
 800abd6:	f002 bf85 	b.w	800dae4 <_tx_thread_system_resume>
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800abda:	659c      	str	r4, [r3, #88]	; 0x58
 800abdc:	e7ea      	b.n	800abb4 <_nx_udp_receive_cleanup+0x3c>
 800abde:	bf00      	nop
 800abe0:	55445020 	.word	0x55445020
 800abe4:	20019244 	.word	0x20019244

0800abe8 <_nx_udp_socket_send>:
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 800abe8:	b510      	push	{r4, lr}
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800abea:	2404      	movs	r4, #4
{
 800abec:	b086      	sub	sp, #24
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 800abee:	9202      	str	r2, [sp, #8]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800abf0:	eb0d 0204 	add.w	r2, sp, r4
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800abf4:	9401      	str	r4, [sp, #4]
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800abf6:	f000 f84b 	bl	800ac90 <_nxd_udp_socket_send>
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800abfa:	b006      	add	sp, #24
 800abfc:	bd10      	pop	{r4, pc}
 800abfe:	bf00      	nop

0800ac00 <_nxd_ipv6_find_max_prefix_length>:
/*                                                                        */
/*  05-19-2020     Yuxin Zhou               Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_find_max_prefix_length(ULONG *addr1, ULONG *addr2, UINT max_length)
{
 800ac00:	b470      	push	{r4, r5, r6}
UINT length = 0;
UINT i, j, bit, time;

    for (i = 0; i < 4; i++)
    {
        if (addr1[i] == addr2[i])
 800ac02:	680b      	ldr	r3, [r1, #0]
 800ac04:	6804      	ldr	r4, [r0, #0]
 800ac06:	429c      	cmp	r4, r3
 800ac08:	d10e      	bne.n	800ac28 <_nxd_ipv6_find_max_prefix_length+0x28>
 800ac0a:	6844      	ldr	r4, [r0, #4]
 800ac0c:	684b      	ldr	r3, [r1, #4]
 800ac0e:	429c      	cmp	r4, r3
 800ac10:	d137      	bne.n	800ac82 <_nxd_ipv6_find_max_prefix_length+0x82>
 800ac12:	6884      	ldr	r4, [r0, #8]
 800ac14:	688b      	ldr	r3, [r1, #8]
 800ac16:	429c      	cmp	r4, r3
 800ac18:	d135      	bne.n	800ac86 <_nxd_ipv6_find_max_prefix_length+0x86>
 800ac1a:	68c4      	ldr	r4, [r0, #12]
 800ac1c:	68cb      	ldr	r3, [r1, #12]
 800ac1e:	429c      	cmp	r4, r3
 800ac20:	d133      	bne.n	800ac8a <_nxd_ipv6_find_max_prefix_length+0x8a>
        {
            length += 32;
 800ac22:	2080      	movs	r0, #128	; 0x80
        }
    }


    return(length);
}
 800ac24:	bc70      	pop	{r4, r5, r6}
 800ac26:	4770      	bx	lr
UINT length = 0;
 800ac28:	2000      	movs	r0, #0
        else if (length + 31 < max_length)
 800ac2a:	f100 011f 	add.w	r1, r0, #31
 800ac2e:	4291      	cmp	r1, r2
 800ac30:	d3f8      	bcc.n	800ac24 <_nxd_ipv6_find_max_prefix_length+0x24>
                if (addr1[i] >> bit == addr2[i] >> bit)
 800ac32:	0c22      	lsrs	r2, r4, #16
 800ac34:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
                    bit += time;
 800ac38:	bf0c      	ite	eq
 800ac3a:	2208      	moveq	r2, #8
 800ac3c:	2218      	movne	r2, #24
                if (addr1[i] >> bit == addr2[i] >> bit)
 800ac3e:	fa24 f602 	lsr.w	r6, r4, r2
 800ac42:	fa23 f502 	lsr.w	r5, r3, r2
 800ac46:	42ae      	cmp	r6, r5
                    bit += time;
 800ac48:	bf14      	ite	ne
 800ac4a:	3204      	addne	r2, #4
                    bit -= time;
 800ac4c:	3a04      	subeq	r2, #4
                if (addr1[i] >> bit == addr2[i] >> bit)
 800ac4e:	fa24 f502 	lsr.w	r5, r4, r2
 800ac52:	fa23 f602 	lsr.w	r6, r3, r2
 800ac56:	42b5      	cmp	r5, r6
                    bit += time;
 800ac58:	bf14      	ite	ne
 800ac5a:	3202      	addne	r2, #2
                    bit -= time;
 800ac5c:	3a02      	subeq	r2, #2
                if (addr1[i] >> bit == addr2[i] >> bit)
 800ac5e:	fa24 f502 	lsr.w	r5, r4, r2
 800ac62:	fa23 f602 	lsr.w	r6, r3, r2
 800ac66:	42b5      	cmp	r5, r6
                    bit += time;
 800ac68:	bf14      	ite	ne
 800ac6a:	3201      	addne	r2, #1
                    bit -= time;
 800ac6c:	f102 32ff 	addeq.w	r2, r2, #4294967295
                if (addr1[i] >> bit == addr2[i] >> bit)
 800ac70:	40d4      	lsrs	r4, r2
 800ac72:	40d3      	lsrs	r3, r2
 800ac74:	429c      	cmp	r4, r3
 800ac76:	d001      	beq.n	800ac7c <_nxd_ipv6_find_max_prefix_length+0x7c>
                    length += (31 - bit);
 800ac78:	1a88      	subs	r0, r1, r2
                    break;
 800ac7a:	e7d3      	b.n	800ac24 <_nxd_ipv6_find_max_prefix_length+0x24>
 800ac7c:	3020      	adds	r0, #32
                        length += (32 - bit);
 800ac7e:	1a80      	subs	r0, r0, r2
 800ac80:	e7d0      	b.n	800ac24 <_nxd_ipv6_find_max_prefix_length+0x24>
            length += 32;
 800ac82:	2020      	movs	r0, #32
 800ac84:	e7d1      	b.n	800ac2a <_nxd_ipv6_find_max_prefix_length+0x2a>
 800ac86:	2040      	movs	r0, #64	; 0x40
 800ac88:	e7cf      	b.n	800ac2a <_nxd_ipv6_find_max_prefix_length+0x2a>
 800ac8a:	2060      	movs	r0, #96	; 0x60
 800ac8c:	e7cd      	b.n	800ac2a <_nxd_ipv6_find_max_prefix_length+0x2a>
 800ac8e:	bf00      	nop

0800ac90 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800ac94:	f04f 0e00 	mov.w	lr, #0
{
 800ac98:	b087      	sub	sp, #28
ULONG          next_hop_address = 0;
 800ac9a:	f8cd e014 	str.w	lr, [sp, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ac9e:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800aca2:	b672      	cpsid	i

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800aca4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800aca6:	2d00      	cmp	r5, #0
 800aca8:	f000 8093 	beq.w	800add2 <_nxd_udp_socket_send+0x142>
 800acac:	469b      	mov	fp, r3
 800acae:	4616      	mov	r6, r2
 800acb0:	460c      	mov	r4, r1
 800acb2:	4605      	mov	r5, r0
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800acb4:	68c7      	ldr	r7, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800acb6:	f38c 8810 	msr	PRIMASK, ip

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800acba:	f8d2 c000 	ldr.w	ip, [r2]
 800acbe:	f1bc 0f04 	cmp.w	ip, #4
 800acc2:	d072      	beq.n	800adaa <_nxd_udp_socket_send+0x11a>
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
    }
#endif /* NX_DISABLE_IPV4 */

#ifdef FEATURE_NX_IPV6
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800acc4:	f1bc 0f06 	cmp.w	ip, #6
 800acc8:	d044      	beq.n	800ad54 <_nxd_udp_socket_send+0xc4>
NX_INTERFACE  *interface_ptr = NX_NULL;
 800acca:	4673      	mov	r3, lr
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800accc:	46f0      	mov	r8, lr
 800acce:	46f1      	mov	r9, lr
    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800acd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800acd2:	f884 c030 	strb.w	ip, [r4, #48]	; 0x30
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800acd6:	3208      	adds	r2, #8
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800acd8:	68a8      	ldr	r0, [r5, #8]
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800acda:	f8d4 a008 	ldr.w	sl, [r4, #8]
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800acde:	ea4b 4b00 	orr.w	fp, fp, r0, lsl #16
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800ace2:	6262      	str	r2, [r4, #36]	; 0x24

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800ace4:	ea4f 4e02 	mov.w	lr, r2, lsl #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ace8:	ea8b 403b 	eor.w	r0, fp, fp, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800acec:	ea4e 413e 	orr.w	r1, lr, lr, ror #16
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800acf0:	0a00      	lsrs	r0, r0, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800acf2:	0a09      	lsrs	r1, r1, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800acf4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800acf8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800acfc:	ea80 203b 	eor.w	r0, r0, fp, ror #8
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800ad00:	f1aa 0b08 	sub.w	fp, sl, #8
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ad04:	ea81 213e 	eor.w	r1, r1, lr, ror #8
       Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
       driver is able to compute UDP checksum in hardware, let the driver handle the checksum
       computation.
     */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800ad08:	f8d5 e038 	ldr.w	lr, [r5, #56]	; 0x38
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800ad0c:	f8c4 b008 	str.w	fp, [r4, #8]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ad10:	e94a 0102 	strd	r0, r1, [sl, #-8]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800ad14:	f1be 0f00 	cmp.w	lr, #0
 800ad18:	d002      	beq.n	800ad20 <_nxd_udp_socket_send+0x90>
 800ad1a:	f1bc 0f06 	cmp.w	ip, #6
 800ad1e:	d106      	bne.n	800ad2e <_nxd_udp_socket_send+0x9e>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	06db      	lsls	r3, r3, #27
 800ad24:	d51f      	bpl.n	800ad66 <_nxd_udp_socket_send+0xd6>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 800ad26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad28:	f043 0310 	orr.w	r3, r3, #16
 800ad2c:	63e3      	str	r3, [r4, #60]	; 0x3c
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ad2e:	f207 6a3c 	addw	sl, r7, #1596	; 0x63c
 800ad32:	f04f 31ff 	mov.w	r1, #4294967295
 800ad36:	4650      	mov	r0, sl
 800ad38:	f002 fb2a 	bl	800d390 <_tx_mutex_get>

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800ad3c:	6833      	ldr	r3, [r6, #0]
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d05b      	beq.n	800adfa <_nxd_udp_socket_send+0x16a>
                           next_hop_address);
    }
#endif /* NX_DISABLE_IPV4 */

#ifdef FEATURE_NX_IPV6
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800ad42:	2b06      	cmp	r3, #6
 800ad44:	d04b      	beq.n	800adde <_nxd_udp_socket_send+0x14e>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ad46:	4650      	mov	r0, sl
 800ad48:	f002 fc0c 	bl	800d564 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800ad4c:	2000      	movs	r0, #0
}
 800ad4e:	b007      	add	sp, #28
 800ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr == NX_NULL)
 800ad54:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ad56:	f102 0804 	add.w	r8, r2, #4
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d05e      	beq.n	800ae1c <_nxd_udp_socket_send+0x18c>
        ip_src_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address;
 800ad5e:	f103 0908 	add.w	r9, r3, #8
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	e7b4      	b.n	800acd0 <_nxd_udp_socket_send+0x40>
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800ad66:	464b      	mov	r3, r9
 800ad68:	2111      	movs	r1, #17
 800ad6a:	f8cd 8000 	str.w	r8, [sp]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f7f7 f828 	bl	8001dc4 <_nx_ip_checksum_compute>
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ad74:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 800ad78:	43c3      	mvns	r3, r0
            if (checksum == 0)
 800ad7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ad7e:	ea82 4032 	eor.w	r0, r2, r2, ror #16
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	0a00      	lsrs	r0, r0, #8
            if (checksum == 0)
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	bf08      	it	eq
 800ad8a:	460b      	moveq	r3, r1
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ad8c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800ad90:	ea80 2032 	eor.w	r0, r0, r2, ror #8
            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800ad94:	4318      	orrs	r0, r3
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ad96:	ea80 4330 	eor.w	r3, r0, r0, ror #16
 800ad9a:	0a1b      	lsrs	r3, r3, #8
 800ad9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ada0:	ea83 2030 	eor.w	r0, r3, r0, ror #8
 800ada4:	f84a 0c04 	str.w	r0, [sl, #-4]
 800ada8:	e7c1      	b.n	800ad2e <_nxd_udp_socket_send+0x9e>
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800adaa:	ab05      	add	r3, sp, #20
 800adac:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800adb0:	4638      	mov	r0, r7
 800adb2:	6871      	ldr	r1, [r6, #4]
 800adb4:	f7f7 f9f0 	bl	8002198 <_nx_ip_route_find>
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800adb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d03a      	beq.n	800ae34 <_nxd_udp_socket_send+0x1a4>
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800adbe:	f8d6 c000 	ldr.w	ip, [r6]
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800adc2:	f106 0804 	add.w	r8, r6, #4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V6)
 800adc6:	f1bc 0f06 	cmp.w	ip, #6
 800adca:	d0c8      	beq.n	800ad5e <_nxd_udp_socket_send+0xce>
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800adcc:	f103 0914 	add.w	r9, r3, #20
 800add0:	e77e      	b.n	800acd0 <_nxd_udp_socket_send+0x40>
 800add2:	f38c 8810 	msr	PRIMASK, ip
        return(NX_NOT_BOUND);
 800add6:	2024      	movs	r0, #36	; 0x24
}
 800add8:	b007      	add	sp, #28
 800adda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_UDP,
 800adde:	f8cd 8008 	str.w	r8, [sp, #8]
 800ade2:	4638      	mov	r0, r7
 800ade4:	f8cd 9004 	str.w	r9, [sp, #4]
 800ade8:	4621      	mov	r1, r4
 800adea:	f8d7 5ee8 	ldr.w	r5, [r7, #3816]	; 0xee8
 800adee:	2211      	movs	r2, #17
 800adf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adf2:	9500      	str	r5, [sp, #0]
 800adf4:	f7fc fab0 	bl	8007358 <_nx_ipv6_packet_send>
 800adf8:	e7a5      	b.n	800ad46 <_nxd_udp_socket_send+0xb6>
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800adfa:	f44f 1088 	mov.w	r0, #1114112	; 0x110000
 800adfe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ae00:	6872      	ldr	r2, [r6, #4]
 800ae02:	9905      	ldr	r1, [sp, #20]
 800ae04:	9001      	str	r0, [sp, #4]
 800ae06:	e9d5 500c 	ldrd	r5, r0, [r5, #48]	; 0x30
 800ae0a:	9103      	str	r1, [sp, #12]
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	9002      	str	r0, [sp, #8]
 800ae10:	4638      	mov	r0, r7
 800ae12:	9500      	str	r5, [sp, #0]
 800ae14:	f7f7 f980 	bl	8002118 <_nx_ip_packet_send>
 800ae18:	6833      	ldr	r3, [r6, #0]
 800ae1a:	e792      	b.n	800ad42 <_nxd_udp_socket_send+0xb2>
            status = _nxd_ipv6_interface_find(ip_ptr, ip_address -> nxd_ip_address.v6,
 800ae1c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ae20:	4638      	mov	r0, r7
 800ae22:	4641      	mov	r1, r8
 800ae24:	f7fe fd04 	bl	8009830 <_nxd_ipv6_interface_find>
            if (status != NX_SUCCESS)
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d190      	bne.n	800ad4e <_nxd_udp_socket_send+0xbe>
 800ae2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae2e:	f8d6 c000 	ldr.w	ip, [r6]
 800ae32:	e794      	b.n	800ad5e <_nxd_udp_socket_send+0xce>
            return(NX_IP_ADDRESS_ERROR);
 800ae34:	2021      	movs	r0, #33	; 0x21
 800ae36:	e78a      	b.n	800ad4e <_nxd_udp_socket_send+0xbe>

0800ae38 <BSP_SDRAM_MspInit>:
{
	static DMA_HandleTypeDef dma_handle;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 800ae38:	4b53      	ldr	r3, [pc, #332]	; (800af88 <BSP_SDRAM_MspInit+0x150>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Common GPIO configuration */
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800ae3a:	2102      	movs	r1, #2
	__HAL_RCC_FMC_CLK_ENABLE();
 800ae3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae3e:	f042 0201 	orr.w	r2, r2, #1
{
 800ae42:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_FMC_CLK_ENABLE();
 800ae44:	639a      	str	r2, [r3, #56]	; 0x38
{
 800ae46:	4606      	mov	r6, r0
	__HAL_RCC_FMC_CLK_ENABLE();
 800ae48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	gpio_init_structure.Pull = GPIO_PULLUP;
 800ae4a:	2001      	movs	r0, #1
{
 800ae4c:	b08e      	sub	sp, #56	; 0x38
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Alternate = GPIO_AF12_FMC;

	/* GPIOC configuration */
	gpio_init_structure.Pin = GPIO_PIN_3;
 800ae4e:	2508      	movs	r5, #8
	__HAL_RCC_FMC_CLK_ENABLE();
 800ae50:	4002      	ands	r2, r0
	gpio_init_structure.Pin = GPIO_PIN_3;
 800ae52:	ac0e      	add	r4, sp, #56	; 0x38
	__HAL_RCC_FMC_CLK_ENABLE();
 800ae54:	9201      	str	r2, [sp, #4]
 800ae56:	9a01      	ldr	r2, [sp, #4]
	__DMAx_CLK_ENABLE()
 800ae58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae5a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ae5e:	631a      	str	r2, [r3, #48]	; 0x30
 800ae60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae62:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800ae66:	9202      	str	r2, [sp, #8]
 800ae68:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800ae6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae6c:	f042 0204 	orr.w	r2, r2, #4
 800ae70:	631a      	str	r2, [r3, #48]	; 0x30
 800ae72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae74:	f002 0204 	and.w	r2, r2, #4
 800ae78:	9203      	str	r2, [sp, #12]
 800ae7a:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800ae7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae7e:	432a      	orrs	r2, r5
 800ae80:	631a      	str	r2, [r3, #48]	; 0x30
 800ae82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae84:	402a      	ands	r2, r5
 800ae86:	9204      	str	r2, [sp, #16]
 800ae88:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800ae8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae8c:	f042 0210 	orr.w	r2, r2, #16
 800ae90:	631a      	str	r2, [r3, #48]	; 0x30
 800ae92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae94:	f002 0210 	and.w	r2, r2, #16
 800ae98:	9205      	str	r2, [sp, #20]
 800ae9a:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800ae9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae9e:	f042 0220 	orr.w	r2, r2, #32
 800aea2:	631a      	str	r2, [r3, #48]	; 0x30
 800aea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea6:	f002 0220 	and.w	r2, r2, #32
 800aeaa:	9206      	str	r2, [sp, #24]
 800aeac:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800aeae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeb4:	631a      	str	r2, [r3, #48]	; 0x30
 800aeb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeb8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800aebc:	9207      	str	r2, [sp, #28]
 800aebe:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800aec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800aec8:	220c      	movs	r2, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800aeca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_init_structure.Pin = GPIO_PIN_3;
 800aecc:	f844 5d14 	str.w	r5, [r4, #-20]!
	/* GPIOH configuration */
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);

	/* Configure common DMA parameters */
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 800aed0:	2500      	movs	r5, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800aed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800aed6:	910a      	str	r1, [sp, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800aed8:	910c      	str	r1, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800aeda:	4621      	mov	r1, r4
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800aedc:	9308      	str	r3, [sp, #32]
	gpio_init_structure.Pull = GPIO_PULLUP;
 800aede:	900b      	str	r0, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800aee0:	482a      	ldr	r0, [pc, #168]	; (800af8c <BSP_SDRAM_MspInit+0x154>)
	gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800aee2:	920d      	str	r2, [sp, #52]	; 0x34
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800aee4:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800aee6:	f000 fd83 	bl	800b9f0 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800aeea:	f24c 7303 	movw	r3, #50947	; 0xc703
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800aeee:	4621      	mov	r1, r4
 800aef0:	4827      	ldr	r0, [pc, #156]	; (800af90 <BSP_SDRAM_MspInit+0x158>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800aef2:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800aef4:	f000 fd7c 	bl	800b9f0 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 800aef8:	f64f 7383 	movw	r3, #65411	; 0xff83
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800aefc:	4621      	mov	r1, r4
 800aefe:	4825      	ldr	r0, [pc, #148]	; (800af94 <BSP_SDRAM_MspInit+0x15c>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 800af00:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800af02:	f000 fd75 	bl	800b9f0 <HAL_GPIO_Init>
	gpio_init_structure.Pin =
 800af06:	f64f 033f 	movw	r3, #63551	; 0xf83f
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800af0a:	4621      	mov	r1, r4
 800af0c:	4822      	ldr	r0, [pc, #136]	; (800af98 <BSP_SDRAM_MspInit+0x160>)
	gpio_init_structure.Pin =
 800af0e:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800af10:	f000 fd6e 	bl	800b9f0 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 800af14:	f248 1333 	movw	r3, #33075	; 0x8133
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800af18:	4621      	mov	r1, r4
 800af1a:	4820      	ldr	r0, [pc, #128]	; (800af9c <BSP_SDRAM_MspInit+0x164>)
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 800af1c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800af1e:	f000 fd67 	bl	800b9f0 <HAL_GPIO_Init>
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 800af22:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800af24:	4621      	mov	r1, r4
 800af26:	481e      	ldr	r0, [pc, #120]	; (800afa0 <BSP_SDRAM_MspInit+0x168>)
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 800af28:	4c1e      	ldr	r4, [pc, #120]	; (800afa4 <BSP_SDRAM_MspInit+0x16c>)
	gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 800af2a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800af2c:	f000 fd60 	bl	800b9f0 <HAL_GPIO_Init>
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 800af30:	f44f 7300 	mov.w	r3, #512	; 0x200
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800af34:	2180      	movs	r1, #128	; 0x80
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 800af36:	f44f 6280 	mov.w	r2, #1024	; 0x400
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800af3a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	dma_handle.Init.PeriphInc = DMA_PINC_ENABLE;
 800af3e:	60e3      	str	r3, [r4, #12]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	dma_handle.Init.Mode = DMA_NORMAL;
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 800af40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	dma_handle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800af44:	60a1      	str	r1, [r4, #8]
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800af46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 800af4a:	6122      	str	r2, [r4, #16]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800af4c:	2203      	movs	r2, #3
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 800af4e:	6223      	str	r3, [r4, #32]
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;

	dma_handle.Instance = SDRAM_DMAx_STREAM;
 800af50:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <BSP_SDRAM_MspInit+0x170>)
	dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800af52:	6325      	str	r5, [r4, #48]	; 0x30
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800af54:	6160      	str	r0, [r4, #20]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsdram, hdma, dma_handle);

	/* Deinitialize the stream for new transfer */
	HAL_DMA_DeInit(&dma_handle);
 800af56:	4620      	mov	r0, r4
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 800af58:	6334      	str	r4, [r6, #48]	; 0x30
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800af5a:	61a1      	str	r1, [r4, #24]
	dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800af5c:	62a2      	str	r2, [r4, #40]	; 0x28
	dma_handle.Init.Mode = DMA_NORMAL;
 800af5e:	61e5      	str	r5, [r4, #28]
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af60:	6265      	str	r5, [r4, #36]	; 0x24
	dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 800af62:	62e5      	str	r5, [r4, #44]	; 0x2c
	__HAL_LINKDMA(hsdram, hdma, dma_handle);
 800af64:	63a6      	str	r6, [r4, #56]	; 0x38
	dma_handle.Init.Channel = SDRAM_DMAx_CHANNEL;
 800af66:	e9c4 3500 	strd	r3, r5, [r4]
	HAL_DMA_DeInit(&dma_handle);
 800af6a:	f000 fa1b 	bl	800b3a4 <HAL_DMA_DeInit>

	/* Configure the DMA stream */
	HAL_DMA_Init(&dma_handle);
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 f97c 	bl	800b26c <HAL_DMA_Init>

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800af74:	462a      	mov	r2, r5
 800af76:	210f      	movs	r1, #15
 800af78:	2038      	movs	r0, #56	; 0x38
 800af7a:	f000 f8e9 	bl	800b150 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800af7e:	2038      	movs	r0, #56	; 0x38
 800af80:	f000 f91c 	bl	800b1bc <HAL_NVIC_EnableIRQ>
}
 800af84:	b00e      	add	sp, #56	; 0x38
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	40023800 	.word	0x40023800
 800af8c:	40020800 	.word	0x40020800
 800af90:	40020c00 	.word	0x40020c00
 800af94:	40021000 	.word	0x40021000
 800af98:	40021400 	.word	0x40021400
 800af9c:	40021800 	.word	0x40021800
 800afa0:	40021c00 	.word	0x40021c00
 800afa4:	2000159c 	.word	0x2000159c
 800afa8:	40026410 	.word	0x40026410

0800afac <BSP_SDRAM_Init>:
{
 800afac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800afb0:	483d      	ldr	r0, [pc, #244]	; (800b0a8 <BSP_SDRAM_Init+0xfc>)
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 800afb2:	2600      	movs	r6, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800afb4:	4d3d      	ldr	r5, [pc, #244]	; (800b0ac <BSP_SDRAM_Init+0x100>)
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800afb6:	2140      	movs	r1, #64	; 0x40
	Timing.LoadToActiveDelay = 2;
 800afb8:	4c3d      	ldr	r4, [pc, #244]	; (800b0b0 <BSP_SDRAM_Init+0x104>)
	sdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 800afba:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 800afbe:	f04f 0810 	mov.w	r8, #16
	Timing.LoadToActiveDelay = 2;
 800afc2:	f04f 0902 	mov.w	r9, #2
	Timing.ExitSelfRefreshDelay = 7;
 800afc6:	2307      	movs	r3, #7
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800afc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	Timing.SelfRefreshTime = 4;
 800afcc:	f04f 0a04 	mov.w	sl, #4
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800afd0:	f44f 7780 	mov.w	r7, #256	; 0x100
{
 800afd4:	b083      	sub	sp, #12
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800afd6:	6028      	str	r0, [r5, #0]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800afd8:	6169      	str	r1, [r5, #20]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800afda:	4628      	mov	r0, r5
 800afdc:	4631      	mov	r1, r6
	Timing.ExitSelfRefreshDelay = 7;
 800afde:	6063      	str	r3, [r4, #4]
	Timing.RowCycleDelay = 7;
 800afe0:	60e3      	str	r3, [r4, #12]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800afe2:	61af      	str	r7, [r5, #24]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800afe4:	2701      	movs	r7, #1
	Timing.SelfRefreshTime = 4;
 800afe6:	f8c4 a008 	str.w	sl, [r4, #8]
	Timing.LoadToActiveDelay = 2;
 800afea:	f8c4 9000 	str.w	r9, [r4]
	Timing.RCDDelay = 2;
 800afee:	f8c4 9018 	str.w	r9, [r4, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800aff2:	61ee      	str	r6, [r5, #28]
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800aff4:	62ae      	str	r6, [r5, #40]	; 0x28
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800aff6:	f8c5 a00c 	str.w	sl, [r5, #12]
	sdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 800affa:	f8c5 8010 	str.w	r8, [r5, #16]
 800affe:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800b0b8 <BSP_SDRAM_Init+0x10c>
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800b002:	e9c5 c208 	strd	ip, r2, [r5, #32]
	Timing.RPDelay = 2;
 800b006:	e9c4 9904 	strd	r9, r9, [r4, #16]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b00a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800b00e:	f7ff ff13 	bl	800ae38 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800b012:	4621      	mov	r1, r4
 800b014:	4628      	mov	r0, r5
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800b016:	4c27      	ldr	r4, [pc, #156]	; (800b0b4 <BSP_SDRAM_Init+0x108>)
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800b018:	f001 f9da 	bl	800c3d0 <HAL_SDRAM_Init>
 800b01c:	1b83      	subs	r3, r0, r6
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b01e:	4621      	mov	r1, r4
 800b020:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800b024:	bf18      	it	ne
 800b026:	2301      	movne	r3, #1
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b028:	4628      	mov	r0, r5
	__IO uint32_t tmpmrd = 0;
 800b02a:	9601      	str	r6, [sp, #4]
	if (HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800b02c:	f88b 3000 	strb.w	r3, [fp]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b030:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 800b034:	60e6      	str	r6, [r4, #12]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800b036:	6027      	str	r7, [r4, #0]
	Command.AutoRefreshNumber = 1;
 800b038:	60a7      	str	r7, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b03a:	f001 f9eb 	bl	800c414 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 800b03e:	4638      	mov	r0, r7
 800b040:	f000 f860 	bl	800b104 <HAL_Delay>
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b044:	4621      	mov	r1, r4
 800b046:	4628      	mov	r0, r5
 800b048:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b04c:	e9c4 9800 	strd	r9, r8, [r4]
	Command.ModeRegisterDefinition = 0;
 800b050:	e9c4 7602 	strd	r7, r6, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b054:	f001 f9de 	bl	800c414 <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800b058:	f04f 0c03 	mov.w	ip, #3
	Command.AutoRefreshNumber = 8;
 800b05c:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b05e:	4621      	mov	r1, r4
 800b060:	4628      	mov	r0, r5
 800b062:	f64f 72ff 	movw	r2, #65535	; 0xffff
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800b066:	f8c4 c000 	str.w	ip, [r4]
	Command.AutoRefreshNumber = 8;
 800b06a:	60a3      	str	r3, [r4, #8]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b06c:	f8c4 8004 	str.w	r8, [r4, #4]
	Command.ModeRegisterDefinition = 0;
 800b070:	60e6      	str	r6, [r4, #12]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b072:	f001 f9cf 	bl	800c414 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 800b076:	f44f 7308 	mov.w	r3, #544	; 0x220
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b07a:	4621      	mov	r1, r4
 800b07c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b080:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |\
 800b082:	9301      	str	r3, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 800b084:	9b01      	ldr	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800b086:	e9c4 a800 	strd	sl, r8, [r4]
	Command.ModeRegisterDefinition = tmpmrd;
 800b08a:	e9c4 7302 	strd	r7, r3, [r4, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800b08e:	f001 f9c1 	bl	800c414 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 800b092:	4628      	mov	r0, r5
 800b094:	f240 6103 	movw	r1, #1539	; 0x603
 800b098:	f001 f9d6 	bl	800c448 <HAL_SDRAM_ProgramRefreshRate>
}
 800b09c:	f89b 0000 	ldrb.w	r0, [fp]
 800b0a0:	b003      	add	sp, #12
 800b0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a6:	bf00      	nop
 800b0a8:	a0000140 	.word	0xa0000140
 800b0ac:	20019100 	.word	0x20019100
 800b0b0:	20001580 	.word	0x20001580
 800b0b4:	20001570 	.word	0x20001570
 800b0b8:	2000006f 	.word	0x2000006f

0800b0bc <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800b0bc:	4a07      	ldr	r2, [pc, #28]	; (800b0dc <HAL_Init+0x20>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b0be:	2003      	movs	r0, #3
{
 800b0c0:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800b0c2:	6813      	ldr	r3, [r2, #0]
 800b0c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b0ca:	f000 f82d 	bl	800b128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b0ce:	200f      	movs	r0, #15
 800b0d0:	f001 f9ce 	bl	800c470 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800b0d4:	f000 fd92 	bl	800bbfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800b0d8:	2000      	movs	r0, #0
 800b0da:	bd08      	pop	{r3, pc}
 800b0dc:	40023c00 	.word	0x40023c00

0800b0e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800b0e0:	4a03      	ldr	r2, [pc, #12]	; (800b0f0 <HAL_IncTick+0x10>)
 800b0e2:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <HAL_IncTick+0x14>)
 800b0e4:	6811      	ldr	r1, [r2, #0]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	440b      	add	r3, r1
 800b0ea:	6013      	str	r3, [r2, #0]
}
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	20019134 	.word	0x20019134
 800b0f4:	20000070 	.word	0x20000070

0800b0f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b0f8:	4b01      	ldr	r3, [pc, #4]	; (800b100 <HAL_GetTick+0x8>)
 800b0fa:	6818      	ldr	r0, [r3, #0]
}
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	20019134 	.word	0x20019134

0800b104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b108:	f7ff fff6 	bl	800b0f8 <HAL_GetTick>
 800b10c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b10e:	1c63      	adds	r3, r4, #1
 800b110:	d002      	beq.n	800b118 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800b112:	4b04      	ldr	r3, [pc, #16]	; (800b124 <HAL_Delay+0x20>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b118:	f7ff ffee 	bl	800b0f8 <HAL_GetTick>
 800b11c:	1b40      	subs	r0, r0, r5
 800b11e:	42a0      	cmp	r0, r4
 800b120:	d3fa      	bcc.n	800b118 <HAL_Delay+0x14>
  {
  }
}
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	20000070 	.word	0x20000070

0800b128 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b128:	4907      	ldr	r1, [pc, #28]	; (800b148 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b12a:	0200      	lsls	r0, r0, #8
 800b12c:	4b07      	ldr	r3, [pc, #28]	; (800b14c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b12e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b130:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b134:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b136:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800b13a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b13c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b140:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b142:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 800b144:	60c8      	str	r0, [r1, #12]
 800b146:	4770      	bx	lr
 800b148:	e000ed00 	.word	0xe000ed00
 800b14c:	05fa0000 	.word	0x05fa0000

0800b150 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b150:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <HAL_NVIC_SetPriority+0x60>)
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b158:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b15a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b15e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b160:	2d04      	cmp	r5, #4
 800b162:	bf28      	it	cs
 800b164:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b166:	2c06      	cmp	r4, #6
 800b168:	d918      	bls.n	800b19c <HAL_NVIC_SetPriority+0x4c>
 800b16a:	3b03      	subs	r3, #3
 800b16c:	f04f 34ff 	mov.w	r4, #4294967295
 800b170:	409c      	lsls	r4, r3
 800b172:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b176:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800b17a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b17c:	fa02 f205 	lsl.w	r2, r2, r5
 800b180:	ea21 0102 	bic.w	r1, r1, r2
 800b184:	fa01 f203 	lsl.w	r2, r1, r3
 800b188:	ea42 0204 	orr.w	r2, r2, r4
 800b18c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800b190:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800b192:	db06      	blt.n	800b1a2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b194:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <HAL_NVIC_SetPriority+0x64>)
 800b196:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b198:	bc30      	pop	{r4, r5}
 800b19a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b19c:	2400      	movs	r4, #0
 800b19e:	4623      	mov	r3, r4
 800b1a0:	e7e9      	b.n	800b176 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1a2:	f000 000f 	and.w	r0, r0, #15
 800b1a6:	4b04      	ldr	r3, [pc, #16]	; (800b1b8 <HAL_NVIC_SetPriority+0x68>)
 800b1a8:	541a      	strb	r2, [r3, r0]
 800b1aa:	bc30      	pop	{r4, r5}
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	e000ed00 	.word	0xe000ed00
 800b1b4:	e000e400 	.word	0xe000e400
 800b1b8:	e000ed14 	.word	0xe000ed14

0800b1bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	db07      	blt.n	800b1d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b1c0:	f000 011f 	and.w	r1, r0, #31
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	0940      	lsrs	r0, r0, #5
 800b1c8:	4a02      	ldr	r2, [pc, #8]	; (800b1d4 <HAL_NVIC_EnableIRQ+0x18>)
 800b1ca:	408b      	lsls	r3, r1
 800b1cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	e000e100 	.word	0xe000e100

0800b1d8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800b1d8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b1dc:	4a04      	ldr	r2, [pc, #16]	; (800b1f0 <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b1de:	2000      	movs	r0, #0
 800b1e0:	4904      	ldr	r1, [pc, #16]	; (800b1f4 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b1e2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b1e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1e8:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800b1ea:	6048      	str	r0, [r1, #4]
}
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	e000ed00 	.word	0xe000ed00
 800b1f4:	e000ed90 	.word	0xe000ed90

0800b1f8 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b1f8:	4a06      	ldr	r2, [pc, #24]	; (800b214 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b1fa:	f040 0001 	orr.w	r0, r0, #1
 800b1fe:	4b06      	ldr	r3, [pc, #24]	; (800b218 <HAL_MPU_Enable+0x20>)
 800b200:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b202:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b208:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b20a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b20e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b212:	4770      	bx	lr
 800b214:	e000ed00 	.word	0xe000ed00
 800b218:	e000ed90 	.word	0xe000ed90

0800b21c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b21c:	4a12      	ldr	r2, [pc, #72]	; (800b268 <HAL_MPU_ConfigRegion+0x4c>)
 800b21e:	7843      	ldrb	r3, [r0, #1]
 800b220:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 800b222:	7801      	ldrb	r1, [r0, #0]
 800b224:	b911      	cbnz	r1, 800b22c <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800b226:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800b228:	6111      	str	r1, [r2, #16]
 800b22a:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 800b22c:	6843      	ldr	r3, [r0, #4]
{
 800b22e:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 800b230:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b232:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b234:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b236:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b238:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b23a:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b23c:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b240:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b242:	430b      	orrs	r3, r1
 800b244:	7a01      	ldrb	r1, [r0, #8]
 800b246:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b24a:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b24c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b250:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b252:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800b256:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800b25a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b25e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 800b262:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b264:	6113      	str	r3, [r2, #16]
}
 800b266:	4770      	bx	lr
 800b268:	e000ed90 	.word	0xe000ed90

0800b26c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800b270:	f7ff ff42 	bl	800b0f8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b274:	2c00      	cmp	r4, #0
 800b276:	d053      	beq.n	800b320 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b278:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b27a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800b27c:	2100      	movs	r1, #0
 800b27e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800b280:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800b284:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800b286:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800b28a:	f022 0201 	bic.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b290:	e005      	b.n	800b29e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b292:	f7ff ff31 	bl	800b0f8 <HAL_GetTick>
 800b296:	1b40      	subs	r0, r0, r5
 800b298:	2805      	cmp	r0, #5
 800b29a:	d83a      	bhi.n	800b312 <HAL_DMA_Init+0xa6>
 800b29c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	07d1      	lsls	r1, r2, #31
 800b2a2:	d4f6      	bmi.n	800b292 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b2a4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800b2a8:	68e1      	ldr	r1, [r4, #12]
 800b2aa:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 800b2ac:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2ae:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b2b2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2b4:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 800b2b6:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2b8:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2bc:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b2be:	4d35      	ldr	r5, [pc, #212]	; (800b394 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2c0:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b2c2:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2c4:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b2c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 800b2c8:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b2ca:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b2cc:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b2d0:	d028      	beq.n	800b324 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b2d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b2d4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b2d6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b2da:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	4d2e      	ldr	r5, [pc, #184]	; (800b398 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800b2e0:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b2e2:	3a10      	subs	r2, #16
 800b2e4:	492d      	ldr	r1, [pc, #180]	; (800b39c <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b2e6:	482e      	ldr	r0, [pc, #184]	; (800b3a0 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b2e8:	fba5 5202 	umull	r5, r2, r5, r2
 800b2ec:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 800b2ee:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b2f0:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2f2:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b2f4:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 800b2f6:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2f8:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b2fc:	bf88      	it	hi
 800b2fe:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b300:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b302:	4083      	lsls	r3, r0
  return HAL_OK;
 800b304:	4610      	mov	r0, r2
 800b306:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b308:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b30a:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800b30c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800b310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b312:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b314:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800b316:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b318:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b31a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b320:	2001      	movs	r0, #1
}
 800b322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b324:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800b328:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b32a:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 800b32e:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b332:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 800b334:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800b336:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b338:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800b33c:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b33e:	2d00      	cmp	r5, #0
 800b340:	d0cc      	beq.n	800b2dc <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b342:	b17e      	cbz	r6, 800b364 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b344:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800b348:	d016      	beq.n	800b378 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b34a:	2f02      	cmp	r7, #2
 800b34c:	d903      	bls.n	800b356 <HAL_DMA_Init+0xea>
 800b34e:	2f03      	cmp	r7, #3
 800b350:	d1c4      	bne.n	800b2dc <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b352:	01ea      	lsls	r2, r5, #7
 800b354:	d5c2      	bpl.n	800b2dc <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800b356:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b358:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800b35a:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b35c:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800b35e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800b364:	2f01      	cmp	r7, #1
 800b366:	d003      	beq.n	800b370 <HAL_DMA_Init+0x104>
 800b368:	d3f3      	bcc.n	800b352 <HAL_DMA_Init+0xe6>
 800b36a:	2f02      	cmp	r7, #2
 800b36c:	d1b6      	bne.n	800b2dc <HAL_DMA_Init+0x70>
 800b36e:	e7f0      	b.n	800b352 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b370:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800b374:	d1b2      	bne.n	800b2dc <HAL_DMA_Init+0x70>
 800b376:	e7ee      	b.n	800b356 <HAL_DMA_Init+0xea>
    switch (tmp)
 800b378:	2f03      	cmp	r7, #3
 800b37a:	d8af      	bhi.n	800b2dc <HAL_DMA_Init+0x70>
 800b37c:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <HAL_DMA_Init+0x118>)
 800b37e:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800b382:	bf00      	nop
 800b384:	0800b357 	.word	0x0800b357
 800b388:	0800b353 	.word	0x0800b353
 800b38c:	0800b357 	.word	0x0800b357
 800b390:	0800b371 	.word	0x0800b371
 800b394:	f010803f 	.word	0xf010803f
 800b398:	aaaaaaab 	.word	0xaaaaaaab
 800b39c:	fffffc00 	.word	0xfffffc00
 800b3a0:	0800fcac 	.word	0x0800fcac

0800b3a4 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d035      	beq.n	800b414 <HAL_DMA_DeInit+0x70>
 800b3a8:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b3aa:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800b3ae:	b2c0      	uxtb	r0, r0
 800b3b0:	2802      	cmp	r0, #2
 800b3b2:	d031      	beq.n	800b418 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 800b3b4:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 800b3b6:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b3b8:	b2d1      	uxtb	r1, r2
{
 800b3ba:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b3bc:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 800b3be:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b3c0:	4d16      	ldr	r5, [pc, #88]	; (800b41c <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800b3c2:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 800b3c4:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b3c8:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b3cc:	4d14      	ldr	r5, [pc, #80]	; (800b420 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 800b3ce:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b3d0:	0909      	lsrs	r1, r1, #4
 800b3d2:	4c14      	ldr	r4, [pc, #80]	; (800b424 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 800b3d4:	6010      	str	r0, [r2, #0]
 800b3d6:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b3d8:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 800b3da:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3dc:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 800b3e0:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b3e2:	bf88      	it	hi
 800b3e4:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 800b3e6:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3e8:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 800b3ea:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 800b3ec:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800b3ee:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 800b3f0:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b3f2:	65dd      	str	r5, [r3, #92]	; 0x5c
 800b3f4:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 800b3f6:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3f8:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3fa:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800b3fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800b400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 800b404:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800b408:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800b40c:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 800b410:	bc70      	pop	{r4, r5, r6}
 800b412:	4770      	bx	lr
    return HAL_ERROR;
 800b414:	2001      	movs	r0, #1
 800b416:	4770      	bx	lr
}
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	aaaaaaab 	.word	0xaaaaaaab
 800b420:	0800fcac 	.word	0x0800fcac
 800b424:	fffffc00 	.word	0xfffffc00

0800b428 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b42c:	2900      	cmp	r1, #0
 800b42e:	d164      	bne.n	800b4fa <ETH_MACDMAConfig+0xd2>
 800b430:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800b434:	430b      	orrs	r3, r1
 800b436:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800b43a:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b43c:	2001      	movs	r0, #1
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b43e:	69e5      	ldr	r5, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 800b440:	6816      	ldr	r6, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b442:	4b32      	ldr	r3, [pc, #200]	; (800b50c <ETH_MACDMAConfig+0xe4>)
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b444:	2d00      	cmp	r5, #0
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
    dmainit.DescriptorSkipLength = 0x0;
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800b446:	f241 0518 	movw	r5, #4120	; 0x1018
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b44a:	ea03 0306 	and.w	r3, r3, r6
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b44e:	f04f 0600 	mov.w	r6, #0
 800b452:	ea43 0301 	orr.w	r3, r3, r1
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800b456:	bf14      	ite	ne
 800b458:	4631      	movne	r1, r6
 800b45a:	f44f 6180 	moveq.w	r1, #1024	; 0x400
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800b45e:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800b460:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b462:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b464:	f7ff fe4e 	bl	800b104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800b468:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b46a:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b46c:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800b46e:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b470:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800b472:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b474:	f7ff fe46 	bl	800b104 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800b478:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b47a:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b47e:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800b480:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b482:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b484:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800b486:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b488:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800b48a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800b48e:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800b490:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b492:	f7ff fe37 	bl	800b104 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800b496:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b498:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800b49a:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b49c:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800b49e:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b4a0:	f7ff fe30 	bl	800b104 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800b4a4:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b4a6:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b4a8:	4919      	ldr	r1, [pc, #100]	; (800b510 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 800b4aa:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800b4ac:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b4ae:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b4b0:	4a18      	ldr	r2, [pc, #96]	; (800b514 <ETH_MACDMAConfig+0xec>)
 800b4b2:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800b4b4:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 800b4b6:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b4b8:	f7ff fe24 	bl	800b104 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800b4bc:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b4be:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b4c0:	4a15      	ldr	r2, [pc, #84]	; (800b518 <ETH_MACDMAConfig+0xf0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800b4c2:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4c8:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800b4ca:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b4cc:	f7ff fe1a 	bl	800b104 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800b4d0:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b4d2:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800b4d4:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b4d8:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 800b4da:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b4dc:	d105      	bne.n	800b4ea <ETH_MACDMAConfig+0xc2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800b4de:	f241 011c 	movw	r1, #4124	; 0x101c
 800b4e2:	4a0e      	ldr	r2, [pc, #56]	; (800b51c <ETH_MACDMAConfig+0xf4>)
 800b4e4:	5858      	ldr	r0, [r3, r1]
 800b4e6:	4302      	orrs	r2, r0
 800b4e8:	505a      	str	r2, [r3, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b4ea:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b4ec:	490c      	ldr	r1, [pc, #48]	; (800b520 <ETH_MACDMAConfig+0xf8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800b4ee:	8898      	ldrh	r0, [r3, #4]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800b4f0:	4a0c      	ldr	r2, [pc, #48]	; (800b524 <ETH_MACDMAConfig+0xfc>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b4f2:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800b4f4:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800b4f6:	6013      	str	r3, [r2, #0]
}
 800b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b4fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 800b4fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b502:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 800b506:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800b50a:	e796      	b.n	800b43a <ETH_MACDMAConfig+0x12>
 800b50c:	ff20810f 	.word	0xff20810f
 800b510:	f8de3f23 	.word	0xf8de3f23
 800b514:	02200004 	.word	0x02200004
 800b518:	02c12080 	.word	0x02c12080
 800b51c:	00010040 	.word	0x00010040
 800b520:	40028040 	.word	0x40028040
 800b524:	40028044 	.word	0x40028044

0800b528 <HAL_ETH_Init>:
  if(heth == NULL)
 800b528:	2800      	cmp	r0, #0
 800b52a:	f000 8088 	beq.w	800b63e <HAL_ETH_Init+0x116>
  if(heth->State == HAL_ETH_STATE_RESET)
 800b52e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 800b532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(heth->State == HAL_ETH_STATE_RESET)
 800b536:	f003 02ff 	and.w	r2, r3, #255	; 0xff
{
 800b53a:	b082      	sub	sp, #8
 800b53c:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d06f      	beq.n	800b622 <HAL_ETH_Init+0xfa>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b542:	4aae      	ldr	r2, [pc, #696]	; (800b7fc <HAL_ETH_Init+0x2d4>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b544:	6823      	ldr	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b546:	6c51      	ldr	r1, [r2, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b548:	48ad      	ldr	r0, [pc, #692]	; (800b800 <HAL_ETH_Init+0x2d8>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b54e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b552:	6451      	str	r1, [r2, #68]	; 0x44
 800b554:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b556:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b55a:	9201      	str	r2, [sp, #4]
 800b55c:	9a01      	ldr	r2, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b55e:	6842      	ldr	r2, [r0, #4]
 800b560:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b564:	6042      	str	r2, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b566:	6842      	ldr	r2, [r0, #4]
 800b568:	6a21      	ldr	r1, [r4, #32]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	6042      	str	r2, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	f042 0201 	orr.w	r2, r2, #1
 800b574:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800b576:	f7ff fdbf 	bl	800b0f8 <HAL_GetTick>
 800b57a:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b57c:	e005      	b.n	800b58a <HAL_ETH_Init+0x62>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800b57e:	f7ff fdbb 	bl	800b0f8 <HAL_GetTick>
 800b582:	1b40      	subs	r0, r0, r5
 800b584:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800b588:	d850      	bhi.n	800b62c <HAL_ETH_Init+0x104>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800b590:	6812      	ldr	r2, [r2, #0]
 800b592:	07d1      	lsls	r1, r2, #31
 800b594:	d4f3      	bmi.n	800b57e <HAL_ETH_Init+0x56>
  tempreg = (heth->Instance)->MACMIIAR;
 800b596:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800b598:	f000 fed0 	bl	800c33c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b59c:	4b99      	ldr	r3, [pc, #612]	; (800b804 <HAL_ETH_Init+0x2dc>)
 800b59e:	4a9a      	ldr	r2, [pc, #616]	; (800b808 <HAL_ETH_Init+0x2e0>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800b5a0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b5a4:	4403      	add	r3, r0
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d94b      	bls.n	800b642 <HAL_ETH_Init+0x11a>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800b5aa:	4b98      	ldr	r3, [pc, #608]	; (800b80c <HAL_ETH_Init+0x2e4>)
 800b5ac:	4a98      	ldr	r2, [pc, #608]	; (800b810 <HAL_ETH_Init+0x2e8>)
 800b5ae:	4403      	add	r3, r0
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d87b      	bhi.n	800b6ac <HAL_ETH_Init+0x184>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800b5b4:	f045 050c 	orr.w	r5, r5, #12
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b5b8:	6821      	ldr	r1, [r4, #0]
 800b5ba:	610d      	str	r5, [r1, #16]
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b5bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b5c0:	2b42      	cmp	r3, #66	; 0x42
 800b5c2:	d024      	beq.n	800b60e <HAL_ETH_Init+0xe6>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b5c4:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b5c6:	8a23      	ldrh	r3, [r4, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b5c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b5cc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b5d0:	02db      	lsls	r3, r3, #11
  tmpreg = heth->Instance->MACMIIAR;
 800b5d2:	690a      	ldr	r2, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b5d4:	b29b      	uxth	r3, r3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b5d6:	6148      	str	r0, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b5d8:	f002 021c 	and.w	r2, r2, #28
 800b5dc:	f042 0203 	orr.w	r2, r2, #3
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800b5e0:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 800b5e2:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 800b5e4:	f7ff fd88 	bl	800b0f8 <HAL_GetTick>
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	e004      	b.n	800b5f6 <HAL_ETH_Init+0xce>
    tmpreg = heth->Instance->MACMIIAR;
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	691d      	ldr	r5, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b5f0:	f015 0501 	ands.w	r5, r5, #1
 800b5f4:	d028      	beq.n	800b648 <HAL_ETH_Init+0x120>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b5f6:	f7ff fd7f 	bl	800b0f8 <HAL_GetTick>
 800b5fa:	1b80      	subs	r0, r0, r6
 800b5fc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b600:	d3f4      	bcc.n	800b5ec <HAL_ETH_Init+0xc4>
      heth->State= HAL_ETH_STATE_READY;
 800b602:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b604:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_READY;
 800b606:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b60a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      ETH_MACDMAConfig(heth, err);
 800b60e:	4620      	mov	r0, r4
 800b610:	2101      	movs	r1, #1
 800b612:	f7ff ff09 	bl	800b428 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800b616:	2001      	movs	r0, #1
 800b618:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
}
 800b61c:	b002      	add	sp, #8
 800b61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    heth->Lock = HAL_UNLOCKED;
 800b622:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800b626:	f000 faeb 	bl	800bc00 <HAL_ETH_MspInit>
 800b62a:	e78a      	b.n	800b542 <HAL_ETH_Init+0x1a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800b62c:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 800b62e:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800b630:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b634:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b638:	b002      	add	sp, #8
 800b63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 800b63e:	2001      	movs	r0, #1
}
 800b640:	4770      	bx	lr
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b642:	f045 0508 	orr.w	r5, r5, #8
 800b646:	e7b7      	b.n	800b5b8 <HAL_ETH_Init+0x90>
  heth->State = HAL_ETH_STATE_READY;
 800b648:	2701      	movs	r7, #1
  HAL_Delay(PHY_RESET_DELAY);
 800b64a:	f640 70ff 	movw	r0, #4095	; 0xfff
  heth->State = HAL_ETH_STATE_READY;
 800b64e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  HAL_Delay(PHY_RESET_DELAY);
 800b652:	f7ff fd57 	bl	800b104 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b656:	6863      	ldr	r3, [r4, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d136      	bne.n	800b6ca <HAL_ETH_Init+0x1a2>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b65c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b660:	2b42      	cmp	r3, #66	; 0x42
 800b662:	d0d4      	beq.n	800b60e <HAL_ETH_Init+0xe6>
  tmpreg = heth->Instance->MACMIIAR;
 800b664:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b666:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b668:	8a23      	ldrh	r3, [r4, #16]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b66a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800b66e:	68a2      	ldr	r2, [r4, #8]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b670:	02db      	lsls	r3, r3, #11
  tmpreg = heth->Instance->MACMIIAR;
 800b672:	6901      	ldr	r1, [r0, #16]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800b674:	68e5      	ldr	r5, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800b676:	0852      	lsrs	r2, r2, #1
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b678:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b67c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800b67e:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 800b682:	f041 0103 	orr.w	r1, r1, #3
 800b686:	b292      	uxth	r2, r2
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800b688:	430b      	orrs	r3, r1
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b68a:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg;
 800b68c:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b68e:	f7ff fd33 	bl	800b0f8 <HAL_GetTick>
 800b692:	4605      	mov	r5, r0
 800b694:	e003      	b.n	800b69e <HAL_ETH_Init+0x176>
    tmpreg = heth->Instance->MACMIIAR;
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b69a:	07db      	lsls	r3, r3, #31
 800b69c:	d573      	bpl.n	800b786 <HAL_ETH_Init+0x25e>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b69e:	f7ff fd2b 	bl	800b0f8 <HAL_GetTick>
 800b6a2:	1b40      	subs	r0, r0, r5
 800b6a4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b6a8:	d3f5      	bcc.n	800b696 <HAL_ETH_Init+0x16e>
 800b6aa:	e7aa      	b.n	800b602 <HAL_ETH_Init+0xda>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800b6ac:	4b59      	ldr	r3, [pc, #356]	; (800b814 <HAL_ETH_Init+0x2ec>)
 800b6ae:	4a5a      	ldr	r2, [pc, #360]	; (800b818 <HAL_ETH_Init+0x2f0>)
 800b6b0:	4403      	add	r3, r0
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d980      	bls.n	800b5b8 <HAL_ETH_Init+0x90>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800b6b6:	4b59      	ldr	r3, [pc, #356]	; (800b81c <HAL_ETH_Init+0x2f4>)
 800b6b8:	4a59      	ldr	r2, [pc, #356]	; (800b820 <HAL_ETH_Init+0x2f8>)
 800b6ba:	4403      	add	r3, r0
 800b6bc:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800b6be:	bf94      	ite	ls
 800b6c0:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800b6c4:	f045 0510 	orrhi.w	r5, r5, #16
 800b6c8:	e776      	b.n	800b5b8 <HAL_ETH_Init+0x90>
    tickstart = HAL_GetTick();
 800b6ca:	f7ff fd15 	bl	800b0f8 <HAL_GetTick>
      __HAL_UNLOCK(heth);
 800b6ce:	46aa      	mov	sl, r5
    tickstart = HAL_GetTick();
 800b6d0:	4680      	mov	r8, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b6d2:	f04f 0982 	mov.w	r9, #130	; 0x82
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b6d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b6da:	2b82      	cmp	r3, #130	; 0x82
 800b6dc:	d01e      	beq.n	800b71c <HAL_ETH_Init+0x1f4>
  tmpreg = heth->Instance->MACMIIAR;
 800b6de:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b6e0:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b6e4:	8a23      	ldrh	r3, [r4, #16]
  tmpreg = heth->Instance->MACMIIAR;
 800b6e6:	690a      	ldr	r2, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b6e8:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b6ea:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	f042 0241 	orr.w	r2, r2, #65	; 0x41
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800b6f4:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 800b6f6:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 800b6f8:	f7ff fcfe 	bl	800b0f8 <HAL_GetTick>
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	e003      	b.n	800b708 <HAL_ETH_Init+0x1e0>
    tmpreg = heth->Instance->MACMIIAR;
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	691a      	ldr	r2, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b704:	07d2      	lsls	r2, r2, #31
 800b706:	d539      	bpl.n	800b77c <HAL_ETH_Init+0x254>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b708:	f7ff fcf6 	bl	800b0f8 <HAL_GetTick>
 800b70c:	1b80      	subs	r0, r0, r6
 800b70e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b712:	d3f5      	bcc.n	800b700 <HAL_ETH_Init+0x1d8>
      heth->State= HAL_ETH_STATE_READY;
 800b714:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b718:	f884 a045 	strb.w	sl, [r4, #69]	; 0x45
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800b71c:	f7ff fcec 	bl	800b0f8 <HAL_GetTick>
 800b720:	f241 3388 	movw	r3, #5000	; 0x1388
 800b724:	eba0 0008 	sub.w	r0, r0, r8
 800b728:	4298      	cmp	r0, r3
 800b72a:	d83c      	bhi.n	800b7a6 <HAL_ETH_Init+0x27e>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800b72c:	076e      	lsls	r6, r5, #29
 800b72e:	d5d2      	bpl.n	800b6d6 <HAL_ETH_Init+0x1ae>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b730:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b734:	2b42      	cmp	r3, #66	; 0x42
 800b736:	f43f af6a 	beq.w	800b60e <HAL_ETH_Init+0xe6>
  tmpreg = heth->Instance->MACMIIAR;
 800b73a:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b73c:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b73e:	8a23      	ldrh	r3, [r4, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b740:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b744:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800b748:	690a      	ldr	r2, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b74a:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b74c:	6148      	str	r0, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b74e:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b752:	b29b      	uxth	r3, r3
 800b754:	f042 0203 	orr.w	r2, r2, #3
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800b758:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 800b75a:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 800b75c:	f7ff fccc 	bl	800b0f8 <HAL_GetTick>
 800b760:	4606      	mov	r6, r0
 800b762:	e004      	b.n	800b76e <HAL_ETH_Init+0x246>
    tmpreg = heth->Instance->MACMIIAR;
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b768:	f013 0301 	ands.w	r3, r3, #1
 800b76c:	d027      	beq.n	800b7be <HAL_ETH_Init+0x296>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b76e:	f7ff fcc3 	bl	800b0f8 <HAL_GetTick>
 800b772:	1b80      	subs	r0, r0, r6
 800b774:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b778:	d3f4      	bcc.n	800b764 <HAL_ETH_Init+0x23c>
 800b77a:	e742      	b.n	800b602 <HAL_ETH_Init+0xda>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b77c:	695d      	ldr	r5, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 800b77e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800b782:	b2ad      	uxth	r5, r5
 800b784:	e7ca      	b.n	800b71c <HAL_ETH_Init+0x1f4>
  heth->State = HAL_ETH_STATE_READY;
 800b786:	2301      	movs	r3, #1
    HAL_Delay(PHY_CONFIG_DELAY);
 800b788:	f640 70ff 	movw	r0, #4095	; 0xfff
  heth->State = HAL_ETH_STATE_READY;
 800b78c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    HAL_Delay(PHY_CONFIG_DELAY);
 800b790:	f7ff fcb8 	bl	800b104 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800b794:	4620      	mov	r0, r4
 800b796:	2100      	movs	r1, #0
 800b798:	f7ff fe46 	bl	800b428 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800b79c:	2301      	movs	r3, #1
  return HAL_OK;
 800b79e:	2000      	movs	r0, #0
  heth->State= HAL_ETH_STATE_READY;
 800b7a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800b7a4:	e748      	b.n	800b638 <HAL_ETH_Init+0x110>
        ETH_MACDMAConfig(heth, err);
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	f7ff fe3d 	bl	800b428 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800b7ae:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800b7b0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800b7b2:	2003      	movs	r0, #3
        heth->State= HAL_ETH_STATE_READY;
 800b7b4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800b7b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800b7bc:	e73c      	b.n	800b638 <HAL_ETH_Init+0x110>
  heth->State = HAL_ETH_STATE_READY;
 800b7be:	f04f 0901 	mov.w	r9, #1
      __HAL_UNLOCK(heth);
 800b7c2:	461e      	mov	r6, r3
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b7c4:	f04f 0a82 	mov.w	sl, #130	; 0x82
  heth->State = HAL_ETH_STATE_READY;
 800b7c8:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
    tickstart = HAL_GetTick();
 800b7cc:	f7ff fc94 	bl	800b0f8 <HAL_GetTick>
 800b7d0:	4680      	mov	r8, r0
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b7d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b7d6:	2b82      	cmp	r3, #130	; 0x82
 800b7d8:	d032      	beq.n	800b840 <HAL_ETH_Init+0x318>
  tmpreg = heth->Instance->MACMIIAR;
 800b7da:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b7dc:	f884 a044 	strb.w	sl, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b7e0:	8a23      	ldrh	r3, [r4, #16]
  tmpreg = heth->Instance->MACMIIAR;
 800b7e2:	690a      	ldr	r2, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b7e4:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b7e6:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	f042 0241 	orr.w	r2, r2, #65	; 0x41
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800b7f0:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 800b7f2:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 800b7f4:	f7ff fc80 	bl	800b0f8 <HAL_GetTick>
 800b7f8:	4607      	mov	r7, r0
 800b7fa:	e017      	b.n	800b82c <HAL_ETH_Init+0x304>
 800b7fc:	40023800 	.word	0x40023800
 800b800:	40013800 	.word	0x40013800
 800b804:	feced300 	.word	0xfeced300
 800b808:	00e4e1bf 	.word	0x00e4e1bf
 800b80c:	fde9f140 	.word	0xfde9f140
 800b810:	017d783f 	.word	0x017d783f
 800b814:	fc6c7900 	.word	0xfc6c7900
 800b818:	026259ff 	.word	0x026259ff
 800b81c:	fa0a1f00 	.word	0xfa0a1f00
 800b820:	02faf07f 	.word	0x02faf07f
    tmpreg = heth->Instance->MACMIIAR;
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	691a      	ldr	r2, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b828:	07d0      	lsls	r0, r2, #31
 800b82a:	d537      	bpl.n	800b89c <HAL_ETH_Init+0x374>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b82c:	f7ff fc64 	bl	800b0f8 <HAL_GetTick>
 800b830:	1bc0      	subs	r0, r0, r7
 800b832:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b836:	d3f5      	bcc.n	800b824 <HAL_ETH_Init+0x2fc>
      heth->State= HAL_ETH_STATE_READY;
 800b838:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b83c:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800b840:	f7ff fc5a 	bl	800b0f8 <HAL_GetTick>
 800b844:	f241 3388 	movw	r3, #5000	; 0x1388
 800b848:	eba0 0008 	sub.w	r0, r0, r8
 800b84c:	4298      	cmp	r0, r3
 800b84e:	d8aa      	bhi.n	800b7a6 <HAL_ETH_Init+0x27e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b850:	06a9      	lsls	r1, r5, #26
 800b852:	d5be      	bpl.n	800b7d2 <HAL_ETH_Init+0x2aa>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b854:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b858:	2b82      	cmp	r3, #130	; 0x82
 800b85a:	f43f aed8 	beq.w	800b60e <HAL_ETH_Init+0xe6>
  tmpreg = heth->Instance->MACMIIAR;
 800b85e:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b860:	2182      	movs	r1, #130	; 0x82
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b862:	8a23      	ldrh	r3, [r4, #16]
 800b864:	f240 72c1 	movw	r2, #1985	; 0x7c1
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b868:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800b86c:	6901      	ldr	r1, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b86e:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b870:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b874:	b29b      	uxth	r3, r3
 800b876:	430a      	orrs	r2, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800b878:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 800b87a:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b87c:	f7ff fc3c 	bl	800b0f8 <HAL_GetTick>
 800b880:	4605      	mov	r5, r0
 800b882:	e004      	b.n	800b88e <HAL_ETH_Init+0x366>
    tmpreg = heth->Instance->MACMIIAR;
 800b884:	6822      	ldr	r2, [r4, #0]
 800b886:	6913      	ldr	r3, [r2, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b888:	f013 0301 	ands.w	r3, r3, #1
 800b88c:	d00b      	beq.n	800b8a6 <HAL_ETH_Init+0x37e>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b88e:	f7ff fc33 	bl	800b0f8 <HAL_GetTick>
 800b892:	1b40      	subs	r0, r0, r5
 800b894:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b898:	d3f4      	bcc.n	800b884 <HAL_ETH_Init+0x35c>
 800b89a:	e6b2      	b.n	800b602 <HAL_ETH_Init+0xda>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b89c:	695d      	ldr	r5, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 800b89e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800b8a2:	b2ad      	uxth	r5, r5
 800b8a4:	e7cc      	b.n	800b840 <HAL_ETH_Init+0x318>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b8a6:	6952      	ldr	r2, [r2, #20]
  heth->State = HAL_ETH_STATE_READY;
 800b8a8:	2001      	movs	r0, #1
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800b8aa:	f012 0110 	ands.w	r1, r2, #16
  heth->State = HAL_ETH_STATE_READY;
 800b8ae:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800b8b2:	bf18      	it	ne
 800b8b4:	f44f 6100 	movne.w	r1, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800b8b8:	0752      	lsls	r2, r2, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 800b8ba:	bf58      	it	pl
 800b8bc:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 800b8c0:	60e1      	str	r1, [r4, #12]
 800b8c2:	60a3      	str	r3, [r4, #8]
 800b8c4:	e766      	b.n	800b794 <HAL_ETH_Init+0x26c>
 800b8c6:	bf00      	nop

0800b8c8 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800b8c8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d042      	beq.n	800b956 <HAL_ETH_Start+0x8e>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800b8d0:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800b8d2:	2202      	movs	r2, #2
{  
 800b8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t tmpreg = 0;
 800b8d6:	2600      	movs	r6, #0
{  
 800b8d8:	b085      	sub	sp, #20
  heth->State = HAL_ETH_STATE_BUSY;
 800b8da:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800b8de:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800b8e0:	9603      	str	r6, [sp, #12]
  __HAL_LOCK(heth);
 800b8e2:	2701      	movs	r7, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800b8e4:	681a      	ldr	r2, [r3, #0]
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b8e6:	f241 0518 	movw	r5, #4120	; 0x1018
  __HAL_LOCK(heth);
 800b8ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b8ee:	4638      	mov	r0, r7
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800b8f0:	f042 0208 	orr.w	r2, r2, #8
 800b8f4:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b8fa:	f7ff fc03 	bl	800b104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b8fe:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b900:	4638      	mov	r0, r7
  (heth->Instance)->MACCR = tmpreg;
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800b906:	9602      	str	r6, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	f042 0204 	orr.w	r2, r2, #4
 800b90e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b914:	f7ff fbf6 	bl	800b104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b918:	9a02      	ldr	r2, [sp, #8]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b91a:	4638      	mov	r0, r7
  (heth->Instance)->MACCR = tmpreg;
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800b920:	9601      	str	r6, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b922:	595a      	ldr	r2, [r3, r5]
 800b924:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b928:	515a      	str	r2, [r3, r5]
  tmpreg = (heth->Instance)->DMAOMR;
 800b92a:	595b      	ldr	r3, [r3, r5]
 800b92c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b92e:	f7ff fbe9 	bl	800b104 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800b932:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800b934:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	515a      	str	r2, [r3, r5]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800b93a:	595a      	ldr	r2, [r3, r5]
 800b93c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b940:	515a      	str	r2, [r3, r5]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800b942:	595a      	ldr	r2, [r3, r5]
 800b944:	f042 0202 	orr.w	r2, r2, #2
 800b948:	515a      	str	r2, [r3, r5]
  heth->State= HAL_ETH_STATE_READY;
 800b94a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b94e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
}
 800b952:	b005      	add	sp, #20
 800b954:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 800b956:	2002      	movs	r0, #2
}
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop

0800b95c <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800b95c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b960:	2b01      	cmp	r3, #1
 800b962:	d042      	beq.n	800b9ea <HAL_ETH_Stop+0x8e>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800b964:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800b966:	2202      	movs	r2, #2
{  
 800b968:	b5f0      	push	{r4, r5, r6, r7, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800b96a:	f241 0518 	movw	r5, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 800b96e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800b972:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 800b974:	2701      	movs	r7, #1
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800b976:	595a      	ldr	r2, [r3, r5]
{  
 800b978:	b085      	sub	sp, #20
  __HAL_LOCK(heth);
 800b97a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800b97e:	2600      	movs	r6, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800b980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b984:	4638      	mov	r0, r7
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800b986:	515a      	str	r2, [r3, r5]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800b988:	595a      	ldr	r2, [r3, r5]
 800b98a:	f022 0202 	bic.w	r2, r2, #2
 800b98e:	515a      	str	r2, [r3, r5]
  __IO uint32_t tmpreg = 0;
 800b990:	9603      	str	r6, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	f022 0204 	bic.w	r2, r2, #4
 800b998:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b99e:	f7ff fbb1 	bl	800b104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b9a2:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9a4:	4638      	mov	r0, r7
  (heth->Instance)->MACCR = tmpreg;
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800b9aa:	9602      	str	r6, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b9ac:	595a      	ldr	r2, [r3, r5]
 800b9ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b9b2:	515a      	str	r2, [r3, r5]
  tmpreg = (heth->Instance)->DMAOMR;
 800b9b4:	595b      	ldr	r3, [r3, r5]
 800b9b6:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9b8:	f7ff fba4 	bl	800b104 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800b9bc:	9a02      	ldr	r2, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9be:	4638      	mov	r0, r7
  (heth->Instance)->DMAOMR = tmpreg;
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	515a      	str	r2, [r3, r5]
  __IO uint32_t tmpreg = 0;
 800b9c4:	9601      	str	r6, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	f022 0208 	bic.w	r2, r2, #8
 800b9cc:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9d2:	f7ff fb97 	bl	800b104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b9d6:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800b9d8:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800b9de:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b9e2:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
}
 800b9e6:	b005      	add	sp, #20
 800b9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 800b9ea:	2002      	movs	r0, #2
}
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop

0800b9f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	4688      	mov	r8, r1
 800b9f6:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b9f8:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b9fa:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b9fe:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800bbf8 <HAL_GPIO_Init+0x208>
 800ba02:	e003      	b.n	800ba0c <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 800ba04:	3401      	adds	r4, #1
 800ba06:	2c10      	cmp	r4, #16
 800ba08:	f000 80b6 	beq.w	800bb78 <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ba10:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d1f5      	bne.n	800ba04 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ba18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba1c:	0067      	lsls	r7, r4, #1
 800ba1e:	2103      	movs	r1, #3
 800ba20:	f025 0c10 	bic.w	ip, r5, #16
 800ba24:	40b9      	lsls	r1, r7
 800ba26:	f10c 33ff 	add.w	r3, ip, #4294967295
 800ba2a:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d810      	bhi.n	800ba52 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 800ba30:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800ba32:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ba36:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 800ba3a:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800ba3e:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800ba40:	40be      	lsls	r6, r7
 800ba42:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800ba46:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800ba48:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ba4a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800ba4e:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800ba50:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800ba52:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ba54:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800ba58:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ba5c:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800ba60:	fa06 f607 	lsl.w	r6, r6, r7
 800ba64:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 800ba68:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ba6a:	d115      	bne.n	800ba98 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 800ba6c:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ba6e:	f004 0c07 	and.w	ip, r4, #7
 800ba72:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ba76:	f8d8 6010 	ldr.w	r6, [r8, #16]
 800ba7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ba7e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800ba82:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ba86:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ba8a:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ba8e:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ba92:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 800ba96:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 800ba98:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ba9a:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ba9e:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800baa0:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800baa2:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800baa4:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 800baa8:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800baaa:	d5ab      	bpl.n	800ba04 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800baac:	4b48      	ldr	r3, [pc, #288]	; (800bbd0 <HAL_GPIO_Init+0x1e0>)
 800baae:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bab2:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bab6:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800bab8:	4619      	mov	r1, r3
 800baba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800babe:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bac2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800bac6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800baca:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bacc:	644f      	str	r7, [r1, #68]	; 0x44
 800bace:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bad0:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bad4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800bad8:	9701      	str	r7, [sp, #4]
 800bada:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800badc:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bade:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800bae2:	4f3c      	ldr	r7, [pc, #240]	; (800bbd4 <HAL_GPIO_Init+0x1e4>)
 800bae4:	42b8      	cmp	r0, r7
 800bae6:	d020      	beq.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bae8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800baec:	42b8      	cmp	r0, r7
 800baee:	d046      	beq.n	800bb7e <HAL_GPIO_Init+0x18e>
 800baf0:	4f39      	ldr	r7, [pc, #228]	; (800bbd8 <HAL_GPIO_Init+0x1e8>)
 800baf2:	42b8      	cmp	r0, r7
 800baf4:	d048      	beq.n	800bb88 <HAL_GPIO_Init+0x198>
 800baf6:	4f39      	ldr	r7, [pc, #228]	; (800bbdc <HAL_GPIO_Init+0x1ec>)
 800baf8:	42b8      	cmp	r0, r7
 800bafa:	d04a      	beq.n	800bb92 <HAL_GPIO_Init+0x1a2>
 800bafc:	4f38      	ldr	r7, [pc, #224]	; (800bbe0 <HAL_GPIO_Init+0x1f0>)
 800bafe:	42b8      	cmp	r0, r7
 800bb00:	d04c      	beq.n	800bb9c <HAL_GPIO_Init+0x1ac>
 800bb02:	4f38      	ldr	r7, [pc, #224]	; (800bbe4 <HAL_GPIO_Init+0x1f4>)
 800bb04:	42b8      	cmp	r0, r7
 800bb06:	d053      	beq.n	800bbb0 <HAL_GPIO_Init+0x1c0>
 800bb08:	4f37      	ldr	r7, [pc, #220]	; (800bbe8 <HAL_GPIO_Init+0x1f8>)
 800bb0a:	42b8      	cmp	r0, r7
 800bb0c:	d055      	beq.n	800bbba <HAL_GPIO_Init+0x1ca>
 800bb0e:	4f37      	ldr	r7, [pc, #220]	; (800bbec <HAL_GPIO_Init+0x1fc>)
 800bb10:	42b8      	cmp	r0, r7
 800bb12:	d048      	beq.n	800bba6 <HAL_GPIO_Init+0x1b6>
 800bb14:	4f36      	ldr	r7, [pc, #216]	; (800bbf0 <HAL_GPIO_Init+0x200>)
 800bb16:	42b8      	cmp	r0, r7
 800bb18:	d054      	beq.n	800bbc4 <HAL_GPIO_Init+0x1d4>
 800bb1a:	4f36      	ldr	r7, [pc, #216]	; (800bbf4 <HAL_GPIO_Init+0x204>)
 800bb1c:	42b8      	cmp	r0, r7
 800bb1e:	bf0c      	ite	eq
 800bb20:	2709      	moveq	r7, #9
 800bb22:	270a      	movne	r7, #10
 800bb24:	fa07 f303 	lsl.w	r3, r7, r3
 800bb28:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 800bb2a:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800bb2c:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 800bb2e:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bb32:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 800bb34:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800bb38:	bf54      	ite	pl
 800bb3a:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 800bb3c:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bb3e:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 800bb40:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 800bb44:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800bb48:	bf54      	ite	pl
 800bb4a:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 800bb4c:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bb4e:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 800bb50:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 800bb54:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 800bb58:	bf54      	ite	pl
 800bb5a:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 800bb5c:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bb5e:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 800bb60:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 800bb64:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 800bb68:	bf54      	ite	pl
 800bb6a:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 800bb6c:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 800bb6e:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800bb70:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bb74:	f47f af4a 	bne.w	800ba0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bb78:	b003      	add	sp, #12
 800bb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7e:	2701      	movs	r7, #1
 800bb80:	fa07 f303 	lsl.w	r3, r7, r3
 800bb84:	4319      	orrs	r1, r3
 800bb86:	e7d0      	b.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bb88:	2702      	movs	r7, #2
 800bb8a:	fa07 f303 	lsl.w	r3, r7, r3
 800bb8e:	4319      	orrs	r1, r3
 800bb90:	e7cb      	b.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bb92:	2703      	movs	r7, #3
 800bb94:	fa07 f303 	lsl.w	r3, r7, r3
 800bb98:	4319      	orrs	r1, r3
 800bb9a:	e7c6      	b.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bb9c:	2704      	movs	r7, #4
 800bb9e:	fa07 f303 	lsl.w	r3, r7, r3
 800bba2:	4319      	orrs	r1, r3
 800bba4:	e7c1      	b.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bba6:	2707      	movs	r7, #7
 800bba8:	fa07 f303 	lsl.w	r3, r7, r3
 800bbac:	4319      	orrs	r1, r3
 800bbae:	e7bc      	b.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bbb0:	2705      	movs	r7, #5
 800bbb2:	fa07 f303 	lsl.w	r3, r7, r3
 800bbb6:	4319      	orrs	r1, r3
 800bbb8:	e7b7      	b.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bbba:	2706      	movs	r7, #6
 800bbbc:	fa07 f303 	lsl.w	r3, r7, r3
 800bbc0:	4319      	orrs	r1, r3
 800bbc2:	e7b2      	b.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bbc4:	2708      	movs	r7, #8
 800bbc6:	fa07 f303 	lsl.w	r3, r7, r3
 800bbca:	4319      	orrs	r1, r3
 800bbcc:	e7ad      	b.n	800bb2a <HAL_GPIO_Init+0x13a>
 800bbce:	bf00      	nop
 800bbd0:	40023800 	.word	0x40023800
 800bbd4:	40020000 	.word	0x40020000
 800bbd8:	40020800 	.word	0x40020800
 800bbdc:	40020c00 	.word	0x40020c00
 800bbe0:	40021000 	.word	0x40021000
 800bbe4:	40021400 	.word	0x40021400
 800bbe8:	40021800 	.word	0x40021800
 800bbec:	40021c00 	.word	0x40021c00
 800bbf0:	40022000 	.word	0x40022000
 800bbf4:	40022400 	.word	0x40022400
 800bbf8:	40013c00 	.word	0x40013c00

0800bbfc <HAL_MspInit>:
  * @retval None
  */
void HAL_MspInit(void)
{
 
}
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop

0800bc00 <HAL_ETH_MspInit>:

}


void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 800bc00:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc02:	4c2f      	ldr	r4, [pc, #188]	; (800bcc0 <HAL_ETH_MspInit+0xc0>)
{
 800bc04:	b08d      	sub	sp, #52	; 0x34
  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800bc06:	2086      	movs	r0, #134	; 0x86
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bc08:	2103      	movs	r1, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800bc0c:	ad0c      	add	r5, sp, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800bc0e:	2202      	movs	r2, #2
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 800bc10:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc12:	f043 0301 	orr.w	r3, r3, #1
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800bc16:	270b      	movs	r7, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc18:	6323      	str	r3, [r4, #48]	; 0x30
 800bc1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc26:	f043 0304 	orr.w	r3, r3, #4
 800bc2a:	6323      	str	r3, [r4, #48]	; 0x30
 800bc2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	9302      	str	r3, [sp, #8]
 800bc34:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bc36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc3c:	6323      	str	r3, [r4, #48]	; 0x30
 800bc3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800bc40:	f845 0d14 	str.w	r0, [r5, #-20]!
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bc48:	910a      	str	r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800bc4a:	481e      	ldr	r0, [pc, #120]	; (800bcc4 <HAL_ETH_MspInit+0xc4>)
 800bc4c:	4629      	mov	r1, r5
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bc4e:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800bc50:	9208      	str	r2, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bc52:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 800bc54:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800bc56:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800bc58:	f7ff feca 	bl	800b9f0 <HAL_GPIO_Init>
  
  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800bc5c:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800bc5e:	4629      	mov	r1, r5
 800bc60:	4819      	ldr	r0, [pc, #100]	; (800bcc8 <HAL_ETH_MspInit+0xc8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800bc62:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800bc64:	f7ff fec4 	bl	800b9f0 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 800bc68:	f646 0304 	movw	r3, #26628	; 0x6804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4817      	ldr	r0, [pc, #92]	; (800bccc <HAL_ETH_MspInit+0xcc>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 800bc70:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800bc72:	f7ff febd 	bl	800b9f0 <HAL_GPIO_Init>
  
  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800bc76:	4632      	mov	r2, r6
 800bc78:	2107      	movs	r1, #7
 800bc7a:	203d      	movs	r0, #61	; 0x3d
 800bc7c:	f7ff fa68 	bl	800b150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bc80:	203d      	movs	r0, #61	; 0x3d
 800bc82:	f7ff fa9b 	bl	800b1bc <HAL_NVIC_EnableIRQ>
  
  /* Enable ETHERNET clock  */
  __HAL_RCC_ETH_CLK_ENABLE();
 800bc86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bc8c:	6323      	str	r3, [r4, #48]	; 0x30
 800bc8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc94:	9304      	str	r3, [sp, #16]
 800bc96:	9b04      	ldr	r3, [sp, #16]
 800bc98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc9e:	6323      	str	r3, [r4, #48]	; 0x30
 800bca0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bca6:	9305      	str	r3, [sp, #20]
 800bca8:	9b05      	ldr	r3, [sp, #20]
 800bcaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bcac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bcb0:	6323      	str	r3, [r4, #48]	; 0x30
 800bcb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bcb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcb8:	9306      	str	r3, [sp, #24]
 800bcba:	9b06      	ldr	r3, [sp, #24]
}
 800bcbc:	b00d      	add	sp, #52	; 0x34
 800bcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc0:	40023800 	.word	0x40023800
 800bcc4:	40020000 	.word	0x40020000
 800bcc8:	40020800 	.word	0x40020800
 800bccc:	40021800 	.word	0x40021800

0800bcd0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800bcd0:	4a1b      	ldr	r2, [pc, #108]	; (800bd40 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bcd2:	4b1c      	ldr	r3, [pc, #112]	; (800bd44 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800bcd4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800bcd6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800bcda:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800bcdc:	6411      	str	r1, [r2, #64]	; 0x40
{
 800bcde:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800bce0:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bce2:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800bce4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800bce8:	9201      	str	r2, [sp, #4]
 800bcea:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bcf2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800bcf4:	f7ff fa00 	bl	800b0f8 <HAL_GetTick>
 800bcf8:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bcfa:	e005      	b.n	800bd08 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bcfc:	f7ff f9fc 	bl	800b0f8 <HAL_GetTick>
 800bd00:	1b40      	subs	r0, r0, r5
 800bd02:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800bd06:	d817      	bhi.n	800bd38 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	03da      	lsls	r2, r3, #15
 800bd0c:	d5f6      	bpl.n	800bcfc <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bd0e:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bd10:	4d0c      	ldr	r5, [pc, #48]	; (800bd44 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bd12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd16:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800bd18:	f7ff f9ee 	bl	800b0f8 <HAL_GetTick>
 800bd1c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bd1e:	e005      	b.n	800bd2c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bd20:	f7ff f9ea 	bl	800b0f8 <HAL_GetTick>
 800bd24:	1b00      	subs	r0, r0, r4
 800bd26:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800bd2a:	d805      	bhi.n	800bd38 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bd2c:	686b      	ldr	r3, [r5, #4]
 800bd2e:	039b      	lsls	r3, r3, #14
 800bd30:	d5f6      	bpl.n	800bd20 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800bd32:	2000      	movs	r0, #0
}
 800bd34:	b003      	add	sp, #12
 800bd36:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800bd38:	2003      	movs	r0, #3
}
 800bd3a:	b003      	add	sp, #12
 800bd3c:	bd30      	pop	{r4, r5, pc}
 800bd3e:	bf00      	nop
 800bd40:	40023800 	.word	0x40023800
 800bd44:	40007000 	.word	0x40007000

0800bd48 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	f000 814c 	beq.w	800bfe6 <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd4e:	6803      	ldr	r3, [r0, #0]
{
 800bd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd54:	07dd      	lsls	r5, r3, #31
{
 800bd56:	b082      	sub	sp, #8
 800bd58:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd5a:	d535      	bpl.n	800bdc8 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bd5c:	49ac      	ldr	r1, [pc, #688]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bd5e:	688a      	ldr	r2, [r1, #8]
 800bd60:	f002 020c 	and.w	r2, r2, #12
 800bd64:	2a04      	cmp	r2, #4
 800bd66:	f000 80ff 	beq.w	800bf68 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bd6a:	688a      	ldr	r2, [r1, #8]
 800bd6c:	f002 020c 	and.w	r2, r2, #12
 800bd70:	2a08      	cmp	r2, #8
 800bd72:	f000 80f5 	beq.w	800bf60 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd76:	6863      	ldr	r3, [r4, #4]
 800bd78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7c:	d010      	beq.n	800bda0 <HAL_RCC_OscConfig+0x58>
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 811a 	beq.w	800bfb8 <HAL_RCC_OscConfig+0x270>
 800bd84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd88:	4ba1      	ldr	r3, [pc, #644]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	f000 8164 	beq.w	800c058 <HAL_RCC_OscConfig+0x310>
 800bd90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	e004      	b.n	800bdaa <HAL_RCC_OscConfig+0x62>
 800bda0:	4a9b      	ldr	r2, [pc, #620]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bda2:	6813      	ldr	r3, [r2, #0]
 800bda4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bda8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdaa:	f7ff f9a5 	bl	800b0f8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bdae:	4d98      	ldr	r5, [pc, #608]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800bdb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bdb2:	e005      	b.n	800bdc0 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bdb4:	f7ff f9a0 	bl	800b0f8 <HAL_GetTick>
 800bdb8:	1b80      	subs	r0, r0, r6
 800bdba:	2864      	cmp	r0, #100	; 0x64
 800bdbc:	f200 80ef 	bhi.w	800bf9e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	039a      	lsls	r2, r3, #14
 800bdc4:	d5f6      	bpl.n	800bdb4 <HAL_RCC_OscConfig+0x6c>
 800bdc6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bdc8:	079f      	lsls	r7, r3, #30
 800bdca:	d442      	bmi.n	800be52 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bdcc:	071a      	lsls	r2, r3, #28
 800bdce:	d517      	bpl.n	800be00 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bdd0:	6963      	ldr	r3, [r4, #20]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 80b1 	beq.w	800bf3a <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bdd8:	4b8d      	ldr	r3, [pc, #564]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bdda:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bddc:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800bdde:	f042 0201 	orr.w	r2, r2, #1
 800bde2:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800bde4:	f7ff f988 	bl	800b0f8 <HAL_GetTick>
 800bde8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bdea:	e005      	b.n	800bdf8 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bdec:	f7ff f984 	bl	800b0f8 <HAL_GetTick>
 800bdf0:	1b80      	subs	r0, r0, r6
 800bdf2:	2802      	cmp	r0, #2
 800bdf4:	f200 80d3 	bhi.w	800bf9e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bdf8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800bdfa:	079b      	lsls	r3, r3, #30
 800bdfc:	d5f6      	bpl.n	800bdec <HAL_RCC_OscConfig+0xa4>
 800bdfe:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be00:	075d      	lsls	r5, r3, #29
 800be02:	d56b      	bpl.n	800bedc <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be04:	4b82      	ldr	r3, [pc, #520]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800be06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be08:	00d0      	lsls	r0, r2, #3
 800be0a:	f100 80ee 	bmi.w	800bfea <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800be0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800be10:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800be12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800be16:	641a      	str	r2, [r3, #64]	; 0x40
 800be18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800be22:	4b7c      	ldr	r3, [pc, #496]	; (800c014 <HAL_RCC_OscConfig+0x2cc>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	05d1      	lsls	r1, r2, #23
 800be28:	f140 80a8 	bpl.w	800bf7c <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be2c:	68a3      	ldr	r3, [r4, #8]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d039      	beq.n	800bea6 <HAL_RCC_OscConfig+0x15e>
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 80db 	beq.w	800bfee <HAL_RCC_OscConfig+0x2a6>
 800be38:	2b05      	cmp	r3, #5
 800be3a:	4b75      	ldr	r3, [pc, #468]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800be3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be3e:	f000 8113 	beq.w	800c068 <HAL_RCC_OscConfig+0x320>
 800be42:	f022 0201 	bic.w	r2, r2, #1
 800be46:	671a      	str	r2, [r3, #112]	; 0x70
 800be48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be4a:	f022 0204 	bic.w	r2, r2, #4
 800be4e:	671a      	str	r2, [r3, #112]	; 0x70
 800be50:	e02e      	b.n	800beb0 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800be52:	4a6f      	ldr	r2, [pc, #444]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800be54:	6891      	ldr	r1, [r2, #8]
 800be56:	f011 0f0c 	tst.w	r1, #12
 800be5a:	d063      	beq.n	800bf24 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800be5c:	6891      	ldr	r1, [r2, #8]
 800be5e:	f001 010c 	and.w	r1, r1, #12
 800be62:	2908      	cmp	r1, #8
 800be64:	d05b      	beq.n	800bf1e <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800be66:	68e3      	ldr	r3, [r4, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 80e1 	beq.w	800c030 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 800be6e:	4b68      	ldr	r3, [pc, #416]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800be70:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be72:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 800be74:	f042 0201 	orr.w	r2, r2, #1
 800be78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800be7a:	f7ff f93d 	bl	800b0f8 <HAL_GetTick>
 800be7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be80:	e005      	b.n	800be8e <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be82:	f7ff f939 	bl	800b0f8 <HAL_GetTick>
 800be86:	1b80      	subs	r0, r0, r6
 800be88:	2802      	cmp	r0, #2
 800be8a:	f200 8088 	bhi.w	800bf9e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be8e:	682b      	ldr	r3, [r5, #0]
 800be90:	0798      	lsls	r0, r3, #30
 800be92:	d5f6      	bpl.n	800be82 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	6922      	ldr	r2, [r4, #16]
 800be98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800be9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bea0:	602b      	str	r3, [r5, #0]
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	e792      	b.n	800bdcc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bea6:	4a5a      	ldr	r2, [pc, #360]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bea8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800beaa:	f043 0301 	orr.w	r3, r3, #1
 800beae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800beb0:	f7ff f922 	bl	800b0f8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800beb4:	4e56      	ldr	r6, [pc, #344]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800beb6:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800beb8:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bebc:	e005      	b.n	800beca <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bebe:	f7ff f91b 	bl	800b0f8 <HAL_GetTick>
 800bec2:	eba0 0008 	sub.w	r0, r0, r8
 800bec6:	42b8      	cmp	r0, r7
 800bec8:	d869      	bhi.n	800bf9e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800beca:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800becc:	079b      	lsls	r3, r3, #30
 800bece:	d5f6      	bpl.n	800bebe <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bed0:	b125      	cbz	r5, 800bedc <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bed2:	4a4f      	ldr	r2, [pc, #316]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bed4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800beda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bedc:	69a0      	ldr	r0, [r4, #24]
 800bede:	b1d0      	cbz	r0, 800bf16 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bee0:	4b4b      	ldr	r3, [pc, #300]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bee2:	689a      	ldr	r2, [r3, #8]
 800bee4:	f002 020c 	and.w	r2, r2, #12
 800bee8:	2a08      	cmp	r2, #8
 800beea:	f000 80c5 	beq.w	800c078 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800beee:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bef0:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bef2:	f000 80eb 	beq.w	800c0cc <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bef6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800befa:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 800befc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800befe:	f7ff f8fb 	bl	800b0f8 <HAL_GetTick>
 800bf02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf04:	e004      	b.n	800bf10 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf06:	f7ff f8f7 	bl	800b0f8 <HAL_GetTick>
 800bf0a:	1b40      	subs	r0, r0, r5
 800bf0c:	2802      	cmp	r0, #2
 800bf0e:	d846      	bhi.n	800bf9e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	019b      	lsls	r3, r3, #6
 800bf14:	d4f7      	bmi.n	800bf06 <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800bf16:	2000      	movs	r0, #0
}
 800bf18:	b002      	add	sp, #8
 800bf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bf1e:	6852      	ldr	r2, [r2, #4]
 800bf20:	0256      	lsls	r6, r2, #9
 800bf22:	d4a0      	bmi.n	800be66 <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf24:	4a3a      	ldr	r2, [pc, #232]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bf26:	6812      	ldr	r2, [r2, #0]
 800bf28:	0795      	lsls	r5, r2, #30
 800bf2a:	d53c      	bpl.n	800bfa6 <HAL_RCC_OscConfig+0x25e>
 800bf2c:	68e2      	ldr	r2, [r4, #12]
 800bf2e:	2a01      	cmp	r2, #1
 800bf30:	d039      	beq.n	800bfa6 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 800bf32:	2001      	movs	r0, #1
}
 800bf34:	b002      	add	sp, #8
 800bf36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800bf3a:	4b35      	ldr	r3, [pc, #212]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bf3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf3e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800bf40:	f022 0201 	bic.w	r2, r2, #1
 800bf44:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800bf46:	f7ff f8d7 	bl	800b0f8 <HAL_GetTick>
 800bf4a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf4c:	e004      	b.n	800bf58 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf4e:	f7ff f8d3 	bl	800b0f8 <HAL_GetTick>
 800bf52:	1b80      	subs	r0, r0, r6
 800bf54:	2802      	cmp	r0, #2
 800bf56:	d822      	bhi.n	800bf9e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800bf5a:	079f      	lsls	r7, r3, #30
 800bf5c:	d4f7      	bmi.n	800bf4e <HAL_RCC_OscConfig+0x206>
 800bf5e:	e74e      	b.n	800bdfe <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf60:	684a      	ldr	r2, [r1, #4]
 800bf62:	0250      	lsls	r0, r2, #9
 800bf64:	f57f af07 	bpl.w	800bd76 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf68:	4a29      	ldr	r2, [pc, #164]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bf6a:	6812      	ldr	r2, [r2, #0]
 800bf6c:	0391      	lsls	r1, r2, #14
 800bf6e:	f57f af2b 	bpl.w	800bdc8 <HAL_RCC_OscConfig+0x80>
 800bf72:	6862      	ldr	r2, [r4, #4]
 800bf74:	2a00      	cmp	r2, #0
 800bf76:	f47f af27 	bne.w	800bdc8 <HAL_RCC_OscConfig+0x80>
 800bf7a:	e7da      	b.n	800bf32 <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 800bf7c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf7e:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800bf80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf84:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800bf86:	f7ff f8b7 	bl	800b0f8 <HAL_GetTick>
 800bf8a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf8c:	6833      	ldr	r3, [r6, #0]
 800bf8e:	05da      	lsls	r2, r3, #23
 800bf90:	f53f af4c 	bmi.w	800be2c <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf94:	f7ff f8b0 	bl	800b0f8 <HAL_GetTick>
 800bf98:	1bc0      	subs	r0, r0, r7
 800bf9a:	2864      	cmp	r0, #100	; 0x64
 800bf9c:	d9f6      	bls.n	800bf8c <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 800bf9e:	2003      	movs	r0, #3
}
 800bfa0:	b002      	add	sp, #8
 800bfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfa6:	491a      	ldr	r1, [pc, #104]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bfa8:	6920      	ldr	r0, [r4, #16]
 800bfaa:	680a      	ldr	r2, [r1, #0]
 800bfac:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800bfb0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800bfb4:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bfb6:	e709      	b.n	800bdcc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bfb8:	4b15      	ldr	r3, [pc, #84]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
 800bfba:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfbc:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bfbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bfca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800bfcc:	f7ff f894 	bl	800b0f8 <HAL_GetTick>
 800bfd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfd2:	e004      	b.n	800bfde <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfd4:	f7ff f890 	bl	800b0f8 <HAL_GetTick>
 800bfd8:	1b80      	subs	r0, r0, r6
 800bfda:	2864      	cmp	r0, #100	; 0x64
 800bfdc:	d8df      	bhi.n	800bf9e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfde:	682b      	ldr	r3, [r5, #0]
 800bfe0:	039b      	lsls	r3, r3, #14
 800bfe2:	d4f7      	bmi.n	800bfd4 <HAL_RCC_OscConfig+0x28c>
 800bfe4:	e6ef      	b.n	800bdc6 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 800bfe6:	2001      	movs	r0, #1
}
 800bfe8:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 800bfea:	2500      	movs	r5, #0
 800bfec:	e719      	b.n	800be22 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bfee:	4b08      	ldr	r3, [pc, #32]	; (800c010 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bff0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bff6:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bff8:	f022 0201 	bic.w	r2, r2, #1
 800bffc:	671a      	str	r2, [r3, #112]	; 0x70
 800bffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c000:	f022 0204 	bic.w	r2, r2, #4
 800c004:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800c006:	f7ff f877 	bl	800b0f8 <HAL_GetTick>
 800c00a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c00c:	e009      	b.n	800c022 <HAL_RCC_OscConfig+0x2da>
 800c00e:	bf00      	nop
 800c010:	40023800 	.word	0x40023800
 800c014:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c018:	f7ff f86e 	bl	800b0f8 <HAL_GetTick>
 800c01c:	1bc0      	subs	r0, r0, r7
 800c01e:	4540      	cmp	r0, r8
 800c020:	d8bd      	bhi.n	800bf9e <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c022:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c024:	0798      	lsls	r0, r3, #30
 800c026:	d4f7      	bmi.n	800c018 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 800c028:	2d00      	cmp	r5, #0
 800c02a:	f43f af57 	beq.w	800bedc <HAL_RCC_OscConfig+0x194>
 800c02e:	e750      	b.n	800bed2 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 800c030:	4b41      	ldr	r3, [pc, #260]	; (800c138 <HAL_RCC_OscConfig+0x3f0>)
 800c032:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c034:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 800c036:	f022 0201 	bic.w	r2, r2, #1
 800c03a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c03c:	f7ff f85c 	bl	800b0f8 <HAL_GetTick>
 800c040:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c042:	e004      	b.n	800c04e <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c044:	f7ff f858 	bl	800b0f8 <HAL_GetTick>
 800c048:	1b80      	subs	r0, r0, r6
 800c04a:	2802      	cmp	r0, #2
 800c04c:	d8a7      	bhi.n	800bf9e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c04e:	682b      	ldr	r3, [r5, #0]
 800c050:	0799      	lsls	r1, r3, #30
 800c052:	d4f7      	bmi.n	800c044 <HAL_RCC_OscConfig+0x2fc>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	e6b9      	b.n	800bdcc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c058:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c05c:	601a      	str	r2, [r3, #0]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c064:	601a      	str	r2, [r3, #0]
 800c066:	e6a0      	b.n	800bdaa <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c068:	f042 0204 	orr.w	r2, r2, #4
 800c06c:	671a      	str	r2, [r3, #112]	; 0x70
 800c06e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c070:	f042 0201 	orr.w	r2, r2, #1
 800c074:	671a      	str	r2, [r3, #112]	; 0x70
 800c076:	e71b      	b.n	800beb0 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c078:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800c07a:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c07c:	f43f af5a 	beq.w	800bf34 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c080:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c084:	69e1      	ldr	r1, [r4, #28]
 800c086:	428b      	cmp	r3, r1
 800c088:	f47f af53 	bne.w	800bf32 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c08c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c090:	6a21      	ldr	r1, [r4, #32]
 800c092:	428b      	cmp	r3, r1
 800c094:	f47f af4d 	bne.w	800bf32 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c09c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c09e:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0a0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800c0a4:	f47f af45 	bne.w	800bf32 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c0a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0aa:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800c0ae:	085b      	lsrs	r3, r3, #1
 800c0b0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c0b2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800c0b6:	f47f af3c 	bne.w	800bf32 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c0ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0bc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c0c0:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 800c0c4:	bf14      	ite	ne
 800c0c6:	2001      	movne	r0, #1
 800c0c8:	2000      	moveq	r0, #0
 800c0ca:	e733      	b.n	800bf34 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 800c0cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0d0:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800c0d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c0d4:	f7ff f810 	bl	800b0f8 <HAL_GetTick>
 800c0d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0da:	e005      	b.n	800c0e8 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0dc:	f7ff f80c 	bl	800b0f8 <HAL_GetTick>
 800c0e0:	1b80      	subs	r0, r0, r6
 800c0e2:	2802      	cmp	r0, #2
 800c0e4:	f63f af5b 	bhi.w	800bf9e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	0199      	lsls	r1, r3, #6
 800c0ec:	d4f6      	bmi.n	800c0dc <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c0ee:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800c0f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800c0fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0fe:	4c0e      	ldr	r4, [pc, #56]	; (800c138 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c100:	0852      	lsrs	r2, r2, #1
 800c102:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c106:	3a01      	subs	r2, #1
 800c108:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c10c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c110:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c118:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c11a:	f7fe ffed 	bl	800b0f8 <HAL_GetTick>
 800c11e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c120:	e005      	b.n	800c12e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c122:	f7fe ffe9 	bl	800b0f8 <HAL_GetTick>
 800c126:	1b40      	subs	r0, r0, r5
 800c128:	2802      	cmp	r0, #2
 800c12a:	f63f af38 	bhi.w	800bf9e <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	019a      	lsls	r2, r3, #6
 800c132:	d5f6      	bpl.n	800c122 <HAL_RCC_OscConfig+0x3da>
 800c134:	e6ef      	b.n	800bf16 <HAL_RCC_OscConfig+0x1ce>
 800c136:	bf00      	nop
 800c138:	40023800 	.word	0x40023800

0800c13c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c13c:	b178      	cbz	r0, 800c15e <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c13e:	4a5e      	ldr	r2, [pc, #376]	; (800c2b8 <HAL_RCC_ClockConfig+0x17c>)
 800c140:	6813      	ldr	r3, [r2, #0]
 800c142:	f003 030f 	and.w	r3, r3, #15
 800c146:	428b      	cmp	r3, r1
 800c148:	d20b      	bcs.n	800c162 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c14a:	6813      	ldr	r3, [r2, #0]
 800c14c:	f023 030f 	bic.w	r3, r3, #15
 800c150:	430b      	orrs	r3, r1
 800c152:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c154:	6813      	ldr	r3, [r2, #0]
 800c156:	f003 030f 	and.w	r3, r3, #15
 800c15a:	428b      	cmp	r3, r1
 800c15c:	d001      	beq.n	800c162 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800c15e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 800c160:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c162:	6803      	ldr	r3, [r0, #0]
{
 800c164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c168:	079d      	lsls	r5, r3, #30
 800c16a:	d514      	bpl.n	800c196 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c16c:	075c      	lsls	r4, r3, #29
 800c16e:	d504      	bpl.n	800c17a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c170:	4c52      	ldr	r4, [pc, #328]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
 800c172:	68a2      	ldr	r2, [r4, #8]
 800c174:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800c178:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c17a:	071a      	lsls	r2, r3, #28
 800c17c:	d504      	bpl.n	800c188 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c17e:	4c4f      	ldr	r4, [pc, #316]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
 800c180:	68a2      	ldr	r2, [r4, #8]
 800c182:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800c186:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c188:	4c4c      	ldr	r4, [pc, #304]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
 800c18a:	6885      	ldr	r5, [r0, #8]
 800c18c:	68a2      	ldr	r2, [r4, #8]
 800c18e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800c192:	432a      	orrs	r2, r5
 800c194:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c196:	07df      	lsls	r7, r3, #31
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	d521      	bpl.n	800c1e2 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c19e:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1a0:	4b46      	ldr	r3, [pc, #280]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1a2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1a4:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1a6:	d063      	beq.n	800c270 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c1a8:	2a02      	cmp	r2, #2
 800c1aa:	d079      	beq.n	800c2a0 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1ac:	0799      	lsls	r1, r3, #30
 800c1ae:	d528      	bpl.n	800c202 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c1b0:	4942      	ldr	r1, [pc, #264]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1b2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c1b6:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1b8:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c1ba:	f023 0303 	bic.w	r3, r3, #3
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800c1c2:	f7fe ff99 	bl	800b0f8 <HAL_GetTick>
 800c1c6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1c8:	e004      	b.n	800c1d4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1ca:	f7fe ff95 	bl	800b0f8 <HAL_GetTick>
 800c1ce:	1bc0      	subs	r0, r0, r7
 800c1d0:	4540      	cmp	r0, r8
 800c1d2:	d863      	bhi.n	800c29c <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1d4:	68b3      	ldr	r3, [r6, #8]
 800c1d6:	6862      	ldr	r2, [r4, #4]
 800c1d8:	f003 030c 	and.w	r3, r3, #12
 800c1dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800c1e0:	d1f3      	bne.n	800c1ca <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c1e2:	4a35      	ldr	r2, [pc, #212]	; (800c2b8 <HAL_RCC_ClockConfig+0x17c>)
 800c1e4:	6813      	ldr	r3, [r2, #0]
 800c1e6:	f003 030f 	and.w	r3, r3, #15
 800c1ea:	42ab      	cmp	r3, r5
 800c1ec:	d90c      	bls.n	800c208 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1ee:	6813      	ldr	r3, [r2, #0]
 800c1f0:	f023 030f 	bic.w	r3, r3, #15
 800c1f4:	432b      	orrs	r3, r5
 800c1f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1f8:	6813      	ldr	r3, [r2, #0]
 800c1fa:	f003 030f 	and.w	r3, r3, #15
 800c1fe:	42ab      	cmp	r3, r5
 800c200:	d002      	beq.n	800c208 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 800c202:	2001      	movs	r0, #1
}
 800c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	075a      	lsls	r2, r3, #29
 800c20c:	d506      	bpl.n	800c21c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c20e:	492b      	ldr	r1, [pc, #172]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
 800c210:	68e0      	ldr	r0, [r4, #12]
 800c212:	688a      	ldr	r2, [r1, #8]
 800c214:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800c218:	4302      	orrs	r2, r0
 800c21a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c21c:	071b      	lsls	r3, r3, #28
 800c21e:	d507      	bpl.n	800c230 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c220:	4a26      	ldr	r2, [pc, #152]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
 800c222:	6921      	ldr	r1, [r4, #16]
 800c224:	6893      	ldr	r3, [r2, #8]
 800c226:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c22a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c22e:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c230:	4922      	ldr	r1, [pc, #136]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
 800c232:	688b      	ldr	r3, [r1, #8]
 800c234:	f003 030c 	and.w	r3, r3, #12
 800c238:	2b04      	cmp	r3, #4
 800c23a:	d01c      	beq.n	800c276 <HAL_RCC_ClockConfig+0x13a>
 800c23c:	2b08      	cmp	r3, #8
 800c23e:	d12b      	bne.n	800c298 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c240:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c242:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c244:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c248:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c24a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800c24e:	d12a      	bne.n	800c2a6 <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c250:	481b      	ldr	r0, [pc, #108]	; (800c2c0 <HAL_RCC_ClockConfig+0x184>)
 800c252:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800c256:	fba1 0100 	umull	r0, r1, r1, r0
 800c25a:	f7f4 f961 	bl	8000520 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c25e:	4b17      	ldr	r3, [pc, #92]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800c266:	3301      	adds	r3, #1
 800c268:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800c26a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c26e:	e003      	b.n	800c278 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c270:	039e      	lsls	r6, r3, #14
 800c272:	d49d      	bmi.n	800c1b0 <HAL_RCC_ClockConfig+0x74>
 800c274:	e7c5      	b.n	800c202 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 800c276:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c278:	4a10      	ldr	r2, [pc, #64]	; (800c2bc <HAL_RCC_ClockConfig+0x180>)
 800c27a:	4c13      	ldr	r4, [pc, #76]	; (800c2c8 <HAL_RCC_ClockConfig+0x18c>)
 800c27c:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800c27e:	4813      	ldr	r0, [pc, #76]	; (800c2cc <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c280:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800c284:	4912      	ldr	r1, [pc, #72]	; (800c2d0 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 800c286:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c288:	5ca2      	ldrb	r2, [r4, r2]
 800c28a:	40d3      	lsrs	r3, r2
 800c28c:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800c28e:	f000 f8ef 	bl	800c470 <HAL_InitTick>
  return HAL_OK;
 800c292:	2000      	movs	r0, #0
}
 800c294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 800c298:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <HAL_RCC_ClockConfig+0x184>)
 800c29a:	e7ed      	b.n	800c278 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 800c29c:	2003      	movs	r0, #3
 800c29e:	e7b1      	b.n	800c204 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c2a0:	0198      	lsls	r0, r3, #6
 800c2a2:	d485      	bmi.n	800c1b0 <HAL_RCC_ClockConfig+0x74>
 800c2a4:	e7ad      	b.n	800c202 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2a6:	4807      	ldr	r0, [pc, #28]	; (800c2c4 <HAL_RCC_ClockConfig+0x188>)
 800c2a8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	fba1 0100 	umull	r0, r1, r1, r0
 800c2b2:	f7f4 f935 	bl	8000520 <__aeabi_uldivmod>
 800c2b6:	e7d2      	b.n	800c25e <HAL_RCC_ClockConfig+0x122>
 800c2b8:	40023c00 	.word	0x40023c00
 800c2bc:	40023800 	.word	0x40023800
 800c2c0:	00f42400 	.word	0x00f42400
 800c2c4:	017d7840 	.word	0x017d7840
 800c2c8:	0800fcc8 	.word	0x0800fcc8
 800c2cc:	20000074 	.word	0x20000074
 800c2d0:	20000078 	.word	0x20000078

0800c2d4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c2d4:	4916      	ldr	r1, [pc, #88]	; (800c330 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800c2d6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c2d8:	688b      	ldr	r3, [r1, #8]
 800c2da:	f003 030c 	and.w	r3, r3, #12
 800c2de:	2b04      	cmp	r3, #4
 800c2e0:	d01b      	beq.n	800c31a <HAL_RCC_GetSysClockFreq+0x46>
 800c2e2:	2b08      	cmp	r3, #8
 800c2e4:	d117      	bne.n	800c316 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c2e6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c2e8:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c2ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2ee:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c2f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800c2f4:	d113      	bne.n	800c31e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2f6:	480f      	ldr	r0, [pc, #60]	; (800c334 <HAL_RCC_GetSysClockFreq+0x60>)
 800c2f8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800c2fc:	fba1 0100 	umull	r0, r1, r1, r0
 800c300:	f7f4 f90e 	bl	8000520 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c304:	4b0a      	ldr	r3, [pc, #40]	; (800c330 <HAL_RCC_GetSysClockFreq+0x5c>)
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800c30c:	3301      	adds	r3, #1
 800c30e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800c310:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800c314:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800c316:	4807      	ldr	r0, [pc, #28]	; (800c334 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800c318:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800c31a:	4807      	ldr	r0, [pc, #28]	; (800c338 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800c31c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c31e:	4806      	ldr	r0, [pc, #24]	; (800c338 <HAL_RCC_GetSysClockFreq+0x64>)
 800c320:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800c324:	2300      	movs	r3, #0
 800c326:	fba1 0100 	umull	r0, r1, r1, r0
 800c32a:	f7f4 f8f9 	bl	8000520 <__aeabi_uldivmod>
 800c32e:	e7e9      	b.n	800c304 <HAL_RCC_GetSysClockFreq+0x30>
 800c330:	40023800 	.word	0x40023800
 800c334:	00f42400 	.word	0x00f42400
 800c338:	017d7840 	.word	0x017d7840

0800c33c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800c33c:	4b01      	ldr	r3, [pc, #4]	; (800c344 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800c33e:	6818      	ldr	r0, [r3, #0]
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	20000078 	.word	0x20000078

0800c348 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c348:	4b04      	ldr	r3, [pc, #16]	; (800c35c <HAL_RCC_GetPCLK1Freq+0x14>)
 800c34a:	4a05      	ldr	r2, [pc, #20]	; (800c360 <HAL_RCC_GetPCLK1Freq+0x18>)
 800c34c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c34e:	4905      	ldr	r1, [pc, #20]	; (800c364 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c350:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800c354:	6808      	ldr	r0, [r1, #0]
 800c356:	5cd3      	ldrb	r3, [r2, r3]
}
 800c358:	40d8      	lsrs	r0, r3
 800c35a:	4770      	bx	lr
 800c35c:	40023800 	.word	0x40023800
 800c360:	0800fcd8 	.word	0x0800fcd8
 800c364:	20000078 	.word	0x20000078

0800c368 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c368:	4b04      	ldr	r3, [pc, #16]	; (800c37c <HAL_RCC_GetPCLK2Freq+0x14>)
 800c36a:	4a05      	ldr	r2, [pc, #20]	; (800c380 <HAL_RCC_GetPCLK2Freq+0x18>)
 800c36c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c36e:	4905      	ldr	r1, [pc, #20]	; (800c384 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c370:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800c374:	6808      	ldr	r0, [r1, #0]
 800c376:	5cd3      	ldrb	r3, [r2, r3]
}
 800c378:	40d8      	lsrs	r0, r3
 800c37a:	4770      	bx	lr
 800c37c:	40023800 	.word	0x40023800
 800c380:	0800fcd8 	.word	0x0800fcd8
 800c384:	20000078 	.word	0x20000078

0800c388 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c388:	4b0e      	ldr	r3, [pc, #56]	; (800c3c4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c38a:	220f      	movs	r2, #15
 800c38c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c38e:	689a      	ldr	r2, [r3, #8]
 800c390:	f002 0203 	and.w	r2, r2, #3
 800c394:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800c39c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c39e:	689a      	ldr	r2, [r3, #8]
 800c3a0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800c3a4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	08db      	lsrs	r3, r3, #3
{
 800c3aa:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c3ac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c3b0:	4c05      	ldr	r4, [pc, #20]	; (800c3c8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c3b2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c3b4:	6823      	ldr	r3, [r4, #0]
}
 800c3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c3ba:	f003 030f 	and.w	r3, r3, #15
 800c3be:	600b      	str	r3, [r1, #0]
}
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	40023800 	.word	0x40023800
 800c3c8:	40023c00 	.word	0x40023c00

0800c3cc <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop

0800c3d0 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 800c3d0:	b1e8      	cbz	r0, 800c40e <HAL_SDRAM_Init+0x3e>
{   
 800c3d2:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800c3d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c3d8:	4604      	mov	r4, r0
 800c3da:	460d      	mov	r5, r1
 800c3dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c3e0:	b183      	cbz	r3, 800c404 <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c3e2:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c3e4:	1d21      	adds	r1, r4, #4
 800c3e6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c3e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c3ec:	f000 fb88 	bl	800cb00 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	e9d4 0200 	ldrd	r0, r2, [r4]
 800c3f6:	f000 fbc1 	bl	800cb7c <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c3fa:	2301      	movs	r3, #1
  return HAL_OK;
 800c3fc:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c3fe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800c402:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800c404:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800c408:	f7ff ffe0 	bl	800c3cc <HAL_SDRAM_MspInit>
 800c40c:	e7e9      	b.n	800c3e2 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800c40e:	2001      	movs	r0, #1
}
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop

0800c414 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c414:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c416:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d010      	beq.n	800c442 <HAL_SDRAM_SendCommand+0x2e>
 800c420:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c422:	2302      	movs	r3, #2
 800c424:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c426:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c428:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c42c:	f000 fbf8 	bl	800cc20 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c430:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800c432:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c434:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c436:	bf0c      	ite	eq
 800c438:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c43a:	2301      	movne	r3, #1
 800c43c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800c440:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800c442:	4618      	mov	r0, r3
}
 800c444:	bd38      	pop	{r3, r4, r5, pc}
 800c446:	bf00      	nop

0800c448 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c448:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d00c      	beq.n	800c46c <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c452:	2302      	movs	r3, #2
{
 800c454:	b510      	push	{r4, lr}
 800c456:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800c458:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c45a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800c45e:	f000 fbf5 	bl	800cc4c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c462:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800c464:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c466:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800c46a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800c46c:	4618      	mov	r0, r3
}
 800c46e:	4770      	bx	lr

0800c470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800c470:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800c472:	4601      	mov	r1, r0
{
 800c474:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800c476:	2200      	movs	r2, #0
 800c478:	2036      	movs	r0, #54	; 0x36
 800c47a:	f7fe fe69 	bl	800b150 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c47e:	2036      	movs	r0, #54	; 0x36
 800c480:	f7fe fe9c 	bl	800b1bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c484:	4b18      	ldr	r3, [pc, #96]	; (800c4e8 <HAL_InitTick+0x78>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c486:	a901      	add	r1, sp, #4
 800c488:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c48a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c48c:	f042 0210 	orr.w	r2, r2, #16
 800c490:	641a      	str	r2, [r3, #64]	; 0x40
 800c492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c494:	f003 0310 	and.w	r3, r3, #16
 800c498:	9302      	str	r3, [sp, #8]
 800c49a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c49c:	f7ff ff74 	bl	800c388 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 800c4a0:	9b06      	ldr	r3, [sp, #24]
 800c4a2:	b9c3      	cbnz	r3, 800c4d6 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800c4a4:	f7ff ff50 	bl	800c348 <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c4a8:	4b10      	ldr	r3, [pc, #64]	; (800c4ec <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 800c4aa:	2200      	movs	r2, #0
  TimHandle.Instance = TIM6;
 800c4ac:	4c10      	ldr	r4, [pc, #64]	; (800c4f0 <HAL_InitTick+0x80>)
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800c4ae:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c4b2:	fba3 1300 	umull	r1, r3, r3, r0
  TimHandle.Instance = TIM6;
 800c4b6:	490f      	ldr	r1, [pc, #60]	; (800c4f4 <HAL_InitTick+0x84>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800c4b8:	4620      	mov	r0, r4
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800c4ba:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c4bc:	0c9b      	lsrs	r3, r3, #18
  TimHandle.Instance = TIM6;
 800c4be:	6021      	str	r1, [r4, #0]
  TimHandle.Init.ClockDivision = 0;
 800c4c0:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c4c2:	3b01      	subs	r3, #1
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c4c4:	60a2      	str	r2, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c4c6:	61a2      	str	r2, [r4, #24]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800c4c8:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800c4ca:	f000 fbd7 	bl	800cc7c <HAL_TIM_Base_Init>
 800c4ce:	b130      	cbz	r0, 800c4de <HAL_InitTick+0x6e>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c4d0:	2001      	movs	r0, #1
}
 800c4d2:	b009      	add	sp, #36	; 0x24
 800c4d4:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c4d6:	f7ff ff37 	bl	800c348 <HAL_RCC_GetPCLK1Freq>
 800c4da:	0040      	lsls	r0, r0, #1
 800c4dc:	e7e4      	b.n	800c4a8 <HAL_InitTick+0x38>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 fc50 	bl	800cd84 <HAL_TIM_Base_Start_IT>
}
 800c4e4:	b009      	add	sp, #36	; 0x24
 800c4e6:	bd30      	pop	{r4, r5, pc}
 800c4e8:	40023800 	.word	0x40023800
 800c4ec:	431bde83 	.word	0x431bde83
 800c4f0:	20019138 	.word	0x20019138
 800c4f4:	40001000 	.word	0x40001000

0800c4f8 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim  TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 800c4f8:	f7fe bdf2 	b.w	800b0e0 <HAL_IncTick>

0800c4fc <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 800c4fc:	4801      	ldr	r0, [pc, #4]	; (800c504 <TIM6_DAC_IRQHandler+0x8>)
 800c4fe:	f000 bc5f 	b.w	800cdc0 <HAL_TIM_IRQHandler>
 800c502:	bf00      	nop
 800c504:	20019138 	.word	0x20019138

0800c508 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c50c:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c50e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800c510:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800c512:	2b20      	cmp	r3, #32
 800c514:	d147      	bne.n	800c5a6 <HAL_UART_Transmit+0x9e>
 800c516:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 800c518:	2900      	cmp	r1, #0
 800c51a:	d048      	beq.n	800c5ae <HAL_UART_Transmit+0xa6>
 800c51c:	fab2 f782 	clz	r7, r2
 800c520:	9201      	str	r2, [sp, #4]
 800c522:	097f      	lsrs	r7, r7, #5
 800c524:	2f00      	cmp	r7, #0
 800c526:	d142      	bne.n	800c5ae <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800c528:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c52c:	4605      	mov	r5, r0
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d039      	beq.n	800c5a6 <HAL_UART_Transmit+0x9e>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c532:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800c534:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c536:	67c7      	str	r7, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800c538:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c53c:	6743      	str	r3, [r0, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c53e:	f7fe fddb 	bl	800b0f8 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c542:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 800c544:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 800c546:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 800c54c:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 800c550:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c554:	f000 8083 	beq.w	800c65e <HAL_UART_Transmit+0x156>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 800c558:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800c55c:	2200      	movs	r2, #0
 800c55e:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 800c560:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800c562:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800c566:	b1ab      	cbz	r3, 800c594 <HAL_UART_Transmit+0x8c>
 800c568:	1c71      	adds	r1, r6, #1
 800c56a:	d124      	bne.n	800c5b6 <HAL_UART_Transmit+0xae>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c56c:	69e2      	ldr	r2, [r4, #28]
 800c56e:	0612      	lsls	r2, r2, #24
 800c570:	d5fc      	bpl.n	800c56c <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 800c572:	f1b9 0f00 	cmp.w	r9, #0
 800c576:	d034      	beq.n	800c5e2 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c578:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c57c:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 800c57e:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800c582:	3b01      	subs	r3, #1
 800c584:	b29b      	uxth	r3, r3
 800c586:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c58a:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800c58e:	b29b      	uxth	r3, r3
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1e9      	bne.n	800c568 <HAL_UART_Transmit+0x60>
 800c594:	1c71      	adds	r1, r6, #1
 800c596:	d129      	bne.n	800c5ec <HAL_UART_Transmit+0xe4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c598:	69e3      	ldr	r3, [r4, #28]
 800c59a:	065a      	lsls	r2, r3, #25
 800c59c:	d5fc      	bpl.n	800c598 <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_READY;
 800c59e:	2320      	movs	r3, #32
    return HAL_OK;
 800c5a0:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 800c5a2:	676b      	str	r3, [r5, #116]	; 0x74
    return HAL_OK;
 800c5a4:	e000      	b.n	800c5a8 <HAL_UART_Transmit+0xa0>
    return HAL_BUSY;
 800c5a6:	2002      	movs	r0, #2
}
 800c5a8:	b003      	add	sp, #12
 800c5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800c5ae:	2001      	movs	r0, #1
}
 800c5b0:	b003      	add	sp, #12
 800c5b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5b6:	69e3      	ldr	r3, [r4, #28]
 800c5b8:	061b      	lsls	r3, r3, #24
 800c5ba:	d4da      	bmi.n	800c572 <HAL_UART_Transmit+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5bc:	f7fe fd9c 	bl	800b0f8 <HAL_GetTick>
 800c5c0:	eba0 0008 	sub.w	r0, r0, r8
 800c5c4:	4286      	cmp	r6, r0
 800c5c6:	d339      	bcc.n	800c63c <HAL_UART_Transmit+0x134>
 800c5c8:	fab6 f386 	clz	r3, r6
 800c5cc:	095b      	lsrs	r3, r3, #5
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d134      	bne.n	800c63c <HAL_UART_Transmit+0x134>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c5d2:	682c      	ldr	r4, [r5, #0]
 800c5d4:	6822      	ldr	r2, [r4, #0]
 800c5d6:	0752      	lsls	r2, r2, #29
 800c5d8:	d5c6      	bpl.n	800c568 <HAL_UART_Transmit+0x60>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5da:	69e2      	ldr	r2, [r4, #28]
 800c5dc:	0510      	lsls	r0, r2, #20
 800c5de:	d5c3      	bpl.n	800c568 <HAL_UART_Transmit+0x60>
 800c5e0:	e019      	b.n	800c616 <HAL_UART_Transmit+0x10e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5e2:	f837 3b02 	ldrh.w	r3, [r7], #2
 800c5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ea:	e7c7      	b.n	800c57c <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5ec:	69e3      	ldr	r3, [r4, #28]
 800c5ee:	065b      	lsls	r3, r3, #25
 800c5f0:	d4d5      	bmi.n	800c59e <HAL_UART_Transmit+0x96>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5f2:	f7fe fd81 	bl	800b0f8 <HAL_GetTick>
 800c5f6:	eba0 0008 	sub.w	r0, r0, r8
 800c5fa:	fab6 f386 	clz	r3, r6
 800c5fe:	4286      	cmp	r6, r0
 800c600:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800c604:	d31a      	bcc.n	800c63c <HAL_UART_Transmit+0x134>
 800c606:	b9cb      	cbnz	r3, 800c63c <HAL_UART_Transmit+0x134>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c608:	682c      	ldr	r4, [r5, #0]
 800c60a:	6822      	ldr	r2, [r4, #0]
 800c60c:	0757      	lsls	r7, r2, #29
 800c60e:	d5c1      	bpl.n	800c594 <HAL_UART_Transmit+0x8c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c610:	69e2      	ldr	r2, [r4, #28]
 800c612:	0510      	lsls	r0, r2, #20
 800c614:	d5be      	bpl.n	800c594 <HAL_UART_Transmit+0x8c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c616:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 800c61a:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800c61c:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c61e:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c620:	6821      	ldr	r1, [r4, #0]
 800c622:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800c626:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c628:	68a1      	ldr	r1, [r4, #8]
 800c62a:	f021 0101 	bic.w	r1, r1, #1
 800c62e:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800c630:	676a      	str	r2, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c632:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800c636:	67aa      	str	r2, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c638:	67ea      	str	r2, [r5, #124]	; 0x7c
 800c63a:	e7b5      	b.n	800c5a8 <HAL_UART_Transmit+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c63c:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800c63e:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800c640:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 800c642:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c64a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c64c:	689a      	ldr	r2, [r3, #8]
 800c64e:	f022 0201 	bic.w	r2, r2, #1
 800c652:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c654:	6769      	str	r1, [r5, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800c656:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800c65a:	67a9      	str	r1, [r5, #120]	; 0x78
 800c65c:	e7a4      	b.n	800c5a8 <HAL_UART_Transmit+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c65e:	692b      	ldr	r3, [r5, #16]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f47f af79 	bne.w	800c558 <HAL_UART_Transmit+0x50>
 800c666:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800c668:	4699      	mov	r9, r3
 800c66a:	e775      	b.n	800c558 <HAL_UART_Transmit+0x50>

0800c66c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c66c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c66e:	07da      	lsls	r2, r3, #31
{
 800c670:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c672:	d506      	bpl.n	800c682 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c674:	6801      	ldr	r1, [r0, #0]
 800c676:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c678:	684a      	ldr	r2, [r1, #4]
 800c67a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c67e:	4322      	orrs	r2, r4
 800c680:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c682:	079c      	lsls	r4, r3, #30
 800c684:	d506      	bpl.n	800c694 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c686:	6801      	ldr	r1, [r0, #0]
 800c688:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c68a:	684a      	ldr	r2, [r1, #4]
 800c68c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c690:	4322      	orrs	r2, r4
 800c692:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c694:	0759      	lsls	r1, r3, #29
 800c696:	d506      	bpl.n	800c6a6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c698:	6801      	ldr	r1, [r0, #0]
 800c69a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c69c:	684a      	ldr	r2, [r1, #4]
 800c69e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c6a2:	4322      	orrs	r2, r4
 800c6a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c6a6:	071a      	lsls	r2, r3, #28
 800c6a8:	d506      	bpl.n	800c6b8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6aa:	6801      	ldr	r1, [r0, #0]
 800c6ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c6ae:	684a      	ldr	r2, [r1, #4]
 800c6b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6b4:	4322      	orrs	r2, r4
 800c6b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c6b8:	06dc      	lsls	r4, r3, #27
 800c6ba:	d506      	bpl.n	800c6ca <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c6bc:	6801      	ldr	r1, [r0, #0]
 800c6be:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c6c0:	688a      	ldr	r2, [r1, #8]
 800c6c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c6c6:	4322      	orrs	r2, r4
 800c6c8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c6ca:	0699      	lsls	r1, r3, #26
 800c6cc:	d506      	bpl.n	800c6dc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6ce:	6801      	ldr	r1, [r0, #0]
 800c6d0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c6d2:	688a      	ldr	r2, [r1, #8]
 800c6d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6d8:	4322      	orrs	r2, r4
 800c6da:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6dc:	065a      	lsls	r2, r3, #25
 800c6de:	d50a      	bpl.n	800c6f6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6e0:	6801      	ldr	r1, [r0, #0]
 800c6e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c6e4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6e6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6ea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c6ee:	ea42 0204 	orr.w	r2, r2, r4
 800c6f2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6f4:	d00b      	beq.n	800c70e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6f6:	061b      	lsls	r3, r3, #24
 800c6f8:	d506      	bpl.n	800c708 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6fa:	6802      	ldr	r2, [r0, #0]
 800c6fc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c6fe:	6853      	ldr	r3, [r2, #4]
 800c700:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c704:	430b      	orrs	r3, r1
 800c706:	6053      	str	r3, [r2, #4]
}
 800c708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c70c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c70e:	684a      	ldr	r2, [r1, #4]
 800c710:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c712:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c716:	4322      	orrs	r2, r4
 800c718:	604a      	str	r2, [r1, #4]
 800c71a:	e7ec      	b.n	800c6f6 <UART_AdvFeatureConfig+0x8a>

0800c71c <HAL_UART_Init>:
  if (huart == NULL)
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d04f      	beq.n	800c7c0 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c720:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800c722:	b570      	push	{r4, r5, r6, lr}
 800c724:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800c726:	2b00      	cmp	r3, #0
 800c728:	d045      	beq.n	800c7b6 <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 800c72a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c72c:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c72e:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800c730:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c732:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800c734:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c736:	4302      	orrs	r2, r0
 800c738:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800c73a:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c73e:	4dbc      	ldr	r5, [pc, #752]	; (800ca30 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c740:	4302      	orrs	r2, r0
 800c742:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 800c744:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c746:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c748:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c74a:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c74c:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c74e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c750:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800c752:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c754:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 800c756:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c75a:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c75c:	4db5      	ldr	r5, [pc, #724]	; (800ca34 <HAL_UART_Init+0x318>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c75e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c762:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c764:	ea41 0106 	orr.w	r1, r1, r6
 800c768:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c76a:	6899      	ldr	r1, [r3, #8]
 800c76c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800c770:	ea42 0201 	orr.w	r2, r2, r1
 800c774:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c776:	d025      	beq.n	800c7c4 <HAL_UART_Init+0xa8>
 800c778:	4aaf      	ldr	r2, [pc, #700]	; (800ca38 <HAL_UART_Init+0x31c>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d044      	beq.n	800c808 <HAL_UART_Init+0xec>
 800c77e:	4aaf      	ldr	r2, [pc, #700]	; (800ca3c <HAL_UART_Init+0x320>)
 800c780:	4293      	cmp	r3, r2
 800c782:	f000 80f3 	beq.w	800c96c <HAL_UART_Init+0x250>
 800c786:	4aae      	ldr	r2, [pc, #696]	; (800ca40 <HAL_UART_Init+0x324>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d045      	beq.n	800c818 <HAL_UART_Init+0xfc>
 800c78c:	4aad      	ldr	r2, [pc, #692]	; (800ca44 <HAL_UART_Init+0x328>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	f000 80d8 	beq.w	800c944 <HAL_UART_Init+0x228>
 800c794:	4aac      	ldr	r2, [pc, #688]	; (800ca48 <HAL_UART_Init+0x32c>)
 800c796:	4293      	cmp	r3, r2
 800c798:	f000 8188 	beq.w	800caac <HAL_UART_Init+0x390>
 800c79c:	4aab      	ldr	r2, [pc, #684]	; (800ca4c <HAL_UART_Init+0x330>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	f000 8198 	beq.w	800cad4 <HAL_UART_Init+0x3b8>
 800c7a4:	4aaa      	ldr	r2, [pc, #680]	; (800ca50 <HAL_UART_Init+0x334>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	f000 815e 	beq.w	800ca68 <HAL_UART_Init+0x34c>
  huart->RxISR = NULL;
 800c7ac:	2300      	movs	r3, #0
    return HAL_ERROR;
 800c7ae:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 800c7b0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800c7b4:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800c7b6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800c7ba:	f7f4 f8d3 	bl	8000964 <HAL_UART_MspInit>
 800c7be:	e7b4      	b.n	800c72a <HAL_UART_Init+0xe>
    return HAL_ERROR;
 800c7c0:	2001      	movs	r0, #1
}
 800c7c2:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7c4:	4ba3      	ldr	r3, [pc, #652]	; (800ca54 <HAL_UART_Init+0x338>)
 800c7c6:	4aa4      	ldr	r2, [pc, #656]	; (800ca58 <HAL_UART_Init+0x33c>)
 800c7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7cc:	f003 0303 	and.w	r3, r3, #3
 800c7d0:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c7d6:	d02f      	beq.n	800c838 <HAL_UART_Init+0x11c>
    switch (clocksource)
 800c7d8:	2b08      	cmp	r3, #8
 800c7da:	d8e7      	bhi.n	800c7ac <HAL_UART_Init+0x90>
 800c7dc:	a201      	add	r2, pc, #4	; (adr r2, 800c7e4 <HAL_UART_Init+0xc8>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c933 	.word	0x0800c933
 800c7e8:	0800c875 	.word	0x0800c875
 800c7ec:	0800c987 	.word	0x0800c987
 800c7f0:	0800c7ad 	.word	0x0800c7ad
 800c7f4:	0800c95b 	.word	0x0800c95b
 800c7f8:	0800c7ad 	.word	0x0800c7ad
 800c7fc:	0800c7ad 	.word	0x0800c7ad
 800c800:	0800c7ad 	.word	0x0800c7ad
 800c804:	0800c997 	.word	0x0800c997
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c808:	4b92      	ldr	r3, [pc, #584]	; (800ca54 <HAL_UART_Init+0x338>)
 800c80a:	4a94      	ldr	r2, [pc, #592]	; (800ca5c <HAL_UART_Init+0x340>)
 800c80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c810:	f003 030c 	and.w	r3, r3, #12
 800c814:	5cd3      	ldrb	r3, [r2, r3]
 800c816:	e7dc      	b.n	800c7d2 <HAL_UART_Init+0xb6>
 800c818:	4b8e      	ldr	r3, [pc, #568]	; (800ca54 <HAL_UART_Init+0x338>)
 800c81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c81e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c822:	2b40      	cmp	r3, #64	; 0x40
 800c824:	f000 8096 	beq.w	800c954 <HAL_UART_Init+0x238>
 800c828:	d97d      	bls.n	800c926 <HAL_UART_Init+0x20a>
 800c82a:	2b80      	cmp	r3, #128	; 0x80
 800c82c:	f000 80a8 	beq.w	800c980 <HAL_UART_Init+0x264>
 800c830:	2bc0      	cmp	r3, #192	; 0xc0
 800c832:	f000 80c5 	beq.w	800c9c0 <HAL_UART_Init+0x2a4>
 800c836:	e7b9      	b.n	800c7ac <HAL_UART_Init+0x90>
    switch (clocksource)
 800c838:	2b08      	cmp	r3, #8
 800c83a:	d8b7      	bhi.n	800c7ac <HAL_UART_Init+0x90>
 800c83c:	a201      	add	r2, pc, #4	; (adr r2, 800c844 <HAL_UART_Init+0x128>)
 800c83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c842:	bf00      	nop
 800c844:	0800ca29 	.word	0x0800ca29
 800c848:	0800c9ff 	.word	0x0800c9ff
 800c84c:	0800ca19 	.word	0x0800ca19
 800c850:	0800c7ad 	.word	0x0800c7ad
 800c854:	0800ca13 	.word	0x0800ca13
 800c858:	0800c7ad 	.word	0x0800c7ad
 800c85c:	0800c7ad 	.word	0x0800c7ad
 800c860:	0800c7ad 	.word	0x0800c7ad
 800c864:	0800c9c7 	.word	0x0800c9c7
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d19f      	bne.n	800c7ac <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c86c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c870:	f000 80c5 	beq.w	800c9fe <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c874:	f7ff fd78 	bl	800c368 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c878:	6863      	ldr	r3, [r4, #4]
 800c87a:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800c87e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c882:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c884:	f1a2 0110 	sub.w	r1, r2, #16
 800c888:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c88c:	4299      	cmp	r1, r3
 800c88e:	d88d      	bhi.n	800c7ac <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 800c890:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 800c892:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 800c894:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 800c896:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c89a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c89c:	2a00      	cmp	r2, #0
 800c89e:	f040 8082 	bne.w	800c9a6 <HAL_UART_Init+0x28a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8a2:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8a4:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8ac:	689a      	ldr	r2, [r3, #8]
 800c8ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8b2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	f042 0201 	orr.w	r2, r2, #1
 800c8ba:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8bc:	67e1      	str	r1, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800c8be:	f7fe fc1b 	bl	800b0f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8c2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c8c4:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	0710      	lsls	r0, r2, #28
 800c8ca:	d407      	bmi.n	800c8dc <HAL_UART_Init+0x1c0>
  huart->gState = HAL_UART_STATE_READY;
 800c8cc:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c8ce:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800c8d0:	6762      	str	r2, [r4, #116]	; 0x74
  return HAL_OK;
 800c8d2:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800c8d4:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800c8d6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 800c8da:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8dc:	69dd      	ldr	r5, [r3, #28]
 800c8de:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800c8e2:	d1f3      	bne.n	800c8cc <HAL_UART_Init+0x1b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8e4:	f7fe fc08 	bl	800b0f8 <HAL_GetTick>
 800c8e8:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c8ea:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8ec:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800c8f0:	f080 80cd 	bcs.w	800ca8e <HAL_UART_Init+0x372>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	0751      	lsls	r1, r2, #29
 800c8f8:	d5f0      	bpl.n	800c8dc <HAL_UART_Init+0x1c0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8fa:	69da      	ldr	r2, [r3, #28]
 800c8fc:	0512      	lsls	r2, r2, #20
 800c8fe:	d5ed      	bpl.n	800c8dc <HAL_UART_Init+0x1c0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c900:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800c904:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800c906:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c908:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c90a:	6819      	ldr	r1, [r3, #0]
 800c90c:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800c910:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c912:	6899      	ldr	r1, [r3, #8]
 800c914:	f021 0101 	bic.w	r1, r1, #1
 800c918:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800c91a:	6762      	str	r2, [r4, #116]	; 0x74
          __HAL_UNLOCK(huart);
 800c91c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800c920:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c922:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 800c924:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c926:	2b00      	cmp	r3, #0
 800c928:	f47f af40 	bne.w	800c7ac <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c92c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c930:	d07a      	beq.n	800ca28 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c932:	f7ff fd09 	bl	800c348 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c936:	6863      	ldr	r3, [r4, #4]
 800c938:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800c93c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c940:	b292      	uxth	r2, r2
 800c942:	e79f      	b.n	800c884 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c944:	4b43      	ldr	r3, [pc, #268]	; (800ca54 <HAL_UART_Init+0x338>)
 800c946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c94e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c952:	d12d      	bne.n	800c9b0 <HAL_UART_Init+0x294>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c954:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c958:	d05b      	beq.n	800ca12 <HAL_UART_Init+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 800c95a:	f7ff fcbb 	bl	800c2d4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c95e:	6863      	ldr	r3, [r4, #4]
 800c960:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800c964:	fbb2 f2f3 	udiv	r2, r2, r3
 800c968:	b292      	uxth	r2, r2
 800c96a:	e78b      	b.n	800c884 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c96c:	4b39      	ldr	r3, [pc, #228]	; (800ca54 <HAL_UART_Init+0x338>)
 800c96e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c972:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c976:	2b10      	cmp	r3, #16
 800c978:	d0ec      	beq.n	800c954 <HAL_UART_Init+0x238>
 800c97a:	d9d4      	bls.n	800c926 <HAL_UART_Init+0x20a>
 800c97c:	2b20      	cmp	r3, #32
 800c97e:	d13b      	bne.n	800c9f8 <HAL_UART_Init+0x2dc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c980:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c984:	d048      	beq.n	800ca18 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c986:	6863      	ldr	r3, [r4, #4]
 800c988:	4a35      	ldr	r2, [pc, #212]	; (800ca60 <HAL_UART_Init+0x344>)
 800c98a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800c98e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c992:	b292      	uxth	r2, r2
 800c994:	e776      	b.n	800c884 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c996:	6863      	ldr	r3, [r4, #4]
 800c998:	085a      	lsrs	r2, r3, #1
 800c99a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c99e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9a2:	b292      	uxth	r2, r2
 800c9a4:	e76e      	b.n	800c884 <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f7ff fe60 	bl	800c66c <UART_AdvFeatureConfig>
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	e778      	b.n	800c8a2 <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9b0:	d9b9      	bls.n	800c926 <HAL_UART_Init+0x20a>
 800c9b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9b6:	d0e3      	beq.n	800c980 <HAL_UART_Init+0x264>
 800c9b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9bc:	f47f aef6 	bne.w	800c7ac <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c9c4:	d1e7      	bne.n	800c996 <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c9c6:	6862      	ldr	r2, [r4, #4]
 800c9c8:	0853      	lsrs	r3, r2, #1
 800c9ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c9ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9d2:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9d4:	f1a3 0110 	sub.w	r1, r3, #16
 800c9d8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c9dc:	4291      	cmp	r1, r2
 800c9de:	f63f aee5 	bhi.w	800c7ac <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9e2:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9e6:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 800c9ea:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 800c9f2:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 800c9f6:	e750      	b.n	800c89a <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9f8:	2b30      	cmp	r3, #48	; 0x30
 800c9fa:	d0e1      	beq.n	800c9c0 <HAL_UART_Init+0x2a4>
 800c9fc:	e6d6      	b.n	800c7ac <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9fe:	f7ff fcb3 	bl	800c368 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ca02:	6862      	ldr	r2, [r4, #4]
 800ca04:	0853      	lsrs	r3, r2, #1
 800ca06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ca0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	e7e0      	b.n	800c9d4 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 800ca12:	f7ff fc5f 	bl	800c2d4 <HAL_RCC_GetSysClockFreq>
 800ca16:	e7f4      	b.n	800ca02 <HAL_UART_Init+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ca18:	6862      	ldr	r2, [r4, #4]
 800ca1a:	4b12      	ldr	r3, [pc, #72]	; (800ca64 <HAL_UART_Init+0x348>)
 800ca1c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ca20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	e7d5      	b.n	800c9d4 <HAL_UART_Init+0x2b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca28:	f7ff fc8e 	bl	800c348 <HAL_RCC_GetPCLK1Freq>
 800ca2c:	e7e9      	b.n	800ca02 <HAL_UART_Init+0x2e6>
 800ca2e:	bf00      	nop
 800ca30:	efff69f3 	.word	0xefff69f3
 800ca34:	40011000 	.word	0x40011000
 800ca38:	40004400 	.word	0x40004400
 800ca3c:	40004800 	.word	0x40004800
 800ca40:	40004c00 	.word	0x40004c00
 800ca44:	40005000 	.word	0x40005000
 800ca48:	40011400 	.word	0x40011400
 800ca4c:	40007800 	.word	0x40007800
 800ca50:	40007c00 	.word	0x40007c00
 800ca54:	40023800 	.word	0x40023800
 800ca58:	0800fcb4 	.word	0x0800fcb4
 800ca5c:	0800fcb8 	.word	0x0800fcb8
 800ca60:	00f42400 	.word	0x00f42400
 800ca64:	01e84800 	.word	0x01e84800
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca68:	4b24      	ldr	r3, [pc, #144]	; (800cafc <HAL_UART_Init+0x3e0>)
 800ca6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ca72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca76:	f43f af6d 	beq.w	800c954 <HAL_UART_Init+0x238>
 800ca7a:	f67f af54 	bls.w	800c926 <HAL_UART_Init+0x20a>
 800ca7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca82:	f43f af7d 	beq.w	800c980 <HAL_UART_Init+0x264>
 800ca86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ca8a:	d099      	beq.n	800c9c0 <HAL_UART_Init+0x2a4>
 800ca8c:	e68e      	b.n	800c7ac <HAL_UART_Init+0x90>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca8e:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 800ca90:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 800ca92:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ca98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca9a:	689a      	ldr	r2, [r3, #8]
 800ca9c:	f022 0201 	bic.w	r2, r2, #1
 800caa0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800caa2:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800caa4:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800caa8:	67a1      	str	r1, [r4, #120]	; 0x78
}
 800caaa:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800caac:	4b13      	ldr	r3, [pc, #76]	; (800cafc <HAL_UART_Init+0x3e0>)
 800caae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cab2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caba:	f43f af4b 	beq.w	800c954 <HAL_UART_Init+0x238>
 800cabe:	f67f aed3 	bls.w	800c868 <HAL_UART_Init+0x14c>
 800cac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cac6:	f43f af5b 	beq.w	800c980 <HAL_UART_Init+0x264>
 800caca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cace:	f43f af77 	beq.w	800c9c0 <HAL_UART_Init+0x2a4>
 800cad2:	e66b      	b.n	800c7ac <HAL_UART_Init+0x90>
 800cad4:	4b09      	ldr	r3, [pc, #36]	; (800cafc <HAL_UART_Init+0x3e0>)
 800cad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cada:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cae2:	f43f af37 	beq.w	800c954 <HAL_UART_Init+0x238>
 800cae6:	f67f af1e 	bls.w	800c926 <HAL_UART_Init+0x20a>
 800caea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caee:	f43f af47 	beq.w	800c980 <HAL_UART_Init+0x264>
 800caf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800caf6:	f43f af63 	beq.w	800c9c0 <HAL_UART_Init+0x2a4>
 800cafa:	e657      	b.n	800c7ac <HAL_UART_Init+0x90>
 800cafc:	40023800 	.word	0x40023800

0800cb00 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800cb04:	680f      	ldr	r7, [r1, #0]
 800cb06:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 800cb0a:	2f01      	cmp	r7, #1
 800cb0c:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 800cb10:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 800cb14:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 800cb18:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 800cb1c:	d012      	beq.n	800cb44 <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb1e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800cb20:	4f15      	ldr	r7, [pc, #84]	; (800cb78 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800cb22:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb24:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800cb28:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb2a:	4322      	orrs	r2, r4
 800cb2c:	ea42 0308 	orr.w	r3, r2, r8
 800cb30:	ea43 030c 	orr.w	r3, r3, ip
 800cb34:	4333      	orrs	r3, r6
 800cb36:	432b      	orrs	r3, r5
 800cb38:	430b      	orrs	r3, r1
 800cb3a:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800cb3c:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800cb3e:	2000      	movs	r0, #0
 800cb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb44:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800cb48:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800cb4a:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb4c:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800cb50:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800cb54:	4c08      	ldr	r4, [pc, #32]	; (800cb78 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800cb56:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb5a:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800cb5c:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800cb60:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb64:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800cb66:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb68:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800cb6a:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cb6c:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800cb6e:	6043      	str	r3, [r0, #4]
}
 800cb70:	2000      	movs	r0, #0
 800cb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb76:	bf00      	nop
 800cb78:	ffff8000 	.word	0xffff8000

0800cb7c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800cb82:	2a01      	cmp	r2, #1
 800cb84:	68cf      	ldr	r7, [r1, #12]
 800cb86:	694e      	ldr	r6, [r1, #20]
 800cb88:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb8c:	684d      	ldr	r5, [r1, #4]
 800cb8e:	f107 37ff 	add.w	r7, r7, #4294967295
 800cb92:	688c      	ldr	r4, [r1, #8]
 800cb94:	f106 36ff 	add.w	r6, r6, #4294967295
 800cb98:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800cb9c:	f105 35ff 	add.w	r5, r5, #4294967295
 800cba0:	6809      	ldr	r1, [r1, #0]
 800cba2:	f104 34ff 	add.w	r4, r4, #4294967295
 800cba6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cbaa:	ea4f 3707 	mov.w	r7, r7, lsl #12
 800cbae:	f101 38ff 	add.w	r8, r1, #4294967295
 800cbb2:	ea4f 5606 	mov.w	r6, r6, lsl #20
 800cbb6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800cbba:	ea4f 2104 	mov.w	r1, r4, lsl #8
 800cbbe:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 800cbc2:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 800cbc6:	d012      	beq.n	800cbee <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cbc8:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800cbcc:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cbce:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800cbd2:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cbd6:	ea42 0305 	orr.w	r3, r2, r5
 800cbda:	430b      	orrs	r3, r1
 800cbdc:	ea43 030e 	orr.w	r3, r3, lr
 800cbe0:	ea43 030c 	orr.w	r3, r3, ip
 800cbe4:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cbe6:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800cbe8:	2000      	movs	r0, #0
 800cbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cbee:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800cbf0:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800cbf4:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cbf6:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800cbfa:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800cbfc:	4e07      	ldr	r6, [pc, #28]	; (800cc1c <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cbfe:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800cc02:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800cc06:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cc08:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800cc0c:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cc0e:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cc10:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800cc12:	60c3      	str	r3, [r0, #12]
}
 800cc14:	2000      	movs	r0, #0
 800cc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc1a:	bf00      	nop
 800cc1c:	ff0f0fff 	.word	0xff0f0fff

0800cc20 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cc20:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 800cc22:	2200      	movs	r2, #0
{
 800cc24:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800cc26:	684d      	ldr	r5, [r1, #4]
{
 800cc28:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800cc2a:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 800cc2c:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 800cc2e:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800cc30:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800cc32:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800cc36:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800cc3a:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800cc3c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cc40:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800cc42:	9b01      	ldr	r3, [sp, #4]
 800cc44:	6123      	str	r3, [r4, #16]
}
 800cc46:	b002      	add	sp, #8
 800cc48:	bc30      	pop	{r4, r5}
 800cc4a:	4770      	bx	lr

0800cc4c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800cc4c:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 800cc4e:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800cc50:	6953      	ldr	r3, [r2, #20]
 800cc52:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800cc56:	6151      	str	r1, [r2, #20]
}
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop

0800cc5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cc5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cc62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800cc66:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800cc6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cc6e:	6099      	str	r1, [r3, #8]
#endif
}
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	e000ed00 	.word	0xe000ed00

0800cc78 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop

0800cc7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d065      	beq.n	800cd4c <HAL_TIM_Base_Init+0xd0>
{
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800cc82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cc86:	4604      	mov	r4, r0
 800cc88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d03b      	beq.n	800cd08 <HAL_TIM_Base_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc90:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800cc92:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc94:	4e36      	ldr	r6, [pc, #216]	; (800cd70 <HAL_TIM_Base_Init+0xf4>)
 800cc96:	4f37      	ldr	r7, [pc, #220]	; (800cd74 <HAL_TIM_Base_Init+0xf8>)
 800cc98:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cc9c:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 800cca0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 800cca4:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 800cca8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ccaa:	fab6 f686 	clz	r6, r6
 800ccae:	fab7 f787 	clz	r7, r7
 800ccb2:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800ccb6:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800ccba:	d02a      	beq.n	800cd12 <HAL_TIM_Base_Init+0x96>
 800ccbc:	bb4e      	cbnz	r6, 800cd12 <HAL_TIM_Base_Init+0x96>
 800ccbe:	492e      	ldr	r1, [pc, #184]	; (800cd78 <HAL_TIM_Base_Init+0xfc>)
 800ccc0:	428a      	cmp	r2, r1
 800ccc2:	d045      	beq.n	800cd50 <HAL_TIM_Base_Init+0xd4>
 800ccc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccc8:	428a      	cmp	r2, r1
 800ccca:	d041      	beq.n	800cd50 <HAL_TIM_Base_Init+0xd4>
 800cccc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccd0:	428a      	cmp	r2, r1
 800ccd2:	d042      	beq.n	800cd5a <HAL_TIM_Base_Init+0xde>
 800ccd4:	2f00      	cmp	r7, #0
 800ccd6:	d140      	bne.n	800cd5a <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ccd8:	4928      	ldr	r1, [pc, #160]	; (800cd7c <HAL_TIM_Base_Init+0x100>)
 800ccda:	428a      	cmp	r2, r1
 800ccdc:	d01e      	beq.n	800cd1c <HAL_TIM_Base_Init+0xa0>
 800ccde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cce2:	428a      	cmp	r2, r1
 800cce4:	d01a      	beq.n	800cd1c <HAL_TIM_Base_Init+0xa0>
 800cce6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccea:	428a      	cmp	r2, r1
 800ccec:	d016      	beq.n	800cd1c <HAL_TIM_Base_Init+0xa0>
 800ccee:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800ccf2:	428a      	cmp	r2, r1
 800ccf4:	d012      	beq.n	800cd1c <HAL_TIM_Base_Init+0xa0>
 800ccf6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccfa:	428a      	cmp	r2, r1
 800ccfc:	d00e      	beq.n	800cd1c <HAL_TIM_Base_Init+0xa0>
 800ccfe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cd02:	428a      	cmp	r2, r1
 800cd04:	d10e      	bne.n	800cd24 <HAL_TIM_Base_Init+0xa8>
 800cd06:	e009      	b.n	800cd1c <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 800cd08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cd0c:	f7ff ffb4 	bl	800cc78 <HAL_TIM_Base_MspInit>
 800cd10:	e7be      	b.n	800cc90 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd12:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cd16:	68a0      	ldr	r0, [r4, #8]
 800cd18:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd20:	6920      	ldr	r0, [r4, #16]
 800cd22:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd24:	69a1      	ldr	r1, [r4, #24]
 800cd26:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd2a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd2c:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd2e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800cd30:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd32:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cd34:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd36:	b936      	cbnz	r6, 800cd46 <HAL_TIM_Base_Init+0xca>
 800cd38:	b92f      	cbnz	r7, 800cd46 <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd3a:	2301      	movs	r3, #1
  return HAL_OK;
 800cd3c:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800cd3e:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800cd40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 800cd46:	6963      	ldr	r3, [r4, #20]
 800cd48:	6313      	str	r3, [r2, #48]	; 0x30
 800cd4a:	e7f6      	b.n	800cd3a <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 800cd4c:	2001      	movs	r0, #1
}
 800cd4e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cd54:	68a1      	ldr	r1, [r4, #8]
 800cd56:	430b      	orrs	r3, r1
 800cd58:	e7e0      	b.n	800cd1c <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd5a:	4909      	ldr	r1, [pc, #36]	; (800cd80 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cd60:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd62:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800cd64:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd68:	d0d8      	beq.n	800cd1c <HAL_TIM_Base_Init+0xa0>
 800cd6a:	2f00      	cmp	r7, #0
 800cd6c:	d1d6      	bne.n	800cd1c <HAL_TIM_Base_Init+0xa0>
 800cd6e:	e7b3      	b.n	800ccd8 <HAL_TIM_Base_Init+0x5c>
 800cd70:	40010000 	.word	0x40010000
 800cd74:	40010400 	.word	0x40010400
 800cd78:	40000400 	.word	0x40000400
 800cd7c:	40014000 	.word	0x40014000
 800cd80:	40000c00 	.word	0x40000c00

0800cd84 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd84:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd86:	4a09      	ldr	r2, [pc, #36]	; (800cdac <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd88:	68d9      	ldr	r1, [r3, #12]
 800cd8a:	f041 0101 	orr.w	r1, r1, #1
 800cd8e:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd90:	6899      	ldr	r1, [r3, #8]
 800cd92:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd94:	2a06      	cmp	r2, #6
 800cd96:	d006      	beq.n	800cda6 <HAL_TIM_Base_Start_IT+0x22>
 800cd98:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cd9c:	d003      	beq.n	800cda6 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	f042 0201 	orr.w	r2, r2, #1
 800cda4:	601a      	str	r2, [r3, #0]
}
 800cda6:	2000      	movs	r0, #0
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	00010007 	.word	0x00010007

0800cdb0 <HAL_TIM_OC_DelayElapsedCallback>:
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <HAL_TIM_IC_CaptureCallback>:
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop

0800cdb8 <HAL_TIM_PWM_PulseFinishedCallback>:
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop

0800cdbc <HAL_TIM_TriggerCallback>:
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop

0800cdc0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cdc0:	6803      	ldr	r3, [r0, #0]
 800cdc2:	691a      	ldr	r2, [r3, #16]
 800cdc4:	0791      	lsls	r1, r2, #30
{
 800cdc6:	b510      	push	{r4, lr}
 800cdc8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cdca:	d502      	bpl.n	800cdd2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	0792      	lsls	r2, r2, #30
 800cdd0:	d468      	bmi.n	800cea4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cdd2:	691a      	ldr	r2, [r3, #16]
 800cdd4:	0752      	lsls	r2, r2, #29
 800cdd6:	d502      	bpl.n	800cdde <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cdd8:	68da      	ldr	r2, [r3, #12]
 800cdda:	0750      	lsls	r0, r2, #29
 800cddc:	d44f      	bmi.n	800ce7e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cdde:	691a      	ldr	r2, [r3, #16]
 800cde0:	0711      	lsls	r1, r2, #28
 800cde2:	d502      	bpl.n	800cdea <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cde4:	68da      	ldr	r2, [r3, #12]
 800cde6:	0712      	lsls	r2, r2, #28
 800cde8:	d437      	bmi.n	800ce5a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cdea:	691a      	ldr	r2, [r3, #16]
 800cdec:	06d0      	lsls	r0, r2, #27
 800cdee:	d502      	bpl.n	800cdf6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cdf0:	68da      	ldr	r2, [r3, #12]
 800cdf2:	06d1      	lsls	r1, r2, #27
 800cdf4:	d41e      	bmi.n	800ce34 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cdf6:	691a      	ldr	r2, [r3, #16]
 800cdf8:	07d2      	lsls	r2, r2, #31
 800cdfa:	d502      	bpl.n	800ce02 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cdfc:	68da      	ldr	r2, [r3, #12]
 800cdfe:	07d0      	lsls	r0, r2, #31
 800ce00:	d469      	bmi.n	800ced6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ce02:	691a      	ldr	r2, [r3, #16]
 800ce04:	0611      	lsls	r1, r2, #24
 800ce06:	d502      	bpl.n	800ce0e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce08:	68da      	ldr	r2, [r3, #12]
 800ce0a:	0612      	lsls	r2, r2, #24
 800ce0c:	d46b      	bmi.n	800cee6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ce0e:	691a      	ldr	r2, [r3, #16]
 800ce10:	05d0      	lsls	r0, r2, #23
 800ce12:	d502      	bpl.n	800ce1a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce14:	68da      	ldr	r2, [r3, #12]
 800ce16:	0611      	lsls	r1, r2, #24
 800ce18:	d46d      	bmi.n	800cef6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce1a:	691a      	ldr	r2, [r3, #16]
 800ce1c:	0652      	lsls	r2, r2, #25
 800ce1e:	d502      	bpl.n	800ce26 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce20:	68da      	ldr	r2, [r3, #12]
 800ce22:	0650      	lsls	r0, r2, #25
 800ce24:	d46f      	bmi.n	800cf06 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce26:	691a      	ldr	r2, [r3, #16]
 800ce28:	0691      	lsls	r1, r2, #26
 800ce2a:	d502      	bpl.n	800ce32 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce2c:	68da      	ldr	r2, [r3, #12]
 800ce2e:	0692      	lsls	r2, r2, #26
 800ce30:	d449      	bmi.n	800cec6 <HAL_TIM_IRQHandler+0x106>
}
 800ce32:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce34:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce38:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800ce3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce3c:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce3e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce40:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce42:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ce46:	d16f      	bne.n	800cf28 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce48:	f7ff ffb2 	bl	800cdb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f7ff ffb3 	bl	800cdb8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce52:	2200      	movs	r2, #0
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	7722      	strb	r2, [r4, #28]
 800ce58:	e7cd      	b.n	800cdf6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce5a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce5e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ce60:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce62:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce64:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce66:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce68:	079b      	lsls	r3, r3, #30
 800ce6a:	d15a      	bne.n	800cf22 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce6c:	f7ff ffa0 	bl	800cdb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce70:	4620      	mov	r0, r4
 800ce72:	f7ff ffa1 	bl	800cdb8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce76:	2200      	movs	r2, #0
 800ce78:	6823      	ldr	r3, [r4, #0]
 800ce7a:	7722      	strb	r2, [r4, #28]
 800ce7c:	e7b5      	b.n	800cdea <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce7e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce82:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800ce84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce86:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce88:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce8a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce8c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ce90:	d144      	bne.n	800cf1c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce92:	f7ff ff8d 	bl	800cdb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce96:	4620      	mov	r0, r4
 800ce98:	f7ff ff8e 	bl	800cdb8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	7722      	strb	r2, [r4, #28]
 800cea2:	e79c      	b.n	800cdde <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cea4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cea8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ceaa:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ceac:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ceae:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ceb0:	0799      	lsls	r1, r3, #30
 800ceb2:	d130      	bne.n	800cf16 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceb4:	f7ff ff7c 	bl	800cdb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f7ff ff7d 	bl	800cdb8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cebe:	2200      	movs	r2, #0
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	7722      	strb	r2, [r4, #28]
 800cec4:	e785      	b.n	800cdd2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cec6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ceca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cecc:	611a      	str	r2, [r3, #16]
}
 800cece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ced2:	f000 b82d 	b.w	800cf30 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ced6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ceda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cedc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800cede:	f7ff fb0b 	bl	800c4f8 <HAL_TIM_PeriodElapsedCallback>
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	e78d      	b.n	800ce02 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cee6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800ceea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ceec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ceee:	f000 f821 	bl	800cf34 <HAL_TIMEx_BreakCallback>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	e78b      	b.n	800ce0e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800cefa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cefc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800cefe:	f000 f81b 	bl	800cf38 <HAL_TIMEx_Break2Callback>
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	e789      	b.n	800ce1a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf06:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800cf0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800cf0e:	f7ff ff55 	bl	800cdbc <HAL_TIM_TriggerCallback>
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	e787      	b.n	800ce26 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800cf16:	f7ff ff4d 	bl	800cdb4 <HAL_TIM_IC_CaptureCallback>
 800cf1a:	e7d0      	b.n	800cebe <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800cf1c:	f7ff ff4a 	bl	800cdb4 <HAL_TIM_IC_CaptureCallback>
 800cf20:	e7bc      	b.n	800ce9c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800cf22:	f7ff ff47 	bl	800cdb4 <HAL_TIM_IC_CaptureCallback>
 800cf26:	e7a6      	b.n	800ce76 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800cf28:	f7ff ff44 	bl	800cdb4 <HAL_TIM_IC_CaptureCallback>
 800cf2c:	e791      	b.n	800ce52 <HAL_TIM_IRQHandler+0x92>
 800cf2e:	bf00      	nop

0800cf30 <HAL_TIMEx_CommutCallback>:
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop

0800cf34 <HAL_TIMEx_BreakCallback>:
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop

0800cf38 <HAL_TIMEx_Break2Callback>:
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop

0800cf3c <_tx_event_flags_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	460c      	mov	r4, r1
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800cf40:	2228      	movs	r2, #40	; 0x28
 800cf42:	2100      	movs	r1, #0
 800cf44:	f001 fe55 	bl	800ebf2 <memset>
 800cf48:	4603      	mov	r3, r0

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800cf4a:	6044      	str	r4, [r0, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800cf4c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800cf50:	b672      	cpsid	i
    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800cf52:	490b      	ldr	r1, [pc, #44]	; (800cf80 <_tx_event_flags_create+0x44>)
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800cf54:	480b      	ldr	r0, [pc, #44]	; (800cf84 <_tx_event_flags_create+0x48>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 800cf56:	680a      	ldr	r2, [r1, #0]
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800cf58:	6018      	str	r0, [r3, #0]
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800cf5a:	480b      	ldr	r0, [pc, #44]	; (800cf88 <_tx_event_flags_create+0x4c>)
    if (_tx_event_flags_created_count == TX_EMPTY)
 800cf5c:	b15a      	cbz	r2, 800cf76 <_tx_event_flags_create+0x3a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800cf5e:	6800      	ldr	r0, [r0, #0]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800cf60:	69c5      	ldr	r5, [r0, #28]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800cf62:	61c3      	str	r3, [r0, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800cf64:	61ab      	str	r3, [r5, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800cf66:	e9c3 0506 	strd	r0, r5, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800cf6a:	3201      	adds	r2, #1
 800cf6c:	600a      	str	r2, [r1, #0]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cf6e:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800cf72:	2000      	movs	r0, #0
 800cf74:	bd38      	pop	{r3, r4, r5, pc}
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800cf76:	e9c3 3306 	strd	r3, r3, [r3, #24]
        _tx_event_flags_created_ptr =                         group_ptr;
 800cf7a:	6003      	str	r3, [r0, #0]
 800cf7c:	e7f5      	b.n	800cf6a <_tx_event_flags_create+0x2e>
 800cf7e:	bf00      	nop
 800cf80:	2001919c 	.word	0x2001919c
 800cf84:	4456444e 	.word	0x4456444e
 800cf88:	20019178 	.word	0x20019178

0800cf8c <_tx_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800cf8e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800cf92:	b672      	cpsid	i
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800cf94:	6a06      	ldr	r6, [r0, #32]
    and_request =  (get_option & TX_AND);
 800cf96:	f002 0702 	and.w	r7, r2, #2
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800cf9a:	6884      	ldr	r4, [r0, #8]

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800cf9c:	b10e      	cbz	r6, 800cfa2 <_tx_event_flags_get+0x16>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800cf9e:	ea24 0406 	bic.w	r4, r4, r6
 800cfa2:	ea04 0601 	and.w	r6, r4, r1
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800cfa6:	2f00      	cmp	r7, #0
 800cfa8:	d03c      	beq.n	800d024 <_tx_event_flags_get+0x98>
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800cfaa:	42b1      	cmp	r1, r6
 800cfac:	d03a      	beq.n	800d024 <_tx_event_flags_get+0x98>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cfae:	9c06      	ldr	r4, [sp, #24]
 800cfb0:	2c00      	cmp	r4, #0
 800cfb2:	d04a      	beq.n	800d04a <_tx_event_flags_get+0xbe>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800cfb4:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 800d068 <_tx_event_flags_get+0xdc>
 800cfb8:	f8dc 4000 	ldr.w	r4, [ip]
 800cfbc:	2c00      	cmp	r4, #0
 800cfbe:	d144      	bne.n	800d04a <_tx_event_flags_get+0xbe>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800cfc0:	4c28      	ldr	r4, [pc, #160]	; (800d064 <_tx_event_flags_get+0xd8>)
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800cfc2:	6946      	ldr	r6, [r0, #20]
                TX_THREAD_GET_CURRENT(thread_ptr)
 800cfc4:	6824      	ldr	r4, [r4, #0]
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800cfc6:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 800d06c <_tx_event_flags_get+0xe0>
                thread_ptr -> tx_thread_suspension_sequence++;
 800cfca:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800cfce:	67a1      	str	r1, [r4, #120]	; 0x78
                thread_ptr -> tx_thread_suspension_sequence++;
 800cfd0:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800cfd2:	e9c4 321f 	strd	r3, r2, [r4, #124]	; 0x7c
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800cfd6:	e9c4 e01a 	strd	lr, r0, [r4, #104]	; 0x68
                thread_ptr -> tx_thread_suspension_sequence++;
 800cfda:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800cfde:	2e00      	cmp	r6, #0
 800cfe0:	d038      	beq.n	800d054 <_tx_event_flags_get+0xc8>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800cfe2:	6903      	ldr	r3, [r0, #16]
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800cfe4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800cfe6:	e9c4 321c 	strd	r3, r2, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800cfea:	6714      	str	r4, [r2, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800cfec:	675c      	str	r4, [r3, #116]	; 0x74

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800cfee:	f8dc 3000 	ldr.w	r3, [ip]
                group_ptr -> tx_event_flags_group_suspended_count++;
 800cff2:	3601      	adds	r6, #1
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800cff4:	2107      	movs	r1, #7
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cff6:	2201      	movs	r2, #1
                group_ptr -> tx_event_flags_group_suspended_count++;
 800cff8:	6146      	str	r6, [r0, #20]
                _tx_thread_preempt_disable++;
 800cffa:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cffc:	9806      	ldr	r0, [sp, #24]
                _tx_thread_preempt_disable++;
 800cffe:	f8cc 3000 	str.w	r3, [ip]
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d002:	64e0      	str	r0, [r4, #76]	; 0x4c
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800d004:	6321      	str	r1, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d006:	63a2      	str	r2, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d008:	f385 8810 	msr	PRIMASK, r5

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 fdef 	bl	800dbf0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d012:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d016:	b672      	cpsid	i
    
                /* Disable interrupts.  */
                TX_DISABLE
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800d018:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d01c:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
}
 800d020:	4610      	mov	r0, r2
 800d022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (flags_satisfied != ((ULONG) 0))
 800d024:	2e00      	cmp	r6, #0
 800d026:	d0c2      	beq.n	800cfae <_tx_event_flags_get+0x22>
        if (clear_request == TX_TRUE)
 800d028:	f012 0201 	ands.w	r2, r2, #1
        *actual_flags_ptr =  current_flags;
 800d02c:	601c      	str	r4, [r3, #0]
        if (clear_request == TX_TRUE)
 800d02e:	d00d      	beq.n	800d04c <_tx_event_flags_get+0xc0>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800d030:	6943      	ldr	r3, [r0, #20]
 800d032:	b10b      	cbz	r3, 800d038 <_tx_event_flags_get+0xac>
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800d034:	6902      	ldr	r2, [r0, #16]
 800d036:	b18a      	cbz	r2, 800d05c <_tx_event_flags_get+0xd0>
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800d038:	6883      	ldr	r3, [r0, #8]
        status =  TX_SUCCESS;
 800d03a:	2200      	movs	r2, #0
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800d03c:	ea23 0101 	bic.w	r1, r3, r1
                group_ptr -> tx_event_flags_group_current =
 800d040:	6081      	str	r1, [r0, #8]
 800d042:	f385 8810 	msr	PRIMASK, r5
}
 800d046:	4610      	mov	r0, r2
 800d048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                status =  TX_NO_EVENTS;
 800d04a:	2207      	movs	r2, #7
 800d04c:	f385 8810 	msr	PRIMASK, r5
}
 800d050:	4610      	mov	r0, r2
 800d052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800d054:	6104      	str	r4, [r0, #16]
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800d056:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
 800d05a:	e7c8      	b.n	800cfee <_tx_event_flags_get+0x62>
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800d05c:	6a03      	ldr	r3, [r0, #32]
 800d05e:	4319      	orrs	r1, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 800d060:	6201      	str	r1, [r0, #32]
 800d062:	e7f3      	b.n	800d04c <_tx_event_flags_get+0xc0>
 800d064:	20019248 	.word	0x20019248
 800d068:	20019244 	.word	0x20019244
 800d06c:	0800e6b9 	.word	0x0800e6b9

0800d070 <_tx_event_flags_set>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	b083      	sub	sp, #12
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d076:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d07a:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800d07c:	0794      	lsls	r4, r2, #30
 800d07e:	d50c      	bpl.n	800d09a <_tx_event_flags_set+0x2a>
        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800d080:	6943      	ldr	r3, [r0, #20]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f040 80ba 	bne.w	800d1fc <_tx_event_flags_set+0x18c>

            /* Previous set operation was not interrupted, simply clear the 
               specified flags by "ANDing" the flags into the current events 
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800d088:	6883      	ldr	r3, [r0, #8]
 800d08a:	4019      	ands	r1, r3
            group_ptr -> tx_event_flags_group_current =
 800d08c:	6081      	str	r1, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d08e:	f386 8810 	msr	PRIMASK, r6
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 800d092:	2000      	movs	r0, #0
 800d094:	b003      	add	sp, #12
 800d096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800d09a:	6885      	ldr	r5, [r0, #8]
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 800d09c:	6a42      	ldr	r2, [r0, #36]	; 0x24
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800d09e:	430d      	orrs	r5, r1
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800d0a0:	6a03      	ldr	r3, [r0, #32]
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 800d0a2:	9201      	str	r2, [sp, #4]
        group_ptr -> tx_event_flags_group_current =
 800d0a4:	6085      	str	r5, [r0, #8]
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800d0a6:	b113      	cbz	r3, 800d0ae <_tx_event_flags_set+0x3e>
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800d0a8:	ea23 0101 	bic.w	r1, r3, r1
            group_ptr -> tx_event_flags_group_delayed_clear =  
 800d0ac:	6201      	str	r1, [r0, #32]
 800d0ae:	4604      	mov	r4, r0
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800d0b0:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 80ad 	beq.w	800d214 <_tx_event_flags_set+0x1a4>
            if (suspended_count == ((UINT) 1))
 800d0ba:	2a01      	cmp	r2, #1
 800d0bc:	f000 80af 	beq.w	800d21e <_tx_event_flags_set+0x1ae>
                _tx_thread_preempt_disable++;
 800d0c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d274 <_tx_event_flags_set+0x204>
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800d0c4:	2000      	movs	r0, #0
                _tx_thread_preempt_disable++;
 800d0c6:	469c      	mov	ip, r3
 800d0c8:	46ae      	mov	lr, r5
 800d0ca:	f8d8 1000 	ldr.w	r1, [r8]
        preempt_check =  TX_FALSE;
 800d0ce:	4607      	mov	r7, r0
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800d0d0:	6120      	str	r0, [r4, #16]
                _tx_thread_preempt_disable++;
 800d0d2:	4681      	mov	r9, r0
 800d0d4:	3101      	adds	r1, #1
                last_satisfied =  TX_NULL;
 800d0d6:	9000      	str	r0, [sp, #0]
                _tx_thread_preempt_disable++;
 800d0d8:	f8c8 1000 	str.w	r1, [r8]
 800d0dc:	e01b      	b.n	800d116 <_tx_event_flags_set+0xa6>
                        if (flags_satisfied != requested_flags)
 800d0de:	455d      	cmp	r5, fp
 800d0e0:	d032      	beq.n	800d148 <_tx_event_flags_set+0xd8>
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800d0e2:	f1ba 0f07 	cmp.w	sl, #7
 800d0e6:	d013      	beq.n	800d110 <_tx_event_flags_set+0xa0>
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d0e8:	428b      	cmp	r3, r1
 800d0ea:	d042      	beq.n	800d172 <_tx_event_flags_set+0x102>
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800d0ec:	6f58      	ldr	r0, [r3, #116]	; 0x74
                            if (suspended_list == thread_ptr)
 800d0ee:	4563      	cmp	r3, ip
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800d0f0:	6748      	str	r0, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800d0f2:	6701      	str	r1, [r0, #112]	; 0x70
                            if (suspended_list == thread_ptr)
 800d0f4:	f000 808b 	beq.w	800d20e <_tx_event_flags_set+0x19e>
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800d0f8:	6967      	ldr	r7, [r4, #20]
 800d0fa:	3f01      	subs	r7, #1
 800d0fc:	6167      	str	r7, [r4, #20]
                        if (satisfied_list == TX_NULL)
 800d0fe:	f1b9 0f00 	cmp.w	r9, #0
 800d102:	d03e      	beq.n	800d182 <_tx_event_flags_set+0x112>
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800d104:	9800      	ldr	r0, [sp, #0]
                        preempt_check =  TX_TRUE;
 800d106:	2701      	movs	r7, #1
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800d108:	9300      	str	r3, [sp, #0]
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800d10a:	6703      	str	r3, [r0, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800d10c:	2000      	movs	r0, #0
 800d10e:	6718      	str	r0, [r3, #112]	; 0x70
                } while (suspended_count != TX_NO_SUSPENSIONS);
 800d110:	3a01      	subs	r2, #1
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d112:	460b      	mov	r3, r1
                } while (suspended_count != TX_NO_SUSPENSIONS);
 800d114:	d03e      	beq.n	800d194 <_tx_event_flags_set+0x124>
 800d116:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d11a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d11e:	b672      	cpsid	i
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800d120:	68e1      	ldr	r1, [r4, #12]
 800d122:	b131      	cbz	r1, 800d132 <_tx_event_flags_set+0xc2>
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800d124:	68a1      	ldr	r1, [r4, #8]
 800d126:	4663      	mov	r3, ip
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800d128:	6962      	ldr	r2, [r4, #20]
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800d12a:	ea4e 0e01 	orr.w	lr, lr, r1
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800d12e:	2100      	movs	r1, #0
 800d130:	60e1      	str	r1, [r4, #12]
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800d132:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800d136:	6f9d      	ldr	r5, [r3, #120]	; 0x78
                    if (and_request == TX_AND)
 800d138:	f010 0f02 	tst.w	r0, #2
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d13c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d13e:	ea0e 0b05 	and.w	fp, lr, r5
 800d142:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
                    if (and_request == TX_AND)
 800d146:	d1ca      	bne.n	800d0de <_tx_event_flags_set+0x6e>
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800d148:	f1ba 0f07 	cmp.w	sl, #7
 800d14c:	d1cc      	bne.n	800d0e8 <_tx_event_flags_set+0x78>
                    if (flags_satisfied != ((ULONG) 0))
 800d14e:	f1bb 0f00 	cmp.w	fp, #0
 800d152:	d0dd      	beq.n	800d110 <_tx_event_flags_set+0xa0>
                            *suspend_info_ptr =  current_event_flags;
 800d154:	6fdf      	ldr	r7, [r3, #124]	; 0x7c
                            if (clear_request == TX_TRUE)
 800d156:	07c0      	lsls	r0, r0, #31
                            *suspend_info_ptr =  current_event_flags;
 800d158:	f8c7 e000 	str.w	lr, [r7]
                            if (clear_request == TX_TRUE)
 800d15c:	d503      	bpl.n	800d166 <_tx_event_flags_set+0xf6>
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800d15e:	68a7      	ldr	r7, [r4, #8]
 800d160:	ea27 0505 	bic.w	r5, r7, r5
 800d164:	60a5      	str	r5, [r4, #8]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d166:	2000      	movs	r0, #0
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d168:	428b      	cmp	r3, r1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d16a:	6698      	str	r0, [r3, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d16c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d170:	d1bc      	bne.n	800d0ec <_tx_event_flags_set+0x7c>
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800d172:	6967      	ldr	r7, [r4, #20]
                            suspended_list =  TX_NULL;
 800d174:	f04f 0c00 	mov.w	ip, #0
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800d178:	3f01      	subs	r7, #1
 800d17a:	6167      	str	r7, [r4, #20]
                        if (satisfied_list == TX_NULL)
 800d17c:	f1b9 0f00 	cmp.w	r9, #0
 800d180:	d1c0      	bne.n	800d104 <_tx_event_flags_set+0x94>
                } while (suspended_count != TX_NO_SUSPENSIONS);
 800d182:	3a01      	subs	r2, #1
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800d184:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	4699      	mov	r9, r3
                        preempt_check =  TX_TRUE;
 800d18c:	f04f 0701 	mov.w	r7, #1
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d190:	460b      	mov	r3, r1
                } while (suspended_count != TX_NO_SUSPENSIONS);
 800d192:	d1c0      	bne.n	800d116 <_tx_event_flags_set+0xa6>
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800d194:	6a21      	ldr	r1, [r4, #32]
 800d196:	4648      	mov	r0, r9
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800d198:	f8c4 c010 	str.w	ip, [r4, #16]
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800d19c:	b121      	cbz	r1, 800d1a8 <_tx_event_flags_set+0x138>
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800d19e:	68a3      	ldr	r3, [r4, #8]
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800d1a0:	6222      	str	r2, [r4, #32]
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800d1a2:	ea23 0301 	bic.w	r3, r3, r1
                    group_ptr -> tx_event_flags_group_current =
 800d1a6:	60a3      	str	r3, [r4, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d1a8:	f386 8810 	msr	PRIMASK, r6
                while(thread_ptr != TX_NULL)
 800d1ac:	b178      	cbz	r0, 800d1ce <_tx_event_flags_set+0x15e>
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d1ae:	6f05      	ldr	r5, [r0, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d1b0:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d1b4:	b672      	cpsid	i
                    _tx_thread_preempt_disable++;
 800d1b6:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d1c0:	f382 8810 	msr	PRIMASK, r2
                    _tx_thread_system_resume(thread_ptr);
 800d1c4:	f000 fc8e 	bl	800dae4 <_tx_thread_system_resume>
                while(thread_ptr != TX_NULL)
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	2d00      	cmp	r5, #0
 800d1cc:	d1ef      	bne.n	800d1ae <_tx_event_flags_set+0x13e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d1ce:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d1d2:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 800d1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d1de:	f386 8810 	msr	PRIMASK, r6
        if (events_set_notify != TX_NULL)
 800d1e2:	9b01      	ldr	r3, [sp, #4]
 800d1e4:	b10b      	cbz	r3, 800d1ea <_tx_event_flags_set+0x17a>
            (events_set_notify)(group_ptr);
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	4798      	blx	r3
        if (preempt_check == TX_TRUE)
 800d1ea:	2f00      	cmp	r7, #0
 800d1ec:	f43f af51 	beq.w	800d092 <_tx_event_flags_set+0x22>
            _tx_thread_system_preempt_check();
 800d1f0:	f000 fc5a 	bl	800daa8 <_tx_thread_system_preempt_check>
}
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	b003      	add	sp, #12
 800d1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800d1fc:	6903      	ldr	r3, [r0, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f47f af42 	bne.w	800d088 <_tx_event_flags_set+0x18>
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800d204:	6a03      	ldr	r3, [r0, #32]
 800d206:	ea63 0101 	orn	r1, r3, r1
            group_ptr -> tx_event_flags_group_delayed_clear =  
 800d20a:	6201      	str	r1, [r0, #32]
 800d20c:	e73f      	b.n	800d08e <_tx_event_flags_set+0x1e>
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800d20e:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
 800d212:	e771      	b.n	800d0f8 <_tx_event_flags_set+0x88>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800d214:	b362      	cbz	r2, 800d270 <_tx_event_flags_set+0x200>
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800d216:	2201      	movs	r2, #1
        preempt_check =  TX_FALSE;
 800d218:	461f      	mov	r7, r3
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800d21a:	60c2      	str	r2, [r0, #12]
 800d21c:	e7df      	b.n	800d1de <_tx_event_flags_set+0x16e>
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800d21e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800d222:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                if (and_request == TX_AND)
 800d224:	0788      	lsls	r0, r1, #30
 800d226:	ea05 0702 	and.w	r7, r5, r2
 800d22a:	d503      	bpl.n	800d234 <_tx_event_flags_set+0x1c4>
                    if (flags_satisfied != requested_flags)
 800d22c:	42ba      	cmp	r2, r7
 800d22e:	d001      	beq.n	800d234 <_tx_event_flags_set+0x1c4>
        preempt_check =  TX_FALSE;
 800d230:	2700      	movs	r7, #0
 800d232:	e7d4      	b.n	800d1de <_tx_event_flags_set+0x16e>
                if (flags_satisfied != ((ULONG) 0))
 800d234:	2f00      	cmp	r7, #0
 800d236:	d0d2      	beq.n	800d1de <_tx_event_flags_set+0x16e>
                    *suspend_info_ptr =  current_event_flags;
 800d238:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
                    if (clear_request == TX_TRUE)
 800d23a:	07c9      	lsls	r1, r1, #31
                    *suspend_info_ptr =  current_event_flags;
 800d23c:	6005      	str	r5, [r0, #0]
                    if (clear_request == TX_TRUE)
 800d23e:	d503      	bpl.n	800d248 <_tx_event_flags_set+0x1d8>
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800d240:	68a1      	ldr	r1, [r4, #8]
 800d242:	ea21 0202 	bic.w	r2, r1, r2
 800d246:	60a2      	str	r2, [r4, #8]
                    _tx_thread_preempt_disable++;
 800d248:	480a      	ldr	r0, [pc, #40]	; (800d274 <_tx_event_flags_set+0x204>)
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800d24a:	2200      	movs	r2, #0
                    _tx_thread_preempt_disable++;
 800d24c:	6801      	ldr	r1, [r0, #0]
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800d24e:	6122      	str	r2, [r4, #16]
                    _tx_thread_preempt_disable++;
 800d250:	3101      	adds	r1, #1
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800d252:	6162      	str	r2, [r4, #20]
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d254:	669a      	str	r2, [r3, #104]	; 0x68
                    _tx_thread_preempt_disable++;
 800d256:	6001      	str	r1, [r0, #0]
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d25c:	f386 8810 	msr	PRIMASK, r6
                    _tx_thread_system_resume(thread_ptr);
 800d260:	4618      	mov	r0, r3
 800d262:	f000 fc3f 	bl	800dae4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d266:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d26a:	b672      	cpsid	i
                    preempt_check =  TX_TRUE;
 800d26c:	2701      	movs	r7, #1
 800d26e:	e7b6      	b.n	800d1de <_tx_event_flags_set+0x16e>
        preempt_check =  TX_FALSE;
 800d270:	4617      	mov	r7, r2
 800d272:	e7b4      	b.n	800d1de <_tx_event_flags_set+0x16e>
 800d274:	20019244 	.word	0x20019244

0800d278 <_tx_initialize_high_level>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800d278:	b538      	push	{r3, r4, r5, lr}

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800d27a:	f000 fb1d 	bl	800d8b8 <_tx_thread_initialize>

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800d27e:	4d0e      	ldr	r5, [pc, #56]	; (800d2b8 <_tx_initialize_high_level+0x40>)
    _tx_timer_initialize();
 800d280:	f000 fdd8 	bl	800de34 <_tx_timer_initialize>
    _tx_semaphore_initialize();
 800d284:	2300      	movs	r3, #0
 800d286:	490d      	ldr	r1, [pc, #52]	; (800d2bc <_tx_initialize_high_level+0x44>)
 800d288:	4a0d      	ldr	r2, [pc, #52]	; (800d2c0 <_tx_initialize_high_level+0x48>)
 800d28a:	600b      	str	r3, [r1, #0]
 800d28c:	6013      	str	r3, [r2, #0]
    _tx_queue_initialize();
 800d28e:	4c0d      	ldr	r4, [pc, #52]	; (800d2c4 <_tx_initialize_high_level+0x4c>)

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800d290:	480d      	ldr	r0, [pc, #52]	; (800d2c8 <_tx_initialize_high_level+0x50>)
 800d292:	490e      	ldr	r1, [pc, #56]	; (800d2cc <_tx_initialize_high_level+0x54>)

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800d294:	4a0e      	ldr	r2, [pc, #56]	; (800d2d0 <_tx_initialize_high_level+0x58>)
    _tx_queue_initialize();
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	6023      	str	r3, [r4, #0]
    _tx_event_flags_initialize();
 800d29a:	6003      	str	r3, [r0, #0]
 800d29c:	600b      	str	r3, [r1, #0]
    _tx_block_pool_initialize();
 800d29e:	6013      	str	r3, [r2, #0]
 800d2a0:	4d0c      	ldr	r5, [pc, #48]	; (800d2d4 <_tx_initialize_high_level+0x5c>)

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800d2a2:	4c0d      	ldr	r4, [pc, #52]	; (800d2d8 <_tx_initialize_high_level+0x60>)
 800d2a4:	480d      	ldr	r0, [pc, #52]	; (800d2dc <_tx_initialize_high_level+0x64>)

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800d2a6:	490e      	ldr	r1, [pc, #56]	; (800d2e0 <_tx_initialize_high_level+0x68>)
 800d2a8:	4a0e      	ldr	r2, [pc, #56]	; (800d2e4 <_tx_initialize_high_level+0x6c>)
    _tx_block_pool_initialize();
 800d2aa:	602b      	str	r3, [r5, #0]
    _tx_byte_pool_initialize();
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	6003      	str	r3, [r0, #0]
    _tx_mutex_initialize();
 800d2b0:	600b      	str	r3, [r1, #0]
 800d2b2:	6013      	str	r3, [r2, #0]
#endif
}
 800d2b4:	bd38      	pop	{r3, r4, r5, pc}
 800d2b6:	bf00      	nop
 800d2b8:	200191a4 	.word	0x200191a4
 800d2bc:	20019188 	.word	0x20019188
 800d2c0:	20019198 	.word	0x20019198
 800d2c4:	20019184 	.word	0x20019184
 800d2c8:	20019178 	.word	0x20019178
 800d2cc:	2001919c 	.word	0x2001919c
 800d2d0:	200191a0 	.word	0x200191a0
 800d2d4:	20019194 	.word	0x20019194
 800d2d8:	2001918c 	.word	0x2001918c
 800d2dc:	200191a8 	.word	0x200191a8
 800d2e0:	20019180 	.word	0x20019180
 800d2e4:	2001917c 	.word	0x2001917c

0800d2e8 <_tx_initialize_kernel_enter>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID _tx_initialize_kernel_enter(VOID)
{
 800d2e8:	b510      	push	{r4, lr}
	/* Determine if the compiler has pre-initialized ThreadX.  */
	if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800d2ea:	4c0e      	ldr	r4, [pc, #56]	; (800d324 <_tx_initialize_kernel_enter+0x3c>)
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800d2f2:	d00a      	beq.n	800d30a <_tx_initialize_kernel_enter+0x22>
		/* No, the initialization still needs to take place.  */

		/* Ensure that the system state variable is set to indicate 
		 initialization is in progress.  Note that this variable is 
		 later used to represent interrupt nesting.  */
		_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 800d2f4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d2f8:	6023      	str	r3, [r4, #0]
		/* Call any port specific preprocessing.  */
		TX_PORT_SPECIFIC_PRE_INITIALIZATION

		/* Invoke the low-level initialization to handle all processor specific
		 initialization issues.  */
		_tx_initialize_low_level();
 800d2fa:	f7f2 ff91 	bl	8000220 <_tx_initialize_low_level>

		/* Invoke the high-level initialization to exercise all of the 
		 ThreadX components and the application's initialization 
		 function.  */
		_tx_initialize_high_level();
 800d2fe:	f7ff ffbb 	bl	800d278 <_tx_initialize_high_level>

		/* Call any port specific post-processing.  */
		TX_PORT_SPECIFIC_POST_INITIALIZATION
 800d302:	4a09      	ldr	r2, [pc, #36]	; (800d328 <_tx_initialize_kernel_enter+0x40>)
 800d304:	6813      	ldr	r3, [r2, #0]
 800d306:	3301      	adds	r3, #1
 800d308:	6013      	str	r3, [r2, #0]
	 later used to represent interrupt nesting.  */
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;

	/* Call the application provided initialization function. Pass the
	 * first available memory address to it.  */
	tx_application_define(_tx_initialize_unused_memory);
 800d30a:	4a08      	ldr	r2, [pc, #32]	; (800d32c <_tx_initialize_kernel_enter+0x44>)
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 800d30c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
	tx_application_define(_tx_initialize_unused_memory);
 800d310:	6810      	ldr	r0, [r2, #0]
	_tx_thread_system_state = TX_INITIALIZE_IN_PROGRESS;
 800d312:	6023      	str	r3, [r4, #0]
	tx_application_define(_tx_initialize_unused_memory);
 800d314:	f7f3 fca2 	bl	8000c5c <tx_application_define>

	/* Set the system state in preparation for entering the thread scheduler. */
	_tx_thread_system_state = TX_INITIALIZE_IS_FINISHED;
 800d318:	2300      	movs	r3, #0
 800d31a:	6023      	str	r3, [r4, #0]
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception. */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_tx_thread_schedule();
 800d320:	f7f2 bfce 	b.w	80002c0 <_tx_thread_schedule>
 800d324:	2000007c 	.word	0x2000007c
 800d328:	20019244 	.word	0x20019244
 800d32c:	20019190 	.word	0x20019190

0800d330 <_tx_mutex_create>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	460d      	mov	r5, r1
 800d334:	4614      	mov	r4, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800d336:	2100      	movs	r1, #0
 800d338:	2234      	movs	r2, #52	; 0x34
 800d33a:	f001 fc5a 	bl	800ebf2 <memset>
 800d33e:	4603      	mov	r3, r0

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800d340:	6045      	str	r5, [r0, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800d342:	6104      	str	r4, [r0, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d344:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d348:	b672      	cpsid	i
    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800d34a:	490c      	ldr	r1, [pc, #48]	; (800d37c <_tx_mutex_create+0x4c>)
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800d34c:	480c      	ldr	r0, [pc, #48]	; (800d380 <_tx_mutex_create+0x50>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800d34e:	4e0d      	ldr	r6, [pc, #52]	; (800d384 <_tx_mutex_create+0x54>)
    if (_tx_mutex_created_count == TX_EMPTY)
 800d350:	680a      	ldr	r2, [r1, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800d352:	4d0d      	ldr	r5, [pc, #52]	; (800d388 <_tx_mutex_create+0x58>)
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800d354:	601e      	str	r6, [r3, #0]
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800d356:	6005      	str	r5, [r0, #0]
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800d358:	480c      	ldr	r0, [pc, #48]	; (800d38c <_tx_mutex_create+0x5c>)
    if (_tx_mutex_created_count == TX_EMPTY)
 800d35a:	b15a      	cbz	r2, 800d374 <_tx_mutex_create+0x44>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800d35c:	6800      	ldr	r0, [r0, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800d35e:	6a45      	ldr	r5, [r0, #36]	; 0x24

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800d360:	6243      	str	r3, [r0, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800d362:	622b      	str	r3, [r5, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800d364:	e9c3 0508 	strd	r0, r5, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800d368:	3201      	adds	r2, #1
 800d36a:	600a      	str	r2, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d36c:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800d370:	2000      	movs	r0, #0
 800d372:	bd70      	pop	{r4, r5, r6, pc}
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800d374:	e9c3 3308 	strd	r3, r3, [r3, #32]
        _tx_mutex_created_ptr =                   mutex_ptr;
 800d378:	6003      	str	r3, [r0, #0]
 800d37a:	e7f5      	b.n	800d368 <_tx_mutex_create+0x38>
 800d37c:	2001917c 	.word	0x2001917c
 800d380:	2001922c 	.word	0x2001922c
 800d384:	4d555445 	.word	0x4d555445
 800d388:	0800e7bd 	.word	0x0800e7bd
 800d38c:	20019180 	.word	0x20019180

0800d390 <_tx_mutex_get>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d392:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d396:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d398:	4a3b      	ldr	r2, [pc, #236]	; (800d488 <_tx_mutex_get+0xf8>)

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800d39a:	6883      	ldr	r3, [r0, #8]
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d39c:	6814      	ldr	r4, [r2, #0]
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800d39e:	b9e3      	cbnz	r3, 800d3da <_tx_mutex_get+0x4a>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e9c0 3402 	strd	r3, r4, [r0, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800d3a6:	b1a4      	cbz	r4, 800d3d2 <_tx_mutex_get+0x42>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d3a8:	6903      	ldr	r3, [r0, #16]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d103      	bne.n	800d3b6 <_tx_mutex_get+0x26>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800d3ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800d3b0:	2320      	movs	r3, #32
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800d3b2:	6142      	str	r2, [r0, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800d3b4:	6283      	str	r3, [r0, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800d3b6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d044      	beq.n	800d448 <_tx_mutex_get+0xb8>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800d3be:	6b1a      	ldr	r2, [r3, #48]	; 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800d3c0:	6318      	str	r0, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800d3c2:	62d0      	str	r0, [r2, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800d3c4:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800d3c8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d3d2:	f385 8810 	msr	PRIMASK, r5

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800d3d6:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 800d3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800d3da:	68c2      	ldr	r2, [r0, #12]
 800d3dc:	42a2      	cmp	r2, r4
 800d3de:	d029      	beq.n	800d434 <_tx_mutex_get+0xa4>
        if (wait_option != TX_NO_WAIT)
 800d3e0:	b371      	cbz	r1, 800d440 <_tx_mutex_get+0xb0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800d3e2:	4e2a      	ldr	r6, [pc, #168]	; (800d48c <_tx_mutex_get+0xfc>)
 800d3e4:	6833      	ldr	r3, [r6, #0]
 800d3e6:	bb5b      	cbnz	r3, 800d440 <_tx_mutex_get+0xb0>
                thread_ptr -> tx_thread_suspension_sequence++;
 800d3e8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800d3ec:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800d490 <_tx_mutex_get+0x100>
                thread_ptr -> tx_thread_suspension_sequence++;
 800d3f0:	1c5f      	adds	r7, r3, #1
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800d3f2:	69c3      	ldr	r3, [r0, #28]
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800d3f4:	66e0      	str	r0, [r4, #108]	; 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 800d3f6:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800d3fa:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800d3fe:	bb43      	cbnz	r3, 800d452 <_tx_mutex_get+0xc2>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800d400:	6184      	str	r4, [r0, #24]
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800d402:	e9c4 441c 	strd	r4, r4, [r4, #112]	; 0x70
                _tx_thread_preempt_disable++;
 800d406:	6837      	ldr	r7, [r6, #0]
                mutex_ptr -> tx_mutex_suspended_count++;
 800d408:	3301      	adds	r3, #1
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800d40a:	f04f 0c0d 	mov.w	ip, #13
                mutex_ptr -> tx_mutex_suspended_count++;
 800d40e:	61c3      	str	r3, [r0, #28]
                _tx_thread_preempt_disable++;
 800d410:	3701      	adds	r7, #1
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d412:	2301      	movs	r3, #1
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d414:	64e1      	str	r1, [r4, #76]	; 0x4c
                _tx_thread_preempt_disable++;
 800d416:	6037      	str	r7, [r6, #0]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800d418:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d41c:	63a3      	str	r3, [r4, #56]	; 0x38
 800d41e:	f385 8810 	msr	PRIMASK, r5
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d422:	6903      	ldr	r3, [r0, #16]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d01d      	beq.n	800d464 <_tx_mutex_get+0xd4>
                _tx_thread_system_suspend(thread_ptr);
 800d428:	4620      	mov	r0, r4
 800d42a:	f000 fbe1 	bl	800dbf0 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 800d42e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
}
 800d432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mutex_ptr -> tx_mutex_ownership_count++;
 800d434:	3301      	adds	r3, #1
 800d436:	6083      	str	r3, [r0, #8]
 800d438:	f385 8810 	msr	PRIMASK, r5
        status =  TX_SUCCESS;
 800d43c:	2000      	movs	r0, #0
 800d43e:	e7cb      	b.n	800d3d8 <_tx_mutex_get+0x48>
 800d440:	f385 8810 	msr	PRIMASK, r5
            status =  TX_NOT_AVAILABLE;
 800d444:	201d      	movs	r0, #29
}
 800d446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800d448:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800d44c:	e9c0 000b 	strd	r0, r0, [r0, #44]	; 0x2c
 800d450:	e7ba      	b.n	800d3c8 <_tx_mutex_get+0x38>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800d452:	6987      	ldr	r7, [r0, #24]
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800d454:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800d458:	e9c4 7c1c 	strd	r7, ip, [r4, #112]	; 0x70
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800d45c:	f8cc 4070 	str.w	r4, [ip, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800d460:	677c      	str	r4, [r7, #116]	; 0x74
 800d462:	e7d0      	b.n	800d406 <_tx_mutex_get+0x76>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800d464:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d466:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d468:	428b      	cmp	r3, r1
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800d46a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800d46e:	bf88      	it	hi
 800d470:	6281      	strhi	r1, [r0, #40]	; 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800d472:	4299      	cmp	r1, r3
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800d474:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800d476:	bf38      	it	cc
 800d478:	f8c2 109c 	strcc.w	r1, [r2, #156]	; 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800d47c:	4299      	cmp	r1, r3
 800d47e:	d2d3      	bcs.n	800d428 <_tx_mutex_get+0x98>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800d480:	4610      	mov	r0, r2
 800d482:	f000 f807 	bl	800d494 <_tx_mutex_priority_change>
 800d486:	e7cf      	b.n	800d428 <_tx_mutex_get+0x98>
 800d488:	20019248 	.word	0x20019248
 800d48c:	20019244 	.word	0x20019244
 800d490:	0800e73d 	.word	0x0800e73d

0800d494 <_tx_mutex_priority_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800d494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d498:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d49a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d49e:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800d4a0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d4a2:	b152      	cbz	r2, 800d4ba <_tx_mutex_priority_change+0x26>
 800d4a4:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800d4a8:	62c1      	str	r1, [r0, #44]	; 0x2c
 800d4aa:	428a      	cmp	r2, r1
 800d4ac:	bf28      	it	cs
 800d4ae:	460a      	movcs	r2, r1
 800d4b0:	63c2      	str	r2, [r0, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d4b2:	f386 8810 	msr	PRIMASK, r6
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ba:	460d      	mov	r5, r1
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800d4bc:	4925      	ldr	r1, [pc, #148]	; (800d554 <_tx_mutex_priority_change+0xc0>)
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800d4be:	f04f 0c03 	mov.w	ip, #3
        execute_ptr =  _tx_thread_execute_ptr;
 800d4c2:	4f25      	ldr	r7, [pc, #148]	; (800d558 <_tx_mutex_priority_change+0xc4>)
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800d4c4:	680b      	ldr	r3, [r1, #0]
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d4c6:	f04f 0a01 	mov.w	sl, #1
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d4ca:	64c2      	str	r2, [r0, #76]	; 0x4c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800d4cc:	3302      	adds	r3, #2
        thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800d4ce:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d4d2:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800d4d6:	600b      	str	r3, [r1, #0]
        execute_ptr =  _tx_thread_execute_ptr;
 800d4d8:	f8d7 8000 	ldr.w	r8, [r7]
        original_priority =  thread_ptr -> tx_thread_priority;
 800d4dc:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 800d4e0:	f386 8810 	msr	PRIMASK, r6
        _tx_thread_system_suspend(thread_ptr);
 800d4e4:	f000 fb84 	bl	800dbf0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d4e8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d4ec:	b672      	cpsid	i
 800d4ee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        thread_ptr -> tx_thread_priority =  new_priority;
 800d4f2:	62e5      	str	r5, [r4, #44]	; 0x2c
 800d4f4:	42ab      	cmp	r3, r5
 800d4f6:	bf28      	it	cs
 800d4f8:	462b      	movcs	r3, r5
 800d4fa:	63e3      	str	r3, [r4, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d4fc:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 800d500:	4620      	mov	r0, r4
 800d502:	f000 faef 	bl	800dae4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d506:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d50a:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 800d50c:	683b      	ldr	r3, [r7, #0]
        if (thread_ptr != next_execute_ptr)
 800d50e:	429c      	cmp	r4, r3
 800d510:	d007      	beq.n	800d522 <_tx_mutex_priority_change+0x8e>
            if (thread_ptr -> tx_thread_state == TX_READY)
 800d512:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d514:	b92a      	cbnz	r2, 800d522 <_tx_mutex_priority_change+0x8e>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800d516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d518:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d805      	bhi.n	800d52a <_tx_mutex_priority_change+0x96>
                    if (thread_ptr == execute_ptr)
 800d51e:	4544      	cmp	r4, r8
 800d520:	d010      	beq.n	800d544 <_tx_mutex_priority_change+0xb0>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d522:	f381 8810 	msr	PRIMASK, r1
}
 800d526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800d52a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d52c:	4283      	cmp	r3, r0
 800d52e:	d9f8      	bls.n	800d522 <_tx_mutex_priority_change+0x8e>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800d530:	4282      	cmp	r2, r0
 800d532:	d207      	bcs.n	800d544 <_tx_mutex_priority_change+0xb0>
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800d534:	4809      	ldr	r0, [pc, #36]	; (800d55c <_tx_mutex_priority_change+0xc8>)
                            TX_MOD32_BIT_SET(next_execute_ptr -> tx_thread_priority, priority_bit)
 800d536:	fa0a fa02 	lsl.w	sl, sl, r2
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800d53a:	6803      	ldr	r3, [r0, #0]
 800d53c:	ea43 030a 	orr.w	r3, r3, sl
 800d540:	6003      	str	r3, [r0, #0]
 800d542:	e7ee      	b.n	800d522 <_tx_mutex_priority_change+0x8e>
                            if (original_priority < new_priority)
 800d544:	45a9      	cmp	r9, r5
                            _tx_thread_execute_ptr =  thread_ptr;
 800d546:	603c      	str	r4, [r7, #0]
                            if (original_priority < new_priority)
 800d548:	d2eb      	bcs.n	800d522 <_tx_mutex_priority_change+0x8e>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800d54a:	4a05      	ldr	r2, [pc, #20]	; (800d560 <_tx_mutex_priority_change+0xcc>)
 800d54c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800d550:	e7e7      	b.n	800d522 <_tx_mutex_priority_change+0x8e>
 800d552:	bf00      	nop
 800d554:	20019244 	.word	0x20019244
 800d558:	2001924c 	.word	0x2001924c
 800d55c:	20019254 	.word	0x20019254
 800d560:	200191ac 	.word	0x200191ac

0800d564 <_tx_mutex_put>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800d564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d568:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d56c:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800d56e:	6882      	ldr	r2, [r0, #8]
 800d570:	2a00      	cmp	r2, #0
 800d572:	d056      	beq.n	800d622 <_tx_mutex_put+0xbe>

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d574:	497e      	ldr	r1, [pc, #504]	; (800d770 <_tx_mutex_put+0x20c>)
 800d576:	46a4      	mov	ip, r4
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800d578:	68c3      	ldr	r3, [r0, #12]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800d57a:	6809      	ldr	r1, [r1, #0]
 800d57c:	428b      	cmp	r3, r1
 800d57e:	d003      	beq.n	800d588 <_tx_mutex_put+0x24>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800d580:	4e7c      	ldr	r6, [pc, #496]	; (800d774 <_tx_mutex_put+0x210>)
 800d582:	6831      	ldr	r1, [r6, #0]
 800d584:	2900      	cmp	r1, #0
 800d586:	d04c      	beq.n	800d622 <_tx_mutex_put+0xbe>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800d588:	3a01      	subs	r2, #1
 800d58a:	6082      	str	r2, [r0, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800d58c:	2a00      	cmp	r2, #0
 800d58e:	d143      	bne.n	800d618 <_tx_mutex_put+0xb4>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800d590:	2b00      	cmp	r3, #0
 800d592:	d041      	beq.n	800d618 <_tx_mutex_put+0xb4>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800d594:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d598:	3a01      	subs	r2, #1
 800d59a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800d59e:	2a00      	cmp	r2, #0
 800d5a0:	d144      	bne.n	800d62c <_tx_mutex_put+0xc8>
                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800d5a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800d5a6:	6987      	ldr	r7, [r0, #24]
 800d5a8:	6902      	ldr	r2, [r0, #16]
 800d5aa:	2f00      	cmp	r7, #0
 800d5ac:	f000 8082 	beq.w	800d6b4 <_tx_mutex_put+0x150>
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d5b0:	2a01      	cmp	r2, #1
 800d5b2:	4605      	mov	r5, r0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800d5b4:	f8d3 8094 	ldr.w	r8, [r3, #148]	; 0x94
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d5b8:	f000 8084 	beq.w	800d6c4 <_tx_mutex_put+0x160>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800d5bc:	69c3      	ldr	r3, [r0, #28]
 800d5be:	4e6d      	ldr	r6, [pc, #436]	; (800d774 <_tx_mutex_put+0x210>)
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d95d      	bls.n	800d680 <_tx_mutex_put+0x11c>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800d5c4:	2f00      	cmp	r7, #0
 800d5c6:	f000 8097 	beq.w	800d6f8 <_tx_mutex_put+0x194>
                        old_owner =      TX_NULL;
 800d5ca:	2400      	movs	r4, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800d5cc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800d5d0:	2a00      	cmp	r2, #0
 800d5d2:	d167      	bne.n	800d6a4 <_tx_mutex_put+0x140>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800d5d4:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800d5d8:	e9c5 550b 	strd	r5, r5, [r5, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800d5dc:	3201      	adds	r2, #1
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800d5de:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800d5e0:	2101      	movs	r1, #1
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800d5e2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
                            mutex_ptr -> tx_mutex_suspended_count--;
 800d5e6:	61eb      	str	r3, [r5, #28]
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800d5e8:	e9c5 1702 	strd	r1, r7, [r5, #8]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d153      	bne.n	800d698 <_tx_mutex_put+0x134>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800d5f0:	61ab      	str	r3, [r5, #24]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800d5f2:	6833      	ldr	r3, [r6, #0]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d5f4:	2200      	movs	r2, #0
                            _tx_thread_preempt_disable++;
 800d5f6:	3301      	adds	r3, #1
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d5f8:	66ba      	str	r2, [r7, #104]	; 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d5fa:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800d5fe:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d600:	f38c 8810 	msr	PRIMASK, ip

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d604:	692b      	ldr	r3, [r5, #16]
 800d606:	2b01      	cmp	r3, #1
 800d608:	f000 8097 	beq.w	800d73a <_tx_mutex_put+0x1d6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800d60c:	4638      	mov	r0, r7
 800d60e:	f000 fa69 	bl	800dae4 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800d612:	2000      	movs	r0, #0
        status =  TX_NOT_OWNED;
    }

    /* Return the completion status.  */
    return(status);
}
 800d614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d618:	f384 8810 	msr	PRIMASK, r4
                status =  TX_SUCCESS;
 800d61c:	2000      	movs	r0, #0
}
 800d61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d622:	f384 8810 	msr	PRIMASK, r4
        status =  TX_NOT_OWNED;
 800d626:	201e      	movs	r0, #30
}
 800d628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800d62c:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800d630:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800d634:	4285      	cmp	r5, r0
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800d636:	6311      	str	r1, [r2, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800d638:	62ca      	str	r2, [r1, #44]	; 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800d63a:	d1b4      	bne.n	800d5a6 <_tx_mutex_put+0x42>
 800d63c:	e7b1      	b.n	800d5a2 <_tx_mutex_put+0x3e>
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d63e:	2420      	movs	r4, #32
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d640:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d644:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 800d646:	6832      	ldr	r2, [r6, #0]
 800d648:	45a0      	cmp	r8, r4
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800d64a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800d64e:	69eb      	ldr	r3, [r5, #28]
 800d650:	bf28      	it	cs
 800d652:	46a0      	movcs	r8, r4
                            _tx_thread_preempt_disable--;
 800d654:	3a01      	subs	r2, #1
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800d656:	2b01      	cmp	r3, #1
                            _tx_thread_preempt_disable--;
 800d658:	6032      	str	r2, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800d65a:	d969      	bls.n	800d730 <_tx_mutex_put+0x1cc>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d65c:	692a      	ldr	r2, [r5, #16]
 800d65e:	2a01      	cmp	r2, #1
 800d660:	d176      	bne.n	800d750 <_tx_mutex_put+0x1ec>
                                _tx_thread_preempt_disable++;
 800d662:	6833      	ldr	r3, [r6, #0]
 800d664:	3301      	adds	r3, #1
 800d666:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d668:	f38c 8810 	msr	PRIMASK, ip
                                _tx_mutex_prioritize(mutex_ptr);
 800d66c:	4628      	mov	r0, r5
 800d66e:	f001 f921 	bl	800e8b4 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d672:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d676:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 800d678:	6833      	ldr	r3, [r6, #0]
 800d67a:	69af      	ldr	r7, [r5, #24]
 800d67c:	3b01      	subs	r3, #1
 800d67e:	6033      	str	r3, [r6, #0]
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800d680:	2f00      	cmp	r7, #0
 800d682:	d039      	beq.n	800d6f8 <_tx_mutex_put+0x194>
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d684:	692b      	ldr	r3, [r5, #16]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d154      	bne.n	800d734 <_tx_mutex_put+0x1d0>
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800d68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800d68c:	2320      	movs	r3, #32
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800d68e:	68ec      	ldr	r4, [r5, #12]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800d690:	62ab      	str	r3, [r5, #40]	; 0x28
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800d692:	616a      	str	r2, [r5, #20]
 800d694:	69eb      	ldr	r3, [r5, #28]
 800d696:	e799      	b.n	800d5cc <_tx_mutex_put+0x68>
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800d698:	e9d7 321c 	ldrd	r3, r2, [r7, #112]	; 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800d69c:	61ab      	str	r3, [r5, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800d69e:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800d6a0:	6713      	str	r3, [r2, #112]	; 0x70
 800d6a2:	e7a6      	b.n	800d5f2 <_tx_mutex_put+0x8e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800d6a4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800d6a8:	6b08      	ldr	r0, [r1, #48]	; 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800d6aa:	630d      	str	r5, [r1, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800d6ac:	62c5      	str	r5, [r0, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800d6ae:	e9c5 100b 	strd	r1, r0, [r5, #44]	; 0x2c
 800d6b2:	e793      	b.n	800d5dc <_tx_mutex_put+0x78>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800d6b4:	2a00      	cmp	r2, #0
 800d6b6:	f47f af7b 	bne.w	800d5b0 <_tx_mutex_put+0x4c>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800d6ba:	60c2      	str	r2, [r0, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d6bc:	f384 8810 	msr	PRIMASK, r4
                            status =  TX_SUCCESS;
 800d6c0:	4610      	mov	r0, r2
 800d6c2:	e7ac      	b.n	800d61e <_tx_mutex_put+0xba>
                            _tx_thread_preempt_disable++;
 800d6c4:	4e2b      	ldr	r6, [pc, #172]	; (800d774 <_tx_mutex_put+0x210>)
 800d6c6:	6832      	ldr	r2, [r6, #0]
 800d6c8:	3201      	adds	r2, #1
 800d6ca:	6032      	str	r2, [r6, #0]
 800d6cc:	f384 8810 	msr	PRIMASK, r4
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800d6d0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                            while (next_mutex != TX_NULL)
 800d6d4:	2900      	cmp	r1, #0
 800d6d6:	d0b2      	beq.n	800d63e <_tx_mutex_put+0xda>
 800d6d8:	460a      	mov	r2, r1
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d6da:	2420      	movs	r4, #32
 800d6dc:	e001      	b.n	800d6e2 <_tx_mutex_put+0x17e>
                            while (next_mutex != TX_NULL)
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	d0ae      	beq.n	800d640 <_tx_mutex_put+0xdc>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800d6e2:	6910      	ldr	r0, [r2, #16]
 800d6e4:	2801      	cmp	r0, #1
 800d6e6:	d103      	bne.n	800d6f0 <_tx_mutex_put+0x18c>
 800d6e8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800d6ea:	4284      	cmp	r4, r0
 800d6ec:	bf28      	it	cs
 800d6ee:	4604      	movcs	r4, r0
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800d6f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800d6f2:	4291      	cmp	r1, r2
 800d6f4:	d1f3      	bne.n	800d6de <_tx_mutex_put+0x17a>
 800d6f6:	e7a3      	b.n	800d640 <_tx_mutex_put+0xdc>
                            _tx_thread_preempt_disable++;
 800d6f8:	6833      	ldr	r3, [r6, #0]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	6033      	str	r3, [r6, #0]
 800d6fe:	f38c 8810 	msr	PRIMASK, ip
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800d702:	68e8      	ldr	r0, [r5, #12]
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800d704:	2220      	movs	r2, #32
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800d706:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800d708:	62aa      	str	r2, [r5, #40]	; 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800d70a:	4543      	cmp	r3, r8
 800d70c:	d002      	beq.n	800d714 <_tx_mutex_put+0x1b0>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800d70e:	4641      	mov	r1, r8
 800d710:	f7ff fec0 	bl	800d494 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d714:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d718:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 800d71a:	6833      	ldr	r3, [r6, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800d71c:	2400      	movs	r4, #0
                            _tx_thread_preempt_disable--;
 800d71e:	3b01      	subs	r3, #1
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800d720:	60ec      	str	r4, [r5, #12]
                            _tx_thread_preempt_disable--;
 800d722:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d724:	f382 8810 	msr	PRIMASK, r2
                            _tx_thread_system_preempt_check();
 800d728:	f000 f9be 	bl	800daa8 <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 800d72c:	4620      	mov	r0, r4
 800d72e:	e776      	b.n	800d61e <_tx_mutex_put+0xba>
 800d730:	69af      	ldr	r7, [r5, #24]
 800d732:	e7a5      	b.n	800d680 <_tx_mutex_put+0x11c>
                        old_owner =      TX_NULL;
 800d734:	2400      	movs	r4, #0
 800d736:	69eb      	ldr	r3, [r5, #28]
 800d738:	e748      	b.n	800d5cc <_tx_mutex_put+0x68>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800d73a:	69eb      	ldr	r3, [r5, #28]
 800d73c:	b953      	cbnz	r3, 800d754 <_tx_mutex_put+0x1f0>
                                if (old_owner -> tx_thread_priority != old_priority)
 800d73e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d740:	4543      	cmp	r3, r8
 800d742:	f43f af63 	beq.w	800d60c <_tx_mutex_put+0xa8>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800d746:	4641      	mov	r1, r8
 800d748:	4620      	mov	r0, r4
 800d74a:	f7ff fea3 	bl	800d494 <_tx_mutex_priority_change>
 800d74e:	e75d      	b.n	800d60c <_tx_mutex_put+0xa8>
 800d750:	69af      	ldr	r7, [r5, #24]
 800d752:	e737      	b.n	800d5c4 <_tx_mutex_put+0x60>
                                    _tx_mutex_prioritize(mutex_ptr);
 800d754:	4628      	mov	r0, r5
 800d756:	f001 f8ad 	bl	800e8b4 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d75a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d75e:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800d760:	69ab      	ldr	r3, [r5, #24]
                                    if (suspended_thread != TX_NULL)
 800d762:	b10b      	cbz	r3, 800d768 <_tx_mutex_put+0x204>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800d764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d766:	62ab      	str	r3, [r5, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d768:	f382 8810 	msr	PRIMASK, r2
 800d76c:	e7e7      	b.n	800d73e <_tx_mutex_put+0x1da>
 800d76e:	bf00      	nop
 800d770:	20019248 	.word	0x20019248
 800d774:	20019244 	.word	0x20019244

0800d778 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800d778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d77e:	4604      	mov	r4, r0
 800d780:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d782:	468b      	mov	fp, r1
 800d784:	4692      	mov	sl, r2
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800d786:	4630      	mov	r0, r6
 800d788:	462a      	mov	r2, r5
 800d78a:	21ef      	movs	r1, #239	; 0xef
{
 800d78c:	4698      	mov	r8, r3
 800d78e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800d792:	f001 fa2e 	bl	800ebf2 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800d796:	4620      	mov	r0, r4
 800d798:	22c8      	movs	r2, #200	; 0xc8
 800d79a:	2100      	movs	r1, #0
 800d79c:	f001 fa29 	bl	800ebf2 <memset>
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
    thread_ptr -> tx_thread_stack_start =       stack_start;
    thread_ptr -> tx_thread_stack_size =        stack_size;
    thread_ptr -> tx_thread_priority =          priority;
    thread_ptr -> tx_thread_user_priority =     priority;
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800d7a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800d7a2:	1e6a      	subs	r2, r5, #1
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d7a4:	f04f 0c20 	mov.w	ip, #32
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d7a8:	2103      	movs	r1, #3

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800d7aa:	4f36      	ldr	r7, [pc, #216]	; (800d884 <_tx_thread_create+0x10c>)
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800d7ac:	4432      	add	r2, r6
    thread_ptr -> tx_thread_name =              name_ptr;
 800d7ae:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d7b2:	6321      	str	r1, [r4, #48]	; 0x30
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800d7b4:	4620      	mov	r0, r4
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800d7b6:	60e6      	str	r6, [r4, #12]
    thread_ptr -> tx_thread_priority =          priority;
 800d7b8:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800d7bc:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800d7c0:	65a4      	str	r4, [r4, #88]	; 0x58
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d7c2:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800d7c6:	6567      	str	r7, [r4, #84]	; 0x54
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800d7c8:	492f      	ldr	r1, [pc, #188]	; (800d888 <_tx_thread_create+0x110>)
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800d7ca:	e9c4 3306 	strd	r3, r3, [r4, #24]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800d7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800d7d0:	e9c4 a811 	strd	sl, r8, [r4, #68]	; 0x44
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800d7d4:	e9c4 2504 	strd	r2, r5, [r4, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800d7d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 800d7da:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800d7de:	f7f2 fdbf 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d7e2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d7e6:	b672      	cpsid	i
    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800d7e8:	4828      	ldr	r0, [pc, #160]	; (800d88c <_tx_thread_create+0x114>)
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800d7ea:	4a29      	ldr	r2, [pc, #164]	; (800d890 <_tx_thread_create+0x118>)
    if (_tx_thread_created_count == TX_EMPTY)
 800d7ec:	6803      	ldr	r3, [r0, #0]
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800d7ee:	6022      	str	r2, [r4, #0]
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800d7f0:	4a28      	ldr	r2, [pc, #160]	; (800d894 <_tx_thread_create+0x11c>)
    if (_tx_thread_created_count == TX_EMPTY)
 800d7f2:	b9db      	cbnz	r3, 800d82c <_tx_thread_create+0xb4>
        _tx_thread_created_ptr =                    thread_ptr;
 800d7f4:	6014      	str	r4, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800d7f6:	e9c4 4422 	strd	r4, r4, [r4, #136]	; 0x88
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d7fa:	4927      	ldr	r1, [pc, #156]	; (800d898 <_tx_thread_create+0x120>)
    _tx_thread_created_count++;
 800d7fc:	3301      	adds	r3, #1
    _tx_thread_preempt_disable++;
 800d7fe:	680a      	ldr	r2, [r1, #0]
    _tx_thread_created_count++;
 800d800:	6003      	str	r3, [r0, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800d802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    _tx_thread_preempt_disable++;
 800d804:	3201      	adds	r2, #1
    if (auto_start == TX_AUTO_START)
 800d806:	2b01      	cmp	r3, #1
    _tx_thread_preempt_disable++;
 800d808:	600a      	str	r2, [r1, #0]
    if (auto_start == TX_AUTO_START)
 800d80a:	d12a      	bne.n	800d862 <_tx_thread_create+0xea>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d80c:	f3ef 8205 	mrs	r2, IPSR
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d810:	4b22      	ldr	r3, [pc, #136]	; (800d89c <_tx_thread_create+0x124>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4313      	orrs	r3, r2
 800d816:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d81a:	d211      	bcs.n	800d840 <_tx_thread_create+0xc8>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d81c:	f385 8810 	msr	PRIMASK, r5

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800d820:	4620      	mov	r0, r4
 800d822:	f000 f95f 	bl	800dae4 <_tx_thread_system_resume>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
}
 800d826:	2000      	movs	r0, #0
 800d828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        next_thread =  _tx_thread_created_ptr;
 800d82c:	6812      	ldr	r2, [r2, #0]
        previous_thread =  next_thread -> tx_thread_created_previous;
 800d82e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800d832:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800d836:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
        thread_ptr -> tx_thread_created_next =      next_thread;
 800d83a:	e9c4 2122 	strd	r2, r1, [r4, #136]	; 0x88
 800d83e:	e7dc      	b.n	800d7fa <_tx_thread_create+0x82>
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d840:	4b17      	ldr	r3, [pc, #92]	; (800d8a0 <_tx_thread_create+0x128>)
 800d842:	681e      	ldr	r6, [r3, #0]
            if (saved_thread_ptr != TX_NULL)
 800d844:	b1e6      	cbz	r6, 800d880 <_tx_thread_create+0x108>
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d846:	6af3      	ldr	r3, [r6, #44]	; 0x2c
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d848:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d84a:	63f3      	str	r3, [r6, #60]	; 0x3c
 800d84c:	f385 8810 	msr	PRIMASK, r5
        _tx_thread_system_resume(thread_ptr);
 800d850:	4620      	mov	r0, r4
 800d852:	f000 f947 	bl	800dae4 <_tx_thread_system_resume>
        if (saved_thread_ptr != TX_NULL)
 800d856:	2e00      	cmp	r6, #0
 800d858:	d0e5      	beq.n	800d826 <_tx_thread_create+0xae>
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d85a:	63f7      	str	r7, [r6, #60]	; 0x3c
}
 800d85c:	2000      	movs	r0, #0
 800d85e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d862:	f385 8810 	msr	PRIMASK, r5
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d866:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d86a:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 800d86c:	680b      	ldr	r3, [r1, #0]
 800d86e:	3b01      	subs	r3, #1
 800d870:	600b      	str	r3, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d872:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 800d876:	f000 f917 	bl	800daa8 <_tx_thread_system_preempt_check>
}
 800d87a:	2000      	movs	r0, #0
 800d87c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
UINT                    saved_threshold =  ((UINT) 0);
 800d880:	4637      	mov	r7, r6
 800d882:	e7e3      	b.n	800d84c <_tx_thread_create+0xd4>
 800d884:	0800dd79 	.word	0x0800dd79
 800d888:	0800d9d5 	.word	0x0800d9d5
 800d88c:	2001923c 	.word	0x2001923c
 800d890:	54485244 	.word	0x54485244
 800d894:	20019234 	.word	0x20019234
 800d898:	20019244 	.word	0x20019244
 800d89c:	2000007c 	.word	0x2000007c
 800d8a0:	2001924c 	.word	0x2001924c

0800d8a4 <_tx_thread_identify>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d8a4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d8a8:	b672      	cpsid	i

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d8aa:	4a02      	ldr	r2, [pc, #8]	; (800d8b4 <_tx_thread_identify+0x10>)
 800d8ac:	6810      	ldr	r0, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d8ae:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
}
 800d8b2:	4770      	bx	lr
 800d8b4:	20019248 	.word	0x20019248

0800d8b8 <_tx_thread_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800d8b8:	b538      	push	{r3, r4, r5, lr}

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800d8ba:	480f      	ldr	r0, [pc, #60]	; (800d8f8 <_tx_thread_initialize+0x40>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d8bc:	2400      	movs	r4, #0

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800d8be:	4b0f      	ldr	r3, [pc, #60]	; (800d8fc <_tx_thread_initialize+0x44>)
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d8c0:	2520      	movs	r5, #32
    _tx_thread_execute_ptr =  TX_NULL;
 800d8c2:	6004      	str	r4, [r0, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d8c4:	4621      	mov	r1, r4
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d8c6:	4a0e      	ldr	r2, [pc, #56]	; (800d900 <_tx_thread_initialize+0x48>)
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 800d8c8:	480e      	ldr	r0, [pc, #56]	; (800d904 <_tx_thread_initialize+0x4c>)
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800d8ca:	601c      	str	r4, [r3, #0]
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d8cc:	4b0e      	ldr	r3, [pc, #56]	; (800d908 <_tx_thread_initialize+0x50>)
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d8ce:	6014      	str	r4, [r2, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d8d0:	2280      	movs	r2, #128	; 0x80
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 800d8d2:	6004      	str	r4, [r0, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d8d4:	480d      	ldr	r0, [pc, #52]	; (800d90c <_tx_thread_initialize+0x54>)
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d8d6:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d8d8:	f001 f98b 	bl	800ebf2 <memset>
    TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log)));
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
 800d8dc:	4a0c      	ldr	r2, [pc, #48]	; (800d910 <_tx_thread_initialize+0x58>)
    _tx_thread_created_ptr =        TX_NULL;
 800d8de:	490d      	ldr	r1, [pc, #52]	; (800d914 <_tx_thread_initialize+0x5c>)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
                            | (((ULONG) 1) << 7)
 800d8e0:	6810      	ldr	r0, [r2, #0]
 800d8e2:	4b0d      	ldr	r3, [pc, #52]	; (800d918 <_tx_thread_initialize+0x60>)
    _tx_thread_created_ptr =        TX_NULL;
 800d8e4:	600c      	str	r4, [r1, #0]
                            | (((ULONG) 1) << 7)
 800d8e6:	4303      	orrs	r3, r0
    _tx_thread_created_count =      TX_EMPTY;
 800d8e8:	4d0c      	ldr	r5, [pc, #48]	; (800d91c <_tx_thread_initialize+0x64>)
    _tx_thread_preempt_disable =    ((UINT) 0);
 800d8ea:	480d      	ldr	r0, [pc, #52]	; (800d920 <_tx_thread_initialize+0x68>)
    _tx_thread_mutex_release =      TX_NULL;
 800d8ec:	490d      	ldr	r1, [pc, #52]	; (800d924 <_tx_thread_initialize+0x6c>)
    _tx_thread_created_count =      TX_EMPTY;
 800d8ee:	602c      	str	r4, [r5, #0]
    _tx_thread_preempt_disable =    ((UINT) 0);
 800d8f0:	6004      	str	r4, [r0, #0]
    _tx_thread_mutex_release =      TX_NULL;
 800d8f2:	600c      	str	r4, [r1, #0]
    _tx_build_options =  _tx_build_options 
 800d8f4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800d8f6:	bd38      	pop	{r3, r4, r5, pc}
 800d8f8:	2001924c 	.word	0x2001924c
 800d8fc:	20019230 	.word	0x20019230
 800d900:	20019248 	.word	0x20019248
 800d904:	20019254 	.word	0x20019254
 800d908:	20019250 	.word	0x20019250
 800d90c:	200191ac 	.word	0x200191ac
 800d910:	20019238 	.word	0x20019238
 800d914:	20019234 	.word	0x20019234
 800d918:	01000080 	.word	0x01000080
 800d91c:	2001923c 	.word	0x2001923c
 800d920:	20019244 	.word	0x20019244
 800d924:	2001922c 	.word	0x2001922c

0800d928 <_tx_thread_preemption_change>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d92a:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d92e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800d930:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800d934:	428b      	cmp	r3, r1
 800d936:	d341      	bcc.n	800d9bc <_tx_thread_preemption_change+0x94>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 800d938:	d017      	beq.n	800d96a <_tx_thread_preemption_change+0x42>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800d93a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800d93e:	4d21      	ldr	r5, [pc, #132]	; (800d9c4 <_tx_thread_preemption_change+0x9c>)
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800d940:	6013      	str	r3, [r2, #0]
 800d942:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800d946:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d948:	428b      	cmp	r3, r1
 800d94a:	682d      	ldr	r5, [r5, #0]
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 800d94c:	4616      	mov	r6, r2
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 800d94e:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 800d952:	bf28      	it	cs
 800d954:	460b      	movcs	r3, r1
            if (_tx_thread_highest_priority < new_threshold)
 800d956:	428a      	cmp	r2, r1
 800d958:	bf28      	it	cs
 800d95a:	460e      	movcs	r6, r1
 800d95c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800d95e:	42b5      	cmp	r5, r6
 800d960:	d312      	bcc.n	800d988 <_tx_thread_preemption_change+0x60>
    status =  TX_SUCCESS;
 800d962:	2000      	movs	r0, #0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d964:	f384 8810 	msr	PRIMASK, r4
    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
}
 800d968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 800d96a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d96c:	4d16      	ldr	r5, [pc, #88]	; (800d9c8 <_tx_thread_preemption_change+0xa0>)
 800d96e:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800d972:	4285      	cmp	r5, r0
 800d974:	d1e1      	bne.n	800d93a <_tx_thread_preemption_change+0x12>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800d976:	4f15      	ldr	r7, [pc, #84]	; (800d9cc <_tx_thread_preemption_change+0xa4>)
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800d978:	2601      	movs	r6, #1
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800d97a:	683d      	ldr	r5, [r7, #0]
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800d97c:	fa06 f303 	lsl.w	r3, r6, r3
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800d980:	ea25 0503 	bic.w	r5, r5, r3
 800d984:	603d      	str	r5, [r7, #0]
 800d986:	e7d8      	b.n	800d93a <_tx_thread_preemption_change+0x12>
                if (_tx_thread_execute_ptr == thread_ptr)
 800d988:	4911      	ldr	r1, [pc, #68]	; (800d9d0 <_tx_thread_preemption_change+0xa8>)
 800d98a:	680e      	ldr	r6, [r1, #0]
 800d98c:	4286      	cmp	r6, r0
 800d98e:	d1e8      	bne.n	800d962 <_tx_thread_preemption_change+0x3a>
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 800d990:	429a      	cmp	r2, r3
 800d992:	d006      	beq.n	800d9a2 <_tx_thread_preemption_change+0x7a>
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800d994:	4e0d      	ldr	r6, [pc, #52]	; (800d9cc <_tx_thread_preemption_change+0xa4>)
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800d996:	2001      	movs	r0, #1
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800d998:	6833      	ldr	r3, [r6, #0]
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800d99a:	fa00 f202 	lsl.w	r2, r0, r2
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	6033      	str	r3, [r6, #0]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d9a2:	4b09      	ldr	r3, [pc, #36]	; (800d9c8 <_tx_thread_preemption_change+0xa0>)
 800d9a4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d9a8:	600b      	str	r3, [r1, #0]
 800d9aa:	f384 8810 	msr	PRIMASK, r4
                    _tx_thread_system_preempt_check();
 800d9ae:	f000 f87b 	bl	800daa8 <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d9b2:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d9b6:	b672      	cpsid	i
    status =  TX_SUCCESS;
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	e7d3      	b.n	800d964 <_tx_thread_preemption_change+0x3c>
        status =  TX_THRESH_ERROR;
 800d9bc:	2018      	movs	r0, #24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d9be:	f384 8810 	msr	PRIMASK, r4
}
 800d9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c4:	20019250 	.word	0x20019250
 800d9c8:	200191ac 	.word	0x200191ac
 800d9cc:	20019254 	.word	0x20019254
 800d9d0:	2001924c 	.word	0x2001924c

0800d9d4 <_tx_thread_shell_entry>:
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d9d4:	4b16      	ldr	r3, [pc, #88]	; (800da30 <_tx_thread_shell_entry+0x5c>)
{
 800d9d6:	b570      	push	{r4, r5, r6, lr}
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d9d8:	681c      	ldr	r4, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d9da:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d9de:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800d9e0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d9e4:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800d9e8:	b113      	cbz	r3, 800d9f0 <_tx_thread_shell_entry+0x1c>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d9f0:	e9d4 3011 	ldrd	r3, r0, [r4, #68]	; 0x44
 800d9f4:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d9f6:	4b0f      	ldr	r3, [pc, #60]	; (800da34 <_tx_thread_shell_entry+0x60>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	b10b      	cbz	r3, 800da00 <_tx_thread_shell_entry+0x2c>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800da00:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800da04:	b672      	cpsid	i

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800da06:	4a0c      	ldr	r2, [pc, #48]	; (800da38 <_tx_thread_shell_entry+0x64>)
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800da08:	2101      	movs	r1, #1
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800da0a:	2600      	movs	r6, #0
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800da0c:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
    _tx_thread_preempt_disable++;
 800da10:	6813      	ldr	r3, [r2, #0]
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800da12:	64e6      	str	r6, [r4, #76]	; 0x4c
    _tx_thread_preempt_disable++;
 800da14:	440b      	add	r3, r1
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800da16:	6321      	str	r1, [r4, #48]	; 0x30
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800da18:	63a1      	str	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable++;
 800da1a:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800da1c:	f380 8810 	msr	PRIMASK, r0
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800da20:	b10d      	cbz	r5, 800da26 <_tx_thread_shell_entry+0x52>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800da22:	4620      	mov	r0, r4
 800da24:	47a8      	blx	r5
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800da26:	4620      	mov	r0, r4
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800da28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _tx_thread_system_suspend(thread_ptr);
 800da2c:	f000 b8e0 	b.w	800dbf0 <_tx_thread_system_suspend>
 800da30:	20019248 	.word	0x20019248
 800da34:	2001922c 	.word	0x2001922c
 800da38:	20019244 	.word	0x20019244

0800da3c <_tx_thread_sleep>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800da3e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800da42:	b672      	cpsid	i

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800da44:	4b14      	ldr	r3, [pc, #80]	; (800da98 <_tx_thread_sleep+0x5c>)
 800da46:	681c      	ldr	r4, [r3, #0]

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800da48:	b1f4      	cbz	r4, 800da88 <_tx_thread_sleep+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800da4a:	f3ef 8305 	mrs	r3, IPSR
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800da4e:	4913      	ldr	r1, [pc, #76]	; (800da9c <_tx_thread_sleep+0x60>)
 800da50:	6809      	ldr	r1, [r1, #0]
 800da52:	430b      	orrs	r3, r1
 800da54:	d118      	bne.n	800da88 <_tx_thread_sleep+0x4c>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800da56:	4b12      	ldr	r3, [pc, #72]	; (800daa0 <_tx_thread_sleep+0x64>)
 800da58:	429c      	cmp	r4, r3
 800da5a:	d015      	beq.n	800da88 <_tx_thread_sleep+0x4c>
        status =  TX_CALLER_ERROR;
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800da5c:	b1c0      	cbz	r0, 800da90 <_tx_thread_sleep+0x54>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800da5e:	4b11      	ldr	r3, [pc, #68]	; (800daa4 <_tx_thread_sleep+0x68>)
 800da60:	6819      	ldr	r1, [r3, #0]
 800da62:	b989      	cbnz	r1, 800da88 <_tx_thread_sleep+0x4c>

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800da64:	681d      	ldr	r5, [r3, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800da66:	2601      	movs	r6, #1
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800da68:	2704      	movs	r7, #4
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800da6a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
            _tx_thread_preempt_disable++;
 800da6e:	4435      	add	r5, r6
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800da70:	64e0      	str	r0, [r4, #76]	; 0x4c
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800da72:	6327      	str	r7, [r4, #48]	; 0x30
            _tx_thread_preempt_disable++;
 800da74:	601d      	str	r5, [r3, #0]
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800da76:	63a6      	str	r6, [r4, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800da78:	f382 8810 	msr	PRIMASK, r2

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800da7c:	4620      	mov	r0, r4
 800da7e:	f000 f8b7 	bl	800dbf0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800da82:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        }
    }
    
    /* Return completion status.  */
    return(status);
}
 800da86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da88:	f382 8810 	msr	PRIMASK, r2
            status =  TX_CALLER_ERROR;
 800da8c:	2013      	movs	r0, #19
}
 800da8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da90:	f382 8810 	msr	PRIMASK, r2
 800da94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da96:	bf00      	nop
 800da98:	20019248 	.word	0x20019248
 800da9c:	2000007c 	.word	0x2000007c
 800daa0:	200192f0 	.word	0x200192f0
 800daa4:	20019244 	.word	0x20019244

0800daa8 <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800daa8:	4b0a      	ldr	r3, [pc, #40]	; (800dad4 <_tx_thread_system_preempt_check+0x2c>)
 800daaa:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800daac:	b98b      	cbnz	r3, 800dad2 <_tx_thread_system_preempt_check+0x2a>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800daae:	4a0a      	ldr	r2, [pc, #40]	; (800dad8 <_tx_thread_system_preempt_check+0x30>)

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800dab0:	4b0a      	ldr	r3, [pc, #40]	; (800dadc <_tx_thread_system_preempt_check+0x34>)

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800dab2:	6812      	ldr	r2, [r2, #0]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d00b      	beq.n	800dad2 <_tx_thread_system_preempt_check+0x2a>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800daba:	4b09      	ldr	r3, [pc, #36]	; (800dae0 <_tx_thread_system_preempt_check+0x38>)
 800dabc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dac0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dac2:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800dac6:	b923      	cbnz	r3, 800dad2 <_tx_thread_system_preempt_check+0x2a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dac8:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800dacc:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dace:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800dad2:	4770      	bx	lr
 800dad4:	20019244 	.word	0x20019244
 800dad8:	20019248 	.word	0x20019248
 800dadc:	2001924c 	.word	0x2001924c
 800dae0:	e000ed04 	.word	0xe000ed04

0800dae4 <_tx_thread_system_resume>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae6:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dae8:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800daec:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800daee:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d03f      	beq.n	800db74 <_tx_thread_system_resume+0x90>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800daf4:	304c      	adds	r0, #76	; 0x4c
 800daf6:	f000 fa3d 	bl	800df74 <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800dafa:	4a35      	ldr	r2, [pc, #212]	; (800dbd0 <_tx_thread_system_resume+0xec>)

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800dafc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 800dafe:	6813      	ldr	r3, [r2, #0]
 800db00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800db02:	3b01      	subs	r3, #1
 800db04:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800db06:	b9b8      	cbnz	r0, 800db38 <_tx_thread_system_resume+0x54>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800db08:	b9f9      	cbnz	r1, 800db4a <_tx_thread_system_resume+0x66>
 800db0a:	4b32      	ldr	r3, [pc, #200]	; (800dbd4 <_tx_thread_system_resume+0xf0>)
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800db0c:	4932      	ldr	r1, [pc, #200]	; (800dbd8 <_tx_thread_system_resume+0xf4>)
 800db0e:	6809      	ldr	r1, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800db10:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	428b      	cmp	r3, r1
 800db18:	d00d      	beq.n	800db36 <_tx_thread_system_resume+0x52>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800db1a:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 800db1c:	b95b      	cbnz	r3, 800db36 <_tx_thread_system_resume+0x52>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800db1e:	4b2f      	ldr	r3, [pc, #188]	; (800dbdc <_tx_thread_system_resume+0xf8>)
 800db20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db24:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db26:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800db2a:	b923      	cbnz	r3, 800db36 <_tx_thread_system_resume+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800db2c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800db30:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800db32:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800db36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800db38:	3901      	subs	r1, #1
 800db3a:	2901      	cmp	r1, #1
 800db3c:	d9e5      	bls.n	800db0a <_tx_thread_system_resume+0x26>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800db3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db40:	b991      	cbnz	r1, 800db68 <_tx_thread_system_resume+0x84>
 800db42:	4b24      	ldr	r3, [pc, #144]	; (800dbd4 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800db44:	63a1      	str	r1, [r4, #56]	; 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 800db46:	6321      	str	r1, [r4, #48]	; 0x30
 800db48:	e7e0      	b.n	800db0c <_tx_thread_system_resume+0x28>
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800db4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db4c:	b963      	cbnz	r3, 800db68 <_tx_thread_system_resume+0x84>
                priority =  thread_ptr -> tx_thread_priority;
 800db4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                head_ptr =  _tx_thread_priority_list[priority];
 800db50:	4e23      	ldr	r6, [pc, #140]	; (800dbe0 <_tx_thread_system_resume+0xfc>)
                thread_ptr -> tx_thread_state =  TX_READY;
 800db52:	6323      	str	r3, [r4, #48]	; 0x30
                head_ptr =  _tx_thread_priority_list[priority];
 800db54:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
                if (head_ptr == TX_NULL)
 800db58:	b171      	cbz	r1, 800db78 <_tx_thread_system_resume+0x94>
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800db5a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800db5c:	4b1d      	ldr	r3, [pc, #116]	; (800dbd4 <_tx_thread_system_resume+0xf0>)
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800db5e:	6204      	str	r4, [r0, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800db60:	624c      	str	r4, [r1, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800db62:	e9c4 1008 	strd	r1, r0, [r4, #32]
 800db66:	e7d1      	b.n	800db0c <_tx_thread_system_resume+0x28>
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800db68:	2000      	movs	r0, #0
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800db6a:	2103      	movs	r1, #3
 800db6c:	4b19      	ldr	r3, [pc, #100]	; (800dbd4 <_tx_thread_system_resume+0xf0>)
 800db6e:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
 800db72:	e7cb      	b.n	800db0c <_tx_thread_system_resume+0x28>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800db74:	64c3      	str	r3, [r0, #76]	; 0x4c
 800db76:	e7c0      	b.n	800dafa <_tx_thread_system_resume+0x16>
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800db78:	491a      	ldr	r1, [pc, #104]	; (800dbe4 <_tx_thread_system_resume+0x100>)
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800db7a:	f04f 0c01 	mov.w	ip, #1
                    if (priority < _tx_thread_highest_priority)
 800db7e:	4f1a      	ldr	r7, [pc, #104]	; (800dbe8 <_tx_thread_system_resume+0x104>)
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800db80:	680b      	ldr	r3, [r1, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800db82:	fa0c fe00 	lsl.w	lr, ip, r0
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800db86:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
                    if (priority < _tx_thread_highest_priority)
 800db8a:	683e      	ldr	r6, [r7, #0]
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800db8c:	ea43 030e 	orr.w	r3, r3, lr
                    if (priority < _tx_thread_highest_priority)
 800db90:	4286      	cmp	r6, r0
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800db92:	600b      	str	r3, [r1, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 800db94:	4b0f      	ldr	r3, [pc, #60]	; (800dbd4 <_tx_thread_system_resume+0xf0>)
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800db96:	e9c4 4408 	strd	r4, r4, [r4, #32]
                    if (priority < _tx_thread_highest_priority)
 800db9a:	d9b7      	bls.n	800db0c <_tx_thread_system_resume+0x28>
                        execute_ptr =  _tx_thread_execute_ptr;
 800db9c:	6819      	ldr	r1, [r3, #0]
                        _tx_thread_highest_priority =  priority;
 800db9e:	6038      	str	r0, [r7, #0]
                        if (execute_ptr == TX_NULL)
 800dba0:	b199      	cbz	r1, 800dbca <_tx_thread_system_resume+0xe6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800dba2:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 800dba4:	4286      	cmp	r6, r0
 800dba6:	d9b1      	bls.n	800db0c <_tx_thread_system_resume+0x28>
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 800dba8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800dbaa:	428e      	cmp	r6, r1
 800dbac:	d006      	beq.n	800dbbc <_tx_thread_system_resume+0xd8>
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800dbae:	480f      	ldr	r0, [pc, #60]	; (800dbec <_tx_thread_system_resume+0x108>)
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 800dbb0:	fa0c fc01 	lsl.w	ip, ip, r1
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800dbb4:	6801      	ldr	r1, [r0, #0]
 800dbb6:	ea41 010c 	orr.w	r1, r1, ip
 800dbba:	6001      	str	r1, [r0, #0]
                                _tx_thread_execute_ptr =  thread_ptr;
 800dbbc:	601c      	str	r4, [r3, #0]
 800dbbe:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dbc2:	6813      	ldr	r3, [r2, #0]
                                if (combined_flags == ((ULONG) 0))
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d0aa      	beq.n	800db1e <_tx_thread_system_resume+0x3a>
}
 800dbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            _tx_thread_execute_ptr =  thread_ptr;
 800dbca:	601c      	str	r4, [r3, #0]
 800dbcc:	e79e      	b.n	800db0c <_tx_thread_system_resume+0x28>
 800dbce:	bf00      	nop
 800dbd0:	20019244 	.word	0x20019244
 800dbd4:	2001924c 	.word	0x2001924c
 800dbd8:	20019248 	.word	0x20019248
 800dbdc:	e000ed04 	.word	0xe000ed04
 800dbe0:	200191ac 	.word	0x200191ac
 800dbe4:	20019230 	.word	0x20019230
 800dbe8:	20019250 	.word	0x20019250
 800dbec:	20019254 	.word	0x20019254

0800dbf0 <_tx_thread_system_suspend>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800dbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800dbf4:	4b57      	ldr	r3, [pc, #348]	; (800dd54 <_tx_thread_system_suspend+0x164>)
{
 800dbf6:	4604      	mov	r4, r0
    TX_THREAD_GET_CURRENT(current_thread)
 800dbf8:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dbfa:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dbfe:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800dc00:	4285      	cmp	r5, r0
 800dc02:	d060      	beq.n	800dcc6 <_tx_thread_system_suspend+0xd6>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800dc04:	4a54      	ldr	r2, [pc, #336]	; (800dd58 <_tx_thread_system_suspend+0x168>)
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800dc06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    _tx_thread_preempt_disable--;
 800dc08:	6813      	ldr	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800dc0a:	2901      	cmp	r1, #1
    _tx_thread_preempt_disable--;
 800dc0c:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc10:	6013      	str	r3, [r2, #0]
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800dc12:	d015      	beq.n	800dc40 <_tx_thread_system_suspend+0x50>
 800dc14:	4b51      	ldr	r3, [pc, #324]	; (800dd5c <_tx_thread_system_suspend+0x16c>)
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dc16:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	42ab      	cmp	r3, r5
 800dc1e:	d00d      	beq.n	800dc3c <_tx_thread_system_suspend+0x4c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dc20:	6813      	ldr	r3, [r2, #0]
        if (combined_flags == ((ULONG) 0))
 800dc22:	b95b      	cbnz	r3, 800dc3c <_tx_thread_system_suspend+0x4c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dc24:	4b4e      	ldr	r3, [pc, #312]	; (800dd60 <_tx_thread_system_suspend+0x170>)
 800dc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc2a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc2c:	f3ef 8305 	mrs	r3, IPSR
    if (__get_ipsr_value() == 0)
 800dc30:	b923      	cbnz	r3, 800dc3c <_tx_thread_system_suspend+0x4c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dc32:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800dc36:	b662      	cpsie	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dc38:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 800dc3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800dc40:	6a23      	ldr	r3, [r4, #32]
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800dc42:	f04f 0c00 	mov.w	ip, #0
        priority =  thread_ptr -> tx_thread_priority;
 800dc46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        if (ready_next != thread_ptr)
 800dc48:	429c      	cmp	r4, r3
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800dc4a:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
        if (ready_next != thread_ptr)
 800dc4e:	d050      	beq.n	800dcf2 <_tx_thread_system_suspend+0x102>
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800dc50:	4f44      	ldr	r7, [pc, #272]	; (800dd64 <_tx_thread_system_suspend+0x174>)
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800dc52:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800dc56:	f857 e020 	ldr.w	lr, [r7, r0, lsl #2]
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800dc5a:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800dc5e:	45a6      	cmp	lr, r4
            ready_previous -> tx_thread_ready_next =    ready_next;
 800dc60:	f8cc 3020 	str.w	r3, [ip, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800dc64:	d037      	beq.n	800dcd6 <_tx_thread_system_suspend+0xe6>
        if (thread_ptr == _tx_thread_execute_ptr)
 800dc66:	4b3d      	ldr	r3, [pc, #244]	; (800dd5c <_tx_thread_system_suspend+0x16c>)
 800dc68:	6819      	ldr	r1, [r3, #0]
 800dc6a:	42a1      	cmp	r1, r4
 800dc6c:	d1d3      	bne.n	800dc16 <_tx_thread_system_suspend+0x26>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dc6e:	483e      	ldr	r0, [pc, #248]	; (800dd68 <_tx_thread_system_suspend+0x178>)
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800dc70:	493e      	ldr	r1, [pc, #248]	; (800dd6c <_tx_thread_system_suspend+0x17c>)
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dc72:	6805      	ldr	r5, [r0, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800dc74:	680c      	ldr	r4, [r1, #0]
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dc76:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800dc7a:	601d      	str	r5, [r3, #0]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800dc7c:	b1ec      	cbz	r4, 800dcba <_tx_thread_system_suspend+0xca>
                _tx_thread_preempt_disable++;
 800dc7e:	6814      	ldr	r4, [r2, #0]
 800dc80:	3401      	adds	r4, #1
 800dc82:	6014      	str	r4, [r2, #0]
 800dc84:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dc88:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dc8c:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 800dc8e:	6814      	ldr	r4, [r2, #0]
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 800dc90:	680d      	ldr	r5, [r1, #0]
                _tx_thread_preempt_disable--;
 800dc92:	3c01      	subs	r4, #1
 800dc94:	6014      	str	r4, [r2, #0]
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800dc96:	fa95 f4a5 	rbit	r4, r5
 800dc9a:	fab4 f484 	clz	r4, r4
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 800dc9e:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 800dca2:	f8d0 c000 	ldr.w	ip, [r0]
 800dca6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dca8:	4560      	cmp	r0, ip
 800dcaa:	d806      	bhi.n	800dcba <_tx_thread_system_suspend+0xca>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800dcac:	2001      	movs	r0, #1
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 800dcae:	601f      	str	r7, [r3, #0]
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800dcb0:	fa00 f404 	lsl.w	r4, r0, r4
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800dcb4:	ea25 0504 	bic.w	r5, r5, r4
 800dcb8:	600d      	str	r5, [r1, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dcba:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dcbe:	6813      	ldr	r3, [r2, #0]
            if (combined_flags == ((ULONG) 0))
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d0af      	beq.n	800dc24 <_tx_thread_system_suspend+0x34>
 800dcc4:	e7ba      	b.n	800dc3c <_tx_thread_system_suspend+0x4c>
            if (timeout != TX_WAIT_FOREVER)
 800dcc6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	3303      	adds	r3, #3
 800dccc:	d935      	bls.n	800dd3a <_tx_thread_system_suspend+0x14a>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800dcce:	4b28      	ldr	r3, [pc, #160]	; (800dd70 <_tx_thread_system_suspend+0x180>)
 800dcd0:	69e2      	ldr	r2, [r4, #28]
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	e796      	b.n	800dc04 <_tx_thread_system_suspend+0x14>
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800dcd6:	f8df c094 	ldr.w	ip, [pc, #148]	; 800dd6c <_tx_thread_system_suspend+0x17c>
                _tx_thread_priority_list[priority] =  ready_next;
 800dcda:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800dcde:	f8dc 3000 	ldr.w	r3, [ip]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d0bf      	beq.n	800dc66 <_tx_thread_system_suspend+0x76>
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800dce6:	4081      	lsls	r1, r0
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800dce8:	ea23 0301 	bic.w	r3, r3, r1
 800dcec:	f8cc 3000 	str.w	r3, [ip]
 800dcf0:	e7b9      	b.n	800dc66 <_tx_thread_system_suspend+0x76>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800dcf2:	f8df e080 	ldr.w	lr, [pc, #128]	; 800dd74 <_tx_thread_system_suspend+0x184>
            TX_MOD32_BIT_SET(priority, priority_bit)
 800dcf6:	4081      	lsls	r1, r0
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800dcf8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800dd6c <_tx_thread_system_suspend+0x17c>
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800dcfc:	f8de 3000 	ldr.w	r3, [lr]
 800dd00:	43c9      	mvns	r1, r1
            _tx_thread_priority_list[priority] =    TX_NULL;
 800dd02:	4f18      	ldr	r7, [pc, #96]	; (800dd64 <_tx_thread_system_suspend+0x174>)
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800dd04:	400b      	ands	r3, r1
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800dd06:	f8d8 9000 	ldr.w	r9, [r8]
            _tx_thread_priority_list[priority] =    TX_NULL;
 800dd0a:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800dd0e:	f8ce 3000 	str.w	r3, [lr]
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800dd12:	f1b9 0f00 	cmp.w	r9, #0
 800dd16:	d003      	beq.n	800dd20 <_tx_thread_system_suspend+0x130>
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800dd18:	ea01 0109 	and.w	r1, r1, r9
 800dd1c:	f8c8 1000 	str.w	r1, [r8]
            if (priority_map == ((ULONG) 0))
 800dd20:	b983      	cbnz	r3, 800dd44 <_tx_thread_system_suspend+0x154>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800dd22:	4811      	ldr	r0, [pc, #68]	; (800dd68 <_tx_thread_system_suspend+0x178>)
 800dd24:	2420      	movs	r4, #32
                _tx_thread_execute_ptr =       TX_NULL;
 800dd26:	490d      	ldr	r1, [pc, #52]	; (800dd5c <_tx_thread_system_suspend+0x16c>)
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800dd28:	6004      	str	r4, [r0, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800dd2a:	600b      	str	r3, [r1, #0]
 800dd2c:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dd30:	6813      	ldr	r3, [r2, #0]
                if (combined_flags == ((ULONG) 0))
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f43f af76 	beq.w	800dc24 <_tx_thread_system_suspend+0x34>
 800dd38:	e780      	b.n	800dc3c <_tx_thread_system_suspend+0x4c>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800dd3a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800dd3e:	f000 f8ef 	bl	800df20 <_tx_timer_system_activate>
 800dd42:	e7c4      	b.n	800dcce <_tx_thread_system_suspend+0xde>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800dd44:	fa93 f3a3 	rbit	r3, r3
 800dd48:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800dd4c:	4906      	ldr	r1, [pc, #24]	; (800dd68 <_tx_thread_system_suspend+0x178>)
 800dd4e:	600b      	str	r3, [r1, #0]
 800dd50:	e789      	b.n	800dc66 <_tx_thread_system_suspend+0x76>
 800dd52:	bf00      	nop
 800dd54:	20019248 	.word	0x20019248
 800dd58:	20019244 	.word	0x20019244
 800dd5c:	2001924c 	.word	0x2001924c
 800dd60:	e000ed04 	.word	0xe000ed04
 800dd64:	200191ac 	.word	0x200191ac
 800dd68:	20019250 	.word	0x20019250
 800dd6c:	20019254 	.word	0x20019254
 800dd70:	200192e0 	.word	0x200192e0
 800dd74:	20019230 	.word	0x20019230

0800dd78 <_tx_thread_timeout>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800dd78:	b410      	push	{r4}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dd7a:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dd7e:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800dd80:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800dd82:	2a04      	cmp	r2, #4
 800dd84:	d008      	beq.n	800dd98 <_tx_thread_timeout+0x20>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif
    
        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800dd86:	6e82      	ldr	r2, [r0, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800dd88:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dd8c:	f384 8810 	msr	PRIMASK, r4
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 800dd90:	b162      	cbz	r2, 800ddac <_tx_thread_timeout+0x34>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800dd92:	f85d 4b04 	ldr.w	r4, [sp], #4
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800dd96:	4710      	bx	r2
        _tx_thread_preempt_disable++;
 800dd98:	4a06      	ldr	r2, [pc, #24]	; (800ddb4 <_tx_thread_timeout+0x3c>)
 800dd9a:	6813      	ldr	r3, [r2, #0]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	6013      	str	r3, [r2, #0]
 800dda0:	f384 8810 	msr	PRIMASK, r4
}
 800dda4:	f85d 4b04 	ldr.w	r4, [sp], #4
        _tx_thread_system_resume(thread_ptr);
 800dda8:	f7ff be9c 	b.w	800dae4 <_tx_thread_system_resume>
}
 800ddac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	20019244 	.word	0x20019244

0800ddb8 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddba:	460f      	mov	r7, r1
 800ddbc:	4616      	mov	r6, r2
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	222c      	movs	r2, #44	; 0x2c
{
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	461d      	mov	r5, r3
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800ddc6:	f000 ff14 	bl	800ebf2 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800ddca:	9b06      	ldr	r3, [sp, #24]
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800ddcc:	6067      	str	r7, [r4, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800ddce:	60a3      	str	r3, [r4, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800ddd0:	9b07      	ldr	r3, [sp, #28]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800ddd2:	6165      	str	r5, [r4, #20]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800ddd4:	e9c4 3603 	strd	r3, r6, [r4, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ddd8:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dddc:	b672      	cpsid	i
    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800ddde:	4a12      	ldr	r2, [pc, #72]	; (800de28 <_tx_timer_create+0x70>)
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800dde0:	4912      	ldr	r1, [pc, #72]	; (800de2c <_tx_timer_create+0x74>)
    if (_tx_timer_created_count == TX_EMPTY)
 800dde2:	6813      	ldr	r3, [r2, #0]
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800dde4:	6021      	str	r1, [r4, #0]
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800dde6:	4912      	ldr	r1, [pc, #72]	; (800de30 <_tx_timer_create+0x78>)
    if (_tx_timer_created_count == TX_EMPTY)
 800dde8:	b95b      	cbnz	r3, 800de02 <_tx_timer_create+0x4a>
        timer_ptr -> tx_timer_created_previous =  previous_timer;
        timer_ptr -> tx_timer_created_next =      next_timer;
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800ddea:	3301      	adds	r3, #1
        _tx_timer_created_ptr =                   timer_ptr;
 800ddec:	600c      	str	r4, [r1, #0]
    _tx_timer_created_count++;
 800ddee:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800ddf0:	9b08      	ldr	r3, [sp, #32]
 800ddf2:	2b01      	cmp	r3, #1
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800ddf4:	e9c4 4409 	strd	r4, r4, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 800ddf8:	d00e      	beq.n	800de18 <_tx_timer_create+0x60>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ddfa:	f386 8810 	msr	PRIMASK, r6
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800ddfe:	2000      	movs	r0, #0
 800de00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _tx_timer_created_count++;
 800de02:	3301      	adds	r3, #1
        next_timer =  _tx_timer_created_ptr;
 800de04:	6809      	ldr	r1, [r1, #0]
    _tx_timer_created_count++;
 800de06:	6013      	str	r3, [r2, #0]
    if (auto_activate == TX_AUTO_ACTIVATE)
 800de08:	9b08      	ldr	r3, [sp, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800de0a:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if (auto_activate == TX_AUTO_ACTIVATE)
 800de0c:	2b01      	cmp	r3, #1
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800de0e:	628c      	str	r4, [r1, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800de10:	6244      	str	r4, [r0, #36]	; 0x24
        timer_ptr -> tx_timer_created_next =      next_timer;
 800de12:	e9c4 1009 	strd	r1, r0, [r4, #36]	; 0x24
    if (auto_activate == TX_AUTO_ACTIVATE)
 800de16:	d1f0      	bne.n	800ddfa <_tx_timer_create+0x42>
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800de18:	f104 0008 	add.w	r0, r4, #8
 800de1c:	f000 f880 	bl	800df20 <_tx_timer_system_activate>
 800de20:	f386 8810 	msr	PRIMASK, r6
}
 800de24:	2000      	movs	r0, #0
 800de26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de28:	200197cc 	.word	0x200197cc
 800de2c:	4154494d 	.word	0x4154494d
 800de30:	200193c0 	.word	0x200193c0

0800de34 <_tx_timer_initialize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800de34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800de38:	2500      	movs	r5, #0
    _tx_timer_expired_timer_ptr =  TX_NULL;

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800de3a:	4c26      	ldr	r4, [pc, #152]	; (800ded4 <_tx_timer_initialize+0xa0>)
    _tx_timer_system_clock =  ((ULONG) 0);
 800de3c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 800df0c <_tx_timer_initialize+0xd8>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800de40:	2280      	movs	r2, #128	; 0x80
    _tx_timer_time_slice =  ((ULONG) 0);
 800de42:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 800df10 <_tx_timer_initialize+0xdc>
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800de46:	4629      	mov	r1, r5
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800de48:	4b23      	ldr	r3, [pc, #140]	; (800ded8 <_tx_timer_initialize+0xa4>)
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800de4a:	4620      	mov	r0, r4
    _tx_timer_expired_time_slice =  TX_FALSE;
 800de4c:	4f23      	ldr	r7, [pc, #140]	; (800dedc <_tx_timer_initialize+0xa8>)
{
 800de4e:	b087      	sub	sp, #28
    _tx_timer_expired =             TX_FALSE;
 800de50:	4e23      	ldr	r6, [pc, #140]	; (800dee0 <_tx_timer_initialize+0xac>)
    _tx_timer_system_clock =  ((ULONG) 0);
 800de52:	f8ce 5000 	str.w	r5, [lr]
    _tx_timer_time_slice =  ((ULONG) 0);
 800de56:	f8cc 5000 	str.w	r5, [ip]
    _tx_timer_expired_time_slice =  TX_FALSE;
 800de5a:	603d      	str	r5, [r7, #0]
    _tx_timer_expired =             TX_FALSE;
 800de5c:	6035      	str	r5, [r6, #0]
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800de5e:	601d      	str	r5, [r3, #0]
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800de60:	f000 fec7 	bl	800ebf2 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800de64:	4e1f      	ldr	r6, [pc, #124]	; (800dee4 <_tx_timer_initialize+0xb0>)
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800de66:	f44f 6080 	mov.w	r0, #1024	; 0x400
    _tx_timer_list_start =   &_tx_timer_list[0];
 800de6a:	4a1f      	ldr	r2, [pc, #124]	; (800dee8 <_tx_timer_initialize+0xb4>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800de6c:	f104 0e80 	add.w	lr, r4, #128	; 0x80
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800de70:	6034      	str	r4, [r6, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800de72:	462b      	mov	r3, r5
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800de74:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800df14 <_tx_timer_initialize+0xe0>
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800de78:	4f1c      	ldr	r7, [pc, #112]	; (800deec <_tx_timer_initialize+0xb8>)
    _tx_timer_list_start =   &_tx_timer_list[0];
 800de7a:	6014      	str	r4, [r2, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800de7c:	4661      	mov	r1, ip
 800de7e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800df18 <_tx_timer_initialize+0xe4>
 800de82:	4602      	mov	r2, r0
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800de84:	4e1a      	ldr	r6, [pc, #104]	; (800def0 <_tx_timer_initialize+0xbc>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800de86:	4c1b      	ldr	r4, [pc, #108]	; (800def4 <_tx_timer_initialize+0xc0>)
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800de88:	f8c7 e000 	str.w	lr, [r7]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800de8c:	f8c8 5000 	str.w	r5, [r8]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 800de90:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800df1c <_tx_timer_initialize+0xe8>
 800de94:	4f18      	ldr	r7, [pc, #96]	; (800def8 <_tx_timer_initialize+0xc4>)
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800de96:	f8c6 c000 	str.w	ip, [r6]
        status =  _tx_thread_create(&_tx_timer_thread, 
 800de9a:	4d18      	ldr	r5, [pc, #96]	; (800defc <_tx_timer_initialize+0xc8>)
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800de9c:	6020      	str	r0, [r4, #0]
 800de9e:	e003      	b.n	800dea8 <_tx_timer_initialize+0x74>
 800dea0:	6831      	ldr	r1, [r6, #0]
 800dea2:	6822      	ldr	r2, [r4, #0]
 800dea4:	f8d8 3000 	ldr.w	r3, [r8]
        status =  _tx_thread_create(&_tx_timer_thread, 
 800dea8:	2000      	movs	r0, #0
 800deaa:	9201      	str	r2, [sp, #4]
 800deac:	9100      	str	r1, [sp, #0]
 800deae:	463a      	mov	r2, r7
 800deb0:	4629      	mov	r1, r5
 800deb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800deb6:	e9cd 0004 	strd	r0, r0, [sp, #16]
 800deba:	464b      	mov	r3, r9
 800debc:	4810      	ldr	r0, [pc, #64]	; (800df00 <_tx_timer_initialize+0xcc>)
 800debe:	f7ff fc5b 	bl	800d778 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d1ec      	bne.n	800dea0 <_tx_timer_initialize+0x6c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800dec6:	4a0f      	ldr	r2, [pc, #60]	; (800df04 <_tx_timer_initialize+0xd0>)

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800dec8:	4b0f      	ldr	r3, [pc, #60]	; (800df08 <_tx_timer_initialize+0xd4>)
    _tx_timer_created_ptr =  TX_NULL;
 800deca:	6010      	str	r0, [r2, #0]
    _tx_timer_created_count =  TX_EMPTY;
 800decc:	6018      	str	r0, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800dece:	b007      	add	sp, #28
 800ded0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ded4:	2001925c 	.word	0x2001925c
 800ded8:	200193b8 	.word	0x200193b8
 800dedc:	200197d0 	.word	0x200197d0
 800dee0:	200192dc 	.word	0x200192dc
 800dee4:	20019258 	.word	0x20019258
 800dee8:	200193bc 	.word	0x200193bc
 800deec:	200192e8 	.word	0x200192e8
 800def0:	200197c8 	.word	0x200197c8
 800def4:	200193c4 	.word	0x200193c4
 800def8:	0800dfa5 	.word	0x0800dfa5
 800defc:	0800fce0 	.word	0x0800fce0
 800df00:	200192f0 	.word	0x200192f0
 800df04:	200193c0 	.word	0x200193c0
 800df08:	200197cc 	.word	0x200197cc
 800df0c:	200197d4 	.word	0x200197d4
 800df10:	200192e0 	.word	0x200192e0
 800df14:	200193c8 	.word	0x200193c8
 800df18:	200192e4 	.word	0x200192e4
 800df1c:	4154494d 	.word	0x4154494d

0800df20 <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800df20:	6802      	ldr	r2, [r0, #0]
    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800df22:	1e53      	subs	r3, r2, #1
 800df24:	1cd9      	adds	r1, r3, #3
 800df26:	d900      	bls.n	800df2a <_tx_timer_system_activate+0xa>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 800df28:	4770      	bx	lr
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800df2a:	6981      	ldr	r1, [r0, #24]
 800df2c:	2900      	cmp	r1, #0
 800df2e:	d1fb      	bne.n	800df28 <_tx_timer_system_activate+0x8>
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800df30:	2a20      	cmp	r2, #32
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800df32:	4a0d      	ldr	r2, [pc, #52]	; (800df68 <_tx_timer_system_activate+0x48>)
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800df34:	490d      	ldr	r1, [pc, #52]	; (800df6c <_tx_timer_system_activate+0x4c>)
 800df36:	bf94      	ite	ls
 800df38:	009b      	lslls	r3, r3, #2
 800df3a:	237c      	movhi	r3, #124	; 0x7c
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800df3c:	6812      	ldr	r2, [r2, #0]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800df3e:	6809      	ldr	r1, [r1, #0]
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800df40:	4413      	add	r3, r2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800df42:	4299      	cmp	r1, r3
 800df44:	d803      	bhi.n	800df4e <_tx_timer_system_activate+0x2e>
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800df46:	4a0a      	ldr	r2, [pc, #40]	; (800df70 <_tx_timer_system_activate+0x50>)
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800df48:	1a5b      	subs	r3, r3, r1
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800df4a:	6812      	ldr	r2, [r2, #0]
 800df4c:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	b132      	cbz	r2, 800df60 <_tx_timer_system_activate+0x40>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800df52:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800df54:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800df56:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800df58:	e9c0 2104 	strd	r2, r1, [r0, #16]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800df5c:	6183      	str	r3, [r0, #24]
}
 800df5e:	4770      	bx	lr
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800df60:	e9c0 0004 	strd	r0, r0, [r0, #16]
                    *timer_list =  timer_ptr;
 800df64:	6018      	str	r0, [r3, #0]
 800df66:	e7f9      	b.n	800df5c <_tx_timer_system_activate+0x3c>
 800df68:	20019258 	.word	0x20019258
 800df6c:	200192e8 	.word	0x200192e8
 800df70:	200193bc 	.word	0x200193bc

0800df74 <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800df74:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800df76:	b153      	cbz	r3, 800df8e <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800df78:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800df7a:	4290      	cmp	r0, r2
 800df7c:	d008      	beq.n	800df90 <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800df7e:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800df80:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800df82:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800df84:	6819      	ldr	r1, [r3, #0]
 800df86:	4281      	cmp	r1, r0
 800df88:	d008      	beq.n	800df9c <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	6183      	str	r3, [r0, #24]
    }
}
 800df8e:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	4282      	cmp	r2, r0
 800df94:	d1f9      	bne.n	800df8a <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	e7f6      	b.n	800df8a <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 800df9c:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	e7f3      	b.n	800df8a <_tx_timer_system_deactivate+0x16>
 800dfa2:	bf00      	nop

0800dfa4 <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dfa4:	4b40      	ldr	r3, [pc, #256]	; (800e0a8 <_tx_timer_thread_entry+0x104>)
 800dfa6:	4298      	cmp	r0, r3
 800dfa8:	d000      	beq.n	800dfac <_tx_timer_thread_entry+0x8>
 800dfaa:	4770      	bx	lr
{
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	b083      	sub	sp, #12
 800dfb2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800e0c0 <_tx_timer_thread_entry+0x11c>
 800dfb6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800e0c4 <_tx_timer_thread_entry+0x120>
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800dfba:	2600      	movs	r6, #0
 800dfbc:	ad01      	add	r5, sp, #4
 800dfbe:	4c3b      	ldr	r4, [pc, #236]	; (800e0ac <_tx_timer_thread_entry+0x108>)
 800dfc0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800e0b8 <_tx_timer_thread_entry+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dfc4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dfc8:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 800dfca:	f8db 3000 	ldr.w	r3, [fp]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	9200      	str	r2, [sp, #0]
            if (expired_timers != TX_NULL)
 800dfd2:	b10a      	cbz	r2, 800dfd8 <_tx_timer_thread_entry+0x34>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800dfd4:	f8c2 d018 	str.w	sp, [r2, #24]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dfd8:	f8d8 2000 	ldr.w	r2, [r8]
            *_tx_timer_current_ptr =  TX_NULL;
 800dfdc:	f843 6b04 	str.w	r6, [r3], #4
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dfe0:	4293      	cmp	r3, r2
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800dfe2:	f8cb 3000 	str.w	r3, [fp]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dfe6:	d059      	beq.n	800e09c <_tx_timer_thread_entry+0xf8>
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800dfe8:	4b31      	ldr	r3, [pc, #196]	; (800e0b0 <_tx_timer_thread_entry+0x10c>)
 800dfea:	601e      	str	r6, [r3, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dfec:	f380 8810 	msr	PRIMASK, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dff0:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dff4:	b672      	cpsid	i
            /* Disable interrupts again.  */
            TX_DISABLE

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800dff6:	9f00      	ldr	r7, [sp, #0]
 800dff8:	b9b7      	cbnz	r7, 800e028 <_tx_timer_thread_entry+0x84>
 800dffa:	e034      	b.n	800e066 <_tx_timer_thread_entry+0xc2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800dffc:	3a20      	subs	r2, #32
                    timeout_function =  TX_NULL;

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dffe:	61bd      	str	r5, [r7, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800e000:	613f      	str	r7, [r7, #16]
                    current_timer -> tx_timer_internal_remaining_ticks =  
 800e002:	603a      	str	r2, [r7, #0]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800e004:	9701      	str	r7, [sp, #4]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800e006:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e008:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e00c:	f3ef 8910 	mrs	r9, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e010:	b672      	cpsid	i

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800e012:	9801      	ldr	r0, [sp, #4]
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800e014:	6026      	str	r6, [r4, #0]
                if (reactivate_timer == current_timer)
 800e016:	42b8      	cmp	r0, r7
 800e018:	d02b      	beq.n	800e072 <_tx_timer_thread_entry+0xce>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e01a:	f389 8810 	msr	PRIMASK, r9
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e01e:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e022:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 800e024:	9f00      	ldr	r7, [sp, #0]
 800e026:	b1f7      	cbz	r7, 800e066 <_tx_timer_thread_entry+0xc2>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800e028:	693a      	ldr	r2, [r7, #16]
                reactivate_timer =  TX_NULL;
 800e02a:	9601      	str	r6, [sp, #4]
                if (current_timer == next_timer)
 800e02c:	42ba      	cmp	r2, r7
 800e02e:	d018      	beq.n	800e062 <_tx_timer_thread_entry+0xbe>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800e030:	6978      	ldr	r0, [r7, #20]
                    expired_timers =  next_timer;
 800e032:	9200      	str	r2, [sp, #0]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e034:	6150      	str	r0, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e036:	6102      	str	r2, [r0, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800e038:	f8c2 d018 	str.w	sp, [r2, #24]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e03c:	683a      	ldr	r2, [r7, #0]
 800e03e:	2a20      	cmp	r2, #32
 800e040:	d8dc      	bhi.n	800dffc <_tx_timer_thread_entry+0x58>
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800e042:	68f8      	ldr	r0, [r7, #12]
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800e044:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800e048:	603b      	str	r3, [r7, #0]
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800e04a:	b113      	cbz	r3, 800e052 <_tx_timer_thread_entry+0xae>
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e04c:	462b      	mov	r3, r5
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800e04e:	613f      	str	r7, [r7, #16]
                        reactivate_timer =  current_timer;
 800e050:	9701      	str	r7, [sp, #4]
 800e052:	61bb      	str	r3, [r7, #24]
                _tx_timer_expired_timer_ptr =  current_timer;
 800e054:	6027      	str	r7, [r4, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e056:	f38c 8810 	msr	PRIMASK, ip
                if (timeout_function != TX_NULL)
 800e05a:	2a00      	cmp	r2, #0
 800e05c:	d0d6      	beq.n	800e00c <_tx_timer_thread_entry+0x68>
                    (timeout_function) (timeout_param);
 800e05e:	4790      	blx	r2
 800e060:	e7d4      	b.n	800e00c <_tx_timer_thread_entry+0x68>
                    expired_timers =  TX_NULL;
 800e062:	9600      	str	r6, [sp, #0]
 800e064:	e7ea      	b.n	800e03c <_tx_timer_thread_entry+0x98>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800e066:	4b12      	ldr	r3, [pc, #72]	; (800e0b0 <_tx_timer_thread_entry+0x10c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	b13b      	cbz	r3, 800e07c <_tx_timer_thread_entry+0xd8>
 800e06c:	f38c 8810 	msr	PRIMASK, ip
 800e070:	e7a8      	b.n	800dfc4 <_tx_timer_thread_entry+0x20>
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800e072:	61be      	str	r6, [r7, #24]
                    _tx_timer_system_activate(current_timer);
 800e074:	4638      	mov	r0, r7
 800e076:	f7ff ff53 	bl	800df20 <_tx_timer_system_activate>
 800e07a:	e7ce      	b.n	800e01a <_tx_timer_thread_entry+0x76>

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800e07c:	490d      	ldr	r1, [pc, #52]	; (800e0b4 <_tx_timer_thread_entry+0x110>)
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e07e:	2201      	movs	r2, #1
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e080:	2003      	movs	r0, #3
                _tx_thread_preempt_disable++;
 800e082:	680b      	ldr	r3, [r1, #0]
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e084:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
                _tx_thread_preempt_disable++;
 800e088:	4413      	add	r3, r2
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e08a:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
                _tx_thread_preempt_disable++;
 800e08e:	600b      	str	r3, [r1, #0]
 800e090:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e094:	4808      	ldr	r0, [pc, #32]	; (800e0b8 <_tx_timer_thread_entry+0x114>)
 800e096:	f7ff fdab 	bl	800dbf0 <_tx_thread_system_suspend>
 800e09a:	e793      	b.n	800dfc4 <_tx_timer_thread_entry+0x20>
                _tx_timer_current_ptr =  _tx_timer_list_start;
 800e09c:	4b07      	ldr	r3, [pc, #28]	; (800e0bc <_tx_timer_thread_entry+0x118>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f8cb 3000 	str.w	r3, [fp]
 800e0a4:	e7a0      	b.n	800dfe8 <_tx_timer_thread_entry+0x44>
 800e0a6:	bf00      	nop
 800e0a8:	4154494d 	.word	0x4154494d
 800e0ac:	200193b8 	.word	0x200193b8
 800e0b0:	200192dc 	.word	0x200192dc
 800e0b4:	20019244 	.word	0x20019244
 800e0b8:	200192f0 	.word	0x200192f0
 800e0bc:	200193bc 	.word	0x200193bc
 800e0c0:	20019258 	.word	0x20019258
 800e0c4:	200192e8 	.word	0x200192e8

0800e0c8 <_txe_event_flags_create>:
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800e0c8:	2a28      	cmp	r2, #40	; 0x28
 800e0ca:	d140      	bne.n	800e14e <_txe_event_flags_create+0x86>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d03e      	beq.n	800e14e <_txe_event_flags_create+0x86>
{
 800e0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e0d2:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e0d6:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e0d8:	4f23      	ldr	r7, [pc, #140]	; (800e168 <_txe_event_flags_create+0xa0>)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e0e0:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800e0e4:	4a21      	ldr	r2, [pc, #132]	; (800e16c <_txe_event_flags_create+0xa4>)
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e0e6:	4b22      	ldr	r3, [pc, #136]	; (800e170 <_txe_event_flags_create+0xa8>)
        next_group =   _tx_event_flags_created_ptr;
 800e0e8:	6814      	ldr	r4, [r2, #0]
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e0ea:	681a      	ldr	r2, [r3, #0]
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800e0ec:	42a0      	cmp	r0, r4
 800e0ee:	d00a      	beq.n	800e106 <_txe_event_flags_create+0x3e>
 800e0f0:	fab2 f382 	clz	r3, r2
 800e0f4:	095b      	lsrs	r3, r3, #5
 800e0f6:	b113      	cbz	r3, 800e0fe <_txe_event_flags_create+0x36>
 800e0f8:	e005      	b.n	800e106 <_txe_event_flags_create+0x3e>
 800e0fa:	42a0      	cmp	r0, r4
 800e0fc:	d003      	beq.n	800e106 <_txe_event_flags_create+0x3e>
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e0fe:	3301      	adds	r3, #1
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800e100:	69a4      	ldr	r4, [r4, #24]
            if (group_ptr == next_group)
 800e102:	4293      	cmp	r3, r2
 800e104:	d3f9      	bcc.n	800e0fa <_txe_event_flags_create+0x32>
 800e106:	460e      	mov	r6, r1
 800e108:	4605      	mov	r5, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e10a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e10e:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	3b01      	subs	r3, #1
 800e114:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e116:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e11a:	f7ff fcc5 	bl	800daa8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800e11e:	42a5      	cmp	r5, r4
 800e120:	d01f      	beq.n	800e162 <_txe_event_flags_create+0x9a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e122:	4b14      	ldr	r3, [pc, #80]	; (800e174 <_txe_event_flags_create+0xac>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e124:	4814      	ldr	r0, [pc, #80]	; (800e178 <_txe_event_flags_create+0xb0>)
 800e126:	681b      	ldr	r3, [r3, #0]
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e128:	4283      	cmp	r3, r0
 800e12a:	bf0c      	ite	eq
 800e12c:	2013      	moveq	r0, #19
 800e12e:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e130:	f3ef 8205 	mrs	r2, IPSR
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e134:	4b11      	ldr	r3, [pc, #68]	; (800e17c <_txe_event_flags_create+0xb4>)
 800e136:	6819      	ldr	r1, [r3, #0]
 800e138:	430a      	orrs	r2, r1
 800e13a:	d00a      	beq.n	800e152 <_txe_event_flags_create+0x8a>
 800e13c:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4313      	orrs	r3, r2
 800e144:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e148:	d203      	bcs.n	800e152 <_txe_event_flags_create+0x8a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e14a:	2013      	movs	r0, #19
        status =  _tx_event_flags_create(group_ptr, name_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 800e14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status =  TX_GROUP_ERROR;
 800e14e:	2006      	movs	r0, #6
}
 800e150:	4770      	bx	lr
    if (status == TX_SUCCESS)
 800e152:	2800      	cmp	r0, #0
 800e154:	d1fa      	bne.n	800e14c <_txe_event_flags_create+0x84>
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800e156:	4631      	mov	r1, r6
 800e158:	4628      	mov	r0, r5
}
 800e15a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800e15e:	f7fe beed 	b.w	800cf3c <_tx_event_flags_create>
        status =  TX_GROUP_ERROR;
 800e162:	2006      	movs	r0, #6
}
 800e164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e166:	bf00      	nop
 800e168:	20019244 	.word	0x20019244
 800e16c:	20019178 	.word	0x20019178
 800e170:	2001919c 	.word	0x2001919c
 800e174:	20019248 	.word	0x20019248
 800e178:	200192f0 	.word	0x200192f0
 800e17c:	2000007c 	.word	0x2000007c

0800e180 <_txe_event_flags_get>:
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800e180:	b470      	push	{r4, r5, r6}
 800e182:	9c03      	ldr	r4, [sp, #12]

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800e184:	b118      	cbz	r0, 800e18e <_txe_event_flags_get+0xe>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800e186:	4d10      	ldr	r5, [pc, #64]	; (800e1c8 <_txe_event_flags_get+0x48>)
 800e188:	6806      	ldr	r6, [r0, #0]
 800e18a:	42ae      	cmp	r6, r5
 800e18c:	d002      	beq.n	800e194 <_txe_event_flags_get+0x14>
        status =  TX_GROUP_ERROR;
 800e18e:	2006      	movs	r0, #6
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 800e190:	bc70      	pop	{r4, r5, r6}
 800e192:	4770      	bx	lr
    else if (actual_flags_ptr == TX_NULL)
 800e194:	b143      	cbz	r3, 800e1a8 <_txe_event_flags_get+0x28>
        if (wait_option != TX_NO_WAIT)
 800e196:	b174      	cbz	r4, 800e1b6 <_txe_event_flags_get+0x36>
 800e198:	f3ef 8505 	mrs	r5, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e19c:	4e0b      	ldr	r6, [pc, #44]	; (800e1cc <_txe_event_flags_get+0x4c>)
 800e19e:	6836      	ldr	r6, [r6, #0]
 800e1a0:	4335      	orrs	r5, r6
 800e1a2:	d003      	beq.n	800e1ac <_txe_event_flags_get+0x2c>
                status =  TX_WAIT_ERROR;
 800e1a4:	2004      	movs	r0, #4
 800e1a6:	e7f3      	b.n	800e190 <_txe_event_flags_get+0x10>
        status =  TX_PTR_ERROR;
 800e1a8:	2003      	movs	r0, #3
 800e1aa:	e7f1      	b.n	800e190 <_txe_event_flags_get+0x10>
                TX_THREAD_GET_CURRENT(current_thread)
 800e1ac:	4e08      	ldr	r6, [pc, #32]	; (800e1d0 <_txe_event_flags_get+0x50>)
                if (current_thread == &_tx_timer_thread)
 800e1ae:	4d09      	ldr	r5, [pc, #36]	; (800e1d4 <_txe_event_flags_get+0x54>)
 800e1b0:	6836      	ldr	r6, [r6, #0]
 800e1b2:	42ae      	cmp	r6, r5
 800e1b4:	d0f6      	beq.n	800e1a4 <_txe_event_flags_get+0x24>
        if (get_option > TX_AND_CLEAR)
 800e1b6:	2a03      	cmp	r2, #3
 800e1b8:	d803      	bhi.n	800e1c2 <_txe_event_flags_get+0x42>
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800e1ba:	9403      	str	r4, [sp, #12]
}
 800e1bc:	bc70      	pop	{r4, r5, r6}
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800e1be:	f7fe bee5 	b.w	800cf8c <_tx_event_flags_get>
            status =  TX_OPTION_ERROR;
 800e1c2:	2008      	movs	r0, #8
    return(status);
 800e1c4:	e7e4      	b.n	800e190 <_txe_event_flags_get+0x10>
 800e1c6:	bf00      	nop
 800e1c8:	4456444e 	.word	0x4456444e
 800e1cc:	2000007c 	.word	0x2000007c
 800e1d0:	20019248 	.word	0x20019248
 800e1d4:	200192f0 	.word	0x200192f0

0800e1d8 <_txe_event_flags_set>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800e1d8:	b168      	cbz	r0, 800e1f6 <_txe_event_flags_set+0x1e>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800e1da:	4b09      	ldr	r3, [pc, #36]	; (800e200 <_txe_event_flags_set+0x28>)
{
 800e1dc:	b430      	push	{r4, r5}
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800e1de:	6804      	ldr	r4, [r0, #0]
 800e1e0:	429c      	cmp	r4, r3
 800e1e2:	d105      	bne.n	800e1f0 <_txe_event_flags_set+0x18>

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
        {

            if (set_option != TX_OR)
 800e1e4:	f032 0302 	bics.w	r3, r2, #2
 800e1e8:	d107      	bne.n	800e1fa <_txe_event_flags_set+0x22>
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
    }

    /* Return completion status.  */
    return(status);
}
 800e1ea:	bc30      	pop	{r4, r5}
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800e1ec:	f7fe bf40 	b.w	800d070 <_tx_event_flags_set>
        status =  TX_GROUP_ERROR;
 800e1f0:	2006      	movs	r0, #6
}
 800e1f2:	bc30      	pop	{r4, r5}
 800e1f4:	4770      	bx	lr
        status =  TX_GROUP_ERROR;
 800e1f6:	2006      	movs	r0, #6
}
 800e1f8:	4770      	bx	lr
                status =  TX_OPTION_ERROR;
 800e1fa:	2008      	movs	r0, #8
}
 800e1fc:	bc30      	pop	{r4, r5}
 800e1fe:	4770      	bx	lr
 800e200:	4456444e 	.word	0x4456444e

0800e204 <_txe_mutex_create>:
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800e204:	b108      	cbz	r0, 800e20a <_txe_mutex_create+0x6>
 800e206:	2b34      	cmp	r3, #52	; 0x34
 800e208:	d001      	beq.n	800e20e <_txe_mutex_create+0xa>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800e20a:	201c      	movs	r0, #28
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
    }

    /* Return completion status.  */
    return(status);
}
 800e20c:	4770      	bx	lr
{
 800e20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e212:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e216:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 800e218:	4f29      	ldr	r7, [pc, #164]	; (800e2c0 <_txe_mutex_create+0xbc>)
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	3301      	adds	r3, #1
 800e21e:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e220:	f384 8810 	msr	PRIMASK, r4
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800e224:	4c27      	ldr	r4, [pc, #156]	; (800e2c4 <_txe_mutex_create+0xc0>)
        next_mutex =   _tx_mutex_created_ptr;
 800e226:	4b28      	ldr	r3, [pc, #160]	; (800e2c8 <_txe_mutex_create+0xc4>)
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800e228:	6825      	ldr	r5, [r4, #0]
        next_mutex =   _tx_mutex_created_ptr;
 800e22a:	681c      	ldr	r4, [r3, #0]
            if (mutex_ptr == next_mutex)
 800e22c:	b15d      	cbz	r5, 800e246 <_txe_mutex_create+0x42>
 800e22e:	1b03      	subs	r3, r0, r4
 800e230:	fab3 f383 	clz	r3, r3
 800e234:	095b      	lsrs	r3, r3, #5
 800e236:	b113      	cbz	r3, 800e23e <_txe_mutex_create+0x3a>
 800e238:	e005      	b.n	800e246 <_txe_mutex_create+0x42>
 800e23a:	42ab      	cmp	r3, r5
 800e23c:	d203      	bcs.n	800e246 <_txe_mutex_create+0x42>
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800e23e:	6a24      	ldr	r4, [r4, #32]
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800e240:	3301      	adds	r3, #1
            if (mutex_ptr == next_mutex)
 800e242:	42a0      	cmp	r0, r4
 800e244:	d1f9      	bne.n	800e23a <_txe_mutex_create+0x36>
 800e246:	4605      	mov	r5, r0
 800e248:	4616      	mov	r6, r2
 800e24a:	4688      	mov	r8, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e24c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e250:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	3b01      	subs	r3, #1
 800e256:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e258:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_preempt_check();
 800e25c:	f7ff fc24 	bl	800daa8 <_tx_thread_system_preempt_check>
        if (mutex_ptr == next_mutex)
 800e260:	42a5      	cmp	r5, r4
 800e262:	d015      	beq.n	800e290 <_txe_mutex_create+0x8c>
                if (inherit != TX_NO_INHERIT)
 800e264:	2e01      	cmp	r6, #1
 800e266:	d81d      	bhi.n	800e2a4 <_txe_mutex_create+0xa0>
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e268:	4a18      	ldr	r2, [pc, #96]	; (800e2cc <_txe_mutex_create+0xc8>)
        if (thread_ptr == &_tx_timer_thread)
 800e26a:	4b19      	ldr	r3, [pc, #100]	; (800e2d0 <_txe_mutex_create+0xcc>)
 800e26c:	6812      	ldr	r2, [r2, #0]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d01a      	beq.n	800e2a8 <_txe_mutex_create+0xa4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e272:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e276:	4b17      	ldr	r3, [pc, #92]	; (800e2d4 <_txe_mutex_create+0xd0>)
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	430a      	orrs	r2, r1
 800e27c:	d00b      	beq.n	800e296 <_txe_mutex_create+0x92>
 800e27e:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4313      	orrs	r3, r2
 800e286:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e28a:	d204      	bcs.n	800e296 <_txe_mutex_create+0x92>
            status =  TX_CALLER_ERROR;
 800e28c:	2013      	movs	r0, #19
    return(status);
 800e28e:	e000      	b.n	800e292 <_txe_mutex_create+0x8e>
        status =  TX_MUTEX_ERROR;
 800e290:	201c      	movs	r0, #28
}
 800e292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800e296:	4632      	mov	r2, r6
 800e298:	4641      	mov	r1, r8
 800e29a:	4628      	mov	r0, r5
}
 800e29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800e2a0:	f7ff b846 	b.w	800d330 <_tx_mutex_create>
                    status =  TX_INHERIT_ERROR;
 800e2a4:	201f      	movs	r0, #31
 800e2a6:	e7f4      	b.n	800e292 <_txe_mutex_create+0x8e>
 800e2a8:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e2ac:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <_txe_mutex_create+0xd0>)
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	430a      	orrs	r2, r1
 800e2b2:	d0eb      	beq.n	800e28c <_txe_mutex_create+0x88>
 800e2b4:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
 800e2b8:	2013      	movs	r0, #19
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	e7e9      	b.n	800e292 <_txe_mutex_create+0x8e>
 800e2be:	bf00      	nop
 800e2c0:	20019244 	.word	0x20019244
 800e2c4:	2001917c 	.word	0x2001917c
 800e2c8:	20019180 	.word	0x20019180
 800e2cc:	20019248 	.word	0x20019248
 800e2d0:	200192f0 	.word	0x200192f0
 800e2d4:	2000007c 	.word	0x2000007c

0800e2d8 <_txe_mutex_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif
    
    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800e2d8:	b180      	cbz	r0, 800e2fc <_txe_mutex_delete+0x24>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800e2da:	6802      	ldr	r2, [r0, #0]
 800e2dc:	4b09      	ldr	r3, [pc, #36]	; (800e304 <_txe_mutex_delete+0x2c>)
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d10c      	bne.n	800e2fc <_txe_mutex_delete+0x24>
 800e2e2:	f3ef 8305 	mrs	r3, IPSR
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e2e6:	4a08      	ldr	r2, [pc, #32]	; (800e308 <_txe_mutex_delete+0x30>)
 800e2e8:	6812      	ldr	r2, [r2, #0]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	d108      	bne.n	800e300 <_txe_mutex_delete+0x28>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e2ee:	4a07      	ldr	r2, [pc, #28]	; (800e30c <_txe_mutex_delete+0x34>)

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800e2f0:	4b07      	ldr	r3, [pc, #28]	; (800e310 <_txe_mutex_delete+0x38>)
 800e2f2:	6812      	ldr	r2, [r2, #0]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d003      	beq.n	800e300 <_txe_mutex_delete+0x28>
        if (status == TX_SUCCESS)
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800e2f8:	f000 ba82 	b.w	800e800 <_tx_mutex_delete>
        status =  TX_MUTEX_ERROR;
 800e2fc:	201c      	movs	r0, #28
 800e2fe:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 800e300:	2013      	movs	r0, #19
#endif
    }

    /* Return completion status.  */
    return(status);
}
 800e302:	4770      	bx	lr
 800e304:	4d555445 	.word	0x4d555445
 800e308:	2000007c 	.word	0x2000007c
 800e30c:	20019248 	.word	0x20019248
 800e310:	200192f0 	.word	0x200192f0

0800e314 <_txe_mutex_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800e314:	b118      	cbz	r0, 800e31e <_txe_mutex_get+0xa>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800e316:	4b15      	ldr	r3, [pc, #84]	; (800e36c <_txe_mutex_get+0x58>)
 800e318:	6802      	ldr	r2, [r0, #0]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d001      	beq.n	800e322 <_txe_mutex_get+0xe>
        status =  TX_MUTEX_ERROR;
 800e31e:	201c      	movs	r0, #28
        status =  _tx_mutex_get(mutex_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 800e320:	4770      	bx	lr
{
 800e322:	b410      	push	{r4}
        if (wait_option != TX_NO_WAIT)
 800e324:	b981      	cbnz	r1, 800e348 <_txe_mutex_get+0x34>
 800e326:	4b12      	ldr	r3, [pc, #72]	; (800e370 <_txe_mutex_get+0x5c>)
 800e328:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e32c:	681c      	ldr	r4, [r3, #0]
 800e32e:	4322      	orrs	r2, r4
 800e330:	d006      	beq.n	800e340 <_txe_mutex_get+0x2c>
 800e332:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4313      	orrs	r3, r2
 800e33a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e33e:	d312      	bcc.n	800e366 <_txe_mutex_get+0x52>
}
 800e340:	f85d 4b04 	ldr.w	r4, [sp], #4
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800e344:	f7ff b824 	b.w	800d390 <_tx_mutex_get>
 800e348:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e34c:	4b08      	ldr	r3, [pc, #32]	; (800e370 <_txe_mutex_get+0x5c>)
 800e34e:	681c      	ldr	r4, [r3, #0]
 800e350:	4322      	orrs	r2, r4
 800e352:	d104      	bne.n	800e35e <_txe_mutex_get+0x4a>
                TX_THREAD_GET_CURRENT(current_thread)
 800e354:	4c07      	ldr	r4, [pc, #28]	; (800e374 <_txe_mutex_get+0x60>)
                if (current_thread == &_tx_timer_thread)
 800e356:	4a08      	ldr	r2, [pc, #32]	; (800e378 <_txe_mutex_get+0x64>)
 800e358:	6824      	ldr	r4, [r4, #0]
 800e35a:	4294      	cmp	r4, r2
 800e35c:	d1e4      	bne.n	800e328 <_txe_mutex_get+0x14>
                status =  TX_WAIT_ERROR;
 800e35e:	2004      	movs	r0, #4
}
 800e360:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e364:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 800e366:	2013      	movs	r0, #19
    return(status);
 800e368:	e7fa      	b.n	800e360 <_txe_mutex_get+0x4c>
 800e36a:	bf00      	nop
 800e36c:	4d555445 	.word	0x4d555445
 800e370:	2000007c 	.word	0x2000007c
 800e374:	20019248 	.word	0x20019248
 800e378:	200192f0 	.word	0x200192f0

0800e37c <_txe_mutex_put>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800e37c:	b190      	cbz	r0, 800e3a4 <_txe_mutex_put+0x28>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800e37e:	4b0b      	ldr	r3, [pc, #44]	; (800e3ac <_txe_mutex_put+0x30>)
 800e380:	6802      	ldr	r2, [r0, #0]
 800e382:	429a      	cmp	r2, r3
 800e384:	d10e      	bne.n	800e3a4 <_txe_mutex_put+0x28>
 800e386:	f3ef 8305 	mrs	r3, IPSR
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e38a:	4a09      	ldr	r2, [pc, #36]	; (800e3b0 <_txe_mutex_put+0x34>)
 800e38c:	6811      	ldr	r1, [r2, #0]
 800e38e:	430b      	orrs	r3, r1
 800e390:	d006      	beq.n	800e3a0 <_txe_mutex_put+0x24>
 800e392:	f3ef 8105 	mrs	r1, IPSR
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e396:	6813      	ldr	r3, [r2, #0]
 800e398:	430b      	orrs	r3, r1
 800e39a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e39e:	d303      	bcc.n	800e3a8 <_txe_mutex_put+0x2c>
    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800e3a0:	f7ff b8e0 	b.w	800d564 <_tx_mutex_put>
        status =  TX_MUTEX_ERROR;
 800e3a4:	201c      	movs	r0, #28
 800e3a6:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 800e3a8:	2013      	movs	r0, #19
    }

    /* Return completion status.  */
    return(status);
}
 800e3aa:	4770      	bx	lr
 800e3ac:	4d555445 	.word	0x4d555445
 800e3b0:	2000007c 	.word	0x2000007c

0800e3b4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b8:	b085      	sub	sp, #20
 800e3ba:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
 800e3be:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800e3c2:	9401      	str	r4, [sp, #4]
 800e3c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800e3c6:	9403      	str	r4, [sp, #12]
 800e3c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e3ca:	9402      	str	r4, [sp, #8]
 800e3cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d079      	beq.n	800e4c6 <_txe_thread_create+0x112>
 800e3d2:	2cc8      	cmp	r4, #200	; 0xc8
 800e3d4:	d177      	bne.n	800e4c6 <_txe_thread_create+0x112>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e3d6:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e3da:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e3dc:	f8df e140 	ldr.w	lr, [pc, #320]	; 800e520 <_txe_thread_create+0x16c>
 800e3e0:	f8de 4000 	ldr.w	r4, [lr]
 800e3e4:	3401      	adds	r4, #1
 800e3e6:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e3ea:	f385 8810 	msr	PRIMASK, r5
        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
        next_thread =  _tx_thread_created_ptr;
 800e3ee:	4c47      	ldr	r4, [pc, #284]	; (800e50c <_txe_thread_create+0x158>)
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e3f0:	f108 3cff 	add.w	ip, r8, #4294967295
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e3f4:	4d46      	ldr	r5, [pc, #280]	; (800e510 <_txe_thread_create+0x15c>)
        next_thread =  _tx_thread_created_ptr;
 800e3f6:	6824      	ldr	r4, [r4, #0]
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e3f8:	44bc      	add	ip, r7
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e3fa:	f8d5 b000 	ldr.w	fp, [r5]
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e3fe:	1b05      	subs	r5, r0, r4
 800e400:	fab5 f585 	clz	r5, r5
 800e404:	096d      	lsrs	r5, r5, #5
 800e406:	f1bb 0f00 	cmp.w	fp, #0
 800e40a:	bf08      	it	eq
 800e40c:	2501      	moveq	r5, #1
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e40e:	b985      	cbnz	r5, 800e432 <_txe_thread_create+0x7e>
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e410:	469a      	mov	sl, r3
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e412:	68e6      	ldr	r6, [r4, #12]
 800e414:	42be      	cmp	r6, r7
 800e416:	d865      	bhi.n	800e4e4 <_txe_thread_create+0x130>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e418:	6923      	ldr	r3, [r4, #16]
 800e41a:	42bb      	cmp	r3, r7
 800e41c:	d962      	bls.n	800e4e4 <_txe_thread_create+0x130>
                    break_flag =  TX_TRUE;
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e41e:	4566      	cmp	r6, ip
 800e420:	d803      	bhi.n	800e42a <_txe_thread_create+0x76>
 800e422:	2601      	movs	r6, #1
                    stack_start =  TX_NULL;
 800e424:	2700      	movs	r7, #0
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e426:	4563      	cmp	r3, ip
 800e428:	d951      	bls.n	800e4ce <_txe_thread_create+0x11a>
 800e42a:	4653      	mov	r3, sl
                    break_flag =  TX_TRUE;
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e42c:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
                    stack_start =  TX_NULL;
 800e430:	2700      	movs	r7, #0
 800e432:	4605      	mov	r5, r0
 800e434:	469a      	mov	sl, r3
 800e436:	4616      	mov	r6, r2
 800e438:	468b      	mov	fp, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e43a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e43e:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e440:	f8de 3000 	ldr.w	r3, [lr]
 800e444:	3b01      	subs	r3, #1
 800e446:	f8ce 3000 	str.w	r3, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e44a:	f382 8810 	msr	PRIMASK, r2
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e44e:	f7ff fb2b 	bl	800daa8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e452:	42a5      	cmp	r5, r4
 800e454:	d037      	beq.n	800e4c6 <_txe_thread_create+0x112>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e456:	2e00      	cmp	r6, #0
 800e458:	d04c      	beq.n	800e4f4 <_txe_thread_create+0x140>
 800e45a:	2f00      	cmp	r7, #0
 800e45c:	d04a      	beq.n	800e4f4 <_txe_thread_create+0x140>
            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e45e:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
 800e462:	d945      	bls.n	800e4f0 <_txe_thread_create+0x13c>
            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e464:	f1b9 0f1f 	cmp.w	r9, #31
 800e468:	d848      	bhi.n	800e4fc <_txe_thread_create+0x148>
            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e46a:	9b01      	ldr	r3, [sp, #4]
 800e46c:	4599      	cmp	r9, r3
 800e46e:	d34b      	bcc.n	800e508 <_txe_thread_create+0x154>
            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e470:	9b02      	ldr	r3, [sp, #8]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d844      	bhi.n	800e500 <_txe_thread_create+0x14c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e476:	4a27      	ldr	r2, [pc, #156]	; (800e514 <_txe_thread_create+0x160>)

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e478:	4b27      	ldr	r3, [pc, #156]	; (800e518 <_txe_thread_create+0x164>)
 800e47a:	6810      	ldr	r0, [r2, #0]
    status =  TX_SUCCESS;
 800e47c:	4298      	cmp	r0, r3
 800e47e:	bf0c      	ite	eq
 800e480:	2013      	moveq	r0, #19
 800e482:	2000      	movne	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e484:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e488:	4b24      	ldr	r3, [pc, #144]	; (800e51c <_txe_thread_create+0x168>)
 800e48a:	6819      	ldr	r1, [r3, #0]
 800e48c:	430a      	orrs	r2, r1
 800e48e:	d006      	beq.n	800e49e <_txe_thread_create+0xea>
 800e490:	f3ef 8205 	mrs	r2, IPSR
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4313      	orrs	r3, r2
 800e498:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e49c:	d332      	bcc.n	800e504 <_txe_thread_create+0x150>
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e49e:	b998      	cbnz	r0, 800e4c8 <_txe_thread_create+0x114>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e4a0:	9b02      	ldr	r3, [sp, #8]
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	9a03      	ldr	r2, [sp, #12]
 800e4a6:	9901      	ldr	r1, [sp, #4]
 800e4a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800e4aa:	4653      	mov	r3, sl
 800e4ac:	9212      	str	r2, [sp, #72]	; 0x48
 800e4ae:	4632      	mov	r2, r6
 800e4b0:	9111      	str	r1, [sp, #68]	; 0x44
 800e4b2:	4659      	mov	r1, fp
 800e4b4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800e4b8:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
}
 800e4bc:	b005      	add	sp, #20
 800e4be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e4c2:	f7ff b959 	b.w	800d778 <_tx_thread_create>
        status =  TX_THREAD_ERROR;
 800e4c6:	200e      	movs	r0, #14
}
 800e4c8:	b005      	add	sp, #20
 800e4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            next_thread =  next_thread -> tx_thread_created_next;
 800e4ce:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e4d2:	3501      	adds	r5, #1
            if (break_flag == TX_TRUE)
 800e4d4:	42a0      	cmp	r0, r4
 800e4d6:	bf18      	it	ne
 800e4d8:	455d      	cmpne	r5, fp
 800e4da:	d201      	bcs.n	800e4e0 <_txe_thread_create+0x12c>
 800e4dc:	2e00      	cmp	r6, #0
 800e4de:	d098      	beq.n	800e412 <_txe_thread_create+0x5e>
 800e4e0:	4653      	mov	r3, sl
 800e4e2:	e7a6      	b.n	800e432 <_txe_thread_create+0x7e>
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e4e4:	4566      	cmp	r6, ip
 800e4e6:	f04f 0600 	mov.w	r6, #0
 800e4ea:	d8f0      	bhi.n	800e4ce <_txe_thread_create+0x11a>
 800e4ec:	6923      	ldr	r3, [r4, #16]
 800e4ee:	e79a      	b.n	800e426 <_txe_thread_create+0x72>
            status =  TX_SIZE_ERROR;
 800e4f0:	2005      	movs	r0, #5
 800e4f2:	e7e9      	b.n	800e4c8 <_txe_thread_create+0x114>
            status =  TX_PTR_ERROR;
 800e4f4:	2003      	movs	r0, #3
}
 800e4f6:	b005      	add	sp, #20
 800e4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            status =  TX_PRIORITY_ERROR;
 800e4fc:	200f      	movs	r0, #15
 800e4fe:	e7e3      	b.n	800e4c8 <_txe_thread_create+0x114>
            status =  TX_START_ERROR;
 800e500:	2010      	movs	r0, #16
 800e502:	e7e1      	b.n	800e4c8 <_txe_thread_create+0x114>
                    status =  TX_CALLER_ERROR;
 800e504:	2013      	movs	r0, #19
    return(status);
 800e506:	e7df      	b.n	800e4c8 <_txe_thread_create+0x114>
            status =  TX_THRESH_ERROR;
 800e508:	2018      	movs	r0, #24
 800e50a:	e7dd      	b.n	800e4c8 <_txe_thread_create+0x114>
 800e50c:	20019234 	.word	0x20019234
 800e510:	2001923c 	.word	0x2001923c
 800e514:	20019248 	.word	0x20019248
 800e518:	200192f0 	.word	0x200192f0
 800e51c:	2000007c 	.word	0x2000007c
 800e520:	20019244 	.word	0x20019244

0800e524 <_txe_thread_delete>:
 800e524:	f3ef 8205 	mrs	r2, IPSR

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e528:	4907      	ldr	r1, [pc, #28]	; (800e548 <_txe_thread_delete+0x24>)
 800e52a:	6809      	ldr	r1, [r1, #0]
 800e52c:	430a      	orrs	r2, r1
 800e52e:	d108      	bne.n	800e542 <_txe_thread_delete+0x1e>
        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 800e530:	b118      	cbz	r0, 800e53a <_txe_thread_delete+0x16>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e532:	6802      	ldr	r2, [r0, #0]
 800e534:	4b05      	ldr	r3, [pc, #20]	; (800e54c <_txe_thread_delete+0x28>)
 800e536:	429a      	cmp	r2, r3
 800e538:	d001      	beq.n	800e53e <_txe_thread_delete+0x1a>
        status =  TX_THREAD_ERROR;
 800e53a:	200e      	movs	r0, #14
        status =  _tx_thread_delete(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 800e53c:	4770      	bx	lr
        status =  _tx_thread_delete(thread_ptr);
 800e53e:	f000 ba0b 	b.w	800e958 <_tx_thread_delete>
        status =  TX_CALLER_ERROR;
 800e542:	2013      	movs	r0, #19
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	2000007c 	.word	0x2000007c
 800e54c:	54485244 	.word	0x54485244

0800e550 <_txe_thread_resume>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e550:	b118      	cbz	r0, 800e55a <_txe_thread_resume+0xa>
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e552:	6802      	ldr	r2, [r0, #0]
 800e554:	4b03      	ldr	r3, [pc, #12]	; (800e564 <_txe_thread_resume+0x14>)
 800e556:	429a      	cmp	r2, r3
 800e558:	d001      	beq.n	800e55e <_txe_thread_resume+0xe>
        status =  _tx_thread_resume(thread_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 800e55a:	200e      	movs	r0, #14
 800e55c:	4770      	bx	lr
        status =  _tx_thread_resume(thread_ptr);
 800e55e:	f000 ba29 	b.w	800e9b4 <_tx_thread_resume>
 800e562:	bf00      	nop
 800e564:	54485244 	.word	0x54485244

0800e568 <_txe_timer_activate>:

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800e568:	b118      	cbz	r0, 800e572 <_txe_timer_activate+0xa>
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800e56a:	6802      	ldr	r2, [r0, #0]
 800e56c:	4b03      	ldr	r3, [pc, #12]	; (800e57c <_txe_timer_activate+0x14>)
 800e56e:	429a      	cmp	r2, r3
 800e570:	d001      	beq.n	800e576 <_txe_timer_activate+0xe>
        status =  _tx_timer_activate(timer_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 800e572:	2015      	movs	r0, #21
 800e574:	4770      	bx	lr
        status =  _tx_timer_activate(timer_ptr);
 800e576:	f000 ba99 	b.w	800eaac <_tx_timer_activate>
 800e57a:	bf00      	nop
 800e57c:	4154494d 	.word	0x4154494d

0800e580 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	b081      	sub	sp, #4
 800e586:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e58a:	e9dd 840c 	ldrd	r8, r4, [sp, #48]	; 0x30
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
    }
    
    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800e58e:	b108      	cbz	r0, 800e594 <_txe_timer_create+0x14>
 800e590:	2c2c      	cmp	r4, #44	; 0x2c
 800e592:	d003      	beq.n	800e59c <_txe_timer_create+0x1c>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e594:	2015      	movs	r0, #21
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
}
 800e596:	b001      	add	sp, #4
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e59c:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e5a0:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 800e5a2:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 800e678 <_txe_timer_create+0xf8>
 800e5a6:	f8de 4000 	ldr.w	r4, [lr]
 800e5aa:	3401      	adds	r4, #1
 800e5ac:	f8ce 4000 	str.w	r4, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e5b0:	f385 8810 	msr	PRIMASK, r5
        next_timer =  _tx_timer_created_ptr;
 800e5b4:	4d2b      	ldr	r5, [pc, #172]	; (800e664 <_txe_timer_create+0xe4>)
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800e5b6:	4c2c      	ldr	r4, [pc, #176]	; (800e668 <_txe_timer_create+0xe8>)
        next_timer =  _tx_timer_created_ptr;
 800e5b8:	682d      	ldr	r5, [r5, #0]
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800e5ba:	f8d4 c000 	ldr.w	ip, [r4]
            if (timer_ptr == next_timer)
 800e5be:	42a8      	cmp	r0, r5
 800e5c0:	d00a      	beq.n	800e5d8 <_txe_timer_create+0x58>
 800e5c2:	fabc f48c 	clz	r4, ip
 800e5c6:	0964      	lsrs	r4, r4, #5
 800e5c8:	b114      	cbz	r4, 800e5d0 <_txe_timer_create+0x50>
 800e5ca:	e005      	b.n	800e5d8 <_txe_timer_create+0x58>
 800e5cc:	4564      	cmp	r4, ip
 800e5ce:	d203      	bcs.n	800e5d8 <_txe_timer_create+0x58>
                next_timer =  next_timer -> tx_timer_created_next;
 800e5d0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800e5d2:	3401      	adds	r4, #1
            if (timer_ptr == next_timer)
 800e5d4:	42a8      	cmp	r0, r5
 800e5d6:	d1f9      	bne.n	800e5cc <_txe_timer_create+0x4c>
 800e5d8:	4604      	mov	r4, r0
 800e5da:	469b      	mov	fp, r3
 800e5dc:	4692      	mov	sl, r2
 800e5de:	4689      	mov	r9, r1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e5e0:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e5e4:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 800e5e6:	f8de 0000 	ldr.w	r0, [lr]
 800e5ea:	3801      	subs	r0, #1
 800e5ec:	f8ce 0000 	str.w	r0, [lr]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e5f0:	f383 8810 	msr	PRIMASK, r3
        _tx_thread_system_preempt_check();
 800e5f4:	f7ff fa58 	bl	800daa8 <_tx_thread_system_preempt_check>
        if (timer_ptr == next_timer)
 800e5f8:	42ac      	cmp	r4, r5
 800e5fa:	d0cb      	beq.n	800e594 <_txe_timer_create+0x14>
        else if (initial_ticks == ((ULONG) 0))
 800e5fc:	b30e      	cbz	r6, 800e642 <_txe_timer_create+0xc2>
                if (auto_activate != TX_NO_ACTIVATE)
 800e5fe:	f1b8 0f01 	cmp.w	r8, #1
 800e602:	d82b      	bhi.n	800e65c <_txe_timer_create+0xdc>
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e604:	4a19      	ldr	r2, [pc, #100]	; (800e66c <_txe_timer_create+0xec>)
        if (thread_ptr == &_tx_timer_thread)
 800e606:	4b1a      	ldr	r3, [pc, #104]	; (800e670 <_txe_timer_create+0xf0>)
 800e608:	6812      	ldr	r2, [r2, #0]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d01b      	beq.n	800e646 <_txe_timer_create+0xc6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e60e:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e612:	4b18      	ldr	r3, [pc, #96]	; (800e674 <_txe_timer_create+0xf4>)
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	430a      	orrs	r2, r1
 800e618:	d006      	beq.n	800e628 <_txe_timer_create+0xa8>
 800e61a:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4313      	orrs	r3, r2
 800e622:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e626:	d31b      	bcc.n	800e660 <_txe_timer_create+0xe0>
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800e628:	465b      	mov	r3, fp
 800e62a:	4652      	mov	r2, sl
 800e62c:	4649      	mov	r1, r9
 800e62e:	4620      	mov	r0, r4
 800e630:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800e634:	970b      	str	r7, [sp, #44]	; 0x2c
 800e636:	960a      	str	r6, [sp, #40]	; 0x28
}
 800e638:	b001      	add	sp, #4
 800e63a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800e63e:	f7ff bbbb 	b.w	800ddb8 <_tx_timer_create>
            status =  TX_TICK_ERROR;
 800e642:	2016      	movs	r0, #22
 800e644:	e7a7      	b.n	800e596 <_txe_timer_create+0x16>
 800e646:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e64a:	4b0a      	ldr	r3, [pc, #40]	; (800e674 <_txe_timer_create+0xf4>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	430a      	orrs	r2, r1
 800e650:	d006      	beq.n	800e660 <_txe_timer_create+0xe0>
 800e652:	f3ef 8205 	mrs	r2, IPSR
                status =  TX_CALLER_ERROR;
 800e656:	2013      	movs	r0, #19
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	e79c      	b.n	800e596 <_txe_timer_create+0x16>
                    status =  TX_ACTIVATE_ERROR;
 800e65c:	2017      	movs	r0, #23
 800e65e:	e79a      	b.n	800e596 <_txe_timer_create+0x16>
            status =  TX_CALLER_ERROR;
 800e660:	2013      	movs	r0, #19
    return(status);
 800e662:	e798      	b.n	800e596 <_txe_timer_create+0x16>
 800e664:	200193c0 	.word	0x200193c0
 800e668:	200197cc 	.word	0x200197cc
 800e66c:	20019248 	.word	0x20019248
 800e670:	200192f0 	.word	0x200192f0
 800e674:	2000007c 	.word	0x2000007c
 800e678:	20019244 	.word	0x20019244

0800e67c <_txe_timer_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif
    
    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800e67c:	b180      	cbz	r0, 800e6a0 <_txe_timer_delete+0x24>
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800e67e:	6802      	ldr	r2, [r0, #0]
 800e680:	4b09      	ldr	r3, [pc, #36]	; (800e6a8 <_txe_timer_delete+0x2c>)
 800e682:	429a      	cmp	r2, r3
 800e684:	d10c      	bne.n	800e6a0 <_txe_timer_delete+0x24>
 800e686:	f3ef 8305 	mrs	r3, IPSR
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e68a:	4a08      	ldr	r2, [pc, #32]	; (800e6ac <_txe_timer_delete+0x30>)
 800e68c:	6812      	ldr	r2, [r2, #0]
 800e68e:	4313      	orrs	r3, r2
 800e690:	d108      	bne.n	800e6a4 <_txe_timer_delete+0x28>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e692:	4a07      	ldr	r2, [pc, #28]	; (800e6b0 <_txe_timer_delete+0x34>)

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800e694:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <_txe_timer_delete+0x38>)
 800e696:	6812      	ldr	r2, [r2, #0]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d003      	beq.n	800e6a4 <_txe_timer_delete+0x28>
        if (status == TX_SUCCESS)
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 800e69c:	f000 ba1a 	b.w	800ead4 <_tx_timer_delete>
        status =  TX_TIMER_ERROR;
 800e6a0:	2015      	movs	r0, #21
 800e6a2:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 800e6a4:	2013      	movs	r0, #19
#endif
    }

    /* Return completion status.  */
    return(status);
}
 800e6a6:	4770      	bx	lr
 800e6a8:	4154494d 	.word	0x4154494d
 800e6ac:	2000007c 	.word	0x2000007c
 800e6b0:	20019248 	.word	0x20019248
 800e6b4:	200192f0 	.word	0x200192f0

0800e6b8 <_tx_event_flags_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800e6b8:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e6ba:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e6be:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800e6c0:	4a1b      	ldr	r2, [pc, #108]	; (800e730 <_tx_event_flags_cleanup+0x78>)
 800e6c2:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800e6c4:	4294      	cmp	r4, r2
 800e6c6:	d002      	beq.n	800e6ce <_tx_event_flags_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e6c8:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e6cc:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800e6ce:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800e6d2:	428a      	cmp	r2, r1
 800e6d4:	d1f8      	bne.n	800e6c8 <_tx_event_flags_cleanup+0x10>
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800e6d6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (group_ptr != TX_NULL)
 800e6d8:	2a00      	cmp	r2, #0
 800e6da:	d0f5      	beq.n	800e6c8 <_tx_event_flags_cleanup+0x10>
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800e6dc:	4915      	ldr	r1, [pc, #84]	; (800e734 <_tx_event_flags_cleanup+0x7c>)
 800e6de:	6814      	ldr	r4, [r2, #0]
 800e6e0:	428c      	cmp	r4, r1
 800e6e2:	d1f1      	bne.n	800e6c8 <_tx_event_flags_cleanup+0x10>
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800e6e4:	6951      	ldr	r1, [r2, #20]
 800e6e6:	2900      	cmp	r1, #0
 800e6e8:	d0ee      	beq.n	800e6c8 <_tx_event_flags_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e6ea:	2500      	movs	r5, #0
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800e6ec:	6914      	ldr	r4, [r2, #16]
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e6ee:	6685      	str	r5, [r0, #104]	; 0x68
                        if (suspension_head != TX_NULL)
 800e6f0:	b1dc      	cbz	r4, 800e72a <_tx_event_flags_cleanup+0x72>
                            suspended_count--;
 800e6f2:	3901      	subs	r1, #1
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800e6f4:	6151      	str	r1, [r2, #20]
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800e6f6:	b1b1      	cbz	r1, 800e726 <_tx_event_flags_cleanup+0x6e>
                                if (suspension_head == thread_ptr)
 800e6f8:	42a0      	cmp	r0, r4
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800e6fa:	e9d0 151c 	ldrd	r1, r5, [r0, #112]	; 0x70
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800e6fe:	674d      	str	r5, [r1, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800e700:	6729      	str	r1, [r5, #112]	; 0x70
                                if (suspension_head == thread_ptr)
 800e702:	d010      	beq.n	800e726 <_tx_event_flags_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800e704:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800e706:	2a07      	cmp	r2, #7
 800e708:	d1de      	bne.n	800e6c8 <_tx_event_flags_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 800e70a:	490b      	ldr	r1, [pc, #44]	; (800e738 <_tx_event_flags_cleanup+0x80>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800e70c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800e710:	680a      	ldr	r2, [r1, #0]
 800e712:	3201      	adds	r2, #1
 800e714:	600a      	str	r2, [r1, #0]
 800e716:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 800e71a:	f7ff f9e3 	bl	800dae4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e71e:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e722:	b672      	cpsid	i
 800e724:	e7d0      	b.n	800e6c8 <_tx_event_flags_cleanup+0x10>
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800e726:	6111      	str	r1, [r2, #16]
 800e728:	e7ec      	b.n	800e704 <_tx_event_flags_cleanup+0x4c>
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800e72a:	2101      	movs	r1, #1
 800e72c:	60d1      	str	r1, [r2, #12]
 800e72e:	e7e9      	b.n	800e704 <_tx_event_flags_cleanup+0x4c>
 800e730:	0800e6b9 	.word	0x0800e6b9
 800e734:	4456444e 	.word	0x4456444e
 800e738:	20019244 	.word	0x20019244

0800e73c <_tx_mutex_cleanup>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800e73c:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e73e:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e742:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800e744:	4a1a      	ldr	r2, [pc, #104]	; (800e7b0 <_tx_mutex_cleanup+0x74>)
 800e746:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800e748:	4294      	cmp	r4, r2
 800e74a:	d002      	beq.n	800e752 <_tx_mutex_cleanup+0x16>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e74c:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e750:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800e752:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800e756:	428a      	cmp	r2, r1
 800e758:	d1f8      	bne.n	800e74c <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800e75a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            if (mutex_ptr != TX_NULL)
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	d0f5      	beq.n	800e74c <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800e760:	4914      	ldr	r1, [pc, #80]	; (800e7b4 <_tx_mutex_cleanup+0x78>)
 800e762:	6814      	ldr	r4, [r2, #0]
 800e764:	428c      	cmp	r4, r1
 800e766:	d1f1      	bne.n	800e74c <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800e768:	69d1      	ldr	r1, [r2, #28]
 800e76a:	2900      	cmp	r1, #0
 800e76c:	d0ee      	beq.n	800e74c <_tx_mutex_cleanup+0x10>
                        mutex_ptr -> tx_mutex_suspended_count--;
 800e76e:	3901      	subs	r1, #1
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e770:	2400      	movs	r4, #0
 800e772:	6684      	str	r4, [r0, #104]	; 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 800e774:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800e776:	b1c1      	cbz	r1, 800e7aa <_tx_mutex_cleanup+0x6e>
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800e778:	6995      	ldr	r5, [r2, #24]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e77a:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800e77e:	4285      	cmp	r5, r0
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e780:	674c      	str	r4, [r1, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800e782:	6721      	str	r1, [r4, #112]	; 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800e784:	d011      	beq.n	800e7aa <_tx_mutex_cleanup+0x6e>
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800e786:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800e788:	2a0d      	cmp	r2, #13
 800e78a:	d1df      	bne.n	800e74c <_tx_mutex_cleanup+0x10>
                            _tx_thread_preempt_disable++;
 800e78c:	490a      	ldr	r1, [pc, #40]	; (800e7b8 <_tx_mutex_cleanup+0x7c>)
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800e78e:	241d      	movs	r4, #29
                            _tx_thread_preempt_disable++;
 800e790:	680a      	ldr	r2, [r1, #0]
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800e792:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
                            _tx_thread_preempt_disable++;
 800e796:	3201      	adds	r2, #1
 800e798:	600a      	str	r2, [r1, #0]
 800e79a:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 800e79e:	f7ff f9a1 	bl	800dae4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e7a2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e7a6:	b672      	cpsid	i
 800e7a8:	e7d0      	b.n	800e74c <_tx_mutex_cleanup+0x10>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800e7aa:	6191      	str	r1, [r2, #24]
 800e7ac:	e7eb      	b.n	800e786 <_tx_mutex_cleanup+0x4a>
 800e7ae:	bf00      	nop
 800e7b0:	0800e73d 	.word	0x0800e73d
 800e7b4:	4d555445 	.word	0x4d555445
 800e7b8:	20019244 	.word	0x20019244

0800e7bc <_tx_mutex_thread_release>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e7c0:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e7c4:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800e7c6:	4d0d      	ldr	r5, [pc, #52]	; (800e7fc <_tx_mutex_thread_release+0x40>)
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800e7c8:	2601      	movs	r6, #1
 800e7ca:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    _tx_thread_preempt_disable++;
 800e7ce:	682a      	ldr	r2, [r5, #0]
 800e7d0:	4432      	add	r2, r6
 800e7d2:	602a      	str	r2, [r5, #0]
        if (mutex_ptr != TX_NULL)
 800e7d4:	b158      	cbz	r0, 800e7ee <_tx_mutex_thread_release+0x32>
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800e7d6:	6086      	str	r6, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e7d8:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800e7dc:	f7fe fec2 	bl	800d564 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e7e0:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e7e4:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800e7e6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d1f2      	bne.n	800e7d4 <_tx_mutex_thread_release+0x18>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800e7ee:	682a      	ldr	r2, [r5, #0]
 800e7f0:	3a01      	subs	r2, #1
 800e7f2:	602a      	str	r2, [r5, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e7f4:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 800e7f8:	bd70      	pop	{r4, r5, r6, pc}
 800e7fa:	bf00      	nop
 800e7fc:	20019244 	.word	0x20019244

0800e800 <_tx_mutex_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800e800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e804:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e808:	b672      	cpsid	i

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800e80a:	4927      	ldr	r1, [pc, #156]	; (800e8a8 <_tx_mutex_delete+0xa8>)
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800e80c:	2400      	movs	r4, #0
    _tx_mutex_created_count--;
 800e80e:	680b      	ldr	r3, [r1, #0]
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800e810:	6004      	str	r4, [r0, #0]
    _tx_mutex_created_count--;
 800e812:	3b01      	subs	r3, #1
 800e814:	600b      	str	r3, [r1, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800e816:	2b00      	cmp	r3, #0
 800e818:	d13c      	bne.n	800e894 <_tx_mutex_delete+0x94>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800e81a:	4924      	ldr	r1, [pc, #144]	; (800e8ac <_tx_mutex_delete+0xac>)
 800e81c:	600b      	str	r3, [r1, #0]
            _tx_mutex_created_ptr =  next_mutex;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800e81e:	4e24      	ldr	r6, [pc, #144]	; (800e8b0 <_tx_mutex_delete+0xb0>)

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800e820:	2700      	movs	r7, #0

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800e822:	68c1      	ldr	r1, [r0, #12]
    _tx_thread_preempt_disable++;
 800e824:	6833      	ldr	r3, [r6, #0]
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800e826:	6984      	ldr	r4, [r0, #24]
    _tx_thread_preempt_disable++;
 800e828:	3301      	adds	r3, #1
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800e82a:	69c5      	ldr	r5, [r0, #28]
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800e82c:	6187      	str	r7, [r0, #24]
    _tx_thread_preempt_disable++;
 800e82e:	6033      	str	r3, [r6, #0]
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800e830:	61c7      	str	r7, [r0, #28]
    if (owner_thread != TX_NULL)
 800e832:	b141      	cbz	r1, 800e846 <_tx_mutex_delete+0x46>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800e834:	2301      	movs	r3, #1
 800e836:	6083      	str	r3, [r0, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e838:	f382 8810 	msr	PRIMASK, r2
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800e83c:	f7fe fe92 	bl	800d564 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e840:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e844:	b672      	cpsid	i
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e846:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800e84a:	b1b5      	cbz	r5, 800e87a <_tx_mutex_delete+0x7a>
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e84c:	f04f 0800 	mov.w	r8, #0

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800e850:	2701      	movs	r7, #1
        suspended_count--;
 800e852:	3d01      	subs	r5, #1
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e854:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e858:	b672      	cpsid	i
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800e85a:	6833      	ldr	r3, [r6, #0]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e85c:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
        _tx_thread_preempt_disable++;
 800e860:	3301      	adds	r3, #1
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800e862:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800e866:	6f22      	ldr	r2, [r4, #112]	; 0x70
        _tx_thread_preempt_disable++;
 800e868:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e86a:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800e86e:	4620      	mov	r0, r4
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800e870:	4614      	mov	r4, r2
        _tx_thread_system_resume(thread_ptr);
 800e872:	f7ff f937 	bl	800dae4 <_tx_thread_system_resume>
    while (suspended_count != ((ULONG) 0))
 800e876:	2d00      	cmp	r5, #0
 800e878:	d1eb      	bne.n	800e852 <_tx_mutex_delete+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e87a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e87e:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800e880:	6833      	ldr	r3, [r6, #0]
 800e882:	3b01      	subs	r3, #1
 800e884:	6033      	str	r3, [r6, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e886:	f382 8810 	msr	PRIMASK, r2

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800e88a:	f7ff f90d 	bl	800daa8 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800e88e:	2000      	movs	r0, #0
 800e890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (_tx_mutex_created_ptr == mutex_ptr)
 800e894:	4c05      	ldr	r4, [pc, #20]	; (800e8ac <_tx_mutex_delete+0xac>)
 800e896:	6825      	ldr	r5, [r4, #0]
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800e898:	e9d0 3108 	ldrd	r3, r1, [r0, #32]
        if (_tx_mutex_created_ptr == mutex_ptr)
 800e89c:	4285      	cmp	r5, r0
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800e89e:	6259      	str	r1, [r3, #36]	; 0x24
            _tx_mutex_created_ptr =  next_mutex;
 800e8a0:	bf08      	it	eq
 800e8a2:	6023      	streq	r3, [r4, #0]
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800e8a4:	620b      	str	r3, [r1, #32]
 800e8a6:	e7ba      	b.n	800e81e <_tx_mutex_delete+0x1e>
 800e8a8:	2001917c 	.word	0x2001917c
 800e8ac:	20019180 	.word	0x20019180
 800e8b0:	20019244 	.word	0x20019244

0800e8b4 <_tx_mutex_prioritize>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e8b6:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e8ba:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800e8bc:	69c7      	ldr	r7, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800e8be:	2f01      	cmp	r7, #1
 800e8c0:	d92a      	bls.n	800e918 <_tx_mutex_prioritize+0x64>
 800e8c2:	6982      	ldr	r2, [r0, #24]
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800e8c4:	2f02      	cmp	r7, #2
 800e8c6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800e8c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e8ca:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800e8cc:	d021      	beq.n	800e912 <_tx_mutex_prioritize+0x5e>

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800e8ce:	f8df c084 	ldr.w	ip, [pc, #132]	; 800e954 <_tx_mutex_prioritize+0xa0>
 800e8d2:	4616      	mov	r6, r2
 800e8d4:	f8dc e000 	ldr.w	lr, [ip]
 800e8d8:	f10e 0e01 	add.w	lr, lr, #1
 800e8dc:	f8cc e000 	str.w	lr, [ip]
 800e8e0:	e007      	b.n	800e8f2 <_tx_mutex_prioritize+0x3e>
 800e8e2:	69c7      	ldr	r7, [r0, #28]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800e8e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e8e6:	461a      	mov	r2, r3

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
            }

        } while (thread_ptr != head_ptr);
 800e8e8:	428b      	cmp	r3, r1
 800e8ea:	461e      	mov	r6, r3
 800e8ec:	d018      	beq.n	800e920 <_tx_mutex_prioritize+0x6c>
 800e8ee:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800e8f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e8f2:	42ab      	cmp	r3, r5
 800e8f4:	bf88      	it	hi
 800e8f6:	460a      	movhi	r2, r1
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e8f8:	f384 8810 	msr	PRIMASK, r4
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e8fc:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e900:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800e902:	6983      	ldr	r3, [r0, #24]
 800e904:	42b3      	cmp	r3, r6
 800e906:	d1ec      	bne.n	800e8e2 <_tx_mutex_prioritize+0x2e>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800e908:	69c5      	ldr	r5, [r0, #28]
 800e90a:	42bd      	cmp	r5, r7
 800e90c:	d020      	beq.n	800e950 <_tx_mutex_prioritize+0x9c>
 800e90e:	462f      	mov	r7, r5
 800e910:	e7e8      	b.n	800e8e4 <_tx_mutex_prioritize+0x30>
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800e912:	429d      	cmp	r5, r3
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800e914:	bf38      	it	cc
 800e916:	6181      	strcc	r1, [r0, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e918:	f384 8810 	msr	PRIMASK, r4
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 800e91c:	2000      	movs	r0, #0
 800e91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _tx_thread_preempt_disable--;
 800e920:	f8dc 1000 	ldr.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 800e924:	4293      	cmp	r3, r2
        _tx_thread_preempt_disable--;
 800e926:	f101 31ff 	add.w	r1, r1, #4294967295
 800e92a:	f8cc 1000 	str.w	r1, [ip]
        if (priority_thread_ptr != head_ptr)
 800e92e:	d009      	beq.n	800e944 <_tx_mutex_prioritize+0x90>
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800e930:	e9d2 651c 	ldrd	r6, r5, [r2, #112]	; 0x70
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800e934:	6775      	str	r5, [r6, #116]	; 0x74
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800e936:	6f59      	ldr	r1, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800e938:	672e      	str	r6, [r5, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800e93a:	e9c2 311c 	strd	r3, r1, [r2, #112]	; 0x70
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800e93e:	670a      	str	r2, [r1, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800e940:	675a      	str	r2, [r3, #116]	; 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800e942:	6182      	str	r2, [r0, #24]
 800e944:	f384 8810 	msr	PRIMASK, r4
        _tx_thread_system_preempt_check();
 800e948:	f7ff f8ae 	bl	800daa8 <_tx_thread_system_preempt_check>
}
 800e94c:	2000      	movs	r0, #0
 800e94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800e950:	6f09      	ldr	r1, [r1, #112]	; 0x70
 800e952:	e7c9      	b.n	800e8e8 <_tx_mutex_prioritize+0x34>
 800e954:	20019244 	.word	0x20019244

0800e958 <_tx_thread_delete>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e958:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e95c:	b672      	cpsid	i
    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800e95e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e960:	3b01      	subs	r3, #1
 800e962:	2b01      	cmp	r3, #1
 800e964:	d81e      	bhi.n	800e9a4 <_tx_thread_delete+0x4c>

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 800e966:	4a11      	ldr	r2, [pc, #68]	; (800e9ac <_tx_thread_delete+0x54>)
 800e968:	6813      	ldr	r3, [r2, #0]
{
 800e96a:	b430      	push	{r4, r5}
        _tx_thread_created_count--;
 800e96c:	3b01      	subs	r3, #1
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 800e96e:	2400      	movs	r4, #0
 800e970:	6004      	str	r4, [r0, #0]
        _tx_thread_created_count--;
 800e972:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 800e974:	b17b      	cbz	r3, 800e996 <_tx_thread_delete+0x3e>
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
            next_thread -> tx_thread_created_previous =  previous_thread;
            previous_thread -> tx_thread_created_next =  next_thread;

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 800e976:	4c0e      	ldr	r4, [pc, #56]	; (800e9b0 <_tx_thread_delete+0x58>)
 800e978:	6825      	ldr	r5, [r4, #0]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 800e97a:	e9d0 3222 	ldrd	r3, r2, [r0, #136]	; 0x88
            if (_tx_thread_created_ptr == thread_ptr)
 800e97e:	4285      	cmp	r5, r0
            next_thread -> tx_thread_created_previous =  previous_thread;
 800e980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 800e984:	bf08      	it	eq
 800e986:	6023      	streq	r3, [r4, #0]
            previous_thread -> tx_thread_created_next =  next_thread;
 800e988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e98c:	f381 8810 	msr	PRIMASK, r1
 800e990:	2000      	movs	r0, #0
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
}
 800e992:	bc30      	pop	{r4, r5}
 800e994:	4770      	bx	lr
            _tx_thread_created_ptr =  TX_NULL;
 800e996:	4a06      	ldr	r2, [pc, #24]	; (800e9b0 <_tx_thread_delete+0x58>)
 800e998:	6013      	str	r3, [r2, #0]
 800e99a:	f381 8810 	msr	PRIMASK, r1
 800e99e:	2000      	movs	r0, #0
}
 800e9a0:	bc30      	pop	{r4, r5}
 800e9a2:	4770      	bx	lr
 800e9a4:	f381 8810 	msr	PRIMASK, r1
            status =  TX_DELETE_ERROR;
 800e9a8:	2011      	movs	r0, #17
}
 800e9aa:	4770      	bx	lr
 800e9ac:	2001923c 	.word	0x2001923c
 800e9b0:	20019234 	.word	0x20019234

0800e9b4 <_tx_thread_resume>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800e9b4:	b538      	push	{r3, r4, r5, lr}
 800e9b6:	4603      	mov	r3, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e9b8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e9bc:	b672      	cpsid	i
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800e9be:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800e9c0:	2903      	cmp	r1, #3
 800e9c2:	d00a      	beq.n	800e9da <_tx_thread_resume+0x26>
        
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800e9c4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e9c6:	2901      	cmp	r1, #1
 800e9c8:	d003      	beq.n	800e9d2 <_tx_thread_resume+0x1e>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800e9ca:	2012      	movs	r0, #18
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e9cc:	f382 8810 	msr	PRIMASK, r2
    }
#endif

    /* Return completion status. */
    return(status);
}
 800e9d0:	bd38      	pop	{r3, r4, r5, pc}
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e9d2:	2100      	movs	r1, #0
        status =  TX_SUSPEND_LIFTED;
 800e9d4:	2019      	movs	r0, #25
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e9d6:	6359      	str	r1, [r3, #52]	; 0x34
 800e9d8:	e7f8      	b.n	800e9cc <_tx_thread_resume+0x18>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e9da:	f3ef 8405 	mrs	r4, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800e9de:	4913      	ldr	r1, [pc, #76]	; (800ea2c <_tx_thread_resume+0x78>)
 800e9e0:	6809      	ldr	r1, [r1, #0]
 800e9e2:	4321      	orrs	r1, r4
 800e9e4:	f1b1 3ff0 	cmp.w	r1, #4042322160	; 0xf0f0f0f0
 800e9e8:	d312      	bcc.n	800ea10 <_tx_thread_resume+0x5c>
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800e9ea:	4911      	ldr	r1, [pc, #68]	; (800ea30 <_tx_thread_resume+0x7c>)
 800e9ec:	680c      	ldr	r4, [r1, #0]
            if (saved_thread_ptr != TX_NULL)
 800e9ee:	b1cc      	cbz	r4, 800ea24 <_tx_thread_resume+0x70>
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800e9f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800e9f2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800e9f4:	63e1      	str	r1, [r4, #60]	; 0x3c
        _tx_thread_preempt_disable++;
 800e9f6:	480f      	ldr	r0, [pc, #60]	; (800ea34 <_tx_thread_resume+0x80>)
 800e9f8:	6801      	ldr	r1, [r0, #0]
 800e9fa:	3101      	adds	r1, #1
 800e9fc:	6001      	str	r1, [r0, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e9fe:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7ff f86e 	bl	800dae4 <_tx_thread_system_resume>
        if (saved_thread_ptr != TX_NULL)
 800ea08:	b174      	cbz	r4, 800ea28 <_tx_thread_resume+0x74>
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ea0a:	63e5      	str	r5, [r4, #60]	; 0x3c
        return(TX_SUCCESS);
 800ea0c:	2000      	movs	r0, #0
}
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
        _tx_thread_preempt_disable++;
 800ea10:	4908      	ldr	r1, [pc, #32]	; (800ea34 <_tx_thread_resume+0x80>)
 800ea12:	680b      	ldr	r3, [r1, #0]
 800ea14:	3301      	adds	r3, #1
 800ea16:	600b      	str	r3, [r1, #0]
 800ea18:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 800ea1c:	f7ff f862 	bl	800dae4 <_tx_thread_system_resume>
        return(TX_SUCCESS);
 800ea20:	2000      	movs	r0, #0
}
 800ea22:	bd38      	pop	{r3, r4, r5, pc}
UINT        saved_threshold =  ((UINT) 0);
 800ea24:	4625      	mov	r5, r4
 800ea26:	e7e6      	b.n	800e9f6 <_tx_thread_resume+0x42>
        return(TX_SUCCESS);
 800ea28:	4620      	mov	r0, r4
}
 800ea2a:	bd38      	pop	{r3, r4, r5, pc}
 800ea2c:	2000007c 	.word	0x2000007c
 800ea30:	2001924c 	.word	0x2001924c
 800ea34:	20019244 	.word	0x20019244

0800ea38 <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ea38:	4b16      	ldr	r3, [pc, #88]	; (800ea94 <_tx_thread_time_slice+0x5c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ea3c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ea40:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800ea42:	4915      	ldr	r1, [pc, #84]	; (800ea98 <_tx_thread_time_slice+0x60>)
 800ea44:	2000      	movs	r0, #0
 800ea46:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800ea48:	b193      	cbz	r3, 800ea70 <_tx_thread_time_slice+0x38>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800ea4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ea4c:	b981      	cbnz	r1, 800ea70 <_tx_thread_time_slice+0x38>
            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800ea4e:	6a18      	ldr	r0, [r3, #32]
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ea50:	69d9      	ldr	r1, [r3, #28]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800ea52:	4298      	cmp	r0, r3
{
 800ea54:	b410      	push	{r4}
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800ea56:	4c11      	ldr	r4, [pc, #68]	; (800ea9c <_tx_thread_time_slice+0x64>)
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ea58:	6199      	str	r1, [r3, #24]
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800ea5a:	6021      	str	r1, [r4, #0]
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800ea5c:	d003      	beq.n	800ea66 <_tx_thread_time_slice+0x2e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800ea5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ea60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea62:	4299      	cmp	r1, r3
 800ea64:	d007      	beq.n	800ea76 <_tx_thread_time_slice+0x3e>
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ea66:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800ea6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea6e:	4770      	bx	lr
 800ea70:	f382 8810 	msr	PRIMASK, r2
 800ea74:	4770      	bx	lr
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ea76:	4c0a      	ldr	r4, [pc, #40]	; (800eaa0 <_tx_thread_time_slice+0x68>)
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800ea78:	4b0a      	ldr	r3, [pc, #40]	; (800eaa4 <_tx_thread_time_slice+0x6c>)
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ea7a:	6824      	ldr	r4, [r4, #0]
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800ea7c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ea80:	4909      	ldr	r1, [pc, #36]	; (800eaa8 <_tx_thread_time_slice+0x70>)
 800ea82:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ea86:	600b      	str	r3, [r1, #0]
 800ea88:	f382 8810 	msr	PRIMASK, r2
}
 800ea8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	20019248 	.word	0x20019248
 800ea98:	200197d0 	.word	0x200197d0
 800ea9c:	200192e0 	.word	0x200192e0
 800eaa0:	20019250 	.word	0x20019250
 800eaa4:	200191ac 	.word	0x200191ac
 800eaa8:	2001924c 	.word	0x2001924c

0800eaac <_tx_timer_activate>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800eaac:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eaae:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eab2:	b672      	cpsid	i
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800eab4:	6a04      	ldr	r4, [r0, #32]
 800eab6:	b11c      	cbz	r4, 800eac0 <_tx_timer_activate+0x14>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800eab8:	2017      	movs	r0, #23
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eaba:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
}
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800eac0:	6883      	ldr	r3, [r0, #8]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d0f8      	beq.n	800eab8 <_tx_timer_activate+0xc>
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800eac6:	3008      	adds	r0, #8
 800eac8:	f7ff fa2a 	bl	800df20 <_tx_timer_system_activate>
        status =  TX_SUCCESS;
 800eacc:	4620      	mov	r0, r4
 800eace:	f385 8810 	msr	PRIMASK, r5
}
 800ead2:	bd38      	pop	{r3, r4, r5, pc}

0800ead4 <_tx_timer_delete>:
/*                                                                        */
/*  05-19-2020     William E. Lamie         Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	4604      	mov	r4, r0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ead8:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eadc:	b672      	cpsid	i

    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800eade:	6a03      	ldr	r3, [r0, #32]
 800eae0:	b113      	cbz	r3, 800eae8 <_tx_timer_delete+0x14>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 800eae2:	3008      	adds	r0, #8
 800eae4:	f7ff fa46 	bl	800df74 <_tx_timer_system_deactivate>

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 800eae8:	4a0c      	ldr	r2, [pc, #48]	; (800eb1c <_tx_timer_delete+0x48>)
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 800eaea:	2100      	movs	r1, #0
    _tx_timer_created_count--;
 800eaec:	6813      	ldr	r3, [r2, #0]
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 800eaee:	6021      	str	r1, [r4, #0]
    _tx_timer_created_count--;
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	6013      	str	r3, [r2, #0]
    
    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800eaf4:	b163      	cbz	r3, 800eb10 <_tx_timer_delete+0x3c>
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
        next_timer -> tx_timer_created_previous =  previous_timer;
        previous_timer -> tx_timer_created_next =  next_timer;

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 800eaf6:	490a      	ldr	r1, [pc, #40]	; (800eb20 <_tx_timer_delete+0x4c>)
 800eaf8:	6808      	ldr	r0, [r1, #0]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 800eafa:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
        if (_tx_timer_created_ptr == timer_ptr)
 800eafe:	42a0      	cmp	r0, r4
        next_timer -> tx_timer_created_previous =  previous_timer;
 800eb00:	629a      	str	r2, [r3, #40]	; 0x28
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 800eb02:	bf08      	it	eq
 800eb04:	600b      	streq	r3, [r1, #0]
        previous_timer -> tx_timer_created_next =  next_timer;
 800eb06:	6253      	str	r3, [r2, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eb08:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	bd38      	pop	{r3, r4, r5, pc}
        _tx_timer_created_ptr =  TX_NULL;
 800eb10:	4a03      	ldr	r2, [pc, #12]	; (800eb20 <_tx_timer_delete+0x4c>)
 800eb12:	6013      	str	r3, [r2, #0]
 800eb14:	f385 8810 	msr	PRIMASK, r5
}
 800eb18:	2000      	movs	r0, #0
 800eb1a:	bd38      	pop	{r3, r4, r5, pc}
 800eb1c:	200197cc 	.word	0x200197cc
 800eb20:	200193c0 	.word	0x200193c0

0800eb24 <_tx_timer_expiration_process>:
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eb24:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eb28:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800eb2a:	4a04      	ldr	r2, [pc, #16]	; (800eb3c <_tx_timer_expiration_process+0x18>)
 800eb2c:	6813      	ldr	r3, [r2, #0]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eb32:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800eb36:	4802      	ldr	r0, [pc, #8]	; (800eb40 <_tx_timer_expiration_process+0x1c>)
 800eb38:	f7fe bfd4 	b.w	800dae4 <_tx_thread_system_resume>
 800eb3c:	20019244 	.word	0x20019244
 800eb40:	200192f0 	.word	0x200192f0

0800eb44 <__libc_init_array>:
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	4e0d      	ldr	r6, [pc, #52]	; (800eb7c <__libc_init_array+0x38>)
 800eb48:	4c0d      	ldr	r4, [pc, #52]	; (800eb80 <__libc_init_array+0x3c>)
 800eb4a:	1ba4      	subs	r4, r4, r6
 800eb4c:	10a4      	asrs	r4, r4, #2
 800eb4e:	2500      	movs	r5, #0
 800eb50:	42a5      	cmp	r5, r4
 800eb52:	d109      	bne.n	800eb68 <__libc_init_array+0x24>
 800eb54:	4e0b      	ldr	r6, [pc, #44]	; (800eb84 <__libc_init_array+0x40>)
 800eb56:	4c0c      	ldr	r4, [pc, #48]	; (800eb88 <__libc_init_array+0x44>)
 800eb58:	f001 f80e 	bl	800fb78 <_init>
 800eb5c:	1ba4      	subs	r4, r4, r6
 800eb5e:	10a4      	asrs	r4, r4, #2
 800eb60:	2500      	movs	r5, #0
 800eb62:	42a5      	cmp	r5, r4
 800eb64:	d105      	bne.n	800eb72 <__libc_init_array+0x2e>
 800eb66:	bd70      	pop	{r4, r5, r6, pc}
 800eb68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb6c:	4798      	blx	r3
 800eb6e:	3501      	adds	r5, #1
 800eb70:	e7ee      	b.n	800eb50 <__libc_init_array+0xc>
 800eb72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb76:	4798      	blx	r3
 800eb78:	3501      	adds	r5, #1
 800eb7a:	e7f2      	b.n	800eb62 <__libc_init_array+0x1e>
 800eb7c:	0800fd94 	.word	0x0800fd94
 800eb80:	0800fd94 	.word	0x0800fd94
 800eb84:	0800fd94 	.word	0x0800fd94
 800eb88:	0800fd98 	.word	0x0800fd98

0800eb8c <memcmp>:
 800eb8c:	b530      	push	{r4, r5, lr}
 800eb8e:	2400      	movs	r4, #0
 800eb90:	42a2      	cmp	r2, r4
 800eb92:	d101      	bne.n	800eb98 <memcmp+0xc>
 800eb94:	2000      	movs	r0, #0
 800eb96:	e007      	b.n	800eba8 <memcmp+0x1c>
 800eb98:	5d03      	ldrb	r3, [r0, r4]
 800eb9a:	3401      	adds	r4, #1
 800eb9c:	190d      	adds	r5, r1, r4
 800eb9e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800eba2:	42ab      	cmp	r3, r5
 800eba4:	d0f4      	beq.n	800eb90 <memcmp+0x4>
 800eba6:	1b58      	subs	r0, r3, r5
 800eba8:	bd30      	pop	{r4, r5, pc}

0800ebaa <memcpy>:
 800ebaa:	b510      	push	{r4, lr}
 800ebac:	1e43      	subs	r3, r0, #1
 800ebae:	440a      	add	r2, r1
 800ebb0:	4291      	cmp	r1, r2
 800ebb2:	d100      	bne.n	800ebb6 <memcpy+0xc>
 800ebb4:	bd10      	pop	{r4, pc}
 800ebb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebbe:	e7f7      	b.n	800ebb0 <memcpy+0x6>

0800ebc0 <memmove>:
 800ebc0:	4288      	cmp	r0, r1
 800ebc2:	b510      	push	{r4, lr}
 800ebc4:	eb01 0302 	add.w	r3, r1, r2
 800ebc8:	d807      	bhi.n	800ebda <memmove+0x1a>
 800ebca:	1e42      	subs	r2, r0, #1
 800ebcc:	4299      	cmp	r1, r3
 800ebce:	d00a      	beq.n	800ebe6 <memmove+0x26>
 800ebd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebd4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ebd8:	e7f8      	b.n	800ebcc <memmove+0xc>
 800ebda:	4283      	cmp	r3, r0
 800ebdc:	d9f5      	bls.n	800ebca <memmove+0xa>
 800ebde:	1881      	adds	r1, r0, r2
 800ebe0:	1ad2      	subs	r2, r2, r3
 800ebe2:	42d3      	cmn	r3, r2
 800ebe4:	d100      	bne.n	800ebe8 <memmove+0x28>
 800ebe6:	bd10      	pop	{r4, pc}
 800ebe8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ebf0:	e7f7      	b.n	800ebe2 <memmove+0x22>

0800ebf2 <memset>:
 800ebf2:	4402      	add	r2, r0
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d100      	bne.n	800ebfc <memset+0xa>
 800ebfa:	4770      	bx	lr
 800ebfc:	f803 1b01 	strb.w	r1, [r3], #1
 800ec00:	e7f9      	b.n	800ebf6 <memset+0x4>
	...

0800ec04 <iprintf>:
 800ec04:	b40f      	push	{r0, r1, r2, r3}
 800ec06:	4b0a      	ldr	r3, [pc, #40]	; (800ec30 <iprintf+0x2c>)
 800ec08:	b513      	push	{r0, r1, r4, lr}
 800ec0a:	681c      	ldr	r4, [r3, #0]
 800ec0c:	b124      	cbz	r4, 800ec18 <iprintf+0x14>
 800ec0e:	69a3      	ldr	r3, [r4, #24]
 800ec10:	b913      	cbnz	r3, 800ec18 <iprintf+0x14>
 800ec12:	4620      	mov	r0, r4
 800ec14:	f000 fa56 	bl	800f0c4 <__sinit>
 800ec18:	ab05      	add	r3, sp, #20
 800ec1a:	9a04      	ldr	r2, [sp, #16]
 800ec1c:	68a1      	ldr	r1, [r4, #8]
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	4620      	mov	r0, r4
 800ec22:	f000 fc17 	bl	800f454 <_vfiprintf_r>
 800ec26:	b002      	add	sp, #8
 800ec28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec2c:	b004      	add	sp, #16
 800ec2e:	4770      	bx	lr
 800ec30:	20000080 	.word	0x20000080

0800ec34 <_puts_r>:
 800ec34:	b570      	push	{r4, r5, r6, lr}
 800ec36:	460e      	mov	r6, r1
 800ec38:	4605      	mov	r5, r0
 800ec3a:	b118      	cbz	r0, 800ec44 <_puts_r+0x10>
 800ec3c:	6983      	ldr	r3, [r0, #24]
 800ec3e:	b90b      	cbnz	r3, 800ec44 <_puts_r+0x10>
 800ec40:	f000 fa40 	bl	800f0c4 <__sinit>
 800ec44:	69ab      	ldr	r3, [r5, #24]
 800ec46:	68ac      	ldr	r4, [r5, #8]
 800ec48:	b913      	cbnz	r3, 800ec50 <_puts_r+0x1c>
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f000 fa3a 	bl	800f0c4 <__sinit>
 800ec50:	4b23      	ldr	r3, [pc, #140]	; (800ece0 <_puts_r+0xac>)
 800ec52:	429c      	cmp	r4, r3
 800ec54:	d117      	bne.n	800ec86 <_puts_r+0x52>
 800ec56:	686c      	ldr	r4, [r5, #4]
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	071b      	lsls	r3, r3, #28
 800ec5c:	d51d      	bpl.n	800ec9a <_puts_r+0x66>
 800ec5e:	6923      	ldr	r3, [r4, #16]
 800ec60:	b1db      	cbz	r3, 800ec9a <_puts_r+0x66>
 800ec62:	3e01      	subs	r6, #1
 800ec64:	68a3      	ldr	r3, [r4, #8]
 800ec66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	60a3      	str	r3, [r4, #8]
 800ec6e:	b9e9      	cbnz	r1, 800ecac <_puts_r+0x78>
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	da2e      	bge.n	800ecd2 <_puts_r+0x9e>
 800ec74:	4622      	mov	r2, r4
 800ec76:	210a      	movs	r1, #10
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f000 f873 	bl	800ed64 <__swbuf_r>
 800ec7e:	3001      	adds	r0, #1
 800ec80:	d011      	beq.n	800eca6 <_puts_r+0x72>
 800ec82:	200a      	movs	r0, #10
 800ec84:	e011      	b.n	800ecaa <_puts_r+0x76>
 800ec86:	4b17      	ldr	r3, [pc, #92]	; (800ece4 <_puts_r+0xb0>)
 800ec88:	429c      	cmp	r4, r3
 800ec8a:	d101      	bne.n	800ec90 <_puts_r+0x5c>
 800ec8c:	68ac      	ldr	r4, [r5, #8]
 800ec8e:	e7e3      	b.n	800ec58 <_puts_r+0x24>
 800ec90:	4b15      	ldr	r3, [pc, #84]	; (800ece8 <_puts_r+0xb4>)
 800ec92:	429c      	cmp	r4, r3
 800ec94:	bf08      	it	eq
 800ec96:	68ec      	ldreq	r4, [r5, #12]
 800ec98:	e7de      	b.n	800ec58 <_puts_r+0x24>
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	f000 f8b3 	bl	800ee08 <__swsetup_r>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d0dd      	beq.n	800ec62 <_puts_r+0x2e>
 800eca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	da04      	bge.n	800ecba <_puts_r+0x86>
 800ecb0:	69a2      	ldr	r2, [r4, #24]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	dc06      	bgt.n	800ecc4 <_puts_r+0x90>
 800ecb6:	290a      	cmp	r1, #10
 800ecb8:	d004      	beq.n	800ecc4 <_puts_r+0x90>
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	6022      	str	r2, [r4, #0]
 800ecc0:	7019      	strb	r1, [r3, #0]
 800ecc2:	e7cf      	b.n	800ec64 <_puts_r+0x30>
 800ecc4:	4622      	mov	r2, r4
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	f000 f84c 	bl	800ed64 <__swbuf_r>
 800eccc:	3001      	adds	r0, #1
 800ecce:	d1c9      	bne.n	800ec64 <_puts_r+0x30>
 800ecd0:	e7e9      	b.n	800eca6 <_puts_r+0x72>
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	200a      	movs	r0, #10
 800ecd6:	1c5a      	adds	r2, r3, #1
 800ecd8:	6022      	str	r2, [r4, #0]
 800ecda:	7018      	strb	r0, [r3, #0]
 800ecdc:	e7e5      	b.n	800ecaa <_puts_r+0x76>
 800ecde:	bf00      	nop
 800ece0:	0800fd18 	.word	0x0800fd18
 800ece4:	0800fd38 	.word	0x0800fd38
 800ece8:	0800fcf8 	.word	0x0800fcf8

0800ecec <puts>:
 800ecec:	4b02      	ldr	r3, [pc, #8]	; (800ecf8 <puts+0xc>)
 800ecee:	4601      	mov	r1, r0
 800ecf0:	6818      	ldr	r0, [r3, #0]
 800ecf2:	f7ff bf9f 	b.w	800ec34 <_puts_r>
 800ecf6:	bf00      	nop
 800ecf8:	20000080 	.word	0x20000080

0800ecfc <rand>:
 800ecfc:	b538      	push	{r3, r4, r5, lr}
 800ecfe:	4b13      	ldr	r3, [pc, #76]	; (800ed4c <rand+0x50>)
 800ed00:	681c      	ldr	r4, [r3, #0]
 800ed02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed04:	b97b      	cbnz	r3, 800ed26 <rand+0x2a>
 800ed06:	2018      	movs	r0, #24
 800ed08:	f000 faca 	bl	800f2a0 <malloc>
 800ed0c:	4a10      	ldr	r2, [pc, #64]	; (800ed50 <rand+0x54>)
 800ed0e:	4b11      	ldr	r3, [pc, #68]	; (800ed54 <rand+0x58>)
 800ed10:	63a0      	str	r0, [r4, #56]	; 0x38
 800ed12:	e9c0 2300 	strd	r2, r3, [r0]
 800ed16:	4b10      	ldr	r3, [pc, #64]	; (800ed58 <rand+0x5c>)
 800ed18:	6083      	str	r3, [r0, #8]
 800ed1a:	230b      	movs	r3, #11
 800ed1c:	8183      	strh	r3, [r0, #12]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	2300      	movs	r3, #0
 800ed22:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ed26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ed28:	480c      	ldr	r0, [pc, #48]	; (800ed5c <rand+0x60>)
 800ed2a:	690a      	ldr	r2, [r1, #16]
 800ed2c:	694b      	ldr	r3, [r1, #20]
 800ed2e:	4c0c      	ldr	r4, [pc, #48]	; (800ed60 <rand+0x64>)
 800ed30:	4350      	muls	r0, r2
 800ed32:	fb04 0003 	mla	r0, r4, r3, r0
 800ed36:	fba2 2304 	umull	r2, r3, r2, r4
 800ed3a:	4403      	add	r3, r0
 800ed3c:	1c54      	adds	r4, r2, #1
 800ed3e:	f143 0500 	adc.w	r5, r3, #0
 800ed42:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800ed46:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	20000080 	.word	0x20000080
 800ed50:	abcd330e 	.word	0xabcd330e
 800ed54:	e66d1234 	.word	0xe66d1234
 800ed58:	0005deec 	.word	0x0005deec
 800ed5c:	5851f42d 	.word	0x5851f42d
 800ed60:	4c957f2d 	.word	0x4c957f2d

0800ed64 <__swbuf_r>:
 800ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed66:	460e      	mov	r6, r1
 800ed68:	4614      	mov	r4, r2
 800ed6a:	4605      	mov	r5, r0
 800ed6c:	b118      	cbz	r0, 800ed76 <__swbuf_r+0x12>
 800ed6e:	6983      	ldr	r3, [r0, #24]
 800ed70:	b90b      	cbnz	r3, 800ed76 <__swbuf_r+0x12>
 800ed72:	f000 f9a7 	bl	800f0c4 <__sinit>
 800ed76:	4b21      	ldr	r3, [pc, #132]	; (800edfc <__swbuf_r+0x98>)
 800ed78:	429c      	cmp	r4, r3
 800ed7a:	d12a      	bne.n	800edd2 <__swbuf_r+0x6e>
 800ed7c:	686c      	ldr	r4, [r5, #4]
 800ed7e:	69a3      	ldr	r3, [r4, #24]
 800ed80:	60a3      	str	r3, [r4, #8]
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	071a      	lsls	r2, r3, #28
 800ed86:	d52e      	bpl.n	800ede6 <__swbuf_r+0x82>
 800ed88:	6923      	ldr	r3, [r4, #16]
 800ed8a:	b363      	cbz	r3, 800ede6 <__swbuf_r+0x82>
 800ed8c:	6923      	ldr	r3, [r4, #16]
 800ed8e:	6820      	ldr	r0, [r4, #0]
 800ed90:	1ac0      	subs	r0, r0, r3
 800ed92:	6963      	ldr	r3, [r4, #20]
 800ed94:	b2f6      	uxtb	r6, r6
 800ed96:	4283      	cmp	r3, r0
 800ed98:	4637      	mov	r7, r6
 800ed9a:	dc04      	bgt.n	800eda6 <__swbuf_r+0x42>
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	4628      	mov	r0, r5
 800eda0:	f000 f926 	bl	800eff0 <_fflush_r>
 800eda4:	bb28      	cbnz	r0, 800edf2 <__swbuf_r+0x8e>
 800eda6:	68a3      	ldr	r3, [r4, #8]
 800eda8:	3b01      	subs	r3, #1
 800edaa:	60a3      	str	r3, [r4, #8]
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	1c5a      	adds	r2, r3, #1
 800edb0:	6022      	str	r2, [r4, #0]
 800edb2:	701e      	strb	r6, [r3, #0]
 800edb4:	6963      	ldr	r3, [r4, #20]
 800edb6:	3001      	adds	r0, #1
 800edb8:	4283      	cmp	r3, r0
 800edba:	d004      	beq.n	800edc6 <__swbuf_r+0x62>
 800edbc:	89a3      	ldrh	r3, [r4, #12]
 800edbe:	07db      	lsls	r3, r3, #31
 800edc0:	d519      	bpl.n	800edf6 <__swbuf_r+0x92>
 800edc2:	2e0a      	cmp	r6, #10
 800edc4:	d117      	bne.n	800edf6 <__swbuf_r+0x92>
 800edc6:	4621      	mov	r1, r4
 800edc8:	4628      	mov	r0, r5
 800edca:	f000 f911 	bl	800eff0 <_fflush_r>
 800edce:	b190      	cbz	r0, 800edf6 <__swbuf_r+0x92>
 800edd0:	e00f      	b.n	800edf2 <__swbuf_r+0x8e>
 800edd2:	4b0b      	ldr	r3, [pc, #44]	; (800ee00 <__swbuf_r+0x9c>)
 800edd4:	429c      	cmp	r4, r3
 800edd6:	d101      	bne.n	800eddc <__swbuf_r+0x78>
 800edd8:	68ac      	ldr	r4, [r5, #8]
 800edda:	e7d0      	b.n	800ed7e <__swbuf_r+0x1a>
 800eddc:	4b09      	ldr	r3, [pc, #36]	; (800ee04 <__swbuf_r+0xa0>)
 800edde:	429c      	cmp	r4, r3
 800ede0:	bf08      	it	eq
 800ede2:	68ec      	ldreq	r4, [r5, #12]
 800ede4:	e7cb      	b.n	800ed7e <__swbuf_r+0x1a>
 800ede6:	4621      	mov	r1, r4
 800ede8:	4628      	mov	r0, r5
 800edea:	f000 f80d 	bl	800ee08 <__swsetup_r>
 800edee:	2800      	cmp	r0, #0
 800edf0:	d0cc      	beq.n	800ed8c <__swbuf_r+0x28>
 800edf2:	f04f 37ff 	mov.w	r7, #4294967295
 800edf6:	4638      	mov	r0, r7
 800edf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edfa:	bf00      	nop
 800edfc:	0800fd18 	.word	0x0800fd18
 800ee00:	0800fd38 	.word	0x0800fd38
 800ee04:	0800fcf8 	.word	0x0800fcf8

0800ee08 <__swsetup_r>:
 800ee08:	4b32      	ldr	r3, [pc, #200]	; (800eed4 <__swsetup_r+0xcc>)
 800ee0a:	b570      	push	{r4, r5, r6, lr}
 800ee0c:	681d      	ldr	r5, [r3, #0]
 800ee0e:	4606      	mov	r6, r0
 800ee10:	460c      	mov	r4, r1
 800ee12:	b125      	cbz	r5, 800ee1e <__swsetup_r+0x16>
 800ee14:	69ab      	ldr	r3, [r5, #24]
 800ee16:	b913      	cbnz	r3, 800ee1e <__swsetup_r+0x16>
 800ee18:	4628      	mov	r0, r5
 800ee1a:	f000 f953 	bl	800f0c4 <__sinit>
 800ee1e:	4b2e      	ldr	r3, [pc, #184]	; (800eed8 <__swsetup_r+0xd0>)
 800ee20:	429c      	cmp	r4, r3
 800ee22:	d10f      	bne.n	800ee44 <__swsetup_r+0x3c>
 800ee24:	686c      	ldr	r4, [r5, #4]
 800ee26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	0715      	lsls	r5, r2, #28
 800ee2e:	d42c      	bmi.n	800ee8a <__swsetup_r+0x82>
 800ee30:	06d0      	lsls	r0, r2, #27
 800ee32:	d411      	bmi.n	800ee58 <__swsetup_r+0x50>
 800ee34:	2209      	movs	r2, #9
 800ee36:	6032      	str	r2, [r6, #0]
 800ee38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee3c:	81a3      	strh	r3, [r4, #12]
 800ee3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee42:	e03e      	b.n	800eec2 <__swsetup_r+0xba>
 800ee44:	4b25      	ldr	r3, [pc, #148]	; (800eedc <__swsetup_r+0xd4>)
 800ee46:	429c      	cmp	r4, r3
 800ee48:	d101      	bne.n	800ee4e <__swsetup_r+0x46>
 800ee4a:	68ac      	ldr	r4, [r5, #8]
 800ee4c:	e7eb      	b.n	800ee26 <__swsetup_r+0x1e>
 800ee4e:	4b24      	ldr	r3, [pc, #144]	; (800eee0 <__swsetup_r+0xd8>)
 800ee50:	429c      	cmp	r4, r3
 800ee52:	bf08      	it	eq
 800ee54:	68ec      	ldreq	r4, [r5, #12]
 800ee56:	e7e6      	b.n	800ee26 <__swsetup_r+0x1e>
 800ee58:	0751      	lsls	r1, r2, #29
 800ee5a:	d512      	bpl.n	800ee82 <__swsetup_r+0x7a>
 800ee5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee5e:	b141      	cbz	r1, 800ee72 <__swsetup_r+0x6a>
 800ee60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee64:	4299      	cmp	r1, r3
 800ee66:	d002      	beq.n	800ee6e <__swsetup_r+0x66>
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f000 fa21 	bl	800f2b0 <_free_r>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	6363      	str	r3, [r4, #52]	; 0x34
 800ee72:	89a3      	ldrh	r3, [r4, #12]
 800ee74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee78:	81a3      	strh	r3, [r4, #12]
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	6063      	str	r3, [r4, #4]
 800ee7e:	6923      	ldr	r3, [r4, #16]
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	89a3      	ldrh	r3, [r4, #12]
 800ee84:	f043 0308 	orr.w	r3, r3, #8
 800ee88:	81a3      	strh	r3, [r4, #12]
 800ee8a:	6923      	ldr	r3, [r4, #16]
 800ee8c:	b94b      	cbnz	r3, 800eea2 <__swsetup_r+0x9a>
 800ee8e:	89a3      	ldrh	r3, [r4, #12]
 800ee90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee98:	d003      	beq.n	800eea2 <__swsetup_r+0x9a>
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	f000 f9bf 	bl	800f220 <__smakebuf_r>
 800eea2:	89a2      	ldrh	r2, [r4, #12]
 800eea4:	f012 0301 	ands.w	r3, r2, #1
 800eea8:	d00c      	beq.n	800eec4 <__swsetup_r+0xbc>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	60a3      	str	r3, [r4, #8]
 800eeae:	6963      	ldr	r3, [r4, #20]
 800eeb0:	425b      	negs	r3, r3
 800eeb2:	61a3      	str	r3, [r4, #24]
 800eeb4:	6923      	ldr	r3, [r4, #16]
 800eeb6:	b953      	cbnz	r3, 800eece <__swsetup_r+0xc6>
 800eeb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eebc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800eec0:	d1ba      	bne.n	800ee38 <__swsetup_r+0x30>
 800eec2:	bd70      	pop	{r4, r5, r6, pc}
 800eec4:	0792      	lsls	r2, r2, #30
 800eec6:	bf58      	it	pl
 800eec8:	6963      	ldrpl	r3, [r4, #20]
 800eeca:	60a3      	str	r3, [r4, #8]
 800eecc:	e7f2      	b.n	800eeb4 <__swsetup_r+0xac>
 800eece:	2000      	movs	r0, #0
 800eed0:	e7f7      	b.n	800eec2 <__swsetup_r+0xba>
 800eed2:	bf00      	nop
 800eed4:	20000080 	.word	0x20000080
 800eed8:	0800fd18 	.word	0x0800fd18
 800eedc:	0800fd38 	.word	0x0800fd38
 800eee0:	0800fcf8 	.word	0x0800fcf8

0800eee4 <__sflush_r>:
 800eee4:	898a      	ldrh	r2, [r1, #12]
 800eee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeea:	4605      	mov	r5, r0
 800eeec:	0710      	lsls	r0, r2, #28
 800eeee:	460c      	mov	r4, r1
 800eef0:	d458      	bmi.n	800efa4 <__sflush_r+0xc0>
 800eef2:	684b      	ldr	r3, [r1, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	dc05      	bgt.n	800ef04 <__sflush_r+0x20>
 800eef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	dc02      	bgt.n	800ef04 <__sflush_r+0x20>
 800eefe:	2000      	movs	r0, #0
 800ef00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	d0f9      	beq.n	800eefe <__sflush_r+0x1a>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef10:	682f      	ldr	r7, [r5, #0]
 800ef12:	6a21      	ldr	r1, [r4, #32]
 800ef14:	602b      	str	r3, [r5, #0]
 800ef16:	d032      	beq.n	800ef7e <__sflush_r+0x9a>
 800ef18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef1a:	89a3      	ldrh	r3, [r4, #12]
 800ef1c:	075a      	lsls	r2, r3, #29
 800ef1e:	d505      	bpl.n	800ef2c <__sflush_r+0x48>
 800ef20:	6863      	ldr	r3, [r4, #4]
 800ef22:	1ac0      	subs	r0, r0, r3
 800ef24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef26:	b10b      	cbz	r3, 800ef2c <__sflush_r+0x48>
 800ef28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef2a:	1ac0      	subs	r0, r0, r3
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	4602      	mov	r2, r0
 800ef30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef32:	6a21      	ldr	r1, [r4, #32]
 800ef34:	4628      	mov	r0, r5
 800ef36:	47b0      	blx	r6
 800ef38:	1c43      	adds	r3, r0, #1
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	d106      	bne.n	800ef4c <__sflush_r+0x68>
 800ef3e:	6829      	ldr	r1, [r5, #0]
 800ef40:	291d      	cmp	r1, #29
 800ef42:	d848      	bhi.n	800efd6 <__sflush_r+0xf2>
 800ef44:	4a29      	ldr	r2, [pc, #164]	; (800efec <__sflush_r+0x108>)
 800ef46:	40ca      	lsrs	r2, r1
 800ef48:	07d6      	lsls	r6, r2, #31
 800ef4a:	d544      	bpl.n	800efd6 <__sflush_r+0xf2>
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	6062      	str	r2, [r4, #4]
 800ef50:	04d9      	lsls	r1, r3, #19
 800ef52:	6922      	ldr	r2, [r4, #16]
 800ef54:	6022      	str	r2, [r4, #0]
 800ef56:	d504      	bpl.n	800ef62 <__sflush_r+0x7e>
 800ef58:	1c42      	adds	r2, r0, #1
 800ef5a:	d101      	bne.n	800ef60 <__sflush_r+0x7c>
 800ef5c:	682b      	ldr	r3, [r5, #0]
 800ef5e:	b903      	cbnz	r3, 800ef62 <__sflush_r+0x7e>
 800ef60:	6560      	str	r0, [r4, #84]	; 0x54
 800ef62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef64:	602f      	str	r7, [r5, #0]
 800ef66:	2900      	cmp	r1, #0
 800ef68:	d0c9      	beq.n	800eefe <__sflush_r+0x1a>
 800ef6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef6e:	4299      	cmp	r1, r3
 800ef70:	d002      	beq.n	800ef78 <__sflush_r+0x94>
 800ef72:	4628      	mov	r0, r5
 800ef74:	f000 f99c 	bl	800f2b0 <_free_r>
 800ef78:	2000      	movs	r0, #0
 800ef7a:	6360      	str	r0, [r4, #52]	; 0x34
 800ef7c:	e7c0      	b.n	800ef00 <__sflush_r+0x1c>
 800ef7e:	2301      	movs	r3, #1
 800ef80:	4628      	mov	r0, r5
 800ef82:	47b0      	blx	r6
 800ef84:	1c41      	adds	r1, r0, #1
 800ef86:	d1c8      	bne.n	800ef1a <__sflush_r+0x36>
 800ef88:	682b      	ldr	r3, [r5, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d0c5      	beq.n	800ef1a <__sflush_r+0x36>
 800ef8e:	2b1d      	cmp	r3, #29
 800ef90:	d001      	beq.n	800ef96 <__sflush_r+0xb2>
 800ef92:	2b16      	cmp	r3, #22
 800ef94:	d101      	bne.n	800ef9a <__sflush_r+0xb6>
 800ef96:	602f      	str	r7, [r5, #0]
 800ef98:	e7b1      	b.n	800eefe <__sflush_r+0x1a>
 800ef9a:	89a3      	ldrh	r3, [r4, #12]
 800ef9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efa0:	81a3      	strh	r3, [r4, #12]
 800efa2:	e7ad      	b.n	800ef00 <__sflush_r+0x1c>
 800efa4:	690f      	ldr	r7, [r1, #16]
 800efa6:	2f00      	cmp	r7, #0
 800efa8:	d0a9      	beq.n	800eefe <__sflush_r+0x1a>
 800efaa:	0793      	lsls	r3, r2, #30
 800efac:	680e      	ldr	r6, [r1, #0]
 800efae:	bf08      	it	eq
 800efb0:	694b      	ldreq	r3, [r1, #20]
 800efb2:	600f      	str	r7, [r1, #0]
 800efb4:	bf18      	it	ne
 800efb6:	2300      	movne	r3, #0
 800efb8:	eba6 0807 	sub.w	r8, r6, r7
 800efbc:	608b      	str	r3, [r1, #8]
 800efbe:	f1b8 0f00 	cmp.w	r8, #0
 800efc2:	dd9c      	ble.n	800eefe <__sflush_r+0x1a>
 800efc4:	4643      	mov	r3, r8
 800efc6:	463a      	mov	r2, r7
 800efc8:	6a21      	ldr	r1, [r4, #32]
 800efca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efcc:	4628      	mov	r0, r5
 800efce:	47b0      	blx	r6
 800efd0:	2800      	cmp	r0, #0
 800efd2:	dc06      	bgt.n	800efe2 <__sflush_r+0xfe>
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efda:	81a3      	strh	r3, [r4, #12]
 800efdc:	f04f 30ff 	mov.w	r0, #4294967295
 800efe0:	e78e      	b.n	800ef00 <__sflush_r+0x1c>
 800efe2:	4407      	add	r7, r0
 800efe4:	eba8 0800 	sub.w	r8, r8, r0
 800efe8:	e7e9      	b.n	800efbe <__sflush_r+0xda>
 800efea:	bf00      	nop
 800efec:	20400001 	.word	0x20400001

0800eff0 <_fflush_r>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	690b      	ldr	r3, [r1, #16]
 800eff4:	4605      	mov	r5, r0
 800eff6:	460c      	mov	r4, r1
 800eff8:	b1db      	cbz	r3, 800f032 <_fflush_r+0x42>
 800effa:	b118      	cbz	r0, 800f004 <_fflush_r+0x14>
 800effc:	6983      	ldr	r3, [r0, #24]
 800effe:	b90b      	cbnz	r3, 800f004 <_fflush_r+0x14>
 800f000:	f000 f860 	bl	800f0c4 <__sinit>
 800f004:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <_fflush_r+0x48>)
 800f006:	429c      	cmp	r4, r3
 800f008:	d109      	bne.n	800f01e <_fflush_r+0x2e>
 800f00a:	686c      	ldr	r4, [r5, #4]
 800f00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f010:	b17b      	cbz	r3, 800f032 <_fflush_r+0x42>
 800f012:	4621      	mov	r1, r4
 800f014:	4628      	mov	r0, r5
 800f016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f01a:	f7ff bf63 	b.w	800eee4 <__sflush_r>
 800f01e:	4b07      	ldr	r3, [pc, #28]	; (800f03c <_fflush_r+0x4c>)
 800f020:	429c      	cmp	r4, r3
 800f022:	d101      	bne.n	800f028 <_fflush_r+0x38>
 800f024:	68ac      	ldr	r4, [r5, #8]
 800f026:	e7f1      	b.n	800f00c <_fflush_r+0x1c>
 800f028:	4b05      	ldr	r3, [pc, #20]	; (800f040 <_fflush_r+0x50>)
 800f02a:	429c      	cmp	r4, r3
 800f02c:	bf08      	it	eq
 800f02e:	68ec      	ldreq	r4, [r5, #12]
 800f030:	e7ec      	b.n	800f00c <_fflush_r+0x1c>
 800f032:	2000      	movs	r0, #0
 800f034:	bd38      	pop	{r3, r4, r5, pc}
 800f036:	bf00      	nop
 800f038:	0800fd18 	.word	0x0800fd18
 800f03c:	0800fd38 	.word	0x0800fd38
 800f040:	0800fcf8 	.word	0x0800fcf8

0800f044 <std>:
 800f044:	2300      	movs	r3, #0
 800f046:	b510      	push	{r4, lr}
 800f048:	4604      	mov	r4, r0
 800f04a:	e9c0 3300 	strd	r3, r3, [r0]
 800f04e:	6083      	str	r3, [r0, #8]
 800f050:	8181      	strh	r1, [r0, #12]
 800f052:	6643      	str	r3, [r0, #100]	; 0x64
 800f054:	81c2      	strh	r2, [r0, #14]
 800f056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f05a:	6183      	str	r3, [r0, #24]
 800f05c:	4619      	mov	r1, r3
 800f05e:	2208      	movs	r2, #8
 800f060:	305c      	adds	r0, #92	; 0x5c
 800f062:	f7ff fdc6 	bl	800ebf2 <memset>
 800f066:	4b05      	ldr	r3, [pc, #20]	; (800f07c <std+0x38>)
 800f068:	6263      	str	r3, [r4, #36]	; 0x24
 800f06a:	4b05      	ldr	r3, [pc, #20]	; (800f080 <std+0x3c>)
 800f06c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f06e:	4b05      	ldr	r3, [pc, #20]	; (800f084 <std+0x40>)
 800f070:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f072:	4b05      	ldr	r3, [pc, #20]	; (800f088 <std+0x44>)
 800f074:	6224      	str	r4, [r4, #32]
 800f076:	6323      	str	r3, [r4, #48]	; 0x30
 800f078:	bd10      	pop	{r4, pc}
 800f07a:	bf00      	nop
 800f07c:	0800f9b1 	.word	0x0800f9b1
 800f080:	0800f9d3 	.word	0x0800f9d3
 800f084:	0800fa0b 	.word	0x0800fa0b
 800f088:	0800fa2f 	.word	0x0800fa2f

0800f08c <_cleanup_r>:
 800f08c:	4901      	ldr	r1, [pc, #4]	; (800f094 <_cleanup_r+0x8>)
 800f08e:	f000 b885 	b.w	800f19c <_fwalk_reent>
 800f092:	bf00      	nop
 800f094:	0800eff1 	.word	0x0800eff1

0800f098 <__sfmoreglue>:
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	1e4a      	subs	r2, r1, #1
 800f09c:	2568      	movs	r5, #104	; 0x68
 800f09e:	4355      	muls	r5, r2
 800f0a0:	460e      	mov	r6, r1
 800f0a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f0a6:	f000 f951 	bl	800f34c <_malloc_r>
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	b140      	cbz	r0, 800f0c0 <__sfmoreglue+0x28>
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	e9c0 1600 	strd	r1, r6, [r0]
 800f0b4:	300c      	adds	r0, #12
 800f0b6:	60a0      	str	r0, [r4, #8]
 800f0b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0bc:	f7ff fd99 	bl	800ebf2 <memset>
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}

0800f0c4 <__sinit>:
 800f0c4:	6983      	ldr	r3, [r0, #24]
 800f0c6:	b510      	push	{r4, lr}
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	bb33      	cbnz	r3, 800f11a <__sinit+0x56>
 800f0cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f0d0:	6503      	str	r3, [r0, #80]	; 0x50
 800f0d2:	4b12      	ldr	r3, [pc, #72]	; (800f11c <__sinit+0x58>)
 800f0d4:	4a12      	ldr	r2, [pc, #72]	; (800f120 <__sinit+0x5c>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	6282      	str	r2, [r0, #40]	; 0x28
 800f0da:	4298      	cmp	r0, r3
 800f0dc:	bf04      	itt	eq
 800f0de:	2301      	moveq	r3, #1
 800f0e0:	6183      	streq	r3, [r0, #24]
 800f0e2:	f000 f81f 	bl	800f124 <__sfp>
 800f0e6:	6060      	str	r0, [r4, #4]
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f000 f81b 	bl	800f124 <__sfp>
 800f0ee:	60a0      	str	r0, [r4, #8]
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f000 f817 	bl	800f124 <__sfp>
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	60e0      	str	r0, [r4, #12]
 800f0fa:	2104      	movs	r1, #4
 800f0fc:	6860      	ldr	r0, [r4, #4]
 800f0fe:	f7ff ffa1 	bl	800f044 <std>
 800f102:	2201      	movs	r2, #1
 800f104:	2109      	movs	r1, #9
 800f106:	68a0      	ldr	r0, [r4, #8]
 800f108:	f7ff ff9c 	bl	800f044 <std>
 800f10c:	2202      	movs	r2, #2
 800f10e:	2112      	movs	r1, #18
 800f110:	68e0      	ldr	r0, [r4, #12]
 800f112:	f7ff ff97 	bl	800f044 <std>
 800f116:	2301      	movs	r3, #1
 800f118:	61a3      	str	r3, [r4, #24]
 800f11a:	bd10      	pop	{r4, pc}
 800f11c:	0800fcf4 	.word	0x0800fcf4
 800f120:	0800f08d 	.word	0x0800f08d

0800f124 <__sfp>:
 800f124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f126:	4b1b      	ldr	r3, [pc, #108]	; (800f194 <__sfp+0x70>)
 800f128:	681e      	ldr	r6, [r3, #0]
 800f12a:	69b3      	ldr	r3, [r6, #24]
 800f12c:	4607      	mov	r7, r0
 800f12e:	b913      	cbnz	r3, 800f136 <__sfp+0x12>
 800f130:	4630      	mov	r0, r6
 800f132:	f7ff ffc7 	bl	800f0c4 <__sinit>
 800f136:	3648      	adds	r6, #72	; 0x48
 800f138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f13c:	3b01      	subs	r3, #1
 800f13e:	d503      	bpl.n	800f148 <__sfp+0x24>
 800f140:	6833      	ldr	r3, [r6, #0]
 800f142:	b133      	cbz	r3, 800f152 <__sfp+0x2e>
 800f144:	6836      	ldr	r6, [r6, #0]
 800f146:	e7f7      	b.n	800f138 <__sfp+0x14>
 800f148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f14c:	b16d      	cbz	r5, 800f16a <__sfp+0x46>
 800f14e:	3468      	adds	r4, #104	; 0x68
 800f150:	e7f4      	b.n	800f13c <__sfp+0x18>
 800f152:	2104      	movs	r1, #4
 800f154:	4638      	mov	r0, r7
 800f156:	f7ff ff9f 	bl	800f098 <__sfmoreglue>
 800f15a:	6030      	str	r0, [r6, #0]
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d1f1      	bne.n	800f144 <__sfp+0x20>
 800f160:	230c      	movs	r3, #12
 800f162:	603b      	str	r3, [r7, #0]
 800f164:	4604      	mov	r4, r0
 800f166:	4620      	mov	r0, r4
 800f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f16a:	4b0b      	ldr	r3, [pc, #44]	; (800f198 <__sfp+0x74>)
 800f16c:	6665      	str	r5, [r4, #100]	; 0x64
 800f16e:	e9c4 5500 	strd	r5, r5, [r4]
 800f172:	60a5      	str	r5, [r4, #8]
 800f174:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f178:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f17c:	2208      	movs	r2, #8
 800f17e:	4629      	mov	r1, r5
 800f180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f184:	f7ff fd35 	bl	800ebf2 <memset>
 800f188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f18c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f190:	e7e9      	b.n	800f166 <__sfp+0x42>
 800f192:	bf00      	nop
 800f194:	0800fcf4 	.word	0x0800fcf4
 800f198:	ffff0001 	.word	0xffff0001

0800f19c <_fwalk_reent>:
 800f19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a0:	4680      	mov	r8, r0
 800f1a2:	4689      	mov	r9, r1
 800f1a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1a8:	2600      	movs	r6, #0
 800f1aa:	b914      	cbnz	r4, 800f1b2 <_fwalk_reent+0x16>
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f1b6:	3f01      	subs	r7, #1
 800f1b8:	d501      	bpl.n	800f1be <_fwalk_reent+0x22>
 800f1ba:	6824      	ldr	r4, [r4, #0]
 800f1bc:	e7f5      	b.n	800f1aa <_fwalk_reent+0xe>
 800f1be:	89ab      	ldrh	r3, [r5, #12]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d907      	bls.n	800f1d4 <_fwalk_reent+0x38>
 800f1c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	d003      	beq.n	800f1d4 <_fwalk_reent+0x38>
 800f1cc:	4629      	mov	r1, r5
 800f1ce:	4640      	mov	r0, r8
 800f1d0:	47c8      	blx	r9
 800f1d2:	4306      	orrs	r6, r0
 800f1d4:	3568      	adds	r5, #104	; 0x68
 800f1d6:	e7ee      	b.n	800f1b6 <_fwalk_reent+0x1a>

0800f1d8 <__swhatbuf_r>:
 800f1d8:	b570      	push	{r4, r5, r6, lr}
 800f1da:	460e      	mov	r6, r1
 800f1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e0:	2900      	cmp	r1, #0
 800f1e2:	b096      	sub	sp, #88	; 0x58
 800f1e4:	4614      	mov	r4, r2
 800f1e6:	461d      	mov	r5, r3
 800f1e8:	da07      	bge.n	800f1fa <__swhatbuf_r+0x22>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	602b      	str	r3, [r5, #0]
 800f1ee:	89b3      	ldrh	r3, [r6, #12]
 800f1f0:	061a      	lsls	r2, r3, #24
 800f1f2:	d410      	bmi.n	800f216 <__swhatbuf_r+0x3e>
 800f1f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1f8:	e00e      	b.n	800f218 <__swhatbuf_r+0x40>
 800f1fa:	466a      	mov	r2, sp
 800f1fc:	f000 fc3e 	bl	800fa7c <_fstat_r>
 800f200:	2800      	cmp	r0, #0
 800f202:	dbf2      	blt.n	800f1ea <__swhatbuf_r+0x12>
 800f204:	9a01      	ldr	r2, [sp, #4]
 800f206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f20a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f20e:	425a      	negs	r2, r3
 800f210:	415a      	adcs	r2, r3
 800f212:	602a      	str	r2, [r5, #0]
 800f214:	e7ee      	b.n	800f1f4 <__swhatbuf_r+0x1c>
 800f216:	2340      	movs	r3, #64	; 0x40
 800f218:	2000      	movs	r0, #0
 800f21a:	6023      	str	r3, [r4, #0]
 800f21c:	b016      	add	sp, #88	; 0x58
 800f21e:	bd70      	pop	{r4, r5, r6, pc}

0800f220 <__smakebuf_r>:
 800f220:	898b      	ldrh	r3, [r1, #12]
 800f222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f224:	079d      	lsls	r5, r3, #30
 800f226:	4606      	mov	r6, r0
 800f228:	460c      	mov	r4, r1
 800f22a:	d507      	bpl.n	800f23c <__smakebuf_r+0x1c>
 800f22c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f230:	6023      	str	r3, [r4, #0]
 800f232:	6123      	str	r3, [r4, #16]
 800f234:	2301      	movs	r3, #1
 800f236:	6163      	str	r3, [r4, #20]
 800f238:	b002      	add	sp, #8
 800f23a:	bd70      	pop	{r4, r5, r6, pc}
 800f23c:	ab01      	add	r3, sp, #4
 800f23e:	466a      	mov	r2, sp
 800f240:	f7ff ffca 	bl	800f1d8 <__swhatbuf_r>
 800f244:	9900      	ldr	r1, [sp, #0]
 800f246:	4605      	mov	r5, r0
 800f248:	4630      	mov	r0, r6
 800f24a:	f000 f87f 	bl	800f34c <_malloc_r>
 800f24e:	b948      	cbnz	r0, 800f264 <__smakebuf_r+0x44>
 800f250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f254:	059a      	lsls	r2, r3, #22
 800f256:	d4ef      	bmi.n	800f238 <__smakebuf_r+0x18>
 800f258:	f023 0303 	bic.w	r3, r3, #3
 800f25c:	f043 0302 	orr.w	r3, r3, #2
 800f260:	81a3      	strh	r3, [r4, #12]
 800f262:	e7e3      	b.n	800f22c <__smakebuf_r+0xc>
 800f264:	4b0d      	ldr	r3, [pc, #52]	; (800f29c <__smakebuf_r+0x7c>)
 800f266:	62b3      	str	r3, [r6, #40]	; 0x28
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	6020      	str	r0, [r4, #0]
 800f26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	9b00      	ldr	r3, [sp, #0]
 800f274:	6163      	str	r3, [r4, #20]
 800f276:	9b01      	ldr	r3, [sp, #4]
 800f278:	6120      	str	r0, [r4, #16]
 800f27a:	b15b      	cbz	r3, 800f294 <__smakebuf_r+0x74>
 800f27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f280:	4630      	mov	r0, r6
 800f282:	f000 fc0d 	bl	800faa0 <_isatty_r>
 800f286:	b128      	cbz	r0, 800f294 <__smakebuf_r+0x74>
 800f288:	89a3      	ldrh	r3, [r4, #12]
 800f28a:	f023 0303 	bic.w	r3, r3, #3
 800f28e:	f043 0301 	orr.w	r3, r3, #1
 800f292:	81a3      	strh	r3, [r4, #12]
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	431d      	orrs	r5, r3
 800f298:	81a5      	strh	r5, [r4, #12]
 800f29a:	e7cd      	b.n	800f238 <__smakebuf_r+0x18>
 800f29c:	0800f08d 	.word	0x0800f08d

0800f2a0 <malloc>:
 800f2a0:	4b02      	ldr	r3, [pc, #8]	; (800f2ac <malloc+0xc>)
 800f2a2:	4601      	mov	r1, r0
 800f2a4:	6818      	ldr	r0, [r3, #0]
 800f2a6:	f000 b851 	b.w	800f34c <_malloc_r>
 800f2aa:	bf00      	nop
 800f2ac:	20000080 	.word	0x20000080

0800f2b0 <_free_r>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	4605      	mov	r5, r0
 800f2b4:	2900      	cmp	r1, #0
 800f2b6:	d045      	beq.n	800f344 <_free_r+0x94>
 800f2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2bc:	1f0c      	subs	r4, r1, #4
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	bfb8      	it	lt
 800f2c2:	18e4      	addlt	r4, r4, r3
 800f2c4:	f000 fc0e 	bl	800fae4 <__malloc_lock>
 800f2c8:	4a1f      	ldr	r2, [pc, #124]	; (800f348 <_free_r+0x98>)
 800f2ca:	6813      	ldr	r3, [r2, #0]
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	b933      	cbnz	r3, 800f2de <_free_r+0x2e>
 800f2d0:	6063      	str	r3, [r4, #4]
 800f2d2:	6014      	str	r4, [r2, #0]
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2da:	f000 bc04 	b.w	800fae6 <__malloc_unlock>
 800f2de:	42a3      	cmp	r3, r4
 800f2e0:	d90c      	bls.n	800f2fc <_free_r+0x4c>
 800f2e2:	6821      	ldr	r1, [r4, #0]
 800f2e4:	1862      	adds	r2, r4, r1
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	bf04      	itt	eq
 800f2ea:	681a      	ldreq	r2, [r3, #0]
 800f2ec:	685b      	ldreq	r3, [r3, #4]
 800f2ee:	6063      	str	r3, [r4, #4]
 800f2f0:	bf04      	itt	eq
 800f2f2:	1852      	addeq	r2, r2, r1
 800f2f4:	6022      	streq	r2, [r4, #0]
 800f2f6:	6004      	str	r4, [r0, #0]
 800f2f8:	e7ec      	b.n	800f2d4 <_free_r+0x24>
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	685a      	ldr	r2, [r3, #4]
 800f2fe:	b10a      	cbz	r2, 800f304 <_free_r+0x54>
 800f300:	42a2      	cmp	r2, r4
 800f302:	d9fa      	bls.n	800f2fa <_free_r+0x4a>
 800f304:	6819      	ldr	r1, [r3, #0]
 800f306:	1858      	adds	r0, r3, r1
 800f308:	42a0      	cmp	r0, r4
 800f30a:	d10b      	bne.n	800f324 <_free_r+0x74>
 800f30c:	6820      	ldr	r0, [r4, #0]
 800f30e:	4401      	add	r1, r0
 800f310:	1858      	adds	r0, r3, r1
 800f312:	4282      	cmp	r2, r0
 800f314:	6019      	str	r1, [r3, #0]
 800f316:	d1dd      	bne.n	800f2d4 <_free_r+0x24>
 800f318:	6810      	ldr	r0, [r2, #0]
 800f31a:	6852      	ldr	r2, [r2, #4]
 800f31c:	605a      	str	r2, [r3, #4]
 800f31e:	4401      	add	r1, r0
 800f320:	6019      	str	r1, [r3, #0]
 800f322:	e7d7      	b.n	800f2d4 <_free_r+0x24>
 800f324:	d902      	bls.n	800f32c <_free_r+0x7c>
 800f326:	230c      	movs	r3, #12
 800f328:	602b      	str	r3, [r5, #0]
 800f32a:	e7d3      	b.n	800f2d4 <_free_r+0x24>
 800f32c:	6820      	ldr	r0, [r4, #0]
 800f32e:	1821      	adds	r1, r4, r0
 800f330:	428a      	cmp	r2, r1
 800f332:	bf04      	itt	eq
 800f334:	6811      	ldreq	r1, [r2, #0]
 800f336:	6852      	ldreq	r2, [r2, #4]
 800f338:	6062      	str	r2, [r4, #4]
 800f33a:	bf04      	itt	eq
 800f33c:	1809      	addeq	r1, r1, r0
 800f33e:	6021      	streq	r1, [r4, #0]
 800f340:	605c      	str	r4, [r3, #4]
 800f342:	e7c7      	b.n	800f2d4 <_free_r+0x24>
 800f344:	bd38      	pop	{r3, r4, r5, pc}
 800f346:	bf00      	nop
 800f348:	200015fc 	.word	0x200015fc

0800f34c <_malloc_r>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	1ccd      	adds	r5, r1, #3
 800f350:	f025 0503 	bic.w	r5, r5, #3
 800f354:	3508      	adds	r5, #8
 800f356:	2d0c      	cmp	r5, #12
 800f358:	bf38      	it	cc
 800f35a:	250c      	movcc	r5, #12
 800f35c:	2d00      	cmp	r5, #0
 800f35e:	4606      	mov	r6, r0
 800f360:	db01      	blt.n	800f366 <_malloc_r+0x1a>
 800f362:	42a9      	cmp	r1, r5
 800f364:	d903      	bls.n	800f36e <_malloc_r+0x22>
 800f366:	230c      	movs	r3, #12
 800f368:	6033      	str	r3, [r6, #0]
 800f36a:	2000      	movs	r0, #0
 800f36c:	bd70      	pop	{r4, r5, r6, pc}
 800f36e:	f000 fbb9 	bl	800fae4 <__malloc_lock>
 800f372:	4a21      	ldr	r2, [pc, #132]	; (800f3f8 <_malloc_r+0xac>)
 800f374:	6814      	ldr	r4, [r2, #0]
 800f376:	4621      	mov	r1, r4
 800f378:	b991      	cbnz	r1, 800f3a0 <_malloc_r+0x54>
 800f37a:	4c20      	ldr	r4, [pc, #128]	; (800f3fc <_malloc_r+0xb0>)
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	b91b      	cbnz	r3, 800f388 <_malloc_r+0x3c>
 800f380:	4630      	mov	r0, r6
 800f382:	f000 fb05 	bl	800f990 <_sbrk_r>
 800f386:	6020      	str	r0, [r4, #0]
 800f388:	4629      	mov	r1, r5
 800f38a:	4630      	mov	r0, r6
 800f38c:	f000 fb00 	bl	800f990 <_sbrk_r>
 800f390:	1c43      	adds	r3, r0, #1
 800f392:	d124      	bne.n	800f3de <_malloc_r+0x92>
 800f394:	230c      	movs	r3, #12
 800f396:	6033      	str	r3, [r6, #0]
 800f398:	4630      	mov	r0, r6
 800f39a:	f000 fba4 	bl	800fae6 <__malloc_unlock>
 800f39e:	e7e4      	b.n	800f36a <_malloc_r+0x1e>
 800f3a0:	680b      	ldr	r3, [r1, #0]
 800f3a2:	1b5b      	subs	r3, r3, r5
 800f3a4:	d418      	bmi.n	800f3d8 <_malloc_r+0x8c>
 800f3a6:	2b0b      	cmp	r3, #11
 800f3a8:	d90f      	bls.n	800f3ca <_malloc_r+0x7e>
 800f3aa:	600b      	str	r3, [r1, #0]
 800f3ac:	50cd      	str	r5, [r1, r3]
 800f3ae:	18cc      	adds	r4, r1, r3
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f000 fb98 	bl	800fae6 <__malloc_unlock>
 800f3b6:	f104 000b 	add.w	r0, r4, #11
 800f3ba:	1d23      	adds	r3, r4, #4
 800f3bc:	f020 0007 	bic.w	r0, r0, #7
 800f3c0:	1ac3      	subs	r3, r0, r3
 800f3c2:	d0d3      	beq.n	800f36c <_malloc_r+0x20>
 800f3c4:	425a      	negs	r2, r3
 800f3c6:	50e2      	str	r2, [r4, r3]
 800f3c8:	e7d0      	b.n	800f36c <_malloc_r+0x20>
 800f3ca:	428c      	cmp	r4, r1
 800f3cc:	684b      	ldr	r3, [r1, #4]
 800f3ce:	bf16      	itet	ne
 800f3d0:	6063      	strne	r3, [r4, #4]
 800f3d2:	6013      	streq	r3, [r2, #0]
 800f3d4:	460c      	movne	r4, r1
 800f3d6:	e7eb      	b.n	800f3b0 <_malloc_r+0x64>
 800f3d8:	460c      	mov	r4, r1
 800f3da:	6849      	ldr	r1, [r1, #4]
 800f3dc:	e7cc      	b.n	800f378 <_malloc_r+0x2c>
 800f3de:	1cc4      	adds	r4, r0, #3
 800f3e0:	f024 0403 	bic.w	r4, r4, #3
 800f3e4:	42a0      	cmp	r0, r4
 800f3e6:	d005      	beq.n	800f3f4 <_malloc_r+0xa8>
 800f3e8:	1a21      	subs	r1, r4, r0
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f000 fad0 	bl	800f990 <_sbrk_r>
 800f3f0:	3001      	adds	r0, #1
 800f3f2:	d0cf      	beq.n	800f394 <_malloc_r+0x48>
 800f3f4:	6025      	str	r5, [r4, #0]
 800f3f6:	e7db      	b.n	800f3b0 <_malloc_r+0x64>
 800f3f8:	200015fc 	.word	0x200015fc
 800f3fc:	20001600 	.word	0x20001600

0800f400 <__sfputc_r>:
 800f400:	6893      	ldr	r3, [r2, #8]
 800f402:	3b01      	subs	r3, #1
 800f404:	2b00      	cmp	r3, #0
 800f406:	b410      	push	{r4}
 800f408:	6093      	str	r3, [r2, #8]
 800f40a:	da08      	bge.n	800f41e <__sfputc_r+0x1e>
 800f40c:	6994      	ldr	r4, [r2, #24]
 800f40e:	42a3      	cmp	r3, r4
 800f410:	db01      	blt.n	800f416 <__sfputc_r+0x16>
 800f412:	290a      	cmp	r1, #10
 800f414:	d103      	bne.n	800f41e <__sfputc_r+0x1e>
 800f416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f41a:	f7ff bca3 	b.w	800ed64 <__swbuf_r>
 800f41e:	6813      	ldr	r3, [r2, #0]
 800f420:	1c58      	adds	r0, r3, #1
 800f422:	6010      	str	r0, [r2, #0]
 800f424:	7019      	strb	r1, [r3, #0]
 800f426:	4608      	mov	r0, r1
 800f428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <__sfputs_r>:
 800f42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f430:	4606      	mov	r6, r0
 800f432:	460f      	mov	r7, r1
 800f434:	4614      	mov	r4, r2
 800f436:	18d5      	adds	r5, r2, r3
 800f438:	42ac      	cmp	r4, r5
 800f43a:	d101      	bne.n	800f440 <__sfputs_r+0x12>
 800f43c:	2000      	movs	r0, #0
 800f43e:	e007      	b.n	800f450 <__sfputs_r+0x22>
 800f440:	463a      	mov	r2, r7
 800f442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f446:	4630      	mov	r0, r6
 800f448:	f7ff ffda 	bl	800f400 <__sfputc_r>
 800f44c:	1c43      	adds	r3, r0, #1
 800f44e:	d1f3      	bne.n	800f438 <__sfputs_r+0xa>
 800f450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f454 <_vfiprintf_r>:
 800f454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	460c      	mov	r4, r1
 800f45a:	b09d      	sub	sp, #116	; 0x74
 800f45c:	4617      	mov	r7, r2
 800f45e:	461d      	mov	r5, r3
 800f460:	4606      	mov	r6, r0
 800f462:	b118      	cbz	r0, 800f46c <_vfiprintf_r+0x18>
 800f464:	6983      	ldr	r3, [r0, #24]
 800f466:	b90b      	cbnz	r3, 800f46c <_vfiprintf_r+0x18>
 800f468:	f7ff fe2c 	bl	800f0c4 <__sinit>
 800f46c:	4b7c      	ldr	r3, [pc, #496]	; (800f660 <_vfiprintf_r+0x20c>)
 800f46e:	429c      	cmp	r4, r3
 800f470:	d158      	bne.n	800f524 <_vfiprintf_r+0xd0>
 800f472:	6874      	ldr	r4, [r6, #4]
 800f474:	89a3      	ldrh	r3, [r4, #12]
 800f476:	0718      	lsls	r0, r3, #28
 800f478:	d55e      	bpl.n	800f538 <_vfiprintf_r+0xe4>
 800f47a:	6923      	ldr	r3, [r4, #16]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d05b      	beq.n	800f538 <_vfiprintf_r+0xe4>
 800f480:	2300      	movs	r3, #0
 800f482:	9309      	str	r3, [sp, #36]	; 0x24
 800f484:	2320      	movs	r3, #32
 800f486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f48a:	2330      	movs	r3, #48	; 0x30
 800f48c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f490:	9503      	str	r5, [sp, #12]
 800f492:	f04f 0b01 	mov.w	fp, #1
 800f496:	46b8      	mov	r8, r7
 800f498:	4645      	mov	r5, r8
 800f49a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f49e:	b10b      	cbz	r3, 800f4a4 <_vfiprintf_r+0x50>
 800f4a0:	2b25      	cmp	r3, #37	; 0x25
 800f4a2:	d154      	bne.n	800f54e <_vfiprintf_r+0xfa>
 800f4a4:	ebb8 0a07 	subs.w	sl, r8, r7
 800f4a8:	d00b      	beq.n	800f4c2 <_vfiprintf_r+0x6e>
 800f4aa:	4653      	mov	r3, sl
 800f4ac:	463a      	mov	r2, r7
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	f7ff ffbc 	bl	800f42e <__sfputs_r>
 800f4b6:	3001      	adds	r0, #1
 800f4b8:	f000 80c2 	beq.w	800f640 <_vfiprintf_r+0x1ec>
 800f4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4be:	4453      	add	r3, sl
 800f4c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c2:	f898 3000 	ldrb.w	r3, [r8]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	f000 80ba 	beq.w	800f640 <_vfiprintf_r+0x1ec>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4d6:	9304      	str	r3, [sp, #16]
 800f4d8:	9307      	str	r3, [sp, #28]
 800f4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4de:	931a      	str	r3, [sp, #104]	; 0x68
 800f4e0:	46a8      	mov	r8, r5
 800f4e2:	2205      	movs	r2, #5
 800f4e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f4e8:	485e      	ldr	r0, [pc, #376]	; (800f664 <_vfiprintf_r+0x210>)
 800f4ea:	f7f0 ffc9 	bl	8000480 <memchr>
 800f4ee:	9b04      	ldr	r3, [sp, #16]
 800f4f0:	bb78      	cbnz	r0, 800f552 <_vfiprintf_r+0xfe>
 800f4f2:	06d9      	lsls	r1, r3, #27
 800f4f4:	bf44      	itt	mi
 800f4f6:	2220      	movmi	r2, #32
 800f4f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f4fc:	071a      	lsls	r2, r3, #28
 800f4fe:	bf44      	itt	mi
 800f500:	222b      	movmi	r2, #43	; 0x2b
 800f502:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f506:	782a      	ldrb	r2, [r5, #0]
 800f508:	2a2a      	cmp	r2, #42	; 0x2a
 800f50a:	d02a      	beq.n	800f562 <_vfiprintf_r+0x10e>
 800f50c:	9a07      	ldr	r2, [sp, #28]
 800f50e:	46a8      	mov	r8, r5
 800f510:	2000      	movs	r0, #0
 800f512:	250a      	movs	r5, #10
 800f514:	4641      	mov	r1, r8
 800f516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f51a:	3b30      	subs	r3, #48	; 0x30
 800f51c:	2b09      	cmp	r3, #9
 800f51e:	d969      	bls.n	800f5f4 <_vfiprintf_r+0x1a0>
 800f520:	b360      	cbz	r0, 800f57c <_vfiprintf_r+0x128>
 800f522:	e024      	b.n	800f56e <_vfiprintf_r+0x11a>
 800f524:	4b50      	ldr	r3, [pc, #320]	; (800f668 <_vfiprintf_r+0x214>)
 800f526:	429c      	cmp	r4, r3
 800f528:	d101      	bne.n	800f52e <_vfiprintf_r+0xda>
 800f52a:	68b4      	ldr	r4, [r6, #8]
 800f52c:	e7a2      	b.n	800f474 <_vfiprintf_r+0x20>
 800f52e:	4b4f      	ldr	r3, [pc, #316]	; (800f66c <_vfiprintf_r+0x218>)
 800f530:	429c      	cmp	r4, r3
 800f532:	bf08      	it	eq
 800f534:	68f4      	ldreq	r4, [r6, #12]
 800f536:	e79d      	b.n	800f474 <_vfiprintf_r+0x20>
 800f538:	4621      	mov	r1, r4
 800f53a:	4630      	mov	r0, r6
 800f53c:	f7ff fc64 	bl	800ee08 <__swsetup_r>
 800f540:	2800      	cmp	r0, #0
 800f542:	d09d      	beq.n	800f480 <_vfiprintf_r+0x2c>
 800f544:	f04f 30ff 	mov.w	r0, #4294967295
 800f548:	b01d      	add	sp, #116	; 0x74
 800f54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54e:	46a8      	mov	r8, r5
 800f550:	e7a2      	b.n	800f498 <_vfiprintf_r+0x44>
 800f552:	4a44      	ldr	r2, [pc, #272]	; (800f664 <_vfiprintf_r+0x210>)
 800f554:	1a80      	subs	r0, r0, r2
 800f556:	fa0b f000 	lsl.w	r0, fp, r0
 800f55a:	4318      	orrs	r0, r3
 800f55c:	9004      	str	r0, [sp, #16]
 800f55e:	4645      	mov	r5, r8
 800f560:	e7be      	b.n	800f4e0 <_vfiprintf_r+0x8c>
 800f562:	9a03      	ldr	r2, [sp, #12]
 800f564:	1d11      	adds	r1, r2, #4
 800f566:	6812      	ldr	r2, [r2, #0]
 800f568:	9103      	str	r1, [sp, #12]
 800f56a:	2a00      	cmp	r2, #0
 800f56c:	db01      	blt.n	800f572 <_vfiprintf_r+0x11e>
 800f56e:	9207      	str	r2, [sp, #28]
 800f570:	e004      	b.n	800f57c <_vfiprintf_r+0x128>
 800f572:	4252      	negs	r2, r2
 800f574:	f043 0302 	orr.w	r3, r3, #2
 800f578:	9207      	str	r2, [sp, #28]
 800f57a:	9304      	str	r3, [sp, #16]
 800f57c:	f898 3000 	ldrb.w	r3, [r8]
 800f580:	2b2e      	cmp	r3, #46	; 0x2e
 800f582:	d10e      	bne.n	800f5a2 <_vfiprintf_r+0x14e>
 800f584:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f588:	2b2a      	cmp	r3, #42	; 0x2a
 800f58a:	d138      	bne.n	800f5fe <_vfiprintf_r+0x1aa>
 800f58c:	9b03      	ldr	r3, [sp, #12]
 800f58e:	1d1a      	adds	r2, r3, #4
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	9203      	str	r2, [sp, #12]
 800f594:	2b00      	cmp	r3, #0
 800f596:	bfb8      	it	lt
 800f598:	f04f 33ff 	movlt.w	r3, #4294967295
 800f59c:	f108 0802 	add.w	r8, r8, #2
 800f5a0:	9305      	str	r3, [sp, #20]
 800f5a2:	4d33      	ldr	r5, [pc, #204]	; (800f670 <_vfiprintf_r+0x21c>)
 800f5a4:	f898 1000 	ldrb.w	r1, [r8]
 800f5a8:	2203      	movs	r2, #3
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	f7f0 ff68 	bl	8000480 <memchr>
 800f5b0:	b140      	cbz	r0, 800f5c4 <_vfiprintf_r+0x170>
 800f5b2:	2340      	movs	r3, #64	; 0x40
 800f5b4:	1b40      	subs	r0, r0, r5
 800f5b6:	fa03 f000 	lsl.w	r0, r3, r0
 800f5ba:	9b04      	ldr	r3, [sp, #16]
 800f5bc:	4303      	orrs	r3, r0
 800f5be:	f108 0801 	add.w	r8, r8, #1
 800f5c2:	9304      	str	r3, [sp, #16]
 800f5c4:	f898 1000 	ldrb.w	r1, [r8]
 800f5c8:	482a      	ldr	r0, [pc, #168]	; (800f674 <_vfiprintf_r+0x220>)
 800f5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5ce:	2206      	movs	r2, #6
 800f5d0:	f108 0701 	add.w	r7, r8, #1
 800f5d4:	f7f0 ff54 	bl	8000480 <memchr>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d037      	beq.n	800f64c <_vfiprintf_r+0x1f8>
 800f5dc:	4b26      	ldr	r3, [pc, #152]	; (800f678 <_vfiprintf_r+0x224>)
 800f5de:	bb1b      	cbnz	r3, 800f628 <_vfiprintf_r+0x1d4>
 800f5e0:	9b03      	ldr	r3, [sp, #12]
 800f5e2:	3307      	adds	r3, #7
 800f5e4:	f023 0307 	bic.w	r3, r3, #7
 800f5e8:	3308      	adds	r3, #8
 800f5ea:	9303      	str	r3, [sp, #12]
 800f5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ee:	444b      	add	r3, r9
 800f5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f5f2:	e750      	b.n	800f496 <_vfiprintf_r+0x42>
 800f5f4:	fb05 3202 	mla	r2, r5, r2, r3
 800f5f8:	2001      	movs	r0, #1
 800f5fa:	4688      	mov	r8, r1
 800f5fc:	e78a      	b.n	800f514 <_vfiprintf_r+0xc0>
 800f5fe:	2300      	movs	r3, #0
 800f600:	f108 0801 	add.w	r8, r8, #1
 800f604:	9305      	str	r3, [sp, #20]
 800f606:	4619      	mov	r1, r3
 800f608:	250a      	movs	r5, #10
 800f60a:	4640      	mov	r0, r8
 800f60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f610:	3a30      	subs	r2, #48	; 0x30
 800f612:	2a09      	cmp	r2, #9
 800f614:	d903      	bls.n	800f61e <_vfiprintf_r+0x1ca>
 800f616:	2b00      	cmp	r3, #0
 800f618:	d0c3      	beq.n	800f5a2 <_vfiprintf_r+0x14e>
 800f61a:	9105      	str	r1, [sp, #20]
 800f61c:	e7c1      	b.n	800f5a2 <_vfiprintf_r+0x14e>
 800f61e:	fb05 2101 	mla	r1, r5, r1, r2
 800f622:	2301      	movs	r3, #1
 800f624:	4680      	mov	r8, r0
 800f626:	e7f0      	b.n	800f60a <_vfiprintf_r+0x1b6>
 800f628:	ab03      	add	r3, sp, #12
 800f62a:	9300      	str	r3, [sp, #0]
 800f62c:	4622      	mov	r2, r4
 800f62e:	4b13      	ldr	r3, [pc, #76]	; (800f67c <_vfiprintf_r+0x228>)
 800f630:	a904      	add	r1, sp, #16
 800f632:	4630      	mov	r0, r6
 800f634:	f3af 8000 	nop.w
 800f638:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f63c:	4681      	mov	r9, r0
 800f63e:	d1d5      	bne.n	800f5ec <_vfiprintf_r+0x198>
 800f640:	89a3      	ldrh	r3, [r4, #12]
 800f642:	065b      	lsls	r3, r3, #25
 800f644:	f53f af7e 	bmi.w	800f544 <_vfiprintf_r+0xf0>
 800f648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f64a:	e77d      	b.n	800f548 <_vfiprintf_r+0xf4>
 800f64c:	ab03      	add	r3, sp, #12
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	4622      	mov	r2, r4
 800f652:	4b0a      	ldr	r3, [pc, #40]	; (800f67c <_vfiprintf_r+0x228>)
 800f654:	a904      	add	r1, sp, #16
 800f656:	4630      	mov	r0, r6
 800f658:	f000 f888 	bl	800f76c <_printf_i>
 800f65c:	e7ec      	b.n	800f638 <_vfiprintf_r+0x1e4>
 800f65e:	bf00      	nop
 800f660:	0800fd18 	.word	0x0800fd18
 800f664:	0800fd58 	.word	0x0800fd58
 800f668:	0800fd38 	.word	0x0800fd38
 800f66c:	0800fcf8 	.word	0x0800fcf8
 800f670:	0800fd5e 	.word	0x0800fd5e
 800f674:	0800fd62 	.word	0x0800fd62
 800f678:	00000000 	.word	0x00000000
 800f67c:	0800f42f 	.word	0x0800f42f

0800f680 <_printf_common>:
 800f680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f684:	4691      	mov	r9, r2
 800f686:	461f      	mov	r7, r3
 800f688:	688a      	ldr	r2, [r1, #8]
 800f68a:	690b      	ldr	r3, [r1, #16]
 800f68c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f690:	4293      	cmp	r3, r2
 800f692:	bfb8      	it	lt
 800f694:	4613      	movlt	r3, r2
 800f696:	f8c9 3000 	str.w	r3, [r9]
 800f69a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f69e:	4606      	mov	r6, r0
 800f6a0:	460c      	mov	r4, r1
 800f6a2:	b112      	cbz	r2, 800f6aa <_printf_common+0x2a>
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	f8c9 3000 	str.w	r3, [r9]
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	0699      	lsls	r1, r3, #26
 800f6ae:	bf42      	ittt	mi
 800f6b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f6b4:	3302      	addmi	r3, #2
 800f6b6:	f8c9 3000 	strmi.w	r3, [r9]
 800f6ba:	6825      	ldr	r5, [r4, #0]
 800f6bc:	f015 0506 	ands.w	r5, r5, #6
 800f6c0:	d107      	bne.n	800f6d2 <_printf_common+0x52>
 800f6c2:	f104 0a19 	add.w	sl, r4, #25
 800f6c6:	68e3      	ldr	r3, [r4, #12]
 800f6c8:	f8d9 2000 	ldr.w	r2, [r9]
 800f6cc:	1a9b      	subs	r3, r3, r2
 800f6ce:	42ab      	cmp	r3, r5
 800f6d0:	dc28      	bgt.n	800f724 <_printf_common+0xa4>
 800f6d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f6d6:	6822      	ldr	r2, [r4, #0]
 800f6d8:	3300      	adds	r3, #0
 800f6da:	bf18      	it	ne
 800f6dc:	2301      	movne	r3, #1
 800f6de:	0692      	lsls	r2, r2, #26
 800f6e0:	d42d      	bmi.n	800f73e <_printf_common+0xbe>
 800f6e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6e6:	4639      	mov	r1, r7
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	47c0      	blx	r8
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	d020      	beq.n	800f732 <_printf_common+0xb2>
 800f6f0:	6823      	ldr	r3, [r4, #0]
 800f6f2:	68e5      	ldr	r5, [r4, #12]
 800f6f4:	f8d9 2000 	ldr.w	r2, [r9]
 800f6f8:	f003 0306 	and.w	r3, r3, #6
 800f6fc:	2b04      	cmp	r3, #4
 800f6fe:	bf08      	it	eq
 800f700:	1aad      	subeq	r5, r5, r2
 800f702:	68a3      	ldr	r3, [r4, #8]
 800f704:	6922      	ldr	r2, [r4, #16]
 800f706:	bf0c      	ite	eq
 800f708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f70c:	2500      	movne	r5, #0
 800f70e:	4293      	cmp	r3, r2
 800f710:	bfc4      	itt	gt
 800f712:	1a9b      	subgt	r3, r3, r2
 800f714:	18ed      	addgt	r5, r5, r3
 800f716:	f04f 0900 	mov.w	r9, #0
 800f71a:	341a      	adds	r4, #26
 800f71c:	454d      	cmp	r5, r9
 800f71e:	d11a      	bne.n	800f756 <_printf_common+0xd6>
 800f720:	2000      	movs	r0, #0
 800f722:	e008      	b.n	800f736 <_printf_common+0xb6>
 800f724:	2301      	movs	r3, #1
 800f726:	4652      	mov	r2, sl
 800f728:	4639      	mov	r1, r7
 800f72a:	4630      	mov	r0, r6
 800f72c:	47c0      	blx	r8
 800f72e:	3001      	adds	r0, #1
 800f730:	d103      	bne.n	800f73a <_printf_common+0xba>
 800f732:	f04f 30ff 	mov.w	r0, #4294967295
 800f736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f73a:	3501      	adds	r5, #1
 800f73c:	e7c3      	b.n	800f6c6 <_printf_common+0x46>
 800f73e:	18e1      	adds	r1, r4, r3
 800f740:	1c5a      	adds	r2, r3, #1
 800f742:	2030      	movs	r0, #48	; 0x30
 800f744:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f748:	4422      	add	r2, r4
 800f74a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f74e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f752:	3302      	adds	r3, #2
 800f754:	e7c5      	b.n	800f6e2 <_printf_common+0x62>
 800f756:	2301      	movs	r3, #1
 800f758:	4622      	mov	r2, r4
 800f75a:	4639      	mov	r1, r7
 800f75c:	4630      	mov	r0, r6
 800f75e:	47c0      	blx	r8
 800f760:	3001      	adds	r0, #1
 800f762:	d0e6      	beq.n	800f732 <_printf_common+0xb2>
 800f764:	f109 0901 	add.w	r9, r9, #1
 800f768:	e7d8      	b.n	800f71c <_printf_common+0x9c>
	...

0800f76c <_printf_i>:
 800f76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f770:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f774:	460c      	mov	r4, r1
 800f776:	7e09      	ldrb	r1, [r1, #24]
 800f778:	b085      	sub	sp, #20
 800f77a:	296e      	cmp	r1, #110	; 0x6e
 800f77c:	4617      	mov	r7, r2
 800f77e:	4606      	mov	r6, r0
 800f780:	4698      	mov	r8, r3
 800f782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f784:	f000 80b3 	beq.w	800f8ee <_printf_i+0x182>
 800f788:	d822      	bhi.n	800f7d0 <_printf_i+0x64>
 800f78a:	2963      	cmp	r1, #99	; 0x63
 800f78c:	d036      	beq.n	800f7fc <_printf_i+0x90>
 800f78e:	d80a      	bhi.n	800f7a6 <_printf_i+0x3a>
 800f790:	2900      	cmp	r1, #0
 800f792:	f000 80b9 	beq.w	800f908 <_printf_i+0x19c>
 800f796:	2958      	cmp	r1, #88	; 0x58
 800f798:	f000 8083 	beq.w	800f8a2 <_printf_i+0x136>
 800f79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f7a4:	e032      	b.n	800f80c <_printf_i+0xa0>
 800f7a6:	2964      	cmp	r1, #100	; 0x64
 800f7a8:	d001      	beq.n	800f7ae <_printf_i+0x42>
 800f7aa:	2969      	cmp	r1, #105	; 0x69
 800f7ac:	d1f6      	bne.n	800f79c <_printf_i+0x30>
 800f7ae:	6820      	ldr	r0, [r4, #0]
 800f7b0:	6813      	ldr	r3, [r2, #0]
 800f7b2:	0605      	lsls	r5, r0, #24
 800f7b4:	f103 0104 	add.w	r1, r3, #4
 800f7b8:	d52a      	bpl.n	800f810 <_printf_i+0xa4>
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	6011      	str	r1, [r2, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	da03      	bge.n	800f7ca <_printf_i+0x5e>
 800f7c2:	222d      	movs	r2, #45	; 0x2d
 800f7c4:	425b      	negs	r3, r3
 800f7c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f7ca:	486f      	ldr	r0, [pc, #444]	; (800f988 <_printf_i+0x21c>)
 800f7cc:	220a      	movs	r2, #10
 800f7ce:	e039      	b.n	800f844 <_printf_i+0xd8>
 800f7d0:	2973      	cmp	r1, #115	; 0x73
 800f7d2:	f000 809d 	beq.w	800f910 <_printf_i+0x1a4>
 800f7d6:	d808      	bhi.n	800f7ea <_printf_i+0x7e>
 800f7d8:	296f      	cmp	r1, #111	; 0x6f
 800f7da:	d020      	beq.n	800f81e <_printf_i+0xb2>
 800f7dc:	2970      	cmp	r1, #112	; 0x70
 800f7de:	d1dd      	bne.n	800f79c <_printf_i+0x30>
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	f043 0320 	orr.w	r3, r3, #32
 800f7e6:	6023      	str	r3, [r4, #0]
 800f7e8:	e003      	b.n	800f7f2 <_printf_i+0x86>
 800f7ea:	2975      	cmp	r1, #117	; 0x75
 800f7ec:	d017      	beq.n	800f81e <_printf_i+0xb2>
 800f7ee:	2978      	cmp	r1, #120	; 0x78
 800f7f0:	d1d4      	bne.n	800f79c <_printf_i+0x30>
 800f7f2:	2378      	movs	r3, #120	; 0x78
 800f7f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7f8:	4864      	ldr	r0, [pc, #400]	; (800f98c <_printf_i+0x220>)
 800f7fa:	e055      	b.n	800f8a8 <_printf_i+0x13c>
 800f7fc:	6813      	ldr	r3, [r2, #0]
 800f7fe:	1d19      	adds	r1, r3, #4
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6011      	str	r1, [r2, #0]
 800f804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f80c:	2301      	movs	r3, #1
 800f80e:	e08c      	b.n	800f92a <_printf_i+0x1be>
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	6011      	str	r1, [r2, #0]
 800f814:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f818:	bf18      	it	ne
 800f81a:	b21b      	sxthne	r3, r3
 800f81c:	e7cf      	b.n	800f7be <_printf_i+0x52>
 800f81e:	6813      	ldr	r3, [r2, #0]
 800f820:	6825      	ldr	r5, [r4, #0]
 800f822:	1d18      	adds	r0, r3, #4
 800f824:	6010      	str	r0, [r2, #0]
 800f826:	0628      	lsls	r0, r5, #24
 800f828:	d501      	bpl.n	800f82e <_printf_i+0xc2>
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	e002      	b.n	800f834 <_printf_i+0xc8>
 800f82e:	0668      	lsls	r0, r5, #25
 800f830:	d5fb      	bpl.n	800f82a <_printf_i+0xbe>
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	4854      	ldr	r0, [pc, #336]	; (800f988 <_printf_i+0x21c>)
 800f836:	296f      	cmp	r1, #111	; 0x6f
 800f838:	bf14      	ite	ne
 800f83a:	220a      	movne	r2, #10
 800f83c:	2208      	moveq	r2, #8
 800f83e:	2100      	movs	r1, #0
 800f840:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f844:	6865      	ldr	r5, [r4, #4]
 800f846:	60a5      	str	r5, [r4, #8]
 800f848:	2d00      	cmp	r5, #0
 800f84a:	f2c0 8095 	blt.w	800f978 <_printf_i+0x20c>
 800f84e:	6821      	ldr	r1, [r4, #0]
 800f850:	f021 0104 	bic.w	r1, r1, #4
 800f854:	6021      	str	r1, [r4, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d13d      	bne.n	800f8d6 <_printf_i+0x16a>
 800f85a:	2d00      	cmp	r5, #0
 800f85c:	f040 808e 	bne.w	800f97c <_printf_i+0x210>
 800f860:	4665      	mov	r5, ip
 800f862:	2a08      	cmp	r2, #8
 800f864:	d10b      	bne.n	800f87e <_printf_i+0x112>
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	07db      	lsls	r3, r3, #31
 800f86a:	d508      	bpl.n	800f87e <_printf_i+0x112>
 800f86c:	6923      	ldr	r3, [r4, #16]
 800f86e:	6862      	ldr	r2, [r4, #4]
 800f870:	429a      	cmp	r2, r3
 800f872:	bfde      	ittt	le
 800f874:	2330      	movle	r3, #48	; 0x30
 800f876:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f87a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f87e:	ebac 0305 	sub.w	r3, ip, r5
 800f882:	6123      	str	r3, [r4, #16]
 800f884:	f8cd 8000 	str.w	r8, [sp]
 800f888:	463b      	mov	r3, r7
 800f88a:	aa03      	add	r2, sp, #12
 800f88c:	4621      	mov	r1, r4
 800f88e:	4630      	mov	r0, r6
 800f890:	f7ff fef6 	bl	800f680 <_printf_common>
 800f894:	3001      	adds	r0, #1
 800f896:	d14d      	bne.n	800f934 <_printf_i+0x1c8>
 800f898:	f04f 30ff 	mov.w	r0, #4294967295
 800f89c:	b005      	add	sp, #20
 800f89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8a2:	4839      	ldr	r0, [pc, #228]	; (800f988 <_printf_i+0x21c>)
 800f8a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f8a8:	6813      	ldr	r3, [r2, #0]
 800f8aa:	6821      	ldr	r1, [r4, #0]
 800f8ac:	1d1d      	adds	r5, r3, #4
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	6015      	str	r5, [r2, #0]
 800f8b2:	060a      	lsls	r2, r1, #24
 800f8b4:	d50b      	bpl.n	800f8ce <_printf_i+0x162>
 800f8b6:	07ca      	lsls	r2, r1, #31
 800f8b8:	bf44      	itt	mi
 800f8ba:	f041 0120 	orrmi.w	r1, r1, #32
 800f8be:	6021      	strmi	r1, [r4, #0]
 800f8c0:	b91b      	cbnz	r3, 800f8ca <_printf_i+0x15e>
 800f8c2:	6822      	ldr	r2, [r4, #0]
 800f8c4:	f022 0220 	bic.w	r2, r2, #32
 800f8c8:	6022      	str	r2, [r4, #0]
 800f8ca:	2210      	movs	r2, #16
 800f8cc:	e7b7      	b.n	800f83e <_printf_i+0xd2>
 800f8ce:	064d      	lsls	r5, r1, #25
 800f8d0:	bf48      	it	mi
 800f8d2:	b29b      	uxthmi	r3, r3
 800f8d4:	e7ef      	b.n	800f8b6 <_printf_i+0x14a>
 800f8d6:	4665      	mov	r5, ip
 800f8d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8dc:	fb02 3311 	mls	r3, r2, r1, r3
 800f8e0:	5cc3      	ldrb	r3, [r0, r3]
 800f8e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	2900      	cmp	r1, #0
 800f8ea:	d1f5      	bne.n	800f8d8 <_printf_i+0x16c>
 800f8ec:	e7b9      	b.n	800f862 <_printf_i+0xf6>
 800f8ee:	6813      	ldr	r3, [r2, #0]
 800f8f0:	6825      	ldr	r5, [r4, #0]
 800f8f2:	6961      	ldr	r1, [r4, #20]
 800f8f4:	1d18      	adds	r0, r3, #4
 800f8f6:	6010      	str	r0, [r2, #0]
 800f8f8:	0628      	lsls	r0, r5, #24
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	d501      	bpl.n	800f902 <_printf_i+0x196>
 800f8fe:	6019      	str	r1, [r3, #0]
 800f900:	e002      	b.n	800f908 <_printf_i+0x19c>
 800f902:	066a      	lsls	r2, r5, #25
 800f904:	d5fb      	bpl.n	800f8fe <_printf_i+0x192>
 800f906:	8019      	strh	r1, [r3, #0]
 800f908:	2300      	movs	r3, #0
 800f90a:	6123      	str	r3, [r4, #16]
 800f90c:	4665      	mov	r5, ip
 800f90e:	e7b9      	b.n	800f884 <_printf_i+0x118>
 800f910:	6813      	ldr	r3, [r2, #0]
 800f912:	1d19      	adds	r1, r3, #4
 800f914:	6011      	str	r1, [r2, #0]
 800f916:	681d      	ldr	r5, [r3, #0]
 800f918:	6862      	ldr	r2, [r4, #4]
 800f91a:	2100      	movs	r1, #0
 800f91c:	4628      	mov	r0, r5
 800f91e:	f7f0 fdaf 	bl	8000480 <memchr>
 800f922:	b108      	cbz	r0, 800f928 <_printf_i+0x1bc>
 800f924:	1b40      	subs	r0, r0, r5
 800f926:	6060      	str	r0, [r4, #4]
 800f928:	6863      	ldr	r3, [r4, #4]
 800f92a:	6123      	str	r3, [r4, #16]
 800f92c:	2300      	movs	r3, #0
 800f92e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f932:	e7a7      	b.n	800f884 <_printf_i+0x118>
 800f934:	6923      	ldr	r3, [r4, #16]
 800f936:	462a      	mov	r2, r5
 800f938:	4639      	mov	r1, r7
 800f93a:	4630      	mov	r0, r6
 800f93c:	47c0      	blx	r8
 800f93e:	3001      	adds	r0, #1
 800f940:	d0aa      	beq.n	800f898 <_printf_i+0x12c>
 800f942:	6823      	ldr	r3, [r4, #0]
 800f944:	079b      	lsls	r3, r3, #30
 800f946:	d413      	bmi.n	800f970 <_printf_i+0x204>
 800f948:	68e0      	ldr	r0, [r4, #12]
 800f94a:	9b03      	ldr	r3, [sp, #12]
 800f94c:	4298      	cmp	r0, r3
 800f94e:	bfb8      	it	lt
 800f950:	4618      	movlt	r0, r3
 800f952:	e7a3      	b.n	800f89c <_printf_i+0x130>
 800f954:	2301      	movs	r3, #1
 800f956:	464a      	mov	r2, r9
 800f958:	4639      	mov	r1, r7
 800f95a:	4630      	mov	r0, r6
 800f95c:	47c0      	blx	r8
 800f95e:	3001      	adds	r0, #1
 800f960:	d09a      	beq.n	800f898 <_printf_i+0x12c>
 800f962:	3501      	adds	r5, #1
 800f964:	68e3      	ldr	r3, [r4, #12]
 800f966:	9a03      	ldr	r2, [sp, #12]
 800f968:	1a9b      	subs	r3, r3, r2
 800f96a:	42ab      	cmp	r3, r5
 800f96c:	dcf2      	bgt.n	800f954 <_printf_i+0x1e8>
 800f96e:	e7eb      	b.n	800f948 <_printf_i+0x1dc>
 800f970:	2500      	movs	r5, #0
 800f972:	f104 0919 	add.w	r9, r4, #25
 800f976:	e7f5      	b.n	800f964 <_printf_i+0x1f8>
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1ac      	bne.n	800f8d6 <_printf_i+0x16a>
 800f97c:	7803      	ldrb	r3, [r0, #0]
 800f97e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f982:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f986:	e76c      	b.n	800f862 <_printf_i+0xf6>
 800f988:	0800fd69 	.word	0x0800fd69
 800f98c:	0800fd7a 	.word	0x0800fd7a

0800f990 <_sbrk_r>:
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	4c06      	ldr	r4, [pc, #24]	; (800f9ac <_sbrk_r+0x1c>)
 800f994:	2300      	movs	r3, #0
 800f996:	4605      	mov	r5, r0
 800f998:	4608      	mov	r0, r1
 800f99a:	6023      	str	r3, [r4, #0]
 800f99c:	f000 f8de 	bl	800fb5c <_sbrk>
 800f9a0:	1c43      	adds	r3, r0, #1
 800f9a2:	d102      	bne.n	800f9aa <_sbrk_r+0x1a>
 800f9a4:	6823      	ldr	r3, [r4, #0]
 800f9a6:	b103      	cbz	r3, 800f9aa <_sbrk_r+0x1a>
 800f9a8:	602b      	str	r3, [r5, #0]
 800f9aa:	bd38      	pop	{r3, r4, r5, pc}
 800f9ac:	200197d8 	.word	0x200197d8

0800f9b0 <__sread>:
 800f9b0:	b510      	push	{r4, lr}
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b8:	f000 f896 	bl	800fae8 <_read_r>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	bfab      	itete	ge
 800f9c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f9c2:	89a3      	ldrhlt	r3, [r4, #12]
 800f9c4:	181b      	addge	r3, r3, r0
 800f9c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9ca:	bfac      	ite	ge
 800f9cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9ce:	81a3      	strhlt	r3, [r4, #12]
 800f9d0:	bd10      	pop	{r4, pc}

0800f9d2 <__swrite>:
 800f9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d6:	461f      	mov	r7, r3
 800f9d8:	898b      	ldrh	r3, [r1, #12]
 800f9da:	05db      	lsls	r3, r3, #23
 800f9dc:	4605      	mov	r5, r0
 800f9de:	460c      	mov	r4, r1
 800f9e0:	4616      	mov	r6, r2
 800f9e2:	d505      	bpl.n	800f9f0 <__swrite+0x1e>
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ec:	f000 f868 	bl	800fac0 <_lseek_r>
 800f9f0:	89a3      	ldrh	r3, [r4, #12]
 800f9f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9fa:	81a3      	strh	r3, [r4, #12]
 800f9fc:	4632      	mov	r2, r6
 800f9fe:	463b      	mov	r3, r7
 800fa00:	4628      	mov	r0, r5
 800fa02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa06:	f000 b817 	b.w	800fa38 <_write_r>

0800fa0a <__sseek>:
 800fa0a:	b510      	push	{r4, lr}
 800fa0c:	460c      	mov	r4, r1
 800fa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa12:	f000 f855 	bl	800fac0 <_lseek_r>
 800fa16:	1c43      	adds	r3, r0, #1
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	bf15      	itete	ne
 800fa1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa26:	81a3      	strheq	r3, [r4, #12]
 800fa28:	bf18      	it	ne
 800fa2a:	81a3      	strhne	r3, [r4, #12]
 800fa2c:	bd10      	pop	{r4, pc}

0800fa2e <__sclose>:
 800fa2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa32:	f000 b813 	b.w	800fa5c <_close_r>
	...

0800fa38 <_write_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4c07      	ldr	r4, [pc, #28]	; (800fa58 <_write_r+0x20>)
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	4608      	mov	r0, r1
 800fa40:	4611      	mov	r1, r2
 800fa42:	2200      	movs	r2, #0
 800fa44:	6022      	str	r2, [r4, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	f7f0 ff5c 	bl	8000904 <_write>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d102      	bne.n	800fa56 <_write_r+0x1e>
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	b103      	cbz	r3, 800fa56 <_write_r+0x1e>
 800fa54:	602b      	str	r3, [r5, #0]
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	200197d8 	.word	0x200197d8

0800fa5c <_close_r>:
 800fa5c:	b538      	push	{r3, r4, r5, lr}
 800fa5e:	4c06      	ldr	r4, [pc, #24]	; (800fa78 <_close_r+0x1c>)
 800fa60:	2300      	movs	r3, #0
 800fa62:	4605      	mov	r5, r0
 800fa64:	4608      	mov	r0, r1
 800fa66:	6023      	str	r3, [r4, #0]
 800fa68:	f000 f850 	bl	800fb0c <_close>
 800fa6c:	1c43      	adds	r3, r0, #1
 800fa6e:	d102      	bne.n	800fa76 <_close_r+0x1a>
 800fa70:	6823      	ldr	r3, [r4, #0]
 800fa72:	b103      	cbz	r3, 800fa76 <_close_r+0x1a>
 800fa74:	602b      	str	r3, [r5, #0]
 800fa76:	bd38      	pop	{r3, r4, r5, pc}
 800fa78:	200197d8 	.word	0x200197d8

0800fa7c <_fstat_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4c07      	ldr	r4, [pc, #28]	; (800fa9c <_fstat_r+0x20>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4605      	mov	r5, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	4611      	mov	r1, r2
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	f000 f847 	bl	800fb1c <_fstat>
 800fa8e:	1c43      	adds	r3, r0, #1
 800fa90:	d102      	bne.n	800fa98 <_fstat_r+0x1c>
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	b103      	cbz	r3, 800fa98 <_fstat_r+0x1c>
 800fa96:	602b      	str	r3, [r5, #0]
 800fa98:	bd38      	pop	{r3, r4, r5, pc}
 800fa9a:	bf00      	nop
 800fa9c:	200197d8 	.word	0x200197d8

0800faa0 <_isatty_r>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	4c06      	ldr	r4, [pc, #24]	; (800fabc <_isatty_r+0x1c>)
 800faa4:	2300      	movs	r3, #0
 800faa6:	4605      	mov	r5, r0
 800faa8:	4608      	mov	r0, r1
 800faaa:	6023      	str	r3, [r4, #0]
 800faac:	f000 f83e 	bl	800fb2c <_isatty>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d102      	bne.n	800faba <_isatty_r+0x1a>
 800fab4:	6823      	ldr	r3, [r4, #0]
 800fab6:	b103      	cbz	r3, 800faba <_isatty_r+0x1a>
 800fab8:	602b      	str	r3, [r5, #0]
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	200197d8 	.word	0x200197d8

0800fac0 <_lseek_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4c07      	ldr	r4, [pc, #28]	; (800fae0 <_lseek_r+0x20>)
 800fac4:	4605      	mov	r5, r0
 800fac6:	4608      	mov	r0, r1
 800fac8:	4611      	mov	r1, r2
 800faca:	2200      	movs	r2, #0
 800facc:	6022      	str	r2, [r4, #0]
 800face:	461a      	mov	r2, r3
 800fad0:	f000 f834 	bl	800fb3c <_lseek>
 800fad4:	1c43      	adds	r3, r0, #1
 800fad6:	d102      	bne.n	800fade <_lseek_r+0x1e>
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	b103      	cbz	r3, 800fade <_lseek_r+0x1e>
 800fadc:	602b      	str	r3, [r5, #0]
 800fade:	bd38      	pop	{r3, r4, r5, pc}
 800fae0:	200197d8 	.word	0x200197d8

0800fae4 <__malloc_lock>:
 800fae4:	4770      	bx	lr

0800fae6 <__malloc_unlock>:
 800fae6:	4770      	bx	lr

0800fae8 <_read_r>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4c07      	ldr	r4, [pc, #28]	; (800fb08 <_read_r+0x20>)
 800faec:	4605      	mov	r5, r0
 800faee:	4608      	mov	r0, r1
 800faf0:	4611      	mov	r1, r2
 800faf2:	2200      	movs	r2, #0
 800faf4:	6022      	str	r2, [r4, #0]
 800faf6:	461a      	mov	r2, r3
 800faf8:	f000 f828 	bl	800fb4c <_read>
 800fafc:	1c43      	adds	r3, r0, #1
 800fafe:	d102      	bne.n	800fb06 <_read_r+0x1e>
 800fb00:	6823      	ldr	r3, [r4, #0]
 800fb02:	b103      	cbz	r3, 800fb06 <_read_r+0x1e>
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	bd38      	pop	{r3, r4, r5, pc}
 800fb08:	200197d8 	.word	0x200197d8

0800fb0c <_close>:
 800fb0c:	4b02      	ldr	r3, [pc, #8]	; (800fb18 <_close+0xc>)
 800fb0e:	2258      	movs	r2, #88	; 0x58
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	f04f 30ff 	mov.w	r0, #4294967295
 800fb16:	4770      	bx	lr
 800fb18:	200197d8 	.word	0x200197d8

0800fb1c <_fstat>:
 800fb1c:	4b02      	ldr	r3, [pc, #8]	; (800fb28 <_fstat+0xc>)
 800fb1e:	2258      	movs	r2, #88	; 0x58
 800fb20:	601a      	str	r2, [r3, #0]
 800fb22:	f04f 30ff 	mov.w	r0, #4294967295
 800fb26:	4770      	bx	lr
 800fb28:	200197d8 	.word	0x200197d8

0800fb2c <_isatty>:
 800fb2c:	4b02      	ldr	r3, [pc, #8]	; (800fb38 <_isatty+0xc>)
 800fb2e:	2258      	movs	r2, #88	; 0x58
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	2000      	movs	r0, #0
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	200197d8 	.word	0x200197d8

0800fb3c <_lseek>:
 800fb3c:	4b02      	ldr	r3, [pc, #8]	; (800fb48 <_lseek+0xc>)
 800fb3e:	2258      	movs	r2, #88	; 0x58
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	f04f 30ff 	mov.w	r0, #4294967295
 800fb46:	4770      	bx	lr
 800fb48:	200197d8 	.word	0x200197d8

0800fb4c <_read>:
 800fb4c:	4b02      	ldr	r3, [pc, #8]	; (800fb58 <_read+0xc>)
 800fb4e:	2258      	movs	r2, #88	; 0x58
 800fb50:	601a      	str	r2, [r3, #0]
 800fb52:	f04f 30ff 	mov.w	r0, #4294967295
 800fb56:	4770      	bx	lr
 800fb58:	200197d8 	.word	0x200197d8

0800fb5c <_sbrk>:
 800fb5c:	4b04      	ldr	r3, [pc, #16]	; (800fb70 <_sbrk+0x14>)
 800fb5e:	6819      	ldr	r1, [r3, #0]
 800fb60:	4602      	mov	r2, r0
 800fb62:	b909      	cbnz	r1, 800fb68 <_sbrk+0xc>
 800fb64:	4903      	ldr	r1, [pc, #12]	; (800fb74 <_sbrk+0x18>)
 800fb66:	6019      	str	r1, [r3, #0]
 800fb68:	6818      	ldr	r0, [r3, #0]
 800fb6a:	4402      	add	r2, r0
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	4770      	bx	lr
 800fb70:	20001604 	.word	0x20001604
 800fb74:	200197e0 	.word	0x200197e0

0800fb78 <_init>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	bf00      	nop
 800fb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb7e:	bc08      	pop	{r3}
 800fb80:	469e      	mov	lr, r3
 800fb82:	4770      	bx	lr

0800fb84 <_fini>:
 800fb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb86:	bf00      	nop
 800fb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb8a:	bc08      	pop	{r3}
 800fb8c:	469e      	mov	lr, r3
 800fb8e:	4770      	bx	lr
